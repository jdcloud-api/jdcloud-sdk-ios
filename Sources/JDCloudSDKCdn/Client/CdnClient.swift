/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD CDN Operation And Query API
   API related to CDN instances

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class CdnJDCloudClient:NSObject,JDCloudClient{
    
    private final var cdnJDCloudClient:CdnJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        cdnJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "cdn.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        cdnJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "cdn/" + "v1"
    
    public let serviceName: String = "cdn"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func setOnlineBillingTypeAsync(request:SetOnlineBillingTypeRequest,requestComplation:@escaping ExecuteResult<SetOnlineBillingTypeResult>) throws {
        cdnJDCloudClient = self
        try SetOnlineBillingTypeExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryDomainGroupDetailAsync(request:QueryDomainGroupDetailRequest,requestComplation:@escaping ExecuteResult<QueryDomainGroupDetailResult>) throws {
        cdnJDCloudClient = self
        try QueryDomainGroupDetailExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryWafBlackRuleSwitchAsync(request:QueryWafBlackRuleSwitchRequest,requestComplation:@escaping ExecuteResult<QueryWafBlackRuleSwitchResult>) throws {
        cdnJDCloudClient = self
        try QueryWafBlackRuleSwitchExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func operateLiveDomainIgnoreQueryStringAsync(request:OperateLiveDomainIgnoreQueryStringRequest,requestComplation:@escaping ExecuteResult<OperateLiveDomainIgnoreQueryStringResult>) throws {
        cdnJDCloudClient = self
        try OperateLiveDomainIgnoreQueryStringExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteHttpHeaderAsync(request:DeleteHttpHeaderRequest,requestComplation:@escaping ExecuteResult<DeleteHttpHeaderResult>) throws {
        cdnJDCloudClient = self
        try DeleteHttpHeaderExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableWafBlackRulesAsync(request:DisableWafBlackRulesRequest,requestComplation:@escaping ExecuteResult<DisableWafBlackRulesResult>) throws {
        cdnJDCloudClient = self
        try DisableWafBlackRulesExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryWebProtectSettingsAsync(request:QueryWebProtectSettingsRequest,requestComplation:@escaping ExecuteResult<QueryWebProtectSettingsResult>) throws {
        cdnJDCloudClient = self
        try QueryWebProtectSettingsExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryGeoAreasAsync(request:QueryGeoAreasRequest,requestComplation:@escaping ExecuteResult<QueryGeoAreasResult>) throws {
        cdnJDCloudClient = self
        try QueryGeoAreasExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryStatisticsTopUrlAsync(request:QueryStatisticsTopUrlRequest,requestComplation:@escaping ExecuteResult<QueryStatisticsTopUrlResult>) throws {
        cdnJDCloudClient = self
        try QueryStatisticsTopUrlExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryDomainConfigStatusAsync(request:QueryDomainConfigStatusRequest,requestComplation:@escaping ExecuteResult<QueryDomainConfigStatusResult>) throws {
        cdnJDCloudClient = self
        try QueryDomainConfigStatusExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryLiveStatisticsAreaDataGroupByAsync(request:QueryLiveStatisticsAreaDataGroupByRequest,requestComplation:@escaping ExecuteResult<QueryLiveStatisticsAreaDataGroupByResult>) throws {
        cdnJDCloudClient = self
        try QueryLiveStatisticsAreaDataGroupByExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getAllUpperNodeIpListAsync(request:GetAllUpperNodeIpListRequest,requestComplation:@escaping ExecuteResult<GetAllUpperNodeIpListResult>) throws {
        cdnJDCloudClient = self
        try GetAllUpperNodeIpListExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setIpBlackListAsync(request:SetIpBlackListRequest,requestComplation:@escaping ExecuteResult<SetIpBlackListResult>) throws {
        cdnJDCloudClient = self
        try SetIpBlackListExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateWafWhiteRuleAsync(request:UpdateWafWhiteRuleRequest,requestComplation:@escaping ExecuteResult<UpdateWafWhiteRuleResult>) throws {
        cdnJDCloudClient = self
        try UpdateWafWhiteRuleExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setDomainConfigAsync(request:SetDomainConfigRequest,requestComplation:@escaping ExecuteResult<SetDomainConfigResult>) throws {
        cdnJDCloudClient = self
        try SetDomainConfigExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startDomainAsync(request:StartDomainRequest,requestComplation:@escaping ExecuteResult<StartDomainResult>) throws {
        cdnJDCloudClient = self
        try StartDomainExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setFollowRedirectAsync(request:SetFollowRedirectRequest,requestComplation:@escaping ExecuteResult<SetFollowRedirectResult>) throws {
        cdnJDCloudClient = self
        try SetFollowRedirectExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setAccesskeyConfigAsync(request:SetAccesskeyConfigRequest,requestComplation:@escaping ExecuteResult<SetAccesskeyConfigResult>) throws {
        cdnJDCloudClient = self
        try SetAccesskeyConfigExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryBandWithAreaAsync(request:QueryBandWithAreaRequest,requestComplation:@escaping ExecuteResult<QueryBandWithAreaResult>) throws {
        cdnJDCloudClient = self
        try QueryBandWithAreaExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setRangeAsync(request:SetRangeRequest,requestComplation:@escaping ExecuteResult<SetRangeResult>) throws {
        cdnJDCloudClient = self
        try SetRangeExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setLiveDomainIpBlackListAsync(request:SetLiveDomainIpBlackListRequest,requestComplation:@escaping ExecuteResult<SetLiveDomainIpBlackListResult>) throws {
        cdnJDCloudClient = self
        try SetLiveDomainIpBlackListExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setCCProtectSwitchAsync(request:SetCCProtectSwitchRequest,requestComplation:@escaping ExecuteResult<SetCCProtectSwitchResult>) throws {
        cdnJDCloudClient = self
        try SetCCProtectSwitchExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryMonitorAsync(request:QueryMonitorRequest,requestComplation:@escaping ExecuteResult<QueryMonitorResult>) throws {
        cdnJDCloudClient = self
        try QueryMonitorExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryLiveDomainAppsAsync(request:QueryLiveDomainAppsRequest,requestComplation:@escaping ExecuteResult<QueryLiveDomainAppsResult>) throws {
        cdnJDCloudClient = self
        try QueryLiveDomainAppsExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableWafWhiteRulesAsync(request:DisableWafWhiteRulesRequest,requestComplation:@escaping ExecuteResult<DisableWafWhiteRulesResult>) throws {
        cdnJDCloudClient = self
        try DisableWafWhiteRulesExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createWafBlackRuleAsync(request:CreateWafBlackRuleRequest,requestComplation:@escaping ExecuteResult<CreateWafBlackRuleResult>) throws {
        cdnJDCloudClient = self
        try CreateWafBlackRuleExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createDomainGroupAsync(request:CreateDomainGroupRequest,requestComplation:@escaping ExecuteResult<CreateDomainGroupResult>) throws {
        cdnJDCloudClient = self
        try CreateDomainGroupExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryWebProtectSwitchAsync(request:QueryWebProtectSwitchRequest,requestComplation:@escaping ExecuteResult<QueryWebProtectSwitchResult>) throws {
        cdnJDCloudClient = self
        try QueryWebProtectSwitchExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func wafQueryPvForAreaAndIpAsync(request:WafQueryPvForAreaAndIpRequest,requestComplation:@escaping ExecuteResult<WafQueryPvForAreaAndIpResult>) throws {
        cdnJDCloudClient = self
        try WafQueryPvForAreaAndIpExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func operateIpBlackListAsync(request:OperateIpBlackListRequest,requestComplation:@escaping ExecuteResult<OperateIpBlackListResult>) throws {
        cdnJDCloudClient = self
        try OperateIpBlackListExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryMixStatisticsDataAsync(request:QueryMixStatisticsDataRequest,requestComplation:@escaping ExecuteResult<QueryMixStatisticsDataResult>) throws {
        cdnJDCloudClient = self
        try QueryMixStatisticsDataExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryRefreshTaskAsync(request:QueryRefreshTaskRequest,requestComplation:@escaping ExecuteResult<QueryRefreshTaskResult>) throws {
        cdnJDCloudClient = self
        try QueryRefreshTaskExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDomainDetailAsync(request:GetDomainDetailRequest,requestComplation:@escaping ExecuteResult<GetDomainDetailResult>) throws {
        cdnJDCloudClient = self
        try GetDomainDetailExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setNetProtectionRulesSwitchAsync(request:SetNetProtectionRulesSwitchRequest,requestComplation:@escaping ExecuteResult<SetNetProtectionRulesSwitchResult>) throws {
        cdnJDCloudClient = self
        try SetNetProtectionRulesSwitchExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func searchAttackLogAsync(request:SearchAttackLogRequest,requestComplation:@escaping ExecuteResult<SearchAttackLogResult>) throws {
        cdnJDCloudClient = self
        try SearchAttackLogExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryStatisticsDataGroupByAreaAsync(request:QueryStatisticsDataGroupByAreaRequest,requestComplation:@escaping ExecuteResult<QueryStatisticsDataGroupByAreaResult>) throws {
        cdnJDCloudClient = self
        try QueryStatisticsDataGroupByAreaExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setLiveDomainAccessKeyAsync(request:SetLiveDomainAccessKeyRequest,requestComplation:@escaping ExecuteResult<SetLiveDomainAccessKeyResult>) throws {
        cdnJDCloudClient = self
        try SetLiveDomainAccessKeyExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func querywafBlackRulesAsync(request:QuerywafBlackRulesRequest,requestComplation:@escaping ExecuteResult<QuerywafBlackRulesResult>) throws {
        cdnJDCloudClient = self
        try QuerywafBlackRulesExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteForbiddenStreamAsync(request:DeleteForbiddenStreamRequest,requestComplation:@escaping ExecuteResult<DeleteForbiddenStreamResult>) throws {
        cdnJDCloudClient = self
        try DeleteForbiddenStreamExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setWafWhiteRuleSwitchAsync(request:SetWafWhiteRuleSwitchRequest,requestComplation:@escaping ExecuteResult<SetWafWhiteRuleSwitchResult>) throws {
        cdnJDCloudClient = self
        try SetWafWhiteRuleSwitchExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setPushIpWhiteListAsync(request:SetPushIpWhiteListRequest,requestComplation:@escaping ExecuteResult<SetPushIpWhiteListResult>) throws {
        cdnJDCloudClient = self
        try SetPushIpWhiteListExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryRefreshTaskByIdsAsync(request:QueryRefreshTaskByIdsRequest,requestComplation:@escaping ExecuteResult<QueryRefreshTaskByIdsResult>) throws {
        cdnJDCloudClient = self
        try QueryRefreshTaskByIdsExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryStatisticsDataGroupSumAsync(request:QueryStatisticsDataGroupSumRequest,requestComplation:@escaping ExecuteResult<QueryStatisticsDataGroupSumResult>) throws {
        cdnJDCloudClient = self
        try QueryStatisticsDataGroupSumExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setHttpHeaderAsync(request:SetHttpHeaderRequest,requestComplation:@escaping ExecuteResult<SetHttpHeaderResult>) throws {
        cdnJDCloudClient = self
        try SetHttpHeaderExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryBandAsync(request:QueryBandRequest,requestComplation:@escaping ExecuteResult<QueryBandResult>) throws {
        cdnJDCloudClient = self
        try QueryBandExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func checkWhetherIpBelongToJCloudAsync(request:CheckWhetherIpBelongToJCloudRequest,requestComplation:@escaping ExecuteResult<CheckWhetherIpBelongToJCloudResult>) throws {
        cdnJDCloudClient = self
        try CheckWhetherIpBelongToJCloudExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryLiveStatisticsDataAsync(request:QueryLiveStatisticsDataRequest,requestComplation:@escaping ExecuteResult<QueryLiveStatisticsDataResult>) throws {
        cdnJDCloudClient = self
        try QueryLiveStatisticsDataExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setOriginAuthenticationAsync(request:SetOriginAuthenticationRequest,requestComplation:@escaping ExecuteResult<SetOriginAuthenticationResult>) throws {
        cdnJDCloudClient = self
        try SetOriginAuthenticationExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryDomainsLogAsync(request:QueryDomainsLogRequest,requestComplation:@escaping ExecuteResult<QueryDomainsLogResult>) throws {
        cdnJDCloudClient = self
        try QueryDomainsLogExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableCCProtectRuleAsync(request:EnableCCProtectRuleRequest,requestComplation:@escaping ExecuteResult<EnableCCProtectRuleResult>) throws {
        cdnJDCloudClient = self
        try EnableCCProtectRuleExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryLiveDomainDetailAsync(request:QueryLiveDomainDetailRequest,requestComplation:@escaping ExecuteResult<QueryLiveDomainDetailResult>) throws {
        cdnJDCloudClient = self
        try QueryLiveDomainDetailExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setReferAsync(request:SetReferRequest,requestComplation:@escaping ExecuteResult<SetReferResult>) throws {
        cdnJDCloudClient = self
        try SetReferExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryIpBlackSettingStatusAsync(request:QueryIpBlackSettingStatusRequest,requestComplation:@escaping ExecuteResult<QueryIpBlackSettingStatusResult>) throws {
        cdnJDCloudClient = self
        try QueryIpBlackSettingStatusExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryStatisticsTopIpAsync(request:QueryStatisticsTopIpRequest,requestComplation:@escaping ExecuteResult<QueryStatisticsTopIpResult>) throws {
        cdnJDCloudClient = self
        try QueryStatisticsTopIpExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createLiveDomainPrefecthTaskAsync(request:CreateLiveDomainPrefecthTaskRequest,requestComplation:@escaping ExecuteResult<CreateLiveDomainPrefecthTaskResult>) throws {
        cdnJDCloudClient = self
        try CreateLiveDomainPrefecthTaskExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func wafQueryAttackDetailsAsync(request:WafQueryAttackDetailsRequest,requestComplation:@escaping ExecuteResult<WafQueryAttackDetailsResult>) throws {
        cdnJDCloudClient = self
        try WafQueryAttackDetailsExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopMonitorAsync(request:StopMonitorRequest,requestComplation:@escaping ExecuteResult<StopMonitorResult>) throws {
        cdnJDCloudClient = self
        try StopMonitorExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryHttpHeaderAsync(request:QueryHttpHeaderRequest,requestComplation:@escaping ExecuteResult<QueryHttpHeaderResult>) throws {
        cdnJDCloudClient = self
        try QueryHttpHeaderExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryWafRegionsAsync(request:QueryWafRegionsRequest,requestComplation:@escaping ExecuteResult<QueryWafRegionsResult>) throws {
        cdnJDCloudClient = self
        try QueryWafRegionsExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryLiveDomainDetailV2Async(request:QueryLiveDomainDetailV2Request,requestComplation:@escaping ExecuteResult<QueryLiveDomainDetailV2Result>) throws {
        cdnJDCloudClient = self
        try QueryLiveDomainDetailV2Executor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createRefreshTaskForCallbackV2Async(request:CreateRefreshTaskForCallbackV2Request,requestComplation:@escaping ExecuteResult<CreateRefreshTaskForCallbackV2Result>) throws {
        cdnJDCloudClient = self
        try CreateRefreshTaskForCallbackV2Executor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryWafWhiteRuleSwitchAsync(request:QueryWafWhiteRuleSwitchRequest,requestComplation:@escaping ExecuteResult<QueryWafWhiteRuleSwitchResult>) throws {
        cdnJDCloudClient = self
        try QueryWafWhiteRuleSwitchExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createCCProtectRuleAsync(request:CreateCCProtectRuleRequest,requestComplation:@escaping ExecuteResult<CreateCCProtectRuleResult>) throws {
        cdnJDCloudClient = self
        try CreateCCProtectRuleExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createWafWhiteRuleAsync(request:CreateWafWhiteRuleRequest,requestComplation:@escaping ExecuteResult<CreateWafWhiteRuleResult>) throws {
        cdnJDCloudClient = self
        try CreateWafWhiteRuleExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryLivePrefetchTaskAsync(request:QueryLivePrefetchTaskRequest,requestComplation:@escaping ExecuteResult<QueryLivePrefetchTaskResult>) throws {
        cdnJDCloudClient = self
        try QueryLivePrefetchTaskExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func querywafWhiteRulesAsync(request:QuerywafWhiteRulesRequest,requestComplation:@escaping ExecuteResult<QuerywafWhiteRulesResult>) throws {
        cdnJDCloudClient = self
        try QuerywafWhiteRulesExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setHttpTypeAsync(request:SetHttpTypeRequest,requestComplation:@escaping ExecuteResult<SetHttpTypeResult>) throws {
        cdnJDCloudClient = self
        try SetHttpTypeExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryDomainLogAsync(request:QueryDomainLogRequest,requestComplation:@escaping ExecuteResult<QueryDomainLogResult>) throws {
        cdnJDCloudClient = self
        try QueryDomainLogExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryMixTrafficGroupSumAsync(request:QueryMixTrafficGroupSumRequest,requestComplation:@escaping ExecuteResult<QueryMixTrafficGroupSumResult>) throws {
        cdnJDCloudClient = self
        try QueryMixTrafficGroupSumExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryOssBucketsAsync(request:QueryOssBucketsRequest,requestComplation:@escaping ExecuteResult<QueryOssBucketsResult>) throws {
        cdnJDCloudClient = self
        try QueryOssBucketsExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryAttackTypeCountAsync(request:QueryAttackTypeCountRequest,requestComplation:@escaping ExecuteResult<QueryAttackTypeCountResult>) throws {
        cdnJDCloudClient = self
        try QueryAttackTypeCountExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setLiveDomainBackSourceHostAsync(request:SetLiveDomainBackSourceHostRequest,requestComplation:@escaping ExecuteResult<SetLiveDomainBackSourceHostResult>) throws {
        cdnJDCloudClient = self
        try SetLiveDomainBackSourceHostExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryIpBlackListAsync(request:QueryIpBlackListRequest,requestComplation:@escaping ExecuteResult<QueryIpBlackListResult>) throws {
        cdnJDCloudClient = self
        try QueryIpBlackListExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setProtocolConvertAsync(request:SetProtocolConvertRequest,requestComplation:@escaping ExecuteResult<SetProtocolConvertResult>) throws {
        cdnJDCloudClient = self
        try SetProtocolConvertExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryCCProtectRulesAsync(request:QueryCCProtectRulesRequest,requestComplation:@escaping ExecuteResult<QueryCCProtectRulesResult>) throws {
        cdnJDCloudClient = self
        try QueryCCProtectRulesExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setLiveDomainReferAsync(request:SetLiveDomainReferRequest,requestComplation:@escaping ExecuteResult<SetLiveDomainReferResult>) throws {
        cdnJDCloudClient = self
        try SetLiveDomainReferExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDomainListAsync(request:GetDomainListRequest,requestComplation:@escaping ExecuteResult<GetDomainListResult>) throws {
        cdnJDCloudClient = self
        try GetDomainListExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setIgnoreQueryStringAsync(request:SetIgnoreQueryStringRequest,requestComplation:@escaping ExecuteResult<SetIgnoreQueryStringResult>) throws {
        cdnJDCloudClient = self
        try SetIgnoreQueryStringExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func batchDeleteDomainGroupAsync(request:BatchDeleteDomainGroupRequest,requestComplation:@escaping ExecuteResult<BatchDeleteDomainGroupResult>) throws {
        cdnJDCloudClient = self
        try BatchDeleteDomainGroupExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setUserAgentConfigAsync(request:SetUserAgentConfigRequest,requestComplation:@escaping ExecuteResult<SetUserAgentConfigResult>) throws {
        cdnJDCloudClient = self
        try SetUserAgentConfigExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setNetProtectionRulesAsync(request:SetNetProtectionRulesRequest,requestComplation:@escaping ExecuteResult<SetNetProtectionRulesResult>) throws {
        cdnJDCloudClient = self
        try SetNetProtectionRulesExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setLiveDomainBackSourceAsync(request:SetLiveDomainBackSourceRequest,requestComplation:@escaping ExecuteResult<SetLiveDomainBackSourceResult>) throws {
        cdnJDCloudClient = self
        try SetLiveDomainBackSourceExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setFollowSourceProtocolAsync(request:SetFollowSourceProtocolRequest,requestComplation:@escaping ExecuteResult<SetFollowSourceProtocolResult>) throws {
        cdnJDCloudClient = self
        try SetFollowSourceProtocolExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setPublishNormalTimeoutAsync(request:SetPublishNormalTimeoutRequest,requestComplation:@escaping ExecuteResult<SetPublishNormalTimeoutResult>) throws {
        cdnJDCloudClient = self
        try SetPublishNormalTimeoutExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getSslCertListAsync(request:GetSslCertListRequest,requestComplation:@escaping ExecuteResult<GetSslCertListResult>) throws {
        cdnJDCloudClient = self
        try GetSslCertListExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createDomainAsync(request:CreateDomainRequest,requestComplation:@escaping ExecuteResult<CreateDomainResult>) throws {
        cdnJDCloudClient = self
        try CreateDomainExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryDomainConfigAsync(request:QueryDomainConfigRequest,requestComplation:@escaping ExecuteResult<QueryDomainConfigResult>) throws {
        cdnJDCloudClient = self
        try QueryDomainConfigExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func bindPublishDomainAsync(request:BindPublishDomainRequest,requestComplation:@escaping ExecuteResult<BindPublishDomainResult>) throws {
        cdnJDCloudClient = self
        try BindPublishDomainExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setVideoDraftAsync(request:SetVideoDraftRequest,requestComplation:@escaping ExecuteResult<SetVideoDraftResult>) throws {
        cdnJDCloudClient = self
        try SetVideoDraftExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryCCProtectSwitchAsync(request:QueryCCProtectSwitchRequest,requestComplation:@escaping ExecuteResult<QueryCCProtectSwitchResult>) throws {
        cdnJDCloudClient = self
        try QueryCCProtectSwitchExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createLiveDomainAsync(request:CreateLiveDomainRequest,requestComplation:@escaping ExecuteResult<CreateLiveDomainResult>) throws {
        cdnJDCloudClient = self
        try CreateLiveDomainExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateWebProtectSettingsAsync(request:UpdateWebProtectSettingsRequest,requestComplation:@escaping ExecuteResult<UpdateWebProtectSettingsResult>) throws {
        cdnJDCloudClient = self
        try UpdateWebProtectSettingsExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func operateShareCacheAsync(request:OperateShareCacheRequest,requestComplation:@escaping ExecuteResult<OperateShareCacheResult>) throws {
        cdnJDCloudClient = self
        try OperateShareCacheExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableWafWhiteRulesAsync(request:EnableWafWhiteRulesRequest,requestComplation:@escaping ExecuteResult<EnableWafWhiteRulesResult>) throws {
        cdnJDCloudClient = self
        try EnableWafWhiteRulesExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryMixStatisticsWithAreaDataAsync(request:QueryMixStatisticsWithAreaDataRequest,requestComplation:@escaping ExecuteResult<QueryMixStatisticsWithAreaDataResult>) throws {
        cdnJDCloudClient = self
        try QueryMixStatisticsWithAreaDataExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setWebProtectSwitchAsync(request:SetWebProtectSwitchRequest,requestComplation:@escaping ExecuteResult<SetWebProtectSwitchResult>) throws {
        cdnJDCloudClient = self
        try SetWebProtectSwitchExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func operateLiveDomainIpBlackListAsync(request:OperateLiveDomainIpBlackListRequest,requestComplation:@escaping ExecuteResult<OperateLiveDomainIpBlackListResult>) throws {
        cdnJDCloudClient = self
        try OperateLiveDomainIpBlackListExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryStatisticsDataAsync(request:QueryStatisticsDataRequest,requestComplation:@escaping ExecuteResult<QueryStatisticsDataResult>) throws {
        cdnJDCloudClient = self
        try QueryStatisticsDataExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryAreaIspListAsync(request:QueryAreaIspListRequest,requestComplation:@escaping ExecuteResult<QueryAreaIspListResult>) throws {
        cdnJDCloudClient = self
        try QueryAreaIspListExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteCCProtectRuleAsync(request:DeleteCCProtectRuleRequest,requestComplation:@escaping ExecuteResult<DeleteCCProtectRuleResult>) throws {
        cdnJDCloudClient = self
        try DeleteCCProtectRuleExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setWafBlackRuleSwitchAsync(request:SetWafBlackRuleSwitchRequest,requestComplation:@escaping ExecuteResult<SetWafBlackRuleSwitchResult>) throws {
        cdnJDCloudClient = self
        try SetWafBlackRuleSwitchExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryDefaultHttpHeaderKeyAsync(request:QueryDefaultHttpHeaderKeyRequest,requestComplation:@escaping ExecuteResult<QueryDefaultHttpHeaderKeyResult>) throws {
        cdnJDCloudClient = self
        try QueryDefaultHttpHeaderKeyExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setMonitorAsync(request:SetMonitorRequest,requestComplation:@escaping ExecuteResult<SetMonitorResult>) throws {
        cdnJDCloudClient = self
        try SetMonitorExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteDomainAsync(request:DeleteDomainRequest,requestComplation:@escaping ExecuteResult<DeleteDomainResult>) throws {
        cdnJDCloudClient = self
        try DeleteDomainExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDomainListByFilterAsync(request:GetDomainListByFilterRequest,requestComplation:@escaping ExecuteResult<GetDomainListByFilterResult>) throws {
        cdnJDCloudClient = self
        try GetDomainListByFilterExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryUserAgentAsync(request:QueryUserAgentRequest,requestComplation:@escaping ExecuteResult<QueryUserAgentResult>) throws {
        cdnJDCloudClient = self
        try QueryUserAgentExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func wafQueryPvAsync(request:WafQueryPvRequest,requestComplation:@escaping ExecuteResult<WafQueryPvResult>) throws {
        cdnJDCloudClient = self
        try WafQueryPvExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryPushDomainORAppOrStreamAsync(request:QueryPushDomainORAppOrStreamRequest,requestComplation:@escaping ExecuteResult<QueryPushDomainORAppOrStreamResult>) throws {
        cdnJDCloudClient = self
        try QueryPushDomainORAppOrStreamExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryFollowRedirectAsync(request:QueryFollowRedirectRequest,requestComplation:@escaping ExecuteResult<QueryFollowRedirectResult>) throws {
        cdnJDCloudClient = self
        try QueryFollowRedirectExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteCacheRuleAsync(request:DeleteCacheRuleRequest,requestComplation:@escaping ExecuteResult<DeleteCacheRuleResult>) throws {
        cdnJDCloudClient = self
        try DeleteCacheRuleExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryNetProtectionRulesSwitchAsync(request:QueryNetProtectionRulesSwitchRequest,requestComplation:@escaping ExecuteResult<QueryNetProtectionRulesSwitchResult>) throws {
        cdnJDCloudClient = self
        try QueryNetProtectionRulesSwitchExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryDomainGroupListAsync(request:QueryDomainGroupListRequest,requestComplation:@escaping ExecuteResult<QueryDomainGroupListResult>) throws {
        cdnJDCloudClient = self
        try QueryDomainGroupListExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryDomainsNotInGroupAsync(request:QueryDomainsNotInGroupRequest,requestComplation:@escaping ExecuteResult<QueryDomainsNotInGroupResult>) throws {
        cdnJDCloudClient = self
        try QueryDomainsNotInGroupExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryFollowSourceProtocolAsync(request:QueryFollowSourceProtocolRequest,requestComplation:@escaping ExecuteResult<QueryFollowSourceProtocolResult>) throws {
        cdnJDCloudClient = self
        try QueryFollowSourceProtocolExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateDomainGroupAsync(request:UpdateDomainGroupRequest,requestComplation:@escaping ExecuteResult<UpdateDomainGroupResult>) throws {
        cdnJDCloudClient = self
        try UpdateDomainGroupExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getSslCertDetailAsync(request:GetSslCertDetailRequest,requestComplation:@escaping ExecuteResult<GetSslCertDetailResult>) throws {
        cdnJDCloudClient = self
        try GetSslCertDetailExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describebindedDomainsAsync(request:DescribebindedDomainsRequest,requestComplation:@escaping ExecuteResult<DescribebindedDomainsResult>) throws {
        cdnJDCloudClient = self
        try DescribebindedDomainsExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopDomainAsync(request:StopDomainRequest,requestComplation:@escaping ExecuteResult<StopDomainResult>) throws {
        cdnJDCloudClient = self
        try StopDomainExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryWafSwitchAsync(request:QueryWafSwitchRequest,requestComplation:@escaping ExecuteResult<QueryWafSwitchResult>) throws {
        cdnJDCloudClient = self
        try QueryWafSwitchExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describePublishDomainsAsync(request:DescribePublishDomainsRequest,requestComplation:@escaping ExecuteResult<DescribePublishDomainsResult>) throws {
        cdnJDCloudClient = self
        try DescribePublishDomainsExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createRefreshTaskAsync(request:CreateRefreshTaskRequest,requestComplation:@escaping ExecuteResult<CreateRefreshTaskResult>) throws {
        cdnJDCloudClient = self
        try CreateRefreshTaskExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryNetProtectionRulesAsync(request:QueryNetProtectionRulesRequest,requestComplation:@escaping ExecuteResult<QueryNetProtectionRulesResult>) throws {
        cdnJDCloudClient = self
        try QueryNetProtectionRulesExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func previewCertificateAsync(request:PreviewCertificateRequest,requestComplation:@escaping ExecuteResult<PreviewCertificateResult>) throws {
        cdnJDCloudClient = self
        try PreviewCertificateExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryDdosGraphAsync(request:QueryDdosGraphRequest,requestComplation:@escaping ExecuteResult<QueryDdosGraphResult>) throws {
        cdnJDCloudClient = self
        try QueryDdosGraphExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteWafBlackRulesAsync(request:DeleteWafBlackRulesRequest,requestComplation:@escaping ExecuteResult<DeleteWafBlackRulesResult>) throws {
        cdnJDCloudClient = self
        try DeleteWafBlackRulesExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateWafBlackRuleAsync(request:UpdateWafBlackRuleRequest,requestComplation:@escaping ExecuteResult<UpdateWafBlackRuleResult>) throws {
        cdnJDCloudClient = self
        try UpdateWafBlackRuleExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableWafBlackRulesAsync(request:EnableWafBlackRulesRequest,requestComplation:@escaping ExecuteResult<EnableWafBlackRulesResult>) throws {
        cdnJDCloudClient = self
        try EnableWafBlackRulesExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryAccesskeyConfigAsync(request:QueryAccesskeyConfigRequest,requestComplation:@escaping ExecuteResult<QueryAccesskeyConfigResult>) throws {
        cdnJDCloudClient = self
        try QueryAccesskeyConfigExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableCCProtectRuleAsync(request:DisableCCProtectRuleRequest,requestComplation:@escaping ExecuteResult<DisableCCProtectRuleResult>) throws {
        cdnJDCloudClient = self
        try DisableCCProtectRuleExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createRefreshTaskForCallbackAsync(request:CreateRefreshTaskForCallbackRequest,requestComplation:@escaping ExecuteResult<CreateRefreshTaskForCallbackResult>) throws {
        cdnJDCloudClient = self
        try CreateRefreshTaskForCallbackExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyLiveDomainForwardCustomVhostAsync(request:ModifyLiveDomainForwardCustomVhostRequest,requestComplation:@escaping ExecuteResult<ModifyLiveDomainForwardCustomVhostResult>) throws {
        cdnJDCloudClient = self
        try ModifyLiveDomainForwardCustomVhostExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func batchCreateAsync(request:BatchCreateRequest,requestComplation:@escaping ExecuteResult<BatchCreateResult>) throws {
        cdnJDCloudClient = self
        try BatchCreateExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setForwardAuthenticationAsync(request:SetForwardAuthenticationRequest,requestComplation:@escaping ExecuteResult<SetForwardAuthenticationResult>) throws {
        cdnJDCloudClient = self
        try SetForwardAuthenticationExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryLiveTrafficGroupSumAsync(request:QueryLiveTrafficGroupSumRequest,requestComplation:@escaping ExecuteResult<QueryLiveTrafficGroupSumResult>) throws {
        cdnJDCloudClient = self
        try QueryLiveTrafficGroupSumExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteWafWhiteRulesAsync(request:DeleteWafWhiteRulesRequest,requestComplation:@escaping ExecuteResult<DeleteWafWhiteRulesResult>) throws {
        cdnJDCloudClient = self
        try DeleteWafWhiteRulesExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateCCProtectRuleAsync(request:UpdateCCProtectRuleRequest,requestComplation:@escaping ExecuteResult<UpdateCCProtectRuleResult>) throws {
        cdnJDCloudClient = self
        try UpdateCCProtectRuleExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryOnlineBillingTypeAsync(request:QueryOnlineBillingTypeRequest,requestComplation:@escaping ExecuteResult<QueryOnlineBillingTypeResult>) throws {
        cdnJDCloudClient = self
        try QueryOnlineBillingTypeExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryRefreshTaskByIdAsync(request:QueryRefreshTaskByIdRequest,requestComplation:@escaping ExecuteResult<QueryRefreshTaskByIdResult>) throws {
        cdnJDCloudClient = self
        try QueryRefreshTaskByIdExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateCacheRuleAsync(request:UpdateCacheRuleRequest,requestComplation:@escaping ExecuteResult<UpdateCacheRuleResult>) throws {
        cdnJDCloudClient = self
        try UpdateCacheRuleExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setWafSwitchAsync(request:SetWafSwitchRequest,requestComplation:@escaping ExecuteResult<SetWafSwitchResult>) throws {
        cdnJDCloudClient = self
        try SetWafSwitchExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setStreamNotifyInfoAsync(request:SetStreamNotifyInfoRequest,requestComplation:@escaping ExecuteResult<SetStreamNotifyInfoResult>) throws {
        cdnJDCloudClient = self
        try SetStreamNotifyInfoExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func uploadCertAsync(request:UploadCertRequest,requestComplation:@escaping ExecuteResult<UploadCertResult>) throws {
        cdnJDCloudClient = self
        try UploadCertExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func batchCreateLiveDomainAsync(request:BatchCreateLiveDomainRequest,requestComplation:@escaping ExecuteResult<BatchCreateLiveDomainResult>) throws {
        cdnJDCloudClient = self
        try BatchCreateLiveDomainExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createCacheRuleAsync(request:CreateCacheRuleRequest,requestComplation:@escaping ExecuteResult<CreateCacheRuleResult>) throws {
        cdnJDCloudClient = self
        try CreateCacheRuleExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setSourceAsync(request:SetSourceRequest,requestComplation:@escaping ExecuteResult<SetSourceResult>) throws {
        cdnJDCloudClient = self
        try SetSourceExecutor(jdCloudClient: cdnJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension CdnJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "cdn.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
