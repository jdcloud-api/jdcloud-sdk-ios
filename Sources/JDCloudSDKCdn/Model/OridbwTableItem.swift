/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  oridbwTableItem
@objc(OridbwTableItem)
public class OridbwTableItem:NSObject,Codable{
    /// GroupByname
    var groupByname:String?
    /// DomainTyep
    var domainTyep:String?
    /// OriflowPercent
    var oriflowPercent:String?
    /// OripvPercent
    var oripvPercent:String?
    /// Avgbandwidth
    var avgbandwidth:Double?
    /// Avgoribandwidth
    var avgoribandwidth:Double?
    /// OriTopTimeStamp
    var oriTopTimeStamp:Int64?
    /// Pv
    var pv:Int64?
    /// Oripv
    var oripv:Int64?
    /// Flow
    var flow:Double?
    /// Oriflow
    var oriflow:Double?



    public override init(){
            super.init()
    }

    enum OridbwTableItemCodingKeys: String, CodingKey {
        case groupByname
        case domainTyep
        case oriflowPercent
        case oripvPercent
        case avgbandwidth
        case avgoribandwidth
        case oriTopTimeStamp
        case pv
        case oripv
        case flow
        case oriflow
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OridbwTableItemCodingKeys.self)
        if decoderContainer.contains(.groupByname)
        {
            self.groupByname = try decoderContainer.decode(String?.self, forKey: .groupByname)
        }
        if decoderContainer.contains(.domainTyep)
        {
            self.domainTyep = try decoderContainer.decode(String?.self, forKey: .domainTyep)
        }
        if decoderContainer.contains(.oriflowPercent)
        {
            self.oriflowPercent = try decoderContainer.decode(String?.self, forKey: .oriflowPercent)
        }
        if decoderContainer.contains(.oripvPercent)
        {
            self.oripvPercent = try decoderContainer.decode(String?.self, forKey: .oripvPercent)
        }
        if decoderContainer.contains(.avgbandwidth)
        {
            self.avgbandwidth = try decoderContainer.decode(Double?.self, forKey: .avgbandwidth)
        }
        if decoderContainer.contains(.avgoribandwidth)
        {
            self.avgoribandwidth = try decoderContainer.decode(Double?.self, forKey: .avgoribandwidth)
        }
        if decoderContainer.contains(.oriTopTimeStamp)
        {
            self.oriTopTimeStamp = try decoderContainer.decode(Int64?.self, forKey: .oriTopTimeStamp)
        }
        if decoderContainer.contains(.pv)
        {
            self.pv = try decoderContainer.decode(Int64?.self, forKey: .pv)
        }
        if decoderContainer.contains(.oripv)
        {
            self.oripv = try decoderContainer.decode(Int64?.self, forKey: .oripv)
        }
        if decoderContainer.contains(.flow)
        {
            self.flow = try decoderContainer.decode(Double?.self, forKey: .flow)
        }
        if decoderContainer.contains(.oriflow)
        {
            self.oriflow = try decoderContainer.decode(Double?.self, forKey: .oriflow)
        }
    }
}
public extension OridbwTableItem{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OridbwTableItemCodingKeys.self)
         try encoderContainer.encode(groupByname, forKey: .groupByname)
         try encoderContainer.encode(domainTyep, forKey: .domainTyep)
         try encoderContainer.encode(oriflowPercent, forKey: .oriflowPercent)
         try encoderContainer.encode(oripvPercent, forKey: .oripvPercent)
         try encoderContainer.encode(avgbandwidth, forKey: .avgbandwidth)
         try encoderContainer.encode(avgoribandwidth, forKey: .avgoribandwidth)
         try encoderContainer.encode(oriTopTimeStamp, forKey: .oriTopTimeStamp)
         try encoderContainer.encode(pv, forKey: .pv)
         try encoderContainer.encode(oripv, forKey: .oripv)
         try encoderContainer.encode(flow, forKey: .flow)
         try encoderContainer.encode(oriflow, forKey: .oriflow)
    }
}
