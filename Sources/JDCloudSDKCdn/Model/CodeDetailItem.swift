/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  codeDetailItem
@objc(CodeDetailItem)
public class CodeDetailItem:NSObject,Codable{
    /// TimeStamp
    var timeStamp:Int64?
    /// Ok
    var ok:Double?
    /// BadGateway
    var badGateway:Double?
    /// BadRequest
    var badRequest:Double?
    /// Forbidden
    var forbidden:Double?
    /// Found
    var found:Double?
    /// GatewayTimeout
    var gatewayTimeout:Double?
    /// InternalServerError
    var internalServerError:Double?
    /// MovedPermanently
    var movedPermanently:Double?
    /// NotFound
    var notFound:Double?
    /// NotModified
    var notModified:Double?
    /// PartialContent
    var partialContent:Double?
    /// RequestedRangeNotSuitable
    var requestedRangeNotSuitable:Double?
    /// Other
    var other:Double?
    /// ServiceUnavailable
    var serviceUnavailable:Double?



    public override init(){
            super.init()
    }

    enum CodeDetailItemCodingKeys: String, CodingKey {
        case timeStamp
        case ok
        case badGateway
        case badRequest
        case forbidden
        case found
        case gatewayTimeout
        case internalServerError
        case movedPermanently
        case notFound
        case notModified
        case partialContent
        case requestedRangeNotSuitable
        case other
        case serviceUnavailable
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CodeDetailItemCodingKeys.self)
        if decoderContainer.contains(.timeStamp)
        {
            self.timeStamp = try decoderContainer.decode(Int64?.self, forKey: .timeStamp)
        }
        if decoderContainer.contains(.ok)
        {
            self.ok = try decoderContainer.decode(Double?.self, forKey: .ok)
        }
        if decoderContainer.contains(.badGateway)
        {
            self.badGateway = try decoderContainer.decode(Double?.self, forKey: .badGateway)
        }
        if decoderContainer.contains(.badRequest)
        {
            self.badRequest = try decoderContainer.decode(Double?.self, forKey: .badRequest)
        }
        if decoderContainer.contains(.forbidden)
        {
            self.forbidden = try decoderContainer.decode(Double?.self, forKey: .forbidden)
        }
        if decoderContainer.contains(.found)
        {
            self.found = try decoderContainer.decode(Double?.self, forKey: .found)
        }
        if decoderContainer.contains(.gatewayTimeout)
        {
            self.gatewayTimeout = try decoderContainer.decode(Double?.self, forKey: .gatewayTimeout)
        }
        if decoderContainer.contains(.internalServerError)
        {
            self.internalServerError = try decoderContainer.decode(Double?.self, forKey: .internalServerError)
        }
        if decoderContainer.contains(.movedPermanently)
        {
            self.movedPermanently = try decoderContainer.decode(Double?.self, forKey: .movedPermanently)
        }
        if decoderContainer.contains(.notFound)
        {
            self.notFound = try decoderContainer.decode(Double?.self, forKey: .notFound)
        }
        if decoderContainer.contains(.notModified)
        {
            self.notModified = try decoderContainer.decode(Double?.self, forKey: .notModified)
        }
        if decoderContainer.contains(.partialContent)
        {
            self.partialContent = try decoderContainer.decode(Double?.self, forKey: .partialContent)
        }
        if decoderContainer.contains(.requestedRangeNotSuitable)
        {
            self.requestedRangeNotSuitable = try decoderContainer.decode(Double?.self, forKey: .requestedRangeNotSuitable)
        }
        if decoderContainer.contains(.other)
        {
            self.other = try decoderContainer.decode(Double?.self, forKey: .other)
        }
        if decoderContainer.contains(.serviceUnavailable)
        {
            self.serviceUnavailable = try decoderContainer.decode(Double?.self, forKey: .serviceUnavailable)
        }
    }
}
public extension CodeDetailItem{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodeDetailItemCodingKeys.self)
         try encoderContainer.encode(timeStamp, forKey: .timeStamp)
         try encoderContainer.encode(ok, forKey: .ok)
         try encoderContainer.encode(badGateway, forKey: .badGateway)
         try encoderContainer.encode(badRequest, forKey: .badRequest)
         try encoderContainer.encode(forbidden, forKey: .forbidden)
         try encoderContainer.encode(found, forKey: .found)
         try encoderContainer.encode(gatewayTimeout, forKey: .gatewayTimeout)
         try encoderContainer.encode(internalServerError, forKey: .internalServerError)
         try encoderContainer.encode(movedPermanently, forKey: .movedPermanently)
         try encoderContainer.encode(notFound, forKey: .notFound)
         try encoderContainer.encode(notModified, forKey: .notModified)
         try encoderContainer.encode(partialContent, forKey: .partialContent)
         try encoderContainer.encode(requestedRangeNotSuitable, forKey: .requestedRangeNotSuitable)
         try encoderContainer.encode(other, forKey: .other)
         try encoderContainer.encode(serviceUnavailable, forKey: .serviceUnavailable)
    }
}
