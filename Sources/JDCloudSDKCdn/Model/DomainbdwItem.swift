/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  domainbdwItem
@objc(DomainbdwItem)
public class DomainbdwItem:NSObject,Codable{
    /// Domain
    var domain:String?
    /// DomainType
    var domainType:String?
    /// TopTimeStamp
    var topTimeStamp:Int64?
    /// Pv
    var pv:Int64?
    /// Flow
    var flow:Double?
    /// Avgbandwidth
    var avgbandwidth:Double?



    public override init(){
            super.init()
    }

    enum DomainbdwItemCodingKeys: String, CodingKey {
        case domain
        case domainType
        case topTimeStamp
        case pv
        case flow
        case avgbandwidth
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DomainbdwItemCodingKeys.self)
        if decoderContainer.contains(.domain)
        {
            self.domain = try decoderContainer.decode(String?.self, forKey: .domain)
        }
        if decoderContainer.contains(.domainType)
        {
            self.domainType = try decoderContainer.decode(String?.self, forKey: .domainType)
        }
        if decoderContainer.contains(.topTimeStamp)
        {
            self.topTimeStamp = try decoderContainer.decode(Int64?.self, forKey: .topTimeStamp)
        }
        if decoderContainer.contains(.pv)
        {
            self.pv = try decoderContainer.decode(Int64?.self, forKey: .pv)
        }
        if decoderContainer.contains(.flow)
        {
            self.flow = try decoderContainer.decode(Double?.self, forKey: .flow)
        }
        if decoderContainer.contains(.avgbandwidth)
        {
            self.avgbandwidth = try decoderContainer.decode(Double?.self, forKey: .avgbandwidth)
        }
    }
}
public extension DomainbdwItem{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DomainbdwItemCodingKeys.self)
         try encoderContainer.encode(domain, forKey: .domain)
         try encoderContainer.encode(domainType, forKey: .domainType)
         try encoderContainer.encode(topTimeStamp, forKey: .topTimeStamp)
         try encoderContainer.encode(pv, forKey: .pv)
         try encoderContainer.encode(flow, forKey: .flow)
         try encoderContainer.encode(avgbandwidth, forKey: .avgbandwidth)
    }
}
