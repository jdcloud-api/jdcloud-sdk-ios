/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  topUrlItem
@objc(TopUrlItem)
public class TopUrlItem:NSObject,Codable{
    /// Url
    var url:String?
    /// Rank
    var rank:Int?
    /// Flow
    var flow:Double?
    /// FlowUnit
    var flowUnit:String?
    /// FlowPercent
    var flowPercent:String?
    /// Pv
    var pv:Int64?
    /// PvUnit
    var pvUnit:String?
    /// PvPercent
    var pvPercent:String?
    /// Uv
    var uv:Int64?
    /// UvUnit
    var uvUnit:String?
    /// UvPercent
    var uvPercent:String?



    public override init(){
            super.init()
    }

    enum TopUrlItemCodingKeys: String, CodingKey {
        case url
        case rank
        case flow
        case flowUnit
        case flowPercent
        case pv
        case pvUnit
        case pvPercent
        case uv
        case uvUnit
        case uvPercent
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TopUrlItemCodingKeys.self)
        if decoderContainer.contains(.url)
        {
            self.url = try decoderContainer.decode(String?.self, forKey: .url)
        }
        if decoderContainer.contains(.rank)
        {
            self.rank = try decoderContainer.decode(Int?.self, forKey: .rank)
        }
        if decoderContainer.contains(.flow)
        {
            self.flow = try decoderContainer.decode(Double?.self, forKey: .flow)
        }
        if decoderContainer.contains(.flowUnit)
        {
            self.flowUnit = try decoderContainer.decode(String?.self, forKey: .flowUnit)
        }
        if decoderContainer.contains(.flowPercent)
        {
            self.flowPercent = try decoderContainer.decode(String?.self, forKey: .flowPercent)
        }
        if decoderContainer.contains(.pv)
        {
            self.pv = try decoderContainer.decode(Int64?.self, forKey: .pv)
        }
        if decoderContainer.contains(.pvUnit)
        {
            self.pvUnit = try decoderContainer.decode(String?.self, forKey: .pvUnit)
        }
        if decoderContainer.contains(.pvPercent)
        {
            self.pvPercent = try decoderContainer.decode(String?.self, forKey: .pvPercent)
        }
        if decoderContainer.contains(.uv)
        {
            self.uv = try decoderContainer.decode(Int64?.self, forKey: .uv)
        }
        if decoderContainer.contains(.uvUnit)
        {
            self.uvUnit = try decoderContainer.decode(String?.self, forKey: .uvUnit)
        }
        if decoderContainer.contains(.uvPercent)
        {
            self.uvPercent = try decoderContainer.decode(String?.self, forKey: .uvPercent)
        }
    }
}
public extension TopUrlItem{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TopUrlItemCodingKeys.self)
         try encoderContainer.encode(url, forKey: .url)
         try encoderContainer.encode(rank, forKey: .rank)
         try encoderContainer.encode(flow, forKey: .flow)
         try encoderContainer.encode(flowUnit, forKey: .flowUnit)
         try encoderContainer.encode(flowPercent, forKey: .flowPercent)
         try encoderContainer.encode(pv, forKey: .pv)
         try encoderContainer.encode(pvUnit, forKey: .pvUnit)
         try encoderContainer.encode(pvPercent, forKey: .pvPercent)
         try encoderContainer.encode(uv, forKey: .uv)
         try encoderContainer.encode(uvUnit, forKey: .uvUnit)
         try encoderContainer.encode(uvPercent, forKey: .uvPercent)
    }
}
