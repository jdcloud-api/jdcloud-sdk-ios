/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  streamHistoryInfoForYY
@objc(StreamHistoryInfoForYY)
public class StreamHistoryInfoForYY:NSObject,Codable{
    /// UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z
    var startTime:String?
    /// UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z
    var endTime:String?
    /// Avgupspeed
    var avgupspeed:Int64?
    /// Avgupframerate
    var avgupframerate:Int64?
    /// PushEdgeNodeIps
    var pushEdgeNodeIps:[String?]?
    /// AnchorIps
    var anchorIps:[String?]?
    /// FlvBandWidth
    var flvBandWidth:Int64?
    /// FlvPlayerCount
    var flvPlayerCount:Int64?
    /// HlsBandWidth
    var hlsBandWidth:Int64?
    /// HlsPlayerCount
    var hlsPlayerCount:Int64?



    public override init(){
            super.init()
    }

    enum StreamHistoryInfoForYYCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case avgupspeed
        case avgupframerate
        case pushEdgeNodeIps
        case anchorIps
        case flvBandWidth
        case flvPlayerCount
        case hlsBandWidth
        case hlsPlayerCount
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StreamHistoryInfoForYYCodingKeys.self)
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.avgupspeed)
        {
            self.avgupspeed = try decoderContainer.decode(Int64?.self, forKey: .avgupspeed)
        }
        if decoderContainer.contains(.avgupframerate)
        {
            self.avgupframerate = try decoderContainer.decode(Int64?.self, forKey: .avgupframerate)
        }
        if decoderContainer.contains(.pushEdgeNodeIps)
        {
            self.pushEdgeNodeIps = try decoderContainer.decode([String?]?.self, forKey: .pushEdgeNodeIps)
        }
        if decoderContainer.contains(.anchorIps)
        {
            self.anchorIps = try decoderContainer.decode([String?]?.self, forKey: .anchorIps)
        }
        if decoderContainer.contains(.flvBandWidth)
        {
            self.flvBandWidth = try decoderContainer.decode(Int64?.self, forKey: .flvBandWidth)
        }
        if decoderContainer.contains(.flvPlayerCount)
        {
            self.flvPlayerCount = try decoderContainer.decode(Int64?.self, forKey: .flvPlayerCount)
        }
        if decoderContainer.contains(.hlsBandWidth)
        {
            self.hlsBandWidth = try decoderContainer.decode(Int64?.self, forKey: .hlsBandWidth)
        }
        if decoderContainer.contains(.hlsPlayerCount)
        {
            self.hlsPlayerCount = try decoderContainer.decode(Int64?.self, forKey: .hlsPlayerCount)
        }
    }
}
public extension StreamHistoryInfoForYY{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StreamHistoryInfoForYYCodingKeys.self)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
         try encoderContainer.encode(avgupspeed, forKey: .avgupspeed)
         try encoderContainer.encode(avgupframerate, forKey: .avgupframerate)
         try encoderContainer.encode(pushEdgeNodeIps, forKey: .pushEdgeNodeIps)
         try encoderContainer.encode(anchorIps, forKey: .anchorIps)
         try encoderContainer.encode(flvBandWidth, forKey: .flvBandWidth)
         try encoderContainer.encode(flvPlayerCount, forKey: .flvPlayerCount)
         try encoderContainer.encode(hlsBandWidth, forKey: .hlsBandWidth)
         try encoderContainer.encode(hlsPlayerCount, forKey: .hlsPlayerCount)
    }
}
