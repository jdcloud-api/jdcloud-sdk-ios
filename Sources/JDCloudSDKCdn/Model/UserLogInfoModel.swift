/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  userLogInfoModel
@objc(UserLogInfoModel)
public class UserLogInfoModel:NSObject,Codable{
    /// 日志上传域名，如：www.a.com
    var domain:String?
    /// 日志上传全路径，如：cdnuserlog/www.a.com/20190412/2019041200-01.gz
    var logFileFullPath:String?
    /// 日志粒度：fiveMin(五分钟粒度),hour(一小时粒度),day(一天粒度)
    var interval:String?
    /// 日志类型：gz,log,zip
    var logType:String?
    /// 日志大小，单位：Byte（字节）
    var logSize:Int64?
    /// MD5值
    var logMD5:String?
    /// 日志开始时间，格式：yyyy-MM-dd HH:ss，如：2019-04-12 00:00
    var startTime:String?
    /// 日志结束时间，格式：yyyy-MM-dd HH:ss 如：2019-04-12 00:05
    var endTime:String?



    public override init(){
            super.init()
    }

    enum UserLogInfoModelCodingKeys: String, CodingKey {
        case domain
        case logFileFullPath
        case interval
        case logType
        case logSize
        case logMD5
        case startTime
        case endTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UserLogInfoModelCodingKeys.self)
        if decoderContainer.contains(.domain)
        {
            self.domain = try decoderContainer.decode(String?.self, forKey: .domain)
        }
        if decoderContainer.contains(.logFileFullPath)
        {
            self.logFileFullPath = try decoderContainer.decode(String?.self, forKey: .logFileFullPath)
        }
        if decoderContainer.contains(.interval)
        {
            self.interval = try decoderContainer.decode(String?.self, forKey: .interval)
        }
        if decoderContainer.contains(.logType)
        {
            self.logType = try decoderContainer.decode(String?.self, forKey: .logType)
        }
        if decoderContainer.contains(.logSize)
        {
            self.logSize = try decoderContainer.decode(Int64?.self, forKey: .logSize)
        }
        if decoderContainer.contains(.logMD5)
        {
            self.logMD5 = try decoderContainer.decode(String?.self, forKey: .logMD5)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
    }
}
public extension UserLogInfoModel{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UserLogInfoModelCodingKeys.self)
         try encoderContainer.encode(domain, forKey: .domain)
         try encoderContainer.encode(logFileFullPath, forKey: .logFileFullPath)
         try encoderContainer.encode(interval, forKey: .interval)
         try encoderContainer.encode(logType, forKey: .logType)
         try encoderContainer.encode(logSize, forKey: .logSize)
         try encoderContainer.encode(logMD5, forKey: .logMD5)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
    }
}
