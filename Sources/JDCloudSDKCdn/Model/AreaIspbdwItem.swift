/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  areaIspbdwItem
@objc(AreaIspbdwItem)
public class AreaIspbdwItem:NSObject,Codable{
    /// Area
    var area:String?
    /// Isp
    var isp:String?
    /// Name
    var name:String?
    /// FlowPercent
    var flowPercent:String?
    /// PvPercent
    var pvPercent:String?
    /// Avgbandwidth
    var avgbandwidth:Double?
    /// Flow
    var flow:Double?
    /// Pv
    var pv:Int64?
    /// TopTimeStamp
    var topTimeStamp:Int64?



    public override init(){
            super.init()
    }

    enum AreaIspbdwItemCodingKeys: String, CodingKey {
        case area
        case isp
        case name
        case flowPercent
        case pvPercent
        case avgbandwidth
        case flow
        case pv
        case topTimeStamp
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AreaIspbdwItemCodingKeys.self)
        if decoderContainer.contains(.area)
        {
            self.area = try decoderContainer.decode(String?.self, forKey: .area)
        }
        if decoderContainer.contains(.isp)
        {
            self.isp = try decoderContainer.decode(String?.self, forKey: .isp)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.flowPercent)
        {
            self.flowPercent = try decoderContainer.decode(String?.self, forKey: .flowPercent)
        }
        if decoderContainer.contains(.pvPercent)
        {
            self.pvPercent = try decoderContainer.decode(String?.self, forKey: .pvPercent)
        }
        if decoderContainer.contains(.avgbandwidth)
        {
            self.avgbandwidth = try decoderContainer.decode(Double?.self, forKey: .avgbandwidth)
        }
        if decoderContainer.contains(.flow)
        {
            self.flow = try decoderContainer.decode(Double?.self, forKey: .flow)
        }
        if decoderContainer.contains(.pv)
        {
            self.pv = try decoderContainer.decode(Int64?.self, forKey: .pv)
        }
        if decoderContainer.contains(.topTimeStamp)
        {
            self.topTimeStamp = try decoderContainer.decode(Int64?.self, forKey: .topTimeStamp)
        }
    }
}
public extension AreaIspbdwItem{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AreaIspbdwItemCodingKeys.self)
         try encoderContainer.encode(area, forKey: .area)
         try encoderContainer.encode(isp, forKey: .isp)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(flowPercent, forKey: .flowPercent)
         try encoderContainer.encode(pvPercent, forKey: .pvPercent)
         try encoderContainer.encode(avgbandwidth, forKey: .avgbandwidth)
         try encoderContainer.encode(flow, forKey: .flow)
         try encoderContainer.encode(pv, forKey: .pv)
         try encoderContainer.encode(topTimeStamp, forKey: .topTimeStamp)
    }
}
