/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  forbiddenStream
@objc(ForbiddenStream)
public class ForbiddenStream:NSObject,Codable{
    /// 禁播流
    var stream:String?
    /// 封禁推流的app
    var app:String?
    /// 禁播类型:forever永不禁播limit限时禁播
    var type:String?
    /// 禁播时长
    var ttl:Int64?



    public override init(){
            super.init()
    }

    enum ForbiddenStreamCodingKeys: String, CodingKey {
        case stream
        case app
        case type
        case ttl
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ForbiddenStreamCodingKeys.self)
        if decoderContainer.contains(.stream)
        {
            self.stream = try decoderContainer.decode(String?.self, forKey: .stream)
        }
        if decoderContainer.contains(.app)
        {
            self.app = try decoderContainer.decode(String?.self, forKey: .app)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(String?.self, forKey: .type)
        }
        if decoderContainer.contains(.ttl)
        {
            self.ttl = try decoderContainer.decode(Int64?.self, forKey: .ttl)
        }
    }
}
public extension ForbiddenStream{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ForbiddenStreamCodingKeys.self)
         try encoderContainer.encode(stream, forKey: .stream)
         try encoderContainer.encode(app, forKey: .app)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(ttl, forKey: .ttl)
    }
}
