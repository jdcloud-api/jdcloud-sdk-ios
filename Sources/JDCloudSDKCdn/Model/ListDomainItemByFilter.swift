/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  listDomainItemByFilter
@objc(ListDomainItemByFilter)
public class ListDomainItemByFilter:NSObject,Codable{
    /// Cname
    var cname:String?
    /// Description
    var descriptionValue:String?
    /// Domain
    var domain:String?
    /// Created
    var created:String?
    /// Modified
    var modified:String?
    /// Status
    var status:String?
    /// Type
    var type:String?
    /// AuditStatus
    var auditStatus:String?
    /// Tags
    var tags:[Tag?]?



    public override init(){
            super.init()
    }

    enum ListDomainItemByFilterCodingKeys: String, CodingKey {
        case cname
        case descriptionValue = "description"
        case domain
        case created
        case modified
        case status
        case type
        case auditStatus
        case tags
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListDomainItemByFilterCodingKeys.self)
        if decoderContainer.contains(.cname)
        {
            self.cname = try decoderContainer.decode(String?.self, forKey: .cname)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.domain)
        {
            self.domain = try decoderContainer.decode(String?.self, forKey: .domain)
        }
        if decoderContainer.contains(.created)
        {
            self.created = try decoderContainer.decode(String?.self, forKey: .created)
        }
        if decoderContainer.contains(.modified)
        {
            self.modified = try decoderContainer.decode(String?.self, forKey: .modified)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(String?.self, forKey: .type)
        }
        if decoderContainer.contains(.auditStatus)
        {
            self.auditStatus = try decoderContainer.decode(String?.self, forKey: .auditStatus)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([Tag?]?.self, forKey: .tags)
        }
    }
}
public extension ListDomainItemByFilter{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListDomainItemByFilterCodingKeys.self)
         try encoderContainer.encode(cname, forKey: .cname)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(domain, forKey: .domain)
         try encoderContainer.encode(created, forKey: .created)
         try encoderContainer.encode(modified, forKey: .modified)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(auditStatus, forKey: .auditStatus)
         try encoderContainer.encode(tags, forKey: .tags)
    }
}
