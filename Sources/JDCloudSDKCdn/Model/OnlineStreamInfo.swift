/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  onlineStreamInfo
@objc(OnlineStreamInfo)
public class OnlineStreamInfo:NSObject,Codable{
    /// App
    var app:String?
    /// Stream
    var stream:String?
    /// ClientIp
    var clientIp:String?
    /// ServerIp
    var serverIp:String?
    /// FrameRate
    var frameRate:Double?
    /// FrameLossRate
    var frameLossRate:Double?
    /// LastActive
    var lastActive:Int64?
    /// RealFps
    var realFps:Int64?
    /// UploadSpeed
    var uploadSpeed:Int64?
    /// VideoCodecId
    var videoCodecId:Int64?
    /// VideoDataRate
    var videoDataRate:Int64?
    /// AudioCodecId
    var audioCodecId:Int64?



    public override init(){
            super.init()
    }

    enum OnlineStreamInfoCodingKeys: String, CodingKey {
        case app
        case stream
        case clientIp
        case serverIp
        case frameRate
        case frameLossRate
        case lastActive
        case realFps
        case uploadSpeed
        case videoCodecId
        case videoDataRate
        case audioCodecId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OnlineStreamInfoCodingKeys.self)
        if decoderContainer.contains(.app)
        {
            self.app = try decoderContainer.decode(String?.self, forKey: .app)
        }
        if decoderContainer.contains(.stream)
        {
            self.stream = try decoderContainer.decode(String?.self, forKey: .stream)
        }
        if decoderContainer.contains(.clientIp)
        {
            self.clientIp = try decoderContainer.decode(String?.self, forKey: .clientIp)
        }
        if decoderContainer.contains(.serverIp)
        {
            self.serverIp = try decoderContainer.decode(String?.self, forKey: .serverIp)
        }
        if decoderContainer.contains(.frameRate)
        {
            self.frameRate = try decoderContainer.decode(Double?.self, forKey: .frameRate)
        }
        if decoderContainer.contains(.frameLossRate)
        {
            self.frameLossRate = try decoderContainer.decode(Double?.self, forKey: .frameLossRate)
        }
        if decoderContainer.contains(.lastActive)
        {
            self.lastActive = try decoderContainer.decode(Int64?.self, forKey: .lastActive)
        }
        if decoderContainer.contains(.realFps)
        {
            self.realFps = try decoderContainer.decode(Int64?.self, forKey: .realFps)
        }
        if decoderContainer.contains(.uploadSpeed)
        {
            self.uploadSpeed = try decoderContainer.decode(Int64?.self, forKey: .uploadSpeed)
        }
        if decoderContainer.contains(.videoCodecId)
        {
            self.videoCodecId = try decoderContainer.decode(Int64?.self, forKey: .videoCodecId)
        }
        if decoderContainer.contains(.videoDataRate)
        {
            self.videoDataRate = try decoderContainer.decode(Int64?.self, forKey: .videoDataRate)
        }
        if decoderContainer.contains(.audioCodecId)
        {
            self.audioCodecId = try decoderContainer.decode(Int64?.self, forKey: .audioCodecId)
        }
    }
}
public extension OnlineStreamInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OnlineStreamInfoCodingKeys.self)
         try encoderContainer.encode(app, forKey: .app)
         try encoderContainer.encode(stream, forKey: .stream)
         try encoderContainer.encode(clientIp, forKey: .clientIp)
         try encoderContainer.encode(serverIp, forKey: .serverIp)
         try encoderContainer.encode(frameRate, forKey: .frameRate)
         try encoderContainer.encode(frameLossRate, forKey: .frameLossRate)
         try encoderContainer.encode(lastActive, forKey: .lastActive)
         try encoderContainer.encode(realFps, forKey: .realFps)
         try encoderContainer.encode(uploadSpeed, forKey: .uploadSpeed)
         try encoderContainer.encode(videoCodecId, forKey: .videoCodecId)
         try encoderContainer.encode(videoDataRate, forKey: .videoDataRate)
         try encoderContainer.encode(audioCodecId, forKey: .audioCodecId)
    }
}
