/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JCloud Openapi For CDN
   Openapi For JCLOUD cdn

   OpenAPI spec version: v1
   Contact: pid-cdn@jd.com

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  设置直播域名回源信息
@objc(SetLiveDomainBackSourceRequest)
public class SetLiveDomainBackSourceRequest:JdCloudRequest
{
    /// 回源类型只能为[ips,domain]中的一种
    var sourceType:String?

    /// BackSourceType
    var backSourceType:String?

    /// 默认回源host
    var defaultSourceHost:String?

    /// DomainSource
    var domainSource:DomainSourceInfo?

    /// IpSource
    var ipSource:IpSourceInfo?

    /// 用户域名
    var domain:String


    public init(regionId: String,domain:String){
        self.domain = domain
        super.init(regionId: regionId)
    }


    enum SetLiveDomainBackSourceRequestRequestCodingKeys: String, CodingKey {
        case sourceType
        case backSourceType
        case defaultSourceHost
        case domainSource
        case ipSource
        case domain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveDomainBackSourceRequestRequestCodingKeys.self)
        try encoderContainer.encode(sourceType, forKey: .sourceType)
        try encoderContainer.encode(backSourceType, forKey: .backSourceType)
        try encoderContainer.encode(defaultSourceHost, forKey: .defaultSourceHost)
        try encoderContainer.encode(domainSource, forKey: .domainSource)
        try encoderContainer.encode(ipSource, forKey: .ipSource)
        try encoderContainer.encode(domain, forKey: .domain)

    }
}
