/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JCloud Openapi For CDN
   Openapi For JCLOUD cdn

   OpenAPI spec version: v1
   Contact: pid-cdn@jd.com

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询默认http header头部参数列表
@objc(QueryDefaultHttpHeaderKeyResult)
public class QueryDefaultHttpHeaderKeyResult:NSObject,JdCloudResult
{
    /// 默认的http请求头
    var reqDefaultHttpHeaderKey:[String?]?

    /// 默认的http响应头
    var respDefaultHttpHeaderKey:[String?]?



    public override init(){
        super.init()
    }

    enum QueryDefaultHttpHeaderKeyResultCodingKeys: String, CodingKey {
        case reqDefaultHttpHeaderKey
        case respDefaultHttpHeaderKey
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryDefaultHttpHeaderKeyResultCodingKeys.self)
        if decoderContainer.contains(.reqDefaultHttpHeaderKey)
        {
            self.reqDefaultHttpHeaderKey = try decoderContainer.decode([String?]?.self, forKey: .reqDefaultHttpHeaderKey)
        }
        if decoderContainer.contains(.respDefaultHttpHeaderKey)
        {
            self.respDefaultHttpHeaderKey = try decoderContainer.decode([String?]?.self, forKey: .respDefaultHttpHeaderKey)
        }
    }
}
public extension QueryDefaultHttpHeaderKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryDefaultHttpHeaderKeyResultCodingKeys.self)
        try encoderContainer.encode(reqDefaultHttpHeaderKey, forKey: .reqDefaultHttpHeaderKey)
        try encoderContainer.encode(respDefaultHttpHeaderKey, forKey: .respDefaultHttpHeaderKey)
    }
}
