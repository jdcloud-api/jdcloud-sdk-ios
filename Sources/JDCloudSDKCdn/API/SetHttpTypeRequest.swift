/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JCloud Openapi For CDN
   Openapi For JCLOUD cdn

   OpenAPI spec version: v1
   Contact: pid-cdn@jd.com

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  设置http协议
@objc(SetHttpTypeRequest)
public class SetHttpTypeRequest:JdCloudRequest
{
    /// http类型,只能为http或者https,默认为http.当设为https时,需要调用“设置通讯协议”接口上传证书和私钥
    var httpType:String?

    /// 用户证书,当Type为https时必须设置
    var certificate:String?

    /// 证书私钥
    var rsaKey:String?

    /// 有三种类型：default、http、https
    var jumpType:String?

    /// 证书来源有两种类型：default,ssl
    var certFrom:String?

    /// ssl证书id
    var sslCertId:String?

    /// 是否同步到ssl,boolean值，取值true或者false
    var syncToSsl:Bool?

    /// syncToSsl是true时，certName是必填项
    var certName:String?

    /// 用户域名
    var domain:String


    public init(regionId: String,domain:String){
        self.domain = domain
        super.init(regionId: regionId)
    }


    enum SetHttpTypeRequestRequestCodingKeys: String, CodingKey {
        case httpType
        case certificate
        case rsaKey
        case jumpType
        case certFrom
        case sslCertId
        case syncToSsl
        case certName
        case domain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetHttpTypeRequestRequestCodingKeys.self)
        try encoderContainer.encode(httpType, forKey: .httpType)
        try encoderContainer.encode(certificate, forKey: .certificate)
        try encoderContainer.encode(rsaKey, forKey: .rsaKey)
        try encoderContainer.encode(jumpType, forKey: .jumpType)
        try encoderContainer.encode(certFrom, forKey: .certFrom)
        try encoderContainer.encode(sslCertId, forKey: .sslCertId)
        try encoderContainer.encode(syncToSsl, forKey: .syncToSsl)
        try encoderContainer.encode(certName, forKey: .certName)
        try encoderContainer.encode(domain, forKey: .domain)

    }
}
