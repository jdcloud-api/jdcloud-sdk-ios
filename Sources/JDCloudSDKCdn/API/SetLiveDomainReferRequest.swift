/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JCloud Openapi For CDN
   Openapi For JCLOUD cdn

   OpenAPI spec version: v1
   Contact: pid-cdn@jd.com

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  设置域名refer防盗链
@objc(SetLiveDomainReferRequest)
public class SetLiveDomainReferRequest:JdCloudRequest
{
    /// refer类型，取值：block（黑名单），allow（白名单）默认为block
    var referType:String?

    /// 逗号隔开的域名列表，如果referList传空则为删除
    var referList:[String?]?

    /// 是否允许空refer访问，默认为“on”
    var allowNoReferHeader:String?

    /// 是否允许无ua访问，默认为“on”
    var allowNullReferHeader:String?

    /// 用户域名
    var domain:String


    public init(regionId: String,domain:String){
        self.domain = domain
        super.init(regionId: regionId)
    }


    enum SetLiveDomainReferRequestRequestCodingKeys: String, CodingKey {
        case referType
        case referList
        case allowNoReferHeader
        case allowNullReferHeader
        case domain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveDomainReferRequestRequestCodingKeys.self)
        try encoderContainer.encode(referType, forKey: .referType)
        try encoderContainer.encode(referList, forKey: .referList)
        try encoderContainer.encode(allowNoReferHeader, forKey: .allowNoReferHeader)
        try encoderContainer.encode(allowNullReferHeader, forKey: .allowNullReferHeader)
        try encoderContainer.encode(domain, forKey: .domain)

    }
}
