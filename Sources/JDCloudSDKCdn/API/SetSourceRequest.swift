/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JCloud Openapi For CDN
   Openapi For JCLOUD cdn

   OpenAPI spec version: v1
   Contact: pid-cdn@jd.com

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  设置源站信息
@objc(SetSourceRequest)
public class SetSourceRequest:JdCloudRequest
{
    /// 回源类型只能是[ips,domain,oss]中的一种
    var sourceType:String?

    /// 回源方式,只能是[https,http]中的一种,默认http
    var backSourceType:String?

    /// IpSource
    var ipSource:[IpSourceInfo?]?

    /// DomainSource
    var domainSource:[DomainSourceInfo?]?

    /// OssSource
    var ossSource:String?

    /// DefaultSourceHost
    var defaultSourceHost:String?

    /// 用户域名
    var domain:String


    public init(regionId: String,domain:String){
        self.domain = domain
        super.init(regionId: regionId)
    }


    enum SetSourceRequestRequestCodingKeys: String, CodingKey {
        case sourceType
        case backSourceType
        case ipSource
        case domainSource
        case ossSource
        case defaultSourceHost
        case domain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetSourceRequestRequestCodingKeys.self)
        try encoderContainer.encode(sourceType, forKey: .sourceType)
        try encoderContainer.encode(backSourceType, forKey: .backSourceType)
        try encoderContainer.encode(ipSource, forKey: .ipSource)
        try encoderContainer.encode(domainSource, forKey: .domainSource)
        try encoderContainer.encode(ossSource, forKey: .ossSource)
        try encoderContainer.encode(defaultSourceHost, forKey: .defaultSourceHost)
        try encoderContainer.encode(domain, forKey: .domain)

    }
}
