/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JCloud Openapi For CDN
   Openapi For JCLOUD cdn

   OpenAPI spec version: v1
   Contact: pid-cdn@jd.com

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询加速域名详情
@objc(GetDomainDetailResult)
public class GetDomainDetailResult:NSObject,JdCloudResult
{
    /// AllStatus
    var allStatus:String?

    /// AllowNoReferHeader
    var allowNoReferHeader:String?

    /// AllowNullReferHeader
    var allowNullReferHeader:String?

    /// DailyBandWidth
    var dailyBandWidth:Int?

    /// ForbiddenType
    var forbiddenType:String?

    /// MaxFileSize
    var maxFileSize:Int64?

    /// MinFileSize
    var minFileSize:Int64?

    /// SumFileSize
    var sumFileSize:Int64?

    /// AvgFileSize
    var avgFileSize:Int64?

    /// ReferList
    var referList:[String?]?

    /// ReferType
    var referType:String?

    /// Domain
    var domain:String?

    /// Cname
    var cname:String?

    /// ArchiveNo
    var archiveNo:String?

    /// Type
    var type:String?

    /// Created
    var created:String?

    /// Modified
    var modified:String?

    /// Status
    var status:String?

    /// AuditStatus
    var auditStatus:String?

    /// Source
    var source:BackSourceInfo?

    /// SourceType
    var sourceType:String?

    /// 默认的回源host
    var defaultSourceHost:String?

    /// BackSourceType
    var backSourceType:String?

    /// HttpType
    var httpType:String?

    /// Certificate
    var certificate:String?

    /// RsaKey
    var rsaKey:String?

    /// JumpType
    var jumpType:String?



    public override init(){
        super.init()
    }

    enum GetDomainDetailResultCodingKeys: String, CodingKey {
        case allStatus
        case allowNoReferHeader
        case allowNullReferHeader
        case dailyBandWidth
        case forbiddenType
        case maxFileSize
        case minFileSize
        case sumFileSize
        case avgFileSize
        case referList
        case referType
        case domain
        case cname
        case archiveNo
        case type
        case created
        case modified
        case status
        case auditStatus
        case source
        case sourceType
        case defaultSourceHost
        case backSourceType
        case httpType
        case certificate
        case rsaKey
        case jumpType
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDomainDetailResultCodingKeys.self)
        if decoderContainer.contains(.allStatus)
        {
            self.allStatus = try decoderContainer.decode(String?.self, forKey: .allStatus)
        }
        if decoderContainer.contains(.allowNoReferHeader)
        {
            self.allowNoReferHeader = try decoderContainer.decode(String?.self, forKey: .allowNoReferHeader)
        }
        if decoderContainer.contains(.allowNullReferHeader)
        {
            self.allowNullReferHeader = try decoderContainer.decode(String?.self, forKey: .allowNullReferHeader)
        }
        if decoderContainer.contains(.dailyBandWidth)
        {
            self.dailyBandWidth = try decoderContainer.decode(Int?.self, forKey: .dailyBandWidth)
        }
        if decoderContainer.contains(.forbiddenType)
        {
            self.forbiddenType = try decoderContainer.decode(String?.self, forKey: .forbiddenType)
        }
        if decoderContainer.contains(.maxFileSize)
        {
            self.maxFileSize = try decoderContainer.decode(Int64?.self, forKey: .maxFileSize)
        }
        if decoderContainer.contains(.minFileSize)
        {
            self.minFileSize = try decoderContainer.decode(Int64?.self, forKey: .minFileSize)
        }
        if decoderContainer.contains(.sumFileSize)
        {
            self.sumFileSize = try decoderContainer.decode(Int64?.self, forKey: .sumFileSize)
        }
        if decoderContainer.contains(.avgFileSize)
        {
            self.avgFileSize = try decoderContainer.decode(Int64?.self, forKey: .avgFileSize)
        }
        if decoderContainer.contains(.referList)
        {
            self.referList = try decoderContainer.decode([String?]?.self, forKey: .referList)
        }
        if decoderContainer.contains(.referType)
        {
            self.referType = try decoderContainer.decode(String?.self, forKey: .referType)
        }
        if decoderContainer.contains(.domain)
        {
            self.domain = try decoderContainer.decode(String?.self, forKey: .domain)
        }
        if decoderContainer.contains(.cname)
        {
            self.cname = try decoderContainer.decode(String?.self, forKey: .cname)
        }
        if decoderContainer.contains(.archiveNo)
        {
            self.archiveNo = try decoderContainer.decode(String?.self, forKey: .archiveNo)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(String?.self, forKey: .type)
        }
        if decoderContainer.contains(.created)
        {
            self.created = try decoderContainer.decode(String?.self, forKey: .created)
        }
        if decoderContainer.contains(.modified)
        {
            self.modified = try decoderContainer.decode(String?.self, forKey: .modified)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.auditStatus)
        {
            self.auditStatus = try decoderContainer.decode(String?.self, forKey: .auditStatus)
        }
        if decoderContainer.contains(.source)
        {
            self.source = try decoderContainer.decode(BackSourceInfo?.self, forKey: .source)
        }
        if decoderContainer.contains(.sourceType)
        {
            self.sourceType = try decoderContainer.decode(String?.self, forKey: .sourceType)
        }
        if decoderContainer.contains(.defaultSourceHost)
        {
            self.defaultSourceHost = try decoderContainer.decode(String?.self, forKey: .defaultSourceHost)
        }
        if decoderContainer.contains(.backSourceType)
        {
            self.backSourceType = try decoderContainer.decode(String?.self, forKey: .backSourceType)
        }
        if decoderContainer.contains(.httpType)
        {
            self.httpType = try decoderContainer.decode(String?.self, forKey: .httpType)
        }
        if decoderContainer.contains(.certificate)
        {
            self.certificate = try decoderContainer.decode(String?.self, forKey: .certificate)
        }
        if decoderContainer.contains(.rsaKey)
        {
            self.rsaKey = try decoderContainer.decode(String?.self, forKey: .rsaKey)
        }
        if decoderContainer.contains(.jumpType)
        {
            self.jumpType = try decoderContainer.decode(String?.self, forKey: .jumpType)
        }
    }
}
public extension GetDomainDetailResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDomainDetailResultCodingKeys.self)
        try encoderContainer.encode(allStatus, forKey: .allStatus)
        try encoderContainer.encode(allowNoReferHeader, forKey: .allowNoReferHeader)
        try encoderContainer.encode(allowNullReferHeader, forKey: .allowNullReferHeader)
        try encoderContainer.encode(dailyBandWidth, forKey: .dailyBandWidth)
        try encoderContainer.encode(forbiddenType, forKey: .forbiddenType)
        try encoderContainer.encode(maxFileSize, forKey: .maxFileSize)
        try encoderContainer.encode(minFileSize, forKey: .minFileSize)
        try encoderContainer.encode(sumFileSize, forKey: .sumFileSize)
        try encoderContainer.encode(avgFileSize, forKey: .avgFileSize)
        try encoderContainer.encode(referList, forKey: .referList)
        try encoderContainer.encode(referType, forKey: .referType)
        try encoderContainer.encode(domain, forKey: .domain)
        try encoderContainer.encode(cname, forKey: .cname)
        try encoderContainer.encode(archiveNo, forKey: .archiveNo)
        try encoderContainer.encode(type, forKey: .type)
        try encoderContainer.encode(created, forKey: .created)
        try encoderContainer.encode(modified, forKey: .modified)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(auditStatus, forKey: .auditStatus)
        try encoderContainer.encode(source, forKey: .source)
        try encoderContainer.encode(sourceType, forKey: .sourceType)
        try encoderContainer.encode(defaultSourceHost, forKey: .defaultSourceHost)
        try encoderContainer.encode(backSourceType, forKey: .backSourceType)
        try encoderContainer.encode(httpType, forKey: .httpType)
        try encoderContainer.encode(certificate, forKey: .certificate)
        try encoderContainer.encode(rsaKey, forKey: .rsaKey)
        try encoderContainer.encode(jumpType, forKey: .jumpType)
    }
}
