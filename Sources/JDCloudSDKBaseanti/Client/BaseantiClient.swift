/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Anti-DDoS Basic APIs
   DDoS 基础防护防护 IP、攻击记录相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class BaseantiJDCloudClient:NSObject,JDCloudClient{
    
    private final var baseantiJDCloudClient:BaseantiJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        baseantiJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "baseanti.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        baseantiJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "baseanti/" + "v1"
    
    public let serviceName: String = "baseanti"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func describeIpSafetyInfoAsync(request:DescribeIpSafetyInfoRequest,requestComplation:@escaping ExecuteResult<DescribeIpSafetyInfoResult>) throws {
        baseantiJDCloudClient = self
        try DescribeIpSafetyInfoExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setIpCleanThresholdAsync(request:SetIpCleanThresholdRequest,requestComplation:@escaping ExecuteResult<SetIpCleanThresholdResult>) throws {
        baseantiJDCloudClient = self
        try SetIpCleanThresholdExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeIpMonitorFlowAsync(request:DescribeIpMonitorFlowRequest,requestComplation:@escaping ExecuteResult<DescribeIpMonitorFlowResult>) throws {
        baseantiJDCloudClient = self
        try DescribeIpMonitorFlowExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeIpResourcesAsync(request:DescribeIpResourcesRequest,requestComplation:@escaping ExecuteResult<DescribeIpResourcesResult>) throws {
        baseantiJDCloudClient = self
        try DescribeIpResourcesExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAttackStatisticsAsync(request:DescribeAttackStatisticsRequest,requestComplation:@escaping ExecuteResult<DescribeAttackStatisticsResult>) throws {
        baseantiJDCloudClient = self
        try DescribeAttackStatisticsExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeElasticIpResourcesAsync(request:DescribeElasticIpResourcesRequest,requestComplation:@escaping ExecuteResult<DescribeElasticIpResourcesResult>) throws {
        baseantiJDCloudClient = self
        try DescribeElasticIpResourcesExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCcsIpResourcesAsync(request:DescribeCcsIpResourcesRequest,requestComplation:@escaping ExecuteResult<DescribeCcsIpResourcesResult>) throws {
        baseantiJDCloudClient = self
        try DescribeCcsIpResourcesExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeIpCleanThresholdRangeAsync(request:DescribeIpCleanThresholdRangeRequest,requestComplation:@escaping ExecuteResult<DescribeIpCleanThresholdRangeResult>) throws {
        baseantiJDCloudClient = self
        try DescribeIpCleanThresholdRangeExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAttackTypeCountAsync(request:DescribeAttackTypeCountRequest,requestComplation:@escaping ExecuteResult<DescribeAttackTypeCountResult>) throws {
        baseantiJDCloudClient = self
        try DescribeAttackTypeCountExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeIpResourceProtectInfoAsync(request:DescribeIpResourceProtectInfoRequest,requestComplation:@escaping ExecuteResult<DescribeIpResourceProtectInfoResult>) throws {
        baseantiJDCloudClient = self
        try DescribeIpResourceProtectInfoExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCpsIpResourcesAsync(request:DescribeCpsIpResourcesRequest,requestComplation:@escaping ExecuteResult<DescribeCpsIpResourcesResult>) throws {
        baseantiJDCloudClient = self
        try DescribeCpsIpResourcesExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setCleanThresholdAsync(request:SetCleanThresholdRequest,requestComplation:@escaping ExecuteResult<SetCleanThresholdResult>) throws {
        baseantiJDCloudClient = self
        try SetCleanThresholdExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeIpResourceFlowAsync(request:DescribeIpResourceFlowRequest,requestComplation:@escaping ExecuteResult<DescribeIpResourceFlowResult>) throws {
        baseantiJDCloudClient = self
        try DescribeIpResourceFlowExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeIpResourceInfoAsync(request:DescribeIpResourceInfoRequest,requestComplation:@escaping ExecuteResult<DescribeIpResourceInfoResult>) throws {
        baseantiJDCloudClient = self
        try DescribeIpResourceInfoExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAttackLogsAsync(request:DescribeAttackLogsRequest,requestComplation:@escaping ExecuteResult<DescribeAttackLogsResult>) throws {
        baseantiJDCloudClient = self
        try DescribeAttackLogsExecutor(jdCloudClient: baseantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension BaseantiJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "baseanti.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
