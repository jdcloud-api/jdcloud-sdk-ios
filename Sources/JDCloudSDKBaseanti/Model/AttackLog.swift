/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  attackLog
@objc(AttackLog)
public class AttackLog:NSObject,Codable{
    /// 公网 IP 地址
    var ip:String?
    /// 公网 IP 类型或绑定资源类型:
      ///   0: 未知类型,
      ///   1: 弹性公网 IP(IP 为弹性公网 IP, 绑定资源类型未知),
      ///   10: 弹性公网 IP(IP 为弹性公网 IP, 但未绑定资源),
      ///   11: 云主机,
      ///   12: 负载均衡,
      ///   13: 原生容器实例,
      ///   14: 原生容器 Pod,
      ///   2: 云物理服务器,
      /// 
    var resourceType:Int?
    /// 攻击记录 ID
    var attackLogId:String?
    /// 攻击开始时间, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String?
    /// 攻击结束时间, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String?
    /// 触发原因:
      /// 0: 未知,
      /// 1: 四层,
      /// 2: 七层,
      /// 3: 四层和七层
      /// 
    var cause:Int?
    /// 状态, 0: 清洗完成, 1: 清洗中, 2: 黑洞中
    var status:Int?
    /// 是否黑洞
    var blackHole:Bool?
    /// 攻击流量峰值
    var peak:Double?
    /// 攻击流量峰值单位
    var unit:String?
    /// 攻击类型
    var attackType:[String?]?



    public override init(){
            super.init()
    }

    enum AttackLogCodingKeys: String, CodingKey {
        case ip
        case resourceType
        case attackLogId
        case startTime
        case endTime
        case cause
        case status
        case blackHole
        case peak
        case unit
        case attackType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AttackLogCodingKeys.self)
        if decoderContainer.contains(.ip)
        {
            self.ip = try decoderContainer.decode(String?.self, forKey: .ip)
        }
        if decoderContainer.contains(.resourceType)
        {
            self.resourceType = try decoderContainer.decode(Int?.self, forKey: .resourceType)
        }
        if decoderContainer.contains(.attackLogId)
        {
            self.attackLogId = try decoderContainer.decode(String?.self, forKey: .attackLogId)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.cause)
        {
            self.cause = try decoderContainer.decode(Int?.self, forKey: .cause)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.blackHole)
        {
            self.blackHole = try decoderContainer.decode(Bool?.self, forKey: .blackHole)
        }
        if decoderContainer.contains(.peak)
        {
            self.peak = try decoderContainer.decode(Double?.self, forKey: .peak)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
        if decoderContainer.contains(.attackType)
        {
            self.attackType = try decoderContainer.decode([String?]?.self, forKey: .attackType)
        }
    }
}
public extension AttackLog{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttackLogCodingKeys.self)
         try encoderContainer.encode(ip, forKey: .ip)
         try encoderContainer.encode(resourceType, forKey: .resourceType)
         try encoderContainer.encode(attackLogId, forKey: .attackLogId)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
         try encoderContainer.encode(cause, forKey: .cause)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(blackHole, forKey: .blackHole)
         try encoderContainer.encode(peak, forKey: .peak)
         try encoderContainer.encode(unit, forKey: .unit)
         try encoderContainer.encode(attackType, forKey: .attackType)
    }
}
