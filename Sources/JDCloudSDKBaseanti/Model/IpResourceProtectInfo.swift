/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  ipResourceProtectInfo
@objc(IpResourceProtectInfo)
public class IpResourceProtectInfo:NSObject,Codable{
    /// 攻击开始时间
    var startTime:String?
    /// 攻击结束时间
    var endTime:String?
    /// 状态，0-&gt;完成，1-&gt;清洗，2-&gt;黑洞
    var status:Int?
    /// 触发原因，0-&gt;未知，1-&gt;四层，2-&gt;七层，3-&gt;四和7层
    var cause:Int?



    public override init(){
            super.init()
    }

    enum IpResourceProtectInfoCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case status
        case cause
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: IpResourceProtectInfoCodingKeys.self)
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.cause)
        {
            self.cause = try decoderContainer.decode(Int?.self, forKey: .cause)
        }
    }
}
public extension IpResourceProtectInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: IpResourceProtectInfoCodingKeys.self)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(cause, forKey: .cause)
    }
}
