/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  ipCleanThresholdRange
@objc(IpCleanThresholdRange)
public class IpCleanThresholdRange:NSObject,Codable{
    /// 清洗流量可设置最大值
    var ipCleanThresholdBpsMax:Double?
    /// 清洗流量可设置最小值
    var ipCleanThresholdBpsMin:Double?
    /// 清洗报文流量可设置最大值
    var ipCleanThresholdPpsMax:Double?
    /// 清洗报文流量可设置最小值
    var ipCleanThresholdPpsMin:Double?



    public override init(){
            super.init()
    }

    enum IpCleanThresholdRangeCodingKeys: String, CodingKey {
        case ipCleanThresholdBpsMax
        case ipCleanThresholdBpsMin
        case ipCleanThresholdPpsMax
        case ipCleanThresholdPpsMin
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: IpCleanThresholdRangeCodingKeys.self)
        if decoderContainer.contains(.ipCleanThresholdBpsMax)
        {
            self.ipCleanThresholdBpsMax = try decoderContainer.decode(Double?.self, forKey: .ipCleanThresholdBpsMax)
        }
        if decoderContainer.contains(.ipCleanThresholdBpsMin)
        {
            self.ipCleanThresholdBpsMin = try decoderContainer.decode(Double?.self, forKey: .ipCleanThresholdBpsMin)
        }
        if decoderContainer.contains(.ipCleanThresholdPpsMax)
        {
            self.ipCleanThresholdPpsMax = try decoderContainer.decode(Double?.self, forKey: .ipCleanThresholdPpsMax)
        }
        if decoderContainer.contains(.ipCleanThresholdPpsMin)
        {
            self.ipCleanThresholdPpsMin = try decoderContainer.decode(Double?.self, forKey: .ipCleanThresholdPpsMin)
        }
    }
}
public extension IpCleanThresholdRange{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: IpCleanThresholdRangeCodingKeys.self)
         try encoderContainer.encode(ipCleanThresholdBpsMax, forKey: .ipCleanThresholdBpsMax)
         try encoderContainer.encode(ipCleanThresholdBpsMin, forKey: .ipCleanThresholdBpsMin)
         try encoderContainer.encode(ipCleanThresholdPpsMax, forKey: .ipCleanThresholdPpsMax)
         try encoderContainer.encode(ipCleanThresholdPpsMin, forKey: .ipCleanThresholdPpsMin)
    }
}
