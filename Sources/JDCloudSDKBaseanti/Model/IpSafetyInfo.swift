/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  ipSafetyInfo
@objc(IpSafetyInfo)
public class IpSafetyInfo:NSObject,Codable{
    /// 公网 IP 地址
    var ip:String?
    /// 安全状态, 0-&gt;安全, 1-&gt;清洗, 2-&gt;黑洞
    var safetyStatus:Int?
    /// 地域编码
    var region:String?
    /// 黑洞阈值, 单位 bps
    var blackHoleThreshold:Int64?
    /// 触发清洗的流量速率, 单位 bps
    var cleanThresholdBps:Int64?
    /// 触发清洗的包速率, 单位 pps
    var cleanThresholdPps:Int64?



    public override init(){
            super.init()
    }

    enum IpSafetyInfoCodingKeys: String, CodingKey {
        case ip
        case safetyStatus
        case region
        case blackHoleThreshold
        case cleanThresholdBps
        case cleanThresholdPps
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: IpSafetyInfoCodingKeys.self)
        if decoderContainer.contains(.ip)
        {
            self.ip = try decoderContainer.decode(String?.self, forKey: .ip)
        }
        if decoderContainer.contains(.safetyStatus)
        {
            self.safetyStatus = try decoderContainer.decode(Int?.self, forKey: .safetyStatus)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.blackHoleThreshold)
        {
            self.blackHoleThreshold = try decoderContainer.decode(Int64?.self, forKey: .blackHoleThreshold)
        }
        if decoderContainer.contains(.cleanThresholdBps)
        {
            self.cleanThresholdBps = try decoderContainer.decode(Int64?.self, forKey: .cleanThresholdBps)
        }
        if decoderContainer.contains(.cleanThresholdPps)
        {
            self.cleanThresholdPps = try decoderContainer.decode(Int64?.self, forKey: .cleanThresholdPps)
        }
    }
}
public extension IpSafetyInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: IpSafetyInfoCodingKeys.self)
         try encoderContainer.encode(ip, forKey: .ip)
         try encoderContainer.encode(safetyStatus, forKey: .safetyStatus)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(blackHoleThreshold, forKey: .blackHoleThreshold)
         try encoderContainer.encode(cleanThresholdBps, forKey: .cleanThresholdBps)
         try encoderContainer.encode(cleanThresholdPps, forKey: .cleanThresholdPps)
    }
}
