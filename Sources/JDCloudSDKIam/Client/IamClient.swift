/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   IAM API
   IAM相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class IamJDCloudClient:NSObject,JDCloudClient{
    
    private final var iamJDCloudClient:IamJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        iamJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "iam.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        iamJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "iam/" + "v1"
    
    public let serviceName: String = "iam"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func deleteSubUserAsync(request:DeleteSubUserRequest,requestComplation:@escaping ExecuteResult<DeleteSubUserResult>) throws {
        iamJDCloudClient = self
        try DeleteSubUserExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeGroupsAsync(request:DescribeGroupsRequest,requestComplation:@escaping ExecuteResult<DescribeGroupsResult>) throws {
        iamJDCloudClient = self
        try DescribeGroupsExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAttachedGroupPoliciesAsync(request:DescribeAttachedGroupPoliciesRequest,requestComplation:@escaping ExecuteResult<DescribeAttachedGroupPoliciesResult>) throws {
        iamJDCloudClient = self
        try DescribeAttachedGroupPoliciesExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createSubUserAsync(request:CreateSubUserRequest,requestComplation:@escaping ExecuteResult<CreateSubUserResult>) throws {
        iamJDCloudClient = self
        try CreateSubUserExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deletePolicyAsync(request:DeletePolicyRequest,requestComplation:@escaping ExecuteResult<DeletePolicyResult>) throws {
        iamJDCloudClient = self
        try DeletePolicyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func detachRolePolicyAsync(request:DetachRolePolicyRequest,requestComplation:@escaping ExecuteResult<DetachRolePolicyResult>) throws {
        iamJDCloudClient = self
        try DetachRolePolicyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSubUserGroupsAsync(request:DescribeSubUserGroupsRequest,requestComplation:@escaping ExecuteResult<DescribeSubUserGroupsResult>) throws {
        iamJDCloudClient = self
        try DescribeSubUserGroupsExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeGroupAsync(request:DescribeGroupRequest,requestComplation:@escaping ExecuteResult<DescribeGroupResult>) throws {
        iamJDCloudClient = self
        try DescribeGroupExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSubUserAsync(request:DescribeSubUserRequest,requestComplation:@escaping ExecuteResult<DescribeSubUserResult>) throws {
        iamJDCloudClient = self
        try DescribeSubUserExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updatePolicyDescriptionAsync(request:UpdatePolicyDescriptionRequest,requestComplation:@escaping ExecuteResult<UpdatePolicyDescriptionResult>) throws {
        iamJDCloudClient = self
        try UpdatePolicyDescriptionExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enabledUserAccessKeyAsync(request:EnabledUserAccessKeyRequest,requestComplation:@escaping ExecuteResult<EnabledUserAccessKeyResult>) throws {
        iamJDCloudClient = self
        try EnabledUserAccessKeyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateGroupAsync(request:UpdateGroupRequest,requestComplation:@escaping ExecuteResult<UpdateGroupResult>) throws {
        iamJDCloudClient = self
        try UpdateGroupExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func removePermissionOfSubUserAsync(request:RemovePermissionOfSubUserRequest,requestComplation:@escaping ExecuteResult<RemovePermissionOfSubUserResult>) throws {
        iamJDCloudClient = self
        try RemovePermissionOfSubUserExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAttachedSubUserPoliciesAsync(request:DescribeAttachedSubUserPoliciesRequest,requestComplation:@escaping ExecuteResult<DescribeAttachedSubUserPoliciesResult>) throws {
        iamJDCloudClient = self
        try DescribeAttachedSubUserPoliciesExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updatePolicyAsync(request:UpdatePolicyRequest,requestComplation:@escaping ExecuteResult<UpdatePolicyResult>) throws {
        iamJDCloudClient = self
        try UpdatePolicyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addSubUserToGroupAsync(request:AddSubUserToGroupRequest,requestComplation:@escaping ExecuteResult<AddSubUserToGroupResult>) throws {
        iamJDCloudClient = self
        try AddSubUserToGroupExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createGroupAsync(request:CreateGroupRequest,requestComplation:@escaping ExecuteResult<CreateGroupResult>) throws {
        iamJDCloudClient = self
        try CreateGroupExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func attachRolePolicyAsync(request:AttachRolePolicyRequest,requestComplation:@escaping ExecuteResult<AttachRolePolicyResult>) throws {
        iamJDCloudClient = self
        try AttachRolePolicyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteSubUserAccessKeyAsync(request:DeleteSubUserAccessKeyRequest,requestComplation:@escaping ExecuteResult<DeleteSubUserAccessKeyResult>) throws {
        iamJDCloudClient = self
        try DeleteSubUserAccessKeyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disabledUserAccessKeyAsync(request:DisabledUserAccessKeyRequest,requestComplation:@escaping ExecuteResult<DisabledUserAccessKeyResult>) throws {
        iamJDCloudClient = self
        try DisabledUserAccessKeyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createRoleAsync(request:CreateRoleRequest,requestComplation:@escaping ExecuteResult<CreateRoleResult>) throws {
        iamJDCloudClient = self
        try CreateRoleExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSubUserPermissionsAsync(request:DescribeSubUserPermissionsRequest,requestComplation:@escaping ExecuteResult<DescribeSubUserPermissionsResult>) throws {
        iamJDCloudClient = self
        try DescribeSubUserPermissionsExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updatePermissionAsync(request:UpdatePermissionRequest,requestComplation:@escaping ExecuteResult<UpdatePermissionResult>) throws {
        iamJDCloudClient = self
        try UpdatePermissionExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func attachSubUserPolicyAsync(request:AttachSubUserPolicyRequest,requestComplation:@escaping ExecuteResult<AttachSubUserPolicyResult>) throws {
        iamJDCloudClient = self
        try AttachSubUserPolicyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSubUsersAsync(request:DescribeSubUsersRequest,requestComplation:@escaping ExecuteResult<DescribeSubUsersResult>) throws {
        iamJDCloudClient = self
        try DescribeSubUsersExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableSubUserAccessKeyAsync(request:DisableSubUserAccessKeyRequest,requestComplation:@escaping ExecuteResult<DisableSubUserAccessKeyResult>) throws {
        iamJDCloudClient = self
        try DisableSubUserAccessKeyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describePoliciesAsync(request:DescribePoliciesRequest,requestComplation:@escaping ExecuteResult<DescribePoliciesResult>) throws {
        iamJDCloudClient = self
        try DescribePoliciesExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createPolicyAsync(request:CreatePolicyRequest,requestComplation:@escaping ExecuteResult<CreatePolicyResult>) throws {
        iamJDCloudClient = self
        try CreatePolicyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describePermissionsAsync(request:DescribePermissionsRequest,requestComplation:@escaping ExecuteResult<DescribePermissionsResult>) throws {
        iamJDCloudClient = self
        try DescribePermissionsExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeRolePoliciesAsync(request:DescribeRolePoliciesRequest,requestComplation:@escaping ExecuteResult<DescribeRolePoliciesResult>) throws {
        iamJDCloudClient = self
        try DescribeRolePoliciesExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteUserAccessKeyAsync(request:DeleteUserAccessKeyRequest,requestComplation:@escaping ExecuteResult<DeleteUserAccessKeyResult>) throws {
        iamJDCloudClient = self
        try DeleteUserAccessKeyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func detachSubUserPolicyAsync(request:DetachSubUserPolicyRequest,requestComplation:@escaping ExecuteResult<DetachSubUserPolicyResult>) throws {
        iamJDCloudClient = self
        try DetachSubUserPolicyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeUserAccessKeysAsync(request:DescribeUserAccessKeysRequest,requestComplation:@escaping ExecuteResult<DescribeUserAccessKeysResult>) throws {
        iamJDCloudClient = self
        try DescribeUserAccessKeysExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func attachGroupPolicyAsync(request:AttachGroupPolicyRequest,requestComplation:@escaping ExecuteResult<AttachGroupPolicyResult>) throws {
        iamJDCloudClient = self
        try AttachGroupPolicyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateSubUserAsync(request:UpdateSubUserRequest,requestComplation:@escaping ExecuteResult<UpdateSubUserResult>) throws {
        iamJDCloudClient = self
        try UpdateSubUserExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeGroupSubUsersAsync(request:DescribeGroupSubUsersRequest,requestComplation:@escaping ExecuteResult<DescribeGroupSubUsersResult>) throws {
        iamJDCloudClient = self
        try DescribeGroupSubUsersExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createPermissionAsync(request:CreatePermissionRequest,requestComplation:@escaping ExecuteResult<CreatePermissionResult>) throws {
        iamJDCloudClient = self
        try CreatePermissionExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func detachGroupPolicyAsync(request:DetachGroupPolicyRequest,requestComplation:@escaping ExecuteResult<DetachGroupPolicyResult>) throws {
        iamJDCloudClient = self
        try DetachGroupPolicyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeRoleAsync(request:DescribeRoleRequest,requestComplation:@escaping ExecuteResult<DescribeRoleResult>) throws {
        iamJDCloudClient = self
        try DescribeRoleExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateAssumeRolePolicyAsync(request:UpdateAssumeRolePolicyRequest,requestComplation:@escaping ExecuteResult<UpdateAssumeRolePolicyResult>) throws {
        iamJDCloudClient = self
        try UpdateAssumeRolePolicyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeRolesAsync(request:DescribeRolesRequest,requestComplation:@escaping ExecuteResult<DescribeRolesResult>) throws {
        iamJDCloudClient = self
        try DescribeRolesExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteGroupAsync(request:DeleteGroupRequest,requestComplation:@escaping ExecuteResult<DeleteGroupResult>) throws {
        iamJDCloudClient = self
        try DeleteGroupExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describePermissionDetailAsync(request:DescribePermissionDetailRequest,requestComplation:@escaping ExecuteResult<DescribePermissionDetailResult>) throws {
        iamJDCloudClient = self
        try DescribePermissionDetailExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addPermissionsToSubUserAsync(request:AddPermissionsToSubUserRequest,requestComplation:@escaping ExecuteResult<AddPermissionsToSubUserResult>) throws {
        iamJDCloudClient = self
        try AddPermissionsToSubUserExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describePolicyAsync(request:DescribePolicyRequest,requestComplation:@escaping ExecuteResult<DescribePolicyResult>) throws {
        iamJDCloudClient = self
        try DescribePolicyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createUserAccessKeyAsync(request:CreateUserAccessKeyRequest,requestComplation:@escaping ExecuteResult<CreateUserAccessKeyResult>) throws {
        iamJDCloudClient = self
        try CreateUserAccessKeyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func removeSubUserFromGroupAsync(request:RemoveSubUserFromGroupRequest,requestComplation:@escaping ExecuteResult<RemoveSubUserFromGroupResult>) throws {
        iamJDCloudClient = self
        try RemoveSubUserFromGroupExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteRoleAsync(request:DeleteRoleRequest,requestComplation:@escaping ExecuteResult<DeleteRoleResult>) throws {
        iamJDCloudClient = self
        try DeleteRoleExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableSubUserAccessKeyAsync(request:EnableSubUserAccessKeyRequest,requestComplation:@escaping ExecuteResult<EnableSubUserAccessKeyResult>) throws {
        iamJDCloudClient = self
        try EnableSubUserAccessKeyExecutor(jdCloudClient: iamJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension IamJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "iam.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
