/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  emailSmsInfo
@objc(EmailSmsInfo)
public class EmailSmsInfo:NSObject,Codable{
    /// 用户pin
    /// Required:true
    var createPin:String
    /// 邮件标题
    var title:String?
    /// 发送类型 1 发邮件 2 发短信
    /// Required:true
    var sendType:Int
    /// 邮件内容
    var content:String?
    /// 接收人
    /// Required:true
    var receives:[String?]
    /// 模版code
    /// Required:true
    var templateId:Int
    /// 模版参数
    /// Required:true
    var templateParam:[String?]
    /// 业务编码(和产品申请)
    /// Required:true
    var smsMessageSource:String



    public  init(createPin:String,sendType:Int,receives:[String?],templateId:Int,templateParam:[String?],smsMessageSource:String){
             self.createPin = createPin
             self.sendType = sendType
             self.receives = receives
             self.templateId = templateId
             self.templateParam = templateParam
             self.smsMessageSource = smsMessageSource
    }

    enum EmailSmsInfoCodingKeys: String, CodingKey {
        case createPin
        case title
        case sendType
        case content
        case receives
        case templateId
        case templateParam
        case smsMessageSource
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EmailSmsInfoCodingKeys.self)
        self.createPin = try decoderContainer.decode(String.self, forKey: .createPin)
        if decoderContainer.contains(.title)
        {
            self.title = try decoderContainer.decode(String?.self, forKey: .title)
        }
        self.sendType = try decoderContainer.decode(Int.self, forKey: .sendType)
        if decoderContainer.contains(.content)
        {
            self.content = try decoderContainer.decode(String?.self, forKey: .content)
        }
        self.receives = try decoderContainer.decode([String?].self, forKey: .receives)
        self.templateId = try decoderContainer.decode(Int.self, forKey: .templateId)
        self.templateParam = try decoderContainer.decode([String?].self, forKey: .templateParam)
        self.smsMessageSource = try decoderContainer.decode(String.self, forKey: .smsMessageSource)
    }
}
public extension EmailSmsInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EmailSmsInfoCodingKeys.self)
         try encoderContainer.encode(createPin, forKey: .createPin)
         try encoderContainer.encode(title, forKey: .title)
         try encoderContainer.encode(sendType, forKey: .sendType)
         try encoderContainer.encode(content, forKey: .content)
         try encoderContainer.encode(receives, forKey: .receives)
         try encoderContainer.encode(templateId, forKey: .templateId)
         try encoderContainer.encode(templateParam, forKey: .templateParam)
         try encoderContainer.encode(smsMessageSource, forKey: .smsMessageSource)
    }
}
