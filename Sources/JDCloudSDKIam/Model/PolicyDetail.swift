/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  policyDetail
@objc(PolicyDetail)
public class PolicyDetail:NSObject,Codable{
    /// 策略id
    var policyId:String?
    /// 策略名称
    var name:String?
    /// 京东云资源标识(jrn)
    var jrn:String?
    /// 描述
    var descriptionValue:String?
    /// 策略类型
    var policyType:String?
    /// 策略版本号
    var version:String?
    /// 默认策略文档版本
    var defaultEdition:Int?
    /// 策略文档
    var content:String?
    /// 策略创建时间
    var createTime:String?
    /// 策略更新时间
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum PolicyDetailCodingKeys: String, CodingKey {
        case policyId
        case name
        case jrn
        case descriptionValue = "description"
        case policyType
        case version
        case defaultEdition
        case content
        case createTime
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PolicyDetailCodingKeys.self)
        if decoderContainer.contains(.policyId)
        {
            self.policyId = try decoderContainer.decode(String?.self, forKey: .policyId)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.jrn)
        {
            self.jrn = try decoderContainer.decode(String?.self, forKey: .jrn)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.policyType)
        {
            self.policyType = try decoderContainer.decode(String?.self, forKey: .policyType)
        }
        if decoderContainer.contains(.version)
        {
            self.version = try decoderContainer.decode(String?.self, forKey: .version)
        }
        if decoderContainer.contains(.defaultEdition)
        {
            self.defaultEdition = try decoderContainer.decode(Int?.self, forKey: .defaultEdition)
        }
        if decoderContainer.contains(.content)
        {
            self.content = try decoderContainer.decode(String?.self, forKey: .content)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension PolicyDetail{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PolicyDetailCodingKeys.self)
         try encoderContainer.encode(policyId, forKey: .policyId)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(jrn, forKey: .jrn)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(policyType, forKey: .policyType)
         try encoderContainer.encode(version, forKey: .version)
         try encoderContainer.encode(defaultEdition, forKey: .defaultEdition)
         try encoderContainer.encode(content, forKey: .content)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
