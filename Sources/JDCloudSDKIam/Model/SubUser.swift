/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  subUser
@objc(SubUser)
public class SubUser:NSObject,Codable{
    /// 用户名
    var name:String?
    /// 手机号码
    var phone:String?
    /// 邮箱
    var email:String?
    /// 描述信息
    var descriptionValue:String?
    /// 主账号
    var account:String?
    /// 用户创建时间
    var createTime:String?
    /// 用户更新时间
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum SubUserCodingKeys: String, CodingKey {
        case name
        case phone
        case email
        case descriptionValue = "description"
        case account
        case createTime
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SubUserCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.phone)
        {
            self.phone = try decoderContainer.decode(String?.self, forKey: .phone)
        }
        if decoderContainer.contains(.email)
        {
            self.email = try decoderContainer.decode(String?.self, forKey: .email)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.account)
        {
            self.account = try decoderContainer.decode(String?.self, forKey: .account)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension SubUser{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SubUserCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(phone, forKey: .phone)
         try encoderContainer.encode(email, forKey: .email)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(account, forKey: .account)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
