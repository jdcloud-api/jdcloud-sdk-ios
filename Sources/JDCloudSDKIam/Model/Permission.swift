/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  permission
@objc(Permission)
public class Permission:NSObject,Codable{
    /// 权限id
    var id:Int?
    /// 主账号pin
    var account:String?
    /// 权限名称
    var name:String?
    /// 描述
    var descriptionValue:String?
    /// 权限类型
    var permissionType:String?
    /// 权限版本号
    var version:String?
    /// 权限内容
    var content:String?
    /// 权限详细信息
    var permissionDetailList:[PermissionDetail?]?



    public override init(){
            super.init()
    }

    enum PermissionCodingKeys: String, CodingKey {
        case id
        case account
        case name
        case descriptionValue = "description"
        case permissionType
        case version
        case content
        case permissionDetailList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PermissionCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.account)
        {
            self.account = try decoderContainer.decode(String?.self, forKey: .account)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.permissionType)
        {
            self.permissionType = try decoderContainer.decode(String?.self, forKey: .permissionType)
        }
        if decoderContainer.contains(.version)
        {
            self.version = try decoderContainer.decode(String?.self, forKey: .version)
        }
        if decoderContainer.contains(.content)
        {
            self.content = try decoderContainer.decode(String?.self, forKey: .content)
        }
        if decoderContainer.contains(.permissionDetailList)
        {
            self.permissionDetailList = try decoderContainer.decode([PermissionDetail?]?.self, forKey: .permissionDetailList)
        }
    }
}
public extension Permission{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PermissionCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(account, forKey: .account)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(permissionType, forKey: .permissionType)
         try encoderContainer.encode(version, forKey: .version)
         try encoderContainer.encode(content, forKey: .content)
         try encoderContainer.encode(permissionDetailList, forKey: .permissionDetailList)
    }
}
