/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  passwordPolicyRule
@objc(PasswordPolicyRule)
public class PasswordPolicyRule:NSObject,Codable{
    /// 是否包含大写字母
    /// Required:true
    var requireUppercaseCharacters:Bool
    /// 是否包含小写字母
    /// Required:true
    var requireLowercaseCharacters:Bool
    /// 是否包含数字
    /// Required:true
    var requireNumbers:Bool
    /// 是否包含特殊字符
    /// Required:true
    var requireSpecialCharacters:Bool



    public  init(requireUppercaseCharacters:Bool,requireLowercaseCharacters:Bool,requireNumbers:Bool,requireSpecialCharacters:Bool){
             self.requireUppercaseCharacters = requireUppercaseCharacters
             self.requireLowercaseCharacters = requireLowercaseCharacters
             self.requireNumbers = requireNumbers
             self.requireSpecialCharacters = requireSpecialCharacters
    }

    enum PasswordPolicyRuleCodingKeys: String, CodingKey {
        case requireUppercaseCharacters
        case requireLowercaseCharacters
        case requireNumbers
        case requireSpecialCharacters
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PasswordPolicyRuleCodingKeys.self)
        self.requireUppercaseCharacters = try decoderContainer.decode(Bool.self, forKey: .requireUppercaseCharacters)
        self.requireLowercaseCharacters = try decoderContainer.decode(Bool.self, forKey: .requireLowercaseCharacters)
        self.requireNumbers = try decoderContainer.decode(Bool.self, forKey: .requireNumbers)
        self.requireSpecialCharacters = try decoderContainer.decode(Bool.self, forKey: .requireSpecialCharacters)
    }
}
public extension PasswordPolicyRule{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PasswordPolicyRuleCodingKeys.self)
         try encoderContainer.encode(requireUppercaseCharacters, forKey: .requireUppercaseCharacters)
         try encoderContainer.encode(requireLowercaseCharacters, forKey: .requireLowercaseCharacters)
         try encoderContainer.encode(requireNumbers, forKey: .requireNumbers)
         try encoderContainer.encode(requireSpecialCharacters, forKey: .requireSpecialCharacters)
    }
}
