/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createSubUserInfo
@objc(CreateSubUserInfo)
public class CreateSubUserInfo:NSObject,Codable{
    /// 子账号用户名，4~20位数字、字母、中文、下划线、中划线
    /// Required:true
    var name:String
    /// 描述，0~256个字符
    var descriptionValue:String?
    /// 密码，6~20位，至少包含一个字母，至少包含一个数字或半角符号
    /// Required:true
    var password:String
    /// 手机号码，区号-手机号，目前只支持0086-中国手机号码
    /// Required:true
    var phone:String
    /// 邮箱
    /// Required:true
    var email:String
    /// 确认密码
    /// Required:true
    var passwordConfirm:String
    /// 是否创建accessKey
    /// Required:true
    var createAk:Bool



    public  init(name:String,password:String,phone:String,email:String,passwordConfirm:String,createAk:Bool){
             self.name = name
             self.password = password
             self.phone = phone
             self.email = email
             self.passwordConfirm = passwordConfirm
             self.createAk = createAk
    }

    enum CreateSubUserInfoCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case password
        case phone
        case email
        case passwordConfirm
        case createAk
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubUserInfoCodingKeys.self)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        self.password = try decoderContainer.decode(String.self, forKey: .password)
        self.phone = try decoderContainer.decode(String.self, forKey: .phone)
        self.email = try decoderContainer.decode(String.self, forKey: .email)
        self.passwordConfirm = try decoderContainer.decode(String.self, forKey: .passwordConfirm)
        self.createAk = try decoderContainer.decode(Bool.self, forKey: .createAk)
    }
}
public extension CreateSubUserInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubUserInfoCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(password, forKey: .password)
         try encoderContainer.encode(phone, forKey: .phone)
         try encoderContainer.encode(email, forKey: .email)
         try encoderContainer.encode(passwordConfirm, forKey: .passwordConfirm)
         try encoderContainer.encode(createAk, forKey: .createAk)
    }
}
