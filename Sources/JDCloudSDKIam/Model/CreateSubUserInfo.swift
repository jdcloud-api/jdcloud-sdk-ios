/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createSubUserInfo
@objc(CreateSubUserInfo)
public class CreateSubUserInfo:NSObject,Codable{
    /// 子用户名：支持4-20位的字母，数字以及-和_，以字母开头
    /// Required:true
    var name:String
    /// 描述，0~256个字符
    var descriptionValue:String?
    /// 按照密码策略设置，默认8~20位，至少包含一个小写字母、大写字母和数字
    /// Required:true
    var password:String
    /// 手机号码，区号-手机号
    /// Required:true
    var phone:String
    /// 邮箱
    /// Required:true
    var email:String
    /// 是否创建accessKey，默认false
    var createAk:Bool?
    /// 子用户首次登录是否需要重置密码，默认false
    var needResetPassword:Bool?
    /// 子用户是否支持控制台登录，默认true
    var consoleLogin:Bool?
    /// 是否自动生成密码，默认false
    var autoGeneratePassword:Bool?



    public  init(name:String,password:String,phone:String,email:String){
             self.name = name
             self.password = password
             self.phone = phone
             self.email = email
    }

    enum CreateSubUserInfoCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case password
        case phone
        case email
        case createAk
        case needResetPassword
        case consoleLogin
        case autoGeneratePassword
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubUserInfoCodingKeys.self)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        self.password = try decoderContainer.decode(String.self, forKey: .password)
        self.phone = try decoderContainer.decode(String.self, forKey: .phone)
        self.email = try decoderContainer.decode(String.self, forKey: .email)
        if decoderContainer.contains(.createAk)
        {
            self.createAk = try decoderContainer.decode(Bool?.self, forKey: .createAk)
        }
        if decoderContainer.contains(.needResetPassword)
        {
            self.needResetPassword = try decoderContainer.decode(Bool?.self, forKey: .needResetPassword)
        }
        if decoderContainer.contains(.consoleLogin)
        {
            self.consoleLogin = try decoderContainer.decode(Bool?.self, forKey: .consoleLogin)
        }
        if decoderContainer.contains(.autoGeneratePassword)
        {
            self.autoGeneratePassword = try decoderContainer.decode(Bool?.self, forKey: .autoGeneratePassword)
        }
    }
}
public extension CreateSubUserInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubUserInfoCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(password, forKey: .password)
         try encoderContainer.encode(phone, forKey: .phone)
         try encoderContainer.encode(email, forKey: .email)
         try encoderContainer.encode(createAk, forKey: .createAk)
         try encoderContainer.encode(needResetPassword, forKey: .needResetPassword)
         try encoderContainer.encode(consoleLogin, forKey: .consoleLogin)
         try encoderContainer.encode(autoGeneratePassword, forKey: .autoGeneratePassword)
    }
}
