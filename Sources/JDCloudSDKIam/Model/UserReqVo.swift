/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  userReqVo
@objc(UserReqVo)
public class UserReqVo:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 用户手机号
    var cscPhone:String?
    /// 用户邮箱
    var cscEmail:String?
    /// 用户名
    var name:String?
    /// 用户类型
    var userType:Int?
    /// 公司名
    var companyName:String?
    /// 起始时间
    var createTimeStart:String?
    /// 结束时间
    var createTimeEnd:String?
    /// 欠费状态：
    var arrearageStatus:Int?
    /// 用户分组，多个逗号分隔:1-自然流量，2-内部测试，3-内部重点，4-渠道用户
    var groups:String?
    /// 用户分组:1-自然流量，2-内部测试，3-内部重点，4-渠道用户
    var group:Int?
    /// 计费白名单：1、在白名单  2、不在白名单
    var billingWhite:Int?
    /// 渠道等级;1普通用户2测试用户4VIP用户8其他VIP用户16boss迁移账户
    var tag:Int?
    /// 页大小
    var pageSize:Int?
    /// 当前页
    var currentPage:Int?



    public override init(){
            super.init()
    }

    enum UserReqVoCodingKeys: String, CodingKey {
        case pin
        case cscPhone
        case cscEmail
        case name
        case userType
        case companyName
        case createTimeStart
        case createTimeEnd
        case arrearageStatus
        case groups
        case group
        case billingWhite
        case tag
        case pageSize
        case currentPage
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UserReqVoCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.cscPhone)
        {
            self.cscPhone = try decoderContainer.decode(String?.self, forKey: .cscPhone)
        }
        if decoderContainer.contains(.cscEmail)
        {
            self.cscEmail = try decoderContainer.decode(String?.self, forKey: .cscEmail)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.userType)
        {
            self.userType = try decoderContainer.decode(Int?.self, forKey: .userType)
        }
        if decoderContainer.contains(.companyName)
        {
            self.companyName = try decoderContainer.decode(String?.self, forKey: .companyName)
        }
        if decoderContainer.contains(.createTimeStart)
        {
            self.createTimeStart = try decoderContainer.decode(String?.self, forKey: .createTimeStart)
        }
        if decoderContainer.contains(.createTimeEnd)
        {
            self.createTimeEnd = try decoderContainer.decode(String?.self, forKey: .createTimeEnd)
        }
        if decoderContainer.contains(.arrearageStatus)
        {
            self.arrearageStatus = try decoderContainer.decode(Int?.self, forKey: .arrearageStatus)
        }
        if decoderContainer.contains(.groups)
        {
            self.groups = try decoderContainer.decode(String?.self, forKey: .groups)
        }
        if decoderContainer.contains(.group)
        {
            self.group = try decoderContainer.decode(Int?.self, forKey: .group)
        }
        if decoderContainer.contains(.billingWhite)
        {
            self.billingWhite = try decoderContainer.decode(Int?.self, forKey: .billingWhite)
        }
        if decoderContainer.contains(.tag)
        {
            self.tag = try decoderContainer.decode(Int?.self, forKey: .tag)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.currentPage)
        {
            self.currentPage = try decoderContainer.decode(Int?.self, forKey: .currentPage)
        }
    }
}
public extension UserReqVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UserReqVoCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(cscPhone, forKey: .cscPhone)
         try encoderContainer.encode(cscEmail, forKey: .cscEmail)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(userType, forKey: .userType)
         try encoderContainer.encode(companyName, forKey: .companyName)
         try encoderContainer.encode(createTimeStart, forKey: .createTimeStart)
         try encoderContainer.encode(createTimeEnd, forKey: .createTimeEnd)
         try encoderContainer.encode(arrearageStatus, forKey: .arrearageStatus)
         try encoderContainer.encode(groups, forKey: .groups)
         try encoderContainer.encode(group, forKey: .group)
         try encoderContainer.encode(billingWhite, forKey: .billingWhite)
         try encoderContainer.encode(tag, forKey: .tag)
         try encoderContainer.encode(pageSize, forKey: .pageSize)
         try encoderContainer.encode(currentPage, forKey: .currentPage)
    }
}
