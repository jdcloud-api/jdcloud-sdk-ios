/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  sendBatchMsg
@objc(SendBatchMsg)
public class SendBatchMsg:NSObject,Codable{
    /// 模版code
    /// Required:true
    var templateId:Int
    /// 模版参数
    /// Required:true
    var templateParam:[String?]
    /// 业务编码(和产品申请)
    /// Required:true
    var smsMessageSource:String
    /// 用户pin
    /// Required:true
    var pin:String
    /// 手机号
    /// Required:true
    var mobileNumSet:[String?]



    public  init(templateId:Int,templateParam:[String?],smsMessageSource:String,pin:String,mobileNumSet:[String?]){
             self.templateId = templateId
             self.templateParam = templateParam
             self.smsMessageSource = smsMessageSource
             self.pin = pin
             self.mobileNumSet = mobileNumSet
    }

    enum SendBatchMsgCodingKeys: String, CodingKey {
        case templateId
        case templateParam
        case smsMessageSource
        case pin
        case mobileNumSet
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SendBatchMsgCodingKeys.self)
        self.templateId = try decoderContainer.decode(Int.self, forKey: .templateId)
        self.templateParam = try decoderContainer.decode([String?].self, forKey: .templateParam)
        self.smsMessageSource = try decoderContainer.decode(String.self, forKey: .smsMessageSource)
        self.pin = try decoderContainer.decode(String.self, forKey: .pin)
        self.mobileNumSet = try decoderContainer.decode([String?].self, forKey: .mobileNumSet)
    }
}
public extension SendBatchMsg{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SendBatchMsgCodingKeys.self)
         try encoderContainer.encode(templateId, forKey: .templateId)
         try encoderContainer.encode(templateParam, forKey: .templateParam)
         try encoderContainer.encode(smsMessageSource, forKey: .smsMessageSource)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(mobileNumSet, forKey: .mobileNumSet)
    }
}
