/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  regionAzVo
@objc(RegionAzVo)
public class RegionAzVo:NSObject,Codable{
    /// 别名
    var alias:String?
    /// 地域
    var region:String?
    /// 是否可见(1可见 0不可见)
    var visible:Int?
    /// az状态信息
    var azStatusList:[AzSaleStatusVo?]?



    public override init(){
            super.init()
    }

    enum RegionAzVoCodingKeys: String, CodingKey {
        case alias
        case region
        case visible
        case azStatusList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RegionAzVoCodingKeys.self)
        if decoderContainer.contains(.alias)
        {
            self.alias = try decoderContainer.decode(String?.self, forKey: .alias)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.visible)
        {
            self.visible = try decoderContainer.decode(Int?.self, forKey: .visible)
        }
        if decoderContainer.contains(.azStatusList)
        {
            self.azStatusList = try decoderContainer.decode([AzSaleStatusVo?]?.self, forKey: .azStatusList)
        }
    }
}
public extension RegionAzVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RegionAzVoCodingKeys.self)
         try encoderContainer.encode(alias, forKey: .alias)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(visible, forKey: .visible)
         try encoderContainer.encode(azStatusList, forKey: .azStatusList)
    }
}
