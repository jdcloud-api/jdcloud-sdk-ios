/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  userAttachment
@objc(UserAttachment)
public class UserAttachment:NSObject,Codable{
    /// 公司名称
    var remark:String?
    /// 主营行业
    var industry:String?
    /// 主营行业子选项
    var subIndustry:String?
    /// 主营业务
    var business:String?
    /// 网站
    var website:String?
    /// 国家
    var cpState:String?
    /// 省
    var cpProvince:String?
    /// 市
    var cpCity:String?
    /// 区县
    var cpCountry:String?
    /// 详细地址
    var cpAddress:String?
    /// 联系手机
    var cpTelphone:String?



    public override init(){
            super.init()
    }

    enum UserAttachmentCodingKeys: String, CodingKey {
        case remark
        case industry
        case subIndustry
        case business
        case website
        case cpState
        case cpProvince
        case cpCity
        case cpCountry
        case cpAddress
        case cpTelphone
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UserAttachmentCodingKeys.self)
        if decoderContainer.contains(.remark)
        {
            self.remark = try decoderContainer.decode(String?.self, forKey: .remark)
        }
        if decoderContainer.contains(.industry)
        {
            self.industry = try decoderContainer.decode(String?.self, forKey: .industry)
        }
        if decoderContainer.contains(.subIndustry)
        {
            self.subIndustry = try decoderContainer.decode(String?.self, forKey: .subIndustry)
        }
        if decoderContainer.contains(.business)
        {
            self.business = try decoderContainer.decode(String?.self, forKey: .business)
        }
        if decoderContainer.contains(.website)
        {
            self.website = try decoderContainer.decode(String?.self, forKey: .website)
        }
        if decoderContainer.contains(.cpState)
        {
            self.cpState = try decoderContainer.decode(String?.self, forKey: .cpState)
        }
        if decoderContainer.contains(.cpProvince)
        {
            self.cpProvince = try decoderContainer.decode(String?.self, forKey: .cpProvince)
        }
        if decoderContainer.contains(.cpCity)
        {
            self.cpCity = try decoderContainer.decode(String?.self, forKey: .cpCity)
        }
        if decoderContainer.contains(.cpCountry)
        {
            self.cpCountry = try decoderContainer.decode(String?.self, forKey: .cpCountry)
        }
        if decoderContainer.contains(.cpAddress)
        {
            self.cpAddress = try decoderContainer.decode(String?.self, forKey: .cpAddress)
        }
        if decoderContainer.contains(.cpTelphone)
        {
            self.cpTelphone = try decoderContainer.decode(String?.self, forKey: .cpTelphone)
        }
    }
}
public extension UserAttachment{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UserAttachmentCodingKeys.self)
         try encoderContainer.encode(remark, forKey: .remark)
         try encoderContainer.encode(industry, forKey: .industry)
         try encoderContainer.encode(subIndustry, forKey: .subIndustry)
         try encoderContainer.encode(business, forKey: .business)
         try encoderContainer.encode(website, forKey: .website)
         try encoderContainer.encode(cpState, forKey: .cpState)
         try encoderContainer.encode(cpProvince, forKey: .cpProvince)
         try encoderContainer.encode(cpCity, forKey: .cpCity)
         try encoderContainer.encode(cpCountry, forKey: .cpCountry)
         try encoderContainer.encode(cpAddress, forKey: .cpAddress)
         try encoderContainer.encode(cpTelphone, forKey: .cpTelphone)
    }
}
