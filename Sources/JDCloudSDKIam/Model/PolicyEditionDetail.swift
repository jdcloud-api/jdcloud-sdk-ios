/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  policyEditionDetail
@objc(PolicyEditionDetail)
public class PolicyEditionDetail:NSObject,Codable{
    /// 策略文档
    var document:String?
    /// 是否为默认版本
    var isDefaultEdition:Bool?
    /// 策略文档版本
    var edition:Int?
    /// 策略创建时间
    var createTime:String?



    public override init(){
            super.init()
    }

    enum PolicyEditionDetailCodingKeys: String, CodingKey {
        case document
        case isDefaultEdition
        case edition
        case createTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PolicyEditionDetailCodingKeys.self)
        if decoderContainer.contains(.document)
        {
            self.document = try decoderContainer.decode(String?.self, forKey: .document)
        }
        if decoderContainer.contains(.isDefaultEdition)
        {
            self.isDefaultEdition = try decoderContainer.decode(Bool?.self, forKey: .isDefaultEdition)
        }
        if decoderContainer.contains(.edition)
        {
            self.edition = try decoderContainer.decode(Int?.self, forKey: .edition)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
    }
}
public extension PolicyEditionDetail{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PolicyEditionDetailCodingKeys.self)
         try encoderContainer.encode(document, forKey: .document)
         try encoderContainer.encode(isDefaultEdition, forKey: .isDefaultEdition)
         try encoderContainer.encode(edition, forKey: .edition)
         try encoderContainer.encode(createTime, forKey: .createTime)
    }
}
