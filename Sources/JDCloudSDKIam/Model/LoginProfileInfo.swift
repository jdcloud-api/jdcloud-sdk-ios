/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  loginProfileInfo
@objc(LoginProfileInfo)
public class LoginProfileInfo:NSObject,Codable{
    /// 子用户名
    var name:String?
    /// 密码
    var password:String?
    /// 要求下次登录时重设密码
    var passwordResetRequired:Bool?
    /// 要求必须绑定多因素认证设备
    var mFABindRequired:Bool?



    public override init(){
            super.init()
    }

    enum LoginProfileInfoCodingKeys: String, CodingKey {
        case name
        case password
        case passwordResetRequired
        case mFABindRequired
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: LoginProfileInfoCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.password)
        {
            self.password = try decoderContainer.decode(String?.self, forKey: .password)
        }
        if decoderContainer.contains(.passwordResetRequired)
        {
            self.passwordResetRequired = try decoderContainer.decode(Bool?.self, forKey: .passwordResetRequired)
        }
        if decoderContainer.contains(.mFABindRequired)
        {
            self.mFABindRequired = try decoderContainer.decode(Bool?.self, forKey: .mFABindRequired)
        }
    }
}
public extension LoginProfileInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: LoginProfileInfoCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(password, forKey: .password)
         try encoderContainer.encode(passwordResetRequired, forKey: .passwordResetRequired)
         try encoderContainer.encode(mFABindRequired, forKey: .mFABindRequired)
    }
}
