/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  passwordPolicy
@objc(PasswordPolicy)
public class PasswordPolicy:NSObject,Codable{
    /// 密码长度，6~20位，默认8位
    /// Required:true
    var length:Int
    /// 密码有效期（天），0~1095，0表示永不过期
    /// Required:true
    var age:Int
    /// 密码过期后重置方式：0-联系主账号重置，1-子用户登录后重置
    /// Required:true
    var expirationOperation:Int
    /// 历史密码检查策略，禁止使用前(0~10)次密码，0表示不启用
    /// Required:true
    var reusePrevention:Int
    /// 1小时内使用错误密码最多(1~16)次
    /// Required:true
    var retryTimes:Int
    /// ValidLoginDuration
    /// Required:true
    var validLoginDuration:Int
    /// 密码字符类型，至少包含一种
    /// Required:true
    var rule:PasswordPolicyRule



    public  init(length:Int,age:Int,expirationOperation:Int,reusePrevention:Int,retryTimes:Int,validLoginDuration:Int,rule:PasswordPolicyRule){
             self.length = length
             self.age = age
             self.expirationOperation = expirationOperation
             self.reusePrevention = reusePrevention
             self.retryTimes = retryTimes
             self.validLoginDuration = validLoginDuration
             self.rule = rule
    }

    enum PasswordPolicyCodingKeys: String, CodingKey {
        case length
        case age
        case expirationOperation
        case reusePrevention
        case retryTimes
        case validLoginDuration
        case rule
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PasswordPolicyCodingKeys.self)
        self.length = try decoderContainer.decode(Int.self, forKey: .length)
        self.age = try decoderContainer.decode(Int.self, forKey: .age)
        self.expirationOperation = try decoderContainer.decode(Int.self, forKey: .expirationOperation)
        self.reusePrevention = try decoderContainer.decode(Int.self, forKey: .reusePrevention)
        self.retryTimes = try decoderContainer.decode(Int.self, forKey: .retryTimes)
        self.validLoginDuration = try decoderContainer.decode(Int.self, forKey: .validLoginDuration)
        self.rule = try decoderContainer.decode(PasswordPolicyRule.self, forKey: .rule)
    }
}
public extension PasswordPolicy{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PasswordPolicyCodingKeys.self)
         try encoderContainer.encode(length, forKey: .length)
         try encoderContainer.encode(age, forKey: .age)
         try encoderContainer.encode(expirationOperation, forKey: .expirationOperation)
         try encoderContainer.encode(reusePrevention, forKey: .reusePrevention)
         try encoderContainer.encode(retryTimes, forKey: .retryTimes)
         try encoderContainer.encode(validLoginDuration, forKey: .validLoginDuration)
         try encoderContainer.encode(rule, forKey: .rule)
    }
}
