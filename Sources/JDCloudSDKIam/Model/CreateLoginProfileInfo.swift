/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createLoginProfileInfo
@objc(CreateLoginProfileInfo)
public class CreateLoginProfileInfo:NSObject,Codable{
    /// 子用户登录是否需要重置密码，默认false
    var passwordResetRequired:Bool?
    /// 指定密码，密码必须符合密码强度要求。关于密码强度设置接口，请参考describePasswordPolicy
    var password:String?
    /// 是否自动生成密码，默认false
    var autoGeneratePassword:Bool?
    /// 指定子用户在下次登录时是否必须绑定虚拟MFA设备
    var mFABindRequired:Bool?



    public override init(){
            super.init()
    }

    enum CreateLoginProfileInfoCodingKeys: String, CodingKey {
        case passwordResetRequired
        case password
        case autoGeneratePassword
        case mFABindRequired
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateLoginProfileInfoCodingKeys.self)
        if decoderContainer.contains(.passwordResetRequired)
        {
            self.passwordResetRequired = try decoderContainer.decode(Bool?.self, forKey: .passwordResetRequired)
        }
        if decoderContainer.contains(.password)
        {
            self.password = try decoderContainer.decode(String?.self, forKey: .password)
        }
        if decoderContainer.contains(.autoGeneratePassword)
        {
            self.autoGeneratePassword = try decoderContainer.decode(Bool?.self, forKey: .autoGeneratePassword)
        }
        if decoderContainer.contains(.mFABindRequired)
        {
            self.mFABindRequired = try decoderContainer.decode(Bool?.self, forKey: .mFABindRequired)
        }
    }
}
public extension CreateLoginProfileInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateLoginProfileInfoCodingKeys.self)
         try encoderContainer.encode(passwordResetRequired, forKey: .passwordResetRequired)
         try encoderContainer.encode(password, forKey: .password)
         try encoderContainer.encode(autoGeneratePassword, forKey: .autoGeneratePassword)
         try encoderContainer.encode(mFABindRequired, forKey: .mFABindRequired)
    }
}
