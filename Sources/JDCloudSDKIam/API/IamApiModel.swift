/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   SubUser Management
   SubUser Management API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 创建角色 
public class CreateRoleResult:NSObject,JdCloudResult
{
    /// 角色信息
    var roleInfo:RoleInfo?



    public override init(){
        super.init()
    }

    enum CreateRoleResultCodingKeys: String, CodingKey {
        case roleInfo
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRoleResultCodingKeys.self)
        if decoderContainer.contains(.roleInfo)
        {
            self.roleInfo = try decoderContainer.decode(RoleInfo?.self, forKey: .roleInfo)
        }
    }
}
public extension CreateRoleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRoleResultCodingKeys.self)
        try encoderContainer.encode(roleInfo, forKey: .roleInfo)
    }
}
public class AttachRolePolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AttachRolePolicyResult?;

    enum AttachRolePolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AttachRolePolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AttachRolePolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension AttachRolePolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachRolePolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DetachRolePolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DetachRolePolicyResult?;

    enum DetachRolePolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DetachRolePolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DetachRolePolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension DetachRolePolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachRolePolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateAssumeRolePolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateAssumeRolePolicyResult?;

    enum UpdateAssumeRolePolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateAssumeRolePolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateAssumeRolePolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateAssumeRolePolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAssumeRolePolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateRoleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateRoleResult?;

    enum CreateRoleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRoleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateRoleResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateRoleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRoleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeRolePoliciesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeRolePoliciesResult?;

    enum DescribeRolePoliciesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRolePoliciesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeRolePoliciesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeRolePoliciesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRolePoliciesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeRoleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeRoleResult?;

    enum DescribeRoleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRoleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeRoleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeRoleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRoleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改角色内置policy 
public class UpdateAssumeRolePolicyResult:NSObject,JdCloudResult
{
}

///  查询角色授权策略列表
public class DescribeRolePoliciesRequest:JdCloudRequest
{
    /// 页码
    var pageNumber:Int?

    /// 每页显示数目[10~100] 默认50条
    var pageSize:Int?

    /// 关键字
    var keyword:String?

    /// 排序策略,0-按创建时间顺序排序  1-按创建时间倒序
    var sort:Int

    /// 角色名称
    var roleName:String


    public init(regionId: String,sort:Int,roleName:String){
        self.sort = sort
        self.roleName = roleName
        super.init(regionId: regionId)
    }


    enum DescribeRolePoliciesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case keyword
        case sort
        case roleName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRolePoliciesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(keyword, forKey: .keyword)
        try encoderContainer.encode(sort, forKey: .sort)
        try encoderContainer.encode(roleName, forKey: .roleName)

    }
}


///  创建角色
public class CreateRoleRequest:JdCloudRequest
{
    /// 角色信息
    var createRoleInfo:CreateRoleInfo


    public init(regionId: String,createRoleInfo:CreateRoleInfo){
        self.createRoleInfo = createRoleInfo
        super.init(regionId: regionId)
    }


    enum CreateRoleRequestRequestCodingKeys: String, CodingKey {
        case createRoleInfo
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRoleRequestRequestCodingKeys.self)
        try encoderContainer.encode(createRoleInfo, forKey: .createRoleInfo)

    }
}


///  查询角色详情
public class DescribeRoleRequest:JdCloudRequest
{
    /// 角色名称
    var roleName:String


    public init(regionId: String,roleName:String){
        self.roleName = roleName
        super.init(regionId: regionId)
    }


    enum DescribeRoleRequestRequestCodingKeys: String, CodingKey {
        case roleName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRoleRequestRequestCodingKeys.self)
        try encoderContainer.encode(roleName, forKey: .roleName)

    }
}


///  为角色绑定策略
public class AttachRolePolicyRequest:JdCloudRequest
{
    /// 策略名称
    var policyName:String

    /// 角色名称
    var roleName:String


    public init(regionId: String,policyName:String,roleName:String){
        self.policyName = policyName
        self.roleName = roleName
        super.init(regionId: regionId)
    }


    enum AttachRolePolicyRequestRequestCodingKeys: String, CodingKey {
        case policyName
        case roleName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachRolePolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(policyName, forKey: .policyName)
        try encoderContainer.encode(roleName, forKey: .roleName)

    }
}


///  删除角色
public class DeleteRoleRequest:JdCloudRequest
{
    /// 角色名称
    var roleName:String


    public init(regionId: String,roleName:String){
        self.roleName = roleName
        super.init(regionId: regionId)
    }


    enum DeleteRoleRequestRequestCodingKeys: String, CodingKey {
        case roleName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRoleRequestRequestCodingKeys.self)
        try encoderContainer.encode(roleName, forKey: .roleName)

    }
}

/// 为角色绑定策略 
public class AttachRolePolicyResult:NSObject,JdCloudResult
{
}
/// 删除角色 
public class DeleteRoleResult:NSObject,JdCloudResult
{
}
public class DeleteRoleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteRoleResult?;

    enum DeleteRoleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteRoleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteRoleResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteRoleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRoleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  为角色绑定策略
public class DetachRolePolicyRequest:JdCloudRequest
{
    /// 策略名称
    var policyName:String

    /// 角色名称
    var roleName:String


    public init(regionId: String,policyName:String,roleName:String){
        self.policyName = policyName
        self.roleName = roleName
        super.init(regionId: regionId)
    }


    enum DetachRolePolicyRequestRequestCodingKeys: String, CodingKey {
        case policyName
        case roleName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachRolePolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(policyName, forKey: .policyName)
        try encoderContainer.encode(roleName, forKey: .roleName)

    }
}

/// 为角色绑定策略 
public class DetachRolePolicyResult:NSObject,JdCloudResult
{
}
public class DescribeRolesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeRolesResult?;

    enum DescribeRolesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRolesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeRolesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeRolesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRolesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询角色列表 
public class DescribeRolesResult:NSObject,JdCloudResult
{
    /// 总数
    var total:Int?

    /// 角色列表
    var roles:[ListRoleInfo?]?



    public override init(){
        super.init()
    }

    enum DescribeRolesResultCodingKeys: String, CodingKey {
        case total
        case roles
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRolesResultCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
        if decoderContainer.contains(.roles)
        {
            self.roles = try decoderContainer.decode([ListRoleInfo?]?.self, forKey: .roles)
        }
    }
}
public extension DescribeRolesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRolesResultCodingKeys.self)
        try encoderContainer.encode(total, forKey: .total)
        try encoderContainer.encode(roles, forKey: .roles)
    }
}

///  修改角色内置policy
public class UpdateAssumeRolePolicyRequest:JdCloudRequest
{
    /// 角色权限信息
    var updateAssumeRolePolicyInfo:UpdateAssumeRolePolicyInfo

    /// 角色名称
    var roleName:String


    public init(regionId: String,updateAssumeRolePolicyInfo:UpdateAssumeRolePolicyInfo,roleName:String){
        self.updateAssumeRolePolicyInfo = updateAssumeRolePolicyInfo
        self.roleName = roleName
        super.init(regionId: regionId)
    }


    enum UpdateAssumeRolePolicyRequestRequestCodingKeys: String, CodingKey {
        case updateAssumeRolePolicyInfo
        case roleName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAssumeRolePolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(updateAssumeRolePolicyInfo, forKey: .updateAssumeRolePolicyInfo)
        try encoderContainer.encode(roleName, forKey: .roleName)

    }
}

/// 查询角色详情 
public class DescribeRoleResult:NSObject,JdCloudResult
{
    /// 角色信息
    var roleInfo:RoleInfo?



    public override init(){
        super.init()
    }

    enum DescribeRoleResultCodingKeys: String, CodingKey {
        case roleInfo
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRoleResultCodingKeys.self)
        if decoderContainer.contains(.roleInfo)
        {
            self.roleInfo = try decoderContainer.decode(RoleInfo?.self, forKey: .roleInfo)
        }
    }
}
public extension DescribeRoleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRoleResultCodingKeys.self)
        try encoderContainer.encode(roleInfo, forKey: .roleInfo)
    }
}
/// 查询角色授权策略列表 
public class DescribeRolePoliciesResult:NSObject,JdCloudResult
{
    /// 总数
    var total:Int?

    /// 角色绑定的策略列表
    var policies:[RolePolicy?]?



    public override init(){
        super.init()
    }

    enum DescribeRolePoliciesResultCodingKeys: String, CodingKey {
        case total
        case policies
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRolePoliciesResultCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
        if decoderContainer.contains(.policies)
        {
            self.policies = try decoderContainer.decode([RolePolicy?]?.self, forKey: .policies)
        }
    }
}
public extension DescribeRolePoliciesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRolePoliciesResultCodingKeys.self)
        try encoderContainer.encode(total, forKey: .total)
        try encoderContainer.encode(policies, forKey: .policies)
    }
}

///  查询角色列表
public class DescribeRolesRequest:JdCloudRequest
{
    /// 页码，默认1
    var pageNumber:Int?

    /// 分页大小，默认50，取值范围[10, 100]
    var pageSize:Int?

    /// 角色名称关键词
    var roleName:String?

    /// 角色类型，默认查找所有类型，2-服务相关角色，3-服务角色，4-用户角色
    var type:Int?

    /// 排序策略,0-按创建时间顺序排序,1-按创建时间倒序排序
    var sort:Int?




    enum DescribeRolesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case roleName
        case type
        case sort
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRolesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(roleName, forKey: .roleName)
        try encoderContainer.encode(type, forKey: .type)
        try encoderContainer.encode(sort, forKey: .sort)

    }
}


///  创建策略
public class CreatePolicyRequest:JdCloudRequest
{
    /// 策略信息
    var createPolicyInfo:CreatePolicyInfo


    public init(regionId: String,createPolicyInfo:CreatePolicyInfo){
        self.createPolicyInfo = createPolicyInfo
        super.init(regionId: regionId)
    }


    enum CreatePolicyRequestRequestCodingKeys: String, CodingKey {
        case createPolicyInfo
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreatePolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(createPolicyInfo, forKey: .createPolicyInfo)

    }
}


///  删除策略
public class DeletePolicyRequest:JdCloudRequest
{
    /// 策略名称
    var policyName:String


    public init(regionId: String,policyName:String){
        self.policyName = policyName
        super.init(regionId: regionId)
    }


    enum DeletePolicyRequestRequestCodingKeys: String, CodingKey {
        case policyName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeletePolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(policyName, forKey: .policyName)

    }
}

/// 删除策略 
public class DeletePolicyResult:NSObject,JdCloudResult
{
}

///  查询策略详情
public class DescribePolicyRequest:JdCloudRequest
{
    /// 策略名称
    var policyName:String


    public init(regionId: String,policyName:String){
        self.policyName = policyName
        super.init(regionId: regionId)
    }


    enum DescribePolicyRequestRequestCodingKeys: String, CodingKey {
        case policyName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(policyName, forKey: .policyName)

    }
}

/// 创建策略 
public class CreatePolicyResult:NSObject,JdCloudResult
{
    /// 策略信息
    var policy:Policy?



    public override init(){
        super.init()
    }

    enum CreatePolicyResultCodingKeys: String, CodingKey {
        case policy
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreatePolicyResultCodingKeys.self)
        if decoderContainer.contains(.policy)
        {
            self.policy = try decoderContainer.decode(Policy?.self, forKey: .policy)
        }
    }
}
public extension CreatePolicyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreatePolicyResultCodingKeys.self)
        try encoderContainer.encode(policy, forKey: .policy)
    }
}
public class DescribePolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribePolicyResult?;

    enum DescribePolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribePolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribePolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeletePolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeletePolicyResult?;

    enum DeletePolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeletePolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeletePolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension DeletePolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeletePolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribePoliciesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribePoliciesResult?;

    enum DescribePoliciesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePoliciesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribePoliciesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribePoliciesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePoliciesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改策略文档 
public class UpdatePolicyResult:NSObject,JdCloudResult
{
}

///  修改策略描述
public class UpdatePolicyDescriptionRequest:JdCloudRequest
{
    /// 策略描述信息
    var updatePolicyDescriptionInfo:UpdatePolicyDescriptionInfo

    /// 策略名称
    var policyName:String


    public init(regionId: String,updatePolicyDescriptionInfo:UpdatePolicyDescriptionInfo,policyName:String){
        self.updatePolicyDescriptionInfo = updatePolicyDescriptionInfo
        self.policyName = policyName
        super.init(regionId: regionId)
    }


    enum UpdatePolicyDescriptionRequestRequestCodingKeys: String, CodingKey {
        case updatePolicyDescriptionInfo
        case policyName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdatePolicyDescriptionRequestRequestCodingKeys.self)
        try encoderContainer.encode(updatePolicyDescriptionInfo, forKey: .updatePolicyDescriptionInfo)
        try encoderContainer.encode(policyName, forKey: .policyName)

    }
}


///  修改策略文档
public class UpdatePolicyRequest:JdCloudRequest
{
    /// 策略文档信息
    var updatePolicyInfo:UpdatePolicyInfo

    /// 策略名称
    var policyName:String


    public init(regionId: String,updatePolicyInfo:UpdatePolicyInfo,policyName:String){
        self.updatePolicyInfo = updatePolicyInfo
        self.policyName = policyName
        super.init(regionId: regionId)
    }


    enum UpdatePolicyRequestRequestCodingKeys: String, CodingKey {
        case updatePolicyInfo
        case policyName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdatePolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(updatePolicyInfo, forKey: .updatePolicyInfo)
        try encoderContainer.encode(policyName, forKey: .policyName)

    }
}

public class UpdatePolicyDescriptionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdatePolicyDescriptionResult?;

    enum UpdatePolicyDescriptionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdatePolicyDescriptionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdatePolicyDescriptionResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdatePolicyDescriptionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdatePolicyDescriptionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询策略列表 
public class DescribePoliciesResult:NSObject,JdCloudResult
{
    /// 总数
    var total:Int?

    /// 策略列表信息
    var policies:[Policy?]?



    public override init(){
        super.init()
    }

    enum DescribePoliciesResultCodingKeys: String, CodingKey {
        case total
        case policies
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePoliciesResultCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
        if decoderContainer.contains(.policies)
        {
            self.policies = try decoderContainer.decode([Policy?]?.self, forKey: .policies)
        }
    }
}
public extension DescribePoliciesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePoliciesResultCodingKeys.self)
        try encoderContainer.encode(total, forKey: .total)
        try encoderContainer.encode(policies, forKey: .policies)
    }
}
/// 查询策略详情 
public class DescribePolicyResult:NSObject,JdCloudResult
{
    /// 策略信息
    var policy:PolicyDetail?



    public override init(){
        super.init()
    }

    enum DescribePolicyResultCodingKeys: String, CodingKey {
        case policy
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePolicyResultCodingKeys.self)
        if decoderContainer.contains(.policy)
        {
            self.policy = try decoderContainer.decode(PolicyDetail?.self, forKey: .policy)
        }
    }
}
public extension DescribePolicyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePolicyResultCodingKeys.self)
        try encoderContainer.encode(policy, forKey: .policy)
    }
}
public class UpdatePolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdatePolicyResult?;

    enum UpdatePolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdatePolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdatePolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdatePolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdatePolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改策略描述 
public class UpdatePolicyDescriptionResult:NSObject,JdCloudResult
{
}
public class CreatePolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreatePolicyResult?;

    enum CreatePolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreatePolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreatePolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension CreatePolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreatePolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询策略列表
public class DescribePoliciesRequest:JdCloudRequest
{
    /// 页码，默认1
    var pageNumber:Int?

    /// 分页大小，默认50，取值范围[10, 100]
    var pageSize:Int?

    /// 关键字
    var keyword:String?

    /// 策略类型：0-全部（默认），1-系统策略，2-自定义策略
    var queryType:Int?

    /// 排序规则：0-创建时间顺序排序，1-创建时间倒序排序
    var sort:Int?




    enum DescribePoliciesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case keyword
        case queryType
        case sort
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePoliciesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(keyword, forKey: .keyword)
        try encoderContainer.encode(queryType, forKey: .queryType)
        try encoderContainer.encode(sort, forKey: .sort)

    }
}


///  查询策略详情
public class DescribePermissionDetailRequest:JdCloudRequest
{
    /// 权限id
    var permissionId:Int


    public init(regionId: String,permissionId:Int){
        self.permissionId = permissionId
        super.init(regionId: regionId)
    }


    enum DescribePermissionDetailRequestRequestCodingKeys: String, CodingKey {
        case permissionId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePermissionDetailRequestRequestCodingKeys.self)
        try encoderContainer.encode(permissionId, forKey: .permissionId)

    }
}

public class RemovePermissionOfSubUserResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RemovePermissionOfSubUserResult?;

    enum RemovePermissionOfSubUserResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RemovePermissionOfSubUserResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RemovePermissionOfSubUserResult?.self, forKey: .result) ?? nil
    }
}

public extension RemovePermissionOfSubUserResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemovePermissionOfSubUserResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询策略列表
public class DescribePermissionsRequest:JdCloudRequest
{
    /// 页码
    var pageNumber:Int

    /// 每页显示数目
    var pageSize:Int

    /// 关键字
    var keyword:String?

    /// 权限类型,0-全部，1-系统权限，2-自定义权限
    var queryType:Int


    public init(regionId: String,pageNumber:Int,pageSize:Int,queryType:Int){
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.queryType = queryType
        super.init(regionId: regionId)
    }


    enum DescribePermissionsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case keyword
        case queryType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePermissionsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(keyword, forKey: .keyword)
        try encoderContainer.encode(queryType, forKey: .queryType)

    }
}


///  查询子用户策略列表
public class DescribeSubUserPermissionsRequest:JdCloudRequest
{
    /// 页码
    var pageNumber:Int

    /// 每页显示数目
    var pageSize:Int

    /// 子用户用户名
    var subUser:String


    public init(regionId: String,pageNumber:Int,pageSize:Int,subUser:String){
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.subUser = subUser
        super.init(regionId: regionId)
    }


    enum DescribeSubUserPermissionsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case subUser
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubUserPermissionsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(subUser, forKey: .subUser)

    }
}

public class DescribePermissionDetailResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribePermissionDetailResult?;

    enum DescribePermissionDetailResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePermissionDetailResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribePermissionDetailResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribePermissionDetailResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePermissionDetailResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改策略
public class UpdatePermissionRequest:JdCloudRequest
{
    /// 权限信息
    var updatePermissionInfo:UpdatePermissionInfo

    /// 权限id
    var permissionId:Int


    public init(regionId: String,updatePermissionInfo:UpdatePermissionInfo,permissionId:Int){
        self.updatePermissionInfo = updatePermissionInfo
        self.permissionId = permissionId
        super.init(regionId: regionId)
    }


    enum UpdatePermissionRequestRequestCodingKeys: String, CodingKey {
        case updatePermissionInfo
        case permissionId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdatePermissionRequestRequestCodingKeys.self)
        try encoderContainer.encode(updatePermissionInfo, forKey: .updatePermissionInfo)
        try encoderContainer.encode(permissionId, forKey: .permissionId)

    }
}

/// 为子用户解绑策略 
public class RemovePermissionOfSubUserResult:NSObject,JdCloudResult
{
}
public class UpdatePermissionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdatePermissionResult?;

    enum UpdatePermissionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdatePermissionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdatePermissionResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdatePermissionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdatePermissionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreatePermissionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreatePermissionResult?;

    enum CreatePermissionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreatePermissionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreatePermissionResult?.self, forKey: .result) ?? nil
    }
}

public extension CreatePermissionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreatePermissionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询策略列表 
public class DescribePermissionsResult:NSObject,JdCloudResult
{
    /// 总数
    var total:Int?

    /// 权限列表信息
    var permissions:[Permission?]?



    public override init(){
        super.init()
    }

    enum DescribePermissionsResultCodingKeys: String, CodingKey {
        case total
        case permissions
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePermissionsResultCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
        if decoderContainer.contains(.permissions)
        {
            self.permissions = try decoderContainer.decode([Permission?]?.self, forKey: .permissions)
        }
    }
}
public extension DescribePermissionsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePermissionsResultCodingKeys.self)
        try encoderContainer.encode(total, forKey: .total)
        try encoderContainer.encode(permissions, forKey: .permissions)
    }
}
/// 创建策略 
public class CreatePermissionResult:NSObject,JdCloudResult
{
}
/// 查询子用户策略列表 
public class DescribeSubUserPermissionsResult:NSObject,JdCloudResult
{
    /// 总数
    var total:Int?

    /// 权限列表信息
    var permissions:[Permission?]?



    public override init(){
        super.init()
    }

    enum DescribeSubUserPermissionsResultCodingKeys: String, CodingKey {
        case total
        case permissions
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubUserPermissionsResultCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
        if decoderContainer.contains(.permissions)
        {
            self.permissions = try decoderContainer.decode([Permission?]?.self, forKey: .permissions)
        }
    }
}
public extension DescribeSubUserPermissionsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubUserPermissionsResultCodingKeys.self)
        try encoderContainer.encode(total, forKey: .total)
        try encoderContainer.encode(permissions, forKey: .permissions)
    }
}
public class DescribeSubUserPermissionsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSubUserPermissionsResult?;

    enum DescribeSubUserPermissionsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubUserPermissionsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSubUserPermissionsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSubUserPermissionsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubUserPermissionsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  为子用户绑定策略
public class AddPermissionsToSubUserRequest:JdCloudRequest
{
    /// 权限信息
    var addPermissionsInfo:AddPermissionsInfo

    /// 子用户用户名
    var subUser:String


    public init(regionId: String,addPermissionsInfo:AddPermissionsInfo,subUser:String){
        self.addPermissionsInfo = addPermissionsInfo
        self.subUser = subUser
        super.init(regionId: regionId)
    }


    enum AddPermissionsToSubUserRequestRequestCodingKeys: String, CodingKey {
        case addPermissionsInfo
        case subUser
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddPermissionsToSubUserRequestRequestCodingKeys.self)
        try encoderContainer.encode(addPermissionsInfo, forKey: .addPermissionsInfo)
        try encoderContainer.encode(subUser, forKey: .subUser)

    }
}

public class AddPermissionsToSubUserResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddPermissionsToSubUserResult?;

    enum AddPermissionsToSubUserResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddPermissionsToSubUserResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddPermissionsToSubUserResult?.self, forKey: .result) ?? nil
    }
}

public extension AddPermissionsToSubUserResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddPermissionsToSubUserResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  为子用户解绑策略
public class RemovePermissionOfSubUserRequest:JdCloudRequest
{
    /// 权限id
    var permissionId:Int

    /// 子用户用户名
    var subUser:String


    public init(regionId: String,permissionId:Int,subUser:String){
        self.permissionId = permissionId
        self.subUser = subUser
        super.init(regionId: regionId)
    }


    enum RemovePermissionOfSubUserRequestRequestCodingKeys: String, CodingKey {
        case permissionId
        case subUser
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemovePermissionOfSubUserRequestRequestCodingKeys.self)
        try encoderContainer.encode(permissionId, forKey: .permissionId)
        try encoderContainer.encode(subUser, forKey: .subUser)

    }
}

/// 查询策略详情 
public class DescribePermissionDetailResult:NSObject,JdCloudResult
{
    /// 权限信息
    var permission:Permission?



    public override init(){
        super.init()
    }

    enum DescribePermissionDetailResultCodingKeys: String, CodingKey {
        case permission
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePermissionDetailResultCodingKeys.self)
        if decoderContainer.contains(.permission)
        {
            self.permission = try decoderContainer.decode(Permission?.self, forKey: .permission)
        }
    }
}
public extension DescribePermissionDetailResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePermissionDetailResultCodingKeys.self)
        try encoderContainer.encode(permission, forKey: .permission)
    }
}

///  创建策略
public class CreatePermissionRequest:JdCloudRequest
{
    /// 权限信息
    var createPermissionInfo:CreatePermissionInfo


    public init(regionId: String,createPermissionInfo:CreatePermissionInfo){
        self.createPermissionInfo = createPermissionInfo
        super.init(regionId: regionId)
    }


    enum CreatePermissionRequestRequestCodingKeys: String, CodingKey {
        case createPermissionInfo
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreatePermissionRequestRequestCodingKeys.self)
        try encoderContainer.encode(createPermissionInfo, forKey: .createPermissionInfo)

    }
}

/// 为子用户绑定策略 
public class AddPermissionsToSubUserResult:NSObject,JdCloudResult
{
}
public class DescribePermissionsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribePermissionsResult?;

    enum DescribePermissionsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePermissionsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribePermissionsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribePermissionsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePermissionsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改策略 
public class UpdatePermissionResult:NSObject,JdCloudResult
{
}
public class DisableSubUserAccessKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableSubUserAccessKeyResult?;

    enum DisableSubUserAccessKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableSubUserAccessKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableSubUserAccessKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableSubUserAccessKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableSubUserAccessKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  禁用子用户的AccessKey
public class DisableSubUserAccessKeyRequest:JdCloudRequest
{
    /// 子用户名称
    var subUser:String

    /// accessKey
    var accessKey:String


    public init(regionId: String,subUser:String,accessKey:String){
        self.subUser = subUser
        self.accessKey = accessKey
        super.init(regionId: regionId)
    }


    enum DisableSubUserAccessKeyRequestRequestCodingKeys: String, CodingKey {
        case subUser
        case accessKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableSubUserAccessKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(subUser, forKey: .subUser)
        try encoderContainer.encode(accessKey, forKey: .accessKey)

    }
}

/// 禁用子用户的AccessKey 
public class DisableSubUserAccessKeyResult:NSObject,JdCloudResult
{
}
public class EnableSubUserAccessKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableSubUserAccessKeyResult?;

    enum EnableSubUserAccessKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableSubUserAccessKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableSubUserAccessKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableSubUserAccessKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableSubUserAccessKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除子用户的AccessKey
public class DeleteSubUserAccessKeyRequest:JdCloudRequest
{
    /// 子用户名称
    var subUser:String

    /// accessKey
    var accessKey:String


    public init(regionId: String,subUser:String,accessKey:String){
        self.subUser = subUser
        self.accessKey = accessKey
        super.init(regionId: regionId)
    }


    enum DeleteSubUserAccessKeyRequestRequestCodingKeys: String, CodingKey {
        case subUser
        case accessKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubUserAccessKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(subUser, forKey: .subUser)
        try encoderContainer.encode(accessKey, forKey: .accessKey)

    }
}

/// 启用子用户AccessKey 
public class EnableSubUserAccessKeyResult:NSObject,JdCloudResult
{
}

///  启用子用户AccessKey
public class EnableSubUserAccessKeyRequest:JdCloudRequest
{
    /// 子用户名称
    var subUser:String

    /// accessKey
    var accessKey:String


    public init(regionId: String,subUser:String,accessKey:String){
        self.subUser = subUser
        self.accessKey = accessKey
        super.init(regionId: regionId)
    }


    enum EnableSubUserAccessKeyRequestRequestCodingKeys: String, CodingKey {
        case subUser
        case accessKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableSubUserAccessKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(subUser, forKey: .subUser)
        try encoderContainer.encode(accessKey, forKey: .accessKey)

    }
}

/// 删除子用户的AccessKey 
public class DeleteSubUserAccessKeyResult:NSObject,JdCloudResult
{
}
public class DeleteSubUserAccessKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSubUserAccessKeyResult?;

    enum DeleteSubUserAccessKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSubUserAccessKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSubUserAccessKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSubUserAccessKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubUserAccessKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询主账号AccessKey列表
public class DescribeUserAccessKeysRequest:JdCloudRequest
{
}


///  启用主账号AccessKey
public class EnabledUserAccessKeyRequest:JdCloudRequest
{
    /// accessKey
    var accessKey:String


    public init(regionId: String,accessKey:String){
        self.accessKey = accessKey
        super.init(regionId: regionId)
    }


    enum EnabledUserAccessKeyRequestRequestCodingKeys: String, CodingKey {
        case accessKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnabledUserAccessKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessKey, forKey: .accessKey)

    }
}


///  禁用主账号AccessKey
public class DisabledUserAccessKeyRequest:JdCloudRequest
{
    /// accessKey
    var accessKey:String


    public init(regionId: String,accessKey:String){
        self.accessKey = accessKey
        super.init(regionId: regionId)
    }


    enum DisabledUserAccessKeyRequestRequestCodingKeys: String, CodingKey {
        case accessKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisabledUserAccessKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessKey, forKey: .accessKey)

    }
}

/// 禁用主账号AccessKey 
public class DisabledUserAccessKeyResult:NSObject,JdCloudResult
{
}
public class CreateUserAccessKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateUserAccessKeyResult?;

    enum CreateUserAccessKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateUserAccessKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateUserAccessKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateUserAccessKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateUserAccessKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 启用主账号AccessKey 
public class EnabledUserAccessKeyResult:NSObject,JdCloudResult
{
}

///  创建主账号AccessKey
public class CreateUserAccessKeyRequest:JdCloudRequest
{
}

public class DisabledUserAccessKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisabledUserAccessKeyResult?;

    enum DisabledUserAccessKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisabledUserAccessKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisabledUserAccessKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension DisabledUserAccessKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisabledUserAccessKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询主账号AccessKey列表 
public class DescribeUserAccessKeysResult:NSObject,JdCloudResult
{
    /// userAccessKey列表
    var userAccessKeys:[UserAccessKey?]?



    public override init(){
        super.init()
    }

    enum DescribeUserAccessKeysResultCodingKeys: String, CodingKey {
        case userAccessKeys
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUserAccessKeysResultCodingKeys.self)
        if decoderContainer.contains(.userAccessKeys)
        {
            self.userAccessKeys = try decoderContainer.decode([UserAccessKey?]?.self, forKey: .userAccessKeys)
        }
    }
}
public extension DescribeUserAccessKeysResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUserAccessKeysResultCodingKeys.self)
        try encoderContainer.encode(userAccessKeys, forKey: .userAccessKeys)
    }
}
public class DeleteUserAccessKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteUserAccessKeyResult?;

    enum DeleteUserAccessKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteUserAccessKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteUserAccessKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteUserAccessKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteUserAccessKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除AccessKey 
public class DeleteUserAccessKeyResult:NSObject,JdCloudResult
{
}
public class DescribeUserAccessKeysResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeUserAccessKeysResult?;

    enum DescribeUserAccessKeysResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUserAccessKeysResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeUserAccessKeysResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeUserAccessKeysResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUserAccessKeysResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建主账号AccessKey 
public class CreateUserAccessKeyResult:NSObject,JdCloudResult
{
}
public class EnabledUserAccessKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnabledUserAccessKeyResult?;

    enum EnabledUserAccessKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnabledUserAccessKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnabledUserAccessKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension EnabledUserAccessKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnabledUserAccessKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除AccessKey
public class DeleteUserAccessKeyRequest:JdCloudRequest
{
    /// accessKey
    var accessKey:String


    public init(regionId: String,accessKey:String){
        self.accessKey = accessKey
        super.init(regionId: regionId)
    }


    enum DeleteUserAccessKeyRequestRequestCodingKeys: String, CodingKey {
        case accessKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteUserAccessKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessKey, forKey: .accessKey)

    }
}

public class DescribeAttachedGroupPoliciesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAttachedGroupPoliciesResult?;

    enum DescribeAttachedGroupPoliciesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttachedGroupPoliciesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAttachedGroupPoliciesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAttachedGroupPoliciesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttachedGroupPoliciesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DetachGroupPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DetachGroupPolicyResult?;

    enum DetachGroupPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DetachGroupPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DetachGroupPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension DetachGroupPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachGroupPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询用户组详情 
public class DescribeGroupResult:NSObject,JdCloudResult
{
    /// 用户组信息
    var group:GroupDetail?



    public override init(){
        super.init()
    }

    enum DescribeGroupResultCodingKeys: String, CodingKey {
        case group
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeGroupResultCodingKeys.self)
        if decoderContainer.contains(.group)
        {
            self.group = try decoderContainer.decode(GroupDetail?.self, forKey: .group)
        }
    }
}
public extension DescribeGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeGroupResultCodingKeys.self)
        try encoderContainer.encode(group, forKey: .group)
    }
}
/// 列举用户组的策略 
public class DescribeAttachedGroupPoliciesResult:NSObject,JdCloudResult
{
    /// 总数
    var total:Int?

    /// 策略列表信息
    var policies:[Policy?]?



    public override init(){
        super.init()
    }

    enum DescribeAttachedGroupPoliciesResultCodingKeys: String, CodingKey {
        case total
        case policies
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttachedGroupPoliciesResultCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
        if decoderContainer.contains(.policies)
        {
            self.policies = try decoderContainer.decode([Policy?]?.self, forKey: .policies)
        }
    }
}
public extension DescribeAttachedGroupPoliciesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttachedGroupPoliciesResultCodingKeys.self)
        try encoderContainer.encode(total, forKey: .total)
        try encoderContainer.encode(policies, forKey: .policies)
    }
}
/// 修改用户组 
public class UpdateGroupResult:NSObject,JdCloudResult
{
}

///  将子用户从组中删除
public class RemoveSubUserFromGroupRequest:JdCloudRequest
{
    /// 子用户名
    var subUser:String

    /// 用户组名称
    var groupName:String


    public init(regionId: String,subUser:String,groupName:String){
        self.subUser = subUser
        self.groupName = groupName
        super.init(regionId: regionId)
    }


    enum RemoveSubUserFromGroupRequestRequestCodingKeys: String, CodingKey {
        case subUser
        case groupName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveSubUserFromGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(subUser, forKey: .subUser)
        try encoderContainer.encode(groupName, forKey: .groupName)

    }
}


///  添加子用户到用户组中
public class AddSubUserToGroupRequest:JdCloudRequest
{
    /// 子用户名
    var subUser:String

    /// 用户组名称
    var groupName:String


    public init(regionId: String,subUser:String,groupName:String){
        self.subUser = subUser
        self.groupName = groupName
        super.init(regionId: regionId)
    }


    enum AddSubUserToGroupRequestRequestCodingKeys: String, CodingKey {
        case subUser
        case groupName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddSubUserToGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(subUser, forKey: .subUser)
        try encoderContainer.encode(groupName, forKey: .groupName)

    }
}

/// 查询用户组内的子用户列表  
public class DescribeGroupSubUsersResult:NSObject,JdCloudResult
{
    /// 用户总数
    var total:Int?

    /// 子用户信息
    var subUsers:[SubUserInfo?]?



    public override init(){
        super.init()
    }

    enum DescribeGroupSubUsersResultCodingKeys: String, CodingKey {
        case total
        case subUsers
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeGroupSubUsersResultCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
        if decoderContainer.contains(.subUsers)
        {
            self.subUsers = try decoderContainer.decode([SubUserInfo?]?.self, forKey: .subUsers)
        }
    }
}
public extension DescribeGroupSubUsersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeGroupSubUsersResultCodingKeys.self)
        try encoderContainer.encode(total, forKey: .total)
        try encoderContainer.encode(subUsers, forKey: .subUsers)
    }
}
public class DescribeGroupsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeGroupsResult?;

    enum DescribeGroupsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeGroupsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeGroupsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeGroupsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeGroupsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateGroupResult?;

    enum CreateGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AddSubUserToGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddSubUserToGroupResult?;

    enum AddSubUserToGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddSubUserToGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddSubUserToGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension AddSubUserToGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddSubUserToGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改用户组
public class UpdateGroupRequest:JdCloudRequest
{
    /// UpdateGroupInfo
    var updateGroupInfo:UpdateGroupInfo

    /// 用户组名称
    var groupName:String


    public init(regionId: String,updateGroupInfo:UpdateGroupInfo,groupName:String){
        self.updateGroupInfo = updateGroupInfo
        self.groupName = groupName
        super.init(regionId: regionId)
    }


    enum UpdateGroupRequestRequestCodingKeys: String, CodingKey {
        case updateGroupInfo
        case groupName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(updateGroupInfo, forKey: .updateGroupInfo)
        try encoderContainer.encode(groupName, forKey: .groupName)

    }
}

public class DescribeGroupSubUsersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeGroupSubUsersResult?;

    enum DescribeGroupSubUsersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeGroupSubUsersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeGroupSubUsersResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeGroupSubUsersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeGroupSubUsersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AttachGroupPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AttachGroupPolicyResult?;

    enum AttachGroupPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AttachGroupPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AttachGroupPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension AttachGroupPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachGroupPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询用户组列表 
public class DescribeGroupsResult:NSObject,JdCloudResult
{
    /// 总数
    var total:Int?

    /// 用户组列表信息
    var groups:[Group?]?



    public override init(){
        super.init()
    }

    enum DescribeGroupsResultCodingKeys: String, CodingKey {
        case total
        case groups
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeGroupsResultCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
        if decoderContainer.contains(.groups)
        {
            self.groups = try decoderContainer.decode([Group?]?.self, forKey: .groups)
        }
    }
}
public extension DescribeGroupsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeGroupsResultCodingKeys.self)
        try encoderContainer.encode(total, forKey: .total)
        try encoderContainer.encode(groups, forKey: .groups)
    }
}
public class UpdateGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateGroupResult?;

    enum UpdateGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除用户组 
public class DeleteGroupResult:NSObject,JdCloudResult
{
}

///  查询用户组详情
public class DescribeGroupRequest:JdCloudRequest
{
    /// 用户组名称
    var groupName:String


    public init(regionId: String,groupName:String){
        self.groupName = groupName
        super.init(regionId: regionId)
    }


    enum DescribeGroupRequestRequestCodingKeys: String, CodingKey {
        case groupName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(groupName, forKey: .groupName)

    }
}


///  为用户组绑定策略
public class AttachGroupPolicyRequest:JdCloudRequest
{
    /// 策略名称
    var policyName:String

    /// 用户组名称
    var groupName:String


    public init(regionId: String,policyName:String,groupName:String){
        self.policyName = policyName
        self.groupName = groupName
        super.init(regionId: regionId)
    }


    enum AttachGroupPolicyRequestRequestCodingKeys: String, CodingKey {
        case policyName
        case groupName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachGroupPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(policyName, forKey: .policyName)
        try encoderContainer.encode(groupName, forKey: .groupName)

    }
}

/// 为用户组绑定策略 
public class AttachGroupPolicyResult:NSObject,JdCloudResult
{
}

///  查询用户组列表
public class DescribeGroupsRequest:JdCloudRequest
{
    /// 页码，默认1
    var pageNumber:Int?

    /// 分页大小，默认50，取值范围[10, 100]
    var pageSize:Int?

    /// 关键字
    var keyword:String?

    /// 排序规则：0-创建时间顺序排序，1-创建时间倒序排序
    var sort:Int?




    enum DescribeGroupsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case keyword
        case sort
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeGroupsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(keyword, forKey: .keyword)
        try encoderContainer.encode(sort, forKey: .sort)

    }
}

public class RemoveSubUserFromGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RemoveSubUserFromGroupResult?;

    enum RemoveSubUserFromGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RemoveSubUserFromGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RemoveSubUserFromGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension RemoveSubUserFromGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveSubUserFromGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建用户组 
public class CreateGroupResult:NSObject,JdCloudResult
{
    /// 用户组信息
    var group:CreateGroupRes?



    public override init(){
        super.init()
    }

    enum CreateGroupResultCodingKeys: String, CodingKey {
        case group
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateGroupResultCodingKeys.self)
        if decoderContainer.contains(.group)
        {
            self.group = try decoderContainer.decode(CreateGroupRes?.self, forKey: .group)
        }
    }
}
public extension CreateGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateGroupResultCodingKeys.self)
        try encoderContainer.encode(group, forKey: .group)
    }
}

///  列举用户组的策略
public class DescribeAttachedGroupPoliciesRequest:JdCloudRequest
{
    /// 用户组名称
    var groupName:String


    public init(regionId: String,groupName:String){
        self.groupName = groupName
        super.init(regionId: regionId)
    }


    enum DescribeAttachedGroupPoliciesRequestRequestCodingKeys: String, CodingKey {
        case groupName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttachedGroupPoliciesRequestRequestCodingKeys.self)
        try encoderContainer.encode(groupName, forKey: .groupName)

    }
}

/// 添加子用户到用户组中 
public class AddSubUserToGroupResult:NSObject,JdCloudResult
{
}

///  创建用户组
public class CreateGroupRequest:JdCloudRequest
{
    /// CreateGroupInfo
    var createGroupInfo:CreateGroupInfo


    public init(regionId: String,createGroupInfo:CreateGroupInfo){
        self.createGroupInfo = createGroupInfo
        super.init(regionId: regionId)
    }


    enum CreateGroupRequestRequestCodingKeys: String, CodingKey {
        case createGroupInfo
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(createGroupInfo, forKey: .createGroupInfo)

    }
}


///  查询用户组内的子用户列表 
public class DescribeGroupSubUsersRequest:JdCloudRequest
{
    /// 页码，默认1
    var pageNumber:Int?

    /// 分页大小，默认50，取值范围[10, 100]
    var pageSize:Int?

    /// 用户组名称
    var groupName:String


    public init(regionId: String,groupName:String){
        self.groupName = groupName
        super.init(regionId: regionId)
    }


    enum DescribeGroupSubUsersRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case groupName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeGroupSubUsersRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(groupName, forKey: .groupName)

    }
}


///  为用户组解绑策略
public class DetachGroupPolicyRequest:JdCloudRequest
{
    /// 策略名称
    var policyName:String

    /// 用户组名称
    var groupName:String


    public init(regionId: String,policyName:String,groupName:String){
        self.policyName = policyName
        self.groupName = groupName
        super.init(regionId: regionId)
    }


    enum DetachGroupPolicyRequestRequestCodingKeys: String, CodingKey {
        case policyName
        case groupName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachGroupPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(policyName, forKey: .policyName)
        try encoderContainer.encode(groupName, forKey: .groupName)

    }
}


///  删除用户组
public class DeleteGroupRequest:JdCloudRequest
{
    /// 用户组名称
    var groupName:String


    public init(regionId: String,groupName:String){
        self.groupName = groupName
        super.init(regionId: regionId)
    }


    enum DeleteGroupRequestRequestCodingKeys: String, CodingKey {
        case groupName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(groupName, forKey: .groupName)

    }
}

/// 为用户组解绑策略 
public class DetachGroupPolicyResult:NSObject,JdCloudResult
{
}
public class DeleteGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteGroupResult?;

    enum DeleteGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 将子用户从组中删除 
public class RemoveSubUserFromGroupResult:NSObject,JdCloudResult
{
}
public class DescribeGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeGroupResult?;

    enum DescribeGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  为子用户绑定策略
public class AttachSubUserPolicyRequest:JdCloudRequest
{
    /// 策略名称
    var policyName:String

    /// 子用户名
    var subUser:String


    public init(regionId: String,policyName:String,subUser:String){
        self.policyName = policyName
        self.subUser = subUser
        super.init(regionId: regionId)
    }


    enum AttachSubUserPolicyRequestRequestCodingKeys: String, CodingKey {
        case policyName
        case subUser
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachSubUserPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(policyName, forKey: .policyName)
        try encoderContainer.encode(subUser, forKey: .subUser)

    }
}

/// 创建子用户 
public class CreateSubUserResult:NSObject,JdCloudResult
{
    /// SubUser
    var subUser:CreateSubUserRes?



    public override init(){
        super.init()
    }

    enum CreateSubUserResultCodingKeys: String, CodingKey {
        case subUser
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubUserResultCodingKeys.self)
        if decoderContainer.contains(.subUser)
        {
            self.subUser = try decoderContainer.decode(CreateSubUserRes?.self, forKey: .subUser)
        }
    }
}
public extension CreateSubUserResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubUserResultCodingKeys.self)
        try encoderContainer.encode(subUser, forKey: .subUser)
    }
}
public class DescribeAttachedSubUserPoliciesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAttachedSubUserPoliciesResult?;

    enum DescribeAttachedSubUserPoliciesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttachedSubUserPoliciesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAttachedSubUserPoliciesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAttachedSubUserPoliciesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttachedSubUserPoliciesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除子用户信息 
public class DeleteSubUserResult:NSObject,JdCloudResult
{
}
public class DeleteSubUserResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSubUserResult?;

    enum DeleteSubUserResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSubUserResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSubUserResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSubUserResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubUserResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询子用户列表
public class DescribeSubUsersRequest:JdCloudRequest
{
    /// 页码，默认1
    var pageNumber:Int?

    /// 分页大小，默认50，取值范围[10, 100]
    var pageSize:Int?

    /// 关键字
    var keyword:String?

    /// 排序规则：0-创建时间顺序排序，1-创建时间倒序排序
    var sort:Int?




    enum DescribeSubUsersRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case keyword
        case sort
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubUsersRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(keyword, forKey: .keyword)
        try encoderContainer.encode(sort, forKey: .sort)

    }
}


///  查询子用户信息
public class DescribeSubUserRequest:JdCloudRequest
{
    /// 子用户名
    var subUser:String


    public init(regionId: String,subUser:String){
        self.subUser = subUser
        super.init(regionId: regionId)
    }


    enum DescribeSubUserRequestRequestCodingKeys: String, CodingKey {
        case subUser
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubUserRequestRequestCodingKeys.self)
        try encoderContainer.encode(subUser, forKey: .subUser)

    }
}

public class DescribeSubUsersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSubUsersResult?;

    enum DescribeSubUsersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubUsersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSubUsersResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSubUsersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubUsersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeSubUserGroupsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSubUserGroupsResult?;

    enum DescribeSubUserGroupsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubUserGroupsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSubUserGroupsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSubUserGroupsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubUserGroupsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询子用户列表 
public class DescribeSubUsersResult:NSObject,JdCloudResult
{
    /// subUser列表
    var subUsers:[SubUser?]?

    /// Total
    var total:Int?



    public override init(){
        super.init()
    }

    enum DescribeSubUsersResultCodingKeys: String, CodingKey {
        case subUsers
        case total
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubUsersResultCodingKeys.self)
        if decoderContainer.contains(.subUsers)
        {
            self.subUsers = try decoderContainer.decode([SubUser?]?.self, forKey: .subUsers)
        }
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
    }
}
public extension DescribeSubUsersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubUsersResultCodingKeys.self)
        try encoderContainer.encode(subUsers, forKey: .subUsers)
        try encoderContainer.encode(total, forKey: .total)
    }
}

///  创建子用户
public class CreateSubUserRequest:JdCloudRequest
{
    /// 子用户信息
    var createSubUserInfo:CreateSubUserInfo


    public init(regionId: String,createSubUserInfo:CreateSubUserInfo){
        self.createSubUserInfo = createSubUserInfo
        super.init(regionId: regionId)
    }


    enum CreateSubUserRequestRequestCodingKeys: String, CodingKey {
        case createSubUserInfo
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubUserRequestRequestCodingKeys.self)
        try encoderContainer.encode(createSubUserInfo, forKey: .createSubUserInfo)

    }
}


///  查询子用户绑定的策略列表
public class DescribeAttachedSubUserPoliciesRequest:JdCloudRequest
{
    /// 子用户名
    var subUser:String


    public init(regionId: String,subUser:String){
        self.subUser = subUser
        super.init(regionId: regionId)
    }


    enum DescribeAttachedSubUserPoliciesRequestRequestCodingKeys: String, CodingKey {
        case subUser
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttachedSubUserPoliciesRequestRequestCodingKeys.self)
        try encoderContainer.encode(subUser, forKey: .subUser)

    }
}


///  为子用户解绑策略
public class DetachSubUserPolicyRequest:JdCloudRequest
{
    /// 策略名称
    var policyName:String

    /// 子用户名
    var subUser:String


    public init(regionId: String,policyName:String,subUser:String){
        self.policyName = policyName
        self.subUser = subUser
        super.init(regionId: regionId)
    }


    enum DetachSubUserPolicyRequestRequestCodingKeys: String, CodingKey {
        case policyName
        case subUser
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachSubUserPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(policyName, forKey: .policyName)
        try encoderContainer.encode(subUser, forKey: .subUser)

    }
}

/// 查询子用户所属的所有组 
public class DescribeSubUserGroupsResult:NSObject,JdCloudResult
{
    /// Groups
    var groups:[GroupInfo?]?

    /// Total
    var total:Int?



    public override init(){
        super.init()
    }

    enum DescribeSubUserGroupsResultCodingKeys: String, CodingKey {
        case groups
        case total
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubUserGroupsResultCodingKeys.self)
        if decoderContainer.contains(.groups)
        {
            self.groups = try decoderContainer.decode([GroupInfo?]?.self, forKey: .groups)
        }
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
    }
}
public extension DescribeSubUserGroupsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubUserGroupsResultCodingKeys.self)
        try encoderContainer.encode(groups, forKey: .groups)
        try encoderContainer.encode(total, forKey: .total)
    }
}
/// 修改子用户信息 
public class UpdateSubUserResult:NSObject,JdCloudResult
{
    /// SubUser
    var subUser:CreateSubUserRes?



    public override init(){
        super.init()
    }

    enum UpdateSubUserResultCodingKeys: String, CodingKey {
        case subUser
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateSubUserResultCodingKeys.self)
        if decoderContainer.contains(.subUser)
        {
            self.subUser = try decoderContainer.decode(CreateSubUserRes?.self, forKey: .subUser)
        }
    }
}
public extension UpdateSubUserResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateSubUserResultCodingKeys.self)
        try encoderContainer.encode(subUser, forKey: .subUser)
    }
}
public class AttachSubUserPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AttachSubUserPolicyResult?;

    enum AttachSubUserPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AttachSubUserPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AttachSubUserPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension AttachSubUserPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachSubUserPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改子用户信息
public class UpdateSubUserRequest:JdCloudRequest
{
    /// 子用户信息
    var updateSubUserInfo:UpdateSubUserInfo

    /// 子用户名
    var subUser:String


    public init(regionId: String,updateSubUserInfo:UpdateSubUserInfo,subUser:String){
        self.updateSubUserInfo = updateSubUserInfo
        self.subUser = subUser
        super.init(regionId: regionId)
    }


    enum UpdateSubUserRequestRequestCodingKeys: String, CodingKey {
        case updateSubUserInfo
        case subUser
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateSubUserRequestRequestCodingKeys.self)
        try encoderContainer.encode(updateSubUserInfo, forKey: .updateSubUserInfo)
        try encoderContainer.encode(subUser, forKey: .subUser)

    }
}

/// 查询子用户绑定的策略列表 
public class DescribeAttachedSubUserPoliciesResult:NSObject,JdCloudResult
{
    /// 总数
    var total:Int?

    /// 策略列表信息
    var policies:[Policy?]?



    public override init(){
        super.init()
    }

    enum DescribeAttachedSubUserPoliciesResultCodingKeys: String, CodingKey {
        case total
        case policies
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttachedSubUserPoliciesResultCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
        if decoderContainer.contains(.policies)
        {
            self.policies = try decoderContainer.decode([Policy?]?.self, forKey: .policies)
        }
    }
}
public extension DescribeAttachedSubUserPoliciesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttachedSubUserPoliciesResultCodingKeys.self)
        try encoderContainer.encode(total, forKey: .total)
        try encoderContainer.encode(policies, forKey: .policies)
    }
}

///  删除子用户信息
public class DeleteSubUserRequest:JdCloudRequest
{
    /// 子用户名
    var subUser:String


    public init(regionId: String,subUser:String){
        self.subUser = subUser
        super.init(regionId: regionId)
    }


    enum DeleteSubUserRequestRequestCodingKeys: String, CodingKey {
        case subUser
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubUserRequestRequestCodingKeys.self)
        try encoderContainer.encode(subUser, forKey: .subUser)

    }
}

/// 为子用户解绑策略 
public class DetachSubUserPolicyResult:NSObject,JdCloudResult
{
}
public class DetachSubUserPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DetachSubUserPolicyResult?;

    enum DetachSubUserPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DetachSubUserPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DetachSubUserPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension DetachSubUserPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachSubUserPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeSubUserResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSubUserResult?;

    enum DescribeSubUserResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubUserResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSubUserResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSubUserResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubUserResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateSubUserResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateSubUserResult?;

    enum UpdateSubUserResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateSubUserResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateSubUserResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateSubUserResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateSubUserResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 为子用户绑定策略 
public class AttachSubUserPolicyResult:NSObject,JdCloudResult
{
}

///  查询子用户所属的所有组
public class DescribeSubUserGroupsRequest:JdCloudRequest
{
    /// 子用户名
    var subUser:String


    public init(regionId: String,subUser:String){
        self.subUser = subUser
        super.init(regionId: regionId)
    }


    enum DescribeSubUserGroupsRequestRequestCodingKeys: String, CodingKey {
        case subUser
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubUserGroupsRequestRequestCodingKeys.self)
        try encoderContainer.encode(subUser, forKey: .subUser)

    }
}

public class CreateSubUserResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSubUserResult?;

    enum CreateSubUserResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubUserResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSubUserResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSubUserResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubUserResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询子用户信息 
public class DescribeSubUserResult:NSObject,JdCloudResult
{
    /// SubUser
    var subUser:SubUser?



    public override init(){
        super.init()
    }

    enum DescribeSubUserResultCodingKeys: String, CodingKey {
        case subUser
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubUserResultCodingKeys.self)
        if decoderContainer.contains(.subUser)
        {
            self.subUser = try decoderContainer.decode(SubUser?.self, forKey: .subUser)
        }
    }
}
public extension DescribeSubUserResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubUserResultCodingKeys.self)
        try encoderContainer.encode(subUser, forKey: .subUser)
    }
}
