/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  deadLetterNumber
@objc(DeadLetterNumber)
public class DeadLetterNumber:NSObject,Codable{
    /// topic的编号
    var topicId:String?
    /// topic名称
    var topicName:String?
    /// consumerGroupId
    var consumerGroupId:String?
    /// 死信队列数
    var deadLetterNumberValue:Int?



    public override init(){
            super.init()
    }

    enum DeadLetterNumberCodingKeys: String, CodingKey {
        case topicId
        case topicName
        case consumerGroupId
        case deadLetterNumberValue = "deadLetterNumber"
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeadLetterNumberCodingKeys.self)
        if decoderContainer.contains(.topicId)
        {
            self.topicId = try decoderContainer.decode(String?.self, forKey: .topicId)
        }
        if decoderContainer.contains(.topicName)
        {
            self.topicName = try decoderContainer.decode(String?.self, forKey: .topicName)
        }
        if decoderContainer.contains(.consumerGroupId)
        {
            self.consumerGroupId = try decoderContainer.decode(String?.self, forKey: .consumerGroupId)
        }
        if decoderContainer.contains(.deadLetterNumberValue)
        {
            self.deadLetterNumberValue = try decoderContainer.decode(Int?.self, forKey: .deadLetterNumberValue)
        }
    }
}
public extension DeadLetterNumber{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeadLetterNumberCodingKeys.self)
         try encoderContainer.encode(topicId, forKey: .topicId)
         try encoderContainer.encode(topicName, forKey: .topicName)
         try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)
         try encoderContainer.encode(deadLetterNumberValue, forKey: .deadLetterNumberValue)
    }
}
