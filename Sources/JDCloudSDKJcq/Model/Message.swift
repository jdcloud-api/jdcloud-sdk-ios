/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  message
@objc(Message)
public class Message:NSObject,Codable{
    /// 消息id
    var messageId:String?
    /// 内容
    var body:String?
    /// tag以逗号隔开
    var tags:String?
    /// 用户设置的属性json字符串
    var properties:String?
    /// 消息的存储时间
    var storeTime:Double?



    public override init(){
            super.init()
    }

    enum MessageCodingKeys: String, CodingKey {
        case messageId
        case body
        case tags
        case properties
        case storeTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: MessageCodingKeys.self)
        if decoderContainer.contains(.messageId)
        {
            self.messageId = try decoderContainer.decode(String?.self, forKey: .messageId)
        }
        if decoderContainer.contains(.body)
        {
            self.body = try decoderContainer.decode(String?.self, forKey: .body)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode(String?.self, forKey: .tags)
        }
        if decoderContainer.contains(.properties)
        {
            self.properties = try decoderContainer.decode(String?.self, forKey: .properties)
        }
        if decoderContainer.contains(.storeTime)
        {
            self.storeTime = try decoderContainer.decode(Double?.self, forKey: .storeTime)
        }
    }
}
public extension Message{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: MessageCodingKeys.self)
         try encoderContainer.encode(messageId, forKey: .messageId)
         try encoderContainer.encode(body, forKey: .body)
         try encoderContainer.encode(tags, forKey: .tags)
         try encoderContainer.encode(properties, forKey: .properties)
         try encoderContainer.encode(storeTime, forKey: .storeTime)
    }
}
