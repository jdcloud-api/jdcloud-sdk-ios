/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  subscription
@objc(Subscription)
public class Subscription:NSObject,Codable{
    /// consumerGroupId
    var consumerGroupId:String?
    /// endPoint
    var endPoint:String?
    /// messageInvisibleTimeInSeconds
    var messageInvisibleTimeInSeconds:Int?
    /// subscriptionType
    var subscriptionType:String?
    /// tags
    var tags:[String?]?
    /// 是否开启死信队列
    var dlqEnable:Bool?
    /// 最大重试次数
    var maxRetryTimes:Int?
    /// 创建时间
    var createTime:String?
    /// 最后更新时间
    var lastUpdateTime:String?
    /// 在线consumer个数
    var consumerNumbers:Int?



    public override init(){
            super.init()
    }

    enum SubscriptionCodingKeys: String, CodingKey {
        case consumerGroupId
        case endPoint
        case messageInvisibleTimeInSeconds
        case subscriptionType
        case tags
        case dlqEnable
        case maxRetryTimes
        case createTime
        case lastUpdateTime
        case consumerNumbers
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SubscriptionCodingKeys.self)
        if decoderContainer.contains(.consumerGroupId)
        {
            self.consumerGroupId = try decoderContainer.decode(String?.self, forKey: .consumerGroupId)
        }
        if decoderContainer.contains(.endPoint)
        {
            self.endPoint = try decoderContainer.decode(String?.self, forKey: .endPoint)
        }
        if decoderContainer.contains(.messageInvisibleTimeInSeconds)
        {
            self.messageInvisibleTimeInSeconds = try decoderContainer.decode(Int?.self, forKey: .messageInvisibleTimeInSeconds)
        }
        if decoderContainer.contains(.subscriptionType)
        {
            self.subscriptionType = try decoderContainer.decode(String?.self, forKey: .subscriptionType)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([String?]?.self, forKey: .tags)
        }
        if decoderContainer.contains(.dlqEnable)
        {
            self.dlqEnable = try decoderContainer.decode(Bool?.self, forKey: .dlqEnable)
        }
        if decoderContainer.contains(.maxRetryTimes)
        {
            self.maxRetryTimes = try decoderContainer.decode(Int?.self, forKey: .maxRetryTimes)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.lastUpdateTime)
        {
            self.lastUpdateTime = try decoderContainer.decode(String?.self, forKey: .lastUpdateTime)
        }
        if decoderContainer.contains(.consumerNumbers)
        {
            self.consumerNumbers = try decoderContainer.decode(Int?.self, forKey: .consumerNumbers)
        }
    }
}
public extension Subscription{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SubscriptionCodingKeys.self)
         try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)
         try encoderContainer.encode(endPoint, forKey: .endPoint)
         try encoderContainer.encode(messageInvisibleTimeInSeconds, forKey: .messageInvisibleTimeInSeconds)
         try encoderContainer.encode(subscriptionType, forKey: .subscriptionType)
         try encoderContainer.encode(tags, forKey: .tags)
         try encoderContainer.encode(dlqEnable, forKey: .dlqEnable)
         try encoderContainer.encode(maxRetryTimes, forKey: .maxRetryTimes)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(lastUpdateTime, forKey: .lastUpdateTime)
         try encoderContainer.encode(consumerNumbers, forKey: .consumerNumbers)
    }
}
