/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  topic
@objc(Topic)
public class Topic:NSObject,Codable{
    /// topic Id
    var topicId:String?
    /// topic名称
    var topicName:String?
    /// 描述
    var descriptionValue:String?
    /// 创建时间
    var createTime:String?
    /// 更新时间
    var lastUpdateTime:String?
    /// topicStatus
    var topicStatus:String?
    /// 自己创建的订阅数
    var subscriptionCount:Int?
    /// 消息生命周期时长小时
    var messageLifeTimeInHours:Int?
    /// 配置信息
    var topicConfig:TopicConfig?
    /// 是否是自己的topic
    var own:Bool?
    /// 被授权的权限[PUB,SUB,PUBSUB,READ_ONLY,ADMIN]
    var authorizedPermission:String?
    /// 标签信息
    var tags:[Tag?]?



    public override init(){
            super.init()
    }

    enum TopicCodingKeys: String, CodingKey {
        case topicId
        case topicName
        case descriptionValue = "description"
        case createTime
        case lastUpdateTime
        case topicStatus
        case subscriptionCount
        case messageLifeTimeInHours
        case topicConfig
        case own
        case authorizedPermission
        case tags
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TopicCodingKeys.self)
        if decoderContainer.contains(.topicId)
        {
            self.topicId = try decoderContainer.decode(String?.self, forKey: .topicId)
        }
        if decoderContainer.contains(.topicName)
        {
            self.topicName = try decoderContainer.decode(String?.self, forKey: .topicName)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.lastUpdateTime)
        {
            self.lastUpdateTime = try decoderContainer.decode(String?.self, forKey: .lastUpdateTime)
        }
        if decoderContainer.contains(.topicStatus)
        {
            self.topicStatus = try decoderContainer.decode(String?.self, forKey: .topicStatus)
        }
        if decoderContainer.contains(.subscriptionCount)
        {
            self.subscriptionCount = try decoderContainer.decode(Int?.self, forKey: .subscriptionCount)
        }
        if decoderContainer.contains(.messageLifeTimeInHours)
        {
            self.messageLifeTimeInHours = try decoderContainer.decode(Int?.self, forKey: .messageLifeTimeInHours)
        }
        if decoderContainer.contains(.topicConfig)
        {
            self.topicConfig = try decoderContainer.decode(TopicConfig?.self, forKey: .topicConfig)
        }
        if decoderContainer.contains(.own)
        {
            self.own = try decoderContainer.decode(Bool?.self, forKey: .own)
        }
        if decoderContainer.contains(.authorizedPermission)
        {
            self.authorizedPermission = try decoderContainer.decode(String?.self, forKey: .authorizedPermission)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([Tag?]?.self, forKey: .tags)
        }
    }
}
public extension Topic{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TopicCodingKeys.self)
         try encoderContainer.encode(topicId, forKey: .topicId)
         try encoderContainer.encode(topicName, forKey: .topicName)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(lastUpdateTime, forKey: .lastUpdateTime)
         try encoderContainer.encode(topicStatus, forKey: .topicStatus)
         try encoderContainer.encode(subscriptionCount, forKey: .subscriptionCount)
         try encoderContainer.encode(messageLifeTimeInHours, forKey: .messageLifeTimeInHours)
         try encoderContainer.encode(topicConfig, forKey: .topicConfig)
         try encoderContainer.encode(own, forKey: .own)
         try encoderContainer.encode(authorizedPermission, forKey: .authorizedPermission)
         try encoderContainer.encode(tags, forKey: .tags)
    }
}
