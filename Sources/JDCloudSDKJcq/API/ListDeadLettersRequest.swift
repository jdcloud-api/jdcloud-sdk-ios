/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   DeadLetter
   死信队列相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  死信队列列表
@objc(ListDeadLettersRequest)
public class ListDeadLettersRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// 开始时间
    var startTime:String

    /// 结束时间
    var endTime:String

    /// topic 名称
    var topicName:String

    /// consumerGroupId
    var consumerGroupId:String


    public init(regionId: String,startTime:String,endTime:String,topicName:String,consumerGroupId:String){
        self.startTime = startTime
        self.endTime = endTime
        self.topicName = topicName
        self.consumerGroupId = consumerGroupId
        super.init(regionId: regionId)
    }


    enum ListDeadLettersRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case topicName
        case consumerGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListDeadLettersRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(topicName, forKey: .topicName)
        try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)

    }
}
