/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   AccessPoint
   接入点相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon

/// 删除订阅 
public class DeleteSubscriptionResult:NSObject,JdCloudResult
{
}
/// 清除消息 
public class CleanMessagesResult:NSObject,JdCloudResult
{
}

///  订阅列表
public class DescribeSubscriptionsRequest:JdCloudRequest
{
    /// consumerGroupFilter，consumerGroupId的过滤条件
    var consumerGroupFilter:String?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// 页码
    var pageNumber:Int?

    /// topic 名称
    var topicName:String


    public init(regionId: String,topicName:String){
        self.topicName = topicName
        super.init(regionId: regionId)
    }


    enum DescribeSubscriptionsRequestRequestCodingKeys: String, CodingKey {
        case consumerGroupFilter
        case pageSize
        case pageNumber
        case topicName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubscriptionsRequestRequestCodingKeys.self)
        try encoderContainer.encode(consumerGroupFilter, forKey: .consumerGroupFilter)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(topicName, forKey: .topicName)

    }
}


///  清除消息
public class CleanMessagesRequest:JdCloudRequest
{
    /// topic 名称
    var topicName:String

    /// consumerGroupId
    var consumerGroupId:String


    public init(regionId: String,topicName:String,consumerGroupId:String){
        self.topicName = topicName
        self.consumerGroupId = consumerGroupId
        super.init(regionId: regionId)
    }


    enum CleanMessagesRequestRequestCodingKeys: String, CodingKey {
        case topicName
        case consumerGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CleanMessagesRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicName, forKey: .topicName)
        try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)

    }
}

public class DeleteSubscriptionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSubscriptionResult?;

    enum DeleteSubscriptionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSubscriptionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSubscriptionResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSubscriptionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubscriptionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询订阅详情 
public class DescribeSubscriptionResult:NSObject,JdCloudResult
{
    /// 订阅详情
    var subscription:Subscription?



    public override init(){
        super.init()
    }

    enum DescribeSubscriptionResultCodingKeys: String, CodingKey {
        case subscription
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubscriptionResultCodingKeys.self)
        if decoderContainer.contains(.subscription)
        {
            self.subscription = try decoderContainer.decode(Subscription?.self, forKey: .subscription)
        }
    }
}
public extension DescribeSubscriptionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubscriptionResultCodingKeys.self)
        try encoderContainer.encode(subscription, forKey: .subscription)
    }
}
public class DescribeSubscriptionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSubscriptionResult?;

    enum DescribeSubscriptionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubscriptionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSubscriptionResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSubscriptionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubscriptionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除订阅
public class DeleteSubscriptionRequest:JdCloudRequest
{
    /// topic 名称
    var topicName:String

    /// consumerGroupId
    var consumerGroupId:String


    public init(regionId: String,topicName:String,consumerGroupId:String){
        self.topicName = topicName
        self.consumerGroupId = consumerGroupId
        super.init(regionId: regionId)
    }


    enum DeleteSubscriptionRequestRequestCodingKeys: String, CodingKey {
        case topicName
        case consumerGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubscriptionRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicName, forKey: .topicName)
        try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)

    }
}


///  创建订阅
public class CreateSubscriptionRequest:JdCloudRequest
{
    /// consumerGroupId
    var consumerGroupId:String

    /// 消息隐藏时间单位秒
    var messageInvisibleTimeInSeconds:Int?

    /// 是否开启死信队列[true, false]
    var dlqEnable:Bool?

    /// 最大重试次数dlqEnable为true必填,范围[0,16]
    var maxRetryTimes:Int?

    /// topic 名称
    var topicName:String


    public init(regionId: String,consumerGroupId:String,topicName:String){
        self.consumerGroupId = consumerGroupId
        self.topicName = topicName
        super.init(regionId: regionId)
    }


    enum CreateSubscriptionRequestRequestCodingKeys: String, CodingKey {
        case consumerGroupId
        case messageInvisibleTimeInSeconds
        case dlqEnable
        case maxRetryTimes
        case topicName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubscriptionRequestRequestCodingKeys.self)
        try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)
        try encoderContainer.encode(messageInvisibleTimeInSeconds, forKey: .messageInvisibleTimeInSeconds)
        try encoderContainer.encode(dlqEnable, forKey: .dlqEnable)
        try encoderContainer.encode(maxRetryTimes, forKey: .maxRetryTimes)
        try encoderContainer.encode(topicName, forKey: .topicName)

    }
}

/// 重置消费位 
public class ResetConsumeOffsetResult:NSObject,JdCloudResult
{
}
public class ModifySubscriptionAttributeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifySubscriptionAttributeResult?;

    enum ModifySubscriptionAttributeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifySubscriptionAttributeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifySubscriptionAttributeResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifySubscriptionAttributeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifySubscriptionAttributeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改订阅 
public class ModifySubscriptionAttributeResult:NSObject,JdCloudResult
{
}
public class ResetConsumeOffsetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResetConsumeOffsetResult?;

    enum ResetConsumeOffsetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResetConsumeOffsetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResetConsumeOffsetResult?.self, forKey: .result) ?? nil
    }
}

public extension ResetConsumeOffsetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetConsumeOffsetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 订阅列表 
public class DescribeSubscriptionsResult:NSObject,JdCloudResult
{
    /// Subscriptions
    var subscriptions:[Subscription?]?

    /// 订阅关系的总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeSubscriptionsResultCodingKeys: String, CodingKey {
        case subscriptions
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubscriptionsResultCodingKeys.self)
        if decoderContainer.contains(.subscriptions)
        {
            self.subscriptions = try decoderContainer.decode([Subscription?]?.self, forKey: .subscriptions)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeSubscriptionsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubscriptionsResultCodingKeys.self)
        try encoderContainer.encode(subscriptions, forKey: .subscriptions)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  修改订阅
public class ModifySubscriptionAttributeRequest:JdCloudRequest
{
    /// 最大重试次数
    var maxRetryTimes:Int?

    /// 消息ack超时时间
    var messageInvisibleTimeInSeconds:Int?

    /// 是否开启死信队列[true, false]
    var dlqEnable:Bool?

    /// topic 名称
    var topicName:String

    /// consumerGroupId
    var consumerGroupId:String


    public init(regionId: String,topicName:String,consumerGroupId:String){
        self.topicName = topicName
        self.consumerGroupId = consumerGroupId
        super.init(regionId: regionId)
    }


    enum ModifySubscriptionAttributeRequestRequestCodingKeys: String, CodingKey {
        case maxRetryTimes
        case messageInvisibleTimeInSeconds
        case dlqEnable
        case topicName
        case consumerGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifySubscriptionAttributeRequestRequestCodingKeys.self)
        try encoderContainer.encode(maxRetryTimes, forKey: .maxRetryTimes)
        try encoderContainer.encode(messageInvisibleTimeInSeconds, forKey: .messageInvisibleTimeInSeconds)
        try encoderContainer.encode(dlqEnable, forKey: .dlqEnable)
        try encoderContainer.encode(topicName, forKey: .topicName)
        try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)

    }
}


///  重置消费位
public class ResetConsumeOffsetRequest:JdCloudRequest
{
    /// 时间
    var time:String

    /// topic 名称
    var topicName:String

    /// consumerGroupId
    var consumerGroupId:String


    public init(regionId: String,time:String,topicName:String,consumerGroupId:String){
        self.time = time
        self.topicName = topicName
        self.consumerGroupId = consumerGroupId
        super.init(regionId: regionId)
    }


    enum ResetConsumeOffsetRequestRequestCodingKeys: String, CodingKey {
        case time
        case topicName
        case consumerGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetConsumeOffsetRequestRequestCodingKeys.self)
        try encoderContainer.encode(time, forKey: .time)
        try encoderContainer.encode(topicName, forKey: .topicName)
        try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)

    }
}

public class CreateSubscriptionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSubscriptionResult?;

    enum CreateSubscriptionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubscriptionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSubscriptionResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSubscriptionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubscriptionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询订阅详情
public class DescribeSubscriptionRequest:JdCloudRequest
{
    /// topic 名称
    var topicName:String

    /// consumerGroupId
    var consumerGroupId:String


    public init(regionId: String,topicName:String,consumerGroupId:String){
        self.topicName = topicName
        self.consumerGroupId = consumerGroupId
        super.init(regionId: regionId)
    }


    enum DescribeSubscriptionRequestRequestCodingKeys: String, CodingKey {
        case topicName
        case consumerGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubscriptionRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicName, forKey: .topicName)
        try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)

    }
}

public class DescribeSubscriptionsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSubscriptionsResult?;

    enum DescribeSubscriptionsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubscriptionsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSubscriptionsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSubscriptionsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubscriptionsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CleanMessagesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CleanMessagesResult?;

    enum CleanMessagesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CleanMessagesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CleanMessagesResult?.self, forKey: .result) ?? nil
    }
}

public extension CleanMessagesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CleanMessagesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建订阅 
public class CreateSubscriptionResult:NSObject,JdCloudResult
{
}

///  重发死信消息
public class ResendDeadLettersRequest:JdCloudRequest
{
    /// messageIds,多个逗号隔开，不传该值就是重发所有死信
    var messageIds:String?

    /// topic 名称
    var topicName:String

    /// consumerGroupId
    var consumerGroupId:String


    public init(regionId: String,topicName:String,consumerGroupId:String){
        self.topicName = topicName
        self.consumerGroupId = consumerGroupId
        super.init(regionId: regionId)
    }


    enum ResendDeadLettersRequestRequestCodingKeys: String, CodingKey {
        case messageIds
        case topicName
        case consumerGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResendDeadLettersRequestRequestCodingKeys.self)
        try encoderContainer.encode(messageIds, forKey: .messageIds)
        try encoderContainer.encode(topicName, forKey: .topicName)
        try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)

    }
}


///  死信队列列表
public class ListDeadLettersRequest:JdCloudRequest
{
    /// 页码
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// 开始时间
    var startTime:String

    /// 结束时间
    var endTime:String

    /// topic 名称
    var topicName:String

    /// consumerGroupId
    var consumerGroupId:String


    public init(regionId: String,startTime:String,endTime:String,topicName:String,consumerGroupId:String){
        self.startTime = startTime
        self.endTime = endTime
        self.topicName = topicName
        self.consumerGroupId = consumerGroupId
        super.init(regionId: regionId)
    }


    enum ListDeadLettersRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case topicName
        case consumerGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListDeadLettersRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(topicName, forKey: .topicName)
        try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)

    }
}

/// 死信消息数(按照用户或者consumerGroupId) 
public class DescribeDeadLetterNumbersResult:NSObject,JdCloudResult
{
    /// DeadLetterNumbers
    var deadLetterNumbers:[DeadLetterNumber?]?

    /// 总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeDeadLetterNumbersResultCodingKeys: String, CodingKey {
        case deadLetterNumbers
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeadLetterNumbersResultCodingKeys.self)
        if decoderContainer.contains(.deadLetterNumbers)
        {
            self.deadLetterNumbers = try decoderContainer.decode([DeadLetterNumber?]?.self, forKey: .deadLetterNumbers)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeDeadLetterNumbersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeadLetterNumbersResultCodingKeys.self)
        try encoderContainer.encode(deadLetterNumbers, forKey: .deadLetterNumbers)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  删除死信消息
public class DeleteDeadLettersRequest:JdCloudRequest
{
    /// messageIds,多个逗号隔开，不传该值就是删除所有的死信
    var messageIds:String?

    /// topic 名称
    var topicName:String

    /// consumerGroupId
    var consumerGroupId:String


    public init(regionId: String,topicName:String,consumerGroupId:String){
        self.topicName = topicName
        self.consumerGroupId = consumerGroupId
        super.init(regionId: regionId)
    }


    enum DeleteDeadLettersRequestRequestCodingKeys: String, CodingKey {
        case messageIds
        case topicName
        case consumerGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDeadLettersRequestRequestCodingKeys.self)
        try encoderContainer.encode(messageIds, forKey: .messageIds)
        try encoderContainer.encode(topicName, forKey: .topicName)
        try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)

    }
}

public class DeleteDeadLettersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteDeadLettersResult?;

    enum DeleteDeadLettersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteDeadLettersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteDeadLettersResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteDeadLettersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDeadLettersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 死信消息数 
public class DescribeDeadLetterNumbersWithTopicResult:NSObject,JdCloudResult
{
    /// DeadLetterNumbers
    var deadLetterNumbers:[DeadLetterNumber?]?

    /// 总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeDeadLetterNumbersWithTopicResultCodingKeys: String, CodingKey {
        case deadLetterNumbers
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeadLetterNumbersWithTopicResultCodingKeys.self)
        if decoderContainer.contains(.deadLetterNumbers)
        {
            self.deadLetterNumbers = try decoderContainer.decode([DeadLetterNumber?]?.self, forKey: .deadLetterNumbers)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeDeadLetterNumbersWithTopicResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeadLetterNumbersWithTopicResultCodingKeys.self)
        try encoderContainer.encode(deadLetterNumbers, forKey: .deadLetterNumbers)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 删除死信消息 
public class DeleteDeadLettersResult:NSObject,JdCloudResult
{
    /// MessageIds
    var messageIds:[String?]?



    public override init(){
        super.init()
    }

    enum DeleteDeadLettersResultCodingKeys: String, CodingKey {
        case messageIds
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteDeadLettersResultCodingKeys.self)
        if decoderContainer.contains(.messageIds)
        {
            self.messageIds = try decoderContainer.decode([String?]?.self, forKey: .messageIds)
        }
    }
}
public extension DeleteDeadLettersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDeadLettersResultCodingKeys.self)
        try encoderContainer.encode(messageIds, forKey: .messageIds)
    }
}
public class DescribeDeadLetterNumbersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDeadLetterNumbersResult?;

    enum DescribeDeadLetterNumbersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeadLetterNumbersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDeadLetterNumbersResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDeadLetterNumbersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeadLetterNumbersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeDeadLetterNumbersWithTopicResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDeadLetterNumbersWithTopicResult?;

    enum DescribeDeadLetterNumbersWithTopicResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeadLetterNumbersWithTopicResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDeadLetterNumbersWithTopicResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDeadLetterNumbersWithTopicResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeadLetterNumbersWithTopicResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ListDeadLettersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ListDeadLettersResult?;

    enum ListDeadLettersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListDeadLettersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ListDeadLettersResult?.self, forKey: .result) ?? nil
    }
}

public extension ListDeadLettersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListDeadLettersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ResendDeadLettersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResendDeadLettersResult?;

    enum ResendDeadLettersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResendDeadLettersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResendDeadLettersResult?.self, forKey: .result) ?? nil
    }
}

public extension ResendDeadLettersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResendDeadLettersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  死信消息数(按照用户或者consumerGroupId)
public class DescribeDeadLetterNumbersRequest:JdCloudRequest
{
    /// consumerGroupId为空则显示该用户所有订阅关系里的死信数量
    var consumerGroupId:String?

    /// 页码
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?




    enum DescribeDeadLetterNumbersRequestRequestCodingKeys: String, CodingKey {
        case consumerGroupId
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeadLetterNumbersRequestRequestCodingKeys.self)
        try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

/// 死信队列列表 
public class ListDeadLettersResult:NSObject,JdCloudResult
{
    /// DeadLetters
    var deadLetters:[DeadLetter?]?

    /// 总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum ListDeadLettersResultCodingKeys: String, CodingKey {
        case deadLetters
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListDeadLettersResultCodingKeys.self)
        if decoderContainer.contains(.deadLetters)
        {
            self.deadLetters = try decoderContainer.decode([DeadLetter?]?.self, forKey: .deadLetters)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension ListDeadLettersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListDeadLettersResultCodingKeys.self)
        try encoderContainer.encode(deadLetters, forKey: .deadLetters)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  死信消息数
public class DescribeDeadLetterNumbersWithTopicRequest:JdCloudRequest
{
    /// consumerGroupId为空则显示该Topic下所有订阅关系里的死信数量
    var consumerGroupId:String?

    /// 页码
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// topic 名称
    var topicName:String


    public init(regionId: String,topicName:String){
        self.topicName = topicName
        super.init(regionId: regionId)
    }


    enum DescribeDeadLetterNumbersWithTopicRequestRequestCodingKeys: String, CodingKey {
        case consumerGroupId
        case pageNumber
        case pageSize
        case topicName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeadLetterNumbersWithTopicRequestRequestCodingKeys.self)
        try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(topicName, forKey: .topicName)

    }
}

/// 重发死信消息 
public class ResendDeadLettersResult:NSObject,JdCloudResult
{
    /// MessageIds
    var messageIds:[String?]?



    public override init(){
        super.init()
    }

    enum ResendDeadLettersResultCodingKeys: String, CodingKey {
        case messageIds
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResendDeadLettersResultCodingKeys.self)
        if decoderContainer.contains(.messageIds)
        {
            self.messageIds = try decoderContainer.decode([String?]?.self, forKey: .messageIds)
        }
    }
}
public extension ResendDeadLettersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResendDeadLettersResultCodingKeys.self)
        try encoderContainer.encode(messageIds, forKey: .messageIds)
    }
}

///  删除单个topic
public class DeleteTopicRequest:JdCloudRequest
{
    /// topic 名称
    var topicName:String


    public init(regionId: String,topicName:String){
        self.topicName = topicName
        super.init(regionId: regionId)
    }


    enum DeleteTopicRequestRequestCodingKeys: String, CodingKey {
        case topicName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteTopicRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicName, forKey: .topicName)

    }
}

/// 删除单个topic 
public class DeleteTopicResult:NSObject,JdCloudResult
{
}
/// 查询topic列表 
public class DescribeTopicsResult:NSObject,JdCloudResult
{
    /// Topics
    var topics:[Topic?]?

    /// 总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeTopicsResultCodingKeys: String, CodingKey {
        case topics
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeTopicsResultCodingKeys.self)
        if decoderContainer.contains(.topics)
        {
            self.topics = try decoderContainer.decode([Topic?]?.self, forKey: .topics)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeTopicsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTopicsResultCodingKeys.self)
        try encoderContainer.encode(topics, forKey: .topics)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 查询topic详情 
public class DescribeTopicResult:NSObject,JdCloudResult
{
    /// Topic
    var topic:Topic?



    public override init(){
        super.init()
    }

    enum DescribeTopicResultCodingKeys: String, CodingKey {
        case topic
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeTopicResultCodingKeys.self)
        if decoderContainer.contains(.topic)
        {
            self.topic = try decoderContainer.decode(Topic?.self, forKey: .topic)
        }
    }
}
public extension DescribeTopicResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTopicResultCodingKeys.self)
        try encoderContainer.encode(topic, forKey: .topic)
    }
}
public class DescribeTopicResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeTopicResult?;

    enum DescribeTopicResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeTopicResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeTopicResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeTopicResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTopicResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeTopicsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeTopicsResult?;

    enum DescribeTopicsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeTopicsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeTopicsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeTopicsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTopicsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建一个指定名称的topic 
public class CreateTopicResult:NSObject,JdCloudResult
{
}

///  查询topic列表
public class DescribeTopicsRequest:JdCloudRequest
{
    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// 页码
    var pageNumber:Int?

    /// topic名称的过滤条件，大小写不敏感
    var topicFilter:String?

    /// 标签过滤条件
    var tagFilters:[TagFilter?]?




    enum DescribeTopicsRequestRequestCodingKeys: String, CodingKey {
        case pageSize
        case pageNumber
        case topicFilter
        case tagFilters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTopicsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(topicFilter, forKey: .topicFilter)
        try encoderContainer.encode(tagFilters, forKey: .tagFilters)

    }
}


///  查询topic详情
public class DescribeTopicRequest:JdCloudRequest
{
    /// topic 名称
    var topicName:String


    public init(regionId: String,topicName:String){
        self.topicName = topicName
        super.init(regionId: regionId)
    }


    enum DescribeTopicRequestRequestCodingKeys: String, CodingKey {
        case topicName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTopicRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicName, forKey: .topicName)

    }
}


///  创建一个指定名称的topic
public class CreateTopicRequest:JdCloudRequest
{
    /// topic名称
    var topicName:String

    /// 类型，[normal,global_order]
    var type:String

    /// 描述，长度不大于255
    var descriptionValue:String?


    public init(regionId: String,topicName:String,type:String){
        self.topicName = topicName
        self.type = type
        super.init(regionId: regionId)
    }


    enum CreateTopicRequestRequestCodingKeys: String, CodingKey {
        case topicName
        case type
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateTopicRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicName, forKey: .topicName)
        try encoderContainer.encode(type, forKey: .type)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}

public class CreateTopicResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateTopicResult?;

    enum CreateTopicResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateTopicResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateTopicResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateTopicResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateTopicResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteTopicResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteTopicResult?;

    enum DeleteTopicResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteTopicResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteTopicResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteTopicResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteTopicResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  consumerGroupId列表
public class DescribeConsumerGroupIdsRequest:JdCloudRequest
{
}

public class DescribeConsumerGroupIdsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeConsumerGroupIdsResult?;

    enum DescribeConsumerGroupIdsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeConsumerGroupIdsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeConsumerGroupIdsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeConsumerGroupIdsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeConsumerGroupIdsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// consumerGroupId列表 
public class DescribeConsumerGroupIdsResult:NSObject,JdCloudResult
{
    /// ConsumerGroupIds
    var consumerGroupIds:[String?]?



    public override init(){
        super.init()
    }

    enum DescribeConsumerGroupIdsResultCodingKeys: String, CodingKey {
        case consumerGroupIds
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeConsumerGroupIdsResultCodingKeys.self)
        if decoderContainer.contains(.consumerGroupIds)
        {
            self.consumerGroupIds = try decoderContainer.decode([String?]?.self, forKey: .consumerGroupIds)
        }
    }
}
public extension DescribeConsumerGroupIdsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeConsumerGroupIdsResultCodingKeys.self)
        try encoderContainer.encode(consumerGroupIds, forKey: .consumerGroupIds)
    }
}

///  对当前topic授予目标用户特定权限
public class AddPermissionRequest:JdCloudRequest
{
    /// 权限类型，[PUB,SUB,PUBSUB]
    var permission:String

    /// 目标用户UserId
    var targetUserId:String

    /// topic 名称
    var topicName:String


    public init(regionId: String,permission:String,targetUserId:String,topicName:String){
        self.permission = permission
        self.targetUserId = targetUserId
        self.topicName = topicName
        super.init(regionId: regionId)
    }


    enum AddPermissionRequestRequestCodingKeys: String, CodingKey {
        case permission
        case targetUserId
        case topicName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddPermissionRequestRequestCodingKeys.self)
        try encoderContainer.encode(permission, forKey: .permission)
        try encoderContainer.encode(targetUserId, forKey: .targetUserId)
        try encoderContainer.encode(topicName, forKey: .topicName)

    }
}

public class DescribePermissionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribePermissionResult?;

    enum DescribePermissionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePermissionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribePermissionResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribePermissionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePermissionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除当前topic对目标用户授权的权限
public class RemovePermissionRequest:JdCloudRequest
{
    /// 权限类型, [PUB, SUB, PUBSUB]
    var permission:String

    /// 目标用户UserId
    var targetUserId:String

    /// topic 名称
    var topicName:String


    public init(regionId: String,permission:String,targetUserId:String,topicName:String){
        self.permission = permission
        self.targetUserId = targetUserId
        self.topicName = topicName
        super.init(regionId: regionId)
    }


    enum RemovePermissionRequestRequestCodingKeys: String, CodingKey {
        case permission
        case targetUserId
        case topicName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemovePermissionRequestRequestCodingKeys.self)
        try encoderContainer.encode(permission, forKey: .permission)
        try encoderContainer.encode(targetUserId, forKey: .targetUserId)
        try encoderContainer.encode(topicName, forKey: .topicName)

    }
}

/// 删除当前topic对目标用户授权的权限 
public class RemovePermissionResult:NSObject,JdCloudResult
{
}
/// 查看当前topic授予了哪些用户哪些权限 
public class DescribePermissionResult:NSObject,JdCloudResult
{
    /// Permissions
    var permissions:[Permission?]?



    public override init(){
        super.init()
    }

    enum DescribePermissionResultCodingKeys: String, CodingKey {
        case permissions
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePermissionResultCodingKeys.self)
        if decoderContainer.contains(.permissions)
        {
            self.permissions = try decoderContainer.decode([Permission?]?.self, forKey: .permissions)
        }
    }
}
public extension DescribePermissionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePermissionResultCodingKeys.self)
        try encoderContainer.encode(permissions, forKey: .permissions)
    }
}
public class AddPermissionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddPermissionResult?;

    enum AddPermissionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddPermissionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddPermissionResult?.self, forKey: .result) ?? nil
    }
}

public extension AddPermissionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddPermissionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 对当前topic授予目标用户特定权限 
public class AddPermissionResult:NSObject,JdCloudResult
{
}

///  查看当前topic授予了哪些用户哪些权限
public class DescribePermissionRequest:JdCloudRequest
{
    /// topic 名称
    var topicName:String


    public init(regionId: String,topicName:String){
        self.topicName = topicName
        super.init(regionId: regionId)
    }


    enum DescribePermissionRequestRequestCodingKeys: String, CodingKey {
        case topicName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePermissionRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicName, forKey: .topicName)

    }
}

public class RemovePermissionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RemovePermissionResult?;

    enum RemovePermissionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RemovePermissionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RemovePermissionResult?.self, forKey: .result) ?? nil
    }
}

public extension RemovePermissionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemovePermissionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeMessagesByBusinessIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMessagesByBusinessIdResult?;

    enum DescribeMessagesByBusinessIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMessagesByBusinessIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMessagesByBusinessIdResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMessagesByBusinessIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMessagesByBusinessIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeMessagesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMessagesResult?;

    enum DescribeMessagesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMessagesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMessagesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMessagesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMessagesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询message详情
public class DescribeMessageRequest:JdCloudRequest
{
    /// topic 名称
    var topicName:String

    /// message Id
    var messageId:String


    public init(regionId: String,topicName:String,messageId:String){
        self.topicName = topicName
        self.messageId = messageId
        super.init(regionId: regionId)
    }


    enum DescribeMessageRequestRequestCodingKeys: String, CodingKey {
        case topicName
        case messageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMessageRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicName, forKey: .topicName)
        try encoderContainer.encode(messageId, forKey: .messageId)

    }
}


///  根据businessId查询消息
public class DescribeMessagesByBusinessIdRequest:JdCloudRequest
{
    /// business id
    var businessId:String

    /// topic 名称
    var topicName:String


    public init(regionId: String,businessId:String,topicName:String){
        self.businessId = businessId
        self.topicName = topicName
        super.init(regionId: regionId)
    }


    enum DescribeMessagesByBusinessIdRequestRequestCodingKeys: String, CodingKey {
        case businessId
        case topicName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMessagesByBusinessIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(businessId, forKey: .businessId)
        try encoderContainer.encode(topicName, forKey: .topicName)

    }
}

/// 消息列表 
public class DescribeMessagesResult:NSObject,JdCloudResult
{
    /// Messages
    var messages:[Message?]?



    public override init(){
        super.init()
    }

    enum DescribeMessagesResultCodingKeys: String, CodingKey {
        case messages
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMessagesResultCodingKeys.self)
        if decoderContainer.contains(.messages)
        {
            self.messages = try decoderContainer.decode([Message?]?.self, forKey: .messages)
        }
    }
}
public extension DescribeMessagesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMessagesResultCodingKeys.self)
        try encoderContainer.encode(messages, forKey: .messages)
    }
}
/// 查询message详情 
public class DescribeMessageResult:NSObject,JdCloudResult
{
    /// 消息详情
    var message:Message?



    public override init(){
        super.init()
    }

    enum DescribeMessageResultCodingKeys: String, CodingKey {
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMessageResultCodingKeys.self)
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(Message?.self, forKey: .message)
        }
    }
}
public extension DescribeMessageResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMessageResultCodingKeys.self)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  查询消息轨迹
public class DescribeMessageTraceRequest:JdCloudRequest
{
    /// topic 名称
    var topicName:String

    /// message Id
    var messageId:String


    public init(regionId: String,topicName:String,messageId:String){
        self.topicName = topicName
        self.messageId = messageId
        super.init(regionId: regionId)
    }


    enum DescribeMessageTraceRequestRequestCodingKeys: String, CodingKey {
        case topicName
        case messageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMessageTraceRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicName, forKey: .topicName)
        try encoderContainer.encode(messageId, forKey: .messageId)

    }
}

/// 根据businessId查询消息 
public class DescribeMessagesByBusinessIdResult:NSObject,JdCloudResult
{
    /// Messages
    var messages:[Message?]?



    public override init(){
        super.init()
    }

    enum DescribeMessagesByBusinessIdResultCodingKeys: String, CodingKey {
        case messages
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMessagesByBusinessIdResultCodingKeys.self)
        if decoderContainer.contains(.messages)
        {
            self.messages = try decoderContainer.decode([Message?]?.self, forKey: .messages)
        }
    }
}
public extension DescribeMessagesByBusinessIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMessagesByBusinessIdResultCodingKeys.self)
        try encoderContainer.encode(messages, forKey: .messages)
    }
}

///  消息列表
public class DescribeMessagesRequest:JdCloudRequest
{
    /// 开始时间
    var startTime:String

    /// 结束时间
    var endTime:String

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// 页码
    var pageNumber:Int?

    /// topic 名称
    var topicName:String


    public init(regionId: String,startTime:String,endTime:String,topicName:String){
        self.startTime = startTime
        self.endTime = endTime
        self.topicName = topicName
        super.init(regionId: regionId)
    }


    enum DescribeMessagesRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case pageSize
        case pageNumber
        case topicName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMessagesRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(topicName, forKey: .topicName)

    }
}

public class DescribeMessageTraceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMessageTraceResult?;

    enum DescribeMessageTraceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMessageTraceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMessageTraceResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMessageTraceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMessageTraceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeMessageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMessageResult?;

    enum DescribeMessageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMessageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMessageResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMessageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMessageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询消息轨迹 
public class DescribeMessageTraceResult:NSObject,JdCloudResult
{
    /// 消息轨迹信息
    var messageTraceInfo:MessageTraceInfo?



    public override init(){
        super.init()
    }

    enum DescribeMessageTraceResultCodingKeys: String, CodingKey {
        case messageTraceInfo
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMessageTraceResultCodingKeys.self)
        if decoderContainer.contains(.messageTraceInfo)
        {
            self.messageTraceInfo = try decoderContainer.decode(MessageTraceInfo?.self, forKey: .messageTraceInfo)
        }
    }
}
public extension DescribeMessageTraceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMessageTraceResultCodingKeys.self)
        try encoderContainer.encode(messageTraceInfo, forKey: .messageTraceInfo)
    }
}
public class DescribeAccessPointResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAccessPointResult?;

    enum DescribeAccessPointResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAccessPointResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAccessPointResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAccessPointResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAccessPointResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看接入点接口 
public class DescribeAccessPointResult:NSObject,JdCloudResult
{
    /// AccessPoint
    var accessPoint:AccessPoint?



    public override init(){
        super.init()
    }

    enum DescribeAccessPointResultCodingKeys: String, CodingKey {
        case accessPoint
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAccessPointResultCodingKeys.self)
        if decoderContainer.contains(.accessPoint)
        {
            self.accessPoint = try decoderContainer.decode(AccessPoint?.self, forKey: .accessPoint)
        }
    }
}
public extension DescribeAccessPointResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAccessPointResultCodingKeys.self)
        try encoderContainer.encode(accessPoint, forKey: .accessPoint)
    }
}

///  查看接入点接口
public class DescribeAccessPointRequest:JdCloudRequest
{
    /// topic 名称
    var topicName:String


    public init(regionId: String,topicName:String){
        self.topicName = topicName
        super.init(regionId: regionId)
    }


    enum DescribeAccessPointRequestRequestCodingKeys: String, CodingKey {
        case topicName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAccessPointRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicName, forKey: .topicName)

    }
}

