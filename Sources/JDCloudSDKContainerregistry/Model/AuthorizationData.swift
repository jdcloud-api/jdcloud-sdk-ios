/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  authorizationData
@objc(AuthorizationData)
public class AuthorizationData:NSObject,Codable{
    /// 基于base64编码的字符串，包含指定JCR registry的授权信息。解码后可用于docker login。
    var authorizationToken:String?
    /// 用户直接使用的docker login 命令行
    var loginCmdLine:String?
    /// Unix 时钟，记录authorization token的过期时间。默认Authorization tokens有效期为12小时。
    var expiresAt:String?



    public override init(){
            super.init()
    }

    enum AuthorizationDataCodingKeys: String, CodingKey {
        case authorizationToken
        case loginCmdLine
        case expiresAt
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AuthorizationDataCodingKeys.self)
        if decoderContainer.contains(.authorizationToken)
        {
            self.authorizationToken = try decoderContainer.decode(String?.self, forKey: .authorizationToken)
        }
        if decoderContainer.contains(.loginCmdLine)
        {
            self.loginCmdLine = try decoderContainer.decode(String?.self, forKey: .loginCmdLine)
        }
        if decoderContainer.contains(.expiresAt)
        {
            self.expiresAt = try decoderContainer.decode(String?.self, forKey: .expiresAt)
        }
    }
}
public extension AuthorizationData{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AuthorizationDataCodingKeys.self)
         try encoderContainer.encode(authorizationToken, forKey: .authorizationToken)
         try encoderContainer.encode(loginCmdLine, forKey: .loginCmdLine)
         try encoderContainer.encode(expiresAt, forKey: .expiresAt)
    }
}
