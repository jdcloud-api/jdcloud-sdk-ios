/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  注册表详情数据结构
@objc(Registry)
public class Registry:NSObject,Codable{
    /// 注册表名称，&lt;a href&#x3D;&quot;https://www.jdcloud.com/help/detail/3870/isCatalog/1&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var name:String?
    /// registry endporint url
    var registryUri:String?
    /// 注册表描述，&lt;a href&#x3D;&quot;https://www.jdcloud.com/help/detail/3870/isCatalog/1&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var descriptionValue:String?
    /// regsitry 使用的总存储空间 单位 (MB)
    var totalSpaceUsedMB:Double?
    /// registry 的创建时间
    var createTime:String?



    public override init(){
            super.init()
    }

    enum RegistryCodingKeys: String, CodingKey {
        case name
        case registryUri
        case descriptionValue = "description"
        case totalSpaceUsedMB
        case createTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RegistryCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.registryUri)
        {
            self.registryUri = try decoderContainer.decode(String?.self, forKey: .registryUri)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.totalSpaceUsedMB)
        {
            self.totalSpaceUsedMB = try decoderContainer.decode(Double?.self, forKey: .totalSpaceUsedMB)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
    }
}
public extension Registry{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RegistryCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(registryUri, forKey: .registryUri)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(totalSpaceUsedMB, forKey: .totalSpaceUsedMB)
         try encoderContainer.encode(createTime, forKey: .createTime)
    }
}
