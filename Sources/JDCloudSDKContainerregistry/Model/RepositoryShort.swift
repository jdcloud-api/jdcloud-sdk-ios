/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  镜像仓库详情数据结构
@objc(RepositoryShort)
public class RepositoryShort:NSObject,Codable{
    /// 记录用户repository创建的时间。
    var createdAt:String?
    /// 镜像仓库repository名称。
    var repositoryName:String?
    /// repository的URI，用户通过docker CLI,制定该URI直接进行docker pull/push等操作。
    var repositoryUri:String?



    public override init(){
            super.init()
    }

    enum RepositoryShortCodingKeys: String, CodingKey {
        case createdAt
        case repositoryName
        case repositoryUri
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RepositoryShortCodingKeys.self)
        if decoderContainer.contains(.createdAt)
        {
            self.createdAt = try decoderContainer.decode(String?.self, forKey: .createdAt)
        }
        if decoderContainer.contains(.repositoryName)
        {
            self.repositoryName = try decoderContainer.decode(String?.self, forKey: .repositoryName)
        }
        if decoderContainer.contains(.repositoryUri)
        {
            self.repositoryUri = try decoderContainer.decode(String?.self, forKey: .repositoryUri)
        }
    }
}
public extension RepositoryShort{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RepositoryShortCodingKeys.self)
         try encoderContainer.encode(createdAt, forKey: .createdAt)
         try encoderContainer.encode(repositoryName, forKey: .repositoryName)
         try encoderContainer.encode(repositoryUri, forKey: .repositoryUri)
    }
}
