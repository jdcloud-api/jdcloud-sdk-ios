/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Image
   容器镜像服务镜像相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon


///  查询配额
public class DescribeQuotasRequest:JdCloudRequest
{
    /// resourceTypes - 资源类型，暂时只支持 [registry, repository]，支持同时查询两种配额。
      /// 
    var filters:[Filter?]?




    enum DescribeQuotasRequestRequestCodingKeys: String, CodingKey {
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotasRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class DescribeQuotasResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeQuotasResult?;

    enum DescribeQuotasResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQuotasResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeQuotasResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeQuotasResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotasResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询配额 
public class DescribeQuotasResult:NSObject,JdCloudResult
{
    /// 配额列表
    var quotas:[Quota?]?



    public override init(){
        super.init()
    }

    enum DescribeQuotasResultCodingKeys: String, CodingKey {
        case quotas
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQuotasResultCodingKeys.self)
        if decoderContainer.contains(.quotas)
        {
            self.quotas = try decoderContainer.decode([Quota?]?.self, forKey: .quotas)
        }
    }
}
public extension DescribeQuotasResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotasResultCodingKeys.self)
        try encoderContainer.encode(quotas, forKey: .quotas)
    }
}
public class CreateRegistryResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateRegistryResult?;

    enum CreateRegistryResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRegistryResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateRegistryResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateRegistryResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRegistryResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  批量查询指定用户下所有 registry 详情。
      ///       /// 暂不支持 filter.
      ///       /// 
public class DescribeRegistriesRequest:JdCloudRequest
{
}

/// 批量查询指定用户下所有 registry 详情。
      ///       /// 暂不支持 filter.
      ///       ///  
public class DescribeRegistriesResult:NSObject,JdCloudResult
{
    /// Registries
    var registries:[Registry?]?



    public override init(){
        super.init()
    }

    enum DescribeRegistriesResultCodingKeys: String, CodingKey {
        case registries
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRegistriesResultCodingKeys.self)
        if decoderContainer.contains(.registries)
        {
            self.registries = try decoderContainer.decode([Registry?]?.self, forKey: .registries)
        }
    }
}
public extension DescribeRegistriesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRegistriesResultCodingKeys.self)
        try encoderContainer.encode(registries, forKey: .registries)
    }
}
/// 查询指定注册表名称是否已经存在以及是否符合命名规范。
      ///       ///  
public class CheckRegistryNameResult:NSObject,JdCloudResult
{
    /// 表示用户指定的注册表是否通过校验， 0 通过 1 名称为空 2 不符合规范 3 重名
    var code:Int?

    /// code字段非零时，给出详细原因。
    var reason:String?



    public override init(){
        super.init()
    }

    enum CheckRegistryNameResultCodingKeys: String, CodingKey {
        case code
        case reason
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckRegistryNameResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.reason)
        {
            self.reason = try decoderContainer.decode(String?.self, forKey: .reason)
        }
    }
}
public extension CheckRegistryNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckRegistryNameResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(reason, forKey: .reason)
    }
}

///  查询指定注册表名称是否已经存在以及是否符合命名规范。
      ///       /// 
public class CheckRegistryNameRequest:JdCloudRequest
{
    /// 待验证的注册表名。
    var registryName:String


    public init(regionId: String,registryName:String){
        self.registryName = registryName
        super.init(regionId: regionId)
    }


    enum CheckRegistryNameRequestRequestCodingKeys: String, CodingKey {
        case registryName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckRegistryNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(registryName, forKey: .registryName)

    }
}

public class DeleteRegistryResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteRegistryResult?;

    enum DeleteRegistryResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteRegistryResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteRegistryResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteRegistryResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRegistryResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除指定用户下某个 registry.
      ///       ///  [MFA enabled]
public class DeleteRegistryRequest:JdCloudRequest
{
    /// 注册表名称
    var registryName:String


    public init(regionId: String,registryName:String){
        self.registryName = registryName
        super.init(regionId: regionId)
    }


    enum DeleteRegistryRequestRequestCodingKeys: String, CodingKey {
        case registryName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRegistryRequestRequestCodingKeys.self)
        try encoderContainer.encode(registryName, forKey: .registryName)

    }
}

public class DescribeRegistryResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeRegistryResult?;

    enum DescribeRegistryResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRegistryResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeRegistryResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeRegistryResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRegistryResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 通过参数创建注册表。
      ///       ///  
public class CreateRegistryResult:NSObject,JdCloudResult
{
    /// Registry
    var registry:Registry?



    public override init(){
        super.init()
    }

    enum CreateRegistryResultCodingKeys: String, CodingKey {
        case registry
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRegistryResultCodingKeys.self)
        if decoderContainer.contains(.registry)
        {
            self.registry = try decoderContainer.decode(Registry?.self, forKey: .registry)
        }
    }
}
public extension CreateRegistryResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRegistryResultCodingKeys.self)
        try encoderContainer.encode(registry, forKey: .registry)
    }
}
public class DescribeRegistriesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeRegistriesResult?;

    enum DescribeRegistriesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRegistriesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeRegistriesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeRegistriesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRegistriesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除指定用户下某个 registry.
      ///       ///  [MFA enabled] 
public class DeleteRegistryResult:NSObject,JdCloudResult
{
}

///  查询指定用户下某个 registry 详情。
      ///       /// 
public class DescribeRegistryRequest:JdCloudRequest
{
    /// 注册表名称
    var registryName:String


    public init(regionId: String,registryName:String){
        self.registryName = registryName
        super.init(regionId: regionId)
    }


    enum DescribeRegistryRequestRequestCodingKeys: String, CodingKey {
        case registryName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRegistryRequestRequestCodingKeys.self)
        try encoderContainer.encode(registryName, forKey: .registryName)

    }
}

/// 查询指定用户下某个 registry 详情。
      ///       ///  
public class DescribeRegistryResult:NSObject,JdCloudResult
{
    /// Registry
    var registry:Registry?



    public override init(){
        super.init()
    }

    enum DescribeRegistryResultCodingKeys: String, CodingKey {
        case registry
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRegistryResultCodingKeys.self)
        if decoderContainer.contains(.registry)
        {
            self.registry = try decoderContainer.decode(Registry?.self, forKey: .registry)
        }
    }
}
public extension DescribeRegistryResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRegistryResultCodingKeys.self)
        try encoderContainer.encode(registry, forKey: .registry)
    }
}

///  通过参数创建注册表。
      ///       /// 
public class CreateRegistryRequest:JdCloudRequest
{
    /// 用户定义的registry名称。&lt;br&gt; DNS兼容registry名称规则如下：
      ///  &lt;br&gt; 不可为空，且不能超过32字符 &lt;br&gt; 以小写字母开始和结尾，支持使用小写字母、数字、中划线(-)
      /// 
    var registryName:String

    /// 注册表描述，&lt;a href&#x3D;&quot;https://www.jdcloud.com/help/detail/3870/isCatalog/1&quot;&gt;参考公共参数规范&lt;/a&gt;。
      /// 
    var descriptionValue:String?


    public init(regionId: String,registryName:String){
        self.registryName = registryName
        super.init(regionId: regionId)
    }


    enum CreateRegistryRequestRequestCodingKeys: String, CodingKey {
        case registryName
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRegistryRequestRequestCodingKeys.self)
        try encoderContainer.encode(registryName, forKey: .registryName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}

public class CheckRegistryNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CheckRegistryNameResult?;

    enum CheckRegistryNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckRegistryNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CheckRegistryNameResult?.self, forKey: .result) ?? nil
    }
}

public extension CheckRegistryNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckRegistryNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// &lt;p&gt;批量查询令牌。&lt;/p&gt; 
      ///       /// &lt;p&gt;暂时不支持分页和过滤条件。&lt;/p&gt;
      ///       ///  
public class DescribeAuthorizationTokensResult:NSObject,JdCloudResult
{
    /// AuthorizationTokens
    var authorizationTokens:[AuthorizationData?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeAuthorizationTokensResultCodingKeys: String, CodingKey {
        case authorizationTokens
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuthorizationTokensResultCodingKeys.self)
        if decoderContainer.contains(.authorizationTokens)
        {
            self.authorizationTokens = try decoderContainer.decode([AuthorizationData?]?.self, forKey: .authorizationTokens)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeAuthorizationTokensResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuthorizationTokensResultCodingKeys.self)
        try encoderContainer.encode(authorizationTokens, forKey: .authorizationTokens)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  &lt;p&gt;申请12小时有效期的令牌。 使用&lt;code&gt;docker&lt;/code&gt; CLI push和pull镜像。&lt;/p&gt;
      ///       /// &lt;p&gt;&lt;code&gt;authorizationToken&lt;/code&gt;为每个registry返回一个base64编码的字符串，解码后&lt;code&gt;docker login&lt;/code&gt;命令
      ///       /// 可完成指定registry的鉴权。JCR CLI提供&lt;code&gt;jcr get-login&lt;/code&gt;进行认证处理。&lt;/p&gt;
      ///       /// 
public class GetAuthorizationTokenRequest:JdCloudRequest
{
    /// issue新token的过期时间, 可选参数为新生成令牌的过期时间，最大值为24小时，最小值为1小时，为空则默认为12小时过期时间。
      /// 
    var expiredAfterHours:Int?

    /// 注册表名称
    var registryName:String


    public init(regionId: String,registryName:String){
        self.registryName = registryName
        super.init(regionId: regionId)
    }


    enum GetAuthorizationTokenRequestRequestCodingKeys: String, CodingKey {
        case expiredAfterHours
        case registryName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetAuthorizationTokenRequestRequestCodingKeys.self)
        try encoderContainer.encode(expiredAfterHours, forKey: .expiredAfterHours)
        try encoderContainer.encode(registryName, forKey: .registryName)

    }
}


///  释放用户 registry 的 token。
      ///       /// 
public class ReleaseAuthorizationTokenRequest:JdCloudRequest
{
    /// 准备释放的 token ID，功能为指定token释放。
    var authorizationToken:String?

    /// true 表示强制删除用户当前registry下所有有效token的标志；false 表示删除所有有效token。
    var forceAll:Bool?

    /// 注册表名称
    var registryName:String


    public init(regionId: String,registryName:String){
        self.registryName = registryName
        super.init(regionId: regionId)
    }


    enum ReleaseAuthorizationTokenRequestRequestCodingKeys: String, CodingKey {
        case authorizationToken
        case forceAll
        case registryName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReleaseAuthorizationTokenRequestRequestCodingKeys.self)
        try encoderContainer.encode(authorizationToken, forKey: .authorizationToken)
        try encoderContainer.encode(forceAll, forKey: .forceAll)
        try encoderContainer.encode(registryName, forKey: .registryName)

    }
}

/// &lt;p&gt;申请12小时有效期的令牌。 使用&lt;code&gt;docker&lt;/code&gt; CLI push和pull镜像。&lt;/p&gt;
      ///       /// &lt;p&gt;&lt;code&gt;authorizationToken&lt;/code&gt;为每个registry返回一个base64编码的字符串，解码后&lt;code&gt;docker login&lt;/code&gt;命令
      ///       /// 可完成指定registry的鉴权。JCR CLI提供&lt;code&gt;jcr get-login&lt;/code&gt;进行认证处理。&lt;/p&gt;
      ///       ///  
public class GetAuthorizationTokenResult:NSObject,JdCloudResult
{
    /// AuthorizationToken
    var authorizationToken:String?

    /// LoginCmdLine
    var loginCmdLine:String?

    /// ExpiresAt
    var expiresAt:String?



    public override init(){
        super.init()
    }

    enum GetAuthorizationTokenResultCodingKeys: String, CodingKey {
        case authorizationToken
        case loginCmdLine
        case expiresAt
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetAuthorizationTokenResultCodingKeys.self)
        if decoderContainer.contains(.authorizationToken)
        {
            self.authorizationToken = try decoderContainer.decode(String?.self, forKey: .authorizationToken)
        }
        if decoderContainer.contains(.loginCmdLine)
        {
            self.loginCmdLine = try decoderContainer.decode(String?.self, forKey: .loginCmdLine)
        }
        if decoderContainer.contains(.expiresAt)
        {
            self.expiresAt = try decoderContainer.decode(String?.self, forKey: .expiresAt)
        }
    }
}
public extension GetAuthorizationTokenResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetAuthorizationTokenResultCodingKeys.self)
        try encoderContainer.encode(authorizationToken, forKey: .authorizationToken)
        try encoderContainer.encode(loginCmdLine, forKey: .loginCmdLine)
        try encoderContainer.encode(expiresAt, forKey: .expiresAt)
    }
}
public class GetAuthorizationTokenResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetAuthorizationTokenResult?;

    enum GetAuthorizationTokenResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetAuthorizationTokenResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetAuthorizationTokenResult?.self, forKey: .result) ?? nil
    }
}

public extension GetAuthorizationTokenResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetAuthorizationTokenResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeAuthorizationTokensResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAuthorizationTokensResult?;

    enum DescribeAuthorizationTokensResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuthorizationTokensResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAuthorizationTokensResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAuthorizationTokensResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuthorizationTokensResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  &lt;p&gt;批量查询令牌。&lt;/p&gt; 
      ///       /// &lt;p&gt;暂时不支持分页和过滤条件。&lt;/p&gt;
      ///       /// 
public class DescribeAuthorizationTokensRequest:JdCloudRequest
{
    /// token - 令牌 ID，支持多个
      /// 
    var filters:[Filter?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// 注册表名称
    var registryName:String


    public init(regionId: String,registryName:String){
        self.registryName = registryName
        super.init(regionId: regionId)
    }


    enum DescribeAuthorizationTokensRequestRequestCodingKeys: String, CodingKey {
        case filters
        case pageNumber
        case pageSize
        case registryName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuthorizationTokensRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(registryName, forKey: .registryName)

    }
}

/// 释放用户 registry 的 token。
      ///       ///  
public class ReleaseAuthorizationTokenResult:NSObject,JdCloudResult
{
}
public class ReleaseAuthorizationTokenResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ReleaseAuthorizationTokenResult?;

    enum ReleaseAuthorizationTokenResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReleaseAuthorizationTokenResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ReleaseAuthorizationTokenResult?.self, forKey: .result) ?? nil
    }
}

public extension ReleaseAuthorizationTokenResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReleaseAuthorizationTokenResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CheckRepositoryNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CheckRepositoryNameResult?;

    enum CheckRepositoryNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckRepositoryNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CheckRepositoryNameResult?.self, forKey: .result) ?? nil
    }
}

public extension CheckRepositoryNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckRepositoryNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 通过参数创建镜像仓库。
      ///       /// 仓库名称可以分解为多个路径名，每个名称必须至少包含一个小写字母数字，考虑URL规范。
      ///       /// 支持包含段划线或者下划线进行分割，但不允许点&#39;.&#39;，多个路径名之间通过(&quot;/&quot;)连接，总长度不超过256个字符，当前只支持二级目录。
      ///       ///  
public class CreateRepositoryResult:NSObject,JdCloudResult
{
    /// Repository
    var repository:RepositoryShort?



    public override init(){
        super.init()
    }

    enum CreateRepositoryResultCodingKeys: String, CodingKey {
        case repository
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRepositoryResultCodingKeys.self)
        if decoderContainer.contains(.repository)
        {
            self.repository = try decoderContainer.decode(RepositoryShort?.self, forKey: .repository)
        }
    }
}
public extension CreateRepositoryResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRepositoryResultCodingKeys.self)
        try encoderContainer.encode(repository, forKey: .repository)
    }
}
public class DescribeRepositoriesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeRepositoriesResult?;

    enum DescribeRepositoriesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRepositoriesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeRepositoriesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeRepositoriesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRepositoriesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteRepositoryResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteRepositoryResult?;

    enum DeleteRepositoryResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteRepositoryResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteRepositoryResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteRepositoryResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRepositoryResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除指定用户下某个镜像仓库.
      ///       ///  [MFA enabled]
public class DeleteRepositoryRequest:JdCloudRequest
{
    /// 是否强制删除有镜像的镜像仓库
    var force:Bool?

    /// 注册表名称
    var registryName:String

    /// 镜像仓库名称
    var repositoryName:String


    public init(regionId: String,registryName:String,repositoryName:String){
        self.registryName = registryName
        self.repositoryName = repositoryName
        super.init(regionId: regionId)
    }


    enum DeleteRepositoryRequestRequestCodingKeys: String, CodingKey {
        case force
        case registryName
        case repositoryName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRepositoryRequestRequestCodingKeys.self)
        try encoderContainer.encode(force, forKey: .force)
        try encoderContainer.encode(registryName, forKey: .registryName)
        try encoderContainer.encode(repositoryName, forKey: .repositoryName)

    }
}

/// 删除指定用户下某个镜像仓库.
      ///       ///  [MFA enabled] 
public class DeleteRepositoryResult:NSObject,JdCloudResult
{
}

///  查询指定镜像仓库名称是否已经存在以及是否符合命名规范。
      ///       /// 
public class CheckRepositoryNameRequest:JdCloudRequest
{
    /// 注册表名。
    var registryName:String

    /// 待验证的镜像仓库名。
    var repositoryName:String


    public init(regionId: String,registryName:String,repositoryName:String){
        self.registryName = registryName
        self.repositoryName = repositoryName
        super.init(regionId: regionId)
    }


    enum CheckRepositoryNameRequestRequestCodingKeys: String, CodingKey {
        case registryName
        case repositoryName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckRepositoryNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(registryName, forKey: .registryName)
        try encoderContainer.encode(repositoryName, forKey: .repositoryName)

    }
}

public class CreateRepositoryResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateRepositoryResult?;

    enum CreateRepositoryResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRepositoryResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateRepositoryResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateRepositoryResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRepositoryResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  描述用户指定 registry 下的 repository.
      ///       /// 
public class DescribeRepositoriesRequest:JdCloudRequest
{
    /// name - 仓库名称，模糊匹配，支持单个
      /// 
    var filters:[Filter?]?

    /// 注册表名
    var registryName:String?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?




    enum DescribeRepositoriesRequestRequestCodingKeys: String, CodingKey {
        case filters
        case registryName
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRepositoriesRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(registryName, forKey: .registryName)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}


///  通过参数创建镜像仓库。
      ///       /// 仓库名称可以分解为多个路径名，每个名称必须至少包含一个小写字母数字，考虑URL规范。
      ///       /// 支持包含段划线或者下划线进行分割，但不允许点&#39;.&#39;，多个路径名之间通过(&quot;/&quot;)连接，总长度不超过256个字符，当前只支持二级目录。
      ///       /// 
public class CreateRepositoryRequest:JdCloudRequest
{
    /// 镜像仓库名称。
      /// 可以专有模式如默认命名空间nginx-web-app；或者和命名空间一起将多个仓库聚集在一起如 project-a/nginx-web-app。
      /// 
    var repositoryName:String

    /// 注册表描述，&lt;a href&#x3D;&quot;https://www.jdcloud.com/help/detail/3870/isCatalog/1&quot;&gt;参考公共参数规范&lt;/a&gt;。
      /// 
    var descriptionValue:String?

    /// 注册表名称
    var registryName:String


    public init(regionId: String,repositoryName:String,registryName:String){
        self.repositoryName = repositoryName
        self.registryName = registryName
        super.init(regionId: regionId)
    }


    enum CreateRepositoryRequestRequestCodingKeys: String, CodingKey {
        case repositoryName
        case descriptionValue = "description"
        case registryName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRepositoryRequestRequestCodingKeys.self)
        try encoderContainer.encode(repositoryName, forKey: .repositoryName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(registryName, forKey: .registryName)

    }
}

/// 描述用户指定 registry 下的 repository.
      ///       ///  
public class DescribeRepositoriesResult:NSObject,JdCloudResult
{
    /// Repositories
    var repositories:[Repository?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeRepositoriesResultCodingKeys: String, CodingKey {
        case repositories
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRepositoriesResultCodingKeys.self)
        if decoderContainer.contains(.repositories)
        {
            self.repositories = try decoderContainer.decode([Repository?]?.self, forKey: .repositories)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeRepositoriesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRepositoriesResultCodingKeys.self)
        try encoderContainer.encode(repositories, forKey: .repositories)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 查询指定镜像仓库名称是否已经存在以及是否符合命名规范。
      ///       ///  
public class CheckRepositoryNameResult:NSObject,JdCloudResult
{
    /// 表示用户指定的镜像仓库名是否通过校验， 0 通过 1 名称为空 2 不符合规范 3 重名
    var code:Int?

    /// code字段非零时，给出详细原因。
    var reason:String?



    public override init(){
        super.init()
    }

    enum CheckRepositoryNameResultCodingKeys: String, CodingKey {
        case code
        case reason
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckRepositoryNameResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.reason)
        {
            self.reason = try decoderContainer.decode(String?.self, forKey: .reason)
        }
    }
}
public extension CheckRepositoryNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckRepositoryNameResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(reason, forKey: .reason)
    }
}
/// 返回指定repository中images的元数据，包括image size, image tags和creation date。
      ///       ///  
public class DescribeImagesResult:NSObject,JdCloudResult
{
    /// 镜像列表
    var imageDetails:[ImageDetail?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeImagesResultCodingKeys: String, CodingKey {
        case imageDetails
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImagesResultCodingKeys.self)
        if decoderContainer.contains(.imageDetails)
        {
            self.imageDetails = try decoderContainer.decode([ImageDetail?]?.self, forKey: .imageDetails)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeImagesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImagesResultCodingKeys.self)
        try encoderContainer.encode(imageDetails, forKey: .imageDetails)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 删除镜像
      ///       /// imageDigest imageTag imageTagStatus 三者只能且必须传一个。
      ///       /// 可根据Tag状态删除Image，例如删除所有tagged的镜像。
      ///       /// digest和tag唯一表征单个镜像，其中imageDigest为sha256哈希，image manifest的digest。
      ///       /// 例如 sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f；image使用的tag, 如  &quot;precise&quot; 
      ///       ///  [MFA enabled] 
public class DeleteImageResult:NSObject,JdCloudResult
{
}

///  返回指定repository中images的元数据，包括image size, image tags和creation date。
      ///       /// 
public class DescribeImagesRequest:JdCloudRequest
{
    /// registryName - 镜像仓储名称 
      /// repositoryName - 镜像库名称 
      /// imageDigest - 镜像哈希值 
      /// imageTag - 镜像标签 
      /// tagStatus - 打标TAGGED或没打标UNTAGGED 
      /// 
    var filters:[Filter?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?




    enum DescribeImagesRequestRequestCodingKeys: String, CodingKey {
        case filters
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImagesRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

public class DeleteImageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteImageResult?;

    enum DeleteImageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteImageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteImageResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteImageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteImageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除镜像
      ///       /// imageDigest imageTag imageTagStatus 三者只能且必须传一个。
      ///       /// 可根据Tag状态删除Image，例如删除所有tagged的镜像。
      ///       /// digest和tag唯一表征单个镜像，其中imageDigest为sha256哈希，image manifest的digest。
      ///       /// 例如 sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f；image使用的tag, 如  &quot;precise&quot; 
      ///       ///  [MFA enabled]
public class DeleteImageRequest:JdCloudRequest
{
    /// sha256哈希，image manifest的digest.
    var imageDigest:String?

    /// image使用的tag
    var imageTag:String?

    /// 枚举中的一个值，如 tagged 和 untagged.
    var imageTagStatus:String?

    /// 注册表名称
    var registryName:String

    /// 镜像仓库表名称
    var repositoryName:String


    public init(regionId: String,registryName:String,repositoryName:String){
        self.registryName = registryName
        self.repositoryName = repositoryName
        super.init(regionId: regionId)
    }


    enum DeleteImageRequestRequestCodingKeys: String, CodingKey {
        case imageDigest
        case imageTag
        case imageTagStatus
        case registryName
        case repositoryName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteImageRequestRequestCodingKeys.self)
        try encoderContainer.encode(imageDigest, forKey: .imageDigest)
        try encoderContainer.encode(imageTag, forKey: .imageTag)
        try encoderContainer.encode(imageTagStatus, forKey: .imageTagStatus)
        try encoderContainer.encode(registryName, forKey: .registryName)
        try encoderContainer.encode(repositoryName, forKey: .repositoryName)

    }
}

public class DescribeImagesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeImagesResult?;

    enum DescribeImagesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImagesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeImagesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeImagesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImagesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
