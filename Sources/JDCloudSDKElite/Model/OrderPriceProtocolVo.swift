/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  orderPriceProtocolVo
@objc(OrderPriceProtocolVo)
public class OrderPriceProtocolVo:NSObject,Codable{
    /// 资源id，续费和升降配时必传，其他非必传
    var resourceId:String?
    /// 资源的类型，取值vm,disk,ip等，具体取值请在对接时联系我们
    /// Required:true
    var serviceCode:String
    /// 资源所在区域，取值cn-north-1,cn-east-1,cn-east-2,cn-south-1
    /// Required:true
    var region:String
    /// 计费类型，1:按配置 2:按用量 3:包年包月
    /// Required:true
    var billingType:Int
    /// 资源配置项列表
    var formula:[OrderResourceFormulaVo?]?
    /// 资源数量
    /// Required:true
    var count:Int
    /// 资源使用时长
    /// Required:true
    var timeSpan:Int
    /// 资源使用时长类型，1:小时 2:天 3:月 4:年
    /// Required:true
    var timeUnit:Int
    /// 资源网络类型，0:无 1:non-BGP 2:BGP，当资源类型是ip时，则需要填写1或者2，其他资源类型填写0
    /// Required:true
    var networkOperator:Int
    /// 用户pin，如有优惠用户，则填写优惠用户的pin，否则不用填写
    var pin:String?
    /// 开始时间，格式：yyyy-MM-dd HH:mm:ss
    /// Required:true
    var startTime:String
    /// 结束时间，格式：yyyy-MM-dd HH:mm:ss
    var endTime:String?



    public  init(serviceCode:String,region:String,billingType:Int,count:Int,timeSpan:Int,timeUnit:Int,networkOperator:Int,startTime:String){
             self.serviceCode = serviceCode
             self.region = region
             self.billingType = billingType
             self.count = count
             self.timeSpan = timeSpan
             self.timeUnit = timeUnit
             self.networkOperator = networkOperator
             self.startTime = startTime
    }

    enum OrderPriceProtocolVoCodingKeys: String, CodingKey {
        case resourceId
        case serviceCode
        case region
        case billingType
        case formula
        case count
        case timeSpan
        case timeUnit
        case networkOperator
        case pin
        case startTime
        case endTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OrderPriceProtocolVoCodingKeys.self)
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
        self.region = try decoderContainer.decode(String.self, forKey: .region)
        self.billingType = try decoderContainer.decode(Int.self, forKey: .billingType)
        if decoderContainer.contains(.formula)
        {
            self.formula = try decoderContainer.decode([OrderResourceFormulaVo?]?.self, forKey: .formula)
        }
        self.count = try decoderContainer.decode(Int.self, forKey: .count)
        self.timeSpan = try decoderContainer.decode(Int.self, forKey: .timeSpan)
        self.timeUnit = try decoderContainer.decode(Int.self, forKey: .timeUnit)
        self.networkOperator = try decoderContainer.decode(Int.self, forKey: .networkOperator)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        self.startTime = try decoderContainer.decode(String.self, forKey: .startTime)
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
    }
}
public extension OrderPriceProtocolVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OrderPriceProtocolVoCodingKeys.self)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(billingType, forKey: .billingType)
         try encoderContainer.encode(formula, forKey: .formula)
         try encoderContainer.encode(count, forKey: .count)
         try encoderContainer.encode(timeSpan, forKey: .timeSpan)
         try encoderContainer.encode(timeUnit, forKey: .timeUnit)
         try encoderContainer.encode(networkOperator, forKey: .networkOperator)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
    }
}
