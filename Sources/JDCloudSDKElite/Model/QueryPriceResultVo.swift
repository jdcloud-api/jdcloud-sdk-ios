/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  queryPriceResultVo
@objc(QueryPriceResultVo)
public class QueryPriceResultVo:NSObject,Codable{
    /// 总金额，小数后2位精度
    var totalPrice:Double?
    /// 总金额，小数后4位精度
    var totalPriceScale4:Double?
    /// 折扣后总金额
    var discountedTotalPrice:Double?
    /// 折扣优惠金额
    var totalDiscount:Double?
    /// 订单原价
    var totalOriginalPrice:Double?
    /// 备注
    var remark:String?



    public override init(){
            super.init()
    }

    enum QueryPriceResultVoCodingKeys: String, CodingKey {
        case totalPrice
        case totalPriceScale4
        case discountedTotalPrice
        case totalDiscount
        case totalOriginalPrice
        case remark
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryPriceResultVoCodingKeys.self)
        if decoderContainer.contains(.totalPrice)
        {
            self.totalPrice = try decoderContainer.decode(Double?.self, forKey: .totalPrice)
        }
        if decoderContainer.contains(.totalPriceScale4)
        {
            self.totalPriceScale4 = try decoderContainer.decode(Double?.self, forKey: .totalPriceScale4)
        }
        if decoderContainer.contains(.discountedTotalPrice)
        {
            self.discountedTotalPrice = try decoderContainer.decode(Double?.self, forKey: .discountedTotalPrice)
        }
        if decoderContainer.contains(.totalDiscount)
        {
            self.totalDiscount = try decoderContainer.decode(Double?.self, forKey: .totalDiscount)
        }
        if decoderContainer.contains(.totalOriginalPrice)
        {
            self.totalOriginalPrice = try decoderContainer.decode(Double?.self, forKey: .totalOriginalPrice)
        }
        if decoderContainer.contains(.remark)
        {
            self.remark = try decoderContainer.decode(String?.self, forKey: .remark)
        }
    }
}
public extension QueryPriceResultVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryPriceResultVoCodingKeys.self)
         try encoderContainer.encode(totalPrice, forKey: .totalPrice)
         try encoderContainer.encode(totalPriceScale4, forKey: .totalPriceScale4)
         try encoderContainer.encode(discountedTotalPrice, forKey: .discountedTotalPrice)
         try encoderContainer.encode(totalDiscount, forKey: .totalDiscount)
         try encoderContainer.encode(totalOriginalPrice, forKey: .totalOriginalPrice)
         try encoderContainer.encode(remark, forKey: .remark)
    }
}
