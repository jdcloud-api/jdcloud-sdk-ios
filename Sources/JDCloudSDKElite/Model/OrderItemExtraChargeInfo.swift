/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  orderItemExtraChargeInfo
@objc(OrderItemExtraChargeInfo)
public class OrderItemExtraChargeInfo:NSObject,Codable{
    /// 购买用户pin
    var name:String?
    /// 单位
    var unit:String?
    /// 购买数量
    var buyNum:Int?
    /// 销售价格
    var sellingPrice:String?
    /// 结算价格
    var settlementPrice:String?



    public override init(){
            super.init()
    }

    enum OrderItemExtraChargeInfoCodingKeys: String, CodingKey {
        case name
        case unit
        case buyNum
        case sellingPrice
        case settlementPrice
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OrderItemExtraChargeInfoCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
        if decoderContainer.contains(.buyNum)
        {
            self.buyNum = try decoderContainer.decode(Int?.self, forKey: .buyNum)
        }
        if decoderContainer.contains(.sellingPrice)
        {
            self.sellingPrice = try decoderContainer.decode(String?.self, forKey: .sellingPrice)
        }
        if decoderContainer.contains(.settlementPrice)
        {
            self.settlementPrice = try decoderContainer.decode(String?.self, forKey: .settlementPrice)
        }
    }
}
public extension OrderItemExtraChargeInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OrderItemExtraChargeInfoCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(unit, forKey: .unit)
         try encoderContainer.encode(buyNum, forKey: .buyNum)
         try encoderContainer.encode(sellingPrice, forKey: .sellingPrice)
         try encoderContainer.encode(settlementPrice, forKey: .settlementPrice)
    }
}
