/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   jdx价格相关接口
   jdx价格相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

public class JdxQueryProductResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:JdxQueryProductResult?;

    enum JdxQueryProductResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: JdxQueryProductResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(JdxQueryProductResult?.self, forKey: .result) ?? nil
    }
}

public extension JdxQueryProductResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxQueryProductResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  输出商品接口
public class JdxQueryProductRequest:JdCloudRequest
{
    /// 页码（最小1）
    var pageNo:Int

    /// 每页记录数（最小10，最大100）
    var pageSize:Int


    public init(regionId: String,pageNo:Int,pageSize:Int){
        self.pageNo = pageNo
        self.pageSize = pageSize
        super.init(regionId: regionId)
    }


    enum JdxQueryProductRequestRequestCodingKeys: String, CodingKey {
        case pageNo
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxQueryProductRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNo, forKey: .pageNo)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

/// 输出商品接口 
public class JdxQueryProductResult:NSObject,JdCloudResult
{
    /// true为成功，false为失败
    var status:Bool?

    /// 描述信息
    var message:String?

    /// 查询数据结果
    var data:JdxProductVoListData?



    public override init(){
        super.init()
    }

    enum JdxQueryProductResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: JdxQueryProductResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(JdxProductVoListData?.self, forKey: .data)
        }
    }
}
public extension JdxQueryProductResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxQueryProductResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class ListSaleServiceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ListSaleServiceResult?;

    enum ListSaleServiceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListSaleServiceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ListSaleServiceResult?.self, forKey: .result) ?? nil
    }
}

public extension ListSaleServiceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListSaleServiceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据交付单号查询交付单信息
public class GetSaleServiceByDeliverNumberRequest:JdCloudRequest
{
    /// 交付单号
    var deliverNumber:String


    public init(regionId: String,deliverNumber:String){
        self.deliverNumber = deliverNumber
        super.init(regionId: regionId)
    }


    enum GetSaleServiceByDeliverNumberRequestRequestCodingKeys: String, CodingKey {
        case deliverNumber
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSaleServiceByDeliverNumberRequestRequestCodingKeys.self)
        try encoderContainer.encode(deliverNumber, forKey: .deliverNumber)

    }
}


///  分页查询交付单信息
public class ListSaleServiceRequest:JdCloudRequest
{
    /// 页码（最小1）
    var pageNo:Int

    /// 每页记录数（最小10，最大100）
    var pageSize:Int

    /// 交付单号
    var deliverNumber:String?

    /// 交付状态
    var deliverStatus:Int?

    /// 交付单创建起始时间，格式：yyyy-MM-dd HH:mm:ss
    var createDtStart:String?

    /// 交付单创建结束时间，格式：yyyy-MM-dd HH:mm:ss
    var createDtEnd:String?


    public init(regionId: String,pageNo:Int,pageSize:Int){
        self.pageNo = pageNo
        self.pageSize = pageSize
        super.init(regionId: regionId)
    }


    enum ListSaleServiceRequestRequestCodingKeys: String, CodingKey {
        case pageNo
        case pageSize
        case deliverNumber
        case deliverStatus
        case createDtStart
        case createDtEnd
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListSaleServiceRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNo, forKey: .pageNo)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(deliverNumber, forKey: .deliverNumber)
        try encoderContainer.encode(deliverStatus, forKey: .deliverStatus)
        try encoderContainer.encode(createDtStart, forKey: .createDtStart)
        try encoderContainer.encode(createDtEnd, forKey: .createDtEnd)

    }
}


///  确认交付
public class ConfirmSaleServiceDeliveryRequest:JdCloudRequest
{
    /// 交付信息
    var confirmDeliveryInfo:ConfirmDeliveryInfo


    public init(regionId: String,confirmDeliveryInfo:ConfirmDeliveryInfo){
        self.confirmDeliveryInfo = confirmDeliveryInfo
        super.init(regionId: regionId)
    }


    enum ConfirmSaleServiceDeliveryRequestRequestCodingKeys: String, CodingKey {
        case confirmDeliveryInfo
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ConfirmSaleServiceDeliveryRequestRequestCodingKeys.self)
        try encoderContainer.encode(confirmDeliveryInfo, forKey: .confirmDeliveryInfo)

    }
}

public class ConfirmSaleServiceDeliveryResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ConfirmSaleServiceDeliveryResult?;

    enum ConfirmSaleServiceDeliveryResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ConfirmSaleServiceDeliveryResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ConfirmSaleServiceDeliveryResult?.self, forKey: .result) ?? nil
    }
}

public extension ConfirmSaleServiceDeliveryResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ConfirmSaleServiceDeliveryResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 确认交付 
public class ConfirmSaleServiceDeliveryResult:NSObject,JdCloudResult
{
    /// true为成功，false为失败
    var status:Bool?

    /// 描述信息
    var message:String?



    public override init(){
        super.init()
    }

    enum ConfirmSaleServiceDeliveryResultCodingKeys: String, CodingKey {
        case status
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ConfirmSaleServiceDeliveryResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ConfirmSaleServiceDeliveryResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ConfirmSaleServiceDeliveryResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class GetSaleServiceByDeliverNumberResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetSaleServiceByDeliverNumberResult?;

    enum GetSaleServiceByDeliverNumberResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetSaleServiceByDeliverNumberResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetSaleServiceByDeliverNumberResult?.self, forKey: .result) ?? nil
    }
}

public extension GetSaleServiceByDeliverNumberResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSaleServiceByDeliverNumberResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据交付单号查询交付单信息 
public class GetSaleServiceByDeliverNumberResult:NSObject,JdCloudResult
{
    /// true为成功，false为失败
    var status:Bool?

    /// 描述信息
    var message:String?

    /// 查询数据结果
    var data:ProductServiceVo?



    public override init(){
        super.init()
    }

    enum GetSaleServiceByDeliverNumberResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetSaleServiceByDeliverNumberResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(ProductServiceVo?.self, forKey: .data)
        }
    }
}
public extension GetSaleServiceByDeliverNumberResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSaleServiceByDeliverNumberResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 分页查询交付单信息 
public class ListSaleServiceResult:NSObject,JdCloudResult
{
    /// true为成功，false为失败
    var status:Bool?

    /// 描述信息
    var message:String?

    /// 查询数据结果
    var data:ProductServiceVoListData?



    public override init(){
        super.init()
    }

    enum ListSaleServiceResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListSaleServiceResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(ProductServiceVoListData?.self, forKey: .data)
        }
    }
}
public extension ListSaleServiceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListSaleServiceResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  查询交付信息接口
public class JdxQueryDeliveryInfoRequest:JdCloudRequest
{
    /// 订单号
    var orderNumber:String


    public init(regionId: String,orderNumber:String){
        self.orderNumber = orderNumber
        super.init(regionId: regionId)
    }


    enum JdxQueryDeliveryInfoRequestRequestCodingKeys: String, CodingKey {
        case orderNumber
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxQueryDeliveryInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(orderNumber, forKey: .orderNumber)

    }
}

public class JdxQueryDeliveryInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:JdxQueryDeliveryInfoResult?;

    enum JdxQueryDeliveryInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: JdxQueryDeliveryInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(JdxQueryDeliveryInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension JdxQueryDeliveryInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxQueryDeliveryInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询交付信息接口 
public class JdxQueryDeliveryInfoResult:NSObject,JdCloudResult
{
    /// true为成功，false为失败
    var status:Bool?

    /// 描述信息
    var message:String?

    /// 查询数据结果
    var data:QueryDeliveryInfoResultVo?



    public override init(){
        super.init()
    }

    enum JdxQueryDeliveryInfoResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: JdxQueryDeliveryInfoResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(QueryDeliveryInfoResultVo?.self, forKey: .data)
        }
    }
}
public extension JdxQueryDeliveryInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxQueryDeliveryInfoResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 获取云存服务信息 
public class GetStoreServiceResult:NSObject,JdCloudResult
{
    /// true为成功，false为失败
    var status:Bool?

    /// 描述信息
    var message:String?

    /// 查询数据结果
    var data:StoreServiceVo?



    public override init(){
        super.init()
    }

    enum GetStoreServiceResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetStoreServiceResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(StoreServiceVo?.self, forKey: .data)
        }
    }
}
public extension GetStoreServiceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetStoreServiceResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  获取云存服务信息
public class GetStoreServiceRequest:JdCloudRequest
{
    /// 购买用户pin
    var buyerPin:String

    /// 业务数据，与下单时的业务数据一致
    var businessData:String

    /// 是否查询全部，如果传入false，则只查询当前时间有效的，否则查询所有的
    var queryAll:Bool?


    public init(regionId: String,buyerPin:String,businessData:String){
        self.buyerPin = buyerPin
        self.businessData = businessData
        super.init(regionId: regionId)
    }


    enum GetStoreServiceRequestRequestCodingKeys: String, CodingKey {
        case buyerPin
        case businessData
        case queryAll
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetStoreServiceRequestRequestCodingKeys.self)
        try encoderContainer.encode(buyerPin, forKey: .buyerPin)
        try encoderContainer.encode(businessData, forKey: .businessData)
        try encoderContainer.encode(queryAll, forKey: .queryAll)

    }
}

public class GetStoreServiceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetStoreServiceResult?;

    enum GetStoreServiceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetStoreServiceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetStoreServiceResult?.self, forKey: .result) ?? nil
    }
}

public extension GetStoreServiceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetStoreServiceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 上报订单 
public class JdxReportOrderResult:NSObject,JdCloudResult
{
    /// true为成功，false为失败
    var status:Bool?

    /// 描述信息
    var message:String?



    public override init(){
        super.init()
    }

    enum JdxReportOrderResultCodingKeys: String, CodingKey {
        case status
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: JdxReportOrderResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension JdxReportOrderResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxReportOrderResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 下单接口 
public class JdxCreateOrderResult:NSObject,JdCloudResult
{
    /// true为成功，false为失败
    var status:Bool?

    /// 描述信息
    var message:String?

    /// 下单后生成的订单号
    var data:CreateOrderResultVo?



    public override init(){
        super.init()
    }

    enum JdxCreateOrderResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: JdxCreateOrderResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(CreateOrderResultVo?.self, forKey: .data)
        }
    }
}
public extension JdxCreateOrderResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxCreateOrderResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class JdxReportOrderResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:JdxReportOrderResult?;

    enum JdxReportOrderResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: JdxReportOrderResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(JdxReportOrderResult?.self, forKey: .result) ?? nil
    }
}

public extension JdxReportOrderResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxReportOrderResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  上报订单
public class JdxReportOrderRequest:JdCloudRequest
{
    /// 上报订单信息
    var reportOrderInfo:ReportOrderInfo


    public init(regionId: String,reportOrderInfo:ReportOrderInfo){
        self.reportOrderInfo = reportOrderInfo
        super.init(regionId: regionId)
    }


    enum JdxReportOrderRequestRequestCodingKeys: String, CodingKey {
        case reportOrderInfo
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxReportOrderRequestRequestCodingKeys.self)
        try encoderContainer.encode(reportOrderInfo, forKey: .reportOrderInfo)

    }
}

public class JdxCreateOrderResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:JdxCreateOrderResult?;

    enum JdxCreateOrderResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: JdxCreateOrderResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(JdxCreateOrderResult?.self, forKey: .result) ?? nil
    }
}

public extension JdxCreateOrderResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxCreateOrderResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  下单接口
public class JdxCreateOrderRequest:JdCloudRequest
{
    /// 下单信息
    var createOrderInfo:CreateOrderInfo


    public init(regionId: String,createOrderInfo:CreateOrderInfo){
        self.createOrderInfo = createOrderInfo
        super.init(regionId: regionId)
    }


    enum JdxCreateOrderRequestRequestCodingKeys: String, CodingKey {
        case createOrderInfo
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxCreateOrderRequestRequestCodingKeys.self)
        try encoderContainer.encode(createOrderInfo, forKey: .createOrderInfo)

    }
}


///  查询价格
public class JdxQueryPriceRequest:JdCloudRequest
{
    /// 查询价格参数
    var queryPriceParam:QueryPriceParam


    public init(regionId: String,queryPriceParam:QueryPriceParam){
        self.queryPriceParam = queryPriceParam
        super.init(regionId: regionId)
    }


    enum JdxQueryPriceRequestRequestCodingKeys: String, CodingKey {
        case queryPriceParam
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxQueryPriceRequestRequestCodingKeys.self)
        try encoderContainer.encode(queryPriceParam, forKey: .queryPriceParam)

    }
}

public class JdxQueryPriceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:JdxQueryPriceResult?;

    enum JdxQueryPriceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: JdxQueryPriceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(JdxQueryPriceResult?.self, forKey: .result) ?? nil
    }
}

public extension JdxQueryPriceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxQueryPriceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询价格 
public class JdxQueryPriceResult:NSObject,JdCloudResult
{
    /// true为成功，false为失败
    var status:Bool?

    /// 描述信息
    var message:String?

    /// 查询数据结果
    var data:QueryPriceResultVo?



    public override init(){
        super.init()
    }

    enum JdxQueryPriceResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: JdxQueryPriceResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(QueryPriceResultVo?.self, forKey: .data)
        }
    }
}
public extension JdxQueryPriceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JdxQueryPriceResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}
