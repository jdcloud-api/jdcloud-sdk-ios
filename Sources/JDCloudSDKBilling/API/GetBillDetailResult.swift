/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD BILLING Services API
   用户中心消费管理查询API接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询消费记录详情
@objc(GetBillDetailResult)
public class GetBillDetailResult:NSObject,JdCloudResult
{
    /// BillId
    var billId:Double?

    /// Pin
    var pin:String?

    /// Site
    var site:Int?

    /// Region
    var region:String?

    /// AppCode
    var appCode:String?

    /// AppCodeName
    var appCodeName:String?

    /// ServiceCode
    var serviceCode:String?

    /// ServiceCodeName
    var serviceCodeName:String?

    /// ResourceId
    var resourceId:String?

    /// BillingType
    var billingType:Int?

    /// BillingTypeName
    var billingTypeName:String?

    /// Formula
    var formula:String?

    /// FormulaStr
    var formulaStr:String?

    /// StartTime
    var startTime:String?

    /// EndTime
    var endTime:String?

    /// CreateTime
    var createTime:String?

    /// BillFee
    var billFee:Double?

    /// BillFee2
    var billFee2:Double?

    /// DiscountFee
    var discountFee:Double?

    /// CouponId
    var couponId:String?

    /// CouponFee
    var couponFee:Double?

    /// ActualFee
    var actualFee:Double?

    /// CashCouponFee
    var cashCouponFee:Double?

    /// BalancePayFee
    var balancePayFee:Double?

    /// CashPayFee
    var cashPayFee:Double?

    /// ArrearFee
    var arrearFee:Double?

    /// PaySate
    var paySate:Int?

    /// SystemType
    var systemType:Int?

    /// ResourceName
    var resourceName:String?



    public override init(){
        super.init()
    }

    enum GetBillDetailResultCodingKeys: String, CodingKey {
        case billId
        case pin
        case site
        case region
        case appCode
        case appCodeName
        case serviceCode
        case serviceCodeName
        case resourceId
        case billingType
        case billingTypeName
        case formula
        case formulaStr
        case startTime
        case endTime
        case createTime
        case billFee
        case billFee2
        case discountFee
        case couponId
        case couponFee
        case actualFee
        case cashCouponFee
        case balancePayFee
        case cashPayFee
        case arrearFee
        case paySate
        case systemType
        case resourceName
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetBillDetailResultCodingKeys.self)
        if decoderContainer.contains(.billId)
        {
            self.billId = try decoderContainer.decode(Double?.self, forKey: .billId)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.site)
        {
            self.site = try decoderContainer.decode(Int?.self, forKey: .site)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.appCodeName)
        {
            self.appCodeName = try decoderContainer.decode(String?.self, forKey: .appCodeName)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.serviceCodeName)
        {
            self.serviceCodeName = try decoderContainer.decode(String?.self, forKey: .serviceCodeName)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(Int?.self, forKey: .billingType)
        }
        if decoderContainer.contains(.billingTypeName)
        {
            self.billingTypeName = try decoderContainer.decode(String?.self, forKey: .billingTypeName)
        }
        if decoderContainer.contains(.formula)
        {
            self.formula = try decoderContainer.decode(String?.self, forKey: .formula)
        }
        if decoderContainer.contains(.formulaStr)
        {
            self.formulaStr = try decoderContainer.decode(String?.self, forKey: .formulaStr)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.billFee)
        {
            self.billFee = try decoderContainer.decode(Double?.self, forKey: .billFee)
        }
        if decoderContainer.contains(.billFee2)
        {
            self.billFee2 = try decoderContainer.decode(Double?.self, forKey: .billFee2)
        }
        if decoderContainer.contains(.discountFee)
        {
            self.discountFee = try decoderContainer.decode(Double?.self, forKey: .discountFee)
        }
        if decoderContainer.contains(.couponId)
        {
            self.couponId = try decoderContainer.decode(String?.self, forKey: .couponId)
        }
        if decoderContainer.contains(.couponFee)
        {
            self.couponFee = try decoderContainer.decode(Double?.self, forKey: .couponFee)
        }
        if decoderContainer.contains(.actualFee)
        {
            self.actualFee = try decoderContainer.decode(Double?.self, forKey: .actualFee)
        }
        if decoderContainer.contains(.cashCouponFee)
        {
            self.cashCouponFee = try decoderContainer.decode(Double?.self, forKey: .cashCouponFee)
        }
        if decoderContainer.contains(.balancePayFee)
        {
            self.balancePayFee = try decoderContainer.decode(Double?.self, forKey: .balancePayFee)
        }
        if decoderContainer.contains(.cashPayFee)
        {
            self.cashPayFee = try decoderContainer.decode(Double?.self, forKey: .cashPayFee)
        }
        if decoderContainer.contains(.arrearFee)
        {
            self.arrearFee = try decoderContainer.decode(Double?.self, forKey: .arrearFee)
        }
        if decoderContainer.contains(.paySate)
        {
            self.paySate = try decoderContainer.decode(Int?.self, forKey: .paySate)
        }
        if decoderContainer.contains(.systemType)
        {
            self.systemType = try decoderContainer.decode(Int?.self, forKey: .systemType)
        }
        if decoderContainer.contains(.resourceName)
        {
            self.resourceName = try decoderContainer.decode(String?.self, forKey: .resourceName)
        }
    }
}
public extension GetBillDetailResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBillDetailResultCodingKeys.self)
        try encoderContainer.encode(billId, forKey: .billId)
        try encoderContainer.encode(pin, forKey: .pin)
        try encoderContainer.encode(site, forKey: .site)
        try encoderContainer.encode(region, forKey: .region)
        try encoderContainer.encode(appCode, forKey: .appCode)
        try encoderContainer.encode(appCodeName, forKey: .appCodeName)
        try encoderContainer.encode(serviceCode, forKey: .serviceCode)
        try encoderContainer.encode(serviceCodeName, forKey: .serviceCodeName)
        try encoderContainer.encode(resourceId, forKey: .resourceId)
        try encoderContainer.encode(billingType, forKey: .billingType)
        try encoderContainer.encode(billingTypeName, forKey: .billingTypeName)
        try encoderContainer.encode(formula, forKey: .formula)
        try encoderContainer.encode(formulaStr, forKey: .formulaStr)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(billFee, forKey: .billFee)
        try encoderContainer.encode(billFee2, forKey: .billFee2)
        try encoderContainer.encode(discountFee, forKey: .discountFee)
        try encoderContainer.encode(couponId, forKey: .couponId)
        try encoderContainer.encode(couponFee, forKey: .couponFee)
        try encoderContainer.encode(actualFee, forKey: .actualFee)
        try encoderContainer.encode(cashCouponFee, forKey: .cashCouponFee)
        try encoderContainer.encode(balancePayFee, forKey: .balancePayFee)
        try encoderContainer.encode(cashPayFee, forKey: .cashPayFee)
        try encoderContainer.encode(arrearFee, forKey: .arrearFee)
        try encoderContainer.encode(paySate, forKey: .paySate)
        try encoderContainer.encode(systemType, forKey: .systemType)
        try encoderContainer.encode(resourceName, forKey: .resourceName)
    }
}
