/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD BILLING Services API
   用户中心消费管理查询API接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询资源账单，消费记录中的费用信息
@objc(QueryBillStatisticsInfoResult)
public class QueryBillStatisticsInfoResult:NSObject,JdCloudResult
{
    /// 总金额
    var totalFee:Double?

    /// 现金支付金额
    var cashPayFee:Double?

    /// 优惠券支付金额
    var cashCouponPayFee:Double?

    /// 余额支付金额
    var balancePayFee:Double?

    /// 欠费金额
    var arrearFee:Double?

    /// 账单金额
    var billFee:Double?

    /// 折扣金额
    var discountFee:Double?



    public override init(){
        super.init()
    }

    enum QueryBillStatisticsInfoResultCodingKeys: String, CodingKey {
        case totalFee
        case cashPayFee
        case cashCouponPayFee
        case balancePayFee
        case arrearFee
        case billFee
        case discountFee
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryBillStatisticsInfoResultCodingKeys.self)
        if decoderContainer.contains(.totalFee)
        {
            self.totalFee = try decoderContainer.decode(Double?.self, forKey: .totalFee)
        }
        if decoderContainer.contains(.cashPayFee)
        {
            self.cashPayFee = try decoderContainer.decode(Double?.self, forKey: .cashPayFee)
        }
        if decoderContainer.contains(.cashCouponPayFee)
        {
            self.cashCouponPayFee = try decoderContainer.decode(Double?.self, forKey: .cashCouponPayFee)
        }
        if decoderContainer.contains(.balancePayFee)
        {
            self.balancePayFee = try decoderContainer.decode(Double?.self, forKey: .balancePayFee)
        }
        if decoderContainer.contains(.arrearFee)
        {
            self.arrearFee = try decoderContainer.decode(Double?.self, forKey: .arrearFee)
        }
        if decoderContainer.contains(.billFee)
        {
            self.billFee = try decoderContainer.decode(Double?.self, forKey: .billFee)
        }
        if decoderContainer.contains(.discountFee)
        {
            self.discountFee = try decoderContainer.decode(Double?.self, forKey: .discountFee)
        }
    }
}
public extension QueryBillStatisticsInfoResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryBillStatisticsInfoResultCodingKeys.self)
        try encoderContainer.encode(totalFee, forKey: .totalFee)
        try encoderContainer.encode(cashPayFee, forKey: .cashPayFee)
        try encoderContainer.encode(cashCouponPayFee, forKey: .cashCouponPayFee)
        try encoderContainer.encode(balancePayFee, forKey: .balancePayFee)
        try encoderContainer.encode(arrearFee, forKey: .arrearFee)
        try encoderContainer.encode(billFee, forKey: .billFee)
        try encoderContainer.encode(discountFee, forKey: .discountFee)
    }
}
