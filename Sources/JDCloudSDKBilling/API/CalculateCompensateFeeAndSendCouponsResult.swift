/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD BILLING PRICE Services API
   用户中心消费管理查询API接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 计算赔偿金额并发放代金券
@objc(CalculateCompensateFeeAndSendCouponsResult)
public class CalculateCompensateFeeAndSendCouponsResult:NSObject,JdCloudResult
{
    /// 用户pin
    var pin:String?

    /// 计算总价
    var totalCompensateFee:Double?

    /// 订单信息
    var resourceList:[OrderCompensateFeeVo?]?



    public override init(){
        super.init()
    }

    enum CalculateCompensateFeeAndSendCouponsResultCodingKeys: String, CodingKey {
        case pin
        case totalCompensateFee
        case resourceList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CalculateCompensateFeeAndSendCouponsResultCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.totalCompensateFee)
        {
            self.totalCompensateFee = try decoderContainer.decode(Double?.self, forKey: .totalCompensateFee)
        }
        if decoderContainer.contains(.resourceList)
        {
            self.resourceList = try decoderContainer.decode([OrderCompensateFeeVo?]?.self, forKey: .resourceList)
        }
    }
}
public extension CalculateCompensateFeeAndSendCouponsResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CalculateCompensateFeeAndSendCouponsResultCodingKeys.self)
        try encoderContainer.encode(pin, forKey: .pin)
        try encoderContainer.encode(totalCompensateFee, forKey: .totalCompensateFee)
        try encoderContainer.encode(resourceList, forKey: .resourceList)
    }
}
