/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD BILLING Services API
   用户中心消费管理查询API接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询消费总览
@objc(QueryConsumptionOverViewResult)
public class QueryConsumptionOverViewResult:NSObject,JdCloudResult
{
    /// Pin
    var pin:String?

    /// StartTime
    var startTime:String?

    /// EndTime
    var endTime:String?

    /// ActualFee
    var actualFee:Double?

    /// CashPayFee
    var cashPayFee:Double?

    /// BalancePayFee
    var balancePayFee:Double?

    /// CashCouponPayFee
    var cashCouponPayFee:Double?

    /// ArrearFee
    var arrearFee:Double?

    /// ConsumptionProductVoList
    var consumptionProductVoList:[ConsumptionProduct?]?

    /// ConsumptionList
    var consumptionList:ConsumptionList?



    public override init(){
        super.init()
    }

    enum QueryConsumptionOverViewResultCodingKeys: String, CodingKey {
        case pin
        case startTime
        case endTime
        case actualFee
        case cashPayFee
        case balancePayFee
        case cashCouponPayFee
        case arrearFee
        case consumptionProductVoList
        case consumptionList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryConsumptionOverViewResultCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.actualFee)
        {
            self.actualFee = try decoderContainer.decode(Double?.self, forKey: .actualFee)
        }
        if decoderContainer.contains(.cashPayFee)
        {
            self.cashPayFee = try decoderContainer.decode(Double?.self, forKey: .cashPayFee)
        }
        if decoderContainer.contains(.balancePayFee)
        {
            self.balancePayFee = try decoderContainer.decode(Double?.self, forKey: .balancePayFee)
        }
        if decoderContainer.contains(.cashCouponPayFee)
        {
            self.cashCouponPayFee = try decoderContainer.decode(Double?.self, forKey: .cashCouponPayFee)
        }
        if decoderContainer.contains(.arrearFee)
        {
            self.arrearFee = try decoderContainer.decode(Double?.self, forKey: .arrearFee)
        }
        if decoderContainer.contains(.consumptionProductVoList)
        {
            self.consumptionProductVoList = try decoderContainer.decode([ConsumptionProduct?]?.self, forKey: .consumptionProductVoList)
        }
        if decoderContainer.contains(.consumptionList)
        {
            self.consumptionList = try decoderContainer.decode(ConsumptionList?.self, forKey: .consumptionList)
        }
    }
}
public extension QueryConsumptionOverViewResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryConsumptionOverViewResultCodingKeys.self)
        try encoderContainer.encode(pin, forKey: .pin)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(actualFee, forKey: .actualFee)
        try encoderContainer.encode(cashPayFee, forKey: .cashPayFee)
        try encoderContainer.encode(balancePayFee, forKey: .balancePayFee)
        try encoderContainer.encode(cashCouponPayFee, forKey: .cashCouponPayFee)
        try encoderContainer.encode(arrearFee, forKey: .arrearFee)
        try encoderContainer.encode(consumptionProductVoList, forKey: .consumptionProductVoList)
        try encoderContainer.encode(consumptionList, forKey: .consumptionList)
    }
}
