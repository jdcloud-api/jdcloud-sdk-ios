/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD BILLING ResourceOrder Services API
   资源单管理API接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  删除资源
@objc(SendResourceOrderStatusMessageRequest)
public class SendResourceOrderStatusMessageRequest:JdCloudRequest
{
    /// 操作类型 4:删除
    var cmd:Int

    /// 资源单信息
    var orderList:[ResourceOrderStatusVo?]?

    /// 操作者类型 0：用户 1：管理员（运营）
    var operatorType:Int

    /// 操作人 用户:用户pin 管理员:操作人erp
    var operatorName:String

    /// 操作时间
    var operateTime:String?


    public init(regionId: String,cmd:Int,operatorType:Int,operatorName:String){
        self.cmd = cmd
        self.operatorType = operatorType
        self.operatorName = operatorName
        super.init(regionId: regionId)
    }


    enum SendResourceOrderStatusMessageRequestRequestCodingKeys: String, CodingKey {
        case cmd
        case orderList
        case operatorType
        case operatorName
        case operateTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SendResourceOrderStatusMessageRequestRequestCodingKeys.self)
        try encoderContainer.encode(cmd, forKey: .cmd)
        try encoderContainer.encode(orderList, forKey: .orderList)
        try encoderContainer.encode(operatorType, forKey: .operatorType)
        try encoderContainer.encode(operatorName, forKey: .operatorName)
        try encoderContainer.encode(operateTime, forKey: .operateTime)

    }
}
