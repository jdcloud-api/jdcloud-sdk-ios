/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  consumeBillQueryResultItem
@objc(ConsumeBillQueryResultItem)
public class ConsumeBillQueryResultItem:NSObject,Codable{
    /// 账单id
    var billId:Double?
    /// 用户pin
    var pin:String?
    /// appCode
    var appCode:String?
    /// appCodeName
    var appCodeName:String?
    /// serviceCode
    var serviceCode:String?
    /// serviceCodeName
    var serviceCodeName:String?
    /// 资源id
    var resourceId:String?
    /// 计费类型
    var billingType:Int?
    /// 计费类型描述
    var billingTypeName:String?
    /// 账单开始时间
    var billStart:String?
    /// 账单结束时间
    var billEnd:String?
    /// 结算时间
    var settleTime:String?
    /// 账单日期
    var billTime:String?
    /// 账单金额
    var billFee:Double?
    /// 账单总额
    var totalFee:Double?
    /// 现金支付金额
    var cashPayFee:Double?
    /// 代金券支付金额
    var cashCouponPayFee:Double?
    /// 余额支付金额
    var balancePayFee:Double?
    /// 折扣金额
    var discountFee:Double?
    /// 欠费金额
    var arrearFee:Double?
    /// 支付状态
    var payState:Int?
    /// 创建时间
    var createTime:String?
    /// 新老计费标识（1:老计费   2：新计费）
    var systemType:Int?
    /// 区域
    var region:String?
    /// 规格
    var formula:String?
    /// 规格
    var formulaStr:String?



    public override init(){
            super.init()
    }

    enum ConsumeBillQueryResultItemCodingKeys: String, CodingKey {
        case billId
        case pin
        case appCode
        case appCodeName
        case serviceCode
        case serviceCodeName
        case resourceId
        case billingType
        case billingTypeName
        case billStart
        case billEnd
        case settleTime
        case billTime
        case billFee
        case totalFee
        case cashPayFee
        case cashCouponPayFee
        case balancePayFee
        case discountFee
        case arrearFee
        case payState
        case createTime
        case systemType
        case region
        case formula
        case formulaStr
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ConsumeBillQueryResultItemCodingKeys.self)
        if decoderContainer.contains(.billId)
        {
            self.billId = try decoderContainer.decode(Double?.self, forKey: .billId)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.appCodeName)
        {
            self.appCodeName = try decoderContainer.decode(String?.self, forKey: .appCodeName)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.serviceCodeName)
        {
            self.serviceCodeName = try decoderContainer.decode(String?.self, forKey: .serviceCodeName)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(Int?.self, forKey: .billingType)
        }
        if decoderContainer.contains(.billingTypeName)
        {
            self.billingTypeName = try decoderContainer.decode(String?.self, forKey: .billingTypeName)
        }
        if decoderContainer.contains(.billStart)
        {
            self.billStart = try decoderContainer.decode(String?.self, forKey: .billStart)
        }
        if decoderContainer.contains(.billEnd)
        {
            self.billEnd = try decoderContainer.decode(String?.self, forKey: .billEnd)
        }
        if decoderContainer.contains(.settleTime)
        {
            self.settleTime = try decoderContainer.decode(String?.self, forKey: .settleTime)
        }
        if decoderContainer.contains(.billTime)
        {
            self.billTime = try decoderContainer.decode(String?.self, forKey: .billTime)
        }
        if decoderContainer.contains(.billFee)
        {
            self.billFee = try decoderContainer.decode(Double?.self, forKey: .billFee)
        }
        if decoderContainer.contains(.totalFee)
        {
            self.totalFee = try decoderContainer.decode(Double?.self, forKey: .totalFee)
        }
        if decoderContainer.contains(.cashPayFee)
        {
            self.cashPayFee = try decoderContainer.decode(Double?.self, forKey: .cashPayFee)
        }
        if decoderContainer.contains(.cashCouponPayFee)
        {
            self.cashCouponPayFee = try decoderContainer.decode(Double?.self, forKey: .cashCouponPayFee)
        }
        if decoderContainer.contains(.balancePayFee)
        {
            self.balancePayFee = try decoderContainer.decode(Double?.self, forKey: .balancePayFee)
        }
        if decoderContainer.contains(.discountFee)
        {
            self.discountFee = try decoderContainer.decode(Double?.self, forKey: .discountFee)
        }
        if decoderContainer.contains(.arrearFee)
        {
            self.arrearFee = try decoderContainer.decode(Double?.self, forKey: .arrearFee)
        }
        if decoderContainer.contains(.payState)
        {
            self.payState = try decoderContainer.decode(Int?.self, forKey: .payState)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.systemType)
        {
            self.systemType = try decoderContainer.decode(Int?.self, forKey: .systemType)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.formula)
        {
            self.formula = try decoderContainer.decode(String?.self, forKey: .formula)
        }
        if decoderContainer.contains(.formulaStr)
        {
            self.formulaStr = try decoderContainer.decode(String?.self, forKey: .formulaStr)
        }
    }
}
public extension ConsumeBillQueryResultItem{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ConsumeBillQueryResultItemCodingKeys.self)
         try encoderContainer.encode(billId, forKey: .billId)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(appCodeName, forKey: .appCodeName)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(serviceCodeName, forKey: .serviceCodeName)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(billingType, forKey: .billingType)
         try encoderContainer.encode(billingTypeName, forKey: .billingTypeName)
         try encoderContainer.encode(billStart, forKey: .billStart)
         try encoderContainer.encode(billEnd, forKey: .billEnd)
         try encoderContainer.encode(settleTime, forKey: .settleTime)
         try encoderContainer.encode(billTime, forKey: .billTime)
         try encoderContainer.encode(billFee, forKey: .billFee)
         try encoderContainer.encode(totalFee, forKey: .totalFee)
         try encoderContainer.encode(cashPayFee, forKey: .cashPayFee)
         try encoderContainer.encode(cashCouponPayFee, forKey: .cashCouponPayFee)
         try encoderContainer.encode(balancePayFee, forKey: .balancePayFee)
         try encoderContainer.encode(discountFee, forKey: .discountFee)
         try encoderContainer.encode(arrearFee, forKey: .arrearFee)
         try encoderContainer.encode(payState, forKey: .payState)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(systemType, forKey: .systemType)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(formula, forKey: .formula)
         try encoderContainer.encode(formulaStr, forKey: .formulaStr)
    }
}
