/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  consumeRecord
@objc(ConsumeRecord)
public class ConsumeRecord:NSObject,Codable{
    /// 消费记录数据库唯一id
    var id:Double?
    /// 消费记录id
    var billingRecordId:Int?
    /// appCode
    var appCode:String?
    /// serviceCode
    var serviceCode:String?
    /// 区域
    var region:String?
    /// 资源id
    var resourceId:String?
    /// 用户pin
    var pin:String?
    /// 规格
    var formula:String?
    /// 计费类型
    var billingType:Int?
    /// 价格快照
    var priceSnapShot:String?
    /// 开始时间
    var startTime:String?
    /// 结束时间
    var endTime:String?
    /// 创建日期
    var createTime:String?
    /// 账单金额
    var billFee:Double?
    /// 账单金额保留小数点后2位
    var billFee2:Double?
    /// 折扣金额
    var discountFee:Double?
    /// 优惠券id
    var couponId:String?
    /// 优惠金额
    var couponFee:Double?
    /// 交易单号
    var transactionNo:String?
    /// null
    var isBillGenerated:Int?
    /// 子账单id
    var subBillId:Double?
    /// 退款单号
    var refundNo:String?



    public override init(){
            super.init()
    }

    enum ConsumeRecordCodingKeys: String, CodingKey {
        case id
        case billingRecordId
        case appCode
        case serviceCode
        case region
        case resourceId
        case pin
        case formula
        case billingType
        case priceSnapShot
        case startTime
        case endTime
        case createTime
        case billFee
        case billFee2
        case discountFee
        case couponId
        case couponFee
        case transactionNo
        case isBillGenerated
        case subBillId
        case refundNo
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ConsumeRecordCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Double?.self, forKey: .id)
        }
        if decoderContainer.contains(.billingRecordId)
        {
            self.billingRecordId = try decoderContainer.decode(Int?.self, forKey: .billingRecordId)
        }
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.formula)
        {
            self.formula = try decoderContainer.decode(String?.self, forKey: .formula)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(Int?.self, forKey: .billingType)
        }
        if decoderContainer.contains(.priceSnapShot)
        {
            self.priceSnapShot = try decoderContainer.decode(String?.self, forKey: .priceSnapShot)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.billFee)
        {
            self.billFee = try decoderContainer.decode(Double?.self, forKey: .billFee)
        }
        if decoderContainer.contains(.billFee2)
        {
            self.billFee2 = try decoderContainer.decode(Double?.self, forKey: .billFee2)
        }
        if decoderContainer.contains(.discountFee)
        {
            self.discountFee = try decoderContainer.decode(Double?.self, forKey: .discountFee)
        }
        if decoderContainer.contains(.couponId)
        {
            self.couponId = try decoderContainer.decode(String?.self, forKey: .couponId)
        }
        if decoderContainer.contains(.couponFee)
        {
            self.couponFee = try decoderContainer.decode(Double?.self, forKey: .couponFee)
        }
        if decoderContainer.contains(.transactionNo)
        {
            self.transactionNo = try decoderContainer.decode(String?.self, forKey: .transactionNo)
        }
        if decoderContainer.contains(.isBillGenerated)
        {
            self.isBillGenerated = try decoderContainer.decode(Int?.self, forKey: .isBillGenerated)
        }
        if decoderContainer.contains(.subBillId)
        {
            self.subBillId = try decoderContainer.decode(Double?.self, forKey: .subBillId)
        }
        if decoderContainer.contains(.refundNo)
        {
            self.refundNo = try decoderContainer.decode(String?.self, forKey: .refundNo)
        }
    }
}
public extension ConsumeRecord{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ConsumeRecordCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(billingRecordId, forKey: .billingRecordId)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(formula, forKey: .formula)
         try encoderContainer.encode(billingType, forKey: .billingType)
         try encoderContainer.encode(priceSnapShot, forKey: .priceSnapShot)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(billFee, forKey: .billFee)
         try encoderContainer.encode(billFee2, forKey: .billFee2)
         try encoderContainer.encode(discountFee, forKey: .discountFee)
         try encoderContainer.encode(couponId, forKey: .couponId)
         try encoderContainer.encode(couponFee, forKey: .couponFee)
         try encoderContainer.encode(transactionNo, forKey: .transactionNo)
         try encoderContainer.encode(isBillGenerated, forKey: .isBillGenerated)
         try encoderContainer.encode(subBillId, forKey: .subBillId)
         try encoderContainer.encode(refundNo, forKey: .refundNo)
    }
}
