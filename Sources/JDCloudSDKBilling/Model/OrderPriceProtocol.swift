/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  orderPriceProtocol
@objc(OrderPriceProtocol)
public class OrderPriceProtocol:NSObject,Codable{
    /// 资源id
    var resourceId:String?
    /// 业务线
    var appCode:String?
    /// 产品线
    var serviceCode:String?
    /// 站点信息 0：主站  其他：专有云
    var site:Int?
    /// 地域
    var region:String?
    /// 计费类型 1:按配置 2:按用量 3:包年包月
    var billingType:Int?
    /// 时长
    var timeSpan:Int?
    /// 时长类型 0:无(非包年包月) 1:小时 2:天 3:月 4:年
    var timeUnit:Int?
    /// 网络类型 0:non 1:非BGP  2:BGP
    var networkOperator:Int?
    /// 计算公式（配置细项）
    var formula:[Formula?]?
    /// 配置细项
    var formulaStr:String?
    /// 用户pin
    var pin:String?
    /// 具体商品数量，默认为1
    var count:Int?
    /// 订单开始时间
    var startTime:String?
    /// 自然单列表
    var taskId:String?
    /// 交易单模块sourceId
    var sourceId:String?



    public override init(){
            super.init()
    }

    enum OrderPriceProtocolCodingKeys: String, CodingKey {
        case resourceId
        case appCode
        case serviceCode
        case site
        case region
        case billingType
        case timeSpan
        case timeUnit
        case networkOperator
        case formula
        case formulaStr
        case pin
        case count
        case startTime
        case taskId
        case sourceId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OrderPriceProtocolCodingKeys.self)
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.site)
        {
            self.site = try decoderContainer.decode(Int?.self, forKey: .site)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(Int?.self, forKey: .billingType)
        }
        if decoderContainer.contains(.timeSpan)
        {
            self.timeSpan = try decoderContainer.decode(Int?.self, forKey: .timeSpan)
        }
        if decoderContainer.contains(.timeUnit)
        {
            self.timeUnit = try decoderContainer.decode(Int?.self, forKey: .timeUnit)
        }
        if decoderContainer.contains(.networkOperator)
        {
            self.networkOperator = try decoderContainer.decode(Int?.self, forKey: .networkOperator)
        }
        if decoderContainer.contains(.formula)
        {
            self.formula = try decoderContainer.decode([Formula?]?.self, forKey: .formula)
        }
        if decoderContainer.contains(.formulaStr)
        {
            self.formulaStr = try decoderContainer.decode(String?.self, forKey: .formulaStr)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.count)
        {
            self.count = try decoderContainer.decode(Int?.self, forKey: .count)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.taskId)
        {
            self.taskId = try decoderContainer.decode(String?.self, forKey: .taskId)
        }
        if decoderContainer.contains(.sourceId)
        {
            self.sourceId = try decoderContainer.decode(String?.self, forKey: .sourceId)
        }
    }
}
public extension OrderPriceProtocol{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OrderPriceProtocolCodingKeys.self)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(site, forKey: .site)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(billingType, forKey: .billingType)
         try encoderContainer.encode(timeSpan, forKey: .timeSpan)
         try encoderContainer.encode(timeUnit, forKey: .timeUnit)
         try encoderContainer.encode(networkOperator, forKey: .networkOperator)
         try encoderContainer.encode(formula, forKey: .formula)
         try encoderContainer.encode(formulaStr, forKey: .formulaStr)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(count, forKey: .count)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(taskId, forKey: .taskId)
         try encoderContainer.encode(sourceId, forKey: .sourceId)
    }
}
