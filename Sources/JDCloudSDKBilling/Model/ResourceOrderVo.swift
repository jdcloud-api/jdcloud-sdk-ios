/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  resourceOrderVo
@objc(ResourceOrderVo)
public class ResourceOrderVo:NSObject,Codable{
    /// 主键id
    var id:Int?
    /// 交易单唯一标识
    var transactionNo:String?
    /// 资源id
    var resourceId:String?
    /// 计费类型 1:按配置 2:按用量 3:包年包月 4:一次性
    var billingType:Int?
    /// 时长类型 1:小时 2:天 3:月 4:年
    var timeUnit:Int?
    /// 时长字段，与timeUnit字段构成具体时长
    var timeSpan:Int?
    /// 资源状态 1:正常 2:停服 3:删除
    var status:Int?
    /// 计费状态 0:停止计费 1:计费中
    var billingStatus:Int?
    /// 网络类型0:无 1: non-BGP, 2: BGP
    var networkOperator:Int?
    /// 用户pin
    var pin:String?
    /// 应用码
    var appCode:String?
    /// 服务码
    var serviceCode:String?
    /// 站点标识0:中国 1:国际
    var site:Int?
    /// 资源区域
    var region:String?
    /// 配置信息
    var formula:[Formula?]?
    /// 否为试用资源 0:非试用 1:试用
    var isOnTrial:Int?
    /// 开始时间
    var startTime:String?
    /// 结束时间
    var endTime:String?
    /// 创建时间
    var createTime:String?
    /// 支付时间
    var payTime:String?
    /// formula转换成字符串
    var formulaStr:String?
    /// billingType兼容交易系统字段
    var chargeMode:Int?
    /// timeSpan兼容交易系统字段
    var chargeDuration:Int?
    /// timeUnit兼容交易系统字段
    var chargeUnit:Int?
    /// 欠费过期状态
    var aeStatus:Int?
    /// 欠费、过期资源释放时间
    var releasingTime:String?
    /// 交易单模块sourceId 计费不关心
    var sourceId:String?
    /// 计费开始时间 续费时本次续费周期开始时间
    var billingStartTime:String?
    /// 最新价格map
    var priceMap:PriceMap?
    /// 价格快照
    var priceSnapshot:String?
    /// 订单折扣前总价
    var price:Double?
    /// 折扣后订单价格
    var discountedPrice:Double?
    /// 即将到期天数
    var expiringDays:Int?
    /// 计费类型描述 例如:按配置、包年包月
    var billingCategoryDescription:String?
    /// 计费详情描述 例如:按配置、包年包月（一年）
    var descriptionValue:String?
    /// refundNo
    var refundNo:String?
    /// 计费类型单号
    var billingTypeName:String?
    /// 促销明细
    var favorableInfo:String?
    /// 资源名
    var resourceName:String?
    /// 变配明细（1-升配，2-降配，3-调整配置,4-续费,5-续费升配,6-续费降配,7-配置转包年包月）
    var processType:Int?
    /// 资源申请人
    var applicant:String?
    /// 计费模式  1.停服停止计费  2.关机停止计费
    var billingMode:Int?
    /// 启服、停服、停止计费时间
    var operateTime:String?



    public override init(){
            super.init()
    }

    enum ResourceOrderVoCodingKeys: String, CodingKey {
        case id
        case transactionNo
        case resourceId
        case billingType
        case timeUnit
        case timeSpan
        case status
        case billingStatus
        case networkOperator
        case pin
        case appCode
        case serviceCode
        case site
        case region
        case formula
        case isOnTrial
        case startTime
        case endTime
        case createTime
        case payTime
        case formulaStr
        case chargeMode
        case chargeDuration
        case chargeUnit
        case aeStatus
        case releasingTime
        case sourceId
        case billingStartTime
        case priceMap
        case priceSnapshot
        case price
        case discountedPrice
        case expiringDays
        case billingCategoryDescription
        case descriptionValue = "description"
        case refundNo
        case billingTypeName
        case favorableInfo
        case resourceName
        case processType
        case applicant
        case billingMode
        case operateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResourceOrderVoCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.transactionNo)
        {
            self.transactionNo = try decoderContainer.decode(String?.self, forKey: .transactionNo)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(Int?.self, forKey: .billingType)
        }
        if decoderContainer.contains(.timeUnit)
        {
            self.timeUnit = try decoderContainer.decode(Int?.self, forKey: .timeUnit)
        }
        if decoderContainer.contains(.timeSpan)
        {
            self.timeSpan = try decoderContainer.decode(Int?.self, forKey: .timeSpan)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.billingStatus)
        {
            self.billingStatus = try decoderContainer.decode(Int?.self, forKey: .billingStatus)
        }
        if decoderContainer.contains(.networkOperator)
        {
            self.networkOperator = try decoderContainer.decode(Int?.self, forKey: .networkOperator)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.site)
        {
            self.site = try decoderContainer.decode(Int?.self, forKey: .site)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.formula)
        {
            self.formula = try decoderContainer.decode([Formula?]?.self, forKey: .formula)
        }
        if decoderContainer.contains(.isOnTrial)
        {
            self.isOnTrial = try decoderContainer.decode(Int?.self, forKey: .isOnTrial)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.payTime)
        {
            self.payTime = try decoderContainer.decode(String?.self, forKey: .payTime)
        }
        if decoderContainer.contains(.formulaStr)
        {
            self.formulaStr = try decoderContainer.decode(String?.self, forKey: .formulaStr)
        }
        if decoderContainer.contains(.chargeMode)
        {
            self.chargeMode = try decoderContainer.decode(Int?.self, forKey: .chargeMode)
        }
        if decoderContainer.contains(.chargeDuration)
        {
            self.chargeDuration = try decoderContainer.decode(Int?.self, forKey: .chargeDuration)
        }
        if decoderContainer.contains(.chargeUnit)
        {
            self.chargeUnit = try decoderContainer.decode(Int?.self, forKey: .chargeUnit)
        }
        if decoderContainer.contains(.aeStatus)
        {
            self.aeStatus = try decoderContainer.decode(Int?.self, forKey: .aeStatus)
        }
        if decoderContainer.contains(.releasingTime)
        {
            self.releasingTime = try decoderContainer.decode(String?.self, forKey: .releasingTime)
        }
        if decoderContainer.contains(.sourceId)
        {
            self.sourceId = try decoderContainer.decode(String?.self, forKey: .sourceId)
        }
        if decoderContainer.contains(.billingStartTime)
        {
            self.billingStartTime = try decoderContainer.decode(String?.self, forKey: .billingStartTime)
        }
        if decoderContainer.contains(.priceMap)
        {
            self.priceMap = try decoderContainer.decode(PriceMap?.self, forKey: .priceMap)
        }
        if decoderContainer.contains(.priceSnapshot)
        {
            self.priceSnapshot = try decoderContainer.decode(String?.self, forKey: .priceSnapshot)
        }
        if decoderContainer.contains(.price)
        {
            self.price = try decoderContainer.decode(Double?.self, forKey: .price)
        }
        if decoderContainer.contains(.discountedPrice)
        {
            self.discountedPrice = try decoderContainer.decode(Double?.self, forKey: .discountedPrice)
        }
        if decoderContainer.contains(.expiringDays)
        {
            self.expiringDays = try decoderContainer.decode(Int?.self, forKey: .expiringDays)
        }
        if decoderContainer.contains(.billingCategoryDescription)
        {
            self.billingCategoryDescription = try decoderContainer.decode(String?.self, forKey: .billingCategoryDescription)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.refundNo)
        {
            self.refundNo = try decoderContainer.decode(String?.self, forKey: .refundNo)
        }
        if decoderContainer.contains(.billingTypeName)
        {
            self.billingTypeName = try decoderContainer.decode(String?.self, forKey: .billingTypeName)
        }
        if decoderContainer.contains(.favorableInfo)
        {
            self.favorableInfo = try decoderContainer.decode(String?.self, forKey: .favorableInfo)
        }
        if decoderContainer.contains(.resourceName)
        {
            self.resourceName = try decoderContainer.decode(String?.self, forKey: .resourceName)
        }
        if decoderContainer.contains(.processType)
        {
            self.processType = try decoderContainer.decode(Int?.self, forKey: .processType)
        }
        if decoderContainer.contains(.applicant)
        {
            self.applicant = try decoderContainer.decode(String?.self, forKey: .applicant)
        }
        if decoderContainer.contains(.billingMode)
        {
            self.billingMode = try decoderContainer.decode(Int?.self, forKey: .billingMode)
        }
        if decoderContainer.contains(.operateTime)
        {
            self.operateTime = try decoderContainer.decode(String?.self, forKey: .operateTime)
        }
    }
}
public extension ResourceOrderVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResourceOrderVoCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(transactionNo, forKey: .transactionNo)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(billingType, forKey: .billingType)
         try encoderContainer.encode(timeUnit, forKey: .timeUnit)
         try encoderContainer.encode(timeSpan, forKey: .timeSpan)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(billingStatus, forKey: .billingStatus)
         try encoderContainer.encode(networkOperator, forKey: .networkOperator)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(site, forKey: .site)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(formula, forKey: .formula)
         try encoderContainer.encode(isOnTrial, forKey: .isOnTrial)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(payTime, forKey: .payTime)
         try encoderContainer.encode(formulaStr, forKey: .formulaStr)
         try encoderContainer.encode(chargeMode, forKey: .chargeMode)
         try encoderContainer.encode(chargeDuration, forKey: .chargeDuration)
         try encoderContainer.encode(chargeUnit, forKey: .chargeUnit)
         try encoderContainer.encode(aeStatus, forKey: .aeStatus)
         try encoderContainer.encode(releasingTime, forKey: .releasingTime)
         try encoderContainer.encode(sourceId, forKey: .sourceId)
         try encoderContainer.encode(billingStartTime, forKey: .billingStartTime)
         try encoderContainer.encode(priceMap, forKey: .priceMap)
         try encoderContainer.encode(priceSnapshot, forKey: .priceSnapshot)
         try encoderContainer.encode(price, forKey: .price)
         try encoderContainer.encode(discountedPrice, forKey: .discountedPrice)
         try encoderContainer.encode(expiringDays, forKey: .expiringDays)
         try encoderContainer.encode(billingCategoryDescription, forKey: .billingCategoryDescription)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(refundNo, forKey: .refundNo)
         try encoderContainer.encode(billingTypeName, forKey: .billingTypeName)
         try encoderContainer.encode(favorableInfo, forKey: .favorableInfo)
         try encoderContainer.encode(resourceName, forKey: .resourceName)
         try encoderContainer.encode(processType, forKey: .processType)
         try encoderContainer.encode(applicant, forKey: .applicant)
         try encoderContainer.encode(billingMode, forKey: .billingMode)
         try encoderContainer.encode(operateTime, forKey: .operateTime)
    }
}
