/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  resourceOrderStatusVo
@objc(ResourceOrderStatusVo)
public class ResourceOrderStatusVo:NSObject,Codable{
    /// 资源id
    /// Required:true
    var resourceId:String
    /// 用户pin
    /// Required:true
    var pin:String
    /// 资源状态 1:正常 2:停服 3:删除
    var status:Int?
    /// 计费状态 0:停止计费 1:计费中
    var billingStatus:Int?
    /// 计费类型 1:按配置 2:按用量 3:包年包月
    var billingType:Int?
    /// 结束时间
    var endTime:String?
    /// billingType兼容交易系统字段
    var chargeMode:Int?
    /// timeSpan兼容交易系统字段
    var chargeDuration:Int?
    /// timeUnit兼容交易系统字段
    var chargeUnit:Int?
    /// 站点信息 0:中国 1:国际  10:专有云
    var site:Int?
    /// 操作时间
    var operateTime:String?



    public  init(resourceId:String,pin:String){
             self.resourceId = resourceId
             self.pin = pin
    }

    enum ResourceOrderStatusVoCodingKeys: String, CodingKey {
        case resourceId
        case pin
        case status
        case billingStatus
        case billingType
        case endTime
        case chargeMode
        case chargeDuration
        case chargeUnit
        case site
        case operateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResourceOrderStatusVoCodingKeys.self)
        self.resourceId = try decoderContainer.decode(String.self, forKey: .resourceId)
        self.pin = try decoderContainer.decode(String.self, forKey: .pin)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.billingStatus)
        {
            self.billingStatus = try decoderContainer.decode(Int?.self, forKey: .billingStatus)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(Int?.self, forKey: .billingType)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.chargeMode)
        {
            self.chargeMode = try decoderContainer.decode(Int?.self, forKey: .chargeMode)
        }
        if decoderContainer.contains(.chargeDuration)
        {
            self.chargeDuration = try decoderContainer.decode(Int?.self, forKey: .chargeDuration)
        }
        if decoderContainer.contains(.chargeUnit)
        {
            self.chargeUnit = try decoderContainer.decode(Int?.self, forKey: .chargeUnit)
        }
        if decoderContainer.contains(.site)
        {
            self.site = try decoderContainer.decode(Int?.self, forKey: .site)
        }
        if decoderContainer.contains(.operateTime)
        {
            self.operateTime = try decoderContainer.decode(String?.self, forKey: .operateTime)
        }
    }
}
public extension ResourceOrderStatusVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResourceOrderStatusVoCodingKeys.self)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(billingStatus, forKey: .billingStatus)
         try encoderContainer.encode(billingType, forKey: .billingType)
         try encoderContainer.encode(endTime, forKey: .endTime)
         try encoderContainer.encode(chargeMode, forKey: .chargeMode)
         try encoderContainer.encode(chargeDuration, forKey: .chargeDuration)
         try encoderContainer.encode(chargeUnit, forKey: .chargeUnit)
         try encoderContainer.encode(site, forKey: .site)
         try encoderContainer.encode(operateTime, forKey: .operateTime)
    }
}
