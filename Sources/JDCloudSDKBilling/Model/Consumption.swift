/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  consumption
@objc(Consumption)
public class Consumption:NSObject,Codable{
    /// 计费类型
    var billingType:Int?
    /// 支付类型
    var payType:Int?
    /// 优惠后金额
    var actualFee:Double?
    /// 现金支付
    var cashPayFee:Double?
    /// 余额支付
    var balancePayFee:Double?
    /// 优惠券支付金额
    var cashCouponPayFee:Double?
    /// 欠费金额
    var arrearFee:Double?



    public override init(){
            super.init()
    }

    enum ConsumptionCodingKeys: String, CodingKey {
        case billingType
        case payType
        case actualFee
        case cashPayFee
        case balancePayFee
        case cashCouponPayFee
        case arrearFee
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ConsumptionCodingKeys.self)
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(Int?.self, forKey: .billingType)
        }
        if decoderContainer.contains(.payType)
        {
            self.payType = try decoderContainer.decode(Int?.self, forKey: .payType)
        }
        if decoderContainer.contains(.actualFee)
        {
            self.actualFee = try decoderContainer.decode(Double?.self, forKey: .actualFee)
        }
        if decoderContainer.contains(.cashPayFee)
        {
            self.cashPayFee = try decoderContainer.decode(Double?.self, forKey: .cashPayFee)
        }
        if decoderContainer.contains(.balancePayFee)
        {
            self.balancePayFee = try decoderContainer.decode(Double?.self, forKey: .balancePayFee)
        }
        if decoderContainer.contains(.cashCouponPayFee)
        {
            self.cashCouponPayFee = try decoderContainer.decode(Double?.self, forKey: .cashCouponPayFee)
        }
        if decoderContainer.contains(.arrearFee)
        {
            self.arrearFee = try decoderContainer.decode(Double?.self, forKey: .arrearFee)
        }
    }
}
public extension Consumption{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ConsumptionCodingKeys.self)
         try encoderContainer.encode(billingType, forKey: .billingType)
         try encoderContainer.encode(payType, forKey: .payType)
         try encoderContainer.encode(actualFee, forKey: .actualFee)
         try encoderContainer.encode(cashPayFee, forKey: .cashPayFee)
         try encoderContainer.encode(balancePayFee, forKey: .balancePayFee)
         try encoderContainer.encode(cashCouponPayFee, forKey: .cashCouponPayFee)
         try encoderContainer.encode(arrearFee, forKey: .arrearFee)
    }
}
