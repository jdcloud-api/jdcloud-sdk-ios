/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  镜像仓库详情数据结构
@objc(Repository)
public class Repository:NSObject,Codable{
    /// 记录用户repository创建的时间。
    var createdAt:String?
    /// 记录用户repository更新的时间。
    var updatedAt:String?
    /// 注册表名称。
    var registryName:String?
    /// 镜像仓库名称。
    var repositoryName:String?
    /// 镜像仓库中的镜像总个数。
    var repositoryUri:String?
    /// 镜像仓库大小。
    var totalSpaceUsedMB:Double?
    /// 镜像仓库描述。
    var descriptionValue:String?



    public override init(){
            super.init()
    }

    enum RepositoryCodingKeys: String, CodingKey {
        case createdAt
        case updatedAt
        case registryName
        case repositoryName
        case repositoryUri
        case totalSpaceUsedMB
        case descriptionValue = "description"
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RepositoryCodingKeys.self)
        if decoderContainer.contains(.createdAt)
        {
            self.createdAt = try decoderContainer.decode(String?.self, forKey: .createdAt)
        }
        if decoderContainer.contains(.updatedAt)
        {
            self.updatedAt = try decoderContainer.decode(String?.self, forKey: .updatedAt)
        }
        if decoderContainer.contains(.registryName)
        {
            self.registryName = try decoderContainer.decode(String?.self, forKey: .registryName)
        }
        if decoderContainer.contains(.repositoryName)
        {
            self.repositoryName = try decoderContainer.decode(String?.self, forKey: .repositoryName)
        }
        if decoderContainer.contains(.repositoryUri)
        {
            self.repositoryUri = try decoderContainer.decode(String?.self, forKey: .repositoryUri)
        }
        if decoderContainer.contains(.totalSpaceUsedMB)
        {
            self.totalSpaceUsedMB = try decoderContainer.decode(Double?.self, forKey: .totalSpaceUsedMB)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
    }
}
public extension Repository{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RepositoryCodingKeys.self)
         try encoderContainer.encode(createdAt, forKey: .createdAt)
         try encoderContainer.encode(updatedAt, forKey: .updatedAt)
         try encoderContainer.encode(registryName, forKey: .registryName)
         try encoderContainer.encode(repositoryName, forKey: .repositoryName)
         try encoderContainer.encode(repositoryUri, forKey: .repositoryUri)
         try encoderContainer.encode(totalSpaceUsedMB, forKey: .totalSpaceUsedMB)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
    }
}
