/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Image
   容器镜像服务镜像相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
///  quota
public class Quota:NSObject,Codable{
    /// 资源类型 [registry/repository]
    var resourceType:String?
    /// 可用资源上限
    var limit:Int?
    /// 已用资源数量
    var used:Int?



    public override init(){
            super.init()
    }

    enum QuotaCodingKeys: String, CodingKey {
        case resourceType
        case limit
        case used
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QuotaCodingKeys.self)
        if decoderContainer.contains(.resourceType)
        {
            self.resourceType = try decoderContainer.decode(String?.self, forKey: .resourceType)
        }
        if decoderContainer.contains(.limit)
        {
            self.limit = try decoderContainer.decode(Int?.self, forKey: .limit)
        }
        if decoderContainer.contains(.used)
        {
            self.used = try decoderContainer.decode(Int?.self, forKey: .used)
        }
    }
}
public extension Quota{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QuotaCodingKeys.self)
         try encoderContainer.encode(resourceType, forKey: .resourceType)
         try encoderContainer.encode(limit, forKey: .limit)
         try encoderContainer.encode(used, forKey: .used)
    }
}
///  注册表详情数据结构
public class Registry:NSObject,Codable{
    /// 注册表名称，&lt;a href&#x3D;&quot;https://www.jdcloud.com/help/detail/3870/isCatalog/1&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var name:String?
    /// registry endporint url
    var registryUri:String?
    /// 注册表描述，&lt;a href&#x3D;&quot;https://www.jdcloud.com/help/detail/3870/isCatalog/1&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var descriptionValue:String?
    /// regsitry 使用的总存储空间 单位 (MB)
    var totalSpaceUsedMB:Double?
    /// registry 的创建时间
    var createTime:String?



    public override init(){
            super.init()
    }

    enum RegistryCodingKeys: String, CodingKey {
        case name
        case registryUri
        case descriptionValue = "description"
        case totalSpaceUsedMB
        case createTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RegistryCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.registryUri)
        {
            self.registryUri = try decoderContainer.decode(String?.self, forKey: .registryUri)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.totalSpaceUsedMB)
        {
            self.totalSpaceUsedMB = try decoderContainer.decode(Double?.self, forKey: .totalSpaceUsedMB)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
    }
}
public extension Registry{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RegistryCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(registryUri, forKey: .registryUri)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(totalSpaceUsedMB, forKey: .totalSpaceUsedMB)
         try encoderContainer.encode(createTime, forKey: .createTime)
    }
}
///  authorizationData
public class AuthorizationData:NSObject,Codable{
    /// 基于base64编码的字符串，包含指定JCR registry的授权信息。解码后可用于docker login。
    var authorizationToken:String?
    /// 用户直接使用的docker login 命令行
    var loginCmdLine:String?
    /// Unix 时钟，记录authorization token的过期时间。默认Authorization tokens有效期为12小时。
    var expiresAt:String?



    public override init(){
            super.init()
    }

    enum AuthorizationDataCodingKeys: String, CodingKey {
        case authorizationToken
        case loginCmdLine
        case expiresAt
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AuthorizationDataCodingKeys.self)
        if decoderContainer.contains(.authorizationToken)
        {
            self.authorizationToken = try decoderContainer.decode(String?.self, forKey: .authorizationToken)
        }
        if decoderContainer.contains(.loginCmdLine)
        {
            self.loginCmdLine = try decoderContainer.decode(String?.self, forKey: .loginCmdLine)
        }
        if decoderContainer.contains(.expiresAt)
        {
            self.expiresAt = try decoderContainer.decode(String?.self, forKey: .expiresAt)
        }
    }
}
public extension AuthorizationData{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AuthorizationDataCodingKeys.self)
         try encoderContainer.encode(authorizationToken, forKey: .authorizationToken)
         try encoderContainer.encode(loginCmdLine, forKey: .loginCmdLine)
         try encoderContainer.encode(expiresAt, forKey: .expiresAt)
    }
}
///  镜像仓库详情数据结构
public class RepositoryShort:NSObject,Codable{
    /// 记录用户repository创建的时间。
    var createdAt:String?
    /// 镜像仓库repository名称。
    var repositoryName:String?
    /// repository的URI，用户通过docker CLI,制定该URI直接进行docker pull/push等操作。
    var repositoryUri:String?



    public override init(){
            super.init()
    }

    enum RepositoryShortCodingKeys: String, CodingKey {
        case createdAt
        case repositoryName
        case repositoryUri
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RepositoryShortCodingKeys.self)
        if decoderContainer.contains(.createdAt)
        {
            self.createdAt = try decoderContainer.decode(String?.self, forKey: .createdAt)
        }
        if decoderContainer.contains(.repositoryName)
        {
            self.repositoryName = try decoderContainer.decode(String?.self, forKey: .repositoryName)
        }
        if decoderContainer.contains(.repositoryUri)
        {
            self.repositoryUri = try decoderContainer.decode(String?.self, forKey: .repositoryUri)
        }
    }
}
public extension RepositoryShort{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RepositoryShortCodingKeys.self)
         try encoderContainer.encode(createdAt, forKey: .createdAt)
         try encoderContainer.encode(repositoryName, forKey: .repositoryName)
         try encoderContainer.encode(repositoryUri, forKey: .repositoryUri)
    }
}
///  镜像仓库详情数据结构
public class Repository:NSObject,Codable{
    /// 记录用户repository创建的时间。
    var createdAt:String?
    /// 记录用户repository更新的时间。
    var updatedAt:String?
    /// 注册表名称。
    var registryName:String?
    /// 镜像仓库名称。
    var repositoryName:String?
    /// 镜像仓库中的镜像总个数。
    var repositoryUri:String?
    /// 镜像仓库大小。
    var totalSpaceUsedMB:Double?
    /// 镜像仓库描述。
    var descriptionValue:String?



    public override init(){
            super.init()
    }

    enum RepositoryCodingKeys: String, CodingKey {
        case createdAt
        case updatedAt
        case registryName
        case repositoryName
        case repositoryUri
        case totalSpaceUsedMB
        case descriptionValue = "description"
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RepositoryCodingKeys.self)
        if decoderContainer.contains(.createdAt)
        {
            self.createdAt = try decoderContainer.decode(String?.self, forKey: .createdAt)
        }
        if decoderContainer.contains(.updatedAt)
        {
            self.updatedAt = try decoderContainer.decode(String?.self, forKey: .updatedAt)
        }
        if decoderContainer.contains(.registryName)
        {
            self.registryName = try decoderContainer.decode(String?.self, forKey: .registryName)
        }
        if decoderContainer.contains(.repositoryName)
        {
            self.repositoryName = try decoderContainer.decode(String?.self, forKey: .repositoryName)
        }
        if decoderContainer.contains(.repositoryUri)
        {
            self.repositoryUri = try decoderContainer.decode(String?.self, forKey: .repositoryUri)
        }
        if decoderContainer.contains(.totalSpaceUsedMB)
        {
            self.totalSpaceUsedMB = try decoderContainer.decode(Double?.self, forKey: .totalSpaceUsedMB)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
    }
}
public extension Repository{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RepositoryCodingKeys.self)
         try encoderContainer.encode(createdAt, forKey: .createdAt)
         try encoderContainer.encode(updatedAt, forKey: .updatedAt)
         try encoderContainer.encode(registryName, forKey: .registryName)
         try encoderContainer.encode(repositoryName, forKey: .repositoryName)
         try encoderContainer.encode(repositoryUri, forKey: .repositoryUri)
         try encoderContainer.encode(totalSpaceUsedMB, forKey: .totalSpaceUsedMB)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
    }
}
///  镜像详情数据结构
public class ImageDetail:NSObject,Codable{
    /// image registry 表示镜像的注册表归属
    var registryName:String?
    /// image repository表示镜像的仓库归属
    var repositoryName:String?
    /// image manifest的sha256摘要
    var imageDigest:String?
    /// 镜像的Manifest
    var imageManifest:String?
    /// 当前image被push到repository的时间
    var imagePushedAt:String?
    /// image在repository中的大小。从Docker 1.9之后的版本, Docker client会压缩镜像层数据再push到V2版本的Docker registry。
      /// docker image命令显示的是解压后的镜像大小，因此会比DescribeImages接口返回的镜像大小会大很多。      
      /// 
    var imageSizeMB:Double?
    /// 镜像关联的所有Tag
    var imageTags:[String?]?
    /// 最近pull的时间
    var lastPullAt:String?
    /// 镜像被拉取次数
    var totalPullTimes:Int?



    public override init(){
            super.init()
    }

    enum ImageDetailCodingKeys: String, CodingKey {
        case registryName
        case repositoryName
        case imageDigest
        case imageManifest
        case imagePushedAt
        case imageSizeMB
        case imageTags
        case lastPullAt
        case totalPullTimes
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImageDetailCodingKeys.self)
        if decoderContainer.contains(.registryName)
        {
            self.registryName = try decoderContainer.decode(String?.self, forKey: .registryName)
        }
        if decoderContainer.contains(.repositoryName)
        {
            self.repositoryName = try decoderContainer.decode(String?.self, forKey: .repositoryName)
        }
        if decoderContainer.contains(.imageDigest)
        {
            self.imageDigest = try decoderContainer.decode(String?.self, forKey: .imageDigest)
        }
        if decoderContainer.contains(.imageManifest)
        {
            self.imageManifest = try decoderContainer.decode(String?.self, forKey: .imageManifest)
        }
        if decoderContainer.contains(.imagePushedAt)
        {
            self.imagePushedAt = try decoderContainer.decode(String?.self, forKey: .imagePushedAt)
        }
        if decoderContainer.contains(.imageSizeMB)
        {
            self.imageSizeMB = try decoderContainer.decode(Double?.self, forKey: .imageSizeMB)
        }
        if decoderContainer.contains(.imageTags)
        {
            self.imageTags = try decoderContainer.decode([String?]?.self, forKey: .imageTags)
        }
        if decoderContainer.contains(.lastPullAt)
        {
            self.lastPullAt = try decoderContainer.decode(String?.self, forKey: .lastPullAt)
        }
        if decoderContainer.contains(.totalPullTimes)
        {
            self.totalPullTimes = try decoderContainer.decode(Int?.self, forKey: .totalPullTimes)
        }
    }
}
public extension ImageDetail{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImageDetailCodingKeys.self)
         try encoderContainer.encode(registryName, forKey: .registryName)
         try encoderContainer.encode(repositoryName, forKey: .repositoryName)
         try encoderContainer.encode(imageDigest, forKey: .imageDigest)
         try encoderContainer.encode(imageManifest, forKey: .imageManifest)
         try encoderContainer.encode(imagePushedAt, forKey: .imagePushedAt)
         try encoderContainer.encode(imageSizeMB, forKey: .imageSizeMB)
         try encoderContainer.encode(imageTags, forKey: .imageTags)
         try encoderContainer.encode(lastPullAt, forKey: .lastPullAt)
         try encoderContainer.encode(totalPullTimes, forKey: .totalPullTimes)
    }
}
