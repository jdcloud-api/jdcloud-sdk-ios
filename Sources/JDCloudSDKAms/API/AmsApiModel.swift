/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   应用管理平台API (仅对授权用户使用)
   应用管理平台API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  获取收流基础数据查询
public class DescribeStreamsInputRequest:JdCloudRequest
{
    /// 起始时间
    var startTime:String?

    /// 结束时间
    var endTime:String?

    /// 流ID
    var streamId:String


    public init(regionId: String,streamId:String){
        self.streamId = streamId
        super.init(regionId: regionId)
    }


    enum DescribeStreamsInputRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case streamId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStreamsInputRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(streamId, forKey: .streamId)

    }
}

/// 获取收流基础数据查询 
public class DescribeStreamsInputResult:NSObject,JdCloudResult
{
    /// Input数据集合
    var streamInputDatas:[StreamInputData?]?



    public override init(){
        super.init()
    }

    enum DescribeStreamsInputResultCodingKeys: String, CodingKey {
        case streamInputDatas
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStreamsInputResultCodingKeys.self)
        if decoderContainer.contains(.streamInputDatas)
        {
            self.streamInputDatas = try decoderContainer.decode([StreamInputData?]?.self, forKey: .streamInputDatas)
        }
    }
}
public extension DescribeStreamsInputResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStreamsInputResultCodingKeys.self)
        try encoderContainer.encode(streamInputDatas, forKey: .streamInputDatas)
    }
}
public class DescribeStreamsInputResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeStreamsInputResult?;

    enum DescribeStreamsInputResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStreamsInputResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeStreamsInputResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeStreamsInputResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStreamsInputResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeAuthenticateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAuthenticateResult?;

    enum DescribeAuthenticateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuthenticateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAuthenticateResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAuthenticateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuthenticateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  客户端鉴权查询
public class DescribeAuthenticateRequest:JdCloudRequest
{
    /// 版本
    var ver:Int?

    /// PinId
    var pId:String


    public init(regionId: String,pId:String){
        self.pId = pId
        super.init(regionId: regionId)
    }


    enum DescribeAuthenticateRequestRequestCodingKeys: String, CodingKey {
        case ver
        case pId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuthenticateRequestRequestCodingKeys.self)
        try encoderContainer.encode(ver, forKey: .ver)
        try encoderContainer.encode(pId, forKey: .pId)

    }
}

/// 客户端鉴权查询 
public class DescribeAuthenticateResult:NSObject,JdCloudResult
{
    /// PinId
    var pId:String?

    /// 版本
    var ver:Int?

    /// 集合
    var blacklist:Double?

    /// 状态
    var status:Int?

    /// 授权号
    var license:String?



    public override init(){
        super.init()
    }

    enum DescribeAuthenticateResultCodingKeys: String, CodingKey {
        case pId
        case ver
        case blacklist
        case status
        case license
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuthenticateResultCodingKeys.self)
        if decoderContainer.contains(.pId)
        {
            self.pId = try decoderContainer.decode(String?.self, forKey: .pId)
        }
        if decoderContainer.contains(.ver)
        {
            self.ver = try decoderContainer.decode(Int?.self, forKey: .ver)
        }
        if decoderContainer.contains(.blacklist)
        {
            self.blacklist = try decoderContainer.decode(Double?.self, forKey: .blacklist)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.license)
        {
            self.license = try decoderContainer.decode(String?.self, forKey: .license)
        }
    }
}
public extension DescribeAuthenticateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuthenticateResultCodingKeys.self)
        try encoderContainer.encode(pId, forKey: .pId)
        try encoderContainer.encode(ver, forKey: .ver)
        try encoderContainer.encode(blacklist, forKey: .blacklist)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(license, forKey: .license)
    }
}
