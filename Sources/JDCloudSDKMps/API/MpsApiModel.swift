/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   媒体处理相关接口
   多媒体处理服务API，包括截图、转码、媒体处理消息通知等操作。本文档详细说明了媒体处理API及用法，适合开发人员阅读。

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

public class GetStyleDelimiterResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetStyleDelimiterResult?;

    enum GetStyleDelimiterResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetStyleDelimiterResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetStyleDelimiterResult?.self, forKey: .result) ?? nil
    }
}

public extension GetStyleDelimiterResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetStyleDelimiterResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取bucket的图片样式分隔符配置 
public class GetStyleDelimiterResult:NSObject,JdCloudResult
{
    /// 图片样式分隔符配置（JSON数组）；支持的分隔符包含：[&quot;-&quot;, &quot;_&quot;, &quot;/&quot;, &quot;!&quot;]
    var delimiters:[String?]?



    public override init(){
        super.init()
    }

    enum GetStyleDelimiterResultCodingKeys: String, CodingKey {
        case delimiters
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetStyleDelimiterResultCodingKeys.self)
        if decoderContainer.contains(.delimiters)
        {
            self.delimiters = try decoderContainer.decode([String?]?.self, forKey: .delimiters)
        }
    }
}
public extension GetStyleDelimiterResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetStyleDelimiterResultCodingKeys.self)
        try encoderContainer.encode(delimiters, forKey: .delimiters)
    }
}
/// 设置图片样式分隔符 
public class SetStyleDelimiterResult:NSObject,JdCloudResult
{
}

///  删除bucket的图片样式分隔符配置
public class DeleteStyleDelimiterRequest:JdCloudRequest
{
    /// Bucket名称
    var bucketName:String


    public init(regionId: String,bucketName:String){
        self.bucketName = bucketName
        super.init(regionId: regionId)
    }


    enum DeleteStyleDelimiterRequestRequestCodingKeys: String, CodingKey {
        case bucketName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteStyleDelimiterRequestRequestCodingKeys.self)
        try encoderContainer.encode(bucketName, forKey: .bucketName)

    }
}


///  获取bucket的图片样式分隔符配置
public class GetStyleDelimiterRequest:JdCloudRequest
{
    /// Bucket名称
    var bucketName:String


    public init(regionId: String,bucketName:String){
        self.bucketName = bucketName
        super.init(regionId: regionId)
    }


    enum GetStyleDelimiterRequestRequestCodingKeys: String, CodingKey {
        case bucketName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetStyleDelimiterRequestRequestCodingKeys.self)
        try encoderContainer.encode(bucketName, forKey: .bucketName)

    }
}

public class SetStyleDelimiterResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetStyleDelimiterResult?;

    enum SetStyleDelimiterResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetStyleDelimiterResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetStyleDelimiterResult?.self, forKey: .result) ?? nil
    }
}

public extension SetStyleDelimiterResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetStyleDelimiterResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteStyleDelimiterResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteStyleDelimiterResult?;

    enum DeleteStyleDelimiterResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteStyleDelimiterResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteStyleDelimiterResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteStyleDelimiterResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteStyleDelimiterResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  设置图片样式分隔符
public class SetStyleDelimiterRequest:JdCloudRequest
{
    /// 图片样式分隔符配置（JSON数组）；支持的分隔符包含：[&quot;-&quot;, &quot;_&quot;, &quot;/&quot;, &quot;!&quot;]
    var delimiters:[String?]?

    /// Bucket名称
    var bucketName:String


    public init(regionId: String,bucketName:String){
        self.bucketName = bucketName
        super.init(regionId: regionId)
    }


    enum SetStyleDelimiterRequestRequestCodingKeys: String, CodingKey {
        case delimiters
        case bucketName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetStyleDelimiterRequestRequestCodingKeys.self)
        try encoderContainer.encode(delimiters, forKey: .delimiters)
        try encoderContainer.encode(bucketName, forKey: .bucketName)

    }
}

/// 删除bucket的图片样式分隔符配置 
public class DeleteStyleDelimiterResult:NSObject,JdCloudResult
{
}
/// 查询截图任务，返回满足查询条件的任务列表。 
public class ListThumbnailTaskResult:NSObject,JdCloudResult
{
    /// 状态 (SUCCESS, ERROR, PENDDING, RUNNING)
    var status:String?

    /// 查询开始时间 时间格式(GMT): yyyy-MM-dd’T’HH:mm:ss.SSS’Z’
    var begin:String?

    /// 查询结束时间 时间格式(GMT): yyyy-MM-dd’T’HH:mm:ss.SSS’Z’
    var end:String?

    /// 本次请求的marker, 标记查询的起始位置, 此处为taskID
    var marker:String?

    /// 本次请求返回的任务列表的最大元素个数, 有效值: [1-1000]，默认值: 1000
    var limit:Int?

    /// 获取下一页所需要传递的marker值(此处为taskID), 仅当isTruncated为true时(数据未全部返回)出现 (readonly)
    var nextMarker:String?

    /// 指明返回数据是否被截断. true表示本页后面还有数据, 即数据未全部返回; false表示已是最后一页, 即数据已全部返回 (readonly)
    var truncated:Bool?

    /// 返回的task列表 (readonly)
    var taskList:[ThumbnailTask?]?



    public override init(){
        super.init()
    }

    enum ListThumbnailTaskResultCodingKeys: String, CodingKey {
        case status
        case begin
        case end
        case marker
        case limit
        case nextMarker
        case truncated
        case taskList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListThumbnailTaskResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.begin)
        {
            self.begin = try decoderContainer.decode(String?.self, forKey: .begin)
        }
        if decoderContainer.contains(.end)
        {
            self.end = try decoderContainer.decode(String?.self, forKey: .end)
        }
        if decoderContainer.contains(.marker)
        {
            self.marker = try decoderContainer.decode(String?.self, forKey: .marker)
        }
        if decoderContainer.contains(.limit)
        {
            self.limit = try decoderContainer.decode(Int?.self, forKey: .limit)
        }
        if decoderContainer.contains(.nextMarker)
        {
            self.nextMarker = try decoderContainer.decode(String?.self, forKey: .nextMarker)
        }
        if decoderContainer.contains(.truncated)
        {
            self.truncated = try decoderContainer.decode(Bool?.self, forKey: .truncated)
        }
        if decoderContainer.contains(.taskList)
        {
            self.taskList = try decoderContainer.decode([ThumbnailTask?]?.self, forKey: .taskList)
        }
    }
}
public extension ListThumbnailTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListThumbnailTaskResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(begin, forKey: .begin)
        try encoderContainer.encode(end, forKey: .end)
        try encoderContainer.encode(marker, forKey: .marker)
        try encoderContainer.encode(limit, forKey: .limit)
        try encoderContainer.encode(nextMarker, forKey: .nextMarker)
        try encoderContainer.encode(truncated, forKey: .truncated)
        try encoderContainer.encode(taskList, forKey: .taskList)
    }
}
public class CreateThumbnailTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateThumbnailTaskResult?;

    enum CreateThumbnailTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateThumbnailTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateThumbnailTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateThumbnailTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateThumbnailTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取媒体处理通知
public class GetNotificationRequest:JdCloudRequest
{
}

public class ListThumbnailTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ListThumbnailTaskResult?;

    enum ListThumbnailTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListThumbnailTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ListThumbnailTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension ListThumbnailTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListThumbnailTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据任务ID获取截图任务。 
public class GetThumbnailTaskResult:NSObject,JdCloudResult
{
    /// 任务ID (readonly)
    var taskID:String?

    /// 状态 (SUCCESS, ERROR, PENDDING, RUNNING) (readonly)
    var status:String?

    /// 错误码 (readonly)
    var errorCode:Int?

    /// 任务创建时间 时间格式(GMT): yyyy-MM-dd’T’HH:mm:ss.SSS’Z’  (readonly)
    var createdTime:String?

    /// 任务创建时间 时间格式(GMT): yyyy-MM-dd’T’HH:mm:ss.SSS’Z’  (readonly)
    var lastUpdatedTime:String?

    /// Source
    var source:ThumbnailTaskSource

    /// Target
    var target:ThumbnailTaskTarget

    /// Rule
    var rule:ThumbnailTaskRule?



    public  init(source:ThumbnailTaskSource,target:ThumbnailTaskTarget){
        self.source = source
        self.target = target
    }

    enum GetThumbnailTaskResultCodingKeys: String, CodingKey {
        case taskID
        case status
        case errorCode
        case createdTime
        case lastUpdatedTime
        case source
        case target
        case rule
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetThumbnailTaskResultCodingKeys.self)
        if decoderContainer.contains(.taskID)
        {
            self.taskID = try decoderContainer.decode(String?.self, forKey: .taskID)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.errorCode)
        {
            self.errorCode = try decoderContainer.decode(Int?.self, forKey: .errorCode)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.lastUpdatedTime)
        {
            self.lastUpdatedTime = try decoderContainer.decode(String?.self, forKey: .lastUpdatedTime)
        }
        self.source = try decoderContainer.decode(ThumbnailTaskSource.self, forKey: .source)
        self.target = try decoderContainer.decode(ThumbnailTaskTarget.self, forKey: .target)
        if decoderContainer.contains(.rule)
        {
            self.rule = try decoderContainer.decode(ThumbnailTaskRule?.self, forKey: .rule)
        }
    }
}
public extension GetThumbnailTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetThumbnailTaskResultCodingKeys.self)
        try encoderContainer.encode(taskID, forKey: .taskID)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(errorCode, forKey: .errorCode)
        try encoderContainer.encode(createdTime, forKey: .createdTime)
        try encoderContainer.encode(lastUpdatedTime, forKey: .lastUpdatedTime)
        try encoderContainer.encode(source, forKey: .source)
        try encoderContainer.encode(target, forKey: .target)
        try encoderContainer.encode(rule, forKey: .rule)
    }
}

///  查询截图任务，返回满足查询条件的任务列表。
public class ListThumbnailTaskRequest:JdCloudRequest
{
    /// task 状态 (PENDING, RUNNING, SUCCESS, FAILED)
    var status:String?

    /// 开始时间 时间格式(GMT): yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;
    var begin:String?

    /// 结束时间 时间格式(GMT): yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;
    var end:String?

    /// 查询标记
    var marker:String?

    /// 查询记录数 [1, 1000]
    var limit:Int?




    enum ListThumbnailTaskRequestRequestCodingKeys: String, CodingKey {
        case status
        case begin
        case end
        case marker
        case limit
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListThumbnailTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(begin, forKey: .begin)
        try encoderContainer.encode(end, forKey: .end)
        try encoderContainer.encode(marker, forKey: .marker)
        try encoderContainer.encode(limit, forKey: .limit)

    }
}

/// 获取媒体处理通知 
public class GetNotificationResult:NSObject,JdCloudResult
{
    /// 是否启用通知
    var enabled:Bool

    /// 通知endpoint, 当前支持http://和https://
    var endpoint:String?

    /// 触发通知的事件集合 (mpsTranscodeComplete, mpsThumbnailComplete)
    var events:[String?]?

    /// 重试策略, BACKOFF_RETRY: 退避重试策略, 重试 3 次, 每次重试的间隔时间是 10秒 到 20秒 之间的随机值; EXPONENTIAL_DECAY_RETRY: 指数衰减重试, 重试 176 次, 每次重试的间隔时间指数递增至 512秒, 总计重试时间为1天; 每次重试的具体间隔为: 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 512 ... 512 秒(共167个512)
    var notifyStrategy:String?

    /// 描述了向 Endpoint 推送的消息格式, JSON: 包含消息正文和消息属性, SIMPLIFIED: 消息体即用户发布的消息, 不包含任何属性信息
    var notifyContentFormat:String?



    public  init(enabled:Bool){
        self.enabled = enabled
    }

    enum GetNotificationResultCodingKeys: String, CodingKey {
        case enabled
        case endpoint
        case events
        case notifyStrategy
        case notifyContentFormat
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetNotificationResultCodingKeys.self)
        self.enabled = try decoderContainer.decode(Bool.self, forKey: .enabled)
        if decoderContainer.contains(.endpoint)
        {
            self.endpoint = try decoderContainer.decode(String?.self, forKey: .endpoint)
        }
        if decoderContainer.contains(.events)
        {
            self.events = try decoderContainer.decode([String?]?.self, forKey: .events)
        }
        if decoderContainer.contains(.notifyStrategy)
        {
            self.notifyStrategy = try decoderContainer.decode(String?.self, forKey: .notifyStrategy)
        }
        if decoderContainer.contains(.notifyContentFormat)
        {
            self.notifyContentFormat = try decoderContainer.decode(String?.self, forKey: .notifyContentFormat)
        }
    }
}
public extension GetNotificationResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetNotificationResultCodingKeys.self)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(endpoint, forKey: .endpoint)
        try encoderContainer.encode(events, forKey: .events)
        try encoderContainer.encode(notifyStrategy, forKey: .notifyStrategy)
        try encoderContainer.encode(notifyContentFormat, forKey: .notifyContentFormat)
    }
}
public class GetNotificationResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetNotificationResult?;

    enum GetNotificationResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetNotificationResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetNotificationResult?.self, forKey: .result) ?? nil
    }
}

public extension GetNotificationResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetNotificationResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据任务ID获取截图任务。
public class GetThumbnailTaskRequest:JdCloudRequest
{
    /// task id
    var taskId:String


    public init(regionId: String,taskId:String){
        self.taskId = taskId
        super.init(regionId: regionId)
    }


    enum GetThumbnailTaskRequestRequestCodingKeys: String, CodingKey {
        case taskId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetThumbnailTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(taskId, forKey: .taskId)

    }
}


///  设置媒体处理通知, 在设置Notification时会对endpoint进行校验, 设置时会对endpoint发一条SubscriptionConfirmation(x-jdcloud-message-type头)的通知, 要求把Message内容进行base64编码返回给系统(body)进行校验
public class SetNotificationRequest:JdCloudRequest
{
    /// 是否启用通知
    var enabled:Bool

    /// 通知endpoint, 当前支持http://和https://
    var endpoint:String?

    /// 触发通知的事件集合 (mpsTranscodeComplete, mpsThumbnailComplete)
    var events:[String?]?

    /// 重试策略, BACKOFF_RETRY: 退避重试策略, 重试 3 次, 每次重试的间隔时间是 10秒 到 20秒 之间的随机值; EXPONENTIAL_DECAY_RETRY: 指数衰减重试, 重试 176 次, 每次重试的间隔时间指数递增至 512秒, 总计重试时间为1天; 每次重试的具体间隔为: 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 512 ... 512 秒(共167个512)
    var notifyStrategy:String?

    /// 描述了向 Endpoint 推送的消息格式, JSON: 包含消息正文和消息属性, SIMPLIFIED: 消息体即用户发布的消息, 不包含任何属性信息
    var notifyContentFormat:String?


    public init(regionId: String,enabled:Bool){
        self.enabled = enabled
        super.init(regionId: regionId)
    }


    enum SetNotificationRequestRequestCodingKeys: String, CodingKey {
        case enabled
        case endpoint
        case events
        case notifyStrategy
        case notifyContentFormat
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetNotificationRequestRequestCodingKeys.self)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(endpoint, forKey: .endpoint)
        try encoderContainer.encode(events, forKey: .events)
        try encoderContainer.encode(notifyStrategy, forKey: .notifyStrategy)
        try encoderContainer.encode(notifyContentFormat, forKey: .notifyContentFormat)

    }
}

/// 创建截图任务，创建成功时返回任务ID。本接口用于截取指定时间点的画面。 
public class CreateThumbnailTaskResult:NSObject,JdCloudResult
{
    /// TaskID
    var taskID:String?



    public override init(){
        super.init()
    }

    enum CreateThumbnailTaskResultCodingKeys: String, CodingKey {
        case taskID
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateThumbnailTaskResultCodingKeys.self)
        if decoderContainer.contains(.taskID)
        {
            self.taskID = try decoderContainer.decode(String?.self, forKey: .taskID)
        }
    }
}
public extension CreateThumbnailTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateThumbnailTaskResultCodingKeys.self)
        try encoderContainer.encode(taskID, forKey: .taskID)
    }
}
public class GetThumbnailTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetThumbnailTaskResult?;

    enum GetThumbnailTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetThumbnailTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetThumbnailTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension GetThumbnailTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetThumbnailTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class SetNotificationResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetNotificationResult?;

    enum SetNotificationResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetNotificationResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetNotificationResult?.self, forKey: .result) ?? nil
    }
}

public extension SetNotificationResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetNotificationResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建截图任务，创建成功时返回任务ID。本接口用于截取指定时间点的画面。
public class CreateThumbnailTaskRequest:JdCloudRequest
{
    /// 任务ID (readonly)
    var taskID:String?

    /// 状态 (SUCCESS, ERROR, PENDDING, RUNNING) (readonly)
    var status:String?

    /// 错误码 (readonly)
    var errorCode:Int?

    /// 任务创建时间 时间格式(GMT): yyyy-MM-dd’T’HH:mm:ss.SSS’Z’  (readonly)
    var createdTime:String?

    /// 任务创建时间 时间格式(GMT): yyyy-MM-dd’T’HH:mm:ss.SSS’Z’  (readonly)
    var lastUpdatedTime:String?

    /// Source
    var source:ThumbnailTaskSource

    /// Target
    var target:ThumbnailTaskTarget

    /// Rule
    var rule:ThumbnailTaskRule?


    public init(regionId: String,source:ThumbnailTaskSource,target:ThumbnailTaskTarget){
        self.source = source
        self.target = target
        super.init(regionId: regionId)
    }


    enum CreateThumbnailTaskRequestRequestCodingKeys: String, CodingKey {
        case taskID
        case status
        case errorCode
        case createdTime
        case lastUpdatedTime
        case source
        case target
        case rule
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateThumbnailTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(taskID, forKey: .taskID)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(errorCode, forKey: .errorCode)
        try encoderContainer.encode(createdTime, forKey: .createdTime)
        try encoderContainer.encode(lastUpdatedTime, forKey: .lastUpdatedTime)
        try encoderContainer.encode(source, forKey: .source)
        try encoderContainer.encode(target, forKey: .target)
        try encoderContainer.encode(rule, forKey: .rule)

    }
}

/// 设置媒体处理通知, 在设置Notification时会对endpoint进行校验, 设置时会对endpoint发一条SubscriptionConfirmation(x-jdcloud-message-type头)的通知, 要求把Message内容进行base64编码返回给系统(body)进行校验 
public class SetNotificationResult:NSObject,JdCloudResult
{
}
