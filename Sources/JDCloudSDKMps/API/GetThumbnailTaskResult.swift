/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   媒体处理相关接口
   媒体处理API

   OpenAPI spec version: 1.0.0
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 获取截图任务
@objc(GetThumbnailTaskResult)
public class GetThumbnailTaskResult:NSObject,JdCloudResult
{
    /// 任务ID (readonly)
    var taskID:String?

    /// 状态 (SUCCESS, ERROR, PENDDING, RUNNING) (readonly)
    var status:String?

    /// 错误码 (readonly)
    var errorCode:Int?

    /// 任务创建时间 时间格式(GMT): yyyy-MM-dd’T’HH:mm:ss.SSS’Z’  (readonly)
    var createdTime:String?

    /// 任务创建时间 时间格式(GMT): yyyy-MM-dd’T’HH:mm:ss.SSS’Z’  (readonly)
    var lastUpdatedTime:String?

    /// Source
    var source:ThumbnailTaskSource

    /// Target
    var target:ThumbnailTaskTarget

    /// Rule
    var rule:ThumbnailTaskRule?



    public  init(source:ThumbnailTaskSource,target:ThumbnailTaskTarget){
        self.source = source
        self.target = target
    }

    enum GetThumbnailTaskResultCodingKeys: String, CodingKey {
        case taskID
        case status
        case errorCode
        case createdTime
        case lastUpdatedTime
        case source
        case target
        case rule
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetThumbnailTaskResultCodingKeys.self)
        if decoderContainer.contains(.taskID)
        {
            self.taskID = try decoderContainer.decode(String?.self, forKey: .taskID)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.errorCode)
        {
            self.errorCode = try decoderContainer.decode(Int?.self, forKey: .errorCode)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.lastUpdatedTime)
        {
            self.lastUpdatedTime = try decoderContainer.decode(String?.self, forKey: .lastUpdatedTime)
        }
        self.source = try decoderContainer.decode(ThumbnailTaskSource.self, forKey: .source)
        self.target = try decoderContainer.decode(ThumbnailTaskTarget.self, forKey: .target)
        if decoderContainer.contains(.rule)
        {
            self.rule = try decoderContainer.decode(ThumbnailTaskRule?.self, forKey: .rule)
        }
    }
}
public extension GetThumbnailTaskResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetThumbnailTaskResultCodingKeys.self)
        try encoderContainer.encode(taskID, forKey: .taskID)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(errorCode, forKey: .errorCode)
        try encoderContainer.encode(createdTime, forKey: .createdTime)
        try encoderContainer.encode(lastUpdatedTime, forKey: .lastUpdatedTime)
        try encoderContainer.encode(source, forKey: .source)
        try encoderContainer.encode(target, forKey: .target)
        try encoderContainer.encode(rule, forKey: .rule)
    }
}
