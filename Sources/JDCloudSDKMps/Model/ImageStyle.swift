/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   图片样式相关接口
   图片样式API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  imageStyle
@objc(ImageStyle)
public class ImageStyle:NSObject,Codable{
    /// 图片样式id(readOnly)
    var id:Int64?
    /// 用户id(readOnly)
    var userId:String?
    /// 图片样式名称
    var styleName:String?
    /// 图片样式参数
    var params:String?
    /// 图片样式参数别名
    var paramAlias:String?
    /// 所属区域(readOnly)
    var regionId:String?
    /// 所属Bucket(readOnly)
    var bucketName:String?
    /// 图片样式状态(readOnly)
    var status:Int?
    /// 修改时间(readOnly)
    var modifyTime:String?
    /// 创建时间(readOnly)
    var createdTime:String?



    public override init(){
            super.init()
    }

    enum ImageStyleCodingKeys: String, CodingKey {
        case id
        case userId
        case styleName
        case params
        case paramAlias
        case regionId
        case bucketName
        case status
        case modifyTime
        case createdTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImageStyleCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int64?.self, forKey: .id)
        }
        if decoderContainer.contains(.userId)
        {
            self.userId = try decoderContainer.decode(String?.self, forKey: .userId)
        }
        if decoderContainer.contains(.styleName)
        {
            self.styleName = try decoderContainer.decode(String?.self, forKey: .styleName)
        }
        if decoderContainer.contains(.params)
        {
            self.params = try decoderContainer.decode(String?.self, forKey: .params)
        }
        if decoderContainer.contains(.paramAlias)
        {
            self.paramAlias = try decoderContainer.decode(String?.self, forKey: .paramAlias)
        }
        if decoderContainer.contains(.regionId)
        {
            self.regionId = try decoderContainer.decode(String?.self, forKey: .regionId)
        }
        if decoderContainer.contains(.bucketName)
        {
            self.bucketName = try decoderContainer.decode(String?.self, forKey: .bucketName)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.modifyTime)
        {
            self.modifyTime = try decoderContainer.decode(String?.self, forKey: .modifyTime)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
    }
}
public extension ImageStyle{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImageStyleCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(userId, forKey: .userId)
         try encoderContainer.encode(styleName, forKey: .styleName)
         try encoderContainer.encode(params, forKey: .params)
         try encoderContainer.encode(paramAlias, forKey: .paramAlias)
         try encoderContainer.encode(regionId, forKey: .regionId)
         try encoderContainer.encode(bucketName, forKey: .bucketName)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(modifyTime, forKey: .modifyTime)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
    }
}
