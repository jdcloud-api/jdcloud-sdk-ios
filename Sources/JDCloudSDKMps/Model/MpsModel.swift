/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   媒体处理相关接口
   多媒体处理服务API，包括截图、转码、媒体处理消息通知等操作。本文档详细说明了媒体处理API及用法，适合开发人员阅读。

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
///  styleDelimiterConf
public class StyleDelimiterConf:NSObject,Codable{
    /// 图片样式分隔符配置（JSON数组）；支持的分隔符包含：[&quot;-&quot;, &quot;_&quot;, &quot;/&quot;, &quot;!&quot;]
    /// Required:true
    var delimiters:[String?]?



    public  init(delimiters:[String?]?){
             self.delimiters = delimiters
    }

    enum StyleDelimiterConfCodingKeys: String, CodingKey {
        case delimiters
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StyleDelimiterConfCodingKeys.self)
        self.delimiters = try decoderContainer.decode([String?]?.self, forKey: .delimiters)
    }
}
public extension StyleDelimiterConf{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StyleDelimiterConfCodingKeys.self)
         try encoderContainer.encode(delimiters, forKey: .delimiters)
    }
}
///  imageStyleCount
public class ImageStyleCount:NSObject,Codable{
    /// 图片样式总数
    var styleCount:Int?



    public override init(){
            super.init()
    }

    enum ImageStyleCountCodingKeys: String, CodingKey {
        case styleCount
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImageStyleCountCodingKeys.self)
        if decoderContainer.contains(.styleCount)
        {
            self.styleCount = try decoderContainer.decode(Int?.self, forKey: .styleCount)
        }
    }
}
public extension ImageStyleCount{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImageStyleCountCodingKeys.self)
         try encoderContainer.encode(styleCount, forKey: .styleCount)
    }
}
///  imageStyleID
public class ImageStyleID:NSObject,Codable{
    /// 图片样式ID
    var id:Int64?



    public override init(){
            super.init()
    }

    enum ImageStyleIDCodingKeys: String, CodingKey {
        case id
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImageStyleIDCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int64?.self, forKey: .id)
        }
    }
}
public extension ImageStyleID{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImageStyleIDCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
    }
}
///  imageStyleQueryResult
public class ImageStyleQueryResult:NSObject,Codable{
    /// 按样式名称查询
    var styleName:String?
    /// 数据页码
    var pageNumber:Int?
    /// 每页数据的条数
    var pageSize:Int?
    /// 图片样式列表
    var imageStyleList:[ImageStyle?]?



    public override init(){
            super.init()
    }

    enum ImageStyleQueryResultCodingKeys: String, CodingKey {
        case styleName
        case pageNumber
        case pageSize
        case imageStyleList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImageStyleQueryResultCodingKeys.self)
        if decoderContainer.contains(.styleName)
        {
            self.styleName = try decoderContainer.decode(String?.self, forKey: .styleName)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.imageStyleList)
        {
            self.imageStyleList = try decoderContainer.decode([ImageStyle?]?.self, forKey: .imageStyleList)
        }
    }
}
public extension ImageStyleQueryResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImageStyleQueryResultCodingKeys.self)
         try encoderContainer.encode(styleName, forKey: .styleName)
         try encoderContainer.encode(pageNumber, forKey: .pageNumber)
         try encoderContainer.encode(pageSize, forKey: .pageSize)
         try encoderContainer.encode(imageStyleList, forKey: .imageStyleList)
    }
}
///  imageStyle
public class ImageStyle:NSObject,Codable{
    /// 图片样式id(readOnly)
    var id:Int64?
    /// 用户id(readOnly)
    var userId:String?
    /// 图片样式名称
    var styleName:String?
    /// 图片样式参数
    var params:String?
    /// 图片样式参数别名
    var paramAlias:String?
    /// 所属区域(readOnly)
    var regionId:String?
    /// 所属Bucket(readOnly)
    var bucketName:String?
    /// 图片样式状态(readOnly)
    var status:Int?
    /// 修改时间(readOnly)
    var modifyTime:String?
    /// 创建时间(readOnly)
    var createdTime:String?



    public override init(){
            super.init()
    }

    enum ImageStyleCodingKeys: String, CodingKey {
        case id
        case userId
        case styleName
        case params
        case paramAlias
        case regionId
        case bucketName
        case status
        case modifyTime
        case createdTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImageStyleCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int64?.self, forKey: .id)
        }
        if decoderContainer.contains(.userId)
        {
            self.userId = try decoderContainer.decode(String?.self, forKey: .userId)
        }
        if decoderContainer.contains(.styleName)
        {
            self.styleName = try decoderContainer.decode(String?.self, forKey: .styleName)
        }
        if decoderContainer.contains(.params)
        {
            self.params = try decoderContainer.decode(String?.self, forKey: .params)
        }
        if decoderContainer.contains(.paramAlias)
        {
            self.paramAlias = try decoderContainer.decode(String?.self, forKey: .paramAlias)
        }
        if decoderContainer.contains(.regionId)
        {
            self.regionId = try decoderContainer.decode(String?.self, forKey: .regionId)
        }
        if decoderContainer.contains(.bucketName)
        {
            self.bucketName = try decoderContainer.decode(String?.self, forKey: .bucketName)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.modifyTime)
        {
            self.modifyTime = try decoderContainer.decode(String?.self, forKey: .modifyTime)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
    }
}
public extension ImageStyle{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImageStyleCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(userId, forKey: .userId)
         try encoderContainer.encode(styleName, forKey: .styleName)
         try encoderContainer.encode(params, forKey: .params)
         try encoderContainer.encode(paramAlias, forKey: .paramAlias)
         try encoderContainer.encode(regionId, forKey: .regionId)
         try encoderContainer.encode(bucketName, forKey: .bucketName)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(modifyTime, forKey: .modifyTime)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
    }
}
///  视频截图规则参数
public class ThumbnailTaskRule:NSObject,Codable{
    /// 截图模式 单张: single 多张: multi 平均: average default: single
    var mode:String?
    /// 是否开启关键帧截图 default: true
    var keyFrame:Bool?
    /// 生成截图的开始时间, mode&#x3D;average 时不可选. default:0
    var startTimeInSecond:Int?
    /// 生成截图的结束时间, mode&#x3D;single/average时不可选, 且不得小于startTimeInSecond. default:-1(代表视频时长)
    var endTimeInSecond:Int?
    /// 截图数量, mode&#x3D;single时不可选. default:1
    var count:Int?



    public override init(){
            super.init()
    }

    enum ThumbnailTaskRuleCodingKeys: String, CodingKey {
        case mode
        case keyFrame
        case startTimeInSecond
        case endTimeInSecond
        case count
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ThumbnailTaskRuleCodingKeys.self)
        if decoderContainer.contains(.mode)
        {
            self.mode = try decoderContainer.decode(String?.self, forKey: .mode)
        }
        if decoderContainer.contains(.keyFrame)
        {
            self.keyFrame = try decoderContainer.decode(Bool?.self, forKey: .keyFrame)
        }
        if decoderContainer.contains(.startTimeInSecond)
        {
            self.startTimeInSecond = try decoderContainer.decode(Int?.self, forKey: .startTimeInSecond)
        }
        if decoderContainer.contains(.endTimeInSecond)
        {
            self.endTimeInSecond = try decoderContainer.decode(Int?.self, forKey: .endTimeInSecond)
        }
        if decoderContainer.contains(.count)
        {
            self.count = try decoderContainer.decode(Int?.self, forKey: .count)
        }
    }
}
public extension ThumbnailTaskRule{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ThumbnailTaskRuleCodingKeys.self)
         try encoderContainer.encode(mode, forKey: .mode)
         try encoderContainer.encode(keyFrame, forKey: .keyFrame)
         try encoderContainer.encode(startTimeInSecond, forKey: .startTimeInSecond)
         try encoderContainer.encode(endTimeInSecond, forKey: .endTimeInSecond)
         try encoderContainer.encode(count, forKey: .count)
    }
}
///  视频截图源文件参数
public class ThumbnailTaskSource:NSObject,Codable{
    /// 输入视频信息的 bucket
    /// Required:true
    var bucket:String
    /// 输入视频信息的 Key
    /// Required:true
    var key:String



    public  init(bucket:String,key:String){
             self.bucket = bucket
             self.key = key
    }

    enum ThumbnailTaskSourceCodingKeys: String, CodingKey {
        case bucket
        case key
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ThumbnailTaskSourceCodingKeys.self)
        self.bucket = try decoderContainer.decode(String.self, forKey: .bucket)
        self.key = try decoderContainer.decode(String.self, forKey: .key)
    }
}
public extension ThumbnailTaskSource{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ThumbnailTaskSourceCodingKeys.self)
         try encoderContainer.encode(bucket, forKey: .bucket)
         try encoderContainer.encode(key, forKey: .key)
    }
}
///  thumbnailStatus
public class ThumbnailStatus:NSObject,Codable{
    /// 状态 (SUCESS, ERROR, PENDDING, RUNNING)
    /// Required:true
    var status:String
    /// 错误码
    var errorCode:Int?
    /// 成功时生成的截图文件个数
    var count:Int?



    public  init(status:String){
             self.status = status
    }

    enum ThumbnailStatusCodingKeys: String, CodingKey {
        case status
        case errorCode
        case count
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ThumbnailStatusCodingKeys.self)
        self.status = try decoderContainer.decode(String.self, forKey: .status)
        if decoderContainer.contains(.errorCode)
        {
            self.errorCode = try decoderContainer.decode(Int?.self, forKey: .errorCode)
        }
        if decoderContainer.contains(.count)
        {
            self.count = try decoderContainer.decode(Int?.self, forKey: .count)
        }
    }
}
public extension ThumbnailStatus{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ThumbnailStatusCodingKeys.self)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(errorCode, forKey: .errorCode)
         try encoderContainer.encode(count, forKey: .count)
    }
}
///  notification
public class Notification:NSObject,Codable{
    /// 是否启用通知
    /// Required:true
    var enabled:Bool
    /// 通知endpoint, 当前支持http://和https://
    var endpoint:String?
    /// 触发通知的事件集合 (mpsTranscodeComplete, mpsThumbnailComplete)
    var events:[String?]?
    /// 重试策略, BACKOFF_RETRY: 退避重试策略, 重试 3 次, 每次重试的间隔时间是 10秒 到 20秒 之间的随机值; EXPONENTIAL_DECAY_RETRY: 指数衰减重试, 重试 176 次, 每次重试的间隔时间指数递增至 512秒, 总计重试时间为1天; 每次重试的具体间隔为: 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 512 ... 512 秒(共167个512)
    var notifyStrategy:String?
    /// 描述了向 Endpoint 推送的消息格式, JSON: 包含消息正文和消息属性, SIMPLIFIED: 消息体即用户发布的消息, 不包含任何属性信息
    var notifyContentFormat:String?



    public  init(enabled:Bool){
             self.enabled = enabled
    }

    enum NotificationCodingKeys: String, CodingKey {
        case enabled
        case endpoint
        case events
        case notifyStrategy
        case notifyContentFormat
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NotificationCodingKeys.self)
        self.enabled = try decoderContainer.decode(Bool.self, forKey: .enabled)
        if decoderContainer.contains(.endpoint)
        {
            self.endpoint = try decoderContainer.decode(String?.self, forKey: .endpoint)
        }
        if decoderContainer.contains(.events)
        {
            self.events = try decoderContainer.decode([String?]?.self, forKey: .events)
        }
        if decoderContainer.contains(.notifyStrategy)
        {
            self.notifyStrategy = try decoderContainer.decode(String?.self, forKey: .notifyStrategy)
        }
        if decoderContainer.contains(.notifyContentFormat)
        {
            self.notifyContentFormat = try decoderContainer.decode(String?.self, forKey: .notifyContentFormat)
        }
    }
}
public extension Notification{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NotificationCodingKeys.self)
         try encoderContainer.encode(enabled, forKey: .enabled)
         try encoderContainer.encode(endpoint, forKey: .endpoint)
         try encoderContainer.encode(events, forKey: .events)
         try encoderContainer.encode(notifyStrategy, forKey: .notifyStrategy)
         try encoderContainer.encode(notifyContentFormat, forKey: .notifyContentFormat)
    }
}
///  thumbnailTask
public class ThumbnailTask:NSObject,Codable{
    /// 任务ID (readonly)
    var taskID:String?
    /// 状态 (SUCCESS, ERROR, PENDDING, RUNNING) (readonly)
    var status:String?
    /// 错误码 (readonly)
    var errorCode:Int?
    /// 任务创建时间 时间格式(GMT): yyyy-MM-dd’T’HH:mm:ss.SSS’Z’  (readonly)
    var createdTime:String?
    /// 任务创建时间 时间格式(GMT): yyyy-MM-dd’T’HH:mm:ss.SSS’Z’  (readonly)
    var lastUpdatedTime:String?
    /// Source
    /// Required:true
    var source:ThumbnailTaskSource
    /// Target
    /// Required:true
    var target:ThumbnailTaskTarget
    /// Rule
    var rule:ThumbnailTaskRule?



    public  init(source:ThumbnailTaskSource,target:ThumbnailTaskTarget){
             self.source = source
             self.target = target
    }

    enum ThumbnailTaskCodingKeys: String, CodingKey {
        case taskID
        case status
        case errorCode
        case createdTime
        case lastUpdatedTime
        case source
        case target
        case rule
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ThumbnailTaskCodingKeys.self)
        if decoderContainer.contains(.taskID)
        {
            self.taskID = try decoderContainer.decode(String?.self, forKey: .taskID)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.errorCode)
        {
            self.errorCode = try decoderContainer.decode(Int?.self, forKey: .errorCode)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.lastUpdatedTime)
        {
            self.lastUpdatedTime = try decoderContainer.decode(String?.self, forKey: .lastUpdatedTime)
        }
        self.source = try decoderContainer.decode(ThumbnailTaskSource.self, forKey: .source)
        self.target = try decoderContainer.decode(ThumbnailTaskTarget.self, forKey: .target)
        if decoderContainer.contains(.rule)
        {
            self.rule = try decoderContainer.decode(ThumbnailTaskRule?.self, forKey: .rule)
        }
    }
}
public extension ThumbnailTask{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ThumbnailTaskCodingKeys.self)
         try encoderContainer.encode(taskID, forKey: .taskID)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(errorCode, forKey: .errorCode)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(lastUpdatedTime, forKey: .lastUpdatedTime)
         try encoderContainer.encode(source, forKey: .source)
         try encoderContainer.encode(target, forKey: .target)
         try encoderContainer.encode(rule, forKey: .rule)
    }
}
///  视频截图目标文件参数
public class ThumbnailTaskTarget:NSObject,Codable{
    /// 输入存放目标文件的 bucket
    /// Required:true
    var destBucket:String
    /// 目标截图的Key的前缀, &#39;前缀-taskID-%04d(num).(format)&#39;, 默认: sourceKey
    var destKeyPrefix:String?
    /// 目标截图的格式 default: jpg
    var format:String?
    /// 目标截图的宽, 如果视频实际分辨率低于目标分辨率则按照实际分辨率输出 default: 0 代表源视频高 其他[8, 4096]
    var widthInPixel:Int?
    /// 目标截图的高, 如果视频实际分辨率低于目标分辨率则按照实际分辨率输出 default: 0 代表源视频高 其他[8, 4096]
    var heightInPixel:Int?
    /// 目标截图的Key的集合 (readonly)
    var keys:[String?]?



    public  init(destBucket:String){
             self.destBucket = destBucket
    }

    enum ThumbnailTaskTargetCodingKeys: String, CodingKey {
        case destBucket
        case destKeyPrefix
        case format
        case widthInPixel
        case heightInPixel
        case keys
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ThumbnailTaskTargetCodingKeys.self)
        self.destBucket = try decoderContainer.decode(String.self, forKey: .destBucket)
        if decoderContainer.contains(.destKeyPrefix)
        {
            self.destKeyPrefix = try decoderContainer.decode(String?.self, forKey: .destKeyPrefix)
        }
        if decoderContainer.contains(.format)
        {
            self.format = try decoderContainer.decode(String?.self, forKey: .format)
        }
        if decoderContainer.contains(.widthInPixel)
        {
            self.widthInPixel = try decoderContainer.decode(Int?.self, forKey: .widthInPixel)
        }
        if decoderContainer.contains(.heightInPixel)
        {
            self.heightInPixel = try decoderContainer.decode(Int?.self, forKey: .heightInPixel)
        }
        if decoderContainer.contains(.keys)
        {
            self.keys = try decoderContainer.decode([String?]?.self, forKey: .keys)
        }
    }
}
public extension ThumbnailTaskTarget{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ThumbnailTaskTargetCodingKeys.self)
         try encoderContainer.encode(destBucket, forKey: .destBucket)
         try encoderContainer.encode(destKeyPrefix, forKey: .destKeyPrefix)
         try encoderContainer.encode(format, forKey: .format)
         try encoderContainer.encode(widthInPixel, forKey: .widthInPixel)
         try encoderContainer.encode(heightInPixel, forKey: .heightInPixel)
         try encoderContainer.encode(keys, forKey: .keys)
    }
}
///  thumbnailQuery
public class ThumbnailQuery:NSObject,Codable{
    /// 状态 (SUCCESS, ERROR, PENDDING, RUNNING)
    var status:String?
    /// 查询开始时间 时间格式(GMT): yyyy-MM-dd’T’HH:mm:ss.SSS’Z’
    var begin:String?
    /// 查询结束时间 时间格式(GMT): yyyy-MM-dd’T’HH:mm:ss.SSS’Z’
    var end:String?
    /// 本次请求的marker, 标记查询的起始位置, 此处为taskID
    var marker:String?
    /// 本次请求返回的任务列表的最大元素个数, 有效值: [1-1000]，默认值: 1000
    var limit:Int?
    /// 获取下一页所需要传递的marker值(此处为taskID), 仅当isTruncated为true时(数据未全部返回)出现 (readonly)
    var nextMarker:String?
    /// 指明返回数据是否被截断. true表示本页后面还有数据, 即数据未全部返回; false表示已是最后一页, 即数据已全部返回 (readonly)
    var truncated:Bool?
    /// 返回的task列表 (readonly)
    var taskList:[ThumbnailTask?]?



    public override init(){
            super.init()
    }

    enum ThumbnailQueryCodingKeys: String, CodingKey {
        case status
        case begin
        case end
        case marker
        case limit
        case nextMarker
        case truncated
        case taskList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ThumbnailQueryCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.begin)
        {
            self.begin = try decoderContainer.decode(String?.self, forKey: .begin)
        }
        if decoderContainer.contains(.end)
        {
            self.end = try decoderContainer.decode(String?.self, forKey: .end)
        }
        if decoderContainer.contains(.marker)
        {
            self.marker = try decoderContainer.decode(String?.self, forKey: .marker)
        }
        if decoderContainer.contains(.limit)
        {
            self.limit = try decoderContainer.decode(Int?.self, forKey: .limit)
        }
        if decoderContainer.contains(.nextMarker)
        {
            self.nextMarker = try decoderContainer.decode(String?.self, forKey: .nextMarker)
        }
        if decoderContainer.contains(.truncated)
        {
            self.truncated = try decoderContainer.decode(Bool?.self, forKey: .truncated)
        }
        if decoderContainer.contains(.taskList)
        {
            self.taskList = try decoderContainer.decode([ThumbnailTask?]?.self, forKey: .taskList)
        }
    }
}
public extension ThumbnailQuery{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ThumbnailQueryCodingKeys.self)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(begin, forKey: .begin)
         try encoderContainer.encode(end, forKey: .end)
         try encoderContainer.encode(marker, forKey: .marker)
         try encoderContainer.encode(limit, forKey: .limit)
         try encoderContainer.encode(nextMarker, forKey: .nextMarker)
         try encoderContainer.encode(truncated, forKey: .truncated)
         try encoderContainer.encode(taskList, forKey: .taskList)
    }
}
///  transcodeStatus
public class TranscodeStatus:NSObject,Codable{
    /// 状态 (SUCESS, ERROR, PENDDING, RUNNING)
    /// Required:true
    var status:String
    /// 错误码
    var errorCode:Int?
    /// 通知消息, 由work调用, 暂时方案
    var notifyMessage:String?



    public  init(status:String){
             self.status = status
    }

    enum TranscodeStatusCodingKeys: String, CodingKey {
        case status
        case errorCode
        case notifyMessage
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TranscodeStatusCodingKeys.self)
        self.status = try decoderContainer.decode(String.self, forKey: .status)
        if decoderContainer.contains(.errorCode)
        {
            self.errorCode = try decoderContainer.decode(Int?.self, forKey: .errorCode)
        }
        if decoderContainer.contains(.notifyMessage)
        {
            self.notifyMessage = try decoderContainer.decode(String?.self, forKey: .notifyMessage)
        }
    }
}
public extension TranscodeStatus{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TranscodeStatusCodingKeys.self)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(errorCode, forKey: .errorCode)
         try encoderContainer.encode(notifyMessage, forKey: .notifyMessage)
    }
}
///  thumbnailTaskID
public class ThumbnailTaskID:NSObject,Codable{
    /// TaskID
    var taskID:String?



    public override init(){
            super.init()
    }

    enum ThumbnailTaskIDCodingKeys: String, CodingKey {
        case taskID
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ThumbnailTaskIDCodingKeys.self)
        if decoderContainer.contains(.taskID)
        {
            self.taskID = try decoderContainer.decode(String?.self, forKey: .taskID)
        }
    }
}
public extension ThumbnailTaskID{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ThumbnailTaskIDCodingKeys.self)
         try encoderContainer.encode(taskID, forKey: .taskID)
    }
}
