/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   媒体处理相关接口
   媒体处理API

   OpenAPI spec version: 1.0.0
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  视频截图目标文件参数
@objc(ThumbnailTaskTarget)
public class ThumbnailTaskTarget:NSObject,Codable{
    /// 输入存放目标文件的 bucket
    /// Required:true
    var destBucket:String
    /// 目标截图的Key的前缀, &#39;前缀-taskID-%04d(num).(format)&#39;, 默认: sourceKey
    var destKeyPrefix:String?
    /// 目标截图的格式 default: jpg
    var format:String?
    /// 目标截图的宽, 如果视频实际分辨率低于目标分辨率则按照实际分辨率输出 default: 0 代表源视频高 其他[8, 4096]
    var widthInPixel:Int?
    /// 目标截图的高, 如果视频实际分辨率低于目标分辨率则按照实际分辨率输出 default: 0 代表源视频高 其他[8, 4096]
    var heightInPixel:Int?
    /// 目标截图的Key的集合 (readonly)
    var keys:[String?]?



    public  init(destBucket:String){
             self.destBucket = destBucket
    }

    enum ThumbnailTaskTargetCodingKeys: String, CodingKey {
        case destBucket
        case destKeyPrefix
        case format
        case widthInPixel
        case heightInPixel
        case keys
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ThumbnailTaskTargetCodingKeys.self)
        self.destBucket = try decoderContainer.decode(String.self, forKey: .destBucket)
        if decoderContainer.contains(.destKeyPrefix)
        {
            self.destKeyPrefix = try decoderContainer.decode(String?.self, forKey: .destKeyPrefix)
        }
        if decoderContainer.contains(.format)
        {
            self.format = try decoderContainer.decode(String?.self, forKey: .format)
        }
        if decoderContainer.contains(.widthInPixel)
        {
            self.widthInPixel = try decoderContainer.decode(Int?.self, forKey: .widthInPixel)
        }
        if decoderContainer.contains(.heightInPixel)
        {
            self.heightInPixel = try decoderContainer.decode(Int?.self, forKey: .heightInPixel)
        }
        if decoderContainer.contains(.keys)
        {
            self.keys = try decoderContainer.decode([String?]?.self, forKey: .keys)
        }
    }
}
public extension ThumbnailTaskTarget{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ThumbnailTaskTargetCodingKeys.self)
         try encoderContainer.encode(destBucket, forKey: .destBucket)
         try encoderContainer.encode(destKeyPrefix, forKey: .destKeyPrefix)
         try encoderContainer.encode(format, forKey: .format)
         try encoderContainer.encode(widthInPixel, forKey: .widthInPixel)
         try encoderContainer.encode(heightInPixel, forKey: .heightInPixel)
         try encoderContainer.encode(keys, forKey: .keys)
    }
}
