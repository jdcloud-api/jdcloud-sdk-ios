/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   媒体处理相关接口
   媒体处理API

   OpenAPI spec version: 1.0.0
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  thumbnailStatus
@objc(ThumbnailStatus)
public class ThumbnailStatus:NSObject,Codable{
    /// 状态 (SUCESS, ERROR, PENDDING, RUNNING)
    /// Required:true
    var status:String
    /// 错误码
    var errorCode:Int?
    /// 成功时生成的截图文件个数
    var count:Int?



    public  init(status:String){
             self.status = status
    }

    enum ThumbnailStatusCodingKeys: String, CodingKey {
        case status
        case errorCode
        case count
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ThumbnailStatusCodingKeys.self)
        self.status = try decoderContainer.decode(String.self, forKey: .status)
        if decoderContainer.contains(.errorCode)
        {
            self.errorCode = try decoderContainer.decode(Int?.self, forKey: .errorCode)
        }
        if decoderContainer.contains(.count)
        {
            self.count = try decoderContainer.decode(Int?.self, forKey: .count)
        }
    }
}
public extension ThumbnailStatus{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ThumbnailStatusCodingKeys.self)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(errorCode, forKey: .errorCode)
         try encoderContainer.encode(count, forKey: .count)
    }
}
