/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  dicDetail
@objc(DicDetail)
public class DicDetail:NSObject,Codable{
    /// ID
    var id:Double?
    /// 字典类型
    var codeType:String?
    /// 字典编码
    var code:String?
    /// 字典编码名称
    var name:String?
    /// 字典编码值
    var value:String?
    /// null
    var useFlag:Bool?
    /// 系统类型
    var systemType:String?
    /// 引用值
    var refValue:String?
    /// 顺序
    var seq:Int?
    /// 字典说明
    var remark:String?
    /// 创建时间
    var createTime:String?
    /// 创建人
    var createUser:String?
    /// 修改时间
    var updateTime:String?
    /// 修改人
    var updateUser:String?
    /// 是否删除0未删除,1已删除
    var yn:Int?



    public override init(){
            super.init()
    }

    enum DicDetailCodingKeys: String, CodingKey {
        case id
        case codeType
        case code
        case name
        case value
        case useFlag
        case systemType
        case refValue
        case seq
        case remark
        case createTime
        case createUser
        case updateTime
        case updateUser
        case yn
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DicDetailCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Double?.self, forKey: .id)
        }
        if decoderContainer.contains(.codeType)
        {
            self.codeType = try decoderContainer.decode(String?.self, forKey: .codeType)
        }
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(String?.self, forKey: .code)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.value)
        {
            self.value = try decoderContainer.decode(String?.self, forKey: .value)
        }
        if decoderContainer.contains(.useFlag)
        {
            self.useFlag = try decoderContainer.decode(Bool?.self, forKey: .useFlag)
        }
        if decoderContainer.contains(.systemType)
        {
            self.systemType = try decoderContainer.decode(String?.self, forKey: .systemType)
        }
        if decoderContainer.contains(.refValue)
        {
            self.refValue = try decoderContainer.decode(String?.self, forKey: .refValue)
        }
        if decoderContainer.contains(.seq)
        {
            self.seq = try decoderContainer.decode(Int?.self, forKey: .seq)
        }
        if decoderContainer.contains(.remark)
        {
            self.remark = try decoderContainer.decode(String?.self, forKey: .remark)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.createUser)
        {
            self.createUser = try decoderContainer.decode(String?.self, forKey: .createUser)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
        if decoderContainer.contains(.updateUser)
        {
            self.updateUser = try decoderContainer.decode(String?.self, forKey: .updateUser)
        }
        if decoderContainer.contains(.yn)
        {
            self.yn = try decoderContainer.decode(Int?.self, forKey: .yn)
        }
    }
}
public extension DicDetail{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DicDetailCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(codeType, forKey: .codeType)
         try encoderContainer.encode(code, forKey: .code)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(value, forKey: .value)
         try encoderContainer.encode(useFlag, forKey: .useFlag)
         try encoderContainer.encode(systemType, forKey: .systemType)
         try encoderContainer.encode(refValue, forKey: .refValue)
         try encoderContainer.encode(seq, forKey: .seq)
         try encoderContainer.encode(remark, forKey: .remark)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(createUser, forKey: .createUser)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
         try encoderContainer.encode(updateUser, forKey: .updateUser)
         try encoderContainer.encode(yn, forKey: .yn)
    }
}
