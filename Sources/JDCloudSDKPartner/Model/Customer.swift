/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  customer
@objc(Customer)
public class Customer:NSObject,Codable{
    /// ID
    var id:Int?
    /// 客户pin
    var pin:String?
    /// 渠道商ID
    var distributorId:String?
    /// 渠道商PIN
    var distributorPin:String?
    /// 渠道商名称
    var distributorName:String?
    /// 渠道商级次
    var distributorLevel:String?
    /// 关联时间
    var relTime:String?
    /// 来源(0渠道商自身,1京东云客户)
    var source:Int?
    /// 客户昵称
    var aliasName:String?
    /// 客户联系人
    var contracter:String?
    /// 客户电话
    var tel:String?
    /// 客户邮箱
    var email:String?
    /// 客户备注
    var remark:String?
    /// 创建时间
    var createTime:String?
    /// 创建人
    var createUser:String?
    /// 修改时间
    var updateTime:String?
    /// 修改人
    var updateUser:String?
    /// 账户类型
    var accountTypeName:String?
    /// 实名标识名称
    var realName:String?
    /// 名称
    var name:String?
    /// 是否删除0未删除,1已删除
    var yn:Int?



    public override init(){
            super.init()
    }

    enum CustomerCodingKeys: String, CodingKey {
        case id
        case pin
        case distributorId
        case distributorPin
        case distributorName
        case distributorLevel
        case relTime
        case source
        case aliasName
        case contracter
        case tel
        case email
        case remark
        case createTime
        case createUser
        case updateTime
        case updateUser
        case accountTypeName
        case realName
        case name
        case yn
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CustomerCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.distributorId)
        {
            self.distributorId = try decoderContainer.decode(String?.self, forKey: .distributorId)
        }
        if decoderContainer.contains(.distributorPin)
        {
            self.distributorPin = try decoderContainer.decode(String?.self, forKey: .distributorPin)
        }
        if decoderContainer.contains(.distributorName)
        {
            self.distributorName = try decoderContainer.decode(String?.self, forKey: .distributorName)
        }
        if decoderContainer.contains(.distributorLevel)
        {
            self.distributorLevel = try decoderContainer.decode(String?.self, forKey: .distributorLevel)
        }
        if decoderContainer.contains(.relTime)
        {
            self.relTime = try decoderContainer.decode(String?.self, forKey: .relTime)
        }
        if decoderContainer.contains(.source)
        {
            self.source = try decoderContainer.decode(Int?.self, forKey: .source)
        }
        if decoderContainer.contains(.aliasName)
        {
            self.aliasName = try decoderContainer.decode(String?.self, forKey: .aliasName)
        }
        if decoderContainer.contains(.contracter)
        {
            self.contracter = try decoderContainer.decode(String?.self, forKey: .contracter)
        }
        if decoderContainer.contains(.tel)
        {
            self.tel = try decoderContainer.decode(String?.self, forKey: .tel)
        }
        if decoderContainer.contains(.email)
        {
            self.email = try decoderContainer.decode(String?.self, forKey: .email)
        }
        if decoderContainer.contains(.remark)
        {
            self.remark = try decoderContainer.decode(String?.self, forKey: .remark)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.createUser)
        {
            self.createUser = try decoderContainer.decode(String?.self, forKey: .createUser)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
        if decoderContainer.contains(.updateUser)
        {
            self.updateUser = try decoderContainer.decode(String?.self, forKey: .updateUser)
        }
        if decoderContainer.contains(.accountTypeName)
        {
            self.accountTypeName = try decoderContainer.decode(String?.self, forKey: .accountTypeName)
        }
        if decoderContainer.contains(.realName)
        {
            self.realName = try decoderContainer.decode(String?.self, forKey: .realName)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.yn)
        {
            self.yn = try decoderContainer.decode(Int?.self, forKey: .yn)
        }
    }
}
public extension Customer{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CustomerCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(distributorId, forKey: .distributorId)
         try encoderContainer.encode(distributorPin, forKey: .distributorPin)
         try encoderContainer.encode(distributorName, forKey: .distributorName)
         try encoderContainer.encode(distributorLevel, forKey: .distributorLevel)
         try encoderContainer.encode(relTime, forKey: .relTime)
         try encoderContainer.encode(source, forKey: .source)
         try encoderContainer.encode(aliasName, forKey: .aliasName)
         try encoderContainer.encode(contracter, forKey: .contracter)
         try encoderContainer.encode(tel, forKey: .tel)
         try encoderContainer.encode(email, forKey: .email)
         try encoderContainer.encode(remark, forKey: .remark)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(createUser, forKey: .createUser)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
         try encoderContainer.encode(updateUser, forKey: .updateUser)
         try encoderContainer.encode(accountTypeName, forKey: .accountTypeName)
         try encoderContainer.encode(realName, forKey: .realName)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(yn, forKey: .yn)
    }
}
