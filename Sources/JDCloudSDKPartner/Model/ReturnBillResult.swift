/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   returnBill
   渠道管理平台返还单

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  returnBillResult
@objc(ReturnBillResult)
public class ReturnBillResult:NSObject,Codable{
    /// ID
    var id:Double?
    /// 返还单号
    var retrunBillId:String?
    /// 服务商ID
    var distributorId:String?
    /// 服务商名称
    var distributorName:String?
    /// 渠道商类型
    var distributorType:Int?
    /// month
    var month:String?
    /// 生成时间
    var generateTime:String?
    /// 开始时间
    var billBegin:String?
    /// 结束时间
    var billEnd:String?
    /// 周期类型
    var circleType:Int?
    /// 返还类型
    var returnType:Int?
    /// 返还类型名称
    var returnTypeName:String?
    /// 返还金额
    var returnMount:Double?
    /// 次数
    var redoQty:Int?
    /// 状态
    var status:Int?
    /// 状态名称
    var statusName:String?
    /// 驳回原因
    var reason:String?
    /// 部门ID
    var deptId:Int?
    /// 部门名称
    var deptName:String?
    /// 创建时间
    var createTime:String?
    /// 创建人
    var createUser:String?
    /// 修改时间
    var updateTime:String?
    /// 修改人
    var updateUser:String?
    /// 是否删除0未删除,1已删除
    var yn:Int?
    /// 返还单明细
    var returnBillDetailList:[ReturnBillDetailResult?]?
    /// 返还单状态
    var returnBillStatusList:[ReturnBillStatusResult?]?



    public override init(){
            super.init()
    }

    enum ReturnBillResultCodingKeys: String, CodingKey {
        case id
        case retrunBillId
        case distributorId
        case distributorName
        case distributorType
        case month
        case generateTime
        case billBegin
        case billEnd
        case circleType
        case returnType
        case returnTypeName
        case returnMount
        case redoQty
        case status
        case statusName
        case reason
        case deptId
        case deptName
        case createTime
        case createUser
        case updateTime
        case updateUser
        case yn
        case returnBillDetailList
        case returnBillStatusList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReturnBillResultCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Double?.self, forKey: .id)
        }
        if decoderContainer.contains(.retrunBillId)
        {
            self.retrunBillId = try decoderContainer.decode(String?.self, forKey: .retrunBillId)
        }
        if decoderContainer.contains(.distributorId)
        {
            self.distributorId = try decoderContainer.decode(String?.self, forKey: .distributorId)
        }
        if decoderContainer.contains(.distributorName)
        {
            self.distributorName = try decoderContainer.decode(String?.self, forKey: .distributorName)
        }
        if decoderContainer.contains(.distributorType)
        {
            self.distributorType = try decoderContainer.decode(Int?.self, forKey: .distributorType)
        }
        if decoderContainer.contains(.month)
        {
            self.month = try decoderContainer.decode(String?.self, forKey: .month)
        }
        if decoderContainer.contains(.generateTime)
        {
            self.generateTime = try decoderContainer.decode(String?.self, forKey: .generateTime)
        }
        if decoderContainer.contains(.billBegin)
        {
            self.billBegin = try decoderContainer.decode(String?.self, forKey: .billBegin)
        }
        if decoderContainer.contains(.billEnd)
        {
            self.billEnd = try decoderContainer.decode(String?.self, forKey: .billEnd)
        }
        if decoderContainer.contains(.circleType)
        {
            self.circleType = try decoderContainer.decode(Int?.self, forKey: .circleType)
        }
        if decoderContainer.contains(.returnType)
        {
            self.returnType = try decoderContainer.decode(Int?.self, forKey: .returnType)
        }
        if decoderContainer.contains(.returnTypeName)
        {
            self.returnTypeName = try decoderContainer.decode(String?.self, forKey: .returnTypeName)
        }
        if decoderContainer.contains(.returnMount)
        {
            self.returnMount = try decoderContainer.decode(Double?.self, forKey: .returnMount)
        }
        if decoderContainer.contains(.redoQty)
        {
            self.redoQty = try decoderContainer.decode(Int?.self, forKey: .redoQty)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.statusName)
        {
            self.statusName = try decoderContainer.decode(String?.self, forKey: .statusName)
        }
        if decoderContainer.contains(.reason)
        {
            self.reason = try decoderContainer.decode(String?.self, forKey: .reason)
        }
        if decoderContainer.contains(.deptId)
        {
            self.deptId = try decoderContainer.decode(Int?.self, forKey: .deptId)
        }
        if decoderContainer.contains(.deptName)
        {
            self.deptName = try decoderContainer.decode(String?.self, forKey: .deptName)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.createUser)
        {
            self.createUser = try decoderContainer.decode(String?.self, forKey: .createUser)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
        if decoderContainer.contains(.updateUser)
        {
            self.updateUser = try decoderContainer.decode(String?.self, forKey: .updateUser)
        }
        if decoderContainer.contains(.yn)
        {
            self.yn = try decoderContainer.decode(Int?.self, forKey: .yn)
        }
        if decoderContainer.contains(.returnBillDetailList)
        {
            self.returnBillDetailList = try decoderContainer.decode([ReturnBillDetailResult?]?.self, forKey: .returnBillDetailList)
        }
        if decoderContainer.contains(.returnBillStatusList)
        {
            self.returnBillStatusList = try decoderContainer.decode([ReturnBillStatusResult?]?.self, forKey: .returnBillStatusList)
        }
    }
}
public extension ReturnBillResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReturnBillResultCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(retrunBillId, forKey: .retrunBillId)
         try encoderContainer.encode(distributorId, forKey: .distributorId)
         try encoderContainer.encode(distributorName, forKey: .distributorName)
         try encoderContainer.encode(distributorType, forKey: .distributorType)
         try encoderContainer.encode(month, forKey: .month)
         try encoderContainer.encode(generateTime, forKey: .generateTime)
         try encoderContainer.encode(billBegin, forKey: .billBegin)
         try encoderContainer.encode(billEnd, forKey: .billEnd)
         try encoderContainer.encode(circleType, forKey: .circleType)
         try encoderContainer.encode(returnType, forKey: .returnType)
         try encoderContainer.encode(returnTypeName, forKey: .returnTypeName)
         try encoderContainer.encode(returnMount, forKey: .returnMount)
         try encoderContainer.encode(redoQty, forKey: .redoQty)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(statusName, forKey: .statusName)
         try encoderContainer.encode(reason, forKey: .reason)
         try encoderContainer.encode(deptId, forKey: .deptId)
         try encoderContainer.encode(deptName, forKey: .deptName)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(createUser, forKey: .createUser)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
         try encoderContainer.encode(updateUser, forKey: .updateUser)
         try encoderContainer.encode(yn, forKey: .yn)
         try encoderContainer.encode(returnBillDetailList, forKey: .returnBillDetailList)
         try encoderContainer.encode(returnBillStatusList, forKey: .returnBillStatusList)
    }
}
