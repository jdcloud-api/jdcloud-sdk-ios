/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  department
@objc(Department)
public class Department:NSObject,Codable{
    /// ID
    var id:Int?
    /// 部门编号
    var depId:String?
    /// 部门名称
    var depName:String?
    /// 是否删除0未删除,1已删除
    var isDeleted:Int?



    public override init(){
            super.init()
    }

    enum DepartmentCodingKeys: String, CodingKey {
        case id
        case depId
        case depName
        case isDeleted
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DepartmentCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.depId)
        {
            self.depId = try decoderContainer.decode(String?.self, forKey: .depId)
        }
        if decoderContainer.contains(.depName)
        {
            self.depName = try decoderContainer.decode(String?.self, forKey: .depName)
        }
        if decoderContainer.contains(.isDeleted)
        {
            self.isDeleted = try decoderContainer.decode(Int?.self, forKey: .isDeleted)
        }
    }
}
public extension Department{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DepartmentCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(depId, forKey: .depId)
         try encoderContainer.encode(depName, forKey: .depName)
         try encoderContainer.encode(isDeleted, forKey: .isDeleted)
    }
}
