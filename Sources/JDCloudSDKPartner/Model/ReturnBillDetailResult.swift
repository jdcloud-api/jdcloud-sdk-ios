/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   returnBill
   渠道管理平台返还单

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  returnBillDetailResult
@objc(ReturnBillDetailResult)
public class ReturnBillDetailResult:NSObject,Codable{
    /// ID
    var id:Double?
    /// 服务商ID
    var distributorId:String?
    /// 渠道商类型
    var distributorType:Int?
    /// 生成时间
    var generateTime:String?
    /// 返还类型
    var returnType:Int?
    /// 返还项目ID
    var itemId:Double?
    /// 返还项目名称
    var itemName:String?
    /// 周期类型
    var circleType:Int?
    /// 周期名称
    var circleName:Int?
    /// 周期值
    var circleValue:Int?
    /// 周期值名称
    var circleValueName:String?
    /// 开始时间
    var circleBegin:String?
    /// 结束时间
    var circleEnd:String?
    /// 返还金额
    var returnMount:Double?
    /// 业绩金额
    var amount:Double?
    /// 条件值
    var conditionValue:String?
    /// 条件值名称
    var conditionValueName:String?
    /// 是否返还标识
    var returnFlag:Int?
    /// 返还比例
    var returnRatio:Double?
    /// 返还比例名称
    var returnRatioName:String?
    /// 返还单号
    var returnOrderId:String?
    /// 部门ID
    var deptId:Int?
    /// 部门名称
    var deptName:String?
    /// 状态
    var status:Int?
    /// 创建时间
    var createTime:String?
    /// 创建人
    var createUser:String?
    /// 修改时间
    var updateTime:String?
    /// 修改人
    var updateUser:String?
    /// 是否删除0未删除,1已删除
    var yn:Int?



    public override init(){
            super.init()
    }

    enum ReturnBillDetailResultCodingKeys: String, CodingKey {
        case id
        case distributorId
        case distributorType
        case generateTime
        case returnType
        case itemId
        case itemName
        case circleType
        case circleName
        case circleValue
        case circleValueName
        case circleBegin
        case circleEnd
        case returnMount
        case amount
        case conditionValue
        case conditionValueName
        case returnFlag
        case returnRatio
        case returnRatioName
        case returnOrderId
        case deptId
        case deptName
        case status
        case createTime
        case createUser
        case updateTime
        case updateUser
        case yn
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReturnBillDetailResultCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Double?.self, forKey: .id)
        }
        if decoderContainer.contains(.distributorId)
        {
            self.distributorId = try decoderContainer.decode(String?.self, forKey: .distributorId)
        }
        if decoderContainer.contains(.distributorType)
        {
            self.distributorType = try decoderContainer.decode(Int?.self, forKey: .distributorType)
        }
        if decoderContainer.contains(.generateTime)
        {
            self.generateTime = try decoderContainer.decode(String?.self, forKey: .generateTime)
        }
        if decoderContainer.contains(.returnType)
        {
            self.returnType = try decoderContainer.decode(Int?.self, forKey: .returnType)
        }
        if decoderContainer.contains(.itemId)
        {
            self.itemId = try decoderContainer.decode(Double?.self, forKey: .itemId)
        }
        if decoderContainer.contains(.itemName)
        {
            self.itemName = try decoderContainer.decode(String?.self, forKey: .itemName)
        }
        if decoderContainer.contains(.circleType)
        {
            self.circleType = try decoderContainer.decode(Int?.self, forKey: .circleType)
        }
        if decoderContainer.contains(.circleName)
        {
            self.circleName = try decoderContainer.decode(Int?.self, forKey: .circleName)
        }
        if decoderContainer.contains(.circleValue)
        {
            self.circleValue = try decoderContainer.decode(Int?.self, forKey: .circleValue)
        }
        if decoderContainer.contains(.circleValueName)
        {
            self.circleValueName = try decoderContainer.decode(String?.self, forKey: .circleValueName)
        }
        if decoderContainer.contains(.circleBegin)
        {
            self.circleBegin = try decoderContainer.decode(String?.self, forKey: .circleBegin)
        }
        if decoderContainer.contains(.circleEnd)
        {
            self.circleEnd = try decoderContainer.decode(String?.self, forKey: .circleEnd)
        }
        if decoderContainer.contains(.returnMount)
        {
            self.returnMount = try decoderContainer.decode(Double?.self, forKey: .returnMount)
        }
        if decoderContainer.contains(.amount)
        {
            self.amount = try decoderContainer.decode(Double?.self, forKey: .amount)
        }
        if decoderContainer.contains(.conditionValue)
        {
            self.conditionValue = try decoderContainer.decode(String?.self, forKey: .conditionValue)
        }
        if decoderContainer.contains(.conditionValueName)
        {
            self.conditionValueName = try decoderContainer.decode(String?.self, forKey: .conditionValueName)
        }
        if decoderContainer.contains(.returnFlag)
        {
            self.returnFlag = try decoderContainer.decode(Int?.self, forKey: .returnFlag)
        }
        if decoderContainer.contains(.returnRatio)
        {
            self.returnRatio = try decoderContainer.decode(Double?.self, forKey: .returnRatio)
        }
        if decoderContainer.contains(.returnRatioName)
        {
            self.returnRatioName = try decoderContainer.decode(String?.self, forKey: .returnRatioName)
        }
        if decoderContainer.contains(.returnOrderId)
        {
            self.returnOrderId = try decoderContainer.decode(String?.self, forKey: .returnOrderId)
        }
        if decoderContainer.contains(.deptId)
        {
            self.deptId = try decoderContainer.decode(Int?.self, forKey: .deptId)
        }
        if decoderContainer.contains(.deptName)
        {
            self.deptName = try decoderContainer.decode(String?.self, forKey: .deptName)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.createUser)
        {
            self.createUser = try decoderContainer.decode(String?.self, forKey: .createUser)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
        if decoderContainer.contains(.updateUser)
        {
            self.updateUser = try decoderContainer.decode(String?.self, forKey: .updateUser)
        }
        if decoderContainer.contains(.yn)
        {
            self.yn = try decoderContainer.decode(Int?.self, forKey: .yn)
        }
    }
}
public extension ReturnBillDetailResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReturnBillDetailResultCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(distributorId, forKey: .distributorId)
         try encoderContainer.encode(distributorType, forKey: .distributorType)
         try encoderContainer.encode(generateTime, forKey: .generateTime)
         try encoderContainer.encode(returnType, forKey: .returnType)
         try encoderContainer.encode(itemId, forKey: .itemId)
         try encoderContainer.encode(itemName, forKey: .itemName)
         try encoderContainer.encode(circleType, forKey: .circleType)
         try encoderContainer.encode(circleName, forKey: .circleName)
         try encoderContainer.encode(circleValue, forKey: .circleValue)
         try encoderContainer.encode(circleValueName, forKey: .circleValueName)
         try encoderContainer.encode(circleBegin, forKey: .circleBegin)
         try encoderContainer.encode(circleEnd, forKey: .circleEnd)
         try encoderContainer.encode(returnMount, forKey: .returnMount)
         try encoderContainer.encode(amount, forKey: .amount)
         try encoderContainer.encode(conditionValue, forKey: .conditionValue)
         try encoderContainer.encode(conditionValueName, forKey: .conditionValueName)
         try encoderContainer.encode(returnFlag, forKey: .returnFlag)
         try encoderContainer.encode(returnRatio, forKey: .returnRatio)
         try encoderContainer.encode(returnRatioName, forKey: .returnRatioName)
         try encoderContainer.encode(returnOrderId, forKey: .returnOrderId)
         try encoderContainer.encode(deptId, forKey: .deptId)
         try encoderContainer.encode(deptName, forKey: .deptName)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(createUser, forKey: .createUser)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
         try encoderContainer.encode(updateUser, forKey: .updateUser)
         try encoderContainer.encode(yn, forKey: .yn)
    }
}
