/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Live API
   直播管理API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  查看域名下推流记录
@objc(DescribeLiveStreamPublishListRequest)
public class DescribeLiveStreamPublishListRequest:JdCloudRequest
{
    /// 页码；默认为1；取值范围[1, 100000]
    var pageNum:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// 直播流所属应用名称
    var appName:String?

    /// 直播流名称
    var streamName:String?

    /// 起始时间
    var startTime:String

    /// 结束时间
    var endTime:String?

    /// 推流域名
    var publishDomain:String


    public init(regionId: String,startTime:String,publishDomain:String){
        self.startTime = startTime
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamPublishListRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case appName
        case streamName
        case startTime
        case endTime
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamPublishListRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}
