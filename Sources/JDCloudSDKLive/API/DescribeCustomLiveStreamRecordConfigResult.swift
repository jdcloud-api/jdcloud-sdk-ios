/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Live-Video
   直播管理API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询直播直播录制配置
      ///       /// - 录制模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
      ///       /// - 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
      ///       /// - 该查询旨在查询域名、应用、流最终生效的录制模板配置,并非各级的模板绑定情况
      ///       /// 
@objc(DescribeCustomLiveStreamRecordConfigResult)
public class DescribeCustomLiveStreamRecordConfigResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 模板信息
    var recordConfigs:[LiveRecordConfig?]?



    public override init(){
        super.init()
    }

    enum DescribeCustomLiveStreamRecordConfigResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case recordConfigs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamRecordConfigResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.recordConfigs)
        {
            self.recordConfigs = try decoderContainer.decode([LiveRecordConfig?]?.self, forKey: .recordConfigs)
        }
    }
}
public extension DescribeCustomLiveStreamRecordConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamRecordConfigResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(recordConfigs, forKey: .recordConfigs)
    }
}
