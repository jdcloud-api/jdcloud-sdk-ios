/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Live-Video
   直播管理API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 设置直播流状态回调地址 
public class SetLiveStreamNotifyConfigResult:NSObject,JdCloudResult
{
}
public class DescribeLiveStreamPublishListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamPublishListResult?;

    enum DescribeLiveStreamPublishListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamPublishListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamPublishListResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamPublishListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamPublishListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  禁止直播流推送
public class ForbidLiveStreamRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 流名称
    var streamName:String

    /// 禁流时长,单位:s 0表示永久禁流;大于0为限时禁流,超过时长自动解禁
    var forbidTime:Int64?


    public init(regionId: String,publishDomain:String,appName:String,streamName:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.streamName = streamName
        super.init(regionId: regionId)
    }


    enum ForbidLiveStreamRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case streamName
        case forbidTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ForbidLiveStreamRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(forbidTime, forKey: .forbidTime)

    }
}

/// 中断直播流推送
      ///       /// - 中断操作1秒后可以继续推流
      ///       ///  
public class InterruptLiveStreamResult:NSObject,JdCloudResult
{
}

///  查询直播实时流信息
      ///       /// 
public class DescribeLiveStreamInfoRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 流名称
    var streamName:String


    public init(regionId: String,publishDomain:String,appName:String,streamName:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.streamName = streamName
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamInfoRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case streamName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)

    }
}

public class DescribeLiveStreamNotifyConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamNotifyConfigResult?;

    enum DescribeLiveStreamNotifyConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamNotifyConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamNotifyConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamNotifyConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamNotifyConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除直播流状态回调地址 
public class DeleteLiveStreamNotifyConfigResult:NSObject,JdCloudResult
{
}
public class DeleteLiveStreamNotifyConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamNotifyConfigResult?;

    enum DeleteLiveStreamNotifyConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamNotifyConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamNotifyConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamNotifyConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamNotifyConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 禁止直播流推送 
public class ForbidLiveStreamResult:NSObject,JdCloudResult
{
}

///  中断直播流推送
      ///       /// - 中断操作1秒后可以继续推流
      ///       /// 
public class InterruptLiveStreamRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 流名称
    var streamName:String


    public init(regionId: String,publishDomain:String,appName:String,streamName:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.streamName = streamName
        super.init(regionId: regionId)
    }


    enum InterruptLiveStreamRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case streamName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InterruptLiveStreamRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)

    }
}


///  查看推流历史记录
public class DescribeLiveStreamPublishListRequest:JdCloudRequest
{
    /// 页码&lt;br&gt;
      /// - 取值范围[1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小&lt;br&gt;
      /// - 取值范围[10, 100]
      /// 
    var pageSize:Int?

    /// 应用名称
    var appName:String?

    /// 流名称
    var streamName:String?

    /// 推流起始时间&lt;br&gt;
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 最大支持最近30天内的流历史查询
      /// 
    var startTime:String

    /// 推流结束时间&lt;br&gt;
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 最大支持最近30天内的流历史查询
      /// - 结束时间为空默认为当前时间
      /// 
    var endTime:String?

    /// 推流域名
    var publishDomain:String


    public init(regionId: String,startTime:String,publishDomain:String){
        self.startTime = startTime
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamPublishListRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case appName
        case streamName
        case startTime
        case endTime
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamPublishListRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}


///  设置直播流状态回调地址
public class SetLiveStreamNotifyConfigRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 直播流状态回调地址
      /// - 必须以 http:// 开头
      /// 
    var notifyUrl:String


    public init(regionId: String,publishDomain:String,notifyUrl:String){
        self.publishDomain = publishDomain
        self.notifyUrl = notifyUrl
        super.init(regionId: regionId)
    }


    enum SetLiveStreamNotifyConfigRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case notifyUrl
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveStreamNotifyConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(notifyUrl, forKey: .notifyUrl)

    }
}

/// 查看推流历史记录 
public class DescribeLiveStreamPublishListResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 推流历史集合
    var liveStreamPublishInfos:[LiveStreamPublishInfo?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamPublishListResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case liveStreamPublishInfos
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamPublishListResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.liveStreamPublishInfos)
        {
            self.liveStreamPublishInfos = try decoderContainer.decode([LiveStreamPublishInfo?]?.self, forKey: .liveStreamPublishInfos)
        }
    }
}
public extension DescribeLiveStreamPublishListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamPublishListResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(liveStreamPublishInfos, forKey: .liveStreamPublishInfos)
    }
}

///  恢复直播流推送
public class ResumeLiveStreamRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 流名称
    var streamName:String


    public init(regionId: String,publishDomain:String,appName:String,streamName:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.streamName = streamName
        super.init(regionId: regionId)
    }


    enum ResumeLiveStreamRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case streamName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResumeLiveStreamRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)

    }
}

public class DescribeLiveStreamInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamInfoResult?;

    enum DescribeLiveStreamInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除直播流状态回调地址
public class DeleteLiveStreamNotifyConfigRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String


    public init(regionId: String,publishDomain:String){
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamNotifyConfigRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamNotifyConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}

public class SetLiveStreamNotifyConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetLiveStreamNotifyConfigResult?;

    enum SetLiveStreamNotifyConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetLiveStreamNotifyConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetLiveStreamNotifyConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension SetLiveStreamNotifyConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveStreamNotifyConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询直播中的流的信息 
public class DescribeLiveStreamOnlineListResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 在线推流集合
    var onlineStreamInfos:[OnlineStreamInfo?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamOnlineListResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case onlineStreamInfos
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamOnlineListResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.onlineStreamInfos)
        {
            self.onlineStreamInfos = try decoderContainer.decode([OnlineStreamInfo?]?.self, forKey: .onlineStreamInfos)
        }
    }
}
public extension DescribeLiveStreamOnlineListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamOnlineListResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(onlineStreamInfos, forKey: .onlineStreamInfos)
    }
}
public class InterruptLiveStreamResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:InterruptLiveStreamResult?;

    enum InterruptLiveStreamResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InterruptLiveStreamResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(InterruptLiveStreamResult?.self, forKey: .result) ?? nil
    }
}

public extension InterruptLiveStreamResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InterruptLiveStreamResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ForbidLiveStreamResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ForbidLiveStreamResult?;

    enum ForbidLiveStreamResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ForbidLiveStreamResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ForbidLiveStreamResult?.self, forKey: .result) ?? nil
    }
}

public extension ForbidLiveStreamResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ForbidLiveStreamResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 恢复直播流推送 
public class ResumeLiveStreamResult:NSObject,JdCloudResult
{
}
/// 查询直播实时流信息
      ///       ///  
public class DescribeLiveStreamInfoResult:NSObject,JdCloudResult
{
    /// 推流域名
    var publishDomain:String?

    /// 应用名称
    var appName:String?

    /// 流名称
    var streamName:String?

    /// 流状态
      ///   on: 在线流
      ///   off: 非在线流
      /// 
    var status:String?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamInfoResultCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case streamName
        case status
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamInfoResultCodingKeys.self)
        if decoderContainer.contains(.publishDomain)
        {
            self.publishDomain = try decoderContainer.decode(String?.self, forKey: .publishDomain)
        }
        if decoderContainer.contains(.appName)
        {
            self.appName = try decoderContainer.decode(String?.self, forKey: .appName)
        }
        if decoderContainer.contains(.streamName)
        {
            self.streamName = try decoderContainer.decode(String?.self, forKey: .streamName)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
    }
}
public extension DescribeLiveStreamInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamInfoResultCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(status, forKey: .status)
    }
}
/// 查询直播流状态回调地址 
public class DescribeLiveStreamNotifyConfigResult:NSObject,JdCloudResult
{
    /// 推流域名
    var publishDomain:String?

    /// 流状态回调地址
    var notifyUrl:String?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamNotifyConfigResultCodingKeys: String, CodingKey {
        case publishDomain
        case notifyUrl
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamNotifyConfigResultCodingKeys.self)
        if decoderContainer.contains(.publishDomain)
        {
            self.publishDomain = try decoderContainer.decode(String?.self, forKey: .publishDomain)
        }
        if decoderContainer.contains(.notifyUrl)
        {
            self.notifyUrl = try decoderContainer.decode(String?.self, forKey: .notifyUrl)
        }
    }
}
public extension DescribeLiveStreamNotifyConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamNotifyConfigResultCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(notifyUrl, forKey: .notifyUrl)
    }
}
public class ResumeLiveStreamResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResumeLiveStreamResult?;

    enum ResumeLiveStreamResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResumeLiveStreamResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResumeLiveStreamResult?.self, forKey: .result) ?? nil
    }
}

public extension ResumeLiveStreamResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResumeLiveStreamResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询直播流状态回调地址
public class DescribeLiveStreamNotifyConfigRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String


    public init(regionId: String,publishDomain:String){
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamNotifyConfigRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamNotifyConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}


///  查询直播中的流的信息
public class DescribeLiveStreamOnlineListRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围[1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小
      /// - 取值范围[10, 100]
      /// 
    var pageSize:Int?

    /// 应用名称
    var appName:String?

    /// 推流域名
    var publishDomain:String


    public init(regionId: String,publishDomain:String){
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamOnlineListRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case appName
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamOnlineListRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}

public class DescribeLiveStreamOnlineListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamOnlineListResult?;

    enum DescribeLiveStreamOnlineListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamOnlineListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamOnlineListResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamOnlineListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamOnlineListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLiveStreamPublishBandwidthDataResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamPublishBandwidthDataResult?;

    enum DescribeLiveStreamPublishBandwidthDataResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamPublishBandwidthDataResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamPublishBandwidthDataResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamPublishBandwidthDataResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamPublishBandwidthDataResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询推流带宽
      ///       /// - 查询某个时间段内的推流上行带宽数据
      ///       /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      ///       ///  
public class DescribeLiveStreamPublishBandwidthDataResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[BandwidthStatisticResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamPublishBandwidthDataResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamPublishBandwidthDataResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([BandwidthStatisticResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveStreamPublishBandwidthDataResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamPublishBandwidthDataResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}

///  查询直播截图张数数据
public class DescribeLiveSnapshotDataRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String?

    /// 应用名称
    var appName:String?

    /// 流名称
    var streamName:String?

    /// 起始时间:
      /// - UTC时间
      ///   格式: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例: 2018-10-21T10:00:00Z
      /// - 支持最大查询90天以内的数据
      /// 
    var startTime:String

    /// 结束时间:
      /// - UTC时间
      ///   格式: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例: 2018-10-21T10:00:00Z
      /// - 为空,默认当前时间
      /// 
    var endTime:String?


    public init(regionId: String,startTime:String){
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveSnapshotDataRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case streamName
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveSnapshotDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}


///  查询存储空间数据
public class DescribeLiveFileStorageDataRequest:JdCloudRequest
{
    /// 查询周期，取值范围：“day,month,year,followTime”，分别表示1天，1月，1年，跟随时间。默认为空，表示day。当传入followTime时，表示按Endtime-StartTime的周期，只返回一个点
      /// 
    var period:String?

    /// 查询起始时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var startTime:String

    /// 查询截至时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，为空时默认为当前时间
      /// 
    var endTime:String?


    public init(regionId: String,startTime:String){
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveFileStorageDataRequestRequestCodingKeys: String, CodingKey {
        case period
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveFileStorageDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(period, forKey: .period)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

public class DescribeLiveStreamBandwidthDataResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamBandwidthDataResult?;

    enum DescribeLiveStreamBandwidthDataResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamBandwidthDataResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamBandwidthDataResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamBandwidthDataResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamBandwidthDataResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询转码时长数据 
public class DescribeLiveTranscodingDurationDataResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[TranscodeDurationStatisticResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveTranscodingDurationDataResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveTranscodingDurationDataResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([TranscodeDurationStatisticResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveTranscodingDurationDataResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodingDurationDataResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class DescribeLiveFileStorageDataResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveFileStorageDataResult?;

    enum DescribeLiveFileStorageDataResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveFileStorageDataResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveFileStorageDataResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveFileStorageDataResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveFileStorageDataResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询带宽数据
      ///       /// - 查询某个时间段内的带宽数据（平均带宽）
      ///       /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      ///       ///  
public class DescribeLiveStreamBandwidthDataResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[BandwidthStatisticResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamBandwidthDataResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamBandwidthDataResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([BandwidthStatisticResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveStreamBandwidthDataResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamBandwidthDataResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class DescribeLiveTranscodingDurationDataResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveTranscodingDurationDataResult?;

    enum DescribeLiveTranscodingDurationDataResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveTranscodingDurationDataResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveTranscodingDurationDataResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveTranscodingDurationDataResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodingDurationDataResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询存储空间数据 
public class DescribeLiveFileStorageDataResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[FileStorageStatisticResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveFileStorageDataResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveFileStorageDataResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([FileStorageStatisticResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveFileStorageDataResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveFileStorageDataResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}

///  查询直播鉴黄张数数据
public class DescribeLivePornDataRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String?

    /// 应用名称
    var appName:String?

    /// 流名称
    var streamName:String?

    /// 起始时间
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 支持最大查询90天以内的数据
      /// 
    var startTime:String

    /// 结束时间:
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 为空,默认为当前时间
      /// 
    var endTime:String?


    public init(regionId: String,startTime:String){
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLivePornDataRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case streamName
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLivePornDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

public class DescribeLiveStreamPublishTrafficDataResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamPublishTrafficDataResult?;

    enum DescribeLiveStreamPublishTrafficDataResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamPublishTrafficDataResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamPublishTrafficDataResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamPublishTrafficDataResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamPublishTrafficDataResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询流量数据
      ///       /// - 查询某个时间段内的流量数据。
      ///       /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      ///       /// 
public class DescribeLiveStreamTrafficDataRequest:JdCloudRequest
{
    /// 播放域名，可以通过指定域名查询该域名下产生的带宽数据。
      /// 
    var domainName:String?

    /// 推流AppName，将AppName作为查询条件时须指定域名。
      /// 
    var appName:String?

    /// 流名称
      /// 
    var streamName:String?

    /// 运营商
      /// 
    var ispName:String?

    /// 查询的区域，如beijing,shanghai。多个用逗号分隔
      /// 
    var locationName:String?

    /// 查询的流协议类型，取值范围：&quot;rtmp,hdl,hls&quot;，多个时以逗号分隔
      /// 
    var protocolType:String?

    /// 查询周期，当前取值范围：“oneMin,fiveMin,halfHour,hour,twoHour,sixHour,day,followTime”，分别表示1min，5min，半小时，1小时，2小时，6小时，1天，跟随时间。默认为空，表示fiveMin。当传入followTime时，表示按Endtime-StartTime的周期，只返回一个点
      /// 
    var period:String?

    /// 查询起始时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var startTime:String

    /// 查询截至时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，为空时默认为当前时间
      /// 
    var endTime:String?


    public init(regionId: String,startTime:String){
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamTrafficDataRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case streamName
        case ispName
        case locationName
        case protocolType
        case period
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamTrafficDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(ispName, forKey: .ispName)
        try encoderContainer.encode(locationName, forKey: .locationName)
        try encoderContainer.encode(protocolType, forKey: .protocolType)
        try encoderContainer.encode(period, forKey: .period)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

/// 查询推流上行流量数据
      ///       /// - 查询某个时间段内的流量数据。
      ///       /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      ///       ///  
public class DescribeLiveStreamPublishTrafficDataResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[TrafficStatisticResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamPublishTrafficDataResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamPublishTrafficDataResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([TrafficStatisticResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveStreamPublishTrafficDataResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamPublishTrafficDataResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class DescribeLiveSnapshotDataResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveSnapshotDataResult?;

    enum DescribeLiveSnapshotDataResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveSnapshotDataResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveSnapshotDataResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveSnapshotDataResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveSnapshotDataResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询直播鉴黄张数数据 
public class DescribeLivePornDataResult:NSObject,JdCloudResult
{
    /// PornData
    var pornData:[PornCountStatisticResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLivePornDataResultCodingKeys: String, CodingKey {
        case pornData
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLivePornDataResultCodingKeys.self)
        if decoderContainer.contains(.pornData)
        {
            self.pornData = try decoderContainer.decode([PornCountStatisticResult?]?.self, forKey: .pornData)
        }
    }
}
public extension DescribeLivePornDataResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLivePornDataResultCodingKeys.self)
        try encoderContainer.encode(pornData, forKey: .pornData)
    }
}

///  查询转码时长数据
public class DescribeLiveTranscodingDurationDataRequest:JdCloudRequest
{
    /// 码率档次，可以查询指定档次的转码时长，取值：
      /// - video_h264_4k_1
      /// - video_h264_2k_1
      /// - video_h264_shd_1
      /// - video_h264_hd_1
      /// - video_h264_sd_1
      /// - video_h265_4k_1
      /// - video_h265_2k_1
      /// - video_h265_shd_1
      /// - video_h265_hd_1
      /// - video_h265_sd_1
      /// 
    var grade:String?

    /// 查询周期，取值范围：“day,month,year,followTime”，分别表示1天，1月，1年，跟随时间。默认为空，表示day。当传入followTime时，表示按Endtime-StartTime的周期，只返回一个点
      /// 
    var period:String?

    /// 查询起始时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var startTime:String

    /// 查询截至时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，为空时默认为当前时间
      /// 
    var endTime:String?


    public init(regionId: String,startTime:String){
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveTranscodingDurationDataRequestRequestCodingKeys: String, CodingKey {
        case grade
        case period
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodingDurationDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(grade, forKey: .grade)
        try encoderContainer.encode(period, forKey: .period)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}


///  查询推流带宽
      ///       /// - 查询某个时间段内的推流上行带宽数据
      ///       /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      ///       /// 
public class DescribeLiveStreamPublishBandwidthDataRequest:JdCloudRequest
{
    /// 推流域名，可以通过指定域名查询该域名下产生的带宽数据。
      /// 
    var domainName:String?

    /// 推流AppName，将AppName作为查询条件时须指定域名。
      /// 
    var appName:String?

    /// 流名称，将流名称作为查询条件时须指定域名和AppName。
      /// 
    var streamName:String?

    /// 运营商
      /// 
    var ispName:String?

    /// 查询的区域，如beijing,shanghai。多个用逗号分隔
      /// 
    var locationName:String?

    /// 查询的流协议类型，取值范围：&quot;rtmp,hdl,hls&quot;，多个时以逗号分隔
      /// 
    var protocolType:String?

    /// 查询周期，当前取值范围：“oneMin,fiveMin,halfHour,hour,twoHour,sixHour,day,followTime”，分别表示1min，5min，半小时，1小时，2小时，6小时，1天，跟随时间。默认为空，表示fiveMin。当传入followTime时，表示按Endtime-StartTime的周期，只返回一个点
      /// 
    var period:String?

    /// 查询起始时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var startTime:String

    /// 查询截至时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，为空时默认为当前时间
      /// 
    var endTime:String?


    public init(regionId: String,startTime:String){
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamPublishBandwidthDataRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case streamName
        case ispName
        case locationName
        case protocolType
        case period
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamPublishBandwidthDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(ispName, forKey: .ispName)
        try encoderContainer.encode(locationName, forKey: .locationName)
        try encoderContainer.encode(protocolType, forKey: .protocolType)
        try encoderContainer.encode(period, forKey: .period)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

public class DescribeLivePornDataResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLivePornDataResult?;

    enum DescribeLivePornDataResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLivePornDataResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLivePornDataResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLivePornDataResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLivePornDataResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询推流上行流量数据
      ///       /// - 查询某个时间段内的流量数据。
      ///       /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      ///       /// 
public class DescribeLiveStreamPublishTrafficDataRequest:JdCloudRequest
{
    /// 推流域名，可以通过指定域名查询该域名下产生的带宽数据。
      /// 
    var domainName:String?

    /// 推流AppName，将AppName作为查询条件时须指定域名。
      /// 
    var appName:String?

    /// 流名称
      /// 
    var streamName:String?

    /// 运营商
      /// 
    var ispName:String?

    /// 查询的区域，如beijing,shanghai。多个用逗号分隔
      /// 
    var locationName:String?

    /// 查询的流协议类型，取值范围：&quot;rtmp,hdl,hls&quot;，多个时以逗号分隔
      /// 
    var protocolType:String?

    /// 查询周期，当前取值范围：“oneMin,fiveMin,halfHour,hour,twoHour,sixHour,day,followTime”，分别表示1min，5min，半小时，1小时，2小时，6小时，1天，跟随时间。默认为空，表示fiveMin。当传入followTime时，表示按Endtime-StartTime的周期，只返回一个点
      /// 
    var period:String?

    /// 查询起始时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var startTime:String

    /// 查询截至时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，为空时默认为当前时间
      /// 
    var endTime:String?


    public init(regionId: String,startTime:String){
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamPublishTrafficDataRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case streamName
        case ispName
        case locationName
        case protocolType
        case period
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamPublishTrafficDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(ispName, forKey: .ispName)
        try encoderContainer.encode(locationName, forKey: .locationName)
        try encoderContainer.encode(protocolType, forKey: .protocolType)
        try encoderContainer.encode(period, forKey: .period)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

/// 查询流量数据
      ///       /// - 查询某个时间段内的流量数据。
      ///       /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      ///       ///  
public class DescribeLiveStreamTrafficDataResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[TrafficStatisticResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamTrafficDataResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamTrafficDataResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([TrafficStatisticResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveStreamTrafficDataResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamTrafficDataResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class DescribeLiveStreamTrafficDataResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamTrafficDataResult?;

    enum DescribeLiveStreamTrafficDataResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamTrafficDataResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamTrafficDataResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamTrafficDataResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamTrafficDataResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询直播截图张数数据 
public class DescribeLiveSnapshotDataResult:NSObject,JdCloudResult
{
    /// SnapshotData
    var snapshotData:[SnapshotCountStatisticResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveSnapshotDataResultCodingKeys: String, CodingKey {
        case snapshotData
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveSnapshotDataResultCodingKeys.self)
        if decoderContainer.contains(.snapshotData)
        {
            self.snapshotData = try decoderContainer.decode([SnapshotCountStatisticResult?]?.self, forKey: .snapshotData)
        }
    }
}
public extension DescribeLiveSnapshotDataResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveSnapshotDataResultCodingKeys.self)
        try encoderContainer.encode(snapshotData, forKey: .snapshotData)
    }
}

///  查询带宽数据
      ///       /// - 查询某个时间段内的带宽数据（平均带宽）
      ///       /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      ///       /// 
public class DescribeLiveStreamBandwidthDataRequest:JdCloudRequest
{
    /// 播放域名，可以通过指定域名查询该域名下产生的带宽数据。
      /// 
    var domainName:String?

    /// 推流AppName，将AppName作为查询条件时须指定域名。
      /// 
    var appName:String?

    /// 流名称，将流名称作为查询条件时须指定域名和AppName。
      /// 
    var streamName:String?

    /// 运营商
      /// 
    var ispName:String?

    /// 查询的区域，如beijing,shanghai。多个用逗号分隔
      /// 
    var locationName:String?

    /// 查询的流协议类型，取值范围：&quot;rtmp,hdl,hls&quot;，多个时以逗号分隔
      /// 
    var protocolType:String?

    /// 查询周期，当前取值范围：“oneMin,fiveMin,halfHour,hour,twoHour,sixHour,day,followTime”，分别表示1min，5min，半小时，1小时，2小时，6小时，1天，跟随时间。默认为空，表示fiveMin。当传入followTime时，表示按Endtime-StartTime的周期，只返回一个点
      /// 
    var period:String?

    /// 查询起始时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var startTime:String

    /// 查询截至时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，为空时默认为当前时间
      /// 
    var endTime:String?


    public init(regionId: String,startTime:String){
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamBandwidthDataRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case streamName
        case ispName
        case locationName
        case protocolType
        case period
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamBandwidthDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(ispName, forKey: .ispName)
        try encoderContainer.encode(locationName, forKey: .locationName)
        try encoderContainer.encode(protocolType, forKey: .protocolType)
        try encoderContainer.encode(period, forKey: .period)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

/// 查询地域/运营商分组统计数据 
public class DescribeLiveStatisticGroupByAreaIspResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[LiveStatisticGroupByAreaIspResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveStatisticGroupByAreaIspResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStatisticGroupByAreaIspResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([LiveStatisticGroupByAreaIspResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveStatisticGroupByAreaIspResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStatisticGroupByAreaIspResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}

///  查询流分组统计数据
public class DescribeLiveStatisticGroupByStreamRequest:JdCloudRequest
{
    /// 播放域名
    var domainName:String

    /// 应用名称
    var appName:String

    /// 流名称
    var streamName:String

    /// 运营商
      /// 
    var ispName:String?

    /// 查询的区域，如beijing,shanghai。多个用逗号分隔
      /// 
    var locationName:String?

    /// 查询周期，当前取值范围：“oneMin,fiveMin,halfHour,hour,twoHour,sixHour,day,followTime”，分别表示1min，5min，半小时，1小时，2小时，6小时，1天，跟随时间。默认为空，表示fiveMin。当传入followTime时，表示按Endtime-StartTime的周期，只返回一个点
      /// 
    var period:String?

    /// 起始时间
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// 
    var startTime:String

    /// 结束时间:
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 为空,默认为当前时间，查询时间跨度不超过1天
      /// 
    var endTime:String?


    public init(regionId: String,domainName:String,appName:String,streamName:String,startTime:String){
        self.domainName = domainName
        self.appName = appName
        self.streamName = streamName
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveStatisticGroupByStreamRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case streamName
        case ispName
        case locationName
        case period
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStatisticGroupByStreamRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(ispName, forKey: .ispName)
        try encoderContainer.encode(locationName, forKey: .locationName)
        try encoderContainer.encode(period, forKey: .period)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}


///  查询地域分组统计数据
public class DescribeLiveStatisticGroupByAreaRequest:JdCloudRequest
{
    /// 播放域名
    var domainName:String

    /// 应用名称
    var appName:String

    /// 流名称
    var streamName:String

    /// 运营商
      /// 
    var ispName:String?

    /// 查询的区域，如beijing,shanghai。多个用逗号分隔
      /// 
    var locationName:String?

    /// 查询周期，当前取值范围：“oneMin,fiveMin,halfHour,hour,twoHour,sixHour,day,followTime”，分别表示1min，5min，半小时，1小时，2小时，6小时，1天，跟随时间。默认为空，表示fiveMin。当传入followTime时，表示按Endtime-StartTime的周期，只返回一个点
      /// 
    var period:String?

    /// 起始时间
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// 
    var startTime:String

    /// 结束时间:
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 为空,默认为当前时间，查询时间跨度不超过1天
      /// 
    var endTime:String?


    public init(regionId: String,domainName:String,appName:String,streamName:String,startTime:String){
        self.domainName = domainName
        self.appName = appName
        self.streamName = streamName
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveStatisticGroupByAreaRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case streamName
        case ispName
        case locationName
        case period
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStatisticGroupByAreaRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(ispName, forKey: .ispName)
        try encoderContainer.encode(locationName, forKey: .locationName)
        try encoderContainer.encode(period, forKey: .period)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}


///  查询地域/运营商分组统计数据
public class DescribeLiveStatisticGroupByAreaIspRequest:JdCloudRequest
{
    /// 播放域名
    var domainName:String

    /// 应用名称
    var appName:String

    /// 流名称
    var streamName:String

    /// 运营商
      /// 
    var ispName:String?

    /// 查询的区域，如beijing,shanghai。多个用逗号分隔
      /// 
    var locationName:String?

    /// 查询的流协议类型，取值范围：&quot;rtmp,hdl,hls&quot;，多个时以逗号分隔
      /// 
    var protocolType:String?

    /// 查询周期，当前取值范围：“oneMin,fiveMin,halfHour,hour,twoHour,sixHour,day,followTime”，分别表示1min，5min，半小时，1小时，2小时，6小时，1天，跟随时间。默认为空，表示fiveMin。当传入followTime时，表示按Endtime-StartTime的周期，只返回一个点
      /// 
    var period:String?

    /// 起始时间
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// 
    var startTime:String

    /// 结束时间:
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 为空,默认为当前时间，查询时间跨度不超过1天
      /// 
    var endTime:String?


    public init(regionId: String,domainName:String,appName:String,streamName:String,startTime:String){
        self.domainName = domainName
        self.appName = appName
        self.streamName = streamName
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveStatisticGroupByAreaIspRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case streamName
        case ispName
        case locationName
        case protocolType
        case period
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStatisticGroupByAreaIspRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(ispName, forKey: .ispName)
        try encoderContainer.encode(locationName, forKey: .locationName)
        try encoderContainer.encode(protocolType, forKey: .protocolType)
        try encoderContainer.encode(period, forKey: .period)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

/// 查询流分组统计数据 
public class DescribeLiveStatisticGroupByStreamResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[LiveStatisticGroupByStreamResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveStatisticGroupByStreamResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStatisticGroupByStreamResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([LiveStatisticGroupByStreamResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveStatisticGroupByStreamResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStatisticGroupByStreamResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
/// 查询地域分组统计数据 
public class DescribeLiveStatisticGroupByAreaResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[LiveStatisticGroupByAreaResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveStatisticGroupByAreaResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStatisticGroupByAreaResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([LiveStatisticGroupByAreaResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveStatisticGroupByAreaResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStatisticGroupByAreaResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class DescribeLiveStatisticGroupByAreaResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStatisticGroupByAreaResult?;

    enum DescribeLiveStatisticGroupByAreaResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStatisticGroupByAreaResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStatisticGroupByAreaResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStatisticGroupByAreaResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStatisticGroupByAreaResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLiveStatisticGroupByAreaIspResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStatisticGroupByAreaIspResult?;

    enum DescribeLiveStatisticGroupByAreaIspResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStatisticGroupByAreaIspResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStatisticGroupByAreaIspResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStatisticGroupByAreaIspResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStatisticGroupByAreaIspResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLiveStatisticGroupByStreamResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStatisticGroupByStreamResult?;

    enum DescribeLiveStatisticGroupByStreamResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStatisticGroupByStreamResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStatisticGroupByStreamResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStatisticGroupByStreamResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStatisticGroupByStreamResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  关闭时移
public class CloseLiveTimeshiftRequest:JdCloudRequest
{
    /// 直播的播放域名
    var playDomain:String


    public init(regionId: String,playDomain:String){
        self.playDomain = playDomain
        super.init(regionId: regionId)
    }


    enum CloseLiveTimeshiftRequestRequestCodingKeys: String, CodingKey {
        case playDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CloseLiveTimeshiftRequestRequestCodingKeys.self)
        try encoderContainer.encode(playDomain, forKey: .playDomain)

    }
}

public class CloseLiveTimeshiftResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CloseLiveTimeshiftResult?;

    enum CloseLiveTimeshiftResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CloseLiveTimeshiftResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CloseLiveTimeshiftResult?.self, forKey: .result) ?? nil
    }
}

public extension CloseLiveTimeshiftResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CloseLiveTimeshiftResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLiveTimeshiftConfigsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveTimeshiftConfigsResult?;

    enum DescribeLiveTimeshiftConfigsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveTimeshiftConfigsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveTimeshiftConfigsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveTimeshiftConfigsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTimeshiftConfigsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 关闭时移 
public class CloseLiveTimeshiftResult:NSObject,JdCloudResult
{
}
/// 查询时移配置 
public class DescribeLiveTimeshiftConfigsResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 直播域名集合
    var timeshiftConfigs:[TimeshiftConfig?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveTimeshiftConfigsResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case timeshiftConfigs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveTimeshiftConfigsResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.timeshiftConfigs)
        {
            self.timeshiftConfigs = try decoderContainer.decode([TimeshiftConfig?]?.self, forKey: .timeshiftConfigs)
        }
    }
}
public extension DescribeLiveTimeshiftConfigsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTimeshiftConfigsResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(timeshiftConfigs, forKey: .timeshiftConfigs)
    }
}
/// 开启时移
      ///       /// 直播支持最大4小时的HLS时移，使用方式为在播放域名后增加时移参数来实现，参数类型支持指定开始时间和时间偏移量2种方式进行时移。 开启直播时移后，重新推流生效，使用播放域名带相应参数访问即可播放
      ///       /// - 域名格式：
      ///       /// 1、http://{playDomain}/{appName}/{streamName}/index.m3u8?timeshift&#x3D;400（秒，指从当前时间往前时移的偏移量）
      ///       /// 2、http://{playDomain}/{appName}/{streamName}/index.m3u8?starttime&#x3D;1529223702 (unix时间戳)
      ///       ///  
public class OpenLiveTimeshiftResult:NSObject,JdCloudResult
{
}

///  开启时移
      ///       /// 直播支持最大4小时的HLS时移，使用方式为在播放域名后增加时移参数来实现，参数类型支持指定开始时间和时间偏移量2种方式进行时移。 开启直播时移后，重新推流生效，使用播放域名带相应参数访问即可播放
      ///       /// - 域名格式：
      ///       /// 1、http://{playDomain}/{appName}/{streamName}/index.m3u8?timeshift&#x3D;400（秒，指从当前时间往前时移的偏移量）
      ///       /// 2、http://{playDomain}/{appName}/{streamName}/index.m3u8?starttime&#x3D;1529223702 (unix时间戳)
      ///       /// 
public class OpenLiveTimeshiftRequest:JdCloudRequest
{
    /// 直播的播放域名
    var playDomain:String


    public init(regionId: String,playDomain:String){
        self.playDomain = playDomain
        super.init(regionId: regionId)
    }


    enum OpenLiveTimeshiftRequestRequestCodingKeys: String, CodingKey {
        case playDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OpenLiveTimeshiftRequestRequestCodingKeys.self)
        try encoderContainer.encode(playDomain, forKey: .playDomain)

    }
}


///  查询时移配置
public class DescribeLiveTimeshiftConfigsRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围[1, 100000]
      /// 
    var pageNumber:Int?

    /// 分页大小
      /// - 取值范围[10, 100]
      /// 
    var pageSize:Int?

    /// 直播的播放域名
      /// - 目前仅支持精确匹配
      /// 
    var playDomain:String


    public init(regionId: String,playDomain:String){
        self.playDomain = playDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveTimeshiftConfigsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case playDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTimeshiftConfigsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(playDomain, forKey: .playDomain)

    }
}

public class OpenLiveTimeshiftResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:OpenLiveTimeshiftResult?;

    enum OpenLiveTimeshiftResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OpenLiveTimeshiftResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(OpenLiveTimeshiftResult?.self, forKey: .result) ?? nil
    }
}

public extension OpenLiveTimeshiftResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OpenLiveTimeshiftResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除用户自定义录制模板
      ///       /// - 删除用户自定义录制模板之前必须先删除此模板在各域名、应用、流级别的录制设置
      ///       ///  
public class DeleteCustomLiveStreamRecordTemplateResult:NSObject,JdCloudResult
{
}
public class AddLiveRecordTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveRecordTaskResult?;

    enum AddLiveRecordTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveRecordTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveRecordTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveRecordTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveRecordTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 设置直播录制回调通知
      ///       ///  
public class SetLiveStreamRecordNotifyConfigResult:NSObject,JdCloudResult
{
}
public class DeleteLiveStreamDomainRecordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamDomainRecordResult?;

    enum DeleteLiveStreamDomainRecordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamDomainRecordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamDomainRecordResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamDomainRecordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamDomainRecordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加打点录制任务
      ///       /// - 您可以调用此接口精确提取已录制的文件中所需要的部分
      ///       /// 
public class AddLiveRecordTaskRequest:JdCloudRequest
{
    /// 录制时间集合
      /// - 最大支持10段,多段合并成一个文件
      /// - 多段时间跨度最小不能小于10s
      /// - 多段时间跨度最大不能超过8小时
      /// 
    var recordTimes:[RecordTime?]?

    /// 存储桶
    var saveBucket:String?

    /// 存储地址
    var saveEndpoint:String?

    /// 录制文件类型:
      /// - 取值: ts,flv,mp4 (多种类型之前用;隔开)
      /// - 不区分大小写
      /// 
    var recordFileType:String

    /// 录制文件存储路径:
      /// - 默认地址: record/{Date}/{ServerId}/{AppName}/{StreamName}/{StartTime}_{EndTime}
      /// 
    var saveObject:String?

    /// 打点录制任务外键
      /// 
    var taskExternalId:String?

    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 流名称
    var streamName:String


    public init(regionId: String,recordTimes:[RecordTime?]?,recordFileType:String,publishDomain:String,appName:String,streamName:String){
        self.recordTimes = recordTimes
        self.recordFileType = recordFileType
        self.publishDomain = publishDomain
        self.appName = appName
        self.streamName = streamName
        super.init(regionId: regionId)
    }


    enum AddLiveRecordTaskRequestRequestCodingKeys: String, CodingKey {
        case recordTimes
        case saveBucket
        case saveEndpoint
        case recordFileType
        case saveObject
        case taskExternalId
        case publishDomain
        case appName
        case streamName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveRecordTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(recordTimes, forKey: .recordTimes)
        try encoderContainer.encode(saveBucket, forKey: .saveBucket)
        try encoderContainer.encode(saveEndpoint, forKey: .saveEndpoint)
        try encoderContainer.encode(recordFileType, forKey: .recordFileType)
        try encoderContainer.encode(saveObject, forKey: .saveObject)
        try encoderContainer.encode(taskExternalId, forKey: .taskExternalId)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)

    }
}


///  查询录制回调配置
      ///       /// 
public class DescribeLiveStreamRecordNotifyConfigRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String


    public init(regionId: String,publishDomain:String){
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamRecordNotifyConfigRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamRecordNotifyConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}


///  查询录制模板绑定
      ///       /// 
public class DescribeRecordBindingRequest:JdCloudRequest
{
    /// 录制模板
    var template:String


    public init(regionId: String,template:String){
        self.template = template
        super.init(regionId: regionId)
    }


    enum DescribeRecordBindingRequestRequestCodingKeys: String, CodingKey {
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRecordBindingRequestRequestCodingKeys.self)
        try encoderContainer.encode(template, forKey: .template)

    }
}

public class DeleteLiveStreamAppRecordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamAppRecordResult?;

    enum DeleteLiveStreamAppRecordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamAppRecordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamAppRecordResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamAppRecordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamAppRecordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除录制回调配置
      ///       /// 
public class DeleteLiveStreamRecordNotifyConfigRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String


    public init(regionId: String,publishDomain:String){
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamRecordNotifyConfigRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamRecordNotifyConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}

/// 查询录制回调配置
      ///       ///  
public class DescribeLiveStreamRecordNotifyConfigResult:NSObject,JdCloudResult
{
    /// 推流域名
    var publishDomain:String?

    /// 回调地址
    var notifyUrl:String?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamRecordNotifyConfigResultCodingKeys: String, CodingKey {
        case publishDomain
        case notifyUrl
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamRecordNotifyConfigResultCodingKeys.self)
        if decoderContainer.contains(.publishDomain)
        {
            self.publishDomain = try decoderContainer.decode(String?.self, forKey: .publishDomain)
        }
        if decoderContainer.contains(.notifyUrl)
        {
            self.notifyUrl = try decoderContainer.decode(String?.self, forKey: .notifyUrl)
        }
    }
}
public extension DescribeLiveStreamRecordNotifyConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamRecordNotifyConfigResultCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(notifyUrl, forKey: .notifyUrl)
    }
}
/// 删除录制回调配置
      ///       ///  
public class DeleteLiveStreamRecordNotifyConfigResult:NSObject,JdCloudResult
{
}
/// 查询录制模板绑定
      ///       ///  
public class DescribeRecordBindingResult:NSObject,JdCloudResult
{
    /// 录制模板模板绑定集合
    var bindingList:[TemplateBinding?]?



    public override init(){
        super.init()
    }

    enum DescribeRecordBindingResultCodingKeys: String, CodingKey {
        case bindingList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRecordBindingResultCodingKeys.self)
        if decoderContainer.contains(.bindingList)
        {
            self.bindingList = try decoderContainer.decode([TemplateBinding?]?.self, forKey: .bindingList)
        }
    }
}
public extension DescribeRecordBindingResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRecordBindingResultCodingKeys.self)
        try encoderContainer.encode(bindingList, forKey: .bindingList)
    }
}

///  删除用户自定义录制模板
      ///       /// - 删除用户自定义录制模板之前必须先删除此模板在各域名、应用、流级别的录制设置
      ///       /// 
public class DeleteCustomLiveStreamRecordTemplateRequest:JdCloudRequest
{
    /// 录制模板
    var template:String


    public init(regionId: String,template:String){
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteCustomLiveStreamRecordTemplateRequestRequestCodingKeys: String, CodingKey {
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCustomLiveStreamRecordTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(template, forKey: .template)

    }
}

public class DescribeCustomLiveStreamRecordConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCustomLiveStreamRecordConfigResult?;

    enum DescribeCustomLiveStreamRecordConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamRecordConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCustomLiveStreamRecordConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCustomLiveStreamRecordConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamRecordConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加应用级别直播录制配置
      ///       /// - 添加应用级别的直播录制模板配置
      ///       /// 
public class AddLiveStreamAppRecordRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 录制模版
    var template:String


    public init(regionId: String,publishDomain:String,appName:String,template:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.template = template
        super.init(regionId: regionId)
    }


    enum AddLiveStreamAppRecordRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamAppRecordRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(template, forKey: .template)

    }
}

public class AddLiveStreamAppRecordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveStreamAppRecordResult?;

    enum AddLiveStreamAppRecordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveStreamAppRecordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveStreamAppRecordResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveStreamAppRecordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamAppRecordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class SetLiveStreamRecordNotifyConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetLiveStreamRecordNotifyConfigResult?;

    enum SetLiveStreamRecordNotifyConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetLiveStreamRecordNotifyConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetLiveStreamRecordNotifyConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension SetLiveStreamRecordNotifyConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveStreamRecordNotifyConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeRecordBindingResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeRecordBindingResult?;

    enum DescribeRecordBindingResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRecordBindingResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeRecordBindingResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeRecordBindingResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRecordBindingResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加用户自定义直播录制模板
      ///       /// 
public class AddCustomLiveStreamRecordTemplateRequest:JdCloudRequest
{
    /// 自动录制周期
      /// - 取值: [15,360]
      /// - 单位: 分钟
      /// 
    var recordPeriod:Int

    /// 存储桶
      /// 
    var saveBucket:String

    /// endpoint
      /// 
    var saveEndpoint:String?

    /// 录制文件格式:
      /// - 取值: ts,flv,mp4 (多种类型之间用;隔开)
      /// - 不区分大小写
      /// 
    var recordFileType:String

    /// 录制模板自定义名称:
      ///  - 取值要求：数字、大小写字母或短横线(&quot;-&quot;)、下划线(&quot;_&quot;),
      ///    最大长度50个字符
      ///  - &lt;b&gt;注意: 不能与已定义命名重复&lt;/b&gt;
      /// 
    var template:String


    public init(regionId: String,recordPeriod:Int,saveBucket:String,recordFileType:String,template:String){
        self.recordPeriod = recordPeriod
        self.saveBucket = saveBucket
        self.recordFileType = recordFileType
        self.template = template
        super.init(regionId: regionId)
    }


    enum AddCustomLiveStreamRecordTemplateRequestRequestCodingKeys: String, CodingKey {
        case recordPeriod
        case saveBucket
        case saveEndpoint
        case recordFileType
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddCustomLiveStreamRecordTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(recordPeriod, forKey: .recordPeriod)
        try encoderContainer.encode(saveBucket, forKey: .saveBucket)
        try encoderContainer.encode(saveEndpoint, forKey: .saveEndpoint)
        try encoderContainer.encode(recordFileType, forKey: .recordFileType)
        try encoderContainer.encode(template, forKey: .template)

    }
}

/// 查询用户自定义直播录制模板列表
      ///       ///  
public class DescribeCustomLiveStreamRecordTemplatesResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 录制模板信息
    var recordTemplates:[RecordTemplate?]?



    public override init(){
        super.init()
    }

    enum DescribeCustomLiveStreamRecordTemplatesResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case recordTemplates
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamRecordTemplatesResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.recordTemplates)
        {
            self.recordTemplates = try decoderContainer.decode([RecordTemplate?]?.self, forKey: .recordTemplates)
        }
    }
}
public extension DescribeCustomLiveStreamRecordTemplatesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamRecordTemplatesResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(recordTemplates, forKey: .recordTemplates)
    }
}

///  查询直播直播录制配置
      ///       /// - 录制模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
      ///       /// - 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
      ///       /// - 该查询旨在查询域名、应用、流最终生效的录制模板配置,并非各级的模板绑定情况
      ///       /// 
public class DescribeCustomLiveStreamRecordConfigRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围 [1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小
      /// - 取值范围 [10, 100]
      /// 
    var pageSize:Int?

    /// 录制配置查询过滤条件:
      ///   - name:   publishDomain，必填(推流域名)
      ///   - value:  参数
      ///   - name:   appName，必填(应用名称)
      ///   - value:  参数
      ///   - name:   streamName，非必填(流名称)
      ///   - value:  参数
      /// 
    var filters:[Filter?]?




    enum DescribeCustomLiveStreamRecordConfigRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamRecordConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class DeleteLiveStreamRecordNotifyConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamRecordNotifyConfigResult?;

    enum DeleteLiveStreamRecordNotifyConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamRecordNotifyConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamRecordNotifyConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamRecordNotifyConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamRecordNotifyConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除域名级别录制模板配置
      ///       /// - 删除域名级别录制模板配置,重新推流后生效
      ///       /// 
public class DeleteLiveStreamDomainRecordRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 录制模板
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,template:String){
        self.publishDomain = publishDomain
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamDomainRecordRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamDomainRecordRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(template, forKey: .template)

    }
}

/// 查询直播直播录制配置
      ///       /// - 录制模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
      ///       /// - 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
      ///       /// - 该查询旨在查询域名、应用、流最终生效的录制模板配置,并非各级的模板绑定情况
      ///       ///  
public class DescribeCustomLiveStreamRecordConfigResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 模板信息
    var recordConfigs:[LiveRecordConfig?]?



    public override init(){
        super.init()
    }

    enum DescribeCustomLiveStreamRecordConfigResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case recordConfigs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamRecordConfigResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.recordConfigs)
        {
            self.recordConfigs = try decoderContainer.decode([LiveRecordConfig?]?.self, forKey: .recordConfigs)
        }
    }
}
public extension DescribeCustomLiveStreamRecordConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamRecordConfigResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(recordConfigs, forKey: .recordConfigs)
    }
}
public class AddLiveStreamDomainRecordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveStreamDomainRecordResult?;

    enum AddLiveStreamDomainRecordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveStreamDomainRecordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveStreamDomainRecordResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveStreamDomainRecordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamDomainRecordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLiveStreamRecordNotifyConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamRecordNotifyConfigResult?;

    enum DescribeLiveStreamRecordNotifyConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamRecordNotifyConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamRecordNotifyConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamRecordNotifyConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamRecordNotifyConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加打点录制任务
      ///       /// - 您可以调用此接口精确提取已录制的文件中所需要的部分
      ///       ///  
public class AddLiveRecordTaskResult:NSObject,JdCloudResult
{
}

///  删除应用级别录制模板配置
      ///       /// - 删除应用级别的录制模板配置,重新推流后生效
      ///       /// 
public class DeleteLiveStreamAppRecordRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 录制模板
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,appName:String,template:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamAppRecordRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamAppRecordRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(template, forKey: .template)

    }
}

public class DescribeCustomLiveStreamRecordTemplatesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCustomLiveStreamRecordTemplatesResult?;

    enum DescribeCustomLiveStreamRecordTemplatesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamRecordTemplatesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCustomLiveStreamRecordTemplatesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCustomLiveStreamRecordTemplatesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamRecordTemplatesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AddCustomLiveStreamRecordTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddCustomLiveStreamRecordTemplateResult?;

    enum AddCustomLiveStreamRecordTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddCustomLiveStreamRecordTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddCustomLiveStreamRecordTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension AddCustomLiveStreamRecordTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddCustomLiveStreamRecordTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加域名级别直播录制配置
      ///       /// - 添加域名级别的直播录制模板配置
      ///       ///  
public class AddLiveStreamDomainRecordResult:NSObject,JdCloudResult
{
}
public class DeleteCustomLiveStreamRecordTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteCustomLiveStreamRecordTemplateResult?;

    enum DeleteCustomLiveStreamRecordTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteCustomLiveStreamRecordTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteCustomLiveStreamRecordTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteCustomLiveStreamRecordTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCustomLiveStreamRecordTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加应用级别直播录制配置
      ///       /// - 添加应用级别的直播录制模板配置
      ///       ///  
public class AddLiveStreamAppRecordResult:NSObject,JdCloudResult
{
}
/// 删除域名级别录制模板配置
      ///       /// - 删除域名级别录制模板配置,重新推流后生效
      ///       ///  
public class DeleteLiveStreamDomainRecordResult:NSObject,JdCloudResult
{
}
/// 删除应用级别录制模板配置
      ///       /// - 删除应用级别的录制模板配置,重新推流后生效
      ///       ///  
public class DeleteLiveStreamAppRecordResult:NSObject,JdCloudResult
{
}

///  设置直播录制回调通知
      ///       /// 
public class SetLiveStreamRecordNotifyConfigRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 录制回调通知的URL地址
      /// - 以 http:// 开头,外网可访问的地址
      /// 
    var notifyUrl:String


    public init(regionId: String,publishDomain:String,notifyUrl:String){
        self.publishDomain = publishDomain
        self.notifyUrl = notifyUrl
        super.init(regionId: regionId)
    }


    enum SetLiveStreamRecordNotifyConfigRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case notifyUrl
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveStreamRecordNotifyConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(notifyUrl, forKey: .notifyUrl)

    }
}


///  添加域名级别直播录制配置
      ///       /// - 添加域名级别的直播录制模板配置
      ///       /// 
public class AddLiveStreamDomainRecordRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 录制模版
    var template:String


    public init(regionId: String,publishDomain:String,template:String){
        self.publishDomain = publishDomain
        self.template = template
        super.init(regionId: regionId)
    }


    enum AddLiveStreamDomainRecordRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamDomainRecordRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(template, forKey: .template)

    }
}


///  查询用户自定义直播录制模板列表
      ///       /// 
public class DescribeCustomLiveStreamRecordTemplatesRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围[1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小
      /// - 取值范围[10, 100]
      /// 
    var pageSize:Int?

    /// 录制模板列表查询过滤条件:
      ///   - name:   template 录制模板自定义名称
      ///   - value:  如果参数为空，则查询全部
      /// 
    var filters:[Filter?]?




    enum DescribeCustomLiveStreamRecordTemplatesRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamRecordTemplatesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 添加用户自定义直播录制模板
      ///       ///  
public class AddCustomLiveStreamRecordTemplateResult:NSObject,JdCloudResult
{
}
/// 添加域名截图配置
      ///       /// - 添加域名级别的截图模板配置
      ///       ///  
public class AddLiveStreamDomainSnapshotResult:NSObject,JdCloudResult
{
}
public class DeleteLiveStreamDomainSnapshotResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamDomainSnapshotResult?;

    enum DeleteLiveStreamDomainSnapshotResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamDomainSnapshotResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamDomainSnapshotResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamDomainSnapshotResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamDomainSnapshotResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加直播截图模板
public class AddCustomLiveStreamSnapshotTemplateRequest:JdCloudRequest
{
    /// 截图格式
      /// - 取值: jpg, png
      /// - 不区分大小写
      /// 
    var format:String

    /// 截图宽度
      /// - 取值: [8,8192]
      /// - 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出截图
      /// - 如果(width,height)都不设置，则按源流大小输出截图
      /// 
    var width:Int?

    /// 截图高度
      /// - 取值: [8,8192]
      /// - 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出截图
      /// - 如果(width,height)都不设置，则按源流大小输出截图
      /// 
    var height:Int?

    /// 截图与设定的宽高不匹配时的处理规则
      ///   1: 拉伸
      ///   2: 留黑
      ///   3: 留白
      ///   4: 高斯模糊
      /// - 1是按照设定宽高拉伸
      /// - 2,3,4是等比例的缩放多余或不足处按调置处理
      /// 
    var fillType:Int

    /// 截图周期
      /// - 取值范围 [5,3600]
      /// - 单位: 秒
      /// 
    var snapshotInterval:Int

    /// 存储模式
      ///   1: 覆盖存储
      ///   2: 顺序存储
      /// 
    var saveMode:Int

    /// 存储桶
    var saveBucket:String

    /// 存储地址
    var saveEndpoint:String?

    /// 截图模板自定义名称:
      /// - 取值要求: 数字、大小写字母或短横线(&quot;-&quot;)、下划线(&quot;_&quot;),
      ///   首尾不能有特殊字符(&quot;-&quot;)
      ///   最大长度50个字符
      /// - &lt;b&gt;注意: 不能与已定义命名重复&lt;/b&gt;
      /// 
    var template:String


    public init(regionId: String,format:String,fillType:Int,snapshotInterval:Int,saveMode:Int,saveBucket:String,template:String){
        self.format = format
        self.fillType = fillType
        self.snapshotInterval = snapshotInterval
        self.saveMode = saveMode
        self.saveBucket = saveBucket
        self.template = template
        super.init(regionId: regionId)
    }


    enum AddCustomLiveStreamSnapshotTemplateRequestRequestCodingKeys: String, CodingKey {
        case format
        case width
        case height
        case fillType
        case snapshotInterval
        case saveMode
        case saveBucket
        case saveEndpoint
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddCustomLiveStreamSnapshotTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(format, forKey: .format)
        try encoderContainer.encode(width, forKey: .width)
        try encoderContainer.encode(height, forKey: .height)
        try encoderContainer.encode(fillType, forKey: .fillType)
        try encoderContainer.encode(snapshotInterval, forKey: .snapshotInterval)
        try encoderContainer.encode(saveMode, forKey: .saveMode)
        try encoderContainer.encode(saveBucket, forKey: .saveBucket)
        try encoderContainer.encode(saveEndpoint, forKey: .saveEndpoint)
        try encoderContainer.encode(template, forKey: .template)

    }
}

public class DeleteCustomLiveStreamSnapshotTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteCustomLiveStreamSnapshotTemplateResult?;

    enum DeleteCustomLiveStreamSnapshotTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteCustomLiveStreamSnapshotTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteCustomLiveStreamSnapshotTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteCustomLiveStreamSnapshotTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCustomLiveStreamSnapshotTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeCustomLiveStreamSnapshotTemplatesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCustomLiveStreamSnapshotTemplatesResult?;

    enum DescribeCustomLiveStreamSnapshotTemplatesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamSnapshotTemplatesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCustomLiveStreamSnapshotTemplatesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCustomLiveStreamSnapshotTemplatesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamSnapshotTemplatesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除截图回调配置
      ///       ///  
public class DeleteLiveStreamSnapshotNotifyConfigResult:NSObject,JdCloudResult
{
}
public class AddCustomLiveStreamSnapshotTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddCustomLiveStreamSnapshotTemplateResult?;

    enum AddCustomLiveStreamSnapshotTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddCustomLiveStreamSnapshotTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddCustomLiveStreamSnapshotTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension AddCustomLiveStreamSnapshotTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddCustomLiveStreamSnapshotTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteLiveStreamSnapshotNotifyConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamSnapshotNotifyConfigResult?;

    enum DeleteLiveStreamSnapshotNotifyConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamSnapshotNotifyConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamSnapshotNotifyConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamSnapshotNotifyConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamSnapshotNotifyConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AddLiveStreamDomainSnapshotResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveStreamDomainSnapshotResult?;

    enum AddLiveStreamDomainSnapshotResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveStreamDomainSnapshotResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveStreamDomainSnapshotResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveStreamDomainSnapshotResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamDomainSnapshotResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除APP截图配置
public class DeleteLiveStreamAppSnapshotRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 截图模板
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,appName:String,template:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamAppSnapshotRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamAppSnapshotRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(template, forKey: .template)

    }
}


///  查询直播截图模板列表
public class DescribeCustomLiveStreamSnapshotTemplatesRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围 [1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小
      /// - 取值范围 [10, 100]
      /// 
    var pageSize:Int?

    /// 截图模板查询过滤条件
      /// - name:   template 录制模板自定义名称
      /// - value:  如果参数为空，则查询全部
      /// 
    var filters:[Filter?]?




    enum DescribeCustomLiveStreamSnapshotTemplatesRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamSnapshotTemplatesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  查询直播截图配置
      ///       /// - 截图模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
      ///       /// - 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
      ///       /// - 该查询旨在查询域名、应用、流最终生效的截图模板配置,并非各级的模板绑定情况
      ///       /// 
public class DescribeCustomLiveStreamSnapshotConfigRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围 [1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小
      /// - 取值范围 [10, 100]
      /// 
    var pageSize:Int?

    /// 直播截图查询过滤条件:
      /// - name:   publishDomain 必填(推流域名)
      /// - value:  参数
      /// - name:   appName 必填(应用名称)
      /// - value:  参数
      /// - name:   streamName 非必填(流名称)
      /// - value:  参数
      /// 
    var filters:[Filter?]?




    enum DescribeCustomLiveStreamSnapshotConfigRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamSnapshotConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 添加应用截图配置
      ///       /// - 添加应用级别的截图模板配置
      ///       ///  
public class AddLiveStreamAppSnapshotResult:NSObject,JdCloudResult
{
}

///  删除用户自定义直播截图模板
      ///       /// - 删除截图模板前,请先删除此模板相关的截图配置,否则将会影响线上业务
      ///       /// 
public class DeleteCustomLiveStreamSnapshotTemplateRequest:JdCloudRequest
{
    /// 截图模板
    var template:String


    public init(regionId: String,template:String){
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteCustomLiveStreamSnapshotTemplateRequestRequestCodingKeys: String, CodingKey {
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCustomLiveStreamSnapshotTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(template, forKey: .template)

    }
}


///  删除截图回调配置
      ///       /// 
public class DeleteLiveStreamSnapshotNotifyConfigRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String


    public init(regionId: String,publishDomain:String){
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamSnapshotNotifyConfigRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamSnapshotNotifyConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}


///  添加应用截图配置
      ///       /// - 添加应用级别的截图模板配置
      ///       /// 
public class AddLiveStreamAppSnapshotRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 截图模板
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,appName:String,template:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.template = template
        super.init(regionId: regionId)
    }


    enum AddLiveStreamAppSnapshotRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamAppSnapshotRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(template, forKey: .template)

    }
}

/// 删除APP截图配置 
public class DeleteLiveStreamAppSnapshotResult:NSObject,JdCloudResult
{
}
public class DescribeSnapshotBindingResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSnapshotBindingResult?;

    enum DescribeSnapshotBindingResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSnapshotBindingResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSnapshotBindingResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSnapshotBindingResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSnapshotBindingResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加域名截图配置
      ///       /// - 添加域名级别的截图模板配置
      ///       /// 
public class AddLiveStreamDomainSnapshotRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 截图模板
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,template:String){
        self.publishDomain = publishDomain
        self.template = template
        super.init(regionId: regionId)
    }


    enum AddLiveStreamDomainSnapshotRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamDomainSnapshotRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(template, forKey: .template)

    }
}

/// 删除域名截图配置
      ///       /// - 删除域名级别的截图模板配置,重新推流后生效
      ///       ///  
public class DeleteLiveStreamDomainSnapshotResult:NSObject,JdCloudResult
{
}
/// 查询直播截图模板列表 
public class DescribeCustomLiveStreamSnapshotTemplatesResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 截图模板集合
    var snapshotTemplates:[SnapshotTemplate?]?



    public override init(){
        super.init()
    }

    enum DescribeCustomLiveStreamSnapshotTemplatesResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case snapshotTemplates
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamSnapshotTemplatesResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.snapshotTemplates)
        {
            self.snapshotTemplates = try decoderContainer.decode([SnapshotTemplate?]?.self, forKey: .snapshotTemplates)
        }
    }
}
public extension DescribeCustomLiveStreamSnapshotTemplatesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamSnapshotTemplatesResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(snapshotTemplates, forKey: .snapshotTemplates)
    }
}
/// 查询截图模板绑定
      ///       ///  
public class DescribeSnapshotBindingResult:NSObject,JdCloudResult
{
    /// 截图模板模板绑定集合
    var bindingList:[TemplateBinding?]?



    public override init(){
        super.init()
    }

    enum DescribeSnapshotBindingResultCodingKeys: String, CodingKey {
        case bindingList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSnapshotBindingResultCodingKeys.self)
        if decoderContainer.contains(.bindingList)
        {
            self.bindingList = try decoderContainer.decode([TemplateBinding?]?.self, forKey: .bindingList)
        }
    }
}
public extension DescribeSnapshotBindingResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSnapshotBindingResultCodingKeys.self)
        try encoderContainer.encode(bindingList, forKey: .bindingList)
    }
}
public class AddLiveStreamAppSnapshotResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveStreamAppSnapshotResult?;

    enum AddLiveStreamAppSnapshotResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveStreamAppSnapshotResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveStreamAppSnapshotResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveStreamAppSnapshotResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamAppSnapshotResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteLiveStreamAppSnapshotResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamAppSnapshotResult?;

    enum DeleteLiveStreamAppSnapshotResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamAppSnapshotResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamAppSnapshotResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamAppSnapshotResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamAppSnapshotResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询截图回调配置
      ///       ///  
public class DescribeLiveStreamSnapshotNotifyConfigResult:NSObject,JdCloudResult
{
    /// 推流域名
    var publishDomain:String?

    /// 回调地址
    var notifyUrl:String?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamSnapshotNotifyConfigResultCodingKeys: String, CodingKey {
        case publishDomain
        case notifyUrl
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamSnapshotNotifyConfigResultCodingKeys.self)
        if decoderContainer.contains(.publishDomain)
        {
            self.publishDomain = try decoderContainer.decode(String?.self, forKey: .publishDomain)
        }
        if decoderContainer.contains(.notifyUrl)
        {
            self.notifyUrl = try decoderContainer.decode(String?.self, forKey: .notifyUrl)
        }
    }
}
public extension DescribeLiveStreamSnapshotNotifyConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamSnapshotNotifyConfigResultCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(notifyUrl, forKey: .notifyUrl)
    }
}
public class SetLiveStreamSnapshotNotifyConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetLiveStreamSnapshotNotifyConfigResult?;

    enum SetLiveStreamSnapshotNotifyConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetLiveStreamSnapshotNotifyConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetLiveStreamSnapshotNotifyConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension SetLiveStreamSnapshotNotifyConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveStreamSnapshotNotifyConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  设置直播截图回调通知地址
      ///       /// 
public class SetLiveStreamSnapshotNotifyConfigRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 截图回调通知的URL地址:
      /// - 以 http:// 开头,外网可访问的地址
      /// 
    var notifyUrl:String


    public init(regionId: String,publishDomain:String,notifyUrl:String){
        self.publishDomain = publishDomain
        self.notifyUrl = notifyUrl
        super.init(regionId: regionId)
    }


    enum SetLiveStreamSnapshotNotifyConfigRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case notifyUrl
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveStreamSnapshotNotifyConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(notifyUrl, forKey: .notifyUrl)

    }
}

/// 删除用户自定义直播截图模板
      ///       /// - 删除截图模板前,请先删除此模板相关的截图配置,否则将会影响线上业务
      ///       ///  
public class DeleteCustomLiveStreamSnapshotTemplateResult:NSObject,JdCloudResult
{
}
/// 设置直播截图回调通知地址
      ///       ///  
public class SetLiveStreamSnapshotNotifyConfigResult:NSObject,JdCloudResult
{
}
/// 查询直播截图配置
      ///       /// - 截图模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
      ///       /// - 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
      ///       /// - 该查询旨在查询域名、应用、流最终生效的截图模板配置,并非各级的模板绑定情况
      ///       ///  
public class DescribeCustomLiveStreamSnapshotConfigResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 截图配置集合
    var snapshotConfigs:[SnapshotConfig?]?



    public override init(){
        super.init()
    }

    enum DescribeCustomLiveStreamSnapshotConfigResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case snapshotConfigs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamSnapshotConfigResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.snapshotConfigs)
        {
            self.snapshotConfigs = try decoderContainer.decode([SnapshotConfig?]?.self, forKey: .snapshotConfigs)
        }
    }
}
public extension DescribeCustomLiveStreamSnapshotConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamSnapshotConfigResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(snapshotConfigs, forKey: .snapshotConfigs)
    }
}

///  删除域名截图配置
      ///       /// - 删除域名级别的截图模板配置,重新推流后生效
      ///       /// 
public class DeleteLiveStreamDomainSnapshotRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 截图模板
    var template:String


    public init(regionId: String,publishDomain:String,template:String){
        self.publishDomain = publishDomain
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamDomainSnapshotRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamDomainSnapshotRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(template, forKey: .template)

    }
}

/// 添加直播截图模板 
public class AddCustomLiveStreamSnapshotTemplateResult:NSObject,JdCloudResult
{
}
public class DescribeCustomLiveStreamSnapshotConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCustomLiveStreamSnapshotConfigResult?;

    enum DescribeCustomLiveStreamSnapshotConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamSnapshotConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCustomLiveStreamSnapshotConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCustomLiveStreamSnapshotConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamSnapshotConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询截图回调配置
      ///       /// 
public class DescribeLiveStreamSnapshotNotifyConfigRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String


    public init(regionId: String,publishDomain:String){
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamSnapshotNotifyConfigRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamSnapshotNotifyConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}


///  查询截图模板绑定
      ///       /// 
public class DescribeSnapshotBindingRequest:JdCloudRequest
{
    /// 截图模板
    var template:String


    public init(regionId: String,template:String){
        self.template = template
        super.init(regionId: regionId)
    }


    enum DescribeSnapshotBindingRequestRequestCodingKeys: String, CodingKey {
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSnapshotBindingRequestRequestCodingKeys.self)
        try encoderContainer.encode(template, forKey: .template)

    }
}

public class DescribeLiveStreamSnapshotNotifyConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamSnapshotNotifyConfigResult?;

    enum DescribeLiveStreamSnapshotNotifyConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamSnapshotNotifyConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamSnapshotNotifyConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamSnapshotNotifyConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamSnapshotNotifyConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AddCustomLiveStreamQualityDetectionTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddCustomLiveStreamQualityDetectionTemplateResult?;

    enum AddCustomLiveStreamQualityDetectionTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddCustomLiveStreamQualityDetectionTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddCustomLiveStreamQualityDetectionTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension AddCustomLiveStreamQualityDetectionTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddCustomLiveStreamQualityDetectionTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除应用级别质量检测模板配置
      ///       /// - 删除应用级别质量检测模板配置,重新推流后生效
      ///       ///  
public class DeleteLiveStreamAppQualityDetectionResult:NSObject,JdCloudResult
{
}

///  添加域名质量检测配置
      ///       /// - 添加域名级别的质量检测模板配置
      ///       /// 
public class AddLiveStreamDomainQualityDetectionRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 质量检测模板
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,template:String){
        self.publishDomain = publishDomain
        self.template = template
        super.init(regionId: regionId)
    }


    enum AddLiveStreamDomainQualityDetectionRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamDomainQualityDetectionRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(template, forKey: .template)

    }
}

/// 添加应用质量检测配置
      ///       /// - 添加应用级别的质量检测模板配置
      ///       ///  
public class AddLiveStreamAppQualityDetectionResult:NSObject,JdCloudResult
{
}
public class DescribeLiveStreamQualityDetectionNotifyConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamQualityDetectionNotifyConfigResult?;

    enum DescribeLiveStreamQualityDetectionNotifyConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamQualityDetectionNotifyConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamQualityDetectionNotifyConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamQualityDetectionNotifyConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamQualityDetectionNotifyConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  设置直播质量检测回调通知地址
      ///       /// 
public class SetLiveStreamQualityDetectionNotifyConfigRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 质量检测回调通知的URL地址:
      /// - 以 http:// 开头,外网可访问的地址
      /// 
    var notifyUrl:String


    public init(regionId: String,publishDomain:String,notifyUrl:String){
        self.publishDomain = publishDomain
        self.notifyUrl = notifyUrl
        super.init(regionId: regionId)
    }


    enum SetLiveStreamQualityDetectionNotifyConfigRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case notifyUrl
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveStreamQualityDetectionNotifyConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(notifyUrl, forKey: .notifyUrl)

    }
}

/// 添加域名质量检测配置
      ///       /// - 添加域名级别的质量检测模板配置
      ///       ///  
public class AddLiveStreamDomainQualityDetectionResult:NSObject,JdCloudResult
{
}

///  添加应用质量检测配置
      ///       /// - 添加应用级别的质量检测模板配置
      ///       /// 
public class AddLiveStreamAppQualityDetectionRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 质量检测模板
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,appName:String,template:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.template = template
        super.init(regionId: regionId)
    }


    enum AddLiveStreamAppQualityDetectionRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamAppQualityDetectionRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(template, forKey: .template)

    }
}

/// 添加直播质量检测模板 
public class AddCustomLiveStreamQualityDetectionTemplateResult:NSObject,JdCloudResult
{
}

///  查询质量检测回调配置
      ///       /// 
public class DescribeLiveStreamQualityDetectionNotifyConfigRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String


    public init(regionId: String,publishDomain:String){
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamQualityDetectionNotifyConfigRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamQualityDetectionNotifyConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}

public class AddLiveStreamAppQualityDetectionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveStreamAppQualityDetectionResult?;

    enum AddLiveStreamAppQualityDetectionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveStreamAppQualityDetectionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveStreamAppQualityDetectionResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveStreamAppQualityDetectionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamAppQualityDetectionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteCustomLiveStreamQualityDetectionTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteCustomLiveStreamQualityDetectionTemplateResult?;

    enum DeleteCustomLiveStreamQualityDetectionTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteCustomLiveStreamQualityDetectionTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteCustomLiveStreamQualityDetectionTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteCustomLiveStreamQualityDetectionTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCustomLiveStreamQualityDetectionTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除域名质量检测配置
      ///       /// - 删除域名级别的质量检测模板配置,重新推流后生效
      ///       /// 
public class DeleteLiveStreamDomainQualityDetectionRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 质量检测模板
    var template:String


    public init(regionId: String,publishDomain:String,template:String){
        self.publishDomain = publishDomain
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamDomainQualityDetectionRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamDomainQualityDetectionRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(template, forKey: .template)

    }
}

/// 删除直播质量检测模板
      ///       /// - 删除质量检测模板前,请先删除此模板相关的质量检测配置,否则无法删除
      ///       ///  
public class DeleteCustomLiveStreamQualityDetectionTemplateResult:NSObject,JdCloudResult
{
}
/// 查询质量检测回调配置
      ///       ///  
public class DescribeLiveStreamQualityDetectionNotifyConfigResult:NSObject,JdCloudResult
{
    /// 推流域名
    var publishDomain:String?

    /// 回调地址
    var notifyUrl:String?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamQualityDetectionNotifyConfigResultCodingKeys: String, CodingKey {
        case publishDomain
        case notifyUrl
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamQualityDetectionNotifyConfigResultCodingKeys.self)
        if decoderContainer.contains(.publishDomain)
        {
            self.publishDomain = try decoderContainer.decode(String?.self, forKey: .publishDomain)
        }
        if decoderContainer.contains(.notifyUrl)
        {
            self.notifyUrl = try decoderContainer.decode(String?.self, forKey: .notifyUrl)
        }
    }
}
public extension DescribeLiveStreamQualityDetectionNotifyConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamQualityDetectionNotifyConfigResultCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(notifyUrl, forKey: .notifyUrl)
    }
}
public class DescribeQualityDetectionBindingResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeQualityDetectionBindingResult?;

    enum DescribeQualityDetectionBindingResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQualityDetectionBindingResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeQualityDetectionBindingResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeQualityDetectionBindingResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQualityDetectionBindingResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class SetLiveStreamQualityDetectionNotifyConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetLiveStreamQualityDetectionNotifyConfigResult?;

    enum SetLiveStreamQualityDetectionNotifyConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetLiveStreamQualityDetectionNotifyConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetLiveStreamQualityDetectionNotifyConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension SetLiveStreamQualityDetectionNotifyConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveStreamQualityDetectionNotifyConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteLiveStreamDomainQualityDetectionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamDomainQualityDetectionResult?;

    enum DeleteLiveStreamDomainQualityDetectionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamDomainQualityDetectionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamDomainQualityDetectionResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamDomainQualityDetectionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamDomainQualityDetectionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AddLiveStreamDomainQualityDetectionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveStreamDomainQualityDetectionResult?;

    enum AddLiveStreamDomainQualityDetectionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveStreamDomainQualityDetectionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveStreamDomainQualityDetectionResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveStreamDomainQualityDetectionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamDomainQualityDetectionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除直播质量检测模板
      ///       /// - 删除质量检测模板前,请先删除此模板相关的质量检测配置,否则无法删除
      ///       /// 
public class DeleteCustomLiveStreamQualityDetectionTemplateRequest:JdCloudRequest
{
    /// 质量检测模板
    var template:String


    public init(regionId: String,template:String){
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteCustomLiveStreamQualityDetectionTemplateRequestRequestCodingKeys: String, CodingKey {
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCustomLiveStreamQualityDetectionTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(template, forKey: .template)

    }
}


///  查询直播质量检测模板列表
public class DescribeCustomLiveStreamQualityDetectionTemplatesRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围 [1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小
      /// - 取值范围 [10, 100]
      /// 
    var pageSize:Int?

    /// 质量检测模板查询过滤条件
      /// - name:   template 质量检测自定义名称
      /// - value:  如果参数为空，则查询全部
      /// 
    var filters:[Filter?]?




    enum DescribeCustomLiveStreamQualityDetectionTemplatesRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamQualityDetectionTemplatesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 删除域名质量检测配置
      ///       /// - 删除域名级别的质量检测模板配置,重新推流后生效
      ///       ///  
public class DeleteLiveStreamDomainQualityDetectionResult:NSObject,JdCloudResult
{
}
/// 查询质量检测模板绑定
      ///       ///  
public class DescribeQualityDetectionBindingResult:NSObject,JdCloudResult
{
    /// 质量检测模板模板绑定集合
    var bindingList:[TemplateBinding?]?



    public override init(){
        super.init()
    }

    enum DescribeQualityDetectionBindingResultCodingKeys: String, CodingKey {
        case bindingList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQualityDetectionBindingResultCodingKeys.self)
        if decoderContainer.contains(.bindingList)
        {
            self.bindingList = try decoderContainer.decode([TemplateBinding?]?.self, forKey: .bindingList)
        }
    }
}
public extension DescribeQualityDetectionBindingResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQualityDetectionBindingResultCodingKeys.self)
        try encoderContainer.encode(bindingList, forKey: .bindingList)
    }
}
public class DeleteLiveStreamAppQualityDetectionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamAppQualityDetectionResult?;

    enum DeleteLiveStreamAppQualityDetectionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamAppQualityDetectionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamAppQualityDetectionResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamAppQualityDetectionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamAppQualityDetectionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加直播质量检测模板
public class AddCustomLiveStreamQualityDetectionTemplateRequest:JdCloudRequest
{
    /// 模板名称。长度不超过128个字符。UTF-8编码
      /// 
    var template:String

    /// 检测项列表。取值范围：
      ///   BlackScreen - 黑屏
      ///   PureColor - 纯色
      ///   ColorCast - 偏色
      ///   FrozenFrame - 静帧
      ///   Brightness - 亮度
      ///   Contrast - 对比度
      /// 
    var modules:[String?]?


    public init(regionId: String,template:String){
        self.template = template
        super.init(regionId: regionId)
    }


    enum AddCustomLiveStreamQualityDetectionTemplateRequestRequestCodingKeys: String, CodingKey {
        case template
        case modules
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddCustomLiveStreamQualityDetectionTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(template, forKey: .template)
        try encoderContainer.encode(modules, forKey: .modules)

    }
}


///  查询质量检测模板绑定
      ///       /// 
public class DescribeQualityDetectionBindingRequest:JdCloudRequest
{
    /// 质量检测模板
    var template:String


    public init(regionId: String,template:String){
        self.template = template
        super.init(regionId: regionId)
    }


    enum DescribeQualityDetectionBindingRequestRequestCodingKeys: String, CodingKey {
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQualityDetectionBindingRequestRequestCodingKeys.self)
        try encoderContainer.encode(template, forKey: .template)

    }
}

public class DeleteLiveStreamQualityDetectionNotifyConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamQualityDetectionNotifyConfigResult?;

    enum DeleteLiveStreamQualityDetectionNotifyConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamQualityDetectionNotifyConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamQualityDetectionNotifyConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamQualityDetectionNotifyConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamQualityDetectionNotifyConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除应用级别质量检测模板配置
      ///       /// - 删除应用级别质量检测模板配置,重新推流后生效
      ///       /// 
public class DeleteLiveStreamAppQualityDetectionRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 质量检测模板
    var template:String


    public init(regionId: String,publishDomain:String,appName:String,template:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamAppQualityDetectionRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamAppQualityDetectionRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(template, forKey: .template)

    }
}

/// 查询直播质量检测模板列表 
public class DescribeCustomLiveStreamQualityDetectionTemplatesResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 质量检测模板集合
    var qualityDetectionTemplates:[QualityDetectionTemplate?]?



    public override init(){
        super.init()
    }

    enum DescribeCustomLiveStreamQualityDetectionTemplatesResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case qualityDetectionTemplates
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamQualityDetectionTemplatesResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.qualityDetectionTemplates)
        {
            self.qualityDetectionTemplates = try decoderContainer.decode([QualityDetectionTemplate?]?.self, forKey: .qualityDetectionTemplates)
        }
    }
}
public extension DescribeCustomLiveStreamQualityDetectionTemplatesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamQualityDetectionTemplatesResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(qualityDetectionTemplates, forKey: .qualityDetectionTemplates)
    }
}
/// 设置直播质量检测回调通知地址
      ///       ///  
public class SetLiveStreamQualityDetectionNotifyConfigResult:NSObject,JdCloudResult
{
}

///  删除质量检测回调配置
      ///       /// 
public class DeleteLiveStreamQualityDetectionNotifyConfigRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String


    public init(regionId: String,publishDomain:String){
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamQualityDetectionNotifyConfigRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamQualityDetectionNotifyConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}

public class DescribeCustomLiveStreamQualityDetectionTemplatesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCustomLiveStreamQualityDetectionTemplatesResult?;

    enum DescribeCustomLiveStreamQualityDetectionTemplatesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamQualityDetectionTemplatesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCustomLiveStreamQualityDetectionTemplatesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCustomLiveStreamQualityDetectionTemplatesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamQualityDetectionTemplatesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除质量检测回调配置
      ///       ///  
public class DeleteLiveStreamQualityDetectionNotifyConfigResult:NSObject,JdCloudResult
{
}
public class DescribeLiveTranscodeStreamBandwidthResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveTranscodeStreamBandwidthResult?;

    enum DescribeLiveTranscodeStreamBandwidthResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveTranscodeStreamBandwidthResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveTranscodeStreamBandwidthResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveTranscodeStreamBandwidthResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodeStreamBandwidthResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询直播推流数
public class DescribeLivePublishStreamNumRequest:JdCloudRequest
{
    /// 播放域名
    var domainName:String?

    /// 应用名称
    var appName:String?

    /// 查询的流协议类型，取值范围：&quot;rtmp,hdl,hls&quot;，多个时以逗号分隔
      /// 
    var protocolType:String?

    /// 运营商
      /// 
    var ispName:String?

    /// 查询的区域，如beijing,shanghai。多个用逗号分隔
      /// 
    var locationName:String?

    /// 查询周期，当前取值范围：“oneMin,fiveMin,halfHour,hour,twoHour,sixHour,day,followTime”，分别表示1min，5min，半小时，1小时，2小时，6小时，1天，跟随时间。默认为空，表示fiveMin。当传入followTime时，表示按Endtime-StartTime的周期，只返回一个点
      /// 
    var period:String?

    /// 起始时间
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// 
    var startTime:String

    /// 结束时间:
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 为空,默认为当前时间
      /// 
    var endTime:String?


    public init(regionId: String,startTime:String){
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLivePublishStreamNumRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case protocolType
        case ispName
        case locationName
        case period
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLivePublishStreamNumRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(protocolType, forKey: .protocolType)
        try encoderContainer.encode(ispName, forKey: .ispName)
        try encoderContainer.encode(locationName, forKey: .locationName)
        try encoderContainer.encode(period, forKey: .period)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

public class DescribeDomainOnlineStreamResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDomainOnlineStreamResult?;

    enum DescribeDomainOnlineStreamResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDomainOnlineStreamResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDomainOnlineStreamResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDomainOnlineStreamResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainOnlineStreamResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询直播流播放人数排行 
public class DescribeLiveStreamPlayerRankingDataResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[LiveStreamPlayerRankingResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamPlayerRankingDataResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamPlayerRankingDataResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([LiveStreamPlayerRankingResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveStreamPlayerRankingDataResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamPlayerRankingDataResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
/// 查询转码流数量 
public class DescribeLiveTranscodeStreamNumResult:NSObject,JdCloudResult
{
    /// 时间
    var datetime:String?

    /// 流数量
    var streamCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeLiveTranscodeStreamNumResultCodingKeys: String, CodingKey {
        case datetime
        case streamCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveTranscodeStreamNumResultCodingKeys.self)
        if decoderContainer.contains(.datetime)
        {
            self.datetime = try decoderContainer.decode(String?.self, forKey: .datetime)
        }
        if decoderContainer.contains(.streamCount)
        {
            self.streamCount = try decoderContainer.decode(Int?.self, forKey: .streamCount)
        }
    }
}
public extension DescribeLiveTranscodeStreamNumResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodeStreamNumResultCodingKeys.self)
        try encoderContainer.encode(datetime, forKey: .datetime)
        try encoderContainer.encode(streamCount, forKey: .streamCount)
    }
}
/// 查询转码流信息 
public class DescribeLiveTranscodeStreamListResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[LiveTranscodeStreamResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveTranscodeStreamListResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveTranscodeStreamListResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([LiveTranscodeStreamResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveTranscodeStreamListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodeStreamListResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class DescribeLivePublishStreamNumResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLivePublishStreamNumResult?;

    enum DescribeLivePublishStreamNumResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLivePublishStreamNumResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLivePublishStreamNumResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLivePublishStreamNumResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLivePublishStreamNumResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  日志下载
public class DescribeDomainsLogRequest:JdCloudRequest
{
    /// 播放域名，多个时以逗号（,）分隔
    var domains:String

    /// 时间间隔，取值(hour，day),不传默认小时
      /// - 按小时（hour）下载时是.log文件
      /// - 按天（day）下载时是.zip文件
      /// 
    var interval:String?

    /// 起始时间
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// 
    var startTime:String

    /// 结束时间:
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 为空,默认为当前时间
      /// 
    var endTime:String?


    public init(regionId: String,domains:String,startTime:String){
        self.domains = domains
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeDomainsLogRequestRequestCodingKeys: String, CodingKey {
        case domains
        case interval
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainsLogRequestRequestCodingKeys.self)
        try encoderContainer.encode(domains, forKey: .domains)
        try encoderContainer.encode(interval, forKey: .interval)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

public class DescribeLiveStreamPlayerRankingDataResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamPlayerRankingDataResult?;

    enum DescribeLiveStreamPlayerRankingDataResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamPlayerRankingDataResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamPlayerRankingDataResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamPlayerRankingDataResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamPlayerRankingDataResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询在线流列表 
public class DescribeDomainOnlineStreamResult:NSObject,JdCloudResult
{
    /// StreamList
    var streamList:[PublishOnlineStreamResultData?]?

    /// 流数量
    var total:Int?



    public override init(){
        super.init()
    }

    enum DescribeDomainOnlineStreamResultCodingKeys: String, CodingKey {
        case streamList
        case total
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDomainOnlineStreamResultCodingKeys.self)
        if decoderContainer.contains(.streamList)
        {
            self.streamList = try decoderContainer.decode([PublishOnlineStreamResultData?]?.self, forKey: .streamList)
        }
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
    }
}
public extension DescribeDomainOnlineStreamResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainOnlineStreamResultCodingKeys.self)
        try encoderContainer.encode(streamList, forKey: .streamList)
        try encoderContainer.encode(total, forKey: .total)
    }
}

///  查询URL播放排行
public class DescribeUrlRankingRequest:JdCloudRequest
{
    /// 播放域名
    var domainName:String

    /// 查询Top数量，默认20，即返回Top20的数据
    var size:Int?

    /// 排行依据字段，取值：[&quot;pv&quot;, &quot;flow&quot;, &quot;bandwidth&quot;]，默认pv
      /// - pv 播放次数
      /// - flow 流量
      /// - bandwidth 带宽
      /// 
    var rankfield:String?

    /// 起始时间
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// 
    var startTime:String

    /// 结束时间:
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 为空,默认为当前时间
      /// 
    var endTime:String?


    public init(regionId: String,domainName:String,startTime:String){
        self.domainName = domainName
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeUrlRankingRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case size
        case rankfield
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUrlRankingRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(size, forKey: .size)
        try encoderContainer.encode(rankfield, forKey: .rankfield)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

public class DescribeLiveStreamHistoryUserNumResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamHistoryUserNumResult?;

    enum DescribeLiveStreamHistoryUserNumResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamHistoryUserNumResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamHistoryUserNumResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamHistoryUserNumResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamHistoryUserNumResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询转码流播放带宽
      ///       /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      ///       /// 
public class DescribeLiveTranscodeStreamBandwidthRequest:JdCloudRequest
{
    /// 推流域名
    var domainName:String

    /// 应用名称
    var appName:String

    /// 运营商
      /// 
    var ispName:String?

    /// 查询的区域，如beijing,shanghai。多个用逗号分隔
      /// 
    var locationName:String?

    /// 查询的流协议类型，取值范围：&quot;rtmp,hdl,hls&quot;，多个时以逗号分隔
      /// 
    var protocolType:String?

    /// 查询周期，当前取值范围：“oneMin,fiveMin,halfHour,hour,twoHour,sixHour,day,followTime”，分别表示1min，5min，半小时，1小时，2小时，6小时，1天，跟随时间。默认为空，表示fiveMin。当传入followTime时，表示按Endtime-StartTime的周期，只返回一个点
      /// 
    var period:String?

    /// 查询起始时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var startTime:String

    /// 查询截至时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，为空时默认为当前时间
      /// 
    var endTime:String?


    public init(regionId: String,domainName:String,appName:String,startTime:String){
        self.domainName = domainName
        self.appName = appName
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveTranscodeStreamBandwidthRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case ispName
        case locationName
        case protocolType
        case period
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodeStreamBandwidthRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(ispName, forKey: .ispName)
        try encoderContainer.encode(locationName, forKey: .locationName)
        try encoderContainer.encode(protocolType, forKey: .protocolType)
        try encoderContainer.encode(period, forKey: .period)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

public class DescribePublishStreamInfoDataResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribePublishStreamInfoDataResult?;

    enum DescribePublishStreamInfoDataResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePublishStreamInfoDataResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribePublishStreamInfoDataResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribePublishStreamInfoDataResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePublishStreamInfoDataResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLiveTranscodeStreamPlayerUserNumResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveTranscodeStreamPlayerUserNumResult?;

    enum DescribeLiveTranscodeStreamPlayerUserNumResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveTranscodeStreamPlayerUserNumResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveTranscodeStreamPlayerUserNumResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveTranscodeStreamPlayerUserNumResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodeStreamPlayerUserNumResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询直播流历史在线人数 
public class DescribeLiveStreamHistoryUserNumResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[LiveStreamUserNumResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamHistoryUserNumResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamHistoryUserNumResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([LiveStreamUserNumResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveStreamHistoryUserNumResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamHistoryUserNumResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class DescribeDomainsLogResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDomainsLogResult?;

    enum DescribeDomainsLogResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDomainsLogResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDomainsLogResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDomainsLogResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainsLogResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询推流监控数据
public class DescribePublishStreamInfoDataRequest:JdCloudRequest
{
    /// 推流域名
    var domainName:String

    /// 应用名称
    var appName:String

    /// 流名称
    var streamName:String

    /// 起始时间
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// 
    var startTime:String

    /// 结束时间:
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 为空,默认为当前时间，查询时间跨度不超过1天
      /// 
    var endTime:String?


    public init(regionId: String,domainName:String,appName:String,streamName:String,startTime:String){
        self.domainName = domainName
        self.appName = appName
        self.streamName = streamName
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribePublishStreamInfoDataRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case streamName
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePublishStreamInfoDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

/// 查询推流监控数据 
public class DescribePublishStreamInfoDataResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[PublishStreamInfoResult?]?



    public override init(){
        super.init()
    }

    enum DescribePublishStreamInfoDataResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePublishStreamInfoDataResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([PublishStreamInfoResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribePublishStreamInfoDataResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePublishStreamInfoDataResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class DescribeLiveTranscodeStreamNumResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveTranscodeStreamNumResult?;

    enum DescribeLiveTranscodeStreamNumResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveTranscodeStreamNumResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveTranscodeStreamNumResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveTranscodeStreamNumResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodeStreamNumResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询在线流列表
public class DescribeDomainOnlineStreamRequest:JdCloudRequest
{
    /// 推流域名
    var domainName:String

    /// 应用名称
    var appName:String?

    /// 流名称
    var streamName:String?

    /// 页码，起始页码1
      /// 
    var pageNum:Int?

    /// 每页最大记录数，取值：[10,100]，默认：10
      /// 
    var pageSize:Int?

    /// 起始时间
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// 
    var startTime:String

    /// 结束时间:
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 为空,默认为当前时间，查询时间跨度不超过30天
      /// 
    var endTime:String?


    public init(regionId: String,domainName:String,startTime:String){
        self.domainName = domainName
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeDomainOnlineStreamRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case streamName
        case pageNum
        case pageSize
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainOnlineStreamRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

public class DescribeLiveTranscodeStreamListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveTranscodeStreamListResult?;

    enum DescribeLiveTranscodeStreamListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveTranscodeStreamListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveTranscodeStreamListResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveTranscodeStreamListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodeStreamListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 日志下载 
public class DescribeDomainsLogResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[DomainsLogResult?]?



    public override init(){
        super.init()
    }

    enum DescribeDomainsLogResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDomainsLogResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([DomainsLogResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeDomainsLogResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainsLogResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
/// 查询转码流播放带宽
      ///       /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      ///       ///  
public class DescribeLiveTranscodeStreamBandwidthResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[BandwidthStatisticResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveTranscodeStreamBandwidthResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveTranscodeStreamBandwidthResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([BandwidthStatisticResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveTranscodeStreamBandwidthResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodeStreamBandwidthResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}

///  查询转码流信息
public class DescribeLiveTranscodeStreamListRequest:JdCloudRequest
{
    /// 推流域名
      /// 
    var domainName:String

    /// 应用名称
      /// 
    var appName:String

    /// 流名称
      /// 
    var streamName:String


    public init(regionId: String,domainName:String,appName:String,streamName:String){
        self.domainName = domainName
        self.appName = appName
        self.streamName = streamName
        super.init(regionId: regionId)
    }


    enum DescribeLiveTranscodeStreamListRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case streamName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodeStreamListRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)

    }
}


///  查询转码流观看人数
public class DescribeLiveTranscodeStreamPlayerUserNumRequest:JdCloudRequest
{
    /// 推流域名
    var domainName:String

    /// 应用名称
    var appName:String

    /// 运营商
      /// 
    var ispName:String?

    /// 查询的区域，如beijing,shanghai。多个用逗号分隔
      /// 
    var locationName:String?

    /// 查询的流协议类型，取值范围：&quot;rtmp,hdl,hls&quot;，多个时以逗号分隔
      /// 
    var protocolType:String?

    /// 查询周期，当前取值范围：“oneMin,fiveMin,halfHour,hour,twoHour,sixHour,day,followTime”，分别表示1min，5min，半小时，1小时，2小时，6小时，1天，跟随时间。默认为空，表示fiveMin。当传入followTime时，表示按Endtime-StartTime的周期，只返回一个点
      /// 
    var period:String?

    /// 查询起始时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var startTime:String

    /// 查询截至时间，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，为空时默认为当前时间
      /// 
    var endTime:String?


    public init(regionId: String,domainName:String,appName:String,startTime:String){
        self.domainName = domainName
        self.appName = appName
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveTranscodeStreamPlayerUserNumRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case ispName
        case locationName
        case protocolType
        case period
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodeStreamPlayerUserNumRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(ispName, forKey: .ispName)
        try encoderContainer.encode(locationName, forKey: .locationName)
        try encoderContainer.encode(protocolType, forKey: .protocolType)
        try encoderContainer.encode(period, forKey: .period)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

public class DescribeUrlRankingResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeUrlRankingResult?;

    enum DescribeUrlRankingResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUrlRankingResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeUrlRankingResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeUrlRankingResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUrlRankingResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询直播流播放人数排行
public class DescribeLiveStreamPlayerRankingDataRequest:JdCloudRequest
{
    /// 推流域名
    var domainName:String

    /// 应用名称
    var appName:String

    /// 协议，取值范围：&quot;hdl,hls&quot;
      /// 
    var protocolType:String

    /// 起始时间
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// 
    var startTime:String

    /// 结束时间:
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 为空,默认为当前时间，时间跨度不不超过⼀一天
      /// 
    var endTime:String?


    public init(regionId: String,domainName:String,appName:String,protocolType:String,startTime:String){
        self.domainName = domainName
        self.appName = appName
        self.protocolType = protocolType
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamPlayerRankingDataRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case protocolType
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamPlayerRankingDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(protocolType, forKey: .protocolType)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}


///  查询转码流数量
public class DescribeLiveTranscodeStreamNumRequest:JdCloudRequest
{
    /// 推流域名
    var domainName:String?




    enum DescribeLiveTranscodeStreamNumRequestRequestCodingKeys: String, CodingKey {
        case domainName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodeStreamNumRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)

    }
}


///  查询直播流历史在线人数
public class DescribeLiveStreamHistoryUserNumRequest:JdCloudRequest
{
    /// 播放域名
    var domainName:String?

    /// 应用名称
    var appName:String?

    /// 流名称
    var streamName:String?

    /// 运营商
      /// 
    var ispName:String?

    /// 查询的区域，如beijing,shanghai。多个用逗号分隔
      /// 
    var locationName:String?

    /// 查询的流协议类型，取值范围：&quot;rtmp,hdl,hls&quot;，多个时以逗号分隔
      /// 
    var protocolType:String?

    /// 查询周期，当前取值范围：“oneMin,fiveMin,halfHour,hour,twoHour,sixHour,day,followTime”，分别表示1min，5min，半小时，1小时，2小时，6小时，1天，跟随时间。默认为空，表示fiveMin。当传入followTime时，表示按Endtime-StartTime的周期，只返回一个点
      /// 
    var period:String?

    /// 起始时间
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// 
    var startTime:String

    /// 结束时间:
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      ///   示例:2018-10-21T10:00:00Z
      /// - 为空,默认为当前时间
      /// 
    var endTime:String?


    public init(regionId: String,startTime:String){
        self.startTime = startTime
        super.init(regionId: regionId)
    }


    enum DescribeLiveStreamHistoryUserNumRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case appName
        case streamName
        case ispName
        case locationName
        case protocolType
        case period
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamHistoryUserNumRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(streamName, forKey: .streamName)
        try encoderContainer.encode(ispName, forKey: .ispName)
        try encoderContainer.encode(locationName, forKey: .locationName)
        try encoderContainer.encode(protocolType, forKey: .protocolType)
        try encoderContainer.encode(period, forKey: .period)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

/// 查询转码流观看人数 
public class DescribeLiveTranscodeStreamPlayerUserNumResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[LiveStreamUserNumResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveTranscodeStreamPlayerUserNumResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveTranscodeStreamPlayerUserNumResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([LiveStreamUserNumResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLiveTranscodeStreamPlayerUserNumResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveTranscodeStreamPlayerUserNumResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
/// 查询URL播放排行 
public class DescribeUrlRankingResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[RankingUrlResult?]?



    public override init(){
        super.init()
    }

    enum DescribeUrlRankingResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUrlRankingResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([RankingUrlResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeUrlRankingResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUrlRankingResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
/// 查询直播推流数 
public class DescribeLivePublishStreamNumResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[LiveStreamUserNumResult?]?



    public override init(){
        super.init()
    }

    enum DescribeLivePublishStreamNumResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLivePublishStreamNumResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([LiveStreamUserNumResult?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeLivePublishStreamNumResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLivePublishStreamNumResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class DeleteLiveStreamAppTranscodeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamAppTranscodeResult?;

    enum DeleteLiveStreamAppTranscodeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamAppTranscodeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamAppTranscodeResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamAppTranscodeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamAppTranscodeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeCustomLiveStreamTranscodeTemplatesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCustomLiveStreamTranscodeTemplatesResult?;

    enum DescribeCustomLiveStreamTranscodeTemplatesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamTranscodeTemplatesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCustomLiveStreamTranscodeTemplatesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCustomLiveStreamTranscodeTemplatesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamTranscodeTemplatesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteLiveStreamDomainTranscodeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamDomainTranscodeResult?;

    enum DeleteLiveStreamDomainTranscodeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamDomainTranscodeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamDomainTranscodeResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamDomainTranscodeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamDomainTranscodeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询系统默认转码模板列表
      ///       /// 
public class DescribeSystemLiveStreamTranscodeTemplatesRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围 [1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小
      /// - 取值范围 [10, 100]
      /// 
    var pageSize:Int?

    /// 转码模板查询过滤条件:
      ///   - name:   template 录制模板自定义名称
      ///   - value:  如果参数为空，则查询全部
      ///   - 如果为空,则表示查询该用下所有自定义的转码模板
      /// 
    var filters:[Filter?]?




    enum DescribeSystemLiveStreamTranscodeTemplatesRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSystemLiveStreamTranscodeTemplatesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class AddCustomLiveStreamTranscodeTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddCustomLiveStreamTranscodeTemplateResult?;

    enum AddCustomLiveStreamTranscodeTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddCustomLiveStreamTranscodeTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddCustomLiveStreamTranscodeTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension AddCustomLiveStreamTranscodeTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddCustomLiveStreamTranscodeTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteCustomLiveStreamTranscodeTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteCustomLiveStreamTranscodeTemplateResult?;

    enum DeleteCustomLiveStreamTranscodeTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteCustomLiveStreamTranscodeTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteCustomLiveStreamTranscodeTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteCustomLiveStreamTranscodeTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCustomLiveStreamTranscodeTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加应用转码配置
      ///       /// - 添加应用级别的转码模板配置
      ///       ///  
public class AddLiveStreamAppTranscodeResult:NSObject,JdCloudResult
{
}

///  删除应用级别转码模板配置
      ///       /// - 删除应用级别的转码模板配置,重新推流后生效
      ///       /// 
public class DeleteLiveStreamAppTranscodeRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 转码模板
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,appName:String,template:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamAppTranscodeRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamAppTranscodeRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(template, forKey: .template)

    }
}


///  添加应用转码配置
      ///       /// - 添加应用级别的转码模板配置
      ///       /// 
public class AddLiveStreamAppTranscodeRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 转码模版
      /// - 取值范围: 系统标准转码模板, 用户自定义转码模板
      /// - 系统标准转码模板
      ///   ld (h.264/640*360/15f)
      ///   sd (h.264/960*540/25f)
      ///   hd (h.264/1280*720/25f)
      ///   shd (h.264/1920*1080/30f)
      ///   ld-265 (h.265/640*360/15f)
      ///   sd-265 (h.265/960*540/25f)
      ///   hd-265 (h.265/1280*720/25f)
      ///   shd-265 (h.265/1920*1080/30f)
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,appName:String,template:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.template = template
        super.init(regionId: regionId)
    }


    enum AddLiveStreamAppTranscodeRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamAppTranscodeRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(template, forKey: .template)

    }
}

public class AddLiveStreamDomainTranscodeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveStreamDomainTranscodeResult?;

    enum AddLiveStreamDomainTranscodeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveStreamDomainTranscodeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveStreamDomainTranscodeResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveStreamDomainTranscodeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamDomainTranscodeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询转码模板配置
      ///       /// - 转码模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效原则
      ///       /// - 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
      ///       /// - 该查询旨在查询域名、应用、流最终生效的转码模板配置,并非各级的模板绑定情况
      ///       ///  
public class DescribeLiveStreamTranscodeConfigResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 码率信息
    var transcodeConfigs:[TemplateConfig?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveStreamTranscodeConfigResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case transcodeConfigs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamTranscodeConfigResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.transcodeConfigs)
        {
            self.transcodeConfigs = try decoderContainer.decode([TemplateConfig?]?.self, forKey: .transcodeConfigs)
        }
    }
}
public extension DescribeLiveStreamTranscodeConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamTranscodeConfigResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(transcodeConfigs, forKey: .transcodeConfigs)
    }
}
/// 删除用户自定义转码模板
      ///       /// - 删除用户自定义转码模板之前必须先删除此模板在各域名、应用、流级别的转码设置
      ///       ///  
public class DeleteCustomLiveStreamTranscodeTemplateResult:NSObject,JdCloudResult
{
}

///  查询用户自定义转码模板列表
      ///       /// 
public class DescribeCustomLiveStreamTranscodeTemplatesRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围 [1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小
      /// - 取值范围 [10, 100]
      /// 
    var pageSize:Int?

    /// 转码模板查询过滤条件:
      ///   - name:   template 录制模板自定义名称
      ///   - value:  如果参数为空，则查询全部
      ///   - 如果为空,则表示查询该用下所有自定义的转码模板
      /// 
    var filters:[Filter?]?




    enum DescribeCustomLiveStreamTranscodeTemplatesRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamTranscodeTemplatesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 删除域名级别转码模板配置
      ///       /// - 删除域名级别转码模板配置,重新推流后生效
      ///       ///  
public class DeleteLiveStreamDomainTranscodeResult:NSObject,JdCloudResult
{
}
/// 添加自定义转码模板
      ///       /// - 系统为您预设了标准转码模板,如果不能满足您的转码需求,可以通过此接口添加自定义转码模板
      ///       /// - 系统标准转码模板
      ///       ///     ld (h.264/640*360/15f)
      ///       ///     sd (h.264/960*540/25f)
      ///       ///     hd (h.264/1280*720/25f)
      ///       ///     shd (h.264/1920*1080/30f)
      ///       ///     ld-265 (h.265/640*360/15f)
      ///       ///     sd-265 (h.265/960*540/25f)
      ///       ///     hd-265 (h.265/1280*720/25f)
      ///       ///     shd-265 (h.265/1920*1080/30f)
      ///       ///  
public class AddCustomLiveStreamTranscodeTemplateResult:NSObject,JdCloudResult
{
}

///  删除域名级别转码模板配置
      ///       /// - 删除域名级别转码模板配置,重新推流后生效
      ///       /// 
public class DeleteLiveStreamDomainTranscodeRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 转码模板
    var template:String


    public init(regionId: String,publishDomain:String,template:String){
        self.publishDomain = publishDomain
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamDomainTranscodeRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamDomainTranscodeRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(template, forKey: .template)

    }
}


///  删除用户自定义转码模板
      ///       /// - 删除用户自定义转码模板之前必须先删除此模板在各域名、应用、流级别的转码设置
      ///       /// 
public class DeleteCustomLiveStreamTranscodeTemplateRequest:JdCloudRequest
{
    /// 转码模板
      /// 
    var template:String


    public init(regionId: String,template:String){
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteCustomLiveStreamTranscodeTemplateRequestRequestCodingKeys: String, CodingKey {
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCustomLiveStreamTranscodeTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(template, forKey: .template)

    }
}


///  查询转码模板绑定
      ///       /// 
public class DescribeTranscodeBindingRequest:JdCloudRequest
{
    /// 转码模板
    var template:String


    public init(regionId: String,template:String){
        self.template = template
        super.init(regionId: regionId)
    }


    enum DescribeTranscodeBindingRequestRequestCodingKeys: String, CodingKey {
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTranscodeBindingRequestRequestCodingKeys.self)
        try encoderContainer.encode(template, forKey: .template)

    }
}


///  添加域名级别转码配置
      ///       /// - 添加域名级别的转码模板配置
      ///       /// 
public class AddLiveStreamDomainTranscodeRequest:JdCloudRequest
{
    /// 直播的推流域名
    var publishDomain:String

    /// 转码模版
      /// - 取值范围: 系统标准转码模板, 用户自定义转码模板
      /// - 系统标准转码模板
      ///   ld (h.264/640*360/15f)
      ///   sd (h.264/960*540/25f)
      ///   hd (h.264/1280*720/25f)
      ///   shd (h.264/1920*1080/30f)
      ///   ld-265 (h.265/640*360/15f)
      ///   sd-265 (h.265/960*540/25f)
      ///   hd-265 (h.265/1280*720/25f)
      ///   shd-265 (h.265/1920*1080/30f)
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,template:String){
        self.publishDomain = publishDomain
        self.template = template
        super.init(regionId: regionId)
    }


    enum AddLiveStreamDomainTranscodeRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamDomainTranscodeRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(template, forKey: .template)

    }
}

public class DescribeSystemLiveStreamTranscodeTemplatesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSystemLiveStreamTranscodeTemplatesResult?;

    enum DescribeSystemLiveStreamTranscodeTemplatesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSystemLiveStreamTranscodeTemplatesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSystemLiveStreamTranscodeTemplatesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSystemLiveStreamTranscodeTemplatesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSystemLiveStreamTranscodeTemplatesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AddLiveStreamAppTranscodeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveStreamAppTranscodeResult?;

    enum AddLiveStreamAppTranscodeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveStreamAppTranscodeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveStreamAppTranscodeResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveStreamAppTranscodeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamAppTranscodeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLiveStreamTranscodeConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveStreamTranscodeConfigResult?;

    enum DescribeLiveStreamTranscodeConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveStreamTranscodeConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveStreamTranscodeConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveStreamTranscodeConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamTranscodeConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeTranscodeBindingResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeTranscodeBindingResult?;

    enum DescribeTranscodeBindingResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeTranscodeBindingResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeTranscodeBindingResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeTranscodeBindingResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTranscodeBindingResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除应用级别转码模板配置
      ///       /// - 删除应用级别的转码模板配置,重新推流后生效
      ///       ///  
public class DeleteLiveStreamAppTranscodeResult:NSObject,JdCloudResult
{
}
/// 添加域名级别转码配置
      ///       /// - 添加域名级别的转码模板配置
      ///       ///  
public class AddLiveStreamDomainTranscodeResult:NSObject,JdCloudResult
{
}

///  添加自定义转码模板
      ///       /// - 系统为您预设了标准转码模板,如果不能满足您的转码需求,可以通过此接口添加自定义转码模板
      ///       /// - 系统标准转码模板
      ///       ///     ld (h.264/640*360/15f)
      ///       ///     sd (h.264/960*540/25f)
      ///       ///     hd (h.264/1280*720/25f)
      ///       ///     shd (h.264/1920*1080/30f)
      ///       ///     ld-265 (h.265/640*360/15f)
      ///       ///     sd-265 (h.265/960*540/25f)
      ///       ///     hd-265 (h.265/1280*720/25f)
      ///       ///     shd-265 (h.265/1920*1080/30f)
      ///       /// 
public class AddCustomLiveStreamTranscodeTemplateRequest:JdCloudRequest
{
    /// 转码模板名称
      /// - 长度范围：[1,50]
      /// 
    var templateName:String?

    /// 视频编码格式，取值：h264,h265，默认h264
      /// - h264时,分辨率小于等于1080p
      /// - h265时,分辨率小于等于4k
      /// 
    var videoCodec:String?

    /// 转码输出的码率值
      /// - 取值范围: [128,15000]
      /// - 单位: kpbs
      /// 
    var videoCodeRate:Int

    /// 转码输出的帧率值
      /// - 取值：[1,30]
      /// 
    var videoFrameRate:String

    /// 转码输出视频宽度
      /// - 取值: [128,4096]
      /// - 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出转码
      /// - 如果(width,height)都不设置，则按源流大小输出转码
      /// 
    var width:Int?

    /// 转码输出视频高度
      /// - 取值: [128,4096]
      /// - 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出转码
      /// - 如果(width,height)都不设置，则按源流大小输出转码
      /// 
    var height:Int?

    /// 转码模板(转码流输出后缀)
      /// - 取值要求：数字、大小写字母或短横线(&quot;-&quot;),必须以数字或字母作为开头和结尾,长度不超过50字符
      /// - &lt;b&gt;注意: 不能与系统的标准的转码模板和当前用户已自定义命名重复&lt;/b&gt;
      /// - 系统标准转码模板
      ///   ld (h.264/640*360/15f)
      ///   sd (h.264/960*540/25f)
      ///   hd (h.264/1280*720/25f)
      ///   shd (h.264/1920*1080/30f)
      ///   ld-265 (h.265/640*360/15f)
      ///   sd-265 (h.265/960*540/25f)
      ///   hd-265 (h.265/1280*720/25f)
      ///   shd-265 (h.265/1920*1080/30f)
      /// 
    var template:String

    /// 转码输出音频编码格式
      /// - 取值: aac、mp3
      /// - 不区分大小写
      /// 
    var audioCodec:String

    /// 转码输出音频格式
      /// - 取值: aac_lc,aac_low,aac_he,aac_he_v2; 默认:aac_he
      /// - 不区分大小写
      /// 
    var audioFormat:String?

    /// 转码输出音频采样率
      /// - 取值: [44100,48000]
      /// 
    var audioSampleRate:Int

    /// 转码输出音频通道数
      ///   1: 单声道
      ///   2: 双声道
      /// 
    var audioChannel:Int

    /// 转码输出音频码率
      /// - 取值: [16,128]
      /// - 单位: kbps
      /// 
    var audioCodeRate:Int

    /// 京享超清开关
      /// - 取值: jdchd-1.0,off
      /// - 京享超清暂时只支持h.264
      /// 
    var jdchd:String?

    /// 舒适音频
      /// - 取值: on,off
      /// 
    var audioComfort:String?


    public init(regionId: String,videoCodeRate:Int,videoFrameRate:String,template:String,audioCodec:String,audioSampleRate:Int,audioChannel:Int,audioCodeRate:Int){
        self.videoCodeRate = videoCodeRate
        self.videoFrameRate = videoFrameRate
        self.template = template
        self.audioCodec = audioCodec
        self.audioSampleRate = audioSampleRate
        self.audioChannel = audioChannel
        self.audioCodeRate = audioCodeRate
        super.init(regionId: regionId)
    }


    enum AddCustomLiveStreamTranscodeTemplateRequestRequestCodingKeys: String, CodingKey {
        case templateName
        case videoCodec
        case videoCodeRate
        case videoFrameRate
        case width
        case height
        case template
        case audioCodec
        case audioFormat
        case audioSampleRate
        case audioChannel
        case audioCodeRate
        case jdchd
        case audioComfort
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddCustomLiveStreamTranscodeTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(templateName, forKey: .templateName)
        try encoderContainer.encode(videoCodec, forKey: .videoCodec)
        try encoderContainer.encode(videoCodeRate, forKey: .videoCodeRate)
        try encoderContainer.encode(videoFrameRate, forKey: .videoFrameRate)
        try encoderContainer.encode(width, forKey: .width)
        try encoderContainer.encode(height, forKey: .height)
        try encoderContainer.encode(template, forKey: .template)
        try encoderContainer.encode(audioCodec, forKey: .audioCodec)
        try encoderContainer.encode(audioFormat, forKey: .audioFormat)
        try encoderContainer.encode(audioSampleRate, forKey: .audioSampleRate)
        try encoderContainer.encode(audioChannel, forKey: .audioChannel)
        try encoderContainer.encode(audioCodeRate, forKey: .audioCodeRate)
        try encoderContainer.encode(jdchd, forKey: .jdchd)
        try encoderContainer.encode(audioComfort, forKey: .audioComfort)

    }
}


///  查询用户自定义转码模板详情
      ///       /// - 查询用户自定义转码模板详情
      ///       /// - 系统标准转码模板
      ///       ///       ld (h.264/640*360/15f)
      ///       ///       sd (h.264/960*540/24f)
      ///       ///       hd (h.264/1280*720/25f)
      ///       ///       shd (h.264/1920*1080/30f)
      ///       ///       ld-265 (h.265/640*360/15f)
      ///       ///       sd-265 (h.265/960*540/24f)
      ///       ///       hd-265 (h.265/1280*720/25f)
      ///       ///       shd-265 (h.265/1920*1080/30f)
      ///       /// 
public class DescribeCustomLiveStreamTranscodeTemplateRequest:JdCloudRequest
{
    /// 转码模板
    var template:String


    public init(regionId: String,template:String){
        self.template = template
        super.init(regionId: regionId)
    }


    enum DescribeCustomLiveStreamTranscodeTemplateRequestRequestCodingKeys: String, CodingKey {
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamTranscodeTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(template, forKey: .template)

    }
}

/// 查询系统默认转码模板列表
      ///       ///  
public class DescribeSystemLiveStreamTranscodeTemplatesResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 码率信息
    var transcodeTemplates:[TranscodeInfo?]?



    public override init(){
        super.init()
    }

    enum DescribeSystemLiveStreamTranscodeTemplatesResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case transcodeTemplates
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSystemLiveStreamTranscodeTemplatesResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.transcodeTemplates)
        {
            self.transcodeTemplates = try decoderContainer.decode([TranscodeInfo?]?.self, forKey: .transcodeTemplates)
        }
    }
}
public extension DescribeSystemLiveStreamTranscodeTemplatesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSystemLiveStreamTranscodeTemplatesResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(transcodeTemplates, forKey: .transcodeTemplates)
    }
}
/// 查询转码模板绑定
      ///       ///  
public class DescribeTranscodeBindingResult:NSObject,JdCloudResult
{
    /// 转码模板模板绑定集合
    var bindingList:[TemplateBinding?]?



    public override init(){
        super.init()
    }

    enum DescribeTranscodeBindingResultCodingKeys: String, CodingKey {
        case bindingList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeTranscodeBindingResultCodingKeys.self)
        if decoderContainer.contains(.bindingList)
        {
            self.bindingList = try decoderContainer.decode([TemplateBinding?]?.self, forKey: .bindingList)
        }
    }
}
public extension DescribeTranscodeBindingResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTranscodeBindingResultCodingKeys.self)
        try encoderContainer.encode(bindingList, forKey: .bindingList)
    }
}
public class DescribeCustomLiveStreamTranscodeTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCustomLiveStreamTranscodeTemplateResult?;

    enum DescribeCustomLiveStreamTranscodeTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamTranscodeTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCustomLiveStreamTranscodeTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCustomLiveStreamTranscodeTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamTranscodeTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询用户自定义转码模板列表
      ///       ///  
public class DescribeCustomLiveStreamTranscodeTemplatesResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 码率信息
    var transcodeTemplates:[TranscodeInfo?]?



    public override init(){
        super.init()
    }

    enum DescribeCustomLiveStreamTranscodeTemplatesResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case transcodeTemplates
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamTranscodeTemplatesResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.transcodeTemplates)
        {
            self.transcodeTemplates = try decoderContainer.decode([TranscodeInfo?]?.self, forKey: .transcodeTemplates)
        }
    }
}
public extension DescribeCustomLiveStreamTranscodeTemplatesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamTranscodeTemplatesResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(transcodeTemplates, forKey: .transcodeTemplates)
    }
}

///  查询转码模板配置
      ///       /// - 转码模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效原则
      ///       /// - 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
      ///       /// - 该查询旨在查询域名、应用、流最终生效的转码模板配置,并非各级的模板绑定情况
      ///       /// 
public class DescribeLiveStreamTranscodeConfigRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围 [1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小
      /// - 取值范围[10, 100]
      /// 
    var pageSize:Int?

    /// 模板配置查询过滤条件:
      ///   - name:   publishDomain 必填(推流域名)
      ///   - value:  参数
      ///   - name:   appName 必填(应用名称)
      ///   - value:  参数
      ///   - name:   streamName 非必填(流名称)
      ///   - value:  参数
      /// 
    var filters:[Filter?]?




    enum DescribeLiveStreamTranscodeConfigRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveStreamTranscodeConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 查询用户自定义转码模板详情
      ///       /// - 查询用户自定义转码模板详情
      ///       /// - 系统标准转码模板
      ///       ///       ld (h.264/640*360/15f)
      ///       ///       sd (h.264/960*540/24f)
      ///       ///       hd (h.264/1280*720/25f)
      ///       ///       shd (h.264/1920*1080/30f)
      ///       ///       ld-265 (h.265/640*360/15f)
      ///       ///       sd-265 (h.265/960*540/24f)
      ///       ///       hd-265 (h.265/1280*720/25f)
      ///       ///       shd-265 (h.265/1920*1080/30f)
      ///       ///  
public class DescribeCustomLiveStreamTranscodeTemplateResult:NSObject,JdCloudResult
{
    /// 视频编码格式，取值：h264,h265，默认h264
      /// 
    var videoCodec:String?

    /// 转码输出的码率值
      /// - 单位: kpbs
      /// 
    var videoCodeRate:Int?

    /// 转码输出的帧率值
      /// 
    var videoFrameRate:String?

    /// 转码输出视频宽度
      /// 
    var width:Int?

    /// 转码输出视频高度
      /// 
    var height:Int?

    /// 转码模板
      /// 
    var template:String?

    /// 转码输出音频编码格式
      /// 
    var audioCodec:String?

    /// 转码输出音频格式
      /// 
    var audioFormat:String?

    /// 转码输出音频采样率
      /// 
    var audioSampleRate:Int?

    /// 转码输出音频通道数
      ///   1: 单声道
      ///   2: 双声道
      /// 
    var audioChannel:Int?

    /// 转码输出音频码率
      /// - 单位: kbps
      /// 
    var audioCodeRate:Int?

    /// 京享超清
      /// - 取值: jdchd-1.0,off
      /// 
    var jdchd:String?

    /// 舒适音频
      /// - 取值: on,off
      /// 
    var audioComfort:String?



    public override init(){
        super.init()
    }

    enum DescribeCustomLiveStreamTranscodeTemplateResultCodingKeys: String, CodingKey {
        case videoCodec
        case videoCodeRate
        case videoFrameRate
        case width
        case height
        case template
        case audioCodec
        case audioFormat
        case audioSampleRate
        case audioChannel
        case audioCodeRate
        case jdchd
        case audioComfort
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamTranscodeTemplateResultCodingKeys.self)
        if decoderContainer.contains(.videoCodec)
        {
            self.videoCodec = try decoderContainer.decode(String?.self, forKey: .videoCodec)
        }
        if decoderContainer.contains(.videoCodeRate)
        {
            self.videoCodeRate = try decoderContainer.decode(Int?.self, forKey: .videoCodeRate)
        }
        if decoderContainer.contains(.videoFrameRate)
        {
            self.videoFrameRate = try decoderContainer.decode(String?.self, forKey: .videoFrameRate)
        }
        if decoderContainer.contains(.width)
        {
            self.width = try decoderContainer.decode(Int?.self, forKey: .width)
        }
        if decoderContainer.contains(.height)
        {
            self.height = try decoderContainer.decode(Int?.self, forKey: .height)
        }
        if decoderContainer.contains(.template)
        {
            self.template = try decoderContainer.decode(String?.self, forKey: .template)
        }
        if decoderContainer.contains(.audioCodec)
        {
            self.audioCodec = try decoderContainer.decode(String?.self, forKey: .audioCodec)
        }
        if decoderContainer.contains(.audioFormat)
        {
            self.audioFormat = try decoderContainer.decode(String?.self, forKey: .audioFormat)
        }
        if decoderContainer.contains(.audioSampleRate)
        {
            self.audioSampleRate = try decoderContainer.decode(Int?.self, forKey: .audioSampleRate)
        }
        if decoderContainer.contains(.audioChannel)
        {
            self.audioChannel = try decoderContainer.decode(Int?.self, forKey: .audioChannel)
        }
        if decoderContainer.contains(.audioCodeRate)
        {
            self.audioCodeRate = try decoderContainer.decode(Int?.self, forKey: .audioCodeRate)
        }
        if decoderContainer.contains(.jdchd)
        {
            self.jdchd = try decoderContainer.decode(String?.self, forKey: .jdchd)
        }
        if decoderContainer.contains(.audioComfort)
        {
            self.audioComfort = try decoderContainer.decode(String?.self, forKey: .audioComfort)
        }
    }
}
public extension DescribeCustomLiveStreamTranscodeTemplateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamTranscodeTemplateResultCodingKeys.self)
        try encoderContainer.encode(videoCodec, forKey: .videoCodec)
        try encoderContainer.encode(videoCodeRate, forKey: .videoCodeRate)
        try encoderContainer.encode(videoFrameRate, forKey: .videoFrameRate)
        try encoderContainer.encode(width, forKey: .width)
        try encoderContainer.encode(height, forKey: .height)
        try encoderContainer.encode(template, forKey: .template)
        try encoderContainer.encode(audioCodec, forKey: .audioCodec)
        try encoderContainer.encode(audioFormat, forKey: .audioFormat)
        try encoderContainer.encode(audioSampleRate, forKey: .audioSampleRate)
        try encoderContainer.encode(audioChannel, forKey: .audioChannel)
        try encoderContainer.encode(audioCodeRate, forKey: .audioCodeRate)
        try encoderContainer.encode(jdchd, forKey: .jdchd)
        try encoderContainer.encode(audioComfort, forKey: .audioComfort)
    }
}
/// 开启P2P
      ///       ///  
public class OpenLiveP2pResult:NSObject,JdCloudResult
{
}
public class OpenLiveP2pResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:OpenLiveP2pResult?;

    enum OpenLiveP2pResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OpenLiveP2pResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(OpenLiveP2pResult?.self, forKey: .result) ?? nil
    }
}

public extension OpenLiveP2pResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OpenLiveP2pResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  开启P2P
      ///       /// 
public class OpenLiveP2pRequest:JdCloudRequest
{
    /// 播放域名
    var playDomain:String?




    enum OpenLiveP2pRequestRequestCodingKeys: String, CodingKey {
        case playDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OpenLiveP2pRequestRequestCodingKeys.self)
        try encoderContainer.encode(playDomain, forKey: .playDomain)

    }
}


///  查询P2P配置
public class DescribeLiveP2pConfigsRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围[1, 100000]
      /// 
    var pageNumber:Int?

    /// 分页大小
      /// - 取值范围[10, 100]
      /// 
    var pageSize:Int?

    /// 直播的播放域名
      /// - 目前仅支持精确匹配
      /// 
    var playDomain:String


    public init(regionId: String,playDomain:String){
        self.playDomain = playDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveP2pConfigsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case playDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveP2pConfigsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(playDomain, forKey: .playDomain)

    }
}


///  关闭P2P
public class CloseLiveP2pRequest:JdCloudRequest
{
    /// 播放域名
    var playDomain:String?




    enum CloseLiveP2pRequestRequestCodingKeys: String, CodingKey {
        case playDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CloseLiveP2pRequestRequestCodingKeys.self)
        try encoderContainer.encode(playDomain, forKey: .playDomain)

    }
}

public class CloseLiveP2pResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CloseLiveP2pResult?;

    enum CloseLiveP2pResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CloseLiveP2pResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CloseLiveP2pResult?.self, forKey: .result) ?? nil
    }
}

public extension CloseLiveP2pResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CloseLiveP2pResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLiveP2pConfigsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveP2pConfigsResult?;

    enum DescribeLiveP2pConfigsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveP2pConfigsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveP2pConfigsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveP2pConfigsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveP2pConfigsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 关闭P2P 
public class CloseLiveP2pResult:NSObject,JdCloudResult
{
}
/// 查询P2P配置 
public class DescribeLiveP2pConfigsResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// P2P配置集合
    var p2pConfigs:[P2pConfigs?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveP2pConfigsResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case p2pConfigs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveP2pConfigsResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.p2pConfigs)
        {
            self.p2pConfigs = try decoderContainer.decode([P2pConfigs?]?.self, forKey: .p2pConfigs)
        }
    }
}
public extension DescribeLiveP2pConfigsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveP2pConfigsResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(p2pConfigs, forKey: .p2pConfigs)
    }
}
public class AddLiveAppResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveAppResult?;

    enum AddLiveAppResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveAppResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveAppResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveAppResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveAppResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 停用 运行中 状态的应用
      ///       /// - 停用应用之后,不能再用此应用名推流
      ///       ///  
public class StopLiveAppResult:NSObject,JdCloudResult
{
}
/// 查询域名下的APP列表 
public class DescribeLiveAppResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// app列表
    var apps:[App?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveAppResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case apps
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveAppResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.apps)
        {
            self.apps = try decoderContainer.decode([App?]?.self, forKey: .apps)
        }
    }
}
public extension DescribeLiveAppResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveAppResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(apps, forKey: .apps)
    }
}

///  添加直播应用名
      ///       /// - 需要提前在应用(app)级别绑定功能模板时才需要提前新建应用名
      ///       /// - 新的应用名可以推流时自动创建
      ///       /// 
public class AddLiveAppRequest:JdCloudRequest
{
    /// 直播的推流域名
    var publishDomain:String

    /// 应用名称
      /// - 取值: 数字字母中划线(&quot;-&quot;)下划线(&quot;_&quot;) 50个字符以内
      /// 
    var appName:String


    public init(regionId: String,publishDomain:String,appName:String){
        self.publishDomain = publishDomain
        self.appName = appName
        super.init(regionId: regionId)
    }


    enum AddLiveAppRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveAppRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)

    }
}

/// 添加直播应用名
      ///       /// - 需要提前在应用(app)级别绑定功能模板时才需要提前新建应用名
      ///       /// - 新的应用名可以推流时自动创建
      ///       ///  
public class AddLiveAppResult:NSObject,JdCloudResult
{
}
public class StopLiveAppResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopLiveAppResult?;

    enum StopLiveAppResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopLiveAppResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopLiveAppResult?.self, forKey: .result) ?? nil
    }
}

public extension StopLiveAppResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopLiveAppResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询域名下的APP列表
public class DescribeLiveAppRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围: [1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小
      /// - 取值范围: [10, 100]
      /// 
    var pageSize:Int?

    /// 域名下的app列表过滤条件:
      ///   - name: publishDomain 直播的推流域名
      ///   - values: 如果参数为空,则查询全部
      ///   - 过滤条件为空,则表示查询用户下的所有应用名
      /// 
    var filters:[Filter?]?




    enum DescribeLiveAppRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveAppRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class DescribeLiveAppResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveAppResult?;

    enum DescribeLiveAppResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveAppResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveAppResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveAppResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveAppResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  停用 运行中 状态的应用
      ///       /// - 停用应用之后,不能再用此应用名推流
      ///       /// 
public class StopLiveAppRequest:JdCloudRequest
{
    /// 直播的推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String


    public init(regionId: String,publishDomain:String,appName:String){
        self.publishDomain = publishDomain
        self.appName = appName
        super.init(regionId: regionId)
    }


    enum StopLiveAppRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopLiveAppRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)

    }
}


///  查询直播水印配置
      ///       /// - 水印模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
      ///       /// - 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
      ///       /// - 该查询旨在查询域名、应用、流最终生效的水印模板配置,并非各级的模板绑定情况
      ///       /// 
public class DescribeCustomLiveStreamWatermarkConfigRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围 [1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小
      /// - 取值范围 [10, 100]
      /// 
    var pageSize:Int?

    /// 水印配置查询过滤条件:
      ///   - name:   publishDomain，必填(推流域名)
      ///   - value:  参数
      ///   - name:   appName，必填(应用名称)
      ///   - value:  参数
      ///   - name:   streamName，非必填(流名称)
      ///   - value:  参数
      /// 
    var filters:[Filter?]?




    enum DescribeCustomLiveStreamWatermarkConfigRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamWatermarkConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class DeleteCustomLiveStreamWatermarkTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteCustomLiveStreamWatermarkTemplateResult?;

    enum DeleteCustomLiveStreamWatermarkTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteCustomLiveStreamWatermarkTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteCustomLiveStreamWatermarkTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteCustomLiveStreamWatermarkTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCustomLiveStreamWatermarkTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteLiveStreamDomainWatermarkResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamDomainWatermarkResult?;

    enum DeleteLiveStreamDomainWatermarkResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamDomainWatermarkResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamDomainWatermarkResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamDomainWatermarkResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamDomainWatermarkResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询水印模板绑定
      ///       ///  
public class DescribeWatermarkBindingResult:NSObject,JdCloudResult
{
    /// 水印模板绑定集合
    var bindingList:[TemplateBinding?]?



    public override init(){
        super.init()
    }

    enum DescribeWatermarkBindingResultCodingKeys: String, CodingKey {
        case bindingList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWatermarkBindingResultCodingKeys.self)
        if decoderContainer.contains(.bindingList)
        {
            self.bindingList = try decoderContainer.decode([TemplateBinding?]?.self, forKey: .bindingList)
        }
    }
}
public extension DescribeWatermarkBindingResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWatermarkBindingResultCodingKeys.self)
        try encoderContainer.encode(bindingList, forKey: .bindingList)
    }
}
public class AddLiveStreamDomainWatermarkResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveStreamDomainWatermarkResult?;

    enum AddLiveStreamDomainWatermarkResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveStreamDomainWatermarkResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveStreamDomainWatermarkResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveStreamDomainWatermarkResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamDomainWatermarkResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加用户自定义水印模板
      ///       /// 
public class AddCustomLiveStreamWatermarkTemplateRequest:JdCloudRequest
{
    /// 水印位置
      /// - 取值范围：左上：1，右上：3， 左下：7，右下：9，默认：1
      /// 
    var position:Int?

    /// 偏移量单位
      /// - 取值: percent,pixel
      /// - percent:按百分比; pixel:像素 默认:pixel
      /// 
    var offsetUnit:String?

    /// x轴偏移量
      /// - 取值范围
      ///   percent: (0,100]
      ///   pixel: (0,1920]
      /// 
    var offsetX:Int

    /// y轴偏移量:
      /// - 取值范围
      ///   percent: (0,100]
      ///   pixel: (0,1920]
      /// 
    var offsetY:Int

    /// 水印大小单位
      /// - 取值: percent,pixel
      /// - percent:按百分比; pixel:像素 默认:pixel
      /// 
    var sizeUnit:String?

    /// 水印宽度:
      /// - 取值范围
      ///   percent: (0,100]
      ///   pixel: (0,1920]
      /// 
    var width:Int

    /// 水印高度:
      /// - 取值范围
      ///   percent: (0,100]
      ///   pixel: (0,1920]
      /// 
    var height:Int

    /// 自定义水印模板名称
      /// -&amp;ensp;取值要求: 数字、大小写字母、短横线(&quot;-&quot;)、下划线(&quot;_&quot;),
      /// &amp;ensp;&amp;ensp;首尾不能有特殊字符(&quot;-&quot;),
      /// &amp;ensp;&amp;ensp;不超过50字符,utf-8格式
      /// -&amp;ensp;&lt;b&gt;注意: 不能与已定义命名重复&lt;/b&gt;
      /// 
    var template:String

    /// 创建上传任务时返回的uploadId参数，当通过接口上传水印图片时，uploadId必填
      /// 
    var uploadId:String?

    /// 水印地址&lt;br&gt;-&amp;ensp;以&amp;ensp;http:// 开头,可公开访问地址&lt;br&gt;
    var url:String


    public init(regionId: String,offsetX:Int,offsetY:Int,width:Int,height:Int,template:String,url:String){
        self.offsetX = offsetX
        self.offsetY = offsetY
        self.width = width
        self.height = height
        self.template = template
        self.url = url
        super.init(regionId: regionId)
    }


    enum AddCustomLiveStreamWatermarkTemplateRequestRequestCodingKeys: String, CodingKey {
        case position
        case offsetUnit
        case offsetX
        case offsetY
        case sizeUnit
        case width
        case height
        case template
        case uploadId
        case url
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddCustomLiveStreamWatermarkTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(position, forKey: .position)
        try encoderContainer.encode(offsetUnit, forKey: .offsetUnit)
        try encoderContainer.encode(offsetX, forKey: .offsetX)
        try encoderContainer.encode(offsetY, forKey: .offsetY)
        try encoderContainer.encode(sizeUnit, forKey: .sizeUnit)
        try encoderContainer.encode(width, forKey: .width)
        try encoderContainer.encode(height, forKey: .height)
        try encoderContainer.encode(template, forKey: .template)
        try encoderContainer.encode(uploadId, forKey: .uploadId)
        try encoderContainer.encode(url, forKey: .url)

    }
}


///  查询水印模板绑定
      ///       /// 
public class DescribeWatermarkBindingRequest:JdCloudRequest
{
    /// 水印模板
    var template:String


    public init(regionId: String,template:String){
        self.template = template
        super.init(regionId: regionId)
    }


    enum DescribeWatermarkBindingRequestRequestCodingKeys: String, CodingKey {
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWatermarkBindingRequestRequestCodingKeys.self)
        try encoderContainer.encode(template, forKey: .template)

    }
}


///  删除应用级别水印模板配置
      ///       /// - 删除应用级别的水印模板配置,重新推流后生效
      ///       /// 
public class DeleteLiveStreamAppWatermarkRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 水印模板
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,appName:String,template:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamAppWatermarkRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamAppWatermarkRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(template, forKey: .template)

    }
}

/// 删除用户自定义水印模板
      ///       /// - 删除用户自定义水印模板之前必须先删除此模板在各域名、应用、流级别的水印设置
      ///       ///  
public class DeleteCustomLiveStreamWatermarkTemplateResult:NSObject,JdCloudResult
{
}
/// 添加用户自定义水印模板
      ///       ///  
public class AddCustomLiveStreamWatermarkTemplateResult:NSObject,JdCloudResult
{
}
/// 查询用户定义水印模板列表
      ///       ///  
public class DescribeCustomLiveStreamWatermarkTemplatesResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 水印模板
    var watermarkTemplates:[WatermarkTemplate?]?



    public override init(){
        super.init()
    }

    enum DescribeCustomLiveStreamWatermarkTemplatesResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case watermarkTemplates
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamWatermarkTemplatesResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.watermarkTemplates)
        {
            self.watermarkTemplates = try decoderContainer.decode([WatermarkTemplate?]?.self, forKey: .watermarkTemplates)
        }
    }
}
public extension DescribeCustomLiveStreamWatermarkTemplatesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamWatermarkTemplatesResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(watermarkTemplates, forKey: .watermarkTemplates)
    }
}
public class DescribeCustomLiveStreamWatermarkConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCustomLiveStreamWatermarkConfigResult?;

    enum DescribeCustomLiveStreamWatermarkConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamWatermarkConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCustomLiveStreamWatermarkConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCustomLiveStreamWatermarkConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamWatermarkConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除用户自定义水印模板
      ///       /// - 删除用户自定义水印模板之前必须先删除此模板在各域名、应用、流级别的水印设置
      ///       /// 
public class DeleteCustomLiveStreamWatermarkTemplateRequest:JdCloudRequest
{
    /// 水印模板
      /// 
    var template:String


    public init(regionId: String,template:String){
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteCustomLiveStreamWatermarkTemplateRequestRequestCodingKeys: String, CodingKey {
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCustomLiveStreamWatermarkTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(template, forKey: .template)

    }
}


///  删除域名级别水印模板配置
      ///       /// - 删除域名级别水印模板配置,重新推流后生效
      ///       /// 
public class DeleteLiveStreamDomainWatermarkRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 水印模板
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,template:String){
        self.publishDomain = publishDomain
        self.template = template
        super.init(regionId: regionId)
    }


    enum DeleteLiveStreamDomainWatermarkRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamDomainWatermarkRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(template, forKey: .template)

    }
}

/// 删除域名级别水印模板配置
      ///       /// - 删除域名级别水印模板配置,重新推流后生效
      ///       ///  
public class DeleteLiveStreamDomainWatermarkResult:NSObject,JdCloudResult
{
}
public class DescribeWatermarkBindingResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeWatermarkBindingResult?;

    enum DescribeWatermarkBindingResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWatermarkBindingResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeWatermarkBindingResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeWatermarkBindingResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWatermarkBindingResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询用户定义水印模板列表
      ///       /// 
public class DescribeCustomLiveStreamWatermarkTemplatesRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围 [1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小
      /// - 取值范围 [10, 100]
      /// 
    var pageSize:Int?

    /// 水印模板列表查询过滤条件:
      ///   - name:   template 录制模板自定义名称
      ///   - value:  如果参数为空，则查询全部
      /// 
    var filters:[Filter?]?




    enum DescribeCustomLiveStreamWatermarkTemplatesRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamWatermarkTemplatesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class AddLiveStreamAppWatermarkResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveStreamAppWatermarkResult?;

    enum AddLiveStreamAppWatermarkResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveStreamAppWatermarkResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveStreamAppWatermarkResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveStreamAppWatermarkResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamAppWatermarkResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加域名水印配置
      ///       /// 
public class AddLiveStreamDomainWatermarkRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 水印模板
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,template:String){
        self.publishDomain = publishDomain
        self.template = template
        super.init(regionId: regionId)
    }


    enum AddLiveStreamDomainWatermarkRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamDomainWatermarkRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(template, forKey: .template)

    }
}

/// 添加应用级别水印配置
      ///       ///  
public class AddLiveStreamAppWatermarkResult:NSObject,JdCloudResult
{
}

///  添加应用级别水印配置
      ///       /// 
public class AddLiveStreamAppWatermarkRequest:JdCloudRequest
{
    /// 推流域名
    var publishDomain:String

    /// 应用名称
    var appName:String

    /// 水印模板名称
      /// 
    var template:String


    public init(regionId: String,publishDomain:String,appName:String,template:String){
        self.publishDomain = publishDomain
        self.appName = appName
        self.template = template
        super.init(regionId: regionId)
    }


    enum AddLiveStreamAppWatermarkRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveStreamAppWatermarkRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(appName, forKey: .appName)
        try encoderContainer.encode(template, forKey: .template)

    }
}

public class DescribeCustomLiveStreamWatermarkTemplatesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCustomLiveStreamWatermarkTemplatesResult?;

    enum DescribeCustomLiveStreamWatermarkTemplatesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamWatermarkTemplatesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCustomLiveStreamWatermarkTemplatesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCustomLiveStreamWatermarkTemplatesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamWatermarkTemplatesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AddCustomLiveStreamWatermarkTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddCustomLiveStreamWatermarkTemplateResult?;

    enum AddCustomLiveStreamWatermarkTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddCustomLiveStreamWatermarkTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddCustomLiveStreamWatermarkTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension AddCustomLiveStreamWatermarkTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddCustomLiveStreamWatermarkTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加域名水印配置
      ///       ///  
public class AddLiveStreamDomainWatermarkResult:NSObject,JdCloudResult
{
}
public class DeleteLiveStreamAppWatermarkResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveStreamAppWatermarkResult?;

    enum DeleteLiveStreamAppWatermarkResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveStreamAppWatermarkResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveStreamAppWatermarkResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveStreamAppWatermarkResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveStreamAppWatermarkResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询直播水印配置
      ///       /// - 水印模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
      ///       /// - 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
      ///       /// - 该查询旨在查询域名、应用、流最终生效的水印模板配置,并非各级的模板绑定情况
      ///       ///  
public class DescribeCustomLiveStreamWatermarkConfigResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 水印模板配置列表
    var watermarkConfigs:[LiveStreamRecordConfig?]?



    public override init(){
        super.init()
    }

    enum DescribeCustomLiveStreamWatermarkConfigResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case watermarkConfigs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCustomLiveStreamWatermarkConfigResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.watermarkConfigs)
        {
            self.watermarkConfigs = try decoderContainer.decode([LiveStreamRecordConfig?]?.self, forKey: .watermarkConfigs)
        }
    }
}
public extension DescribeCustomLiveStreamWatermarkConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCustomLiveStreamWatermarkConfigResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(watermarkConfigs, forKey: .watermarkConfigs)
    }
}
/// 删除应用级别水印模板配置
      ///       /// - 删除应用级别的水印模板配置,重新推流后生效
      ///       ///  
public class DeleteLiveStreamAppWatermarkResult:NSObject,JdCloudResult
{
}
/// 设置直播回看播放鉴权KEY 
public class SetLiveRestartAuthKeyResult:NSObject,JdCloudResult
{
}
/// 查询(直播or时移)播放鉴权KEY 
public class DescribeLivePlayAuthKeyResult:NSObject,JdCloudResult
{
    /// 播放域名
    var playDomain:String?

    /// (直播or时移)播放鉴权状态
      ///   on: 开启
      ///   off: 关闭
      /// 
    var authStatus:String?

    /// (直播or时移)播放鉴权key
    var authKey:String?



    public override init(){
        super.init()
    }

    enum DescribeLivePlayAuthKeyResultCodingKeys: String, CodingKey {
        case playDomain
        case authStatus
        case authKey
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLivePlayAuthKeyResultCodingKeys.self)
        if decoderContainer.contains(.playDomain)
        {
            self.playDomain = try decoderContainer.decode(String?.self, forKey: .playDomain)
        }
        if decoderContainer.contains(.authStatus)
        {
            self.authStatus = try decoderContainer.decode(String?.self, forKey: .authStatus)
        }
        if decoderContainer.contains(.authKey)
        {
            self.authKey = try decoderContainer.decode(String?.self, forKey: .authKey)
        }
    }
}
public extension DescribeLivePlayAuthKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLivePlayAuthKeyResultCodingKeys.self)
        try encoderContainer.encode(playDomain, forKey: .playDomain)
        try encoderContainer.encode(authStatus, forKey: .authStatus)
        try encoderContainer.encode(authKey, forKey: .authKey)
    }
}
/// 设置(直播or时移)播放鉴权KEY 
public class SetLivePlayAuthKeyResult:NSObject,JdCloudResult
{
}
public class SetLivePlayAuthKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetLivePlayAuthKeyResult?;

    enum SetLivePlayAuthKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetLivePlayAuthKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetLivePlayAuthKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension SetLivePlayAuthKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLivePlayAuthKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLiveRestartAuthKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveRestartAuthKeyResult?;

    enum DescribeLiveRestartAuthKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveRestartAuthKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveRestartAuthKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveRestartAuthKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveRestartAuthKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询(直播or时移)播放鉴权KEY
public class DescribeLivePlayAuthKeyRequest:JdCloudRequest
{
    /// (直播or时移)播放域名
      /// - 仅支持精确匹配
      /// 
    var playDomain:String


    public init(regionId: String,playDomain:String){
        self.playDomain = playDomain
        super.init(regionId: regionId)
    }


    enum DescribeLivePlayAuthKeyRequestRequestCodingKeys: String, CodingKey {
        case playDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLivePlayAuthKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(playDomain, forKey: .playDomain)

    }
}

/// 查询直播回看播放鉴权KEY 
public class DescribeLiveRestartAuthKeyResult:NSObject,JdCloudResult
{
    /// 回看播放域名
    var playDomain:String?

    /// 回看播放鉴权状态
      ///   on: 开启
      ///   off: 关闭
      /// 
    var authStatus:String?

    /// 回看播放鉴权key
    var authKey:String?



    public override init(){
        super.init()
    }

    enum DescribeLiveRestartAuthKeyResultCodingKeys: String, CodingKey {
        case playDomain
        case authStatus
        case authKey
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveRestartAuthKeyResultCodingKeys.self)
        if decoderContainer.contains(.playDomain)
        {
            self.playDomain = try decoderContainer.decode(String?.self, forKey: .playDomain)
        }
        if decoderContainer.contains(.authStatus)
        {
            self.authStatus = try decoderContainer.decode(String?.self, forKey: .authStatus)
        }
        if decoderContainer.contains(.authKey)
        {
            self.authKey = try decoderContainer.decode(String?.self, forKey: .authKey)
        }
    }
}
public extension DescribeLiveRestartAuthKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveRestartAuthKeyResultCodingKeys.self)
        try encoderContainer.encode(playDomain, forKey: .playDomain)
        try encoderContainer.encode(authStatus, forKey: .authStatus)
        try encoderContainer.encode(authKey, forKey: .authKey)
    }
}
public class SetLiveRestartAuthKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetLiveRestartAuthKeyResult?;

    enum SetLiveRestartAuthKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetLiveRestartAuthKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetLiveRestartAuthKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension SetLiveRestartAuthKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveRestartAuthKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  设置直播回看播放鉴权KEY
public class SetLiveRestartAuthKeyRequest:JdCloudRequest
{
    /// 直播回看播放域名
    var restartDomain:String

    /// 直播回看播放鉴权状态
      ///   on: 开启
      ///   off: 关闭
      /// - 当回看播放鉴权状态on(开启)时,authKey不能为空
      /// 
    var authStatus:String?

    /// 直播回看播放鉴权key
      /// - 取值: 支持大小写字母和数字 长度6-32位
      /// 
    var authKey:String?


    public init(regionId: String,restartDomain:String){
        self.restartDomain = restartDomain
        super.init(regionId: regionId)
    }


    enum SetLiveRestartAuthKeyRequestRequestCodingKeys: String, CodingKey {
        case restartDomain
        case authStatus
        case authKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveRestartAuthKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(restartDomain, forKey: .restartDomain)
        try encoderContainer.encode(authStatus, forKey: .authStatus)
        try encoderContainer.encode(authKey, forKey: .authKey)

    }
}

public class DescribeLivePlayAuthKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLivePlayAuthKeyResult?;

    enum DescribeLivePlayAuthKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLivePlayAuthKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLivePlayAuthKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLivePlayAuthKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLivePlayAuthKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  设置(直播or时移)播放鉴权KEY
public class SetLivePlayAuthKeyRequest:JdCloudRequest
{
    /// (直播or时移)播放域名
    var playDomain:String

    /// (直播or时移)播放鉴权状态
      ///   on: 开启
      ///   off: 关闭
      /// - 当播放鉴权状态on(开启)时,authKey不能为空
      /// 
    var authStatus:String?

    /// (直播or时移)播放鉴权key
      /// - 取值: 支持大小写字母和数字 长度6-32位
      /// 
    var authKey:String?


    public init(regionId: String,playDomain:String){
        self.playDomain = playDomain
        super.init(regionId: regionId)
    }


    enum SetLivePlayAuthKeyRequestRequestCodingKeys: String, CodingKey {
        case playDomain
        case authStatus
        case authKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLivePlayAuthKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(playDomain, forKey: .playDomain)
        try encoderContainer.encode(authStatus, forKey: .authStatus)
        try encoderContainer.encode(authKey, forKey: .authKey)

    }
}


///  查询直播回看播放鉴权KEY
public class DescribeLiveRestartAuthKeyRequest:JdCloudRequest
{
    /// 直播回看播放域名
      /// - 仅支持精确匹配
      /// 
    var restartDomain:String


    public init(regionId: String,restartDomain:String){
        self.restartDomain = restartDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveRestartAuthKeyRequestRequestCodingKeys: String, CodingKey {
        case restartDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveRestartAuthKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(restartDomain, forKey: .restartDomain)

    }
}

public class DescribeLiveRestartDomainCertificateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveRestartDomainCertificateResult?;

    enum DescribeLiveRestartDomainCertificateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveRestartDomainCertificateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveRestartDomainCertificateResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveRestartDomainCertificateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveRestartDomainCertificateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class SetLiveRestartDomainCertificateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetLiveRestartDomainCertificateResult?;

    enum SetLiveRestartDomainCertificateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetLiveRestartDomainCertificateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetLiveRestartDomainCertificateResult?.self, forKey: .result) ?? nil
    }
}

public extension SetLiveRestartDomainCertificateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveRestartDomainCertificateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLiveDomainCertificateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveDomainCertificateResult?;

    enum DescribeLiveDomainCertificateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveDomainCertificateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveDomainCertificateResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveDomainCertificateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveDomainCertificateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 设置(直播or时移)播放证书
      ///       /// -- 设置成功之后30分钟以内生效
      ///       ///  
public class SetLiveDomainCertificateResult:NSObject,JdCloudResult
{
}

///  查询直播播放证书
public class DescribeLiveDomainCertificateRequest:JdCloudRequest
{
    /// (直播or时移)播放域名
      /// - 仅支持精确匹配
      /// 
    var playDomain:String


    public init(regionId: String,playDomain:String){
        self.playDomain = playDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveDomainCertificateRequestRequestCodingKeys: String, CodingKey {
        case playDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveDomainCertificateRequestRequestCodingKeys.self)
        try encoderContainer.encode(playDomain, forKey: .playDomain)

    }
}


///  设置直播回看证书
      ///       /// -- 设置成功之后30分钟以内生效
      ///       /// 
public class SetLiveRestartDomainCertificateRequest:JdCloudRequest
{
    /// 直播回看域名
    var restartDomain:String

    /// 直播回看证书状态
      ///   on: 开启
      ///   off: 关闭
      /// - 当播放证书状态on(开启)时,cert和key不能为空
      /// 
    var certStatus:String

    /// 直播回看证书
      /// - 取值: 最大支持4098
      /// - 当播放证书状态on(开启)时,cert不能为空
      /// 
    var cert:String?

    /// 直播回看证书key
      /// - 取值: 最大支持2048
      /// - 当播放证书状态on(开启)时,key不能为空
      /// 
    var key:String?

    /// 直播回看证书别名
      /// - 取值: 支持大小写字母和数字 长度最大256
      /// 
    var title:String?


    public init(regionId: String,restartDomain:String,certStatus:String){
        self.restartDomain = restartDomain
        self.certStatus = certStatus
        super.init(regionId: regionId)
    }


    enum SetLiveRestartDomainCertificateRequestRequestCodingKeys: String, CodingKey {
        case restartDomain
        case certStatus
        case cert
        case key
        case title
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveRestartDomainCertificateRequestRequestCodingKeys.self)
        try encoderContainer.encode(restartDomain, forKey: .restartDomain)
        try encoderContainer.encode(certStatus, forKey: .certStatus)
        try encoderContainer.encode(cert, forKey: .cert)
        try encoderContainer.encode(key, forKey: .key)
        try encoderContainer.encode(title, forKey: .title)

    }
}

/// 查询直播播放证书 
public class DescribeLiveDomainCertificateResult:NSObject,JdCloudResult
{
    /// 播放域名
    var playDomain:String?

    /// (直播or时移)播放证书状态
      ///   on: 开启
      ///   off: 关闭
      /// 
    var certStatus:String?

    /// (直播or时移)播放证书
    var cert:String?

    /// (直播or时移)播放证书别名
    var title:String?



    public override init(){
        super.init()
    }

    enum DescribeLiveDomainCertificateResultCodingKeys: String, CodingKey {
        case playDomain
        case certStatus
        case cert
        case title
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveDomainCertificateResultCodingKeys.self)
        if decoderContainer.contains(.playDomain)
        {
            self.playDomain = try decoderContainer.decode(String?.self, forKey: .playDomain)
        }
        if decoderContainer.contains(.certStatus)
        {
            self.certStatus = try decoderContainer.decode(String?.self, forKey: .certStatus)
        }
        if decoderContainer.contains(.cert)
        {
            self.cert = try decoderContainer.decode(String?.self, forKey: .cert)
        }
        if decoderContainer.contains(.title)
        {
            self.title = try decoderContainer.decode(String?.self, forKey: .title)
        }
    }
}
public extension DescribeLiveDomainCertificateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveDomainCertificateResultCodingKeys.self)
        try encoderContainer.encode(playDomain, forKey: .playDomain)
        try encoderContainer.encode(certStatus, forKey: .certStatus)
        try encoderContainer.encode(cert, forKey: .cert)
        try encoderContainer.encode(title, forKey: .title)
    }
}
public class SetLiveDomainCertificateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetLiveDomainCertificateResult?;

    enum SetLiveDomainCertificateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetLiveDomainCertificateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetLiveDomainCertificateResult?.self, forKey: .result) ?? nil
    }
}

public extension SetLiveDomainCertificateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveDomainCertificateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 设置直播回看证书
      ///       /// -- 设置成功之后30分钟以内生效
      ///       ///  
public class SetLiveRestartDomainCertificateResult:NSObject,JdCloudResult
{
}

///  查询直播回看播放证书
public class DescribeLiveRestartDomainCertificateRequest:JdCloudRequest
{
    /// 直播回看域名
      /// - 仅支持精确匹配
      /// 
    var restartDomain:String


    public init(regionId: String,restartDomain:String){
        self.restartDomain = restartDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveRestartDomainCertificateRequestRequestCodingKeys: String, CodingKey {
        case restartDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveRestartDomainCertificateRequestRequestCodingKeys.self)
        try encoderContainer.encode(restartDomain, forKey: .restartDomain)

    }
}

/// 查询直播回看播放证书 
public class DescribeLiveRestartDomainCertificateResult:NSObject,JdCloudResult
{
    /// 直播回看域名
    var restartDomain:String?

    /// 直播回看播放证书状态
      ///   on: 开启
      ///   off: 关闭
      /// 
    var certStatus:String?

    /// 直播回看证书
    var cert:String?

    /// 直播回看证书别名
    var title:String?



    public override init(){
        super.init()
    }

    enum DescribeLiveRestartDomainCertificateResultCodingKeys: String, CodingKey {
        case restartDomain
        case certStatus
        case cert
        case title
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveRestartDomainCertificateResultCodingKeys.self)
        if decoderContainer.contains(.restartDomain)
        {
            self.restartDomain = try decoderContainer.decode(String?.self, forKey: .restartDomain)
        }
        if decoderContainer.contains(.certStatus)
        {
            self.certStatus = try decoderContainer.decode(String?.self, forKey: .certStatus)
        }
        if decoderContainer.contains(.cert)
        {
            self.cert = try decoderContainer.decode(String?.self, forKey: .cert)
        }
        if decoderContainer.contains(.title)
        {
            self.title = try decoderContainer.decode(String?.self, forKey: .title)
        }
    }
}
public extension DescribeLiveRestartDomainCertificateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveRestartDomainCertificateResultCodingKeys.self)
        try encoderContainer.encode(restartDomain, forKey: .restartDomain)
        try encoderContainer.encode(certStatus, forKey: .certStatus)
        try encoderContainer.encode(cert, forKey: .cert)
        try encoderContainer.encode(title, forKey: .title)
    }
}

///  设置(直播or时移)播放证书
      ///       /// -- 设置成功之后30分钟以内生效
      ///       /// 
public class SetLiveDomainCertificateRequest:JdCloudRequest
{
    /// (直播or时移)播放域名
    var playDomain:String

    /// (直播or时移)播放证书状态
      ///   on: 开启
      ///   off: 关闭
      /// - 当播放证书状态on(开启)时,cert和key不能为空
      /// 
    var certStatus:String

    /// (直播or时移)播放证书
      /// - 取值: 最大支持4098
      /// - 当播放证书状态on(开启)时,cert不能为空
      /// 
    var cert:String?

    /// (直播or时移)播放证书key
      /// - 取值: 最大支持2048
      /// - 当播放证书状态on(开启)时,key不能为空
      /// 
    var key:String?

    /// (直播or时移)播放证书别名
      /// - 取值: 支持大小写字母和数字 长度最大256
      /// 
    var title:String?


    public init(regionId: String,playDomain:String,certStatus:String){
        self.playDomain = playDomain
        self.certStatus = certStatus
        super.init(regionId: regionId)
    }


    enum SetLiveDomainCertificateRequestRequestCodingKeys: String, CodingKey {
        case playDomain
        case certStatus
        case cert
        case key
        case title
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetLiveDomainCertificateRequestRequestCodingKeys.self)
        try encoderContainer.encode(playDomain, forKey: .playDomain)
        try encoderContainer.encode(certStatus, forKey: .certStatus)
        try encoderContainer.encode(cert, forKey: .cert)
        try encoderContainer.encode(key, forKey: .key)
        try encoderContainer.encode(title, forKey: .title)

    }
}


///  查询回看配置
public class DescribeLiveRestartConfigsRequest:JdCloudRequest
{
    /// 页码；默认为1；取值范围[1, 100000]
    var pageNum:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// 回看的推流域名
    var restartDomain:String


    public init(regionId: String,restartDomain:String){
        self.restartDomain = restartDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveRestartConfigsRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case restartDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveRestartConfigsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(restartDomain, forKey: .restartDomain)

    }
}

public class DescribeLiveRestartConfigsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveRestartConfigsResult?;

    enum DescribeLiveRestartConfigsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveRestartConfigsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveRestartConfigsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveRestartConfigsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveRestartConfigsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class OpenLiveRestartResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:OpenLiveRestartResult?;

    enum OpenLiveRestartResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OpenLiveRestartResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(OpenLiveRestartResult?.self, forKey: .result) ?? nil
    }
}

public extension OpenLiveRestartResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OpenLiveRestartResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  关闭回看
public class CloseLiveRestartRequest:JdCloudRequest
{
    /// 回看的播放域名
    var restartDomain:String


    public init(regionId: String,restartDomain:String){
        self.restartDomain = restartDomain
        super.init(regionId: regionId)
    }


    enum CloseLiveRestartRequestRequestCodingKeys: String, CodingKey {
        case restartDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CloseLiveRestartRequestRequestCodingKeys.self)
        try encoderContainer.encode(restartDomain, forKey: .restartDomain)

    }
}

/// 开启回看
      ///       /// 1、直播回看文件格式仅支持m3u8。
      ///       /// 2、回看时长用户可以配置，最大支持7天，即用户请求回看内容，最多可以请求最近7天的直播回看内容。
      ///       /// 3、域名格式：http://{restartDomain}/{appName}/{streamName}/index.m3u8?starttime&#x3D;1527756680&amp;endtime&#x3D;1527760280 (unix时间戳)
      ///       /// 4、starttime-endtime最长可支持24小时，可跨天
      ///       ///  
public class OpenLiveRestartResult:NSObject,JdCloudResult
{
}
/// 查询回看配置 
public class DescribeLiveRestartConfigsResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 域名集合
    var restartConfigs:[RestartConfig?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveRestartConfigsResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case restartConfigs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveRestartConfigsResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.restartConfigs)
        {
            self.restartConfigs = try decoderContainer.decode([RestartConfig?]?.self, forKey: .restartConfigs)
        }
    }
}
public extension DescribeLiveRestartConfigsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveRestartConfigsResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(restartConfigs, forKey: .restartConfigs)
    }
}
public class CloseLiveRestartResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CloseLiveRestartResult?;

    enum CloseLiveRestartResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CloseLiveRestartResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CloseLiveRestartResult?.self, forKey: .result) ?? nil
    }
}

public extension CloseLiveRestartResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CloseLiveRestartResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 关闭回看 
public class CloseLiveRestartResult:NSObject,JdCloudResult
{
}

///  开启回看
      ///       /// 1、直播回看文件格式仅支持m3u8。
      ///       /// 2、回看时长用户可以配置，最大支持7天，即用户请求回看内容，最多可以请求最近7天的直播回看内容。
      ///       /// 3、域名格式：http://{restartDomain}/{appName}/{streamName}/index.m3u8?starttime&#x3D;1527756680&amp;endtime&#x3D;1527760280 (unix时间戳)
      ///       /// 4、starttime-endtime最长可支持24小时，可跨天
      ///       /// 
public class OpenLiveRestartRequest:JdCloudRequest
{
    /// 回看的播放域名
    var restartDomain:String


    public init(regionId: String,restartDomain:String){
        self.restartDomain = restartDomain
        super.init(regionId: regionId)
    }


    enum OpenLiveRestartRequestRequestCodingKeys: String, CodingKey {
        case restartDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OpenLiveRestartRequestRequestCodingKeys.self)
        try encoderContainer.encode(restartDomain, forKey: .restartDomain)

    }
}

public class StartLiveDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartLiveDomainResult?;

    enum StartLiveDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartLiveDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartLiveDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension StartLiveDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartLiveDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AddLiveRestartDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveRestartDomainResult?;

    enum AddLiveRestartDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveRestartDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveRestartDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveRestartDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveRestartDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询指定域名相关信息
public class DescribeLiveDomainDetailRequest:JdCloudRequest
{
    /// 推流域名
      /// - 需要停用的域名对(推流域名,播放域名)中的推流域名
      /// 
    var publishDomain:String


    public init(regionId: String,publishDomain:String){
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum DescribeLiveDomainDetailRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveDomainDetailRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}

public class DeleteLiveDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLiveDomainResult?;

    enum DeleteLiveDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLiveDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLiveDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLiveDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加直播域名
      ///       /// - 创建直播域名之前,必须先开通直播服务
      ///       /// - 直播域名必须已经备案完成
      ///       /// 
public class AddLiveDomainRequest:JdCloudRequest
{
    /// 直播的推流域名
      /// - 不支持泛域名
      /// 
    var publishDomain:String

    /// 直播的播放域名
      /// - 不支持泛域名
      /// 
    var playDomain:String


    public init(regionId: String,publishDomain:String,playDomain:String){
        self.publishDomain = publishDomain
        self.playDomain = playDomain
        super.init(regionId: regionId)
    }


    enum AddLiveDomainRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
        case playDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)
        try encoderContainer.encode(playDomain, forKey: .playDomain)

    }
}


///  启动域名
      ///       /// - 启用状态为 停用 的直播域名对(推流域名,播放域名)将DomainStatus变更为online
      ///       /// 
public class StartLiveDomainRequest:JdCloudRequest
{
    /// 推流域名
      /// - 需要启动的域名对(推流域名,播放域名)中的推流域名
      /// 
    var publishDomain:String


    public init(regionId: String,publishDomain:String){
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum StartLiveDomainRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartLiveDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}


///  查询域名列表
public class DescribeLiveDomainsRequest:JdCloudRequest
{
    /// 页码
      /// - 取值范围[1, 100000]
      /// 
    var pageNum:Int?

    /// 分页大小
      /// - 取值范围[10, 100]
      /// 
    var pageSize:Int?

    /// 推流域名
      /// - 目前仅支持精确查询
      /// - 为空时,查询用户所有直播域名
      /// 
    var publishDomain:String?




    enum DescribeLiveDomainsRequestRequestCodingKeys: String, CodingKey {
        case pageNum
        case pageSize
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveDomainsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}

/// 停用域名
      ///       /// - 停用直播域名对(推流域名,播放域名),将DomainStatus变更为offline
      ///       /// - 停用该直播域名对后,直播域名信息仍保留,但用户将不能再用该推流域名推流或播放域名播放
      ///       ///  
public class StopLiveDomainResult:NSObject,JdCloudResult
{
}
public class StopLiveDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopLiveDomainResult?;

    enum StopLiveDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopLiveDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopLiveDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension StopLiveDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopLiveDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询域名列表 
public class DescribeLiveDomainsResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalCount:Int?

    /// 域名信息集合
    var domainDetails:[DomainDetails?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveDomainsResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalCount
        case domainDetails
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveDomainsResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.domainDetails)
        {
            self.domainDetails = try decoderContainer.decode([DomainDetails?]?.self, forKey: .domainDetails)
        }
    }
}
public extension DescribeLiveDomainsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveDomainsResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(domainDetails, forKey: .domainDetails)
    }
}

///  停用域名
      ///       /// - 停用直播域名对(推流域名,播放域名),将DomainStatus变更为offline
      ///       /// - 停用该直播域名对后,直播域名信息仍保留,但用户将不能再用该推流域名推流或播放域名播放
      ///       /// 
public class StopLiveDomainRequest:JdCloudRequest
{
    /// 推流域名
      /// - 需要停用的域名对(推流域名,播放域名)中的推流域名
      /// 
    var publishDomain:String


    public init(regionId: String,publishDomain:String){
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum StopLiveDomainRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopLiveDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}


///  删除直播域名
      ///       /// - 请慎重操作（建议在进行域名删除前到域名解析服务商处恢复域名A记录），以免导致删除操作后此域名不可访问。
      ///       ///   deleteLiveDomain调用成功后将删除本条直播域名的全部相关记录，对于仅需要暂停使用该直播域名，推荐stopLiveDomain接口
      ///       /// 
public class DeleteLiveDomainRequest:JdCloudRequest
{
    /// 推流域名
      /// 
    var publishDomain:String


    public init(regionId: String,publishDomain:String){
        self.publishDomain = publishDomain
        super.init(regionId: regionId)
    }


    enum DeleteLiveDomainRequestRequestCodingKeys: String, CodingKey {
        case publishDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLiveDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(publishDomain, forKey: .publishDomain)

    }
}

/// 删除直播域名
      ///       /// - 请慎重操作（建议在进行域名删除前到域名解析服务商处恢复域名A记录），以免导致删除操作后此域名不可访问。
      ///       ///   deleteLiveDomain调用成功后将删除本条直播域名的全部相关记录，对于仅需要暂停使用该直播域名，推荐stopLiveDomain接口
      ///       ///  
public class DeleteLiveDomainResult:NSObject,JdCloudResult
{
}
/// 查询指定域名相关信息 
public class DescribeLiveDomainDetailResult:NSObject,JdCloudResult
{
    /// SourceID
    var sourceId:Int64?

    /// 推流域名集合
    var publishDomains:[PublishDomain?]?

    /// 直播域名集合
    var playDomains:[PlayDomain?]?



    public override init(){
        super.init()
    }

    enum DescribeLiveDomainDetailResultCodingKeys: String, CodingKey {
        case sourceId
        case publishDomains
        case playDomains
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveDomainDetailResultCodingKeys.self)
        if decoderContainer.contains(.sourceId)
        {
            self.sourceId = try decoderContainer.decode(Int64?.self, forKey: .sourceId)
        }
        if decoderContainer.contains(.publishDomains)
        {
            self.publishDomains = try decoderContainer.decode([PublishDomain?]?.self, forKey: .publishDomains)
        }
        if decoderContainer.contains(.playDomains)
        {
            self.playDomains = try decoderContainer.decode([PlayDomain?]?.self, forKey: .playDomains)
        }
    }
}
public extension DescribeLiveDomainDetailResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveDomainDetailResultCodingKeys.self)
        try encoderContainer.encode(sourceId, forKey: .sourceId)
        try encoderContainer.encode(publishDomains, forKey: .publishDomains)
        try encoderContainer.encode(playDomains, forKey: .playDomains)
    }
}
/// 添加直播域名
      ///       /// - 创建直播域名之前,必须先开通直播服务
      ///       /// - 直播域名必须已经备案完成
      ///       ///  
public class AddLiveDomainResult:NSObject,JdCloudResult
{
}
public class DescribeLiveDomainDetailResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveDomainDetailResult?;

    enum DescribeLiveDomainDetailResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveDomainDetailResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveDomainDetailResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveDomainDetailResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveDomainDetailResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加回看域名
      ///       /// 
public class AddLiveRestartDomainRequest:JdCloudRequest
{
    /// 直播的播放域名
      /// - 回看域名所对应的原播放域名,新建的回看域名将绑定到此播放域名下
      /// 
    var playDomain:String

    /// 直播回看域名
      /// - 直播域名必须已经备案完成
      /// 
    var restartDomain:String


    public init(regionId: String,playDomain:String,restartDomain:String){
        self.playDomain = playDomain
        self.restartDomain = restartDomain
        super.init(regionId: regionId)
    }


    enum AddLiveRestartDomainRequestRequestCodingKeys: String, CodingKey {
        case playDomain
        case restartDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveRestartDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(playDomain, forKey: .playDomain)
        try encoderContainer.encode(restartDomain, forKey: .restartDomain)

    }
}

/// 启动域名
      ///       /// - 启用状态为 停用 的直播域名对(推流域名,播放域名)将DomainStatus变更为online
      ///       ///  
public class StartLiveDomainResult:NSObject,JdCloudResult
{
}
public class DescribeLiveDomainsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLiveDomainsResult?;

    enum DescribeLiveDomainsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLiveDomainsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLiveDomainsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLiveDomainsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLiveDomainsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AddLiveDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddLiveDomainResult?;

    enum AddLiveDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddLiveDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddLiveDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension AddLiveDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddLiveDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加回看域名
      ///       ///  
public class AddLiveRestartDomainResult:NSObject,JdCloudResult
{
}
