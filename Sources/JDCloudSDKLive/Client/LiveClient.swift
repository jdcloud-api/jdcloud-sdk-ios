/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Live-Video
   视频直播相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore
@objc(LiveJDCloudClient)
public class LiveJDCloudClient:NSObject,JDCloudClient{
    
    private final var liveJDCloudClient:LiveJDCloudClient!


    @objc public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        liveJDCloudClient = self
    }


    @objc public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "live.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        liveJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "live" + "v1"
    
    public let serviceName: String = "live"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    @objc public var httpRequestProtocol: String = "https"

    @objc public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    @objc
    public func describeCustomLiveStreamSnapshotConfigAsync(request:DescribeCustomLiveStreamSnapshotConfigRequest,requestComplation:@escaping (NSNumber?,DescribeCustomLiveStreamSnapshotConfigResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamSnapshotConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCustomLiveStreamSnapshotConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveRecordFileUrlAsync(request:DescribeLiveRecordFileUrlRequest,requestComplation:@escaping (NSNumber?,DescribeLiveRecordFileUrlResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveRecordFileUrlExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveRecordFileUrlResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveRecordFilesAsync(request:DescribeLiveRecordFilesRequest,requestComplation:@escaping (NSNumber?,DescribeLiveRecordFilesResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveRecordFilesExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveRecordFilesResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCustomLiveStreamTranscodeTemplateAsync(request:DescribeCustomLiveStreamTranscodeTemplateRequest,requestComplation:@escaping (NSNumber?,DescribeCustomLiveStreamTranscodeTemplateResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamTranscodeTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCustomLiveStreamTranscodeTemplateResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addLiveStreamAppSnapshotAsync(request:AddLiveStreamAppSnapshotRequest,requestComplation:@escaping (NSNumber?,AddLiveStreamAppSnapshotResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddLiveStreamAppSnapshotExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddLiveStreamAppSnapshotResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveTranscodeStreamListAsync(request:DescribeLiveTranscodeStreamListRequest,requestComplation:@escaping (NSNumber?,DescribeLiveTranscodeStreamListResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveTranscodeStreamListExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveTranscodeStreamListResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func closeLiveTimeshiftAsync(request:CloseLiveTimeshiftRequest,requestComplation:@escaping (NSNumber?,CloseLiveTimeshiftResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try CloseLiveTimeshiftExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CloseLiveTimeshiftResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveTranscodeStreamPlayerUserNumAsync(request:DescribeLiveTranscodeStreamPlayerUserNumRequest,requestComplation:@escaping (NSNumber?,DescribeLiveTranscodeStreamPlayerUserNumResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveTranscodeStreamPlayerUserNumExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveTranscodeStreamPlayerUserNumResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveStreamNotifyConfigAsync(request:DeleteLiveStreamNotifyConfigRequest,requestComplation:@escaping (NSNumber?,DeleteLiveStreamNotifyConfigResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveStreamNotifyConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addLiveRecordTaskAsync(request:AddLiveRecordTaskRequest,requestComplation:@escaping (NSNumber?,AddLiveRecordTaskResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddLiveRecordTaskExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddLiveRecordTaskResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addLiveStreamDomainWatermarkAsync(request:AddLiveStreamDomainWatermarkRequest,requestComplation:@escaping (NSNumber?,AddLiveStreamDomainWatermarkResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddLiveStreamDomainWatermarkExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddLiveStreamDomainWatermarkResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveRecordFilesAsync(request:DeleteLiveRecordFilesRequest,requestComplation:@escaping (NSNumber?,DeleteLiveRecordFilesResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveRecordFilesExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveRecordFilesResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveStreamDomainSnapshotAsync(request:DeleteLiveStreamDomainSnapshotRequest,requestComplation:@escaping (NSNumber?,DeleteLiveStreamDomainSnapshotResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamDomainSnapshotExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveStreamDomainSnapshotResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveStreamBandwidthDataAsync(request:DescribeLiveStreamBandwidthDataRequest,requestComplation:@escaping (NSNumber?,DescribeLiveStreamBandwidthDataResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamBandwidthDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveStreamBandwidthDataResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCustomLiveStreamRecordTemplatesAsync(request:DescribeCustomLiveStreamRecordTemplatesRequest,requestComplation:@escaping (NSNumber?,DescribeCustomLiveStreamRecordTemplatesResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamRecordTemplatesExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCustomLiveStreamRecordTemplatesResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCustomLiveStreamRecordConfigAsync(request:DescribeCustomLiveStreamRecordConfigRequest,requestComplation:@escaping (NSNumber?,DescribeCustomLiveStreamRecordConfigResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamRecordConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCustomLiveStreamRecordConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func forbidLiveStreamAsync(request:ForbidLiveStreamRequest,requestComplation:@escaping (NSNumber?,ForbidLiveStreamResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try ForbidLiveStreamExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ForbidLiveStreamResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describePublishStreamInfoDataAsync(request:DescribePublishStreamInfoDataRequest,requestComplation:@escaping (NSNumber?,DescribePublishStreamInfoDataResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribePublishStreamInfoDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribePublishStreamInfoDataResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveTranscodeStreamNumAsync(request:DescribeLiveTranscodeStreamNumRequest,requestComplation:@escaping (NSNumber?,DescribeLiveTranscodeStreamNumResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveTranscodeStreamNumExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveTranscodeStreamNumResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveDomainsAsync(request:DescribeLiveDomainsRequest,requestComplation:@escaping (NSNumber?,DescribeLiveDomainsResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveDomainsExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveDomainsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveDomainDetailAsync(request:DescribeLiveDomainDetailRequest,requestComplation:@escaping (NSNumber?,DescribeLiveDomainDetailResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveDomainDetailExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveDomainDetailResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteCustomLiveStreamSnapshotTemplateAsync(request:DeleteCustomLiveStreamSnapshotTemplateRequest,requestComplation:@escaping (NSNumber?,DeleteCustomLiveStreamSnapshotTemplateResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteCustomLiveStreamSnapshotTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteCustomLiveStreamSnapshotTemplateResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addLiveAppAsync(request:AddLiveAppRequest,requestComplation:@escaping (NSNumber?,AddLiveAppResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddLiveAppExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddLiveAppResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func updateCustomLiveStreamWatermarkTemplateAsync(request:UpdateCustomLiveStreamWatermarkTemplateRequest,requestComplation:@escaping (NSNumber?,UpdateCustomLiveStreamWatermarkTemplateResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try UpdateCustomLiveStreamWatermarkTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(UpdateCustomLiveStreamWatermarkTemplateResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveStreamAppWatermarkAsync(request:DeleteLiveStreamAppWatermarkRequest,requestComplation:@escaping (NSNumber?,DeleteLiveStreamAppWatermarkResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamAppWatermarkExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveStreamAppWatermarkResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addCustomLiveStreamWatermarkTemplateAsync(request:AddCustomLiveStreamWatermarkTemplateRequest,requestComplation:@escaping (NSNumber?,AddCustomLiveStreamWatermarkTemplateResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddCustomLiveStreamWatermarkTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddCustomLiveStreamWatermarkTemplateResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteCustomLiveStreamWatermarkTemplateAsync(request:DeleteCustomLiveStreamWatermarkTemplateRequest,requestComplation:@escaping (NSNumber?,DeleteCustomLiveStreamWatermarkTemplateResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteCustomLiveStreamWatermarkTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteCustomLiveStreamWatermarkTemplateResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveStreamDomainWatermarkAsync(request:DeleteLiveStreamDomainWatermarkRequest,requestComplation:@escaping (NSNumber?,DeleteLiveStreamDomainWatermarkResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamDomainWatermarkExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveStreamDomainWatermarkResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveStreamAppRecordAsync(request:DeleteLiveStreamAppRecordRequest,requestComplation:@escaping (NSNumber?,DeleteLiveStreamAppRecordResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamAppRecordExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveStreamAppRecordResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteCustomLiveStreamRecordTemplateAsync(request:DeleteCustomLiveStreamRecordTemplateRequest,requestComplation:@escaping (NSNumber?,DeleteCustomLiveStreamRecordTemplateResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteCustomLiveStreamRecordTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteCustomLiveStreamRecordTemplateResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveStreamPlayerRankingDataAsync(request:DescribeLiveStreamPlayerRankingDataRequest,requestComplation:@escaping (NSNumber?,DescribeLiveStreamPlayerRankingDataResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamPlayerRankingDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveStreamPlayerRankingDataResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveSnapshotUrlAsync(request:DescribeLiveSnapshotUrlRequest,requestComplation:@escaping (NSNumber?,DescribeLiveSnapshotUrlResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveSnapshotUrlExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveSnapshotUrlResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveSnapshotDataAsync(request:DescribeLiveSnapshotDataRequest,requestComplation:@escaping (NSNumber?,DescribeLiveSnapshotDataResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveSnapshotDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveSnapshotDataResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveStreamDomainTranscodeAsync(request:DeleteLiveStreamDomainTranscodeRequest,requestComplation:@escaping (NSNumber?,DeleteLiveStreamDomainTranscodeResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamDomainTranscodeExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveStreamDomainTranscodeResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func setLiveStreamRecordNotifyConfigAsync(request:SetLiveStreamRecordNotifyConfigRequest,requestComplation:@escaping (NSNumber?,SetLiveStreamRecordNotifyConfigResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try SetLiveStreamRecordNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(SetLiveStreamRecordNotifyConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveStreamDomainRecordAsync(request:DeleteLiveStreamDomainRecordRequest,requestComplation:@escaping (NSNumber?,DeleteLiveStreamDomainRecordResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamDomainRecordExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveStreamDomainRecordResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLivePublishStreamNumAsync(request:DescribeLivePublishStreamNumRequest,requestComplation:@escaping (NSNumber?,DescribeLivePublishStreamNumResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLivePublishStreamNumExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLivePublishStreamNumResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addCustomLiveStreamSnapshotTemplateAsync(request:AddCustomLiveStreamSnapshotTemplateRequest,requestComplation:@escaping (NSNumber?,AddCustomLiveStreamSnapshotTemplateResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddCustomLiveStreamSnapshotTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddCustomLiveStreamSnapshotTemplateResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func startLiveDomainAsync(request:StartLiveDomainRequest,requestComplation:@escaping (NSNumber?,StartLiveDomainResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try StartLiveDomainExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(StartLiveDomainResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCustomLiveStreamWatermarkTemplatesAsync(request:DescribeCustomLiveStreamWatermarkTemplatesRequest,requestComplation:@escaping (NSNumber?,DescribeCustomLiveStreamWatermarkTemplatesResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamWatermarkTemplatesExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCustomLiveStreamWatermarkTemplatesResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addLiveStreamAppTranscodeAsync(request:AddLiveStreamAppTranscodeRequest,requestComplation:@escaping (NSNumber?,AddLiveStreamAppTranscodeResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddLiveStreamAppTranscodeExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddLiveStreamAppTranscodeResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveStreamPublishListAsync(request:DescribeLiveStreamPublishListRequest,requestComplation:@escaping (NSNumber?,DescribeLiveStreamPublishListResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamPublishListExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveStreamPublishListResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveStreamPublishTrafficDataAsync(request:DescribeLiveStreamPublishTrafficDataRequest,requestComplation:@escaping (NSNumber?,DescribeLiveStreamPublishTrafficDataResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamPublishTrafficDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveStreamPublishTrafficDataResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveStreamSnapshotNotifyConfigAsync(request:DeleteLiveStreamSnapshotNotifyConfigRequest,requestComplation:@escaping (NSNumber?,DeleteLiveStreamSnapshotNotifyConfigResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamSnapshotNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveStreamSnapshotNotifyConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveTimeshiftConfigsAsync(request:DescribeLiveTimeshiftConfigsRequest,requestComplation:@escaping (NSNumber?,DescribeLiveTimeshiftConfigsResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveTimeshiftConfigsExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveTimeshiftConfigsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addLiveStreamAppWatermarkAsync(request:AddLiveStreamAppWatermarkRequest,requestComplation:@escaping (NSNumber?,AddLiveStreamAppWatermarkResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddLiveStreamAppWatermarkExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddLiveStreamAppWatermarkResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addLiveStreamAppRecordAsync(request:AddLiveStreamAppRecordRequest,requestComplation:@escaping (NSNumber?,AddLiveStreamAppRecordResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddLiveStreamAppRecordExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddLiveStreamAppRecordResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addLiveStreamDomainRecordAsync(request:AddLiveStreamDomainRecordRequest,requestComplation:@escaping (NSNumber?,AddLiveStreamDomainRecordResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddLiveStreamDomainRecordExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddLiveStreamDomainRecordResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveStreamAppSnapshotAsync(request:DeleteLiveStreamAppSnapshotRequest,requestComplation:@escaping (NSNumber?,DeleteLiveStreamAppSnapshotResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamAppSnapshotExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveStreamAppSnapshotResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveStreamSnapshotNotifyConfigAsync(request:DescribeLiveStreamSnapshotNotifyConfigRequest,requestComplation:@escaping (NSNumber?,DescribeLiveStreamSnapshotNotifyConfigResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamSnapshotNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveStreamSnapshotNotifyConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveStreamRecordNotifyConfigAsync(request:DeleteLiveStreamRecordNotifyConfigRequest,requestComplation:@escaping (NSNumber?,DeleteLiveStreamRecordNotifyConfigResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamRecordNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveStreamRecordNotifyConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveStreamTranscodeConfigAsync(request:DescribeLiveStreamTranscodeConfigRequest,requestComplation:@escaping (NSNumber?,DescribeLiveStreamTranscodeConfigResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamTranscodeConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveStreamTranscodeConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func setLivePlayAuthKeyAsync(request:SetLivePlayAuthKeyRequest,requestComplation:@escaping (NSNumber?,SetLivePlayAuthKeyResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try SetLivePlayAuthKeyExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(SetLivePlayAuthKeyResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCustomLiveStreamWatermarkConfigAsync(request:DescribeCustomLiveStreamWatermarkConfigRequest,requestComplation:@escaping (NSNumber?,DescribeCustomLiveStreamWatermarkConfigResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamWatermarkConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCustomLiveStreamWatermarkConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addCustomLiveStreamRecordTemplateAsync(request:AddCustomLiveStreamRecordTemplateRequest,requestComplation:@escaping (NSNumber?,AddCustomLiveStreamRecordTemplateResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddCustomLiveStreamRecordTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddCustomLiveStreamRecordTemplateResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveAppAsync(request:DescribeLiveAppRequest,requestComplation:@escaping (NSNumber?,DescribeLiveAppResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveAppExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveAppResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveTranscodingDurationDataAsync(request:DescribeLiveTranscodingDurationDataRequest,requestComplation:@escaping (NSNumber?,DescribeLiveTranscodingDurationDataResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveTranscodingDurationDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveTranscodingDurationDataResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLivePlayAuthKeyAsync(request:DescribeLivePlayAuthKeyRequest,requestComplation:@escaping (NSNumber?,DescribeLivePlayAuthKeyResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLivePlayAuthKeyExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLivePlayAuthKeyResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveSnapshotsAsync(request:DescribeLiveSnapshotsRequest,requestComplation:@escaping (NSNumber?,DescribeLiveSnapshotsResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveSnapshotsExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveSnapshotsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteCustomLiveStreamTranscodeTemplateAsync(request:DeleteCustomLiveStreamTranscodeTemplateRequest,requestComplation:@escaping (NSNumber?,DeleteCustomLiveStreamTranscodeTemplateResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteCustomLiveStreamTranscodeTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteCustomLiveStreamTranscodeTemplateResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addLiveDomainAsync(request:AddLiveDomainRequest,requestComplation:@escaping (NSNumber?,AddLiveDomainResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddLiveDomainExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddLiveDomainResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCustomLiveStreamTranscodeTemplatesAsync(request:DescribeCustomLiveStreamTranscodeTemplatesRequest,requestComplation:@escaping (NSNumber?,DescribeCustomLiveStreamTranscodeTemplatesResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamTranscodeTemplatesExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCustomLiveStreamTranscodeTemplatesResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLivePornDataAsync(request:DescribeLivePornDataRequest,requestComplation:@escaping (NSNumber?,DescribeLivePornDataResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLivePornDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLivePornDataResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func stopLiveDomainAsync(request:StopLiveDomainRequest,requestComplation:@escaping (NSNumber?,StopLiveDomainResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try StopLiveDomainExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(StopLiveDomainResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveTranscodeStreamBandwidthAsync(request:DescribeLiveTranscodeStreamBandwidthRequest,requestComplation:@escaping (NSNumber?,DescribeLiveTranscodeStreamBandwidthResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveTranscodeStreamBandwidthExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveTranscodeStreamBandwidthResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveFileStorageDataAsync(request:DescribeLiveFileStorageDataRequest,requestComplation:@escaping (NSNumber?,DescribeLiveFileStorageDataResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveFileStorageDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveFileStorageDataResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveStreamInfoAsync(request:DescribeLiveStreamInfoRequest,requestComplation:@escaping (NSNumber?,DescribeLiveStreamInfoResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamInfoExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveStreamInfoResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveStreamOnlineListAsync(request:DescribeLiveStreamOnlineListRequest,requestComplation:@escaping (NSNumber?,DescribeLiveStreamOnlineListResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamOnlineListExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveStreamOnlineListResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveStreamRecordNotifyConfigAsync(request:DescribeLiveStreamRecordNotifyConfigRequest,requestComplation:@escaping (NSNumber?,DescribeLiveStreamRecordNotifyConfigResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamRecordNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveStreamRecordNotifyConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveStreamNotifyConfigAsync(request:DescribeLiveStreamNotifyConfigRequest,requestComplation:@escaping (NSNumber?,DescribeLiveStreamNotifyConfigResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveStreamNotifyConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addLiveStreamDomainSnapshotAsync(request:AddLiveStreamDomainSnapshotRequest,requestComplation:@escaping (NSNumber?,AddLiveStreamDomainSnapshotResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddLiveStreamDomainSnapshotExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddLiveStreamDomainSnapshotResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func setLiveStreamNotifyConfigAsync(request:SetLiveStreamNotifyConfigRequest,requestComplation:@escaping (NSNumber?,SetLiveStreamNotifyConfigResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try SetLiveStreamNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(SetLiveStreamNotifyConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveStreamHistoryUserNumAsync(request:DescribeLiveStreamHistoryUserNumRequest,requestComplation:@escaping (NSNumber?,DescribeLiveStreamHistoryUserNumResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamHistoryUserNumExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveStreamHistoryUserNumResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func setLiveStreamSnapshotNotifyConfigAsync(request:SetLiveStreamSnapshotNotifyConfigRequest,requestComplation:@escaping (NSNumber?,SetLiveStreamSnapshotNotifyConfigResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try SetLiveStreamSnapshotNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(SetLiveStreamSnapshotNotifyConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCustomLiveStreamSnapshotTemplatesAsync(request:DescribeCustomLiveStreamSnapshotTemplatesRequest,requestComplation:@escaping (NSNumber?,DescribeCustomLiveStreamSnapshotTemplatesResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamSnapshotTemplatesExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCustomLiveStreamSnapshotTemplatesResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func stopLiveAppAsync(request:StopLiveAppRequest,requestComplation:@escaping (NSNumber?,StopLiveAppResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try StopLiveAppExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(StopLiveAppResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveDomainAsync(request:DeleteLiveDomainRequest,requestComplation:@escaping (NSNumber?,DeleteLiveDomainResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveDomainExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveDomainResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveStreamPublishBandwidthDataAsync(request:DescribeLiveStreamPublishBandwidthDataRequest,requestComplation:@escaping (NSNumber?,DescribeLiveStreamPublishBandwidthDataResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamPublishBandwidthDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveStreamPublishBandwidthDataResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeLiveStreamTrafficDataAsync(request:DescribeLiveStreamTrafficDataRequest,requestComplation:@escaping (NSNumber?,DescribeLiveStreamTrafficDataResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamTrafficDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeLiveStreamTrafficDataResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addCustomLiveStreamTranscodeTemplateAsync(request:AddCustomLiveStreamTranscodeTemplateRequest,requestComplation:@escaping (NSNumber?,AddCustomLiveStreamTranscodeTemplateResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddCustomLiveStreamTranscodeTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddCustomLiveStreamTranscodeTemplateResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func resumeLiveStreamAsync(request:ResumeLiveStreamRequest,requestComplation:@escaping (NSNumber?,ResumeLiveStreamResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try ResumeLiveStreamExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ResumeLiveStreamResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func addLiveStreamDomainTranscodeAsync(request:AddLiveStreamDomainTranscodeRequest,requestComplation:@escaping (NSNumber?,AddLiveStreamDomainTranscodeResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try AddLiveStreamDomainTranscodeExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AddLiveStreamDomainTranscodeResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveStreamAppTranscodeAsync(request:DeleteLiveStreamAppTranscodeRequest,requestComplation:@escaping (NSNumber?,DeleteLiveStreamAppTranscodeResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamAppTranscodeExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveStreamAppTranscodeResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func openLiveTimeshiftAsync(request:OpenLiveTimeshiftRequest,requestComplation:@escaping (NSNumber?,OpenLiveTimeshiftResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try OpenLiveTimeshiftExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(OpenLiveTimeshiftResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteLiveSnapshotsAsync(request:DeleteLiveSnapshotsRequest,requestComplation:@escaping (NSNumber?,DeleteLiveSnapshotsResponse?,NSError?,NSString?)->()) throws {
        liveJDCloudClient = self
        try DeleteLiveSnapshotsExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteLiveSnapshotsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }

    
}


public extension LiveJDCloudClient{

    @objc convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "live.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
