/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Live-Video
   视频直播相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class LiveJDCloudClient:NSObject,JDCloudClient{
    
    private final var liveJDCloudClient:LiveJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        liveJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "live.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        liveJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "live/" + "v1"
    
    public let serviceName: String = "live"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func describeDomainOnlineStreamAsync(request:DescribeDomainOnlineStreamRequest,requestComplation:@escaping ExecuteResult<DescribeDomainOnlineStreamResult>) throws {
        liveJDCloudClient = self
        try DescribeDomainOnlineStreamExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeUrlRankingAsync(request:DescribeUrlRankingRequest,requestComplation:@escaping ExecuteResult<DescribeUrlRankingResult>) throws {
        liveJDCloudClient = self
        try DescribeUrlRankingExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func openLiveRestartAsync(request:OpenLiveRestartRequest,requestComplation:@escaping ExecuteResult<OpenLiveRestartResult>) throws {
        liveJDCloudClient = self
        try OpenLiveRestartExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveStreamAppQualityDetectionAsync(request:AddLiveStreamAppQualityDetectionRequest,requestComplation:@escaping ExecuteResult<AddLiveStreamAppQualityDetectionResult>) throws {
        liveJDCloudClient = self
        try AddLiveStreamAppQualityDetectionExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamNotifyConfigAsync(request:DeleteLiveStreamNotifyConfigRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamNotifyConfigResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addCustomLiveStreamQualityDetectionTemplateAsync(request:AddCustomLiveStreamQualityDetectionTemplateRequest,requestComplation:@escaping ExecuteResult<AddCustomLiveStreamQualityDetectionTemplateResult>) throws {
        liveJDCloudClient = self
        try AddCustomLiveStreamQualityDetectionTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func openLiveP2pAsync(request:OpenLiveP2pRequest,requestComplation:@escaping ExecuteResult<OpenLiveP2pResult>) throws {
        liveJDCloudClient = self
        try OpenLiveP2pExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCustomLiveStreamRecordTemplatesAsync(request:DescribeCustomLiveStreamRecordTemplatesRequest,requestComplation:@escaping ExecuteResult<DescribeCustomLiveStreamRecordTemplatesResult>) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamRecordTemplatesExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeTranscodeBindingAsync(request:DescribeTranscodeBindingRequest,requestComplation:@escaping ExecuteResult<DescribeTranscodeBindingResult>) throws {
        liveJDCloudClient = self
        try DescribeTranscodeBindingExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCustomLiveStreamRecordConfigAsync(request:DescribeCustomLiveStreamRecordConfigRequest,requestComplation:@escaping ExecuteResult<DescribeCustomLiveStreamRecordConfigResult>) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamRecordConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveDomainsAsync(request:DescribeLiveDomainsRequest,requestComplation:@escaping ExecuteResult<DescribeLiveDomainsResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveDomainsExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveAppAsync(request:AddLiveAppRequest,requestComplation:@escaping ExecuteResult<AddLiveAppResult>) throws {
        liveJDCloudClient = self
        try AddLiveAppExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamAppWatermarkAsync(request:DeleteLiveStreamAppWatermarkRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamAppWatermarkResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamAppWatermarkExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveRestartAuthKeyAsync(request:DescribeLiveRestartAuthKeyRequest,requestComplation:@escaping ExecuteResult<DescribeLiveRestartAuthKeyResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveRestartAuthKeyExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamPlayerRankingDataAsync(request:DescribeLiveStreamPlayerRankingDataRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamPlayerRankingDataResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamPlayerRankingDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeWatermarkBindingAsync(request:DescribeWatermarkBindingRequest,requestComplation:@escaping ExecuteResult<DescribeWatermarkBindingResult>) throws {
        liveJDCloudClient = self
        try DescribeWatermarkBindingExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStatisticGroupByStreamAsync(request:DescribeLiveStatisticGroupByStreamRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStatisticGroupByStreamResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStatisticGroupByStreamExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setLiveStreamRecordNotifyConfigAsync(request:SetLiveStreamRecordNotifyConfigRequest,requestComplation:@escaping ExecuteResult<SetLiveStreamRecordNotifyConfigResult>) throws {
        liveJDCloudClient = self
        try SetLiveStreamRecordNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addCustomLiveStreamSnapshotTemplateAsync(request:AddCustomLiveStreamSnapshotTemplateRequest,requestComplation:@escaping ExecuteResult<AddCustomLiveStreamSnapshotTemplateResult>) throws {
        liveJDCloudClient = self
        try AddCustomLiveStreamSnapshotTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startLiveDomainAsync(request:StartLiveDomainRequest,requestComplation:@escaping ExecuteResult<StartLiveDomainResult>) throws {
        liveJDCloudClient = self
        try StartLiveDomainExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCustomLiveStreamWatermarkTemplatesAsync(request:DescribeCustomLiveStreamWatermarkTemplatesRequest,requestComplation:@escaping ExecuteResult<DescribeCustomLiveStreamWatermarkTemplatesResult>) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamWatermarkTemplatesExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveStreamAppTranscodeAsync(request:AddLiveStreamAppTranscodeRequest,requestComplation:@escaping ExecuteResult<AddLiveStreamAppTranscodeResult>) throws {
        liveJDCloudClient = self
        try AddLiveStreamAppTranscodeExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamSnapshotNotifyConfigAsync(request:DeleteLiveStreamSnapshotNotifyConfigRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamSnapshotNotifyConfigResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamSnapshotNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveTimeshiftConfigsAsync(request:DescribeLiveTimeshiftConfigsRequest,requestComplation:@escaping ExecuteResult<DescribeLiveTimeshiftConfigsResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveTimeshiftConfigsExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveStreamAppWatermarkAsync(request:AddLiveStreamAppWatermarkRequest,requestComplation:@escaping ExecuteResult<AddLiveStreamAppWatermarkResult>) throws {
        liveJDCloudClient = self
        try AddLiveStreamAppWatermarkExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamAppSnapshotAsync(request:DeleteLiveStreamAppSnapshotRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamAppSnapshotResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamAppSnapshotExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamRecordNotifyConfigAsync(request:DeleteLiveStreamRecordNotifyConfigRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamRecordNotifyConfigResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamRecordNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCustomLiveStreamWatermarkConfigAsync(request:DescribeCustomLiveStreamWatermarkConfigRequest,requestComplation:@escaping ExecuteResult<DescribeCustomLiveStreamWatermarkConfigResult>) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamWatermarkConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addCustomLiveStreamRecordTemplateAsync(request:AddCustomLiveStreamRecordTemplateRequest,requestComplation:@escaping ExecuteResult<AddCustomLiveStreamRecordTemplateResult>) throws {
        liveJDCloudClient = self
        try AddCustomLiveStreamRecordTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveTranscodingDurationDataAsync(request:DescribeLiveTranscodingDurationDataRequest,requestComplation:@escaping ExecuteResult<DescribeLiveTranscodingDurationDataResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveTranscodingDurationDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveP2pConfigsAsync(request:DescribeLiveP2pConfigsRequest,requestComplation:@escaping ExecuteResult<DescribeLiveP2pConfigsResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveP2pConfigsExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLivePlayAuthKeyAsync(request:DescribeLivePlayAuthKeyRequest,requestComplation:@escaping ExecuteResult<DescribeLivePlayAuthKeyResult>) throws {
        liveJDCloudClient = self
        try DescribeLivePlayAuthKeyExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSnapshotBindingAsync(request:DescribeSnapshotBindingRequest,requestComplation:@escaping ExecuteResult<DescribeSnapshotBindingResult>) throws {
        liveJDCloudClient = self
        try DescribeSnapshotBindingExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteCustomLiveStreamTranscodeTemplateAsync(request:DeleteCustomLiveStreamTranscodeTemplateRequest,requestComplation:@escaping ExecuteResult<DeleteCustomLiveStreamTranscodeTemplateResult>) throws {
        liveJDCloudClient = self
        try DeleteCustomLiveStreamTranscodeTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCustomLiveStreamTranscodeTemplatesAsync(request:DescribeCustomLiveStreamTranscodeTemplatesRequest,requestComplation:@escaping ExecuteResult<DescribeCustomLiveStreamTranscodeTemplatesResult>) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamTranscodeTemplatesExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLivePornDataAsync(request:DescribeLivePornDataRequest,requestComplation:@escaping ExecuteResult<DescribeLivePornDataResult>) throws {
        liveJDCloudClient = self
        try DescribeLivePornDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopLiveDomainAsync(request:StopLiveDomainRequest,requestComplation:@escaping ExecuteResult<StopLiveDomainResult>) throws {
        liveJDCloudClient = self
        try StopLiveDomainExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveFileStorageDataAsync(request:DescribeLiveFileStorageDataRequest,requestComplation:@escaping ExecuteResult<DescribeLiveFileStorageDataResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveFileStorageDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamOnlineListAsync(request:DescribeLiveStreamOnlineListRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamOnlineListResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamOnlineListExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamRecordNotifyConfigAsync(request:DescribeLiveStreamRecordNotifyConfigRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamRecordNotifyConfigResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamRecordNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveStreamDomainSnapshotAsync(request:AddLiveStreamDomainSnapshotRequest,requestComplation:@escaping ExecuteResult<AddLiveStreamDomainSnapshotResult>) throws {
        liveJDCloudClient = self
        try AddLiveStreamDomainSnapshotExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setLiveStreamNotifyConfigAsync(request:SetLiveStreamNotifyConfigRequest,requestComplation:@escaping ExecuteResult<SetLiveStreamNotifyConfigResult>) throws {
        liveJDCloudClient = self
        try SetLiveStreamNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamHistoryUserNumAsync(request:DescribeLiveStreamHistoryUserNumRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamHistoryUserNumResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamHistoryUserNumExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setLiveStreamSnapshotNotifyConfigAsync(request:SetLiveStreamSnapshotNotifyConfigRequest,requestComplation:@escaping ExecuteResult<SetLiveStreamSnapshotNotifyConfigResult>) throws {
        liveJDCloudClient = self
        try SetLiveStreamSnapshotNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveStreamDomainQualityDetectionAsync(request:AddLiveStreamDomainQualityDetectionRequest,requestComplation:@escaping ExecuteResult<AddLiveStreamDomainQualityDetectionResult>) throws {
        liveJDCloudClient = self
        try AddLiveStreamDomainQualityDetectionExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func closeLiveP2pAsync(request:CloseLiveP2pRequest,requestComplation:@escaping ExecuteResult<CloseLiveP2pResult>) throws {
        liveJDCloudClient = self
        try CloseLiveP2pExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveDomainAsync(request:DeleteLiveDomainRequest,requestComplation:@escaping ExecuteResult<DeleteLiveDomainResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveDomainExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamPublishBandwidthDataAsync(request:DescribeLiveStreamPublishBandwidthDataRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamPublishBandwidthDataResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamPublishBandwidthDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func resumeLiveStreamAsync(request:ResumeLiveStreamRequest,requestComplation:@escaping ExecuteResult<ResumeLiveStreamResult>) throws {
        liveJDCloudClient = self
        try ResumeLiveStreamExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setLiveDomainCertificateAsync(request:SetLiveDomainCertificateRequest,requestComplation:@escaping ExecuteResult<SetLiveDomainCertificateResult>) throws {
        liveJDCloudClient = self
        try SetLiveDomainCertificateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCustomLiveStreamSnapshotConfigAsync(request:DescribeCustomLiveStreamSnapshotConfigRequest,requestComplation:@escaping ExecuteResult<DescribeCustomLiveStreamSnapshotConfigResult>) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamSnapshotConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeQualityDetectionBindingAsync(request:DescribeQualityDetectionBindingRequest,requestComplation:@escaping ExecuteResult<DescribeQualityDetectionBindingResult>) throws {
        liveJDCloudClient = self
        try DescribeQualityDetectionBindingExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveRestartConfigsAsync(request:DescribeLiveRestartConfigsRequest,requestComplation:@escaping ExecuteResult<DescribeLiveRestartConfigsResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveRestartConfigsExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeRecordBindingAsync(request:DescribeRecordBindingRequest,requestComplation:@escaping ExecuteResult<DescribeRecordBindingResult>) throws {
        liveJDCloudClient = self
        try DescribeRecordBindingExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCustomLiveStreamTranscodeTemplateAsync(request:DescribeCustomLiveStreamTranscodeTemplateRequest,requestComplation:@escaping ExecuteResult<DescribeCustomLiveStreamTranscodeTemplateResult>) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamTranscodeTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func closeLiveRestartAsync(request:CloseLiveRestartRequest,requestComplation:@escaping ExecuteResult<CloseLiveRestartResult>) throws {
        liveJDCloudClient = self
        try CloseLiveRestartExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveStreamAppSnapshotAsync(request:AddLiveStreamAppSnapshotRequest,requestComplation:@escaping ExecuteResult<AddLiveStreamAppSnapshotResult>) throws {
        liveJDCloudClient = self
        try AddLiveStreamAppSnapshotExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveTranscodeStreamListAsync(request:DescribeLiveTranscodeStreamListRequest,requestComplation:@escaping ExecuteResult<DescribeLiveTranscodeStreamListResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveTranscodeStreamListExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func closeLiveTimeshiftAsync(request:CloseLiveTimeshiftRequest,requestComplation:@escaping ExecuteResult<CloseLiveTimeshiftResult>) throws {
        liveJDCloudClient = self
        try CloseLiveTimeshiftExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteCustomLiveStreamQualityDetectionTemplateAsync(request:DeleteCustomLiveStreamQualityDetectionTemplateRequest,requestComplation:@escaping ExecuteResult<DeleteCustomLiveStreamQualityDetectionTemplateResult>) throws {
        liveJDCloudClient = self
        try DeleteCustomLiveStreamQualityDetectionTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveDomainCertificateAsync(request:DescribeLiveDomainCertificateRequest,requestComplation:@escaping ExecuteResult<DescribeLiveDomainCertificateResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveDomainCertificateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveTranscodeStreamPlayerUserNumAsync(request:DescribeLiveTranscodeStreamPlayerUserNumRequest,requestComplation:@escaping ExecuteResult<DescribeLiveTranscodeStreamPlayerUserNumResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveTranscodeStreamPlayerUserNumExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveRecordTaskAsync(request:AddLiveRecordTaskRequest,requestComplation:@escaping ExecuteResult<AddLiveRecordTaskResult>) throws {
        liveJDCloudClient = self
        try AddLiveRecordTaskExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveStreamDomainWatermarkAsync(request:AddLiveStreamDomainWatermarkRequest,requestComplation:@escaping ExecuteResult<AddLiveStreamDomainWatermarkResult>) throws {
        liveJDCloudClient = self
        try AddLiveStreamDomainWatermarkExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamDomainSnapshotAsync(request:DeleteLiveStreamDomainSnapshotRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamDomainSnapshotResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamDomainSnapshotExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setLiveStreamQualityDetectionNotifyConfigAsync(request:SetLiveStreamQualityDetectionNotifyConfigRequest,requestComplation:@escaping ExecuteResult<SetLiveStreamQualityDetectionNotifyConfigResult>) throws {
        liveJDCloudClient = self
        try SetLiveStreamQualityDetectionNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamBandwidthDataAsync(request:DescribeLiveStreamBandwidthDataRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamBandwidthDataResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamBandwidthDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeDomainsLogAsync(request:DescribeDomainsLogRequest,requestComplation:@escaping ExecuteResult<DescribeDomainsLogResult>) throws {
        liveJDCloudClient = self
        try DescribeDomainsLogExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveRestartDomainAsync(request:AddLiveRestartDomainRequest,requestComplation:@escaping ExecuteResult<AddLiveRestartDomainResult>) throws {
        liveJDCloudClient = self
        try AddLiveRestartDomainExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamDomainQualityDetectionAsync(request:DeleteLiveStreamDomainQualityDetectionRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamDomainQualityDetectionResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamDomainQualityDetectionExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveRestartDomainCertificateAsync(request:DescribeLiveRestartDomainCertificateRequest,requestComplation:@escaping ExecuteResult<DescribeLiveRestartDomainCertificateResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveRestartDomainCertificateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func forbidLiveStreamAsync(request:ForbidLiveStreamRequest,requestComplation:@escaping ExecuteResult<ForbidLiveStreamResult>) throws {
        liveJDCloudClient = self
        try ForbidLiveStreamExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describePublishStreamInfoDataAsync(request:DescribePublishStreamInfoDataRequest,requestComplation:@escaping ExecuteResult<DescribePublishStreamInfoDataResult>) throws {
        liveJDCloudClient = self
        try DescribePublishStreamInfoDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveTranscodeStreamNumAsync(request:DescribeLiveTranscodeStreamNumRequest,requestComplation:@escaping ExecuteResult<DescribeLiveTranscodeStreamNumResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveTranscodeStreamNumExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setLiveRestartAuthKeyAsync(request:SetLiveRestartAuthKeyRequest,requestComplation:@escaping ExecuteResult<SetLiveRestartAuthKeyResult>) throws {
        liveJDCloudClient = self
        try SetLiveRestartAuthKeyExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveDomainDetailAsync(request:DescribeLiveDomainDetailRequest,requestComplation:@escaping ExecuteResult<DescribeLiveDomainDetailResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveDomainDetailExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteCustomLiveStreamSnapshotTemplateAsync(request:DeleteCustomLiveStreamSnapshotTemplateRequest,requestComplation:@escaping ExecuteResult<DeleteCustomLiveStreamSnapshotTemplateResult>) throws {
        liveJDCloudClient = self
        try DeleteCustomLiveStreamSnapshotTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addCustomLiveStreamWatermarkTemplateAsync(request:AddCustomLiveStreamWatermarkTemplateRequest,requestComplation:@escaping ExecuteResult<AddCustomLiveStreamWatermarkTemplateResult>) throws {
        liveJDCloudClient = self
        try AddCustomLiveStreamWatermarkTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteCustomLiveStreamWatermarkTemplateAsync(request:DeleteCustomLiveStreamWatermarkTemplateRequest,requestComplation:@escaping ExecuteResult<DeleteCustomLiveStreamWatermarkTemplateResult>) throws {
        liveJDCloudClient = self
        try DeleteCustomLiveStreamWatermarkTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamDomainWatermarkAsync(request:DeleteLiveStreamDomainWatermarkRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamDomainWatermarkResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamDomainWatermarkExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamAppRecordAsync(request:DeleteLiveStreamAppRecordRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamAppRecordResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamAppRecordExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteCustomLiveStreamRecordTemplateAsync(request:DeleteCustomLiveStreamRecordTemplateRequest,requestComplation:@escaping ExecuteResult<DeleteCustomLiveStreamRecordTemplateResult>) throws {
        liveJDCloudClient = self
        try DeleteCustomLiveStreamRecordTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamQualityDetectionNotifyConfigAsync(request:DeleteLiveStreamQualityDetectionNotifyConfigRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamQualityDetectionNotifyConfigResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamQualityDetectionNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setLiveRestartDomainCertificateAsync(request:SetLiveRestartDomainCertificateRequest,requestComplation:@escaping ExecuteResult<SetLiveRestartDomainCertificateResult>) throws {
        liveJDCloudClient = self
        try SetLiveRestartDomainCertificateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveSnapshotDataAsync(request:DescribeLiveSnapshotDataRequest,requestComplation:@escaping ExecuteResult<DescribeLiveSnapshotDataResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveSnapshotDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamDomainTranscodeAsync(request:DeleteLiveStreamDomainTranscodeRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamDomainTranscodeResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamDomainTranscodeExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamAppQualityDetectionAsync(request:DeleteLiveStreamAppQualityDetectionRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamAppQualityDetectionResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamAppQualityDetectionExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamDomainRecordAsync(request:DeleteLiveStreamDomainRecordRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamDomainRecordResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamDomainRecordExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLivePublishStreamNumAsync(request:DescribeLivePublishStreamNumRequest,requestComplation:@escaping ExecuteResult<DescribeLivePublishStreamNumResult>) throws {
        liveJDCloudClient = self
        try DescribeLivePublishStreamNumExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSystemLiveStreamTranscodeTemplatesAsync(request:DescribeSystemLiveStreamTranscodeTemplatesRequest,requestComplation:@escaping ExecuteResult<DescribeSystemLiveStreamTranscodeTemplatesResult>) throws {
        liveJDCloudClient = self
        try DescribeSystemLiveStreamTranscodeTemplatesExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStatisticGroupByAreaAsync(request:DescribeLiveStatisticGroupByAreaRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStatisticGroupByAreaResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStatisticGroupByAreaExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamPublishListAsync(request:DescribeLiveStreamPublishListRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamPublishListResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamPublishListExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamPublishTrafficDataAsync(request:DescribeLiveStreamPublishTrafficDataRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamPublishTrafficDataResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamPublishTrafficDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveStreamAppRecordAsync(request:AddLiveStreamAppRecordRequest,requestComplation:@escaping ExecuteResult<AddLiveStreamAppRecordResult>) throws {
        liveJDCloudClient = self
        try AddLiveStreamAppRecordExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveStreamDomainRecordAsync(request:AddLiveStreamDomainRecordRequest,requestComplation:@escaping ExecuteResult<AddLiveStreamDomainRecordResult>) throws {
        liveJDCloudClient = self
        try AddLiveStreamDomainRecordExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStatisticGroupByAreaIspAsync(request:DescribeLiveStatisticGroupByAreaIspRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStatisticGroupByAreaIspResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStatisticGroupByAreaIspExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamSnapshotNotifyConfigAsync(request:DescribeLiveStreamSnapshotNotifyConfigRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamSnapshotNotifyConfigResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamSnapshotNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamTranscodeConfigAsync(request:DescribeLiveStreamTranscodeConfigRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamTranscodeConfigResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamTranscodeConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setLivePlayAuthKeyAsync(request:SetLivePlayAuthKeyRequest,requestComplation:@escaping ExecuteResult<SetLivePlayAuthKeyResult>) throws {
        liveJDCloudClient = self
        try SetLivePlayAuthKeyExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveAppAsync(request:DescribeLiveAppRequest,requestComplation:@escaping ExecuteResult<DescribeLiveAppResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveAppExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func interruptLiveStreamAsync(request:InterruptLiveStreamRequest,requestComplation:@escaping ExecuteResult<InterruptLiveStreamResult>) throws {
        liveJDCloudClient = self
        try InterruptLiveStreamExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamQualityDetectionNotifyConfigAsync(request:DescribeLiveStreamQualityDetectionNotifyConfigRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamQualityDetectionNotifyConfigResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamQualityDetectionNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveDomainAsync(request:AddLiveDomainRequest,requestComplation:@escaping ExecuteResult<AddLiveDomainResult>) throws {
        liveJDCloudClient = self
        try AddLiveDomainExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveTranscodeStreamBandwidthAsync(request:DescribeLiveTranscodeStreamBandwidthRequest,requestComplation:@escaping ExecuteResult<DescribeLiveTranscodeStreamBandwidthResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveTranscodeStreamBandwidthExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamInfoAsync(request:DescribeLiveStreamInfoRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamInfoResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamInfoExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCustomLiveStreamQualityDetectionTemplatesAsync(request:DescribeCustomLiveStreamQualityDetectionTemplatesRequest,requestComplation:@escaping ExecuteResult<DescribeCustomLiveStreamQualityDetectionTemplatesResult>) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamQualityDetectionTemplatesExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamNotifyConfigAsync(request:DescribeLiveStreamNotifyConfigRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamNotifyConfigResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamNotifyConfigExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCustomLiveStreamSnapshotTemplatesAsync(request:DescribeCustomLiveStreamSnapshotTemplatesRequest,requestComplation:@escaping ExecuteResult<DescribeCustomLiveStreamSnapshotTemplatesResult>) throws {
        liveJDCloudClient = self
        try DescribeCustomLiveStreamSnapshotTemplatesExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopLiveAppAsync(request:StopLiveAppRequest,requestComplation:@escaping ExecuteResult<StopLiveAppResult>) throws {
        liveJDCloudClient = self
        try StopLiveAppExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLiveStreamTrafficDataAsync(request:DescribeLiveStreamTrafficDataRequest,requestComplation:@escaping ExecuteResult<DescribeLiveStreamTrafficDataResult>) throws {
        liveJDCloudClient = self
        try DescribeLiveStreamTrafficDataExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addCustomLiveStreamTranscodeTemplateAsync(request:AddCustomLiveStreamTranscodeTemplateRequest,requestComplation:@escaping ExecuteResult<AddCustomLiveStreamTranscodeTemplateResult>) throws {
        liveJDCloudClient = self
        try AddCustomLiveStreamTranscodeTemplateExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addLiveStreamDomainTranscodeAsync(request:AddLiveStreamDomainTranscodeRequest,requestComplation:@escaping ExecuteResult<AddLiveStreamDomainTranscodeResult>) throws {
        liveJDCloudClient = self
        try AddLiveStreamDomainTranscodeExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLiveStreamAppTranscodeAsync(request:DeleteLiveStreamAppTranscodeRequest,requestComplation:@escaping ExecuteResult<DeleteLiveStreamAppTranscodeResult>) throws {
        liveJDCloudClient = self
        try DeleteLiveStreamAppTranscodeExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func openLiveTimeshiftAsync(request:OpenLiveTimeshiftRequest,requestComplation:@escaping ExecuteResult<OpenLiveTimeshiftResult>) throws {
        liveJDCloudClient = self
        try OpenLiveTimeshiftExecutor(jdCloudClient: liveJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension LiveJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "live.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
