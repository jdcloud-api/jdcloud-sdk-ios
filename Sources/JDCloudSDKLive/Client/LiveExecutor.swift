/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Live-Video
   直播管理API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

///  禁止直播流推送
public class ForbidLiveStreamExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/streams:forbid")
    }
    
}
///  恢复直播流推送
public class ResumeLiveStreamExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/streams:resume")
    }
    
}
///  中断直播流推送
      /// - 中断操作1秒后可以继续推流
      /// 
public class InterruptLiveStreamExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/streams:interrupt")
    }
    
}
///  查询直播实时流信息
      /// 
public class DescribeLiveStreamInfoExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/streams/{publishDomain}/appNames/{appName}/streamNames/{streamName}/streamInfo")
    }
    
}
///  设置直播流状态回调地址
public class SetLiveStreamNotifyConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/streamNotifys")
    }
    
}
///  查询直播流状态回调地址
public class DescribeLiveStreamNotifyConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/streamNotifys/{publishDomain}")
    }
    
}
///  删除直播流状态回调地址
public class DeleteLiveStreamNotifyConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/streamNotifys/{publishDomain}")
    }
    
}
///  查询直播中的流的信息
public class DescribeLiveStreamOnlineListExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/streams/{publishDomain}/onlineList")
    }
    
}
///  查看推流历史记录
public class DescribeLiveStreamPublishListExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/streams/{publishDomain}/publishList")
    }
    
}
///  查询转码时长数据
public class DescribeLiveTranscodingDurationDataExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveTranscodingDurationData")
    }
    
}
///  查询存储空间数据
public class DescribeLiveFileStorageDataExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveFileStorageData")
    }
    
}
///  查询带宽数据
      /// - 查询某个时间段内的带宽数据（平均带宽）
      /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      /// 
public class DescribeLiveStreamBandwidthDataExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveStreamBandwidthData")
    }
    
}
///  查询推流带宽
      /// - 查询某个时间段内的推流上行带宽数据
      /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      /// 
public class DescribeLiveStreamPublishBandwidthDataExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveStreamPublishBandwidthData")
    }
    
}
///  查询流量数据
      /// - 查询某个时间段内的流量数据。
      /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      /// 
public class DescribeLiveStreamTrafficDataExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveStreamTrafficData")
    }
    
}
///  查询推流上行流量数据
      /// - 查询某个时间段内的流量数据。
      /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      /// 
public class DescribeLiveStreamPublishTrafficDataExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveStreamPublishTrafficData")
    }
    
}
///  查询直播截图张数数据
public class DescribeLiveSnapshotDataExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/liveSnapshotData")
    }
    
}
///  查询直播鉴黄张数数据
public class DescribeLivePornDataExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/livePornData")
    }
    
}
///  查询流分组统计数据
public class DescribeLiveStatisticGroupByStreamExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveStatisticGroupByStream")
    }
    
}
///  查询地域分组统计数据
public class DescribeLiveStatisticGroupByAreaExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveStatisticGroupByArea")
    }
    
}
///  查询地域/运营商分组统计数据
public class DescribeLiveStatisticGroupByAreaIspExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveStatisticGroupByAreaIsp")
    }
    
}
///  开启时移
      /// 直播支持最大4小时的HLS时移，使用方式为在播放域名后增加时移参数来实现，参数类型支持指定开始时间和时间偏移量2种方式进行时移。 开启直播时移后，重新推流生效，使用播放域名带相应参数访问即可播放
      /// - 域名格式：
      /// 1、http://{playDomain}/{appName}/{streamName}/index.m3u8?timeshift&#x3D;400（秒，指从当前时间往前时移的偏移量）
      /// 2、http://{playDomain}/{appName}/{streamName}/index.m3u8?starttime&#x3D;1529223702 (unix时间戳)
      /// 
public class OpenLiveTimeshiftExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/liveTimeshift:open")
    }
    
}
///  关闭时移
public class CloseLiveTimeshiftExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/liveTimeshift:close")
    }
    
}
///  查询时移配置
public class DescribeLiveTimeshiftConfigsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/liveTimeshift:configs")
    }
    
}
///  查询用户自定义直播录制模板列表
      /// 
public class DescribeCustomLiveStreamRecordTemplatesExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/recordCustoms:template")
    }
    
}
///  添加用户自定义直播录制模板
      /// 
public class AddCustomLiveStreamRecordTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/recordCustoms:template")
    }
    
}
///  添加应用级别直播录制配置
      /// - 添加应用级别的直播录制模板配置
      /// 
public class AddLiveStreamAppRecordExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/recordApps:config")
    }
    
}
///  添加域名级别直播录制配置
      /// - 添加域名级别的直播录制模板配置
      /// 
public class AddLiveStreamDomainRecordExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/recordDomains:config")
    }
    
}
///  查询直播直播录制配置
      /// - 录制模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
      /// - 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
      /// - 该查询旨在查询域名、应用、流最终生效的录制模板配置,并非各级的模板绑定情况
      /// 
public class DescribeCustomLiveStreamRecordConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/records:config")
    }
    
}
///  设置直播录制回调通知
      /// 
public class SetLiveStreamRecordNotifyConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/recordNotifys:config")
    }
    
}
///  删除用户自定义录制模板
      /// - 删除用户自定义录制模板之前必须先删除此模板在各域名、应用、流级别的录制设置
      /// 
public class DeleteCustomLiveStreamRecordTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/recordCustoms/{template}")
    }
    
}
///  删除应用级别录制模板配置
      /// - 删除应用级别的录制模板配置,重新推流后生效
      /// 
public class DeleteLiveStreamAppRecordExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/recordApps/{publishDomain}/appNames/{appName}/templates/{template}")
    }
    
}
///  删除域名级别录制模板配置
      /// - 删除域名级别录制模板配置,重新推流后生效
      /// 
public class DeleteLiveStreamDomainRecordExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/recordDomains/{publishDomain}/templates/{template}")
    }
    
}
///  查询录制回调配置
      /// 
public class DescribeLiveStreamRecordNotifyConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/recordNotifys/{publishDomain}")
    }
    
}
///  删除录制回调配置
      /// 
public class DeleteLiveStreamRecordNotifyConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/recordNotifys/{publishDomain}")
    }
    
}
///  添加打点录制任务
      /// - 您可以调用此接口精确提取已录制的文件中所需要的部分
      /// 
public class AddLiveRecordTaskExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/records/{publishDomain}/appNames/{appName}/streamNames/{streamName}/task")
    }
    
}
///  查询录制模板绑定
      /// 
public class DescribeRecordBindingExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/recordTemplates/{template}:binding")
    }
    
}
///  添加直播截图模板
public class AddCustomLiveStreamSnapshotTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/snapshotCustoms:template")
    }
    
}
///  查询直播截图配置
      /// - 截图模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
      /// - 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
      /// - 该查询旨在查询域名、应用、流最终生效的截图模板配置,并非各级的模板绑定情况
      /// 
public class DescribeCustomLiveStreamSnapshotConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/snapshotCustoms:config")
    }
    
}
///  查询直播截图模板列表
public class DescribeCustomLiveStreamSnapshotTemplatesExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/snapshotCustoms")
    }
    
}
///  添加应用截图配置
      /// - 添加应用级别的截图模板配置
      /// 
public class AddLiveStreamAppSnapshotExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/snapshotApps:template")
    }
    
}
///  添加域名截图配置
      /// - 添加域名级别的截图模板配置
      /// 
public class AddLiveStreamDomainSnapshotExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/snapshotDomains:template")
    }
    
}
///  设置直播截图回调通知地址
      /// 
public class SetLiveStreamSnapshotNotifyConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/snapshotNotifys:config")
    }
    
}
///  删除用户自定义直播截图模板
      /// - 删除截图模板前,请先删除此模板相关的截图配置,否则将会影响线上业务
      /// 
public class DeleteCustomLiveStreamSnapshotTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/snapshotCustoms/{template}")
    }
    
}
///  删除APP截图配置
public class DeleteLiveStreamAppSnapshotExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/snapshotApps/{publishDomain}/appNames/{appName}/templates/{template}")
    }
    
}
///  删除域名截图配置
      /// - 删除域名级别的截图模板配置,重新推流后生效
      /// 
public class DeleteLiveStreamDomainSnapshotExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/snapshotDomains/{publishDomain}/templates/{template}")
    }
    
}
///  查询截图回调配置
      /// 
public class DescribeLiveStreamSnapshotNotifyConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/snapshotNotifys/{publishDomain}:config")
    }
    
}
///  删除截图回调配置
      /// 
public class DeleteLiveStreamSnapshotNotifyConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/snapshotNotifys/{publishDomain}:config")
    }
    
}
///  查询截图模板绑定
      /// 
public class DescribeSnapshotBindingExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/snapshotTemplates/{template}:binding")
    }
    
}
///  添加直播质量检测模板
public class AddCustomLiveStreamQualityDetectionTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/qualityDetectionCustoms:template")
    }
    
}
///  查询直播质量检测模板列表
public class DescribeCustomLiveStreamQualityDetectionTemplatesExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/qualityDetectionCustoms")
    }
    
}
///  添加应用质量检测配置
      /// - 添加应用级别的质量检测模板配置
      /// 
public class AddLiveStreamAppQualityDetectionExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/qualityDetectionApps:template")
    }
    
}
///  添加域名质量检测配置
      /// - 添加域名级别的质量检测模板配置
      /// 
public class AddLiveStreamDomainQualityDetectionExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/qualityDetectionDomains:template")
    }
    
}
///  设置直播质量检测回调通知地址
      /// 
public class SetLiveStreamQualityDetectionNotifyConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/qualityDetectionNotifys:config")
    }
    
}
///  删除直播质量检测模板
      /// - 删除质量检测模板前,请先删除此模板相关的质量检测配置,否则无法删除
      /// 
public class DeleteCustomLiveStreamQualityDetectionTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/qualityDetectionCustoms/{template}")
    }
    
}
///  删除应用级别质量检测模板配置
      /// - 删除应用级别质量检测模板配置,重新推流后生效
      /// 
public class DeleteLiveStreamAppQualityDetectionExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/qualityDetectionApps/{publishDomain}/appNames/{appName}/templates/{template}")
    }
    
}
///  删除域名质量检测配置
      /// - 删除域名级别的质量检测模板配置,重新推流后生效
      /// 
public class DeleteLiveStreamDomainQualityDetectionExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/qualityDetectionDomains/{publishDomain}/templates/{template}")
    }
    
}
///  查询质量检测回调配置
      /// 
public class DescribeLiveStreamQualityDetectionNotifyConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/qualityDetectionNotifys/{publishDomain}:config")
    }
    
}
///  删除质量检测回调配置
      /// 
public class DeleteLiveStreamQualityDetectionNotifyConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/qualityDetectionNotifys/{publishDomain}:config")
    }
    
}
///  查询质量检测模板绑定
      /// 
public class DescribeQualityDetectionBindingExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/qualityDetectionTemplates/{template}:binding")
    }
    
}
///  查询推流监控数据
public class DescribePublishStreamInfoDataExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describePublishStreamInfoData")
    }
    
}
///  查询直播流历史在线人数
public class DescribeLiveStreamHistoryUserNumExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveStreamHistoryUserNum")
    }
    
}
///  查询直播推流数
public class DescribeLivePublishStreamNumExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLivePublishStreamNum")
    }
    
}
///  查询直播流播放人数排行
public class DescribeLiveStreamPlayerRankingDataExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveStreamPlayerRankingData")
    }
    
}
///  查询转码流信息
public class DescribeLiveTranscodeStreamListExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveTranscodeStreamList")
    }
    
}
///  查询转码流数量
public class DescribeLiveTranscodeStreamNumExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveTranscodeStreamNum")
    }
    
}
///  查询转码流观看人数
public class DescribeLiveTranscodeStreamPlayerUserNumExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveTranscodeStreamPlayerUserNum")
    }
    
}
///  查询转码流播放带宽
      /// - 查询1分钟粒度的数据时，时间跨度不超过7天，其他粒度时时间跨度不超过30天
      /// 
public class DescribeLiveTranscodeStreamBandwidthExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeLiveTranscodeStreamBandwidth")
    }
    
}
///  查询在线流列表
public class DescribeDomainOnlineStreamExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeDomainOnlineStream")
    }
    
}
///  日志下载
public class DescribeDomainsLogExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeDomainsLog")
    }
    
}
///  查询URL播放排行
public class DescribeUrlRankingExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/describeUrlRanking")
    }
    
}
///  添加域名级别转码配置
      /// - 添加域名级别的转码模板配置
      /// 
public class AddLiveStreamDomainTranscodeExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/transcodeDomains:config")
    }
    
}
///  添加应用转码配置
      /// - 添加应用级别的转码模板配置
      /// 
public class AddLiveStreamAppTranscodeExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/transcodeApps:config")
    }
    
}
///  添加自定义转码模板
      /// - 系统为您预设了标准转码模板,如果不能满足您的转码需求,可以通过此接口添加自定义转码模板
      /// - 系统标准转码模板
      ///     ld (h.264/640*360/15f)
      ///     sd (h.264/960*540/25f)
      ///     hd (h.264/1280*720/25f)
      ///     shd (h.264/1920*1080/30f)
      ///     ld-265 (h.265/640*360/15f)
      ///     sd-265 (h.265/960*540/25f)
      ///     hd-265 (h.265/1280*720/25f)
      ///     shd-265 (h.265/1920*1080/30f)
      /// 
public class AddCustomLiveStreamTranscodeTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/transcodeCustoms:template")
    }
    
}
///  查询用户自定义转码模板列表
      /// 
public class DescribeCustomLiveStreamTranscodeTemplatesExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/transcodeCustoms")
    }
    
}
///  查询系统默认转码模板列表
      /// 
public class DescribeSystemLiveStreamTranscodeTemplatesExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/transcodeSystem")
    }
    
}
///  查询转码模板配置
      /// - 转码模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效原则
      /// - 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
      /// - 该查询旨在查询域名、应用、流最终生效的转码模板配置,并非各级的模板绑定情况
      /// 
public class DescribeLiveStreamTranscodeConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/transcodes:config")
    }
    
}
///  删除域名级别转码模板配置
      /// - 删除域名级别转码模板配置,重新推流后生效
      /// 
public class DeleteLiveStreamDomainTranscodeExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/transcodeDomains/{publishDomain}/templates/{template}:config")
    }
    
}
///  删除应用级别转码模板配置
      /// - 删除应用级别的转码模板配置,重新推流后生效
      /// 
public class DeleteLiveStreamAppTranscodeExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/transcodeApps/{publishDomain}/appNames/{appName}/templates/{template}")
    }
    
}
///  查询用户自定义转码模板详情
      /// - 查询用户自定义转码模板详情
      /// - 系统标准转码模板
      ///       ld (h.264/640*360/15f)
      ///       sd (h.264/960*540/24f)
      ///       hd (h.264/1280*720/25f)
      ///       shd (h.264/1920*1080/30f)
      ///       ld-265 (h.265/640*360/15f)
      ///       sd-265 (h.265/960*540/24f)
      ///       hd-265 (h.265/1280*720/25f)
      ///       shd-265 (h.265/1920*1080/30f)
      /// 
public class DescribeCustomLiveStreamTranscodeTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/transcodeCustoms/{template}")
    }
    
}
///  删除用户自定义转码模板
      /// - 删除用户自定义转码模板之前必须先删除此模板在各域名、应用、流级别的转码设置
      /// 
public class DeleteCustomLiveStreamTranscodeTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/transcodeCustoms/{template}")
    }
    
}
///  查询转码模板绑定
      /// 
public class DescribeTranscodeBindingExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/transcodeTemplates/{template}:binding")
    }
    
}
///  开启P2P
      /// 
public class OpenLiveP2pExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/liveP2p:open")
    }
    
}
///  关闭P2P
public class CloseLiveP2pExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/liveP2p:close")
    }
    
}
///  查询P2P配置
public class DescribeLiveP2pConfigsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/liveP2p:configs")
    }
    
}
///  查询域名下的APP列表
public class DescribeLiveAppExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/apps")
    }
    
}
///  添加直播应用名
      /// - 需要提前在应用(app)级别绑定功能模板时才需要提前新建应用名
      /// - 新的应用名可以推流时自动创建
      /// 
public class AddLiveAppExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/apps")
    }
    
}
///  停用 运行中 状态的应用
      /// - 停用应用之后,不能再用此应用名推流
      /// 
public class StopLiveAppExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/apps:stop")
    }
    
}
///  添加用户自定义水印模板
      /// 
public class AddCustomLiveStreamWatermarkTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/watermarkCustoms:template")
    }
    
}
///  查询用户定义水印模板列表
      /// 
public class DescribeCustomLiveStreamWatermarkTemplatesExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/watermarkCustoms")
    }
    
}
///  添加应用级别水印配置
      /// 
public class AddLiveStreamAppWatermarkExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/watermarkApps:config")
    }
    
}
///  添加域名水印配置
      /// 
public class AddLiveStreamDomainWatermarkExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/watermarkDomains:config")
    }
    
}
///  查询直播水印配置
      /// - 水印模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
      /// - 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
      /// - 该查询旨在查询域名、应用、流最终生效的水印模板配置,并非各级的模板绑定情况
      /// 
public class DescribeCustomLiveStreamWatermarkConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/watermarks:config")
    }
    
}
///  删除用户自定义水印模板
      /// - 删除用户自定义水印模板之前必须先删除此模板在各域名、应用、流级别的水印设置
      /// 
public class DeleteCustomLiveStreamWatermarkTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/watermarkCustoms/{template}")
    }
    
}
///  删除应用级别水印模板配置
      /// - 删除应用级别的水印模板配置,重新推流后生效
      /// 
public class DeleteLiveStreamAppWatermarkExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/watermarkApps/{publishDomain}/appNames/{appName}/templates/{template}")
    }
    
}
///  删除域名级别水印模板配置
      /// - 删除域名级别水印模板配置,重新推流后生效
      /// 
public class DeleteLiveStreamDomainWatermarkExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/watermarkDomains/{publishDomain}/templates/{template}")
    }
    
}
///  查询水印模板绑定
      /// 
public class DescribeWatermarkBindingExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/watermarkTemplates/{template}:binding")
    }
    
}
///  查询(直播or时移)播放鉴权KEY
public class DescribeLivePlayAuthKeyExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/livePlayAuthKey")
    }
    
}
///  设置(直播or时移)播放鉴权KEY
public class SetLivePlayAuthKeyExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/livePlayAuthKey")
    }
    
}
///  查询直播回看播放鉴权KEY
public class DescribeLiveRestartAuthKeyExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/liveRestartAuthKey")
    }
    
}
///  设置直播回看播放鉴权KEY
public class SetLiveRestartAuthKeyExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/liveRestartAuthKey")
    }
    
}
///  查询直播播放证书
public class DescribeLiveDomainCertificateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/liveDomainCertificate")
    }
    
}
///  设置(直播or时移)播放证书
      /// -- 设置成功之后30分钟以内生效
      /// 
public class SetLiveDomainCertificateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/liveDomainCertificate")
    }
    
}
///  查询直播回看播放证书
public class DescribeLiveRestartDomainCertificateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/liveRestartDomainCertificate")
    }
    
}
///  设置直播回看证书
      /// -- 设置成功之后30分钟以内生效
      /// 
public class SetLiveRestartDomainCertificateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/liveRestartDomainCertificate")
    }
    
}
///  开启回看
      /// 1、直播回看文件格式仅支持m3u8。
      /// 2、回看时长用户可以配置，最大支持7天，即用户请求回看内容，最多可以请求最近7天的直播回看内容。
      /// 3、域名格式：http://{restartDomain}/{appName}/{streamName}/index.m3u8?starttime&#x3D;1527756680&amp;endtime&#x3D;1527760280 (unix时间戳)
      /// 4、starttime-endtime最长可支持24小时，可跨天
      /// 
public class OpenLiveRestartExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/liveRestart:open")
    }
    
}
///  关闭回看
public class CloseLiveRestartExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/liveRestart:close")
    }
    
}
///  查询回看配置
public class DescribeLiveRestartConfigsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/liveRestart:configs")
    }
    
}
///  查询域名列表
public class DescribeLiveDomainsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/domains")
    }
    
}
///  添加直播域名
      /// - 创建直播域名之前,必须先开通直播服务
      /// - 直播域名必须已经备案完成
      /// 
public class AddLiveDomainExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/domains")
    }
    
}
///  启动域名
      /// - 启用状态为 停用 的直播域名对(推流域名,播放域名)将DomainStatus变更为online
      /// 
public class StartLiveDomainExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/domains:start")
    }
    
}
///  停用域名
      /// - 停用直播域名对(推流域名,播放域名),将DomainStatus变更为offline
      /// - 停用该直播域名对后,直播域名信息仍保留,但用户将不能再用该推流域名推流或播放域名播放
      /// 
public class StopLiveDomainExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/domains:stop")
    }
    
}
///  查询指定域名相关信息
public class DescribeLiveDomainDetailExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/domains/{publishDomain}")
    }
    
}
///  删除直播域名
      /// - 请慎重操作（建议在进行域名删除前到域名解析服务商处恢复域名A记录），以免导致删除操作后此域名不可访问。
      ///   deleteLiveDomain调用成功后将删除本条直播域名的全部相关记录，对于仅需要暂停使用该直播域名，推荐stopLiveDomain接口
      /// 
public class DeleteLiveDomainExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/domains/{publishDomain}")
    }
    
}
///  添加回看域名
      /// 
public class AddLiveRestartDomainExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/domains:restart")
    }
    
}
