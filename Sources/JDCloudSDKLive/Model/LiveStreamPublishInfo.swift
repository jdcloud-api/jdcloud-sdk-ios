/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  liveStreamPublishInfo
@objc(LiveStreamPublishInfo)
public class LiveStreamPublishInfo:NSObject,Codable{
    /// 推流域名
    var publishDomain:String?
    /// 应用名称
    var appName:String?
    /// 流名称
    var streamName:String?
    /// 推流开始时间
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var publishUpTime:String?
    /// 推流结束时刻
      /// - UTC时间
      ///   格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var publishDownTime:String?



    public override init(){
            super.init()
    }

    enum LiveStreamPublishInfoCodingKeys: String, CodingKey {
        case publishDomain
        case appName
        case streamName
        case publishUpTime
        case publishDownTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: LiveStreamPublishInfoCodingKeys.self)
        if decoderContainer.contains(.publishDomain)
        {
            self.publishDomain = try decoderContainer.decode(String?.self, forKey: .publishDomain)
        }
        if decoderContainer.contains(.appName)
        {
            self.appName = try decoderContainer.decode(String?.self, forKey: .appName)
        }
        if decoderContainer.contains(.streamName)
        {
            self.streamName = try decoderContainer.decode(String?.self, forKey: .streamName)
        }
        if decoderContainer.contains(.publishUpTime)
        {
            self.publishUpTime = try decoderContainer.decode(String?.self, forKey: .publishUpTime)
        }
        if decoderContainer.contains(.publishDownTime)
        {
            self.publishDownTime = try decoderContainer.decode(String?.self, forKey: .publishDownTime)
        }
    }
}
public extension LiveStreamPublishInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: LiveStreamPublishInfoCodingKeys.self)
         try encoderContainer.encode(publishDomain, forKey: .publishDomain)
         try encoderContainer.encode(appName, forKey: .appName)
         try encoderContainer.encode(streamName, forKey: .streamName)
         try encoderContainer.encode(publishUpTime, forKey: .publishUpTime)
         try encoderContainer.encode(publishDownTime, forKey: .publishDownTime)
    }
}
