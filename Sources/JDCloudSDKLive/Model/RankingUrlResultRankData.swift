/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  rankingUrlResultRankData
@objc(RankingUrlResultRankData)
public class RankingUrlResultRankData:NSObject,Codable{
    /// 独立访问数
      /// 
    var uv:Int64?
    /// 带宽，单位：bps
      /// 
    var bandwidth:Int64?
    /// 访问次数
      /// 
    var pv:Int64?
    /// 流量，单位：Byte
    var flow:Int64?



    public override init(){
            super.init()
    }

    enum RankingUrlResultRankDataCodingKeys: String, CodingKey {
        case uv
        case bandwidth
        case pv
        case flow
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RankingUrlResultRankDataCodingKeys.self)
        if decoderContainer.contains(.uv)
        {
            self.uv = try decoderContainer.decode(Int64?.self, forKey: .uv)
        }
        if decoderContainer.contains(.bandwidth)
        {
            self.bandwidth = try decoderContainer.decode(Int64?.self, forKey: .bandwidth)
        }
        if decoderContainer.contains(.pv)
        {
            self.pv = try decoderContainer.decode(Int64?.self, forKey: .pv)
        }
        if decoderContainer.contains(.flow)
        {
            self.flow = try decoderContainer.decode(Int64?.self, forKey: .flow)
        }
    }
}
public extension RankingUrlResultRankData{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RankingUrlResultRankDataCodingKeys.self)
         try encoderContainer.encode(uv, forKey: .uv)
         try encoderContainer.encode(bandwidth, forKey: .bandwidth)
         try encoderContainer.encode(pv, forKey: .pv)
         try encoderContainer.encode(flow, forKey: .flow)
    }
}
