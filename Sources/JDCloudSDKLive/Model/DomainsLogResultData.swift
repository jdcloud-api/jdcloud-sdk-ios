/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  domainsLogResultData
@objc(DomainsLogResultData)
public class DomainsLogResultData:NSObject,Codable{
    /// 文件名称
      /// 
    var fileName:String?
    /// 下载地址
      /// 
    var logUrl:String?
    /// 文件md5
      /// 
    var md5:String?
    /// 文件大小，单位：Byte
      /// 
    var size:Int64?
    /// 开始时间，UTC时间格式
      /// 
    var startTime:String?
    /// 结束时间，UTC时间格式
      /// 
    var endTime:String?



    public override init(){
            super.init()
    }

    enum DomainsLogResultDataCodingKeys: String, CodingKey {
        case fileName
        case logUrl
        case md5
        case size
        case startTime
        case endTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DomainsLogResultDataCodingKeys.self)
        if decoderContainer.contains(.fileName)
        {
            self.fileName = try decoderContainer.decode(String?.self, forKey: .fileName)
        }
        if decoderContainer.contains(.logUrl)
        {
            self.logUrl = try decoderContainer.decode(String?.self, forKey: .logUrl)
        }
        if decoderContainer.contains(.md5)
        {
            self.md5 = try decoderContainer.decode(String?.self, forKey: .md5)
        }
        if decoderContainer.contains(.size)
        {
            self.size = try decoderContainer.decode(Int64?.self, forKey: .size)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
    }
}
public extension DomainsLogResultData{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DomainsLogResultDataCodingKeys.self)
         try encoderContainer.encode(fileName, forKey: .fileName)
         try encoderContainer.encode(logUrl, forKey: .logUrl)
         try encoderContainer.encode(md5, forKey: .md5)
         try encoderContainer.encode(size, forKey: .size)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
    }
}
