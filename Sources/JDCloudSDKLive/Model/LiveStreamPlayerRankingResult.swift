/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Live-Video
   直播管理API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  liveStreamPlayerRankingResult
@objc(LiveStreamPlayerRankingResult)
public class LiveStreamPlayerRankingResult:NSObject,Codable{
    /// 起始时间点，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var startTime:String?
    /// 结束时间点，UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var endTime:String?
    /// 排行
      /// 
    var ranking:Int64?
    /// 流名称
      /// 
    var streamName:String?
    /// 观众数量
      /// 
    var playerCount:Int64?



    public override init(){
            super.init()
    }

    enum LiveStreamPlayerRankingResultCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case ranking
        case streamName
        case playerCount
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: LiveStreamPlayerRankingResultCodingKeys.self)
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.ranking)
        {
            self.ranking = try decoderContainer.decode(Int64?.self, forKey: .ranking)
        }
        if decoderContainer.contains(.streamName)
        {
            self.streamName = try decoderContainer.decode(String?.self, forKey: .streamName)
        }
        if decoderContainer.contains(.playerCount)
        {
            self.playerCount = try decoderContainer.decode(Int64?.self, forKey: .playerCount)
        }
    }
}
public extension LiveStreamPlayerRankingResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: LiveStreamPlayerRankingResultCodingKeys.self)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
         try encoderContainer.encode(ranking, forKey: .ranking)
         try encoderContainer.encode(streamName, forKey: .streamName)
         try encoderContainer.encode(playerCount, forKey: .playerCount)
    }
}
