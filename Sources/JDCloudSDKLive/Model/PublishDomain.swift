/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  publishDomain
@objc(PublishDomain)
public class PublishDomain:NSObject,Codable{
    /// 推流域名
    var publishDomainValue:String?
    /// 推流域名Cname
    var publishDomainCname:String?
    /// 直播域名状态
      ///   online: 启用
      ///   offline: 停用
      ///   configuring: 配置中
      ///   configure_failed: 配置失败
      ///   checking: 正在审核
      ///   check_failed: 审核失败
      /// 
    var domainStatus:String?
    /// 域名创建时间
      /// - UTC时间
      ///   格式: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var createTime:String?
    /// 域名更新时间
      /// - UTC时间
      ///   格式: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
      /// 
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum PublishDomainCodingKeys: String, CodingKey {
        case publishDomainValue = "publishDomain"
        case publishDomainCname
        case domainStatus
        case createTime
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PublishDomainCodingKeys.self)
        if decoderContainer.contains(.publishDomainValue)
        {
            self.publishDomainValue = try decoderContainer.decode(String?.self, forKey: .publishDomainValue)
        }
        if decoderContainer.contains(.publishDomainCname)
        {
            self.publishDomainCname = try decoderContainer.decode(String?.self, forKey: .publishDomainCname)
        }
        if decoderContainer.contains(.domainStatus)
        {
            self.domainStatus = try decoderContainer.decode(String?.self, forKey: .domainStatus)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension PublishDomain{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PublishDomainCodingKeys.self)
         try encoderContainer.encode(publishDomainValue, forKey: .publishDomainValue)
         try encoderContainer.encode(publishDomainCname, forKey: .publishDomainCname)
         try encoderContainer.encode(domainStatus, forKey: .domainStatus)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
