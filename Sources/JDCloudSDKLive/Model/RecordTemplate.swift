/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  recordTemplate
@objc(RecordTemplate)
public class RecordTemplate:NSObject,Codable{
    /// 自动录制周期
      /// - 取值:[15,360]
      /// - 单位: 分钟
      /// 
    var recordPeriod:Int?
    /// 存储桶
    var saveBucket:String?
    /// 存储地址
    var saveEndpoint:String?
    /// 录制文件格式
      /// - 取值: ts,flv,mp4 (多种类型之前用;隔开)
      /// - 不区分大小写
      /// 
    var recordFileType:String?
    /// 录制模板
      /// - 取值要求：数字、大小写字母或短横线(&quot;-&quot;),
      ///           首尾不能有特殊字符(&quot;-&quot;)
      /// - &lt;b&gt;注意: 不能与已定义命名重复&lt;/b&gt;
      /// 
    var template:String?



    public override init(){
            super.init()
    }

    enum RecordTemplateCodingKeys: String, CodingKey {
        case recordPeriod
        case saveBucket
        case saveEndpoint
        case recordFileType
        case template
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RecordTemplateCodingKeys.self)
        if decoderContainer.contains(.recordPeriod)
        {
            self.recordPeriod = try decoderContainer.decode(Int?.self, forKey: .recordPeriod)
        }
        if decoderContainer.contains(.saveBucket)
        {
            self.saveBucket = try decoderContainer.decode(String?.self, forKey: .saveBucket)
        }
        if decoderContainer.contains(.saveEndpoint)
        {
            self.saveEndpoint = try decoderContainer.decode(String?.self, forKey: .saveEndpoint)
        }
        if decoderContainer.contains(.recordFileType)
        {
            self.recordFileType = try decoderContainer.decode(String?.self, forKey: .recordFileType)
        }
        if decoderContainer.contains(.template)
        {
            self.template = try decoderContainer.decode(String?.self, forKey: .template)
        }
    }
}
public extension RecordTemplate{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RecordTemplateCodingKeys.self)
         try encoderContainer.encode(recordPeriod, forKey: .recordPeriod)
         try encoderContainer.encode(saveBucket, forKey: .saveBucket)
         try encoderContainer.encode(saveEndpoint, forKey: .saveEndpoint)
         try encoderContainer.encode(recordFileType, forKey: .recordFileType)
         try encoderContainer.encode(template, forKey: .template)
    }
}
