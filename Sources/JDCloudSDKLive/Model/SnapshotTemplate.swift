/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  snapshotTemplate
@objc(SnapshotTemplate)
public class SnapshotTemplate:NSObject,Codable{
    /// 截图格式
    var format:String?
    /// 宽
    var width:Int?
    /// 高
    var height:Int?
    /// 文件类型
    var fillType:Int?
    /// 截图
    var snapshotInterval:Int?
    /// 保存模式
    var saveMode:Int?
    /// 存储桶
    var saveBucket:String?
    /// 存储endPoint
    var saveEndpoint:String?
    /// 录制模板自定义名称
    var template:String?



    public override init(){
            super.init()
    }

    enum SnapshotTemplateCodingKeys: String, CodingKey {
        case format
        case width
        case height
        case fillType
        case snapshotInterval
        case saveMode
        case saveBucket
        case saveEndpoint
        case template
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SnapshotTemplateCodingKeys.self)
        self.format = try decoderContainer.decode(String?.self, forKey: .format)
        self.width = try decoderContainer.decode(Int?.self, forKey: .width)
        self.height = try decoderContainer.decode(Int?.self, forKey: .height)
        self.fillType = try decoderContainer.decode(Int?.self, forKey: .fillType)
        self.snapshotInterval = try decoderContainer.decode(Int?.self, forKey: .snapshotInterval)
        self.saveMode = try decoderContainer.decode(Int?.self, forKey: .saveMode)
        self.saveBucket = try decoderContainer.decode(String?.self, forKey: .saveBucket)
        self.saveEndpoint = try decoderContainer.decode(String?.self, forKey: .saveEndpoint)
        self.template = try decoderContainer.decode(String?.self, forKey: .template)
    }
}
public extension SnapshotTemplate{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SnapshotTemplateCodingKeys.self)
         try encoderContainer.encode(format, forKey: .format)
         try encoderContainer.encode(width, forKey: .width)
         try encoderContainer.encode(height, forKey: .height)
         try encoderContainer.encode(fillType, forKey: .fillType)
         try encoderContainer.encode(snapshotInterval, forKey: .snapshotInterval)
         try encoderContainer.encode(saveMode, forKey: .saveMode)
         try encoderContainer.encode(saveBucket, forKey: .saveBucket)
         try encoderContainer.encode(saveEndpoint, forKey: .saveEndpoint)
         try encoderContainer.encode(template, forKey: .template)
    }
}
