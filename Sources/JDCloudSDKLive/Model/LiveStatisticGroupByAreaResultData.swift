/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  liveStatisticGroupByAreaResultData
@objc(LiveStatisticGroupByAreaResultData)
public class LiveStatisticGroupByAreaResultData:NSObject,Codable{
    /// 地域
      /// 
    var area:String?
    /// 在线人数
      /// 
    var playerCount:Int64?
    /// 带宽，单位：bps
      /// 
    var bandwidth:Int64?
    /// 带宽峰值时间点，单位：秒
      /// 
    var maxBandwidthtime:Int64?
    /// 流量，单位:Byte
      /// 
    var flow:Int64?



    public override init(){
            super.init()
    }

    enum LiveStatisticGroupByAreaResultDataCodingKeys: String, CodingKey {
        case area
        case playerCount
        case bandwidth
        case maxBandwidthtime
        case flow
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: LiveStatisticGroupByAreaResultDataCodingKeys.self)
        if decoderContainer.contains(.area)
        {
            self.area = try decoderContainer.decode(String?.self, forKey: .area)
        }
        if decoderContainer.contains(.playerCount)
        {
            self.playerCount = try decoderContainer.decode(Int64?.self, forKey: .playerCount)
        }
        if decoderContainer.contains(.bandwidth)
        {
            self.bandwidth = try decoderContainer.decode(Int64?.self, forKey: .bandwidth)
        }
        if decoderContainer.contains(.maxBandwidthtime)
        {
            self.maxBandwidthtime = try decoderContainer.decode(Int64?.self, forKey: .maxBandwidthtime)
        }
        if decoderContainer.contains(.flow)
        {
            self.flow = try decoderContainer.decode(Int64?.self, forKey: .flow)
        }
    }
}
public extension LiveStatisticGroupByAreaResultData{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: LiveStatisticGroupByAreaResultDataCodingKeys.self)
         try encoderContainer.encode(area, forKey: .area)
         try encoderContainer.encode(playerCount, forKey: .playerCount)
         try encoderContainer.encode(bandwidth, forKey: .bandwidth)
         try encoderContainer.encode(maxBandwidthtime, forKey: .maxBandwidthtime)
         try encoderContainer.encode(flow, forKey: .flow)
    }
}
