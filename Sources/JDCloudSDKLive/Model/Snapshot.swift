/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  snapshot
@objc(Snapshot)
public class Snapshot:NSObject,Codable{
    /// 截图ID
      /// 
    var imgId:String?
    /// 截图格式
      /// 
    var format:String?
    /// 截图宽度
      /// - 单位: 像素
      /// 
    var width:Int?
    /// 截图高度
      /// - 单位: 像素
      /// 
    var height:Int?
    /// 截图时间点
      /// 
    var snapshotTime:String?
    /// 截图文件大小
      /// 
    var size:Int?
    /// 截图地址
      /// 
    var imgUrl:String?



    public override init(){
            super.init()
    }

    enum SnapshotCodingKeys: String, CodingKey {
        case imgId
        case format
        case width
        case height
        case snapshotTime
        case size
        case imgUrl
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SnapshotCodingKeys.self)
        if decoderContainer.contains(.imgId)
        {
            self.imgId = try decoderContainer.decode(String?.self, forKey: .imgId)
        }
        if decoderContainer.contains(.format)
        {
            self.format = try decoderContainer.decode(String?.self, forKey: .format)
        }
        if decoderContainer.contains(.width)
        {
            self.width = try decoderContainer.decode(Int?.self, forKey: .width)
        }
        if decoderContainer.contains(.height)
        {
            self.height = try decoderContainer.decode(Int?.self, forKey: .height)
        }
        if decoderContainer.contains(.snapshotTime)
        {
            self.snapshotTime = try decoderContainer.decode(String?.self, forKey: .snapshotTime)
        }
        if decoderContainer.contains(.size)
        {
            self.size = try decoderContainer.decode(Int?.self, forKey: .size)
        }
        if decoderContainer.contains(.imgUrl)
        {
            self.imgUrl = try decoderContainer.decode(String?.self, forKey: .imgUrl)
        }
    }
}
public extension Snapshot{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SnapshotCodingKeys.self)
         try encoderContainer.encode(imgId, forKey: .imgId)
         try encoderContainer.encode(format, forKey: .format)
         try encoderContainer.encode(width, forKey: .width)
         try encoderContainer.encode(height, forKey: .height)
         try encoderContainer.encode(snapshotTime, forKey: .snapshotTime)
         try encoderContainer.encode(size, forKey: .size)
         try encoderContainer.encode(imgUrl, forKey: .imgUrl)
    }
}
