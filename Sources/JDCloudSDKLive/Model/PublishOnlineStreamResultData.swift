/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  publishOnlineStreamResultData
@objc(PublishOnlineStreamResultData)
public class PublishOnlineStreamResultData:NSObject,Codable{
    /// APP名称
      /// 
    var appName:String?
    /// 流名称
      /// 
    var streamName:String?
    /// 客户端ip
      /// 
    var clientIp:String?
    /// 边缘节点ip
      /// 
    var serverIp:String?
    /// 帧率
      /// 
    var frameRate:Double?
    /// 丢帧率
      /// 
    var frameLossRate:Double?
    /// 最近活跃时间
      /// 
    var lastActive:Int64?
    /// 实时帧率
      /// 
    var realFps:Double?
    /// 上传速度  单位：KB/s
      /// 
    var uploadSpeed:Int64?
    /// 视频codec，取值：
      /// - VideoAVC &#x3D; 7
      /// - VideoHEVC &#x3D; 12
      /// 
    var videoCodec:Int64?
    /// 视频码率 单位：KB/s
      /// 
    var videoDataRate:Int64?
    /// 音频codec，取值：
      /// - AudioReserved1 &#x3D; 16
      /// - AudioDisabled &#x3D; 17
      /// - AudioLinearPCMPlatformEndian &#x3D; 0
      /// - AudioADPCM &#x3D; 1
      /// - AudioMP3 &#x3D; 2
      /// - AudioLinearPCMLittleEndian &#x3D; 3
      /// - AudioNellymoser16kHzMono &#x3D; 4
      /// - AudioNellymoser8kHzMono &#x3D; 5
      /// - AudioNellymoser &#x3D; 6
      /// - AudioReservedG711AlawLogarithmicPCM &#x3D; 7
      /// - AudioReservedG711MuLawLogarithmicPCM &#x3D; 8
      /// - AudioReserved &#x3D; 9
      /// - AudioAAC &#x3D; 10
      /// - AudioSpeex &#x3D; 11
      /// - AudioReservedMP3_8kHz &#x3D; 14
      /// - AudioReservedDeviceSpecificSound &#x3D; 15
      /// 
    var audioCodec:Int64?



    public override init(){
            super.init()
    }

    enum PublishOnlineStreamResultDataCodingKeys: String, CodingKey {
        case appName
        case streamName
        case clientIp
        case serverIp
        case frameRate
        case frameLossRate
        case lastActive
        case realFps
        case uploadSpeed
        case videoCodec
        case videoDataRate
        case audioCodec
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PublishOnlineStreamResultDataCodingKeys.self)
        if decoderContainer.contains(.appName)
        {
            self.appName = try decoderContainer.decode(String?.self, forKey: .appName)
        }
        if decoderContainer.contains(.streamName)
        {
            self.streamName = try decoderContainer.decode(String?.self, forKey: .streamName)
        }
        if decoderContainer.contains(.clientIp)
        {
            self.clientIp = try decoderContainer.decode(String?.self, forKey: .clientIp)
        }
        if decoderContainer.contains(.serverIp)
        {
            self.serverIp = try decoderContainer.decode(String?.self, forKey: .serverIp)
        }
        if decoderContainer.contains(.frameRate)
        {
            self.frameRate = try decoderContainer.decode(Double?.self, forKey: .frameRate)
        }
        if decoderContainer.contains(.frameLossRate)
        {
            self.frameLossRate = try decoderContainer.decode(Double?.self, forKey: .frameLossRate)
        }
        if decoderContainer.contains(.lastActive)
        {
            self.lastActive = try decoderContainer.decode(Int64?.self, forKey: .lastActive)
        }
        if decoderContainer.contains(.realFps)
        {
            self.realFps = try decoderContainer.decode(Double?.self, forKey: .realFps)
        }
        if decoderContainer.contains(.uploadSpeed)
        {
            self.uploadSpeed = try decoderContainer.decode(Int64?.self, forKey: .uploadSpeed)
        }
        if decoderContainer.contains(.videoCodec)
        {
            self.videoCodec = try decoderContainer.decode(Int64?.self, forKey: .videoCodec)
        }
        if decoderContainer.contains(.videoDataRate)
        {
            self.videoDataRate = try decoderContainer.decode(Int64?.self, forKey: .videoDataRate)
        }
        if decoderContainer.contains(.audioCodec)
        {
            self.audioCodec = try decoderContainer.decode(Int64?.self, forKey: .audioCodec)
        }
    }
}
public extension PublishOnlineStreamResultData{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PublishOnlineStreamResultDataCodingKeys.self)
         try encoderContainer.encode(appName, forKey: .appName)
         try encoderContainer.encode(streamName, forKey: .streamName)
         try encoderContainer.encode(clientIp, forKey: .clientIp)
         try encoderContainer.encode(serverIp, forKey: .serverIp)
         try encoderContainer.encode(frameRate, forKey: .frameRate)
         try encoderContainer.encode(frameLossRate, forKey: .frameLossRate)
         try encoderContainer.encode(lastActive, forKey: .lastActive)
         try encoderContainer.encode(realFps, forKey: .realFps)
         try encoderContainer.encode(uploadSpeed, forKey: .uploadSpeed)
         try encoderContainer.encode(videoCodec, forKey: .videoCodec)
         try encoderContainer.encode(videoDataRate, forKey: .videoDataRate)
         try encoderContainer.encode(audioCodec, forKey: .audioCodec)
    }
}
