/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  streamInfo
@objc(StreamInfo)
public class StreamInfo:NSObject,Codable{
    /// 直播流的音频帧率
    var audioFrameRate:Double?
    /// 直播流的 URL
    var streamUrl:String?
    /// 直播流的码率
    var bitRate:Double?
    /// 直播流的视频帧率
    var videoFrameRate:Double?
    /// 统计时刻
    var time:String?



    public override init(){
            super.init()
    }

    enum StreamInfoCodingKeys: String, CodingKey {
        case audioFrameRate
        case streamUrl
        case bitRate
        case videoFrameRate
        case time
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StreamInfoCodingKeys.self)
        if decoderContainer.contains(.audioFrameRate)
        {
            self.audioFrameRate = try decoderContainer.decode(Double?.self, forKey: .audioFrameRate)
        }
        if decoderContainer.contains(.streamUrl)
        {
            self.streamUrl = try decoderContainer.decode(String?.self, forKey: .streamUrl)
        }
        if decoderContainer.contains(.bitRate)
        {
            self.bitRate = try decoderContainer.decode(Double?.self, forKey: .bitRate)
        }
        if decoderContainer.contains(.videoFrameRate)
        {
            self.videoFrameRate = try decoderContainer.decode(Double?.self, forKey: .videoFrameRate)
        }
        if decoderContainer.contains(.time)
        {
            self.time = try decoderContainer.decode(String?.self, forKey: .time)
        }
    }
}
public extension StreamInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StreamInfoCodingKeys.self)
         try encoderContainer.encode(audioFrameRate, forKey: .audioFrameRate)
         try encoderContainer.encode(streamUrl, forKey: .streamUrl)
         try encoderContainer.encode(bitRate, forKey: .bitRate)
         try encoderContainer.encode(videoFrameRate, forKey: .videoFrameRate)
         try encoderContainer.encode(time, forKey: .time)
    }
}
