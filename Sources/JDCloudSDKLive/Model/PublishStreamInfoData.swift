/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  publishStreamInfoData
@objc(PublishStreamInfoData)
public class PublishStreamInfoData:NSObject,Codable{
    /// 流名称
      /// 
    var streamName:String?
    /// 帧率
      /// 
    var fps:String?
    /// 码率，单位：bps
      /// 
    var bitrate:String?
    /// CDN上行节点IP列表
      /// 
    var pushEdgeNodeIps:[String?]?
    /// 主播IP列表
      /// 
    var anchorIps:[String?]?
    /// Flv观看带宽
      /// 
    var flvBandWidth:Int64?
    /// Flv观看人数
      /// 
    var flvPlayerCount:Int64?
    /// Hls观看带宽
      /// 
    var hlsBandWidth:Int64?
    /// Hls观看人数
      /// 
    var hlsPlayerCount:Int64?



    public override init(){
            super.init()
    }

    enum PublishStreamInfoDataCodingKeys: String, CodingKey {
        case streamName
        case fps
        case bitrate
        case pushEdgeNodeIps
        case anchorIps
        case flvBandWidth
        case flvPlayerCount
        case hlsBandWidth
        case hlsPlayerCount
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PublishStreamInfoDataCodingKeys.self)
        if decoderContainer.contains(.streamName)
        {
            self.streamName = try decoderContainer.decode(String?.self, forKey: .streamName)
        }
        if decoderContainer.contains(.fps)
        {
            self.fps = try decoderContainer.decode(String?.self, forKey: .fps)
        }
        if decoderContainer.contains(.bitrate)
        {
            self.bitrate = try decoderContainer.decode(String?.self, forKey: .bitrate)
        }
        if decoderContainer.contains(.pushEdgeNodeIps)
        {
            self.pushEdgeNodeIps = try decoderContainer.decode([String?]?.self, forKey: .pushEdgeNodeIps)
        }
        if decoderContainer.contains(.anchorIps)
        {
            self.anchorIps = try decoderContainer.decode([String?]?.self, forKey: .anchorIps)
        }
        if decoderContainer.contains(.flvBandWidth)
        {
            self.flvBandWidth = try decoderContainer.decode(Int64?.self, forKey: .flvBandWidth)
        }
        if decoderContainer.contains(.flvPlayerCount)
        {
            self.flvPlayerCount = try decoderContainer.decode(Int64?.self, forKey: .flvPlayerCount)
        }
        if decoderContainer.contains(.hlsBandWidth)
        {
            self.hlsBandWidth = try decoderContainer.decode(Int64?.self, forKey: .hlsBandWidth)
        }
        if decoderContainer.contains(.hlsPlayerCount)
        {
            self.hlsPlayerCount = try decoderContainer.decode(Int64?.self, forKey: .hlsPlayerCount)
        }
    }
}
public extension PublishStreamInfoData{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PublishStreamInfoDataCodingKeys.self)
         try encoderContainer.encode(streamName, forKey: .streamName)
         try encoderContainer.encode(fps, forKey: .fps)
         try encoderContainer.encode(bitrate, forKey: .bitrate)
         try encoderContainer.encode(pushEdgeNodeIps, forKey: .pushEdgeNodeIps)
         try encoderContainer.encode(anchorIps, forKey: .anchorIps)
         try encoderContainer.encode(flvBandWidth, forKey: .flvBandWidth)
         try encoderContainer.encode(flvPlayerCount, forKey: .flvPlayerCount)
         try encoderContainer.encode(hlsBandWidth, forKey: .hlsBandWidth)
         try encoderContainer.encode(hlsPlayerCount, forKey: .hlsPlayerCount)
    }
}
