/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  restartPlayDomain
@objc(RestartPlayDomain)
public class RestartPlayDomain:NSObject,Codable{
    /// 播放域名
    var playDomain:String?
    /// 直播回看状态:
      ///   on: 开启
      ///   off: 关闭
      /// 
    var restartStatus:String?
    /// 播放域名类型:
      ///   normal: 普通播放域名(时移播放域名)
      ///   restart: 回看播放域名
    var playType:String?



    public override init(){
            super.init()
    }

    enum RestartPlayDomainCodingKeys: String, CodingKey {
        case playDomain
        case restartStatus
        case playType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RestartPlayDomainCodingKeys.self)
        if decoderContainer.contains(.playDomain)
        {
            self.playDomain = try decoderContainer.decode(String?.self, forKey: .playDomain)
        }
        if decoderContainer.contains(.restartStatus)
        {
            self.restartStatus = try decoderContainer.decode(String?.self, forKey: .restartStatus)
        }
        if decoderContainer.contains(.playType)
        {
            self.playType = try decoderContainer.decode(String?.self, forKey: .playType)
        }
    }
}
public extension RestartPlayDomain{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestartPlayDomainCodingKeys.self)
         try encoderContainer.encode(playDomain, forKey: .playDomain)
         try encoderContainer.encode(restartStatus, forKey: .restartStatus)
         try encoderContainer.encode(playType, forKey: .playType)
    }
}
