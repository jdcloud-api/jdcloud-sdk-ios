/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   相关接口
   API related to order

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  orderDetailResponseObject
@objc(OrderDetailResponseObject)
public class OrderDetailResponseObject:NSObject,Codable{
    /// 业务线
    var appCode:String?
    /// 业务线名称
    var appName:String?
    /// 余额支付金额
    var balancePay:Double?
    /// 折扣金额
    var discountFee:Double?
    /// 退款金额
    var refundFee:Double?
    /// 代金券金额
    var favorableFee:Double?
    /// 订单总金额
    var totalFee:Double?
    /// 现金支付金额
    var moneyPay:Double?
    /// 应付金额（订单总金额-折扣金额）
    var actualFee:Double?
    /// 已支付总额
    var paidFee:Double?
    /// 活动订单类型(NORMAL-正常订单,ACTIVITY-活动订单)
    var activityType:String?
    /// 计费类型(CONFIG-按配置,FLOW-按用量MONTHLY-包年包月,ONCE-按次付费)
    var chargeMode:String?
    /// 订单创建时间（格式：yyyy-MM-dd HH:mm:ss）
    var createTime:String?
    /// 未支付订单自动取消时间（格式：yyyy-MM-dd HH:mm:ss）
    var expirationTime:String?
    /// 订单号
    var orderNumber:String?
    /// 购买订单类型(NEW-新购,RENEW-续费，RESIZE_FORMULA-配置变更)
    var orderType:String?
    /// 订单支付时间（格式：yyyy-MM-dd HH:mm:ss）
    var payTime:String?
    /// 付费类型(PRE_PAID-预付费,POST_PAID-后付费)
    var payType:String?
    /// 支付确认页地址
    var payUrl:String?
    /// 付款人
    var payer:String?
    /// 支付渠道（BALANCE_PAYMENT-余额支付,ENTERPRISE_BANK_PAYMENT-企业网银,PERSONAL_BANK_PAYMENT-个人网银,JD_PAYMENT-京东,WENXIN_PAYMENT-微信支付,OFFLINE_PAYMENT-线下汇款）
    var paymentChannel:String?
    /// 支付订单号
    var paymentNumber:String?
    /// 用户pin
    var pin:String?
    /// 订单申请人，创建人
    var proposer:String?
    /// 备注
    var remark:String?
    /// 自营类型(SELF_SUPPORT-自营,THIRD_PARTY_SUPPORT-非自营)
    var selfSupportType:String?
    /// 产品线名称
    var serviceName:String?
    /// 站点名称（MAIN_SITE-主站，INTERNATIONAL_SITE-国际站，SUQIAN_DEDICATED_CLOUD-宿迁专有云）
    var siteType:String?
    /// 订单状态（PAID-已支付,FAILED-失败,NO_PAY-未支付,DEALING-处理中,CANCELED-已取消,REFUND_PART-部分退款,REFUND_ALL-全部退款）
    var status:String?
    /// 订单更新时间
    var updatedTime:String?
    /// 子订单
    var childOrderDetailList:[OrderDetailResponseObject?]?
    /// 子资源订单
    var orderItemDetails:[OrderItemDetailResponseObject?]?



    public override init(){
            super.init()
    }

    enum OrderDetailResponseObjectCodingKeys: String, CodingKey {
        case appCode
        case appName
        case balancePay
        case discountFee
        case refundFee
        case favorableFee
        case totalFee
        case moneyPay
        case actualFee
        case paidFee
        case activityType
        case chargeMode
        case createTime
        case expirationTime
        case orderNumber
        case orderType
        case payTime
        case payType
        case payUrl
        case payer
        case paymentChannel
        case paymentNumber
        case pin
        case proposer
        case remark
        case selfSupportType
        case serviceName
        case siteType
        case status
        case updatedTime
        case childOrderDetailList
        case orderItemDetails
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OrderDetailResponseObjectCodingKeys.self)
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.appName)
        {
            self.appName = try decoderContainer.decode(String?.self, forKey: .appName)
        }
        if decoderContainer.contains(.balancePay)
        {
            self.balancePay = try decoderContainer.decode(Double?.self, forKey: .balancePay)
        }
        if decoderContainer.contains(.discountFee)
        {
            self.discountFee = try decoderContainer.decode(Double?.self, forKey: .discountFee)
        }
        if decoderContainer.contains(.refundFee)
        {
            self.refundFee = try decoderContainer.decode(Double?.self, forKey: .refundFee)
        }
        if decoderContainer.contains(.favorableFee)
        {
            self.favorableFee = try decoderContainer.decode(Double?.self, forKey: .favorableFee)
        }
        if decoderContainer.contains(.totalFee)
        {
            self.totalFee = try decoderContainer.decode(Double?.self, forKey: .totalFee)
        }
        if decoderContainer.contains(.moneyPay)
        {
            self.moneyPay = try decoderContainer.decode(Double?.self, forKey: .moneyPay)
        }
        if decoderContainer.contains(.actualFee)
        {
            self.actualFee = try decoderContainer.decode(Double?.self, forKey: .actualFee)
        }
        if decoderContainer.contains(.paidFee)
        {
            self.paidFee = try decoderContainer.decode(Double?.self, forKey: .paidFee)
        }
        if decoderContainer.contains(.activityType)
        {
            self.activityType = try decoderContainer.decode(String?.self, forKey: .activityType)
        }
        if decoderContainer.contains(.chargeMode)
        {
            self.chargeMode = try decoderContainer.decode(String?.self, forKey: .chargeMode)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.expirationTime)
        {
            self.expirationTime = try decoderContainer.decode(String?.self, forKey: .expirationTime)
        }
        if decoderContainer.contains(.orderNumber)
        {
            self.orderNumber = try decoderContainer.decode(String?.self, forKey: .orderNumber)
        }
        if decoderContainer.contains(.orderType)
        {
            self.orderType = try decoderContainer.decode(String?.self, forKey: .orderType)
        }
        if decoderContainer.contains(.payTime)
        {
            self.payTime = try decoderContainer.decode(String?.self, forKey: .payTime)
        }
        if decoderContainer.contains(.payType)
        {
            self.payType = try decoderContainer.decode(String?.self, forKey: .payType)
        }
        if decoderContainer.contains(.payUrl)
        {
            self.payUrl = try decoderContainer.decode(String?.self, forKey: .payUrl)
        }
        if decoderContainer.contains(.payer)
        {
            self.payer = try decoderContainer.decode(String?.self, forKey: .payer)
        }
        if decoderContainer.contains(.paymentChannel)
        {
            self.paymentChannel = try decoderContainer.decode(String?.self, forKey: .paymentChannel)
        }
        if decoderContainer.contains(.paymentNumber)
        {
            self.paymentNumber = try decoderContainer.decode(String?.self, forKey: .paymentNumber)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.proposer)
        {
            self.proposer = try decoderContainer.decode(String?.self, forKey: .proposer)
        }
        if decoderContainer.contains(.remark)
        {
            self.remark = try decoderContainer.decode(String?.self, forKey: .remark)
        }
        if decoderContainer.contains(.selfSupportType)
        {
            self.selfSupportType = try decoderContainer.decode(String?.self, forKey: .selfSupportType)
        }
        if decoderContainer.contains(.serviceName)
        {
            self.serviceName = try decoderContainer.decode(String?.self, forKey: .serviceName)
        }
        if decoderContainer.contains(.siteType)
        {
            self.siteType = try decoderContainer.decode(String?.self, forKey: .siteType)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.updatedTime)
        {
            self.updatedTime = try decoderContainer.decode(String?.self, forKey: .updatedTime)
        }
        if decoderContainer.contains(.childOrderDetailList)
        {
            self.childOrderDetailList = try decoderContainer.decode([OrderDetailResponseObject?]?.self, forKey: .childOrderDetailList)
        }
        if decoderContainer.contains(.orderItemDetails)
        {
            self.orderItemDetails = try decoderContainer.decode([OrderItemDetailResponseObject?]?.self, forKey: .orderItemDetails)
        }
    }
}
public extension OrderDetailResponseObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OrderDetailResponseObjectCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(appName, forKey: .appName)
         try encoderContainer.encode(balancePay, forKey: .balancePay)
         try encoderContainer.encode(discountFee, forKey: .discountFee)
         try encoderContainer.encode(refundFee, forKey: .refundFee)
         try encoderContainer.encode(favorableFee, forKey: .favorableFee)
         try encoderContainer.encode(totalFee, forKey: .totalFee)
         try encoderContainer.encode(moneyPay, forKey: .moneyPay)
         try encoderContainer.encode(actualFee, forKey: .actualFee)
         try encoderContainer.encode(paidFee, forKey: .paidFee)
         try encoderContainer.encode(activityType, forKey: .activityType)
         try encoderContainer.encode(chargeMode, forKey: .chargeMode)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(expirationTime, forKey: .expirationTime)
         try encoderContainer.encode(orderNumber, forKey: .orderNumber)
         try encoderContainer.encode(orderType, forKey: .orderType)
         try encoderContainer.encode(payTime, forKey: .payTime)
         try encoderContainer.encode(payType, forKey: .payType)
         try encoderContainer.encode(payUrl, forKey: .payUrl)
         try encoderContainer.encode(payer, forKey: .payer)
         try encoderContainer.encode(paymentChannel, forKey: .paymentChannel)
         try encoderContainer.encode(paymentNumber, forKey: .paymentNumber)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(proposer, forKey: .proposer)
         try encoderContainer.encode(remark, forKey: .remark)
         try encoderContainer.encode(selfSupportType, forKey: .selfSupportType)
         try encoderContainer.encode(serviceName, forKey: .serviceName)
         try encoderContainer.encode(siteType, forKey: .siteType)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(updatedTime, forKey: .updatedTime)
         try encoderContainer.encode(childOrderDetailList, forKey: .childOrderDetailList)
         try encoderContainer.encode(orderItemDetails, forKey: .orderItemDetails)
    }
}
