/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   相关接口
   API related to order

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  orderResponseObject
@objc(OrderResponseObject)
public class OrderResponseObject:NSObject,Codable{
    /// 订单应付金额
    var actualFee:Double?
    /// 业务线
    var appCode:String?
    /// 业务名称
    var appName:String?
    /// 计费类型(CONFIG-按配置,FLOW-按用量MONTHLY-包年包月,ONCE-按次付费)
    var chargeMode:String?
    /// 订单创建时间（格式：yyyy-MM-dd HH:mm:ss）
    var createTime:String?
    /// 折扣金额
    var discountFee:Double?
    /// 订单号
    var orderNumber:String?
    /// 购买订单类型(NEW-新购,RENEW-续费，RESIZE_FORMULA-配置变更)
    var orderType:String?
    /// 订单支付时间（格式：yyyy-MM-dd HH:mm:ss）
    var payTime:String?
    /// 付费类型(PRE_PAID-预付费,POST_PAID-后付费)
    var payType:String?
    /// 订单号
    var paymentNumber:String?
    /// 用户pin
    var pin:String?
    /// 自营类型(SELF_SUPPORT-自营,THIRD_PARTY_SUPPORT-非自营)
    var selfSupportType:String?
    /// 产品线名称
    var serviceName:String?
    /// 订单状态（PAID-已支付,FAILED-失败,NO_PAY-未支付,DEALING-处理中,CANCELED-已取消,REFUND_PART-部分退款,REFUND_ALL-全部退款）
    var status:String?
    /// 订单总金额
    var totalFee:Double?



    public override init(){
            super.init()
    }

    enum OrderResponseObjectCodingKeys: String, CodingKey {
        case actualFee
        case appCode
        case appName
        case chargeMode
        case createTime
        case discountFee
        case orderNumber
        case orderType
        case payTime
        case payType
        case paymentNumber
        case pin
        case selfSupportType
        case serviceName
        case status
        case totalFee
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OrderResponseObjectCodingKeys.self)
        if decoderContainer.contains(.actualFee)
        {
            self.actualFee = try decoderContainer.decode(Double?.self, forKey: .actualFee)
        }
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.appName)
        {
            self.appName = try decoderContainer.decode(String?.self, forKey: .appName)
        }
        if decoderContainer.contains(.chargeMode)
        {
            self.chargeMode = try decoderContainer.decode(String?.self, forKey: .chargeMode)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.discountFee)
        {
            self.discountFee = try decoderContainer.decode(Double?.self, forKey: .discountFee)
        }
        if decoderContainer.contains(.orderNumber)
        {
            self.orderNumber = try decoderContainer.decode(String?.self, forKey: .orderNumber)
        }
        if decoderContainer.contains(.orderType)
        {
            self.orderType = try decoderContainer.decode(String?.self, forKey: .orderType)
        }
        if decoderContainer.contains(.payTime)
        {
            self.payTime = try decoderContainer.decode(String?.self, forKey: .payTime)
        }
        if decoderContainer.contains(.payType)
        {
            self.payType = try decoderContainer.decode(String?.self, forKey: .payType)
        }
        if decoderContainer.contains(.paymentNumber)
        {
            self.paymentNumber = try decoderContainer.decode(String?.self, forKey: .paymentNumber)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.selfSupportType)
        {
            self.selfSupportType = try decoderContainer.decode(String?.self, forKey: .selfSupportType)
        }
        if decoderContainer.contains(.serviceName)
        {
            self.serviceName = try decoderContainer.decode(String?.self, forKey: .serviceName)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.totalFee)
        {
            self.totalFee = try decoderContainer.decode(Double?.self, forKey: .totalFee)
        }
    }
}
public extension OrderResponseObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OrderResponseObjectCodingKeys.self)
         try encoderContainer.encode(actualFee, forKey: .actualFee)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(appName, forKey: .appName)
         try encoderContainer.encode(chargeMode, forKey: .chargeMode)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(discountFee, forKey: .discountFee)
         try encoderContainer.encode(orderNumber, forKey: .orderNumber)
         try encoderContainer.encode(orderType, forKey: .orderType)
         try encoderContainer.encode(payTime, forKey: .payTime)
         try encoderContainer.encode(payType, forKey: .payType)
         try encoderContainer.encode(paymentNumber, forKey: .paymentNumber)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(selfSupportType, forKey: .selfSupportType)
         try encoderContainer.encode(serviceName, forKey: .serviceName)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(totalFee, forKey: .totalFee)
    }
}
