/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   相关接口
   API related to order

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createOrderRequestObject
@objc(CreateOrderRequestObject)
public class CreateOrderRequestObject:NSObject,Codable{
    /// 业务线
    var appCode:String?
    /// 可用区
    var az:String?
    /// 计费时长
    var chargeDuration:Int32?
    /// 计费类型(CONFIG-按配置,FLOW-按用量MONTHLY-包年包月,ONCE-按次付费)
    var chargeMode:String?
    /// 计费时长单位（HOUR-小时,DAY-天,MONTH-月,YEAR-年）
    var chargeUnit:String?
    /// 自定义参数
    var customInfo:String?
    /// 销售属性
    var extraInfo:[ExtraInfo?]?
    /// 配置计费项
    var formula:String?
    /// 资源名称
    var itemName:String?
    /// 商品类型(COMMON_ITEM-普通商品,ACTIVITY_ITEM-活动商品)
    var itemType:String?
    /// 购买订单类型(NEW-新购,RENEW-续费，RESIZE_FORMULA-配置变更)
    var orderType:String?
    /// 付费类型(PRE_PAID-预付费,POST_PAID-后付费)
    var payType:String?
    /// 用户pin
    var pin:String?
    /// 促销明细
    var promotionInfo:String?
    /// 数量
    var quantity:Int32?
    /// 资源地域
    var region:String?
    /// 资源id
    var resourceId:String?
    /// 支付成功后的回调地址(例如：//inf.jcloud.com)，如果需要自己提供回调地址则设置该字段，否则会回调到inf.jdcloud.com
    var returnUrl:String?
    /// 销售属性
    var salesAttribute:String?
    /// 产品线
    var serviceCode:String?
    /// 服务商名称
    var serviceProviderName:String?
    /// 服务商pin
    var serviceProviderPin:String?
    /// 站点名称（MAIN_SITE-主站，INTERNATIONAL_SITE-国际站，SUQIAN_DEDICATED_CLOUD-宿迁专有云）
    var siteType:String?
    /// 下单唯一标识
    var sourceId:String?
    /// 打包标识，打包在一起的产品用相同的taskId
    var taskId:String?



    public override init(){
            super.init()
    }

    enum CreateOrderRequestObjectCodingKeys: String, CodingKey {
        case appCode
        case az
        case chargeDuration
        case chargeMode
        case chargeUnit
        case customInfo
        case extraInfo
        case formula
        case itemName
        case itemType
        case orderType
        case payType
        case pin
        case promotionInfo
        case quantity
        case region
        case resourceId
        case returnUrl
        case salesAttribute
        case serviceCode
        case serviceProviderName
        case serviceProviderPin
        case siteType
        case sourceId
        case taskId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateOrderRequestObjectCodingKeys.self)
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.az)
        {
            self.az = try decoderContainer.decode(String?.self, forKey: .az)
        }
        if decoderContainer.contains(.chargeDuration)
        {
            self.chargeDuration = try decoderContainer.decode(Int32?.self, forKey: .chargeDuration)
        }
        if decoderContainer.contains(.chargeMode)
        {
            self.chargeMode = try decoderContainer.decode(String?.self, forKey: .chargeMode)
        }
        if decoderContainer.contains(.chargeUnit)
        {
            self.chargeUnit = try decoderContainer.decode(String?.self, forKey: .chargeUnit)
        }
        if decoderContainer.contains(.customInfo)
        {
            self.customInfo = try decoderContainer.decode(String?.self, forKey: .customInfo)
        }
        if decoderContainer.contains(.extraInfo)
        {
            self.extraInfo = try decoderContainer.decode([ExtraInfo?]?.self, forKey: .extraInfo)
        }
        if decoderContainer.contains(.formula)
        {
            self.formula = try decoderContainer.decode(String?.self, forKey: .formula)
        }
        if decoderContainer.contains(.itemName)
        {
            self.itemName = try decoderContainer.decode(String?.self, forKey: .itemName)
        }
        if decoderContainer.contains(.itemType)
        {
            self.itemType = try decoderContainer.decode(String?.self, forKey: .itemType)
        }
        if decoderContainer.contains(.orderType)
        {
            self.orderType = try decoderContainer.decode(String?.self, forKey: .orderType)
        }
        if decoderContainer.contains(.payType)
        {
            self.payType = try decoderContainer.decode(String?.self, forKey: .payType)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.promotionInfo)
        {
            self.promotionInfo = try decoderContainer.decode(String?.self, forKey: .promotionInfo)
        }
        if decoderContainer.contains(.quantity)
        {
            self.quantity = try decoderContainer.decode(Int32?.self, forKey: .quantity)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.returnUrl)
        {
            self.returnUrl = try decoderContainer.decode(String?.self, forKey: .returnUrl)
        }
        if decoderContainer.contains(.salesAttribute)
        {
            self.salesAttribute = try decoderContainer.decode(String?.self, forKey: .salesAttribute)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.serviceProviderName)
        {
            self.serviceProviderName = try decoderContainer.decode(String?.self, forKey: .serviceProviderName)
        }
        if decoderContainer.contains(.serviceProviderPin)
        {
            self.serviceProviderPin = try decoderContainer.decode(String?.self, forKey: .serviceProviderPin)
        }
        if decoderContainer.contains(.siteType)
        {
            self.siteType = try decoderContainer.decode(String?.self, forKey: .siteType)
        }
        if decoderContainer.contains(.sourceId)
        {
            self.sourceId = try decoderContainer.decode(String?.self, forKey: .sourceId)
        }
        if decoderContainer.contains(.taskId)
        {
            self.taskId = try decoderContainer.decode(String?.self, forKey: .taskId)
        }
    }
}
public extension CreateOrderRequestObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateOrderRequestObjectCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(chargeDuration, forKey: .chargeDuration)
         try encoderContainer.encode(chargeMode, forKey: .chargeMode)
         try encoderContainer.encode(chargeUnit, forKey: .chargeUnit)
         try encoderContainer.encode(customInfo, forKey: .customInfo)
         try encoderContainer.encode(extraInfo, forKey: .extraInfo)
         try encoderContainer.encode(formula, forKey: .formula)
         try encoderContainer.encode(itemName, forKey: .itemName)
         try encoderContainer.encode(itemType, forKey: .itemType)
         try encoderContainer.encode(orderType, forKey: .orderType)
         try encoderContainer.encode(payType, forKey: .payType)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(promotionInfo, forKey: .promotionInfo)
         try encoderContainer.encode(quantity, forKey: .quantity)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(returnUrl, forKey: .returnUrl)
         try encoderContainer.encode(salesAttribute, forKey: .salesAttribute)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(serviceProviderName, forKey: .serviceProviderName)
         try encoderContainer.encode(serviceProviderPin, forKey: .serviceProviderPin)
         try encoderContainer.encode(siteType, forKey: .siteType)
         try encoderContainer.encode(sourceId, forKey: .sourceId)
         try encoderContainer.encode(taskId, forKey: .taskId)
    }
}
