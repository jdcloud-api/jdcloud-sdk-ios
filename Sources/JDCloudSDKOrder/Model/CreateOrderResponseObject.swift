/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   相关接口
   API related to order

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createOrderResponseObject
@objc(CreateOrderResponseObject)
public class CreateOrderResponseObject:NSObject,Codable{
    /// 消息
    var message:String?
    /// 订单号
    var orderNumber:String?
    /// 应付金额（订单总金额-折扣金额）
    var actualFee:Double?
    /// 是否成功
    var success:Bool?
    /// 资源简单列表
    var orderResourceInfoList:[OrderResourceInfo?]?



    public override init(){
            super.init()
    }

    enum CreateOrderResponseObjectCodingKeys: String, CodingKey {
        case message
        case orderNumber
        case actualFee
        case success
        case orderResourceInfoList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateOrderResponseObjectCodingKeys.self)
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.orderNumber)
        {
            self.orderNumber = try decoderContainer.decode(String?.self, forKey: .orderNumber)
        }
        if decoderContainer.contains(.actualFee)
        {
            self.actualFee = try decoderContainer.decode(Double?.self, forKey: .actualFee)
        }
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
        if decoderContainer.contains(.orderResourceInfoList)
        {
            self.orderResourceInfoList = try decoderContainer.decode([OrderResourceInfo?]?.self, forKey: .orderResourceInfoList)
        }
    }
}
public extension CreateOrderResponseObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateOrderResponseObjectCodingKeys.self)
         try encoderContainer.encode(message, forKey: .message)
         try encoderContainer.encode(orderNumber, forKey: .orderNumber)
         try encoderContainer.encode(actualFee, forKey: .actualFee)
         try encoderContainer.encode(success, forKey: .success)
         try encoderContainer.encode(orderResourceInfoList, forKey: .orderResourceInfoList)
    }
}
