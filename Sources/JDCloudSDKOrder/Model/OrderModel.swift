/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   相关接口
   API related to order

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
///  extraInfo
public class ExtraInfo:NSObject,Codable{
    /// 名称
    var name:String?
    /// 值
    var value:String?



    public override init(){
            super.init()
    }

    enum ExtraInfoCodingKeys: String, CodingKey {
        case name
        case value
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExtraInfoCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.value)
        {
            self.value = try decoderContainer.decode(String?.self, forKey: .value)
        }
    }
}
public extension ExtraInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExtraInfoCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(value, forKey: .value)
    }
}
///  listOrderRequest
public class ListOrderRequest:NSObject,Codable{
    /// 业务线
    var appCode:String?
    /// 计费类型(CONFIG-按配置,FLOW-按用量MONTHLY-包年包月,ONCE-按次付费)
    var chargeMode:String?
    /// 查询订单开始时间戳
    var startTime:Int64?
    /// 查询订单结束时间戳
    var endTime:Int64?
    /// 购买订单类型(NEW-新购,RENEW-续费,RESIZE_FORMULA-配置变更,TEMP_UPGRADE-临时升配)
    var orderType:String?
    /// 分页：订单第几页
    var pageNumber:Int32?
    /// 分页：订单条数
    var pageSize:Int32?
    /// 付费类型(PRE_PAID-预付费,POST_PAID-后付费)
    var payType:String?
    /// 产品线
    var serviceCode:String?
    /// 订单状态（PAID-已支付,CANCELED-已取消,NO_PAY-未支付,FAILED-失败,DEALING-处理中,REFUND_PART-部分退款,REFUND_ALL-全部退款）
    var status:String?



    public override init(){
            super.init()
    }

    enum ListOrderRequestCodingKeys: String, CodingKey {
        case appCode
        case chargeMode
        case startTime
        case endTime
        case orderType
        case pageNumber
        case pageSize
        case payType
        case serviceCode
        case status
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListOrderRequestCodingKeys.self)
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.chargeMode)
        {
            self.chargeMode = try decoderContainer.decode(String?.self, forKey: .chargeMode)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(Int64?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(Int64?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.orderType)
        {
            self.orderType = try decoderContainer.decode(String?.self, forKey: .orderType)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int32?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int32?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.payType)
        {
            self.payType = try decoderContainer.decode(String?.self, forKey: .payType)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
    }
}
public extension ListOrderRequest{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListOrderRequestCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(chargeMode, forKey: .chargeMode)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
         try encoderContainer.encode(orderType, forKey: .orderType)
         try encoderContainer.encode(pageNumber, forKey: .pageNumber)
         try encoderContainer.encode(pageSize, forKey: .pageSize)
         try encoderContainer.encode(payType, forKey: .payType)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(status, forKey: .status)
    }
}
///  orderResponseObject
public class OrderResponseObject:NSObject,Codable{
    /// 订单应付金额
    var actualFee:Double?
    /// 业务线
    var appCode:String?
    /// 业务名称
    var appName:String?
    /// 计费类型(CONFIG-按配置,FLOW-按用量MONTHLY-包年包月,ONCE-按次付费)
    var chargeMode:String?
    /// 订单创建时间（格式：yyyy-MM-dd HH:mm:ss）
    var createTime:String?
    /// 折扣金额
    var discountFee:Double?
    /// 订单号
    var orderNumber:String?
    /// 购买订单类型(NEW-新购,RENEW-续费，RESIZE_FORMULA-配置变更)
    var orderType:String?
    /// 订单支付时间（格式：yyyy-MM-dd HH:mm:ss）
    var payTime:String?
    /// 付费类型(PRE_PAID-预付费,POST_PAID-后付费)
    var payType:String?
    /// 订单号
    var paymentNumber:String?
    /// 用户pin
    var pin:String?
    /// 自营类型(SELF_SUPPORT-自营,THIRD_PARTY_SUPPORT-非自营)
    var selfSupportType:String?
    /// 产品线名称
    var serviceName:String?
    /// 订单状态（PAID-已支付,FAILED-失败,NO_PAY-未支付,DEALING-处理中,CANCELED-已取消,REFUND_PART-部分退款,REFUND_ALL-全部退款）
    var status:String?
    /// 订单总金额
    var totalFee:Double?



    public override init(){
            super.init()
    }

    enum OrderResponseObjectCodingKeys: String, CodingKey {
        case actualFee
        case appCode
        case appName
        case chargeMode
        case createTime
        case discountFee
        case orderNumber
        case orderType
        case payTime
        case payType
        case paymentNumber
        case pin
        case selfSupportType
        case serviceName
        case status
        case totalFee
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OrderResponseObjectCodingKeys.self)
        if decoderContainer.contains(.actualFee)
        {
            self.actualFee = try decoderContainer.decode(Double?.self, forKey: .actualFee)
        }
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.appName)
        {
            self.appName = try decoderContainer.decode(String?.self, forKey: .appName)
        }
        if decoderContainer.contains(.chargeMode)
        {
            self.chargeMode = try decoderContainer.decode(String?.self, forKey: .chargeMode)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.discountFee)
        {
            self.discountFee = try decoderContainer.decode(Double?.self, forKey: .discountFee)
        }
        if decoderContainer.contains(.orderNumber)
        {
            self.orderNumber = try decoderContainer.decode(String?.self, forKey: .orderNumber)
        }
        if decoderContainer.contains(.orderType)
        {
            self.orderType = try decoderContainer.decode(String?.self, forKey: .orderType)
        }
        if decoderContainer.contains(.payTime)
        {
            self.payTime = try decoderContainer.decode(String?.self, forKey: .payTime)
        }
        if decoderContainer.contains(.payType)
        {
            self.payType = try decoderContainer.decode(String?.self, forKey: .payType)
        }
        if decoderContainer.contains(.paymentNumber)
        {
            self.paymentNumber = try decoderContainer.decode(String?.self, forKey: .paymentNumber)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.selfSupportType)
        {
            self.selfSupportType = try decoderContainer.decode(String?.self, forKey: .selfSupportType)
        }
        if decoderContainer.contains(.serviceName)
        {
            self.serviceName = try decoderContainer.decode(String?.self, forKey: .serviceName)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.totalFee)
        {
            self.totalFee = try decoderContainer.decode(Double?.self, forKey: .totalFee)
        }
    }
}
public extension OrderResponseObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OrderResponseObjectCodingKeys.self)
         try encoderContainer.encode(actualFee, forKey: .actualFee)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(appName, forKey: .appName)
         try encoderContainer.encode(chargeMode, forKey: .chargeMode)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(discountFee, forKey: .discountFee)
         try encoderContainer.encode(orderNumber, forKey: .orderNumber)
         try encoderContainer.encode(orderType, forKey: .orderType)
         try encoderContainer.encode(payTime, forKey: .payTime)
         try encoderContainer.encode(payType, forKey: .payType)
         try encoderContainer.encode(paymentNumber, forKey: .paymentNumber)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(selfSupportType, forKey: .selfSupportType)
         try encoderContainer.encode(serviceName, forKey: .serviceName)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(totalFee, forKey: .totalFee)
    }
}
///  orderDetailResponseObject
public class OrderDetailResponseObject:NSObject,Codable{
    /// 业务线
    var appCode:String?
    /// 业务线名称
    var appName:String?
    /// 余额支付金额
    var balancePay:Double?
    /// 折扣金额
    var discountFee:Double?
    /// 退款金额
    var refundFee:Double?
    /// 代金券金额
    var favorableFee:Double?
    /// 订单总金额
    var totalFee:Double?
    /// 现金支付金额
    var moneyPay:Double?
    /// 应付金额（订单总金额-折扣金额）
    var actualFee:Double?
    /// 已支付总额
    var paidFee:Double?
    /// 活动订单类型(NORMAL-正常订单,ACTIVITY-活动订单)
    var activityType:String?
    /// 计费类型(CONFIG-按配置,FLOW-按用量MONTHLY-包年包月,ONCE-按次付费)
    var chargeMode:String?
    /// 订单创建时间（格式：yyyy-MM-dd HH:mm:ss）
    var createTime:String?
    /// 未支付订单自动取消时间（格式：yyyy-MM-dd HH:mm:ss）
    var expirationTime:String?
    /// 订单号
    var orderNumber:String?
    /// 购买订单类型(NEW-新购,RENEW-续费，RESIZE_FORMULA-配置变更)
    var orderType:String?
    /// 订单支付时间（格式：yyyy-MM-dd HH:mm:ss）
    var payTime:String?
    /// 付费类型(PRE_PAID-预付费,POST_PAID-后付费)
    var payType:String?
    /// 支付确认页地址
    var payUrl:String?
    /// 付款人
    var payer:String?
    /// 支付渠道（BALANCE_PAYMENT-余额支付,ENTERPRISE_BANK_PAYMENT-企业网银,PERSONAL_BANK_PAYMENT-个人网银,JD_PAYMENT-京东,WENXIN_PAYMENT-微信支付,OFFLINE_PAYMENT-线下汇款）
    var paymentChannel:String?
    /// 支付订单号
    var paymentNumber:String?
    /// 用户pin
    var pin:String?
    /// 订单申请人，创建人
    var proposer:String?
    /// 备注
    var remark:String?
    /// 自营类型(SELF_SUPPORT-自营,THIRD_PARTY_SUPPORT-非自营)
    var selfSupportType:String?
    /// 产品线名称
    var serviceName:String?
    /// 站点名称（MAIN_SITE-主站，INTERNATIONAL_SITE-国际站，SUQIAN_DEDICATED_CLOUD-宿迁专有云）
    var siteType:String?
    /// 订单状态（PAID-已支付,FAILED-失败,NO_PAY-未支付,DEALING-处理中,CANCELED-已取消,REFUND_PART-部分退款,REFUND_ALL-全部退款）
    var status:String?
    /// 订单更新时间
    var updatedTime:String?
    /// 子订单
    var childOrderDetailList:[OrderDetailResponseObject?]?
    /// 子资源订单
    var orderItemDetails:[OrderItemDetailResponseObject?]?



    public override init(){
            super.init()
    }

    enum OrderDetailResponseObjectCodingKeys: String, CodingKey {
        case appCode
        case appName
        case balancePay
        case discountFee
        case refundFee
        case favorableFee
        case totalFee
        case moneyPay
        case actualFee
        case paidFee
        case activityType
        case chargeMode
        case createTime
        case expirationTime
        case orderNumber
        case orderType
        case payTime
        case payType
        case payUrl
        case payer
        case paymentChannel
        case paymentNumber
        case pin
        case proposer
        case remark
        case selfSupportType
        case serviceName
        case siteType
        case status
        case updatedTime
        case childOrderDetailList
        case orderItemDetails
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OrderDetailResponseObjectCodingKeys.self)
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.appName)
        {
            self.appName = try decoderContainer.decode(String?.self, forKey: .appName)
        }
        if decoderContainer.contains(.balancePay)
        {
            self.balancePay = try decoderContainer.decode(Double?.self, forKey: .balancePay)
        }
        if decoderContainer.contains(.discountFee)
        {
            self.discountFee = try decoderContainer.decode(Double?.self, forKey: .discountFee)
        }
        if decoderContainer.contains(.refundFee)
        {
            self.refundFee = try decoderContainer.decode(Double?.self, forKey: .refundFee)
        }
        if decoderContainer.contains(.favorableFee)
        {
            self.favorableFee = try decoderContainer.decode(Double?.self, forKey: .favorableFee)
        }
        if decoderContainer.contains(.totalFee)
        {
            self.totalFee = try decoderContainer.decode(Double?.self, forKey: .totalFee)
        }
        if decoderContainer.contains(.moneyPay)
        {
            self.moneyPay = try decoderContainer.decode(Double?.self, forKey: .moneyPay)
        }
        if decoderContainer.contains(.actualFee)
        {
            self.actualFee = try decoderContainer.decode(Double?.self, forKey: .actualFee)
        }
        if decoderContainer.contains(.paidFee)
        {
            self.paidFee = try decoderContainer.decode(Double?.self, forKey: .paidFee)
        }
        if decoderContainer.contains(.activityType)
        {
            self.activityType = try decoderContainer.decode(String?.self, forKey: .activityType)
        }
        if decoderContainer.contains(.chargeMode)
        {
            self.chargeMode = try decoderContainer.decode(String?.self, forKey: .chargeMode)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.expirationTime)
        {
            self.expirationTime = try decoderContainer.decode(String?.self, forKey: .expirationTime)
        }
        if decoderContainer.contains(.orderNumber)
        {
            self.orderNumber = try decoderContainer.decode(String?.self, forKey: .orderNumber)
        }
        if decoderContainer.contains(.orderType)
        {
            self.orderType = try decoderContainer.decode(String?.self, forKey: .orderType)
        }
        if decoderContainer.contains(.payTime)
        {
            self.payTime = try decoderContainer.decode(String?.self, forKey: .payTime)
        }
        if decoderContainer.contains(.payType)
        {
            self.payType = try decoderContainer.decode(String?.self, forKey: .payType)
        }
        if decoderContainer.contains(.payUrl)
        {
            self.payUrl = try decoderContainer.decode(String?.self, forKey: .payUrl)
        }
        if decoderContainer.contains(.payer)
        {
            self.payer = try decoderContainer.decode(String?.self, forKey: .payer)
        }
        if decoderContainer.contains(.paymentChannel)
        {
            self.paymentChannel = try decoderContainer.decode(String?.self, forKey: .paymentChannel)
        }
        if decoderContainer.contains(.paymentNumber)
        {
            self.paymentNumber = try decoderContainer.decode(String?.self, forKey: .paymentNumber)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.proposer)
        {
            self.proposer = try decoderContainer.decode(String?.self, forKey: .proposer)
        }
        if decoderContainer.contains(.remark)
        {
            self.remark = try decoderContainer.decode(String?.self, forKey: .remark)
        }
        if decoderContainer.contains(.selfSupportType)
        {
            self.selfSupportType = try decoderContainer.decode(String?.self, forKey: .selfSupportType)
        }
        if decoderContainer.contains(.serviceName)
        {
            self.serviceName = try decoderContainer.decode(String?.self, forKey: .serviceName)
        }
        if decoderContainer.contains(.siteType)
        {
            self.siteType = try decoderContainer.decode(String?.self, forKey: .siteType)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.updatedTime)
        {
            self.updatedTime = try decoderContainer.decode(String?.self, forKey: .updatedTime)
        }
        if decoderContainer.contains(.childOrderDetailList)
        {
            self.childOrderDetailList = try decoderContainer.decode([OrderDetailResponseObject?]?.self, forKey: .childOrderDetailList)
        }
        if decoderContainer.contains(.orderItemDetails)
        {
            self.orderItemDetails = try decoderContainer.decode([OrderItemDetailResponseObject?]?.self, forKey: .orderItemDetails)
        }
    }
}
public extension OrderDetailResponseObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OrderDetailResponseObjectCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(appName, forKey: .appName)
         try encoderContainer.encode(balancePay, forKey: .balancePay)
         try encoderContainer.encode(discountFee, forKey: .discountFee)
         try encoderContainer.encode(refundFee, forKey: .refundFee)
         try encoderContainer.encode(favorableFee, forKey: .favorableFee)
         try encoderContainer.encode(totalFee, forKey: .totalFee)
         try encoderContainer.encode(moneyPay, forKey: .moneyPay)
         try encoderContainer.encode(actualFee, forKey: .actualFee)
         try encoderContainer.encode(paidFee, forKey: .paidFee)
         try encoderContainer.encode(activityType, forKey: .activityType)
         try encoderContainer.encode(chargeMode, forKey: .chargeMode)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(expirationTime, forKey: .expirationTime)
         try encoderContainer.encode(orderNumber, forKey: .orderNumber)
         try encoderContainer.encode(orderType, forKey: .orderType)
         try encoderContainer.encode(payTime, forKey: .payTime)
         try encoderContainer.encode(payType, forKey: .payType)
         try encoderContainer.encode(payUrl, forKey: .payUrl)
         try encoderContainer.encode(payer, forKey: .payer)
         try encoderContainer.encode(paymentChannel, forKey: .paymentChannel)
         try encoderContainer.encode(paymentNumber, forKey: .paymentNumber)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(proposer, forKey: .proposer)
         try encoderContainer.encode(remark, forKey: .remark)
         try encoderContainer.encode(selfSupportType, forKey: .selfSupportType)
         try encoderContainer.encode(serviceName, forKey: .serviceName)
         try encoderContainer.encode(siteType, forKey: .siteType)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(updatedTime, forKey: .updatedTime)
         try encoderContainer.encode(childOrderDetailList, forKey: .childOrderDetailList)
         try encoderContainer.encode(orderItemDetails, forKey: .orderItemDetails)
    }
}
///  orderResourceInfo
public class OrderResourceInfo:NSObject,Codable{
    /// 订单号
    var orderNumber:String?
    /// 用户pin
    var pin:String?
    /// 资源id,下单没有传替，则预生成一个
    var resourceId:String?
    /// 创建资源唯一标识
    var sourceId:String?



    public override init(){
            super.init()
    }

    enum OrderResourceInfoCodingKeys: String, CodingKey {
        case orderNumber
        case pin
        case resourceId
        case sourceId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OrderResourceInfoCodingKeys.self)
        if decoderContainer.contains(.orderNumber)
        {
            self.orderNumber = try decoderContainer.decode(String?.self, forKey: .orderNumber)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.sourceId)
        {
            self.sourceId = try decoderContainer.decode(String?.self, forKey: .sourceId)
        }
    }
}
public extension OrderResourceInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OrderResourceInfoCodingKeys.self)
         try encoderContainer.encode(orderNumber, forKey: .orderNumber)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(sourceId, forKey: .sourceId)
    }
}
///  orderItemDetailResponseObject
public class OrderItemDetailResponseObject:NSObject,Codable{
    /// 订单总金额
    var totalFee:Double?
    /// 应付金额（订单总金额-折扣金额）
    var actualFee:Double?
    /// 余额支付金额
    var balancePay:Double?
    /// 计费时长
    var chargeDuration:Int32?
    /// 现金支付金额
    var moneyPay:Double?
    /// 退款金额
    var refundFee:Double?
    /// 计费类型(CONFIG-按配置,FLOW-按用量MONTHLY-包年包月,ONCE-按次付费)
    var chargeMode:String?
    /// 订单创建时间（格式：yyyy-MM-dd HH:mm:ss）
    var createTime:String?
    /// 续费后资源到期时间（格式：yyyy-MM-dd HH:mm:ss）
    var expireDateAfter:String?
    /// 续费前资源到期时间（格式：yyyy-MM-dd HH:mm:ss）
    var expireDateBefore:String?
    /// 销售属性
    var extraInfo:[ExtraInfo?]?
    /// 续费后资源到期-销售属性
    var extraInfoAfter:[ExtraInfo?]?
    /// 续费前资源到期-销售属性
    var extraInfoBefore:[ExtraInfo?]?
    /// 代金券金额
    var favorableFee:Double?
    /// 配置计费项
    var formula:String?
    /// 资源id
    var itemId:String?
    /// 资源名称
    var itemName:String?
    /// 订单号
    var orderNumber:String?
    /// 价格快照
    var priceSnapshot:String?
    /// 数量
    var quantity:Int32?
    /// 备注
    var remark:String?
    /// 变配明细(UP-升配补差价，DOWN-降配延时,MODIFY_CONFIG-调整配置，RENEW-续费，RENEW_UP-续费升配，RENEW_DOWN-续费降配，MONTHLY-配置转包年包月，RENEW_FREE-补偿续费)
    var resizeFormulaType:String?
    /// 产品名称
    var serviceName:String?
    /// 站点名称（MAIN_SITE-主站，INTERNATIONAL_SITE-国际站，SUQIAN_DEDICATED_CLOUD-宿迁专有云）
    var siteType:String?
    /// 资源状态（CREATING-创建中,SUCCESS-成功,FAIL-失败）
    var status:String?
    /// 计费时长单位（HOUR-小时,DAY-天,MONTH-月,YEAR-年）
    var unit:String?
    /// 子订单
    var orderItemDetailResponse:[OrderItemDetailResponseObject?]?



    public override init(){
            super.init()
    }

    enum OrderItemDetailResponseObjectCodingKeys: String, CodingKey {
        case totalFee
        case actualFee
        case balancePay
        case chargeDuration
        case moneyPay
        case refundFee
        case chargeMode
        case createTime
        case expireDateAfter
        case expireDateBefore
        case extraInfo
        case extraInfoAfter
        case extraInfoBefore
        case favorableFee
        case formula
        case itemId
        case itemName
        case orderNumber
        case priceSnapshot
        case quantity
        case remark
        case resizeFormulaType
        case serviceName
        case siteType
        case status
        case unit
        case orderItemDetailResponse
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OrderItemDetailResponseObjectCodingKeys.self)
        if decoderContainer.contains(.totalFee)
        {
            self.totalFee = try decoderContainer.decode(Double?.self, forKey: .totalFee)
        }
        if decoderContainer.contains(.actualFee)
        {
            self.actualFee = try decoderContainer.decode(Double?.self, forKey: .actualFee)
        }
        if decoderContainer.contains(.balancePay)
        {
            self.balancePay = try decoderContainer.decode(Double?.self, forKey: .balancePay)
        }
        if decoderContainer.contains(.chargeDuration)
        {
            self.chargeDuration = try decoderContainer.decode(Int32?.self, forKey: .chargeDuration)
        }
        if decoderContainer.contains(.moneyPay)
        {
            self.moneyPay = try decoderContainer.decode(Double?.self, forKey: .moneyPay)
        }
        if decoderContainer.contains(.refundFee)
        {
            self.refundFee = try decoderContainer.decode(Double?.self, forKey: .refundFee)
        }
        if decoderContainer.contains(.chargeMode)
        {
            self.chargeMode = try decoderContainer.decode(String?.self, forKey: .chargeMode)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.expireDateAfter)
        {
            self.expireDateAfter = try decoderContainer.decode(String?.self, forKey: .expireDateAfter)
        }
        if decoderContainer.contains(.expireDateBefore)
        {
            self.expireDateBefore = try decoderContainer.decode(String?.self, forKey: .expireDateBefore)
        }
        if decoderContainer.contains(.extraInfo)
        {
            self.extraInfo = try decoderContainer.decode([ExtraInfo?]?.self, forKey: .extraInfo)
        }
        if decoderContainer.contains(.extraInfoAfter)
        {
            self.extraInfoAfter = try decoderContainer.decode([ExtraInfo?]?.self, forKey: .extraInfoAfter)
        }
        if decoderContainer.contains(.extraInfoBefore)
        {
            self.extraInfoBefore = try decoderContainer.decode([ExtraInfo?]?.self, forKey: .extraInfoBefore)
        }
        if decoderContainer.contains(.favorableFee)
        {
            self.favorableFee = try decoderContainer.decode(Double?.self, forKey: .favorableFee)
        }
        if decoderContainer.contains(.formula)
        {
            self.formula = try decoderContainer.decode(String?.self, forKey: .formula)
        }
        if decoderContainer.contains(.itemId)
        {
            self.itemId = try decoderContainer.decode(String?.self, forKey: .itemId)
        }
        if decoderContainer.contains(.itemName)
        {
            self.itemName = try decoderContainer.decode(String?.self, forKey: .itemName)
        }
        if decoderContainer.contains(.orderNumber)
        {
            self.orderNumber = try decoderContainer.decode(String?.self, forKey: .orderNumber)
        }
        if decoderContainer.contains(.priceSnapshot)
        {
            self.priceSnapshot = try decoderContainer.decode(String?.self, forKey: .priceSnapshot)
        }
        if decoderContainer.contains(.quantity)
        {
            self.quantity = try decoderContainer.decode(Int32?.self, forKey: .quantity)
        }
        if decoderContainer.contains(.remark)
        {
            self.remark = try decoderContainer.decode(String?.self, forKey: .remark)
        }
        if decoderContainer.contains(.resizeFormulaType)
        {
            self.resizeFormulaType = try decoderContainer.decode(String?.self, forKey: .resizeFormulaType)
        }
        if decoderContainer.contains(.serviceName)
        {
            self.serviceName = try decoderContainer.decode(String?.self, forKey: .serviceName)
        }
        if decoderContainer.contains(.siteType)
        {
            self.siteType = try decoderContainer.decode(String?.self, forKey: .siteType)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
        if decoderContainer.contains(.orderItemDetailResponse)
        {
            self.orderItemDetailResponse = try decoderContainer.decode([OrderItemDetailResponseObject?]?.self, forKey: .orderItemDetailResponse)
        }
    }
}
public extension OrderItemDetailResponseObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OrderItemDetailResponseObjectCodingKeys.self)
         try encoderContainer.encode(totalFee, forKey: .totalFee)
         try encoderContainer.encode(actualFee, forKey: .actualFee)
         try encoderContainer.encode(balancePay, forKey: .balancePay)
         try encoderContainer.encode(chargeDuration, forKey: .chargeDuration)
         try encoderContainer.encode(moneyPay, forKey: .moneyPay)
         try encoderContainer.encode(refundFee, forKey: .refundFee)
         try encoderContainer.encode(chargeMode, forKey: .chargeMode)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(expireDateAfter, forKey: .expireDateAfter)
         try encoderContainer.encode(expireDateBefore, forKey: .expireDateBefore)
         try encoderContainer.encode(extraInfo, forKey: .extraInfo)
         try encoderContainer.encode(extraInfoAfter, forKey: .extraInfoAfter)
         try encoderContainer.encode(extraInfoBefore, forKey: .extraInfoBefore)
         try encoderContainer.encode(favorableFee, forKey: .favorableFee)
         try encoderContainer.encode(formula, forKey: .formula)
         try encoderContainer.encode(itemId, forKey: .itemId)
         try encoderContainer.encode(itemName, forKey: .itemName)
         try encoderContainer.encode(orderNumber, forKey: .orderNumber)
         try encoderContainer.encode(priceSnapshot, forKey: .priceSnapshot)
         try encoderContainer.encode(quantity, forKey: .quantity)
         try encoderContainer.encode(remark, forKey: .remark)
         try encoderContainer.encode(resizeFormulaType, forKey: .resizeFormulaType)
         try encoderContainer.encode(serviceName, forKey: .serviceName)
         try encoderContainer.encode(siteType, forKey: .siteType)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(unit, forKey: .unit)
         try encoderContainer.encode(orderItemDetailResponse, forKey: .orderItemDetailResponse)
    }
}
///  createOrderRequestObject
public class CreateOrderRequestObject:NSObject,Codable{
    /// 业务线
    var appCode:String?
    /// 可用区
    var az:String?
    /// 计费时长
    var chargeDuration:Int32?
    /// 计费类型(CONFIG-按配置,FLOW-按用量MONTHLY-包年包月,ONCE-按次付费)
    var chargeMode:String?
    /// 计费时长单位（HOUR-小时,DAY-天,MONTH-月,YEAR-年）
    var chargeUnit:String?
    /// 自定义参数
    var customInfo:String?
    /// 销售属性
    var extraInfo:[ExtraInfo?]?
    /// 配置计费项
    var formula:String?
    /// 资源名称
    var itemName:String?
    /// 商品类型(COMMON_ITEM-普通商品,ACTIVITY_ITEM-活动商品)
    var itemType:String?
    /// 购买订单类型(NEW-新购,RENEW-续费，RESIZE_FORMULA-配置变更)
    var orderType:String?
    /// 付费类型(PRE_PAID-预付费,POST_PAID-后付费)
    var payType:String?
    /// 用户pin
    var pin:String?
    /// 促销明细
    var promotionInfo:String?
    /// 数量
    var quantity:Int32?
    /// 资源地域
    var region:String?
    /// 资源id
    var resourceId:String?
    /// 支付成功后的回调地址(例如：//inf.jcloud.com)，如果需要自己提供回调地址则设置该字段，否则会回调到inf.jdcloud.com
    var returnUrl:String?
    /// 销售属性
    var salesAttribute:String?
    /// 产品线
    var serviceCode:String?
    /// 服务商名称
    var serviceProviderName:String?
    /// 服务商pin
    var serviceProviderPin:String?
    /// 站点名称（MAIN_SITE-主站，INTERNATIONAL_SITE-国际站，SUQIAN_DEDICATED_CLOUD-宿迁专有云）
    var siteType:String?
    /// 下单唯一标识
    var sourceId:String?
    /// 打包标识，打包在一起的产品用相同的taskId
    var taskId:String?



    public override init(){
            super.init()
    }

    enum CreateOrderRequestObjectCodingKeys: String, CodingKey {
        case appCode
        case az
        case chargeDuration
        case chargeMode
        case chargeUnit
        case customInfo
        case extraInfo
        case formula
        case itemName
        case itemType
        case orderType
        case payType
        case pin
        case promotionInfo
        case quantity
        case region
        case resourceId
        case returnUrl
        case salesAttribute
        case serviceCode
        case serviceProviderName
        case serviceProviderPin
        case siteType
        case sourceId
        case taskId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateOrderRequestObjectCodingKeys.self)
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.az)
        {
            self.az = try decoderContainer.decode(String?.self, forKey: .az)
        }
        if decoderContainer.contains(.chargeDuration)
        {
            self.chargeDuration = try decoderContainer.decode(Int32?.self, forKey: .chargeDuration)
        }
        if decoderContainer.contains(.chargeMode)
        {
            self.chargeMode = try decoderContainer.decode(String?.self, forKey: .chargeMode)
        }
        if decoderContainer.contains(.chargeUnit)
        {
            self.chargeUnit = try decoderContainer.decode(String?.self, forKey: .chargeUnit)
        }
        if decoderContainer.contains(.customInfo)
        {
            self.customInfo = try decoderContainer.decode(String?.self, forKey: .customInfo)
        }
        if decoderContainer.contains(.extraInfo)
        {
            self.extraInfo = try decoderContainer.decode([ExtraInfo?]?.self, forKey: .extraInfo)
        }
        if decoderContainer.contains(.formula)
        {
            self.formula = try decoderContainer.decode(String?.self, forKey: .formula)
        }
        if decoderContainer.contains(.itemName)
        {
            self.itemName = try decoderContainer.decode(String?.self, forKey: .itemName)
        }
        if decoderContainer.contains(.itemType)
        {
            self.itemType = try decoderContainer.decode(String?.self, forKey: .itemType)
        }
        if decoderContainer.contains(.orderType)
        {
            self.orderType = try decoderContainer.decode(String?.self, forKey: .orderType)
        }
        if decoderContainer.contains(.payType)
        {
            self.payType = try decoderContainer.decode(String?.self, forKey: .payType)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.promotionInfo)
        {
            self.promotionInfo = try decoderContainer.decode(String?.self, forKey: .promotionInfo)
        }
        if decoderContainer.contains(.quantity)
        {
            self.quantity = try decoderContainer.decode(Int32?.self, forKey: .quantity)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.returnUrl)
        {
            self.returnUrl = try decoderContainer.decode(String?.self, forKey: .returnUrl)
        }
        if decoderContainer.contains(.salesAttribute)
        {
            self.salesAttribute = try decoderContainer.decode(String?.self, forKey: .salesAttribute)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.serviceProviderName)
        {
            self.serviceProviderName = try decoderContainer.decode(String?.self, forKey: .serviceProviderName)
        }
        if decoderContainer.contains(.serviceProviderPin)
        {
            self.serviceProviderPin = try decoderContainer.decode(String?.self, forKey: .serviceProviderPin)
        }
        if decoderContainer.contains(.siteType)
        {
            self.siteType = try decoderContainer.decode(String?.self, forKey: .siteType)
        }
        if decoderContainer.contains(.sourceId)
        {
            self.sourceId = try decoderContainer.decode(String?.self, forKey: .sourceId)
        }
        if decoderContainer.contains(.taskId)
        {
            self.taskId = try decoderContainer.decode(String?.self, forKey: .taskId)
        }
    }
}
public extension CreateOrderRequestObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateOrderRequestObjectCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(chargeDuration, forKey: .chargeDuration)
         try encoderContainer.encode(chargeMode, forKey: .chargeMode)
         try encoderContainer.encode(chargeUnit, forKey: .chargeUnit)
         try encoderContainer.encode(customInfo, forKey: .customInfo)
         try encoderContainer.encode(extraInfo, forKey: .extraInfo)
         try encoderContainer.encode(formula, forKey: .formula)
         try encoderContainer.encode(itemName, forKey: .itemName)
         try encoderContainer.encode(itemType, forKey: .itemType)
         try encoderContainer.encode(orderType, forKey: .orderType)
         try encoderContainer.encode(payType, forKey: .payType)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(promotionInfo, forKey: .promotionInfo)
         try encoderContainer.encode(quantity, forKey: .quantity)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(returnUrl, forKey: .returnUrl)
         try encoderContainer.encode(salesAttribute, forKey: .salesAttribute)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(serviceProviderName, forKey: .serviceProviderName)
         try encoderContainer.encode(serviceProviderPin, forKey: .serviceProviderPin)
         try encoderContainer.encode(siteType, forKey: .siteType)
         try encoderContainer.encode(sourceId, forKey: .sourceId)
         try encoderContainer.encode(taskId, forKey: .taskId)
    }
}
///  createOrderRequestList
public class CreateOrderRequestList:NSObject,Codable{
    /// CreateOrderRequests
    var createOrderRequests:[CreateOrderRequestObject?]?



    public override init(){
            super.init()
    }

    enum CreateOrderRequestListCodingKeys: String, CodingKey {
        case createOrderRequests
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateOrderRequestListCodingKeys.self)
        if decoderContainer.contains(.createOrderRequests)
        {
            self.createOrderRequests = try decoderContainer.decode([CreateOrderRequestObject?]?.self, forKey: .createOrderRequests)
        }
    }
}
public extension CreateOrderRequestList{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateOrderRequestListCodingKeys.self)
         try encoderContainer.encode(createOrderRequests, forKey: .createOrderRequests)
    }
}
///  createOrderResponseObject
public class CreateOrderResponseObject:NSObject,Codable{
    /// 消息
    var message:String?
    /// 订单号
    var orderNumber:String?
    /// 应付金额（订单总金额-折扣金额）
    var actualFee:Double?
    /// 是否成功
    var success:Bool?
    /// 资源简单列表
    var orderResourceInfoList:[OrderResourceInfo?]?



    public override init(){
            super.init()
    }

    enum CreateOrderResponseObjectCodingKeys: String, CodingKey {
        case message
        case orderNumber
        case actualFee
        case success
        case orderResourceInfoList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateOrderResponseObjectCodingKeys.self)
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.orderNumber)
        {
            self.orderNumber = try decoderContainer.decode(String?.self, forKey: .orderNumber)
        }
        if decoderContainer.contains(.actualFee)
        {
            self.actualFee = try decoderContainer.decode(Double?.self, forKey: .actualFee)
        }
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
        if decoderContainer.contains(.orderResourceInfoList)
        {
            self.orderResourceInfoList = try decoderContainer.decode([OrderResourceInfo?]?.self, forKey: .orderResourceInfoList)
        }
    }
}
public extension CreateOrderResponseObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateOrderResponseObjectCodingKeys.self)
         try encoderContainer.encode(message, forKey: .message)
         try encoderContainer.encode(orderNumber, forKey: .orderNumber)
         try encoderContainer.encode(actualFee, forKey: .actualFee)
         try encoderContainer.encode(success, forKey: .success)
         try encoderContainer.encode(orderResourceInfoList, forKey: .orderResourceInfoList)
    }
}
