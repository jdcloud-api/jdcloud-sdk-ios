/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   相关接口
   API related to order

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询订单列表
@objc(QueryOrdersResult)
public class QueryOrdersResult:NSObject,JdCloudResult
{
    /// ResultList
    var resultList:[OrderResponseObject?]?

    /// TotalCount
    var totalCount:Int32?

    /// TotalPage
    var totalPage:Int32?



    public override init(){
        super.init()
    }

    enum QueryOrdersResultCodingKeys: String, CodingKey {
        case resultList
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryOrdersResultCodingKeys.self)
        if decoderContainer.contains(.resultList)
        {
            self.resultList = try decoderContainer.decode([OrderResponseObject?]?.self, forKey: .resultList)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int32?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int32?.self, forKey: .totalPage)
        }
    }
}
public extension QueryOrdersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryOrdersResultCodingKeys.self)
        try encoderContainer.encode(resultList, forKey: .resultList)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
