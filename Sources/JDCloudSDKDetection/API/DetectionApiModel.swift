/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Availability-Monitoring-APIs
   可用性监控相关接口，提供创建、查询、修改、删除可用性监控任务等功能

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 检测站点监控地址是否有效 
public class ValidateSiteMonitorAddressResult:NSObject,JdCloudResult
{
    /// Suc
    var suc:Bool?



    public override init(){
        super.init()
    }

    enum ValidateSiteMonitorAddressResultCodingKeys: String, CodingKey {
        case suc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ValidateSiteMonitorAddressResultCodingKeys.self)
        if decoderContainer.contains(.suc)
        {
            self.suc = try decoderContainer.decode(Bool?.self, forKey: .suc)
        }
    }
}
public extension ValidateSiteMonitorAddressResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ValidateSiteMonitorAddressResultCodingKeys.self)
        try encoderContainer.encode(suc, forKey: .suc)
    }
}

///  创建站点监控任务
public class CreateSiteMonitorRequest:JdCloudRequest
{
    /// 地址
    var address:String

    /// AdvanceChecked
    var advanceChecked:String?

    /// CreatedTime
    var createdTime:Int64?

    /// 探测频率
    var cycle:Int64

    /// DefaultSource
    var defaultSource:String?

    /// DnsOption
    var dnsOption:SiteMonitorDnsOption?

    /// Enabled
    var enabled:String?

    /// FtpOption
    var ftpOption:SiteMonitorFtpOption?

    /// HawkeyeId
    var hawkeyeId:Int64?

    /// HttpOption
    var httpOption:SiteMonitorHttpOption?

    /// Id
    var id:String?

    /// IsDeleted
    var isDeleted:String?

    /// 任务名称
    var name:String

    /// Pin
    var pin:String?

    /// PingOption
    var pingOption:SiteMonitorPingOption?

    /// Pop3Option
    var pop3Option:SiteMonitorPop3Option?

    /// 端口
    var port:String?

    /// SmtpOption
    var smtpOption:SiteMonitorSmtpOption?

    /// 探测源
    var source:[SiteMonitorSource?]?

    /// Stats
    var stats:[String:AnyObject?]?

    /// 任务类型，可选值：HTTP、PING 、TCP 、UDP、DNS、SMTP、POP3和FTP
    var taskType:String

    /// TcpOption
    var tcpOption:SiteMonitorTcpOption?

    /// UdpOption
    var udpOption:SiteMonitorUdpOption?

    /// UpdatedTime
    var updatedTime:Int64?


    public init(regionId: String,address:String,cycle:Int64,name:String,source:[SiteMonitorSource?]?,taskType:String){
        self.address = address
        self.cycle = cycle
        self.name = name
        self.source = source
        self.taskType = taskType
        super.init(regionId: regionId)
    }


    enum CreateSiteMonitorRequestRequestCodingKeys: String, CodingKey {
        case address
        case advanceChecked
        case createdTime
        case cycle
        case defaultSource
        case dnsOption
        case enabled
        case ftpOption
        case hawkeyeId
        case httpOption
        case id
        case isDeleted
        case name
        case pin
        case pingOption
        case pop3Option
        case port
        case smtpOption
        case source
        case stats
        case taskType
        case tcpOption
        case udpOption
        case updatedTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSiteMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(address, forKey: .address)
        try encoderContainer.encode(advanceChecked, forKey: .advanceChecked)
        try encoderContainer.encode(createdTime, forKey: .createdTime)
        try encoderContainer.encode(cycle, forKey: .cycle)
        try encoderContainer.encode(defaultSource, forKey: .defaultSource)
        try encoderContainer.encode(dnsOption, forKey: .dnsOption)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(ftpOption, forKey: .ftpOption)
        try encoderContainer.encode(hawkeyeId, forKey: .hawkeyeId)
        try encoderContainer.encode(httpOption, forKey: .httpOption)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(isDeleted, forKey: .isDeleted)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(pin, forKey: .pin)
        try encoderContainer.encode(pingOption, forKey: .pingOption)
        try encoderContainer.encode(pop3Option, forKey: .pop3Option)
        try encoderContainer.encode(port, forKey: .port)
        try encoderContainer.encode(smtpOption, forKey: .smtpOption)
        try encoderContainer.encode(source, forKey: .source)
        try encoderContainer.encode(taskType, forKey: .taskType)
        try encoderContainer.encode(tcpOption, forKey: .tcpOption)
        try encoderContainer.encode(udpOption, forKey: .udpOption)
        try encoderContainer.encode(updatedTime, forKey: .updatedTime)

    }
}

/// 获取站点监控任务信息 
public class GetSiteMonitorResult:NSObject,JdCloudResult
{
    /// List
    var list:[SiteMonitor?]?

    /// Total
    var total:Int64?



    public override init(){
        super.init()
    }

    enum GetSiteMonitorResultCodingKeys: String, CodingKey {
        case list
        case total
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetSiteMonitorResultCodingKeys.self)
        if decoderContainer.contains(.list)
        {
            self.list = try decoderContainer.decode([SiteMonitor?]?.self, forKey: .list)
        }
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int64?.self, forKey: .total)
        }
    }
}
public extension GetSiteMonitorResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSiteMonitorResultCodingKeys.self)
        try encoderContainer.encode(list, forKey: .list)
        try encoderContainer.encode(total, forKey: .total)
    }
}
/// 测试站点监控参数 
public class TestSiteMonitorResult:NSObject,JdCloudResult
{
    /// 错误信息
    var error:String?

    /// 提示信息
    var msg:String?

    /// 状态码
    var status:Int64?



    public override init(){
        super.init()
    }

    enum TestSiteMonitorResultCodingKeys: String, CodingKey {
        case error
        case msg
        case status
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TestSiteMonitorResultCodingKeys.self)
        if decoderContainer.contains(.error)
        {
            self.error = try decoderContainer.decode(String?.self, forKey: .error)
        }
        if decoderContainer.contains(.msg)
        {
            self.msg = try decoderContainer.decode(String?.self, forKey: .msg)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int64?.self, forKey: .status)
        }
    }
}
public extension TestSiteMonitorResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TestSiteMonitorResultCodingKeys.self)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(msg, forKey: .msg)
        try encoderContainer.encode(status, forKey: .status)
    }
}
public class ValidateSiteMonitorAddressResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ValidateSiteMonitorAddressResult?;

    enum ValidateSiteMonitorAddressResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ValidateSiteMonitorAddressResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ValidateSiteMonitorAddressResult?.self, forKey: .result) ?? nil
    }
}

public extension ValidateSiteMonitorAddressResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ValidateSiteMonitorAddressResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取站点监控任务信息
public class GetSiteMonitorRequest:JdCloudRequest
{
    /// NameOrAddr
    var nameOrAddr:String?

    /// Name
    var name:String?

    /// Id
    var id:[String?]?

    /// TaskType
    var taskType:String?

    /// PageNumber
    var pageNumber:Int64?

    /// PageSize
    var pageSize:Int64?

    /// WithStats
    var withStats:String?

    /// 1:包含删除对象，默认：0
    var withDeleted:String?

    /// 查询的可用率、响应时间的时间间隔，最大不超过30天，支持分钟级别,小时级别，天级别，例如：1m、1h、1d
    var timeInterval:String?

    /// name为&#39;id&#39; - 站点监控id
    var filters:[Filter?]?




    enum GetSiteMonitorRequestRequestCodingKeys: String, CodingKey {
        case nameOrAddr
        case name
        case id
        case taskType
        case pageNumber
        case pageSize
        case withStats
        case withDeleted
        case timeInterval
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSiteMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(nameOrAddr, forKey: .nameOrAddr)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(taskType, forKey: .taskType)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(withStats, forKey: .withStats)
        try encoderContainer.encode(withDeleted, forKey: .withDeleted)
        try encoderContainer.encode(timeInterval, forKey: .timeInterval)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 启停站点监控任务 
public class EnableSiteMonitorResult:NSObject,JdCloudResult
{
    /// Suc
    var suc:Bool?



    public override init(){
        super.init()
    }

    enum EnableSiteMonitorResultCodingKeys: String, CodingKey {
        case suc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableSiteMonitorResultCodingKeys.self)
        if decoderContainer.contains(.suc)
        {
            self.suc = try decoderContainer.decode(Bool?.self, forKey: .suc)
        }
    }
}
public extension EnableSiteMonitorResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableSiteMonitorResultCodingKeys.self)
        try encoderContainer.encode(suc, forKey: .suc)
    }
}
/// 修改站点监控任务 
public class UpdateSiteMonitorResult:NSObject,JdCloudResult
{
    /// Suc
    var suc:Bool?



    public override init(){
        super.init()
    }

    enum UpdateSiteMonitorResultCodingKeys: String, CodingKey {
        case suc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateSiteMonitorResultCodingKeys.self)
        if decoderContainer.contains(.suc)
        {
            self.suc = try decoderContainer.decode(Bool?.self, forKey: .suc)
        }
    }
}
public extension UpdateSiteMonitorResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateSiteMonitorResultCodingKeys.self)
        try encoderContainer.encode(suc, forKey: .suc)
    }
}
public class CreateSiteMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSiteMonitorResult?;

    enum CreateSiteMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSiteMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSiteMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSiteMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSiteMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取站点监控数据 
public class GetSiteMonitorDataPointsResult:NSObject,JdCloudResult
{
    /// MetricData
    var metricData:[StatsItem?]?

    /// ResTime
    var resTime:[StatsItem?]?

    /// SuccessRatio
    var successRatio:[StatsItem?]?



    public override init(){
        super.init()
    }

    enum GetSiteMonitorDataPointsResultCodingKeys: String, CodingKey {
        case metricData
        case resTime
        case successRatio
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetSiteMonitorDataPointsResultCodingKeys.self)
        if decoderContainer.contains(.metricData)
        {
            self.metricData = try decoderContainer.decode([StatsItem?]?.self, forKey: .metricData)
        }
        if decoderContainer.contains(.resTime)
        {
            self.resTime = try decoderContainer.decode([StatsItem?]?.self, forKey: .resTime)
        }
        if decoderContainer.contains(.successRatio)
        {
            self.successRatio = try decoderContainer.decode([StatsItem?]?.self, forKey: .successRatio)
        }
    }
}
public extension GetSiteMonitorDataPointsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSiteMonitorDataPointsResultCodingKeys.self)
        try encoderContainer.encode(metricData, forKey: .metricData)
        try encoderContainer.encode(resTime, forKey: .resTime)
        try encoderContainer.encode(successRatio, forKey: .successRatio)
    }
}
public class GetSiteMonitorDataPointsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetSiteMonitorDataPointsResult?;

    enum GetSiteMonitorDataPointsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetSiteMonitorDataPointsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetSiteMonitorDataPointsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetSiteMonitorDataPointsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSiteMonitorDataPointsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class EnableSiteMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableSiteMonitorResult?;

    enum EnableSiteMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableSiteMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableSiteMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableSiteMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableSiteMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class TestSiteMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:TestSiteMonitorResult?;

    enum TestSiteMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TestSiteMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(TestSiteMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension TestSiteMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TestSiteMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取站点监控数据
public class GetSiteMonitorDataPointsRequest:JdCloudRequest
{
    /// Id
    var id:String?

    /// StartTime
    var startTime:String?

    /// EndTime
    var endTime:String?




    enum GetSiteMonitorDataPointsRequestRequestCodingKeys: String, CodingKey {
        case id
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSiteMonitorDataPointsRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

public class GetSiteMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetSiteMonitorResult?;

    enum GetSiteMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetSiteMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetSiteMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension GetSiteMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSiteMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取站点监控探针列表
public class GetSiteMonitorSourceRequest:JdCloudRequest
{
}


///  测试站点监控参数
public class TestSiteMonitorRequest:JdCloudRequest
{
    /// 地址
    var address:String

    /// AdvanceChecked
    var advanceChecked:String?

    /// CreatedTime
    var createdTime:Int64?

    /// 探测频率
    var cycle:Int64

    /// DefaultSource
    var defaultSource:String?

    /// DnsOption
    var dnsOption:SiteMonitorDnsOption?

    /// Enabled
    var enabled:String?

    /// FtpOption
    var ftpOption:SiteMonitorFtpOption?

    /// HawkeyeId
    var hawkeyeId:Int64?

    /// HttpOption
    var httpOption:SiteMonitorHttpOption?

    /// Id
    var id:String?

    /// IsDeleted
    var isDeleted:String?

    /// 任务名称
    var name:String

    /// Pin
    var pin:String?

    /// PingOption
    var pingOption:SiteMonitorPingOption?

    /// Pop3Option
    var pop3Option:SiteMonitorPop3Option?

    /// 端口
    var port:String?

    /// SmtpOption
    var smtpOption:SiteMonitorSmtpOption?

    /// 探测源
    var source:[SiteMonitorSource?]?

    /// Stats
    var stats:[String:AnyObject?]?

    /// 任务类型，可选值：HTTP、PING 、TCP 、UDP、DNS、SMTP、POP3和FTP
    var taskType:String

    /// TcpOption
    var tcpOption:SiteMonitorTcpOption?

    /// UdpOption
    var udpOption:SiteMonitorUdpOption?

    /// UpdatedTime
    var updatedTime:Int64?


    public init(regionId: String,address:String,cycle:Int64,name:String,source:[SiteMonitorSource?]?,taskType:String){
        self.address = address
        self.cycle = cycle
        self.name = name
        self.source = source
        self.taskType = taskType
        super.init(regionId: regionId)
    }


    enum TestSiteMonitorRequestRequestCodingKeys: String, CodingKey {
        case address
        case advanceChecked
        case createdTime
        case cycle
        case defaultSource
        case dnsOption
        case enabled
        case ftpOption
        case hawkeyeId
        case httpOption
        case id
        case isDeleted
        case name
        case pin
        case pingOption
        case pop3Option
        case port
        case smtpOption
        case source
        case stats
        case taskType
        case tcpOption
        case udpOption
        case updatedTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TestSiteMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(address, forKey: .address)
        try encoderContainer.encode(advanceChecked, forKey: .advanceChecked)
        try encoderContainer.encode(createdTime, forKey: .createdTime)
        try encoderContainer.encode(cycle, forKey: .cycle)
        try encoderContainer.encode(defaultSource, forKey: .defaultSource)
        try encoderContainer.encode(dnsOption, forKey: .dnsOption)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(ftpOption, forKey: .ftpOption)
        try encoderContainer.encode(hawkeyeId, forKey: .hawkeyeId)
        try encoderContainer.encode(httpOption, forKey: .httpOption)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(isDeleted, forKey: .isDeleted)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(pin, forKey: .pin)
        try encoderContainer.encode(pingOption, forKey: .pingOption)
        try encoderContainer.encode(pop3Option, forKey: .pop3Option)
        try encoderContainer.encode(port, forKey: .port)
        try encoderContainer.encode(smtpOption, forKey: .smtpOption)
        try encoderContainer.encode(source, forKey: .source)
        try encoderContainer.encode(taskType, forKey: .taskType)
        try encoderContainer.encode(tcpOption, forKey: .tcpOption)
        try encoderContainer.encode(udpOption, forKey: .udpOption)
        try encoderContainer.encode(updatedTime, forKey: .updatedTime)

    }
}

/// 删除站点监控任务 
public class DeleteSiteMonitorResult:NSObject,JdCloudResult
{
    /// Suc
    var suc:Bool?



    public override init(){
        super.init()
    }

    enum DeleteSiteMonitorResultCodingKeys: String, CodingKey {
        case suc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSiteMonitorResultCodingKeys.self)
        if decoderContainer.contains(.suc)
        {
            self.suc = try decoderContainer.decode(Bool?.self, forKey: .suc)
        }
    }
}
public extension DeleteSiteMonitorResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSiteMonitorResultCodingKeys.self)
        try encoderContainer.encode(suc, forKey: .suc)
    }
}
public class GetSiteMonitorSourceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetSiteMonitorSourceResult?;

    enum GetSiteMonitorSourceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetSiteMonitorSourceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetSiteMonitorSourceResult?.self, forKey: .result) ?? nil
    }
}

public extension GetSiteMonitorSourceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSiteMonitorSourceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteSiteMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSiteMonitorResult?;

    enum DeleteSiteMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSiteMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSiteMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSiteMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSiteMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateSiteMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateSiteMonitorResult?;

    enum UpdateSiteMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateSiteMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateSiteMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateSiteMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateSiteMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取站点监控探针列表 
public class GetSiteMonitorSourceResult:NSObject,JdCloudResult
{
    /// 全部探针
    var all:[IspLocation?]?

    /// 默认探针
    var limited:[IspLocation?]?



    public override init(){
        super.init()
    }

    enum GetSiteMonitorSourceResultCodingKeys: String, CodingKey {
        case all
        case limited
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetSiteMonitorSourceResultCodingKeys.self)
        if decoderContainer.contains(.all)
        {
            self.all = try decoderContainer.decode([IspLocation?]?.self, forKey: .all)
        }
        if decoderContainer.contains(.limited)
        {
            self.limited = try decoderContainer.decode([IspLocation?]?.self, forKey: .limited)
        }
    }
}
public extension GetSiteMonitorSourceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSiteMonitorSourceResultCodingKeys.self)
        try encoderContainer.encode(all, forKey: .all)
        try encoderContainer.encode(limited, forKey: .limited)
    }
}

///  修改站点监控任务
public class UpdateSiteMonitorRequest:JdCloudRequest
{
    /// 地址
    var address:String

    /// AdvanceChecked
    var advanceChecked:String?

    /// CreatedTime
    var createdTime:Int64?

    /// 探测频率
    var cycle:Int64

    /// DefaultSource
    var defaultSource:String?

    /// DnsOption
    var dnsOption:SiteMonitorDnsOption?

    /// Enabled
    var enabled:String?

    /// FtpOption
    var ftpOption:SiteMonitorFtpOption?

    /// HawkeyeId
    var hawkeyeId:Int64?

    /// HttpOption
    var httpOption:SiteMonitorHttpOption?

    /// Id
    var id:String?

    /// IsDeleted
    var isDeleted:String?

    /// 任务名称
    var name:String

    /// Pin
    var pin:String?

    /// PingOption
    var pingOption:SiteMonitorPingOption?

    /// Pop3Option
    var pop3Option:SiteMonitorPop3Option?

    /// 端口
    var port:String?

    /// SmtpOption
    var smtpOption:SiteMonitorSmtpOption?

    /// 探测源
    var source:[SiteMonitorSource?]?

    /// Stats
    var stats:[String:AnyObject?]?

    /// 任务类型，可选值：HTTP、PING 、TCP 、UDP、DNS、SMTP、POP3和FTP
    var taskType:String

    /// TcpOption
    var tcpOption:SiteMonitorTcpOption?

    /// UdpOption
    var udpOption:SiteMonitorUdpOption?

    /// UpdatedTime
    var updatedTime:Int64?


    public init(regionId: String,address:String,cycle:Int64,name:String,source:[SiteMonitorSource?]?,taskType:String){
        self.address = address
        self.cycle = cycle
        self.name = name
        self.source = source
        self.taskType = taskType
        super.init(regionId: regionId)
    }


    enum UpdateSiteMonitorRequestRequestCodingKeys: String, CodingKey {
        case address
        case advanceChecked
        case createdTime
        case cycle
        case defaultSource
        case dnsOption
        case enabled
        case ftpOption
        case hawkeyeId
        case httpOption
        case id
        case isDeleted
        case name
        case pin
        case pingOption
        case pop3Option
        case port
        case smtpOption
        case source
        case stats
        case taskType
        case tcpOption
        case udpOption
        case updatedTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateSiteMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(address, forKey: .address)
        try encoderContainer.encode(advanceChecked, forKey: .advanceChecked)
        try encoderContainer.encode(createdTime, forKey: .createdTime)
        try encoderContainer.encode(cycle, forKey: .cycle)
        try encoderContainer.encode(defaultSource, forKey: .defaultSource)
        try encoderContainer.encode(dnsOption, forKey: .dnsOption)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(ftpOption, forKey: .ftpOption)
        try encoderContainer.encode(hawkeyeId, forKey: .hawkeyeId)
        try encoderContainer.encode(httpOption, forKey: .httpOption)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(isDeleted, forKey: .isDeleted)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(pin, forKey: .pin)
        try encoderContainer.encode(pingOption, forKey: .pingOption)
        try encoderContainer.encode(pop3Option, forKey: .pop3Option)
        try encoderContainer.encode(port, forKey: .port)
        try encoderContainer.encode(smtpOption, forKey: .smtpOption)
        try encoderContainer.encode(source, forKey: .source)
        try encoderContainer.encode(taskType, forKey: .taskType)
        try encoderContainer.encode(tcpOption, forKey: .tcpOption)
        try encoderContainer.encode(udpOption, forKey: .udpOption)
        try encoderContainer.encode(updatedTime, forKey: .updatedTime)

    }
}


///  检测站点监控地址是否有效
public class ValidateSiteMonitorAddressRequest:JdCloudRequest
{
    /// Address
    var address:String?




    enum ValidateSiteMonitorAddressRequestRequestCodingKeys: String, CodingKey {
        case address
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ValidateSiteMonitorAddressRequestRequestCodingKeys.self)
        try encoderContainer.encode(address, forKey: .address)

    }
}

/// 创建站点监控任务 
public class CreateSiteMonitorResult:NSObject,JdCloudResult
{
    /// Id
    var id:String?



    public override init(){
        super.init()
    }

    enum CreateSiteMonitorResultCodingKeys: String, CodingKey {
        case id
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSiteMonitorResultCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
    }
}
public extension CreateSiteMonitorResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSiteMonitorResultCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)
    }
}

///  启停站点监控任务
public class EnableSiteMonitorRequest:JdCloudRequest
{
    /// List
    var list:[EnableSiteMonitorReqItem?]?




    enum EnableSiteMonitorRequestRequestCodingKeys: String, CodingKey {
        case list
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableSiteMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(list, forKey: .list)

    }
}


///  删除站点监控任务
public class DeleteSiteMonitorRequest:JdCloudRequest
{
    /// name为&#39;list&#39; - 站点监控id
    var filters:[Filter?]?




    enum DeleteSiteMonitorRequestRequestCodingKeys: String, CodingKey {
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSiteMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 查询可用性监控任务列表 
public class DescribeProbeTasksResult:NSObject,JdCloudResult
{
    /// 总页数
    var numberPages:Int64?

    /// 总记录数
    var numberRecords:Int64?

    /// 当前页码
    var pageNumber:Int64?

    /// 分页大小
    var pageSize:Int64?

    /// task信息
    var taskInfo:[TaskInfo?]?

    /// 该用户的总task个数，不受查询的筛选条件影响
    var totalCount:Int64?



    public override init(){
        super.init()
    }

    enum DescribeProbeTasksResultCodingKeys: String, CodingKey {
        case numberPages
        case numberRecords
        case pageNumber
        case pageSize
        case taskInfo
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProbeTasksResultCodingKeys.self)
        if decoderContainer.contains(.numberPages)
        {
            self.numberPages = try decoderContainer.decode(Int64?.self, forKey: .numberPages)
        }
        if decoderContainer.contains(.numberRecords)
        {
            self.numberRecords = try decoderContainer.decode(Int64?.self, forKey: .numberRecords)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int64?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int64?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.taskInfo)
        {
            self.taskInfo = try decoderContainer.decode([TaskInfo?]?.self, forKey: .taskInfo)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int64?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeProbeTasksResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProbeTasksResultCodingKeys.self)
        try encoderContainer.encode(numberPages, forKey: .numberPages)
        try encoderContainer.encode(numberRecords, forKey: .numberRecords)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(taskInfo, forKey: .taskInfo)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeMetricDataAmResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMetricDataAmResult?;

    enum DescribeMetricDataAmResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricDataAmResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMetricDataAmResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMetricDataAmResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricDataAmResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeProbeHistoryResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeProbeHistoryResult?;

    enum DescribeProbeHistoryResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProbeHistoryResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeProbeHistoryResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeProbeHistoryResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProbeHistoryResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改可用性监控任务 
public class UpdateProbeTaskResult:NSObject,JdCloudResult
{
    /// 是否更新成功
    var suc:Bool?



    public override init(){
        super.init()
    }

    enum UpdateProbeTaskResultCodingKeys: String, CodingKey {
        case suc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateProbeTaskResultCodingKeys.self)
        if decoderContainer.contains(.suc)
        {
            self.suc = try decoderContainer.decode(Bool?.self, forKey: .suc)
        }
    }
}
public extension UpdateProbeTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateProbeTaskResultCodingKeys.self)
        try encoderContainer.encode(suc, forKey: .suc)
    }
}
public class ProbeTaskEnableResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ProbeTaskEnableResult?;

    enum ProbeTaskEnableResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ProbeTaskEnableResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ProbeTaskEnableResult?.self, forKey: .result) ?? nil
    }
}

public extension ProbeTaskEnableResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ProbeTaskEnableResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询可用性监控agent状态 
public class DescribeAgentStatusResult:NSObject,JdCloudResult
{
    /// agent状态信息
    var items:[AgentStatus?]?



    public override init(){
        super.init()
    }

    enum DescribeAgentStatusResultCodingKeys: String, CodingKey {
        case items
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAgentStatusResultCodingKeys.self)
        if decoderContainer.contains(.items)
        {
            self.items = try decoderContainer.decode([AgentStatus?]?.self, forKey: .items)
        }
    }
}
public extension DescribeAgentStatusResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAgentStatusResultCodingKeys.self)
        try encoderContainer.encode(items, forKey: .items)
    }
}
public class DiscribeProbesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DiscribeProbesResult?;

    enum DiscribeProbesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DiscribeProbesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DiscribeProbesResult?.self, forKey: .result) ?? nil
    }
}

public extension DiscribeProbesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DiscribeProbesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteProbeTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteProbeTaskResult?;

    enum DeleteProbeTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteProbeTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteProbeTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteProbeTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteProbeTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询可用性监控任务的探测源列表 
public class DiscribeProbesResult:NSObject,JdCloudResult
{
    /// ProbeList
    var probeList:[ProbeInfo?]?



    public override init(){
        super.init()
    }

    enum DiscribeProbesResultCodingKeys: String, CodingKey {
        case probeList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DiscribeProbesResultCodingKeys.self)
        if decoderContainer.contains(.probeList)
        {
            self.probeList = try decoderContainer.decode([ProbeInfo?]?.self, forKey: .probeList)
        }
    }
}
public extension DiscribeProbesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DiscribeProbesResultCodingKeys.self)
        try encoderContainer.encode(probeList, forKey: .probeList)
    }
}
/// 创建可用性监控任务 
public class CreateProbeTaskResult:NSObject,JdCloudResult
{
    /// 是否创建成功
    var suc:Bool?

    /// 创建成功的规则id列表
    var taskId:String?



    public override init(){
        super.init()
    }

    enum CreateProbeTaskResultCodingKeys: String, CodingKey {
        case suc
        case taskId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateProbeTaskResultCodingKeys.self)
        if decoderContainer.contains(.suc)
        {
            self.suc = try decoderContainer.decode(Bool?.self, forKey: .suc)
        }
        if decoderContainer.contains(.taskId)
        {
            self.taskId = try decoderContainer.decode(String?.self, forKey: .taskId)
        }
    }
}
public extension CreateProbeTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateProbeTaskResultCodingKeys.self)
        try encoderContainer.encode(suc, forKey: .suc)
        try encoderContainer.encode(taskId, forKey: .taskId)
    }
}
/// 删除可用性监控任务 
public class DeleteProbeTaskResult:NSObject,JdCloudResult
{
    /// 可用性监控任务是否删除成功
    var suc:Bool?



    public override init(){
        super.init()
    }

    enum DeleteProbeTaskResultCodingKeys: String, CodingKey {
        case suc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteProbeTaskResultCodingKeys.self)
        if decoderContainer.contains(.suc)
        {
            self.suc = try decoderContainer.decode(Bool?.self, forKey: .suc)
        }
    }
}
public extension DeleteProbeTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteProbeTaskResultCodingKeys.self)
        try encoderContainer.encode(suc, forKey: .suc)
    }
}
public class DescribeProbeTasksResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeProbeTasksResult?;

    enum DescribeProbeTasksResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProbeTasksResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeProbeTasksResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeProbeTasksResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProbeTasksResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除可用性监控任务
public class DeleteProbeTaskRequest:JdCloudRequest
{
    /// 探测任务的task_id,多个taskId用|分隔
    var probeTaskIDs:String


    public init(regionId: String,probeTaskIDs:String){
        self.probeTaskIDs = probeTaskIDs
        super.init(regionId: regionId)
    }


    enum DeleteProbeTaskRequestRequestCodingKeys: String, CodingKey {
        case probeTaskIDs
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteProbeTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(probeTaskIDs, forKey: .probeTaskIDs)

    }
}

/// 查询可用性监控任务的指定探测源的异常探测历史 
public class DescribeProbeHistoryResult:NSObject,JdCloudResult
{
    /// 异常数据,当events为空时，Agent在当前查询时间段为无数据上报，Agent异常
    var events:[Event?]?

    /// 探测源名称
    var name:String?

    /// 探测源uuid
    var uuid:String?



    public override init(){
        super.init()
    }

    enum DescribeProbeHistoryResultCodingKeys: String, CodingKey {
        case events
        case name
        case uuid
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProbeHistoryResultCodingKeys.self)
        if decoderContainer.contains(.events)
        {
            self.events = try decoderContainer.decode([Event?]?.self, forKey: .events)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
    }
}
public extension DescribeProbeHistoryResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProbeHistoryResultCodingKeys.self)
        try encoderContainer.encode(events, forKey: .events)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(uuid, forKey: .uuid)
    }
}

///  查询可用性监控任务的指定探测源的异常探测历史
public class DescribeProbeHistoryRequest:JdCloudRequest
{
    /// 查询时间范围的开始时间， UTC时间，格式：2016-12-11T00:00:00+0800（默认为当前时间往前三天，早于3d时，将被重置为3d）（注意在url中+要转译为%2B故url中为2016-12-11T00:00:00%2B0800）
    var startTime:String?

    /// 查询时间范围的结束时间， UTC时间，格式：2016-12-11T00:00:00+0800（为空时，默认为当前时间）（注意在url中+要转译为%2B故url中为2016-12-11T00:00:00%2B0800）
    var endTime:String?

    /// 可用性监控task_id, id长度(0,50]
    var probeTaskID:String

    /// 探测源id，  id长度（0,50]
    var probeID:String


    public init(regionId: String,probeTaskID:String,probeID:String){
        self.probeTaskID = probeTaskID
        self.probeID = probeID
        super.init(regionId: regionId)
    }


    enum DescribeProbeHistoryRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case probeTaskID
        case probeID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProbeHistoryRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(probeTaskID, forKey: .probeTaskID)
        try encoderContainer.encode(probeID, forKey: .probeID)

    }
}


///  查看可用性监控任务的监控数据
public class DescribeMetricDataAmRequest:JdCloudRequest
{
    /// 资源的uuid
    var resourceId:String

    /// 查询时间范围的开始时间， UTC时间，格式：2016-12-11T00:00:00+0800（早于30d时，将被重置为30d）（注意在url中+要转译为%2B故url中为2016-12-11T00:00:00%2B0800）
    var startTime:String?

    /// 查询时间范围的结束时间， UTC时间，格式：2016-12-11T00:00:00+0800（为空时，将由startTime与timeInterval计算得出）（注意在url中+要转译为%2B故url中为2016-12-11T00:00:00%2B0800）
    var endTime:String?

    /// 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项
    var timeInterval:String?


    public init(regionId: String,resourceId:String){
        self.resourceId = resourceId
        super.init(regionId: regionId)
    }


    enum DescribeMetricDataAmRequestRequestCodingKeys: String, CodingKey {
        case resourceId
        case startTime
        case endTime
        case timeInterval
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricDataAmRequestRequestCodingKeys.self)
        try encoderContainer.encode(resourceId, forKey: .resourceId)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(timeInterval, forKey: .timeInterval)

    }
}


///  创建可用性监控任务
public class CreateProbeTaskRequest:JdCloudRequest
{
    /// 幂等性校验参数,最长36位
    var clientToken:String

    /// CreateProbeTaskSpec
    var createProbeTaskSpec:CreateProbeTaskParam


    public init(regionId: String,clientToken:String,createProbeTaskSpec:CreateProbeTaskParam){
        self.clientToken = clientToken
        self.createProbeTaskSpec = createProbeTaskSpec
        super.init(regionId: regionId)
    }


    enum CreateProbeTaskRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case createProbeTaskSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateProbeTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(createProbeTaskSpec, forKey: .createProbeTaskSpec)

    }
}

/// 查询可用性监控任务信息 
public class DescribeProbeTaskResult:NSObject,JdCloudResult
{
    /// 探测源信息
    var probes:[Probe?]?

    /// 探测地址
    var address:String?

    /// 创建时间
    var createTime:String?

    /// 是否被删除
    var deleted:Bool?

    /// 是否启用
    var enable:Bool?

    /// 探测频率，单位秒
    var frequency:Int64?

    /// http探测的body
    var httpBody:String?

    /// http探测的cookie
    var httpCookie:[KeyValue?]?

    /// http探测的header
    var httpHeader:[KeyValue?]?

    /// http探测方式
    var httpType:Int64?

    /// 探测任务 名称
    var name:String?

    /// pin
    var pin:String?

    /// 探测端口
    var port:Int64?

    /// 探测类型1:http、2:telnet
    var probeType:Int64?

    /// 探测对象的uid(http探测方法无uid)
    var targetId:String?

    /// 探测对象所在region，redis或RDS所在region
    var targetRegion:String?

    /// 探测任务 id
    var taskId:String?

    /// 任务类型、1:url/ip、2:RDS、3:redis
    var taskType:Int64?

    /// 探测超时时间，单位秒
    var timeout:Int64?

    /// 更新时间
    var updateTime:String?



    public override init(){
        super.init()
    }

    enum DescribeProbeTaskResultCodingKeys: String, CodingKey {
        case probes
        case address
        case createTime
        case deleted
        case enable
        case frequency
        case httpBody
        case httpCookie
        case httpHeader
        case httpType
        case name
        case pin
        case port
        case probeType
        case targetId
        case targetRegion
        case taskId
        case taskType
        case timeout
        case updateTime
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProbeTaskResultCodingKeys.self)
        if decoderContainer.contains(.probes)
        {
            self.probes = try decoderContainer.decode([Probe?]?.self, forKey: .probes)
        }
        if decoderContainer.contains(.address)
        {
            self.address = try decoderContainer.decode(String?.self, forKey: .address)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.deleted)
        {
            self.deleted = try decoderContainer.decode(Bool?.self, forKey: .deleted)
        }
        if decoderContainer.contains(.enable)
        {
            self.enable = try decoderContainer.decode(Bool?.self, forKey: .enable)
        }
        if decoderContainer.contains(.frequency)
        {
            self.frequency = try decoderContainer.decode(Int64?.self, forKey: .frequency)
        }
        if decoderContainer.contains(.httpBody)
        {
            self.httpBody = try decoderContainer.decode(String?.self, forKey: .httpBody)
        }
        if decoderContainer.contains(.httpCookie)
        {
            self.httpCookie = try decoderContainer.decode([KeyValue?]?.self, forKey: .httpCookie)
        }
        if decoderContainer.contains(.httpHeader)
        {
            self.httpHeader = try decoderContainer.decode([KeyValue?]?.self, forKey: .httpHeader)
        }
        if decoderContainer.contains(.httpType)
        {
            self.httpType = try decoderContainer.decode(Int64?.self, forKey: .httpType)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.port)
        {
            self.port = try decoderContainer.decode(Int64?.self, forKey: .port)
        }
        if decoderContainer.contains(.probeType)
        {
            self.probeType = try decoderContainer.decode(Int64?.self, forKey: .probeType)
        }
        if decoderContainer.contains(.targetId)
        {
            self.targetId = try decoderContainer.decode(String?.self, forKey: .targetId)
        }
        if decoderContainer.contains(.targetRegion)
        {
            self.targetRegion = try decoderContainer.decode(String?.self, forKey: .targetRegion)
        }
        if decoderContainer.contains(.taskId)
        {
            self.taskId = try decoderContainer.decode(String?.self, forKey: .taskId)
        }
        if decoderContainer.contains(.taskType)
        {
            self.taskType = try decoderContainer.decode(Int64?.self, forKey: .taskType)
        }
        if decoderContainer.contains(.timeout)
        {
            self.timeout = try decoderContainer.decode(Int64?.self, forKey: .timeout)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension DescribeProbeTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProbeTaskResultCodingKeys.self)
        try encoderContainer.encode(probes, forKey: .probes)
        try encoderContainer.encode(address, forKey: .address)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(deleted, forKey: .deleted)
        try encoderContainer.encode(enable, forKey: .enable)
        try encoderContainer.encode(frequency, forKey: .frequency)
        try encoderContainer.encode(httpBody, forKey: .httpBody)
        try encoderContainer.encode(httpCookie, forKey: .httpCookie)
        try encoderContainer.encode(httpHeader, forKey: .httpHeader)
        try encoderContainer.encode(httpType, forKey: .httpType)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(pin, forKey: .pin)
        try encoderContainer.encode(port, forKey: .port)
        try encoderContainer.encode(probeType, forKey: .probeType)
        try encoderContainer.encode(targetId, forKey: .targetId)
        try encoderContainer.encode(targetRegion, forKey: .targetRegion)
        try encoderContainer.encode(taskId, forKey: .taskId)
        try encoderContainer.encode(taskType, forKey: .taskType)
        try encoderContainer.encode(timeout, forKey: .timeout)
        try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}

///  查询可用性监控任务的探测源列表
public class DiscribeProbesRequest:JdCloudRequest
{
    /// 自定义标签
    var filters:[Filter?]?

    /// 探测任务的task_id
    var probeTaskID:String


    public init(regionId: String,probeTaskID:String){
        self.probeTaskID = probeTaskID
        super.init(regionId: regionId)
    }


    enum DiscribeProbesRequestRequestCodingKeys: String, CodingKey {
        case filters
        case probeTaskID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DiscribeProbesRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(probeTaskID, forKey: .probeTaskID)

    }
}

public class CreateProbeTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateProbeTaskResult?;

    enum CreateProbeTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateProbeTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateProbeTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateProbeTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateProbeTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateProbeTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateProbeTaskResult?;

    enum UpdateProbeTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateProbeTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateProbeTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateProbeTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateProbeTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeProbeTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeProbeTaskResult?;

    enum DescribeProbeTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProbeTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeProbeTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeProbeTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProbeTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  启用、禁用可用性监控任务
public class ProbeTaskEnableRequest:JdCloudRequest
{
    /// 默认：禁用； true：启用，false：禁用
    var enabled:Bool?

    /// 要启用或禁用的探测任务的task_id列表，列表长度[1，100)
    var taskId:[String?]?




    enum ProbeTaskEnableRequestRequestCodingKeys: String, CodingKey {
        case enabled
        case taskId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ProbeTaskEnableRequestRequestCodingKeys.self)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(taskId, forKey: .taskId)

    }
}


///  查询可用性监控任务列表
public class DescribeProbeTasksRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
    var pageSize:Int64?

    /// 根据探测任务的名称查询，支持模糊查询
    var name:String?

    /// 根据探测任务的类型查询，1、http 2、telnet
    var type:Int64?

    /// 查询的可用率、响应时间的时间间隔，为空时默认查询最新点,最大不超过30天，支持分钟级别,小时级别，天级别，例如：1m、1h、1d
    var timeInterval:String?

    /// 是否查询可用率、响应时间
    var withStats:Bool?

    /// 是否包含被删除的task
    var withDeleted:Bool?

    /// 任务状态：1为启用，0为禁用。默认为查所有的
    var enabled:Int64?

    /// taskId - taskId，精确匹配，支持多个
      /// name - task名称或探测地址，糊模匹配，支持单个
    var filters:[Filter?]?




    enum DescribeProbeTasksRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case name
        case type
        case timeInterval
        case withStats
        case withDeleted
        case enabled
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProbeTasksRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(type, forKey: .type)
        try encoderContainer.encode(timeInterval, forKey: .timeInterval)
        try encoderContainer.encode(withStats, forKey: .withStats)
        try encoderContainer.encode(withDeleted, forKey: .withDeleted)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class DescribeAgentStatusResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAgentStatusResult?;

    enum DescribeAgentStatusResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAgentStatusResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAgentStatusResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAgentStatusResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAgentStatusResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询可用性监控任务信息
public class DescribeProbeTaskRequest:JdCloudRequest
{
    /// 探测任务的task_id
    var probeTaskID:String


    public init(regionId: String,probeTaskID:String){
        self.probeTaskID = probeTaskID
        super.init(regionId: regionId)
    }


    enum DescribeProbeTaskRequestRequestCodingKeys: String, CodingKey {
        case probeTaskID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProbeTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(probeTaskID, forKey: .probeTaskID)

    }
}


///  修改可用性监控任务
public class UpdateProbeTaskRequest:JdCloudRequest
{
    /// http body：选择探测类型为1&#x3D;http时有效，最长不超过1024字节
    var httpBody:String?

    /// http cookie：选择探测类型为1&#x3D;http时有效，最大允许20个key、value对，最长不超过1024字节
    var httpCookie:[KeyValue?]?

    /// http header：选择探测类型为1&#x3D;http时有效，最大允许20个key、value对，最长不超过1024字节
    var httpHeader:[KeyValue?]?

    /// http探测方法,可选值：1:get、2:post、3:head
    var httpType:Int64?

    /// task名称，不允许重复，长度不超过32字符，只允许中英文、数字、下划线_、中划线-, [0-9][a-z] [A-Z] [- _ ]
    var name:String?

    /// 探测源（发起对探测目标探测的云主机，需安装相应的agent才能探测）
    var probes:[Probe?]?

    /// 探测任务的task_id
    var probeTaskID:String


    public init(regionId: String,probes:[Probe?]?,probeTaskID:String){
        self.probes = probes
        self.probeTaskID = probeTaskID
        super.init(regionId: regionId)
    }


    enum UpdateProbeTaskRequestRequestCodingKeys: String, CodingKey {
        case httpBody
        case httpCookie
        case httpHeader
        case httpType
        case name
        case probes
        case probeTaskID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateProbeTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(httpBody, forKey: .httpBody)
        try encoderContainer.encode(httpCookie, forKey: .httpCookie)
        try encoderContainer.encode(httpHeader, forKey: .httpHeader)
        try encoderContainer.encode(httpType, forKey: .httpType)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(probes, forKey: .probes)
        try encoderContainer.encode(probeTaskID, forKey: .probeTaskID)

    }
}


///  查询可用性监控agent状态
public class DescribeAgentStatusRequest:JdCloudRequest
{
    /// agent id列表
      /// uuid - agent id，精确匹配，支持多个
    var filters:[Filter?]?


    public init(regionId: String,filters:[Filter?]?){
        self.filters = filters
        super.init(regionId: regionId)
    }


    enum DescribeAgentStatusRequestRequestCodingKeys: String, CodingKey {
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAgentStatusRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 查看可用性监控任务的监控数据 
public class DescribeMetricDataAmResult:NSObject,JdCloudResult
{
    /// MetricDatas
    var metricDatas:[MetricData?]?



    public override init(){
        super.init()
    }

    enum DescribeMetricDataAmResultCodingKeys: String, CodingKey {
        case metricDatas
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricDataAmResultCodingKeys.self)
        if decoderContainer.contains(.metricDatas)
        {
            self.metricDatas = try decoderContainer.decode([MetricData?]?.self, forKey: .metricDatas)
        }
    }
}
public extension DescribeMetricDataAmResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricDataAmResultCodingKeys.self)
        try encoderContainer.encode(metricDatas, forKey: .metricDatas)
    }
}
/// 启用、禁用可用性监控任务 
public class ProbeTaskEnableResult:NSObject,JdCloudResult
{
    /// 可用性监控任务 【启用｜禁用】 是否成功
    var suc:Bool?



    public override init(){
        super.init()
    }

    enum ProbeTaskEnableResultCodingKeys: String, CodingKey {
        case suc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ProbeTaskEnableResultCodingKeys.self)
        if decoderContainer.contains(.suc)
        {
            self.suc = try decoderContainer.decode(Bool?.self, forKey: .suc)
        }
    }
}
public extension ProbeTaskEnableResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ProbeTaskEnableResultCodingKeys.self)
        try encoderContainer.encode(suc, forKey: .suc)
    }
}
