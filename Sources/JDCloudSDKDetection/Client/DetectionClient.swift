/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JCLOUD DETECTION SUBSCRIBE API
   detection API

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class DetectionJDCloudClient:NSObject,JDCloudClient{
    
    private final var detectionJDCloudClient:DetectionJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        detectionJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "detection.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        detectionJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "detection/" + "v2"
    
    public let serviceName: String = "detection"
    
    public let version: String = "v2"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func validateSiteMonitorAddressAsync(request:ValidateSiteMonitorAddressRequest,requestComplation:@escaping ExecuteResult<ValidateSiteMonitorAddressResult>) throws {
        detectionJDCloudClient = self
        try ValidateSiteMonitorAddressExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func testSiteMonitorAsync(request:TestSiteMonitorRequest,requestComplation:@escaping ExecuteResult<TestSiteMonitorResult>) throws {
        detectionJDCloudClient = self
        try TestSiteMonitorExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createProbeTaskAsync(request:CreateProbeTaskRequest,requestComplation:@escaping ExecuteResult<CreateProbeTaskResult>) throws {
        detectionJDCloudClient = self
        try CreateProbeTaskExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableSiteMonitorAsync(request:EnableSiteMonitorRequest,requestComplation:@escaping ExecuteResult<EnableSiteMonitorResult>) throws {
        detectionJDCloudClient = self
        try EnableSiteMonitorExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateProbeTaskAsync(request:UpdateProbeTaskRequest,requestComplation:@escaping ExecuteResult<UpdateProbeTaskResult>) throws {
        detectionJDCloudClient = self
        try UpdateProbeTaskExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeProbeHistoryAsync(request:DescribeProbeHistoryRequest,requestComplation:@escaping ExecuteResult<DescribeProbeHistoryResult>) throws {
        detectionJDCloudClient = self
        try DescribeProbeHistoryExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteProbeTaskAsync(request:DeleteProbeTaskRequest,requestComplation:@escaping ExecuteResult<DeleteProbeTaskResult>) throws {
        detectionJDCloudClient = self
        try DeleteProbeTaskExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteSiteMonitorAsync(request:DeleteSiteMonitorRequest,requestComplation:@escaping ExecuteResult<DeleteSiteMonitorResult>) throws {
        detectionJDCloudClient = self
        try DeleteSiteMonitorExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getSiteMonitorSourceAsync(request:GetSiteMonitorSourceRequest,requestComplation:@escaping ExecuteResult<GetSiteMonitorSourceResult>) throws {
        detectionJDCloudClient = self
        try GetSiteMonitorSourceExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeProbeTaskAsync(request:DescribeProbeTaskRequest,requestComplation:@escaping ExecuteResult<DescribeProbeTaskResult>) throws {
        detectionJDCloudClient = self
        try DescribeProbeTaskExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAgentStatusAsync(request:DescribeAgentStatusRequest,requestComplation:@escaping ExecuteResult<DescribeAgentStatusResult>) throws {
        detectionJDCloudClient = self
        try DescribeAgentStatusExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createSiteMonitorAsync(request:CreateSiteMonitorRequest,requestComplation:@escaping ExecuteResult<CreateSiteMonitorResult>) throws {
        detectionJDCloudClient = self
        try CreateSiteMonitorExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func discribeProbesAsync(request:DiscribeProbesRequest,requestComplation:@escaping ExecuteResult<DiscribeProbesResult>) throws {
        detectionJDCloudClient = self
        try DiscribeProbesExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeMetricDataAmAsync(request:DescribeMetricDataAmRequest,requestComplation:@escaping ExecuteResult<DescribeMetricDataAmResult>) throws {
        detectionJDCloudClient = self
        try DescribeMetricDataAmExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getSiteMonitorAsync(request:GetSiteMonitorRequest,requestComplation:@escaping ExecuteResult<GetSiteMonitorResult>) throws {
        detectionJDCloudClient = self
        try GetSiteMonitorExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func probeTaskEnableAsync(request:ProbeTaskEnableRequest,requestComplation:@escaping ExecuteResult<ProbeTaskEnableResult>) throws {
        detectionJDCloudClient = self
        try ProbeTaskEnableExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateSiteMonitorAsync(request:UpdateSiteMonitorRequest,requestComplation:@escaping ExecuteResult<UpdateSiteMonitorResult>) throws {
        detectionJDCloudClient = self
        try UpdateSiteMonitorExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getSiteMonitorDataPointsAsync(request:GetSiteMonitorDataPointsRequest,requestComplation:@escaping ExecuteResult<GetSiteMonitorDataPointsResult>) throws {
        detectionJDCloudClient = self
        try GetSiteMonitorDataPointsExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeProbeTasksAsync(request:DescribeProbeTasksRequest,requestComplation:@escaping ExecuteResult<DescribeProbeTasksResult>) throws {
        detectionJDCloudClient = self
        try DescribeProbeTasksExecutor(jdCloudClient: detectionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension DetectionJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "detection.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
