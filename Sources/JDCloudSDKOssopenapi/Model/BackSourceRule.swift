/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   back source configuration openapi
   back source configuration openapi

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  回源规则
@objc(BackSourceRule)
public class BackSourceRule:NSObject,Codable{
    /// 回源类型
    var backSourceType:String?
    /// Condition
    var condition:BackSourceRuleCondition?
    /// Address
    var address:BackSourceAddress?
    /// 是否允许query String
    var allowQueryString:Bool?
    /// 是否跟随重定向
    var followRedirects:Bool?
    /// HeaderRule
    var headerRule:BackSourceHeaderRule?



    public override init(){
            super.init()
    }

    enum BackSourceRuleCodingKeys: String, CodingKey {
        case backSourceType
        case condition
        case address
        case allowQueryString
        case followRedirects
        case headerRule
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BackSourceRuleCodingKeys.self)
        if decoderContainer.contains(.backSourceType)
        {
            self.backSourceType = try decoderContainer.decode(String?.self, forKey: .backSourceType)
        }
        if decoderContainer.contains(.condition)
        {
            self.condition = try decoderContainer.decode(BackSourceRuleCondition?.self, forKey: .condition)
        }
        if decoderContainer.contains(.address)
        {
            self.address = try decoderContainer.decode(BackSourceAddress?.self, forKey: .address)
        }
        if decoderContainer.contains(.allowQueryString)
        {
            self.allowQueryString = try decoderContainer.decode(Bool?.self, forKey: .allowQueryString)
        }
        if decoderContainer.contains(.followRedirects)
        {
            self.followRedirects = try decoderContainer.decode(Bool?.self, forKey: .followRedirects)
        }
        if decoderContainer.contains(.headerRule)
        {
            self.headerRule = try decoderContainer.decode(BackSourceHeaderRule?.self, forKey: .headerRule)
        }
    }
}
public extension BackSourceRule{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BackSourceRuleCodingKeys.self)
         try encoderContainer.encode(backSourceType, forKey: .backSourceType)
         try encoderContainer.encode(condition, forKey: .condition)
         try encoderContainer.encode(address, forKey: .address)
         try encoderContainer.encode(allowQueryString, forKey: .allowQueryString)
         try encoderContainer.encode(followRedirects, forKey: .followRedirects)
         try encoderContainer.encode(headerRule, forKey: .headerRule)
    }
}
