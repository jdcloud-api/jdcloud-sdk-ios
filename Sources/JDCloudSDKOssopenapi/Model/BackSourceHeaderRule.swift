/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   back source configuration openapi
   back source configuration openapi

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  回源的header规则
@objc(BackSourceHeaderRule)
public class BackSourceHeaderRule:NSObject,Codable{
    /// 是否允许所有的Http header
    var allowAllHeaders:Bool?
    /// 允许的http header列表
    var allowHeaders:[String?]?
    /// 禁止的http header列表
    var notAllowHeaders:[String?]?
    /// 设置指定http header参数，类型为Map\&lt;String, String&gt;
    var setHeaders:[String:String?]?



    public override init(){
            super.init()
    }

    enum BackSourceHeaderRuleCodingKeys: String, CodingKey {
        case allowAllHeaders
        case allowHeaders
        case notAllowHeaders
        case setHeaders
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BackSourceHeaderRuleCodingKeys.self)
        if decoderContainer.contains(.allowAllHeaders)
        {
            self.allowAllHeaders = try decoderContainer.decode(Bool?.self, forKey: .allowAllHeaders)
        }
        if decoderContainer.contains(.allowHeaders)
        {
            self.allowHeaders = try decoderContainer.decode([String?]?.self, forKey: .allowHeaders)
        }
        if decoderContainer.contains(.notAllowHeaders)
        {
            self.notAllowHeaders = try decoderContainer.decode([String?]?.self, forKey: .notAllowHeaders)
        }
        if decoderContainer.contains(.setHeaders)
        {
            self.setHeaders = try decoderContainer.decode([String:String?]?.self, forKey: .setHeaders)
        }
    }
}
public extension BackSourceHeaderRule{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BackSourceHeaderRuleCodingKeys.self)
         try encoderContainer.encode(allowAllHeaders, forKey: .allowAllHeaders)
         try encoderContainer.encode(allowHeaders, forKey: .allowHeaders)
         try encoderContainer.encode(notAllowHeaders, forKey: .notAllowHeaders)
         try encoderContainer.encode(setHeaders, forKey: .setHeaders)
    }
}
