/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   custom domain name openapi
   custom domain name openapi

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  cName
@objc(CName)
public class CName:NSObject,Codable{
    /// 自定义域名id
    var id:Int?
    /// 用户pin
    var pin:String?
    /// 源站域名
    var originDomain:String?
    /// 自定义域名
    var cname:String?
    /// 自定义域名状态
    var status:Int?
    /// bucket name
    var bucketName:String?
    /// cname是否成功，1：已解析；0:未解析
    var isCName:Int?
    /// 创建时间
    var createTime:String?
    /// http版本，0：http，1：https
    var protoType:Int?



    public override init(){
            super.init()
    }

    enum CNameCodingKeys: String, CodingKey {
        case id
        case pin
        case originDomain
        case cname
        case status
        case bucketName
        case isCName
        case createTime
        case protoType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CNameCodingKeys.self)
        self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        self.originDomain = try decoderContainer.decode(String?.self, forKey: .originDomain)
        self.cname = try decoderContainer.decode(String?.self, forKey: .cname)
        self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        self.bucketName = try decoderContainer.decode(String?.self, forKey: .bucketName)
        self.isCName = try decoderContainer.decode(Int?.self, forKey: .isCName)
        self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        self.protoType = try decoderContainer.decode(Int?.self, forKey: .protoType)
    }
}
public extension CName{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CNameCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(originDomain, forKey: .originDomain)
         try encoderContainer.encode(cname, forKey: .cname)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(bucketName, forKey: .bucketName)
         try encoderContainer.encode(isCName, forKey: .isCName)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(protoType, forKey: .protoType)
    }
}
