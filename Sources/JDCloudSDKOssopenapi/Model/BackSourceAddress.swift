/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   back source configuration openapi
   back source configuration openapi

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  回源地址
@objc(BackSourceAddress)
public class BackSourceAddress:NSObject,Codable{
    /// 地址协议, 如http
    var protocolValue:String?
    /// 域名
    var hostName:String?
    /// 将前缀替换为指定的内容
    var replaceKeyPrefixWith:String?
    /// 将key替换为指定内容
    var replaceKeyWith:String?
    /// 将后缀替换为指定的内容
    var replaceKeySuffixWith:String?



    public override init(){
            super.init()
    }

    enum BackSourceAddressCodingKeys: String, CodingKey {
        case protocolValue = "protocol"
        case hostName
        case replaceKeyPrefixWith
        case replaceKeyWith
        case replaceKeySuffixWith
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BackSourceAddressCodingKeys.self)
        if decoderContainer.contains(.protocolValue)
        {
            self.protocolValue = try decoderContainer.decode(String?.self, forKey: .protocolValue)
        }
        if decoderContainer.contains(.hostName)
        {
            self.hostName = try decoderContainer.decode(String?.self, forKey: .hostName)
        }
        if decoderContainer.contains(.replaceKeyPrefixWith)
        {
            self.replaceKeyPrefixWith = try decoderContainer.decode(String?.self, forKey: .replaceKeyPrefixWith)
        }
        if decoderContainer.contains(.replaceKeyWith)
        {
            self.replaceKeyWith = try decoderContainer.decode(String?.self, forKey: .replaceKeyWith)
        }
        if decoderContainer.contains(.replaceKeySuffixWith)
        {
            self.replaceKeySuffixWith = try decoderContainer.decode(String?.self, forKey: .replaceKeySuffixWith)
        }
    }
}
public extension BackSourceAddress{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BackSourceAddressCodingKeys.self)
         try encoderContainer.encode(protocolValue, forKey: .protocolValue)
         try encoderContainer.encode(hostName, forKey: .hostName)
         try encoderContainer.encode(replaceKeyPrefixWith, forKey: .replaceKeyPrefixWith)
         try encoderContainer.encode(replaceKeyWith, forKey: .replaceKeyWith)
         try encoderContainer.encode(replaceKeySuffixWith, forKey: .replaceKeySuffixWith)
    }
}
