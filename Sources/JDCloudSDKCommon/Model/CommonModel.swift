/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
///  simpleResponses
public class SimpleResponses:NSObject,Codable{
    /// Request ID
    var requestId:String?



    public override init(){
            super.init()
    }

    enum SimpleResponsesCodingKeys: String, CodingKey {
        case requestId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SimpleResponsesCodingKeys.self)
        if decoderContainer.contains(.requestId)
        {
            self.requestId = try decoderContainer.decode(String?.self, forKey: .requestId)
        }
    }
}
public extension SimpleResponses{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SimpleResponsesCodingKeys.self)
         try encoderContainer.encode(requestId, forKey: .requestId)
    }
}
///  quota
public class Quota:NSObject,Codable{
    /// 配额项的名称
    var name:String?
    /// 配额
    var max:Int?
    /// 已使用的数目
    var used:Int?



    public override init(){
            super.init()
    }

    enum QuotaCodingKeys: String, CodingKey {
        case name
        case max
        case used
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QuotaCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.max)
        {
            self.max = try decoderContainer.decode(Int?.self, forKey: .max)
        }
        if decoderContainer.contains(.used)
        {
            self.used = try decoderContainer.decode(Int?.self, forKey: .used)
        }
    }
}
public extension Quota{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QuotaCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(max, forKey: .max)
         try encoderContainer.encode(used, forKey: .used)
    }
}
///  filter
public class Filter:NSObject,Codable{
    /// 过滤条件的名称
    /// Required:true
    var name:String
    /// 过滤条件的操作符，默认eq
    var operatorValue:String?
    /// 过滤条件的值
    /// Required:true
    var values:[String?]?



    public  init(name:String,values:[String?]?){
             self.name = name
             self.values = values
    }

    enum FilterCodingKeys: String, CodingKey {
        case name
        case operatorValue = "operator"
        case values
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: FilterCodingKeys.self)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        if decoderContainer.contains(.operatorValue)
        {
            self.operatorValue = try decoderContainer.decode(String?.self, forKey: .operatorValue)
        }
        self.values = try decoderContainer.decode([String?]?.self, forKey: .values)
    }
}
public extension Filter{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: FilterCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(operatorValue, forKey: .operatorValue)
         try encoderContainer.encode(values, forKey: .values)
    }
}
///  tagFilter
public class TagFilter:NSObject,Codable{
    /// Tag键
    /// Required:true
    var key:String
    /// Tag值
    /// Required:true
    var values:[String?]?



    public  init(key:String,values:[String?]?){
             self.key = key
             self.values = values
    }

    enum TagFilterCodingKeys: String, CodingKey {
        case key
        case values
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagFilterCodingKeys.self)
        self.key = try decoderContainer.decode(String.self, forKey: .key)
        self.values = try decoderContainer.decode([String?]?.self, forKey: .values)
    }
}
public extension TagFilter{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagFilterCodingKeys.self)
         try encoderContainer.encode(key, forKey: .key)
         try encoderContainer.encode(values, forKey: .values)
    }
}
///  err
public class Err:NSObject,Codable{
    /// 同http code
    var code:Int64?
    /// Details
    var details:AnyObject?
    /// Message
    var message:String?
    /// 具体错误
    var status:String?



    public override init(){
            super.init()
    }

    enum ErrCodingKeys: String, CodingKey {
        case code
        case details
        case message
        case status
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ErrCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int64?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
    }
}
public extension Err{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ErrCodingKeys.self)
         try encoderContainer.encode(code, forKey: .code)
         try encoderContainer.encode(message, forKey: .message)
         try encoderContainer.encode(status, forKey: .status)
    }
}
///  sort
public class Sort:NSObject,Codable{
    /// 排序条件的名称
    var name:String?
    /// 排序条件的方向
    var direction:String?



    public override init(){
            super.init()
    }

    enum SortCodingKeys: String, CodingKey {
        case name
        case direction
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SortCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.direction)
        {
            self.direction = try decoderContainer.decode(String?.self, forKey: .direction)
        }
    }
}
public extension Sort{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SortCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(direction, forKey: .direction)
    }
}
///  errorItem
public class ErrorItem:NSObject,Codable{
    /// 出错资源ID
    var id:String?
    /// 错误码，同标准code
    var code:Int64?
    /// Details
    var details:AnyObject?
    /// Message
    var message:String?
    /// 具体错误，同标准status
    var status:String?



    public override init(){
            super.init()
    }

    enum ErrorItemCodingKeys: String, CodingKey {
        case id
        case code
        case details
        case message
        case status
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ErrorItemCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int64?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
    }
}
public extension ErrorItem{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ErrorItemCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(code, forKey: .code)
         try encoderContainer.encode(message, forKey: .message)
         try encoderContainer.encode(status, forKey: .status)
    }
}
///  batchResultDetail
public class BatchResultDetail:NSObject,Codable{
    /// 操作成功的资源个数
    var successCount:Int?
    /// 操作失败的资源及原因
    var failed:[ErrorItem?]?



    public override init(){
            super.init()
    }

    enum BatchResultDetailCodingKeys: String, CodingKey {
        case successCount
        case failed
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BatchResultDetailCodingKeys.self)
        if decoderContainer.contains(.successCount)
        {
            self.successCount = try decoderContainer.decode(Int?.self, forKey: .successCount)
        }
        if decoderContainer.contains(.failed)
        {
            self.failed = try decoderContainer.decode([ErrorItem?]?.self, forKey: .failed)
        }
    }
}
public extension BatchResultDetail{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchResultDetailCodingKeys.self)
         try encoderContainer.encode(successCount, forKey: .successCount)
         try encoderContainer.encode(failed, forKey: .failed)
    }
}
