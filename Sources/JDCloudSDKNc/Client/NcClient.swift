/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   原生容器
   原生容器相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class NcJDCloudClient:NSObject,JDCloudClient{
    
    private final var ncJDCloudClient:NcJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        ncJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "nc.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        ncJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "nc/" + "v1"
    
    public let serviceName: String = "nc"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func associateElasticIpAsync(request:AssociateElasticIpRequest,requestComplation:@escaping ExecuteResult<AssociateElasticIpResult>) throws {
        ncJDCloudClient = self
        try AssociateElasticIpExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSecretAsync(request:DescribeSecretRequest,requestComplation:@escaping ExecuteResult<DescribeSecretResult>) throws {
        ncJDCloudClient = self
        try DescribeSecretExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createSecretAsync(request:CreateSecretRequest,requestComplation:@escaping ExecuteResult<CreateSecretResult>) throws {
        ncJDCloudClient = self
        try CreateSecretExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyContainerAttributeAsync(request:ModifyContainerAttributeRequest,requestComplation:@escaping ExecuteResult<ModifyContainerAttributeResult>) throws {
        ncJDCloudClient = self
        try ModifyContainerAttributeExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteSecretAsync(request:DeleteSecretRequest,requestComplation:@escaping ExecuteResult<DeleteSecretResult>) throws {
        ncJDCloudClient = self
        try DeleteSecretExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disassociateElasticIpAsync(request:DisassociateElasticIpRequest,requestComplation:@escaping ExecuteResult<DisassociateElasticIpResult>) throws {
        ncJDCloudClient = self
        try DisassociateElasticIpExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteContainerAsync(request:DeleteContainerRequest,requestComplation:@escaping ExecuteResult<DeleteContainerResult>) throws {
        ncJDCloudClient = self
        try DeleteContainerExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeContainerAsync(request:DescribeContainerRequest,requestComplation:@escaping ExecuteResult<DescribeContainerResult>) throws {
        ncJDCloudClient = self
        try DescribeContainerExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startContainerAsync(request:StartContainerRequest,requestComplation:@escaping ExecuteResult<StartContainerResult>) throws {
        ncJDCloudClient = self
        try StartContainerExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeContainersAsync(request:DescribeContainersRequest,requestComplation:@escaping ExecuteResult<DescribeContainersResult>) throws {
        ncJDCloudClient = self
        try DescribeContainersExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getLogsAsync(request:GetLogsRequest,requestComplation:@escaping ExecuteResult<GetLogsResult>) throws {
        ncJDCloudClient = self
        try GetLogsExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeQuotaAsync(request:DescribeQuotaRequest,requestComplation:@escaping ExecuteResult<DescribeQuotaResult>) throws {
        ncJDCloudClient = self
        try DescribeQuotaExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createContainersAsync(request:CreateContainersRequest,requestComplation:@escaping ExecuteResult<CreateContainersResult>) throws {
        ncJDCloudClient = self
        try CreateContainersExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopContainerAsync(request:StopContainerRequest,requestComplation:@escaping ExecuteResult<StopContainerResult>) throws {
        ncJDCloudClient = self
        try StopContainerExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSecretsAsync(request:DescribeSecretsRequest,requestComplation:@escaping ExecuteResult<DescribeSecretsResult>) throws {
        ncJDCloudClient = self
        try DescribeSecretsExecutor(jdCloudClient: ncJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension NcJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "nc.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
