/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  secret 的数据
@objc(DockerRegistryData)
public class DockerRegistryData:NSObject,Codable{
    /// registry服务器地址
    /// Required:true
    var server:String
    /// 用户名
    /// Required:true
    var username:String
    /// 密码
    /// Required:true
    var password:String
    /// 邮件地址
    var email:String?



    public  init(server:String,username:String,password:String){
             self.server = server
             self.username = username
             self.password = password
    }

    enum DockerRegistryDataCodingKeys: String, CodingKey {
        case server
        case username
        case password
        case email
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DockerRegistryDataCodingKeys.self)
        self.server = try decoderContainer.decode(String.self, forKey: .server)
        self.username = try decoderContainer.decode(String.self, forKey: .username)
        self.password = try decoderContainer.decode(String.self, forKey: .password)
        if decoderContainer.contains(.email)
        {
            self.email = try decoderContainer.decode(String?.self, forKey: .email)
        }
    }
}
public extension DockerRegistryData{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DockerRegistryDataCodingKeys.self)
         try encoderContainer.encode(server, forKey: .server)
         try encoderContainer.encode(username, forKey: .username)
         try encoderContainer.encode(password, forKey: .password)
         try encoderContainer.encode(email, forKey: .email)
    }
}
