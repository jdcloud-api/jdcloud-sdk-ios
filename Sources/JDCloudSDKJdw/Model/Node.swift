/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  node
@objc(Node)
public class Node:NSObject,Codable{
    /// 节点类型：Master，Segment-N
    var nodeRole:String?
    /// 节点状态，Available：运行， Failure：故障
    var nodeStatus:String?
    /// CPU使用率
    var cpuUtilization:String?
    /// 内存使用率
    var memoryUtilization:String?
    /// 磁盘使用率
    var diskUtilization:String?



    public override init(){
            super.init()
    }

    enum NodeCodingKeys: String, CodingKey {
        case nodeRole
        case nodeStatus
        case cpuUtilization
        case memoryUtilization
        case diskUtilization
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NodeCodingKeys.self)
        if decoderContainer.contains(.nodeRole)
        {
            self.nodeRole = try decoderContainer.decode(String?.self, forKey: .nodeRole)
        }
        if decoderContainer.contains(.nodeStatus)
        {
            self.nodeStatus = try decoderContainer.decode(String?.self, forKey: .nodeStatus)
        }
        if decoderContainer.contains(.cpuUtilization)
        {
            self.cpuUtilization = try decoderContainer.decode(String?.self, forKey: .cpuUtilization)
        }
        if decoderContainer.contains(.memoryUtilization)
        {
            self.memoryUtilization = try decoderContainer.decode(String?.self, forKey: .memoryUtilization)
        }
        if decoderContainer.contains(.diskUtilization)
        {
            self.diskUtilization = try decoderContainer.decode(String?.self, forKey: .diskUtilization)
        }
    }
}
public extension Node{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NodeCodingKeys.self)
         try encoderContainer.encode(nodeRole, forKey: .nodeRole)
         try encoderContainer.encode(nodeStatus, forKey: .nodeStatus)
         try encoderContainer.encode(cpuUtilization, forKey: .cpuUtilization)
         try encoderContainer.encode(memoryUtilization, forKey: .memoryUtilization)
         try encoderContainer.encode(diskUtilization, forKey: .diskUtilization)
    }
}
