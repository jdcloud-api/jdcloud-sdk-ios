/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   账号管理
   API related to Relational Database Service

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCharge
///  dBInstance
public class DBInstance:NSObject,Codable{
    /// 实例ID
    var instanceId:String?
    /// 实例名称
    var instanceName:String?
    /// 节点规格
    var nodeType:String?
    /// CPU核数
    var cpu:Int?
    /// 内存容量，单位GB
    var memory:Int?
    /// 存储空间容量，单位GB
    var storage:Int?
    /// 节点数量
    var nodeNumber:Int?
    /// 可用区
    var azId:String?
    /// VPCID
    var vpcId:String?
    /// 子网ID
    var subnetId:String?
    /// 实例状态
    var instanceStatus:String?
    /// 创建时间
    var createTime:String?
    /// 计费配置
    var charge:Charge?



    public override init(){
            super.init()
    }

    enum DBInstanceCodingKeys: String, CodingKey {
        case instanceId
        case instanceName
        case nodeType
        case cpu
        case memory
        case storage
        case nodeNumber
        case azId
        case vpcId
        case subnetId
        case instanceStatus
        case createTime
        case charge
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DBInstanceCodingKeys.self)
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.instanceName)
        {
            self.instanceName = try decoderContainer.decode(String?.self, forKey: .instanceName)
        }
        if decoderContainer.contains(.nodeType)
        {
            self.nodeType = try decoderContainer.decode(String?.self, forKey: .nodeType)
        }
        if decoderContainer.contains(.cpu)
        {
            self.cpu = try decoderContainer.decode(Int?.self, forKey: .cpu)
        }
        if decoderContainer.contains(.memory)
        {
            self.memory = try decoderContainer.decode(Int?.self, forKey: .memory)
        }
        if decoderContainer.contains(.storage)
        {
            self.storage = try decoderContainer.decode(Int?.self, forKey: .storage)
        }
        if decoderContainer.contains(.nodeNumber)
        {
            self.nodeNumber = try decoderContainer.decode(Int?.self, forKey: .nodeNumber)
        }
        if decoderContainer.contains(.azId)
        {
            self.azId = try decoderContainer.decode(String?.self, forKey: .azId)
        }
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
        if decoderContainer.contains(.instanceStatus)
        {
            self.instanceStatus = try decoderContainer.decode(String?.self, forKey: .instanceStatus)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.charge)
        {
            self.charge = try decoderContainer.decode(Charge?.self, forKey: .charge)
        }
    }
}
public extension DBInstance{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DBInstanceCodingKeys.self)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
         try encoderContainer.encode(instanceName, forKey: .instanceName)
         try encoderContainer.encode(nodeType, forKey: .nodeType)
         try encoderContainer.encode(cpu, forKey: .cpu)
         try encoderContainer.encode(memory, forKey: .memory)
         try encoderContainer.encode(storage, forKey: .storage)
         try encoderContainer.encode(nodeNumber, forKey: .nodeNumber)
         try encoderContainer.encode(azId, forKey: .azId)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(instanceStatus, forKey: .instanceStatus)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(charge, forKey: .charge)
    }
}
///  dBInstanceSpec
public class DBInstanceSpec:NSObject,Codable{
    /// 实例名称，名称只支持数字、小写字母、中文及英文下划线，且不少于2字符不超过32字符；未填写取实例ID作为实例名称
    var instanceName:String?
    /// 节点规格，目前支持jdw.dc1.4xlarge
    /// Required:true
    var nodeType:String
    /// 节点数量，目前支持3个
    /// Required:true
    var nodeNumber:Int
    /// 可用区
    /// Required:true
    var azId:String
    /// VPCID
    /// Required:true
    var vpcId:String
    /// 子网ID
    /// Required:true
    var subnetId:String
    /// 数据库账号，账号只支持数字、大小写字母及英文下划线“_”，不超过16字符 ，非必填
    var accountName:String?
    /// 数据库密码，密码必须包含且只支持大小写字母及数字，不少于8字符不超过16字符，非必填，可创建后设置
    var accountPassword:String?
    /// 计费规格，包括计费类型，计费周期等
    /// Required:true
    var chargeSpec:ChargeSpec



    public  init(nodeType:String,nodeNumber:Int,azId:String,vpcId:String,subnetId:String,chargeSpec:ChargeSpec){
             self.nodeType = nodeType
             self.nodeNumber = nodeNumber
             self.azId = azId
             self.vpcId = vpcId
             self.subnetId = subnetId
             self.chargeSpec = chargeSpec
    }

    enum DBInstanceSpecCodingKeys: String, CodingKey {
        case instanceName
        case nodeType
        case nodeNumber
        case azId
        case vpcId
        case subnetId
        case accountName
        case accountPassword
        case chargeSpec
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DBInstanceSpecCodingKeys.self)
        if decoderContainer.contains(.instanceName)
        {
            self.instanceName = try decoderContainer.decode(String?.self, forKey: .instanceName)
        }
        self.nodeType = try decoderContainer.decode(String.self, forKey: .nodeType)
        self.nodeNumber = try decoderContainer.decode(Int.self, forKey: .nodeNumber)
        self.azId = try decoderContainer.decode(String.self, forKey: .azId)
        self.vpcId = try decoderContainer.decode(String.self, forKey: .vpcId)
        self.subnetId = try decoderContainer.decode(String.self, forKey: .subnetId)
        if decoderContainer.contains(.accountName)
        {
            self.accountName = try decoderContainer.decode(String?.self, forKey: .accountName)
        }
        if decoderContainer.contains(.accountPassword)
        {
            self.accountPassword = try decoderContainer.decode(String?.self, forKey: .accountPassword)
        }
        self.chargeSpec = try decoderContainer.decode(ChargeSpec.self, forKey: .chargeSpec)
    }
}
public extension DBInstanceSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DBInstanceSpecCodingKeys.self)
         try encoderContainer.encode(instanceName, forKey: .instanceName)
         try encoderContainer.encode(nodeType, forKey: .nodeType)
         try encoderContainer.encode(nodeNumber, forKey: .nodeNumber)
         try encoderContainer.encode(azId, forKey: .azId)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(accountName, forKey: .accountName)
         try encoderContainer.encode(accountPassword, forKey: .accountPassword)
         try encoderContainer.encode(chargeSpec, forKey: .chargeSpec)
    }
}
///  dBInstanceAttribute
public class DBInstanceAttribute:NSObject,Codable{
    /// 实例ID
    var instanceId:String?
    /// 实例名称
    var instanceName:String?
    /// 实例规格
    var nodeType:String?
    /// 节点数量
    var nodeNumber:Int?
    /// 可用区
    var azId:String?
    /// VPCID
    var vpcId:String?
    /// 子网ID
    var subnetId:String?
    /// 域名
    var instanceDomain:String?
    /// 端口号
    var instancePort:String?
    /// 数据库账号
    var accountName:String?
    /// 实例状态，Available：运行， Failure：故障 ，Creating：创建中， Deleting：删除中
    var instanceStatus:String?
    /// 创建时间
    var createTime:String?
    /// 节点信息
    var nodes:[Node?]?
    /// 计费配置
    var charge:Charge?



    public override init(){
            super.init()
    }

    enum DBInstanceAttributeCodingKeys: String, CodingKey {
        case instanceId
        case instanceName
        case nodeType
        case nodeNumber
        case azId
        case vpcId
        case subnetId
        case instanceDomain
        case instancePort
        case accountName
        case instanceStatus
        case createTime
        case nodes
        case charge
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DBInstanceAttributeCodingKeys.self)
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.instanceName)
        {
            self.instanceName = try decoderContainer.decode(String?.self, forKey: .instanceName)
        }
        if decoderContainer.contains(.nodeType)
        {
            self.nodeType = try decoderContainer.decode(String?.self, forKey: .nodeType)
        }
        if decoderContainer.contains(.nodeNumber)
        {
            self.nodeNumber = try decoderContainer.decode(Int?.self, forKey: .nodeNumber)
        }
        if decoderContainer.contains(.azId)
        {
            self.azId = try decoderContainer.decode(String?.self, forKey: .azId)
        }
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
        if decoderContainer.contains(.instanceDomain)
        {
            self.instanceDomain = try decoderContainer.decode(String?.self, forKey: .instanceDomain)
        }
        if decoderContainer.contains(.instancePort)
        {
            self.instancePort = try decoderContainer.decode(String?.self, forKey: .instancePort)
        }
        if decoderContainer.contains(.accountName)
        {
            self.accountName = try decoderContainer.decode(String?.self, forKey: .accountName)
        }
        if decoderContainer.contains(.instanceStatus)
        {
            self.instanceStatus = try decoderContainer.decode(String?.self, forKey: .instanceStatus)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.nodes)
        {
            self.nodes = try decoderContainer.decode([Node?]?.self, forKey: .nodes)
        }
        if decoderContainer.contains(.charge)
        {
            self.charge = try decoderContainer.decode(Charge?.self, forKey: .charge)
        }
    }
}
public extension DBInstanceAttribute{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DBInstanceAttributeCodingKeys.self)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
         try encoderContainer.encode(instanceName, forKey: .instanceName)
         try encoderContainer.encode(nodeType, forKey: .nodeType)
         try encoderContainer.encode(nodeNumber, forKey: .nodeNumber)
         try encoderContainer.encode(azId, forKey: .azId)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(instanceDomain, forKey: .instanceDomain)
         try encoderContainer.encode(instancePort, forKey: .instancePort)
         try encoderContainer.encode(accountName, forKey: .accountName)
         try encoderContainer.encode(instanceStatus, forKey: .instanceStatus)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(nodes, forKey: .nodes)
         try encoderContainer.encode(charge, forKey: .charge)
    }
}
///  nodeType
public class NodeType:NSObject,Codable{
    /// 节点规格代码
    var nodeTypeValue:String?
    /// CPU核数
    var cpu:Int?
    /// 内存容量，单位GB
    var memory:Int?
    /// 存储空间容量，单位GB
    var storage:Int?
    /// 最小节点数量
    var miniNodeNumber:Int?
    /// 最大节点数量
    var maxNodeNumber:Int?



    public override init(){
            super.init()
    }

    enum NodeTypeCodingKeys: String, CodingKey {
        case nodeTypeValue = "nodeType"
        case cpu
        case memory
        case storage
        case miniNodeNumber
        case maxNodeNumber
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NodeTypeCodingKeys.self)
        if decoderContainer.contains(.nodeTypeValue)
        {
            self.nodeTypeValue = try decoderContainer.decode(String?.self, forKey: .nodeTypeValue)
        }
        if decoderContainer.contains(.cpu)
        {
            self.cpu = try decoderContainer.decode(Int?.self, forKey: .cpu)
        }
        if decoderContainer.contains(.memory)
        {
            self.memory = try decoderContainer.decode(Int?.self, forKey: .memory)
        }
        if decoderContainer.contains(.storage)
        {
            self.storage = try decoderContainer.decode(Int?.self, forKey: .storage)
        }
        if decoderContainer.contains(.miniNodeNumber)
        {
            self.miniNodeNumber = try decoderContainer.decode(Int?.self, forKey: .miniNodeNumber)
        }
        if decoderContainer.contains(.maxNodeNumber)
        {
            self.maxNodeNumber = try decoderContainer.decode(Int?.self, forKey: .maxNodeNumber)
        }
    }
}
public extension NodeType{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NodeTypeCodingKeys.self)
         try encoderContainer.encode(nodeTypeValue, forKey: .nodeTypeValue)
         try encoderContainer.encode(cpu, forKey: .cpu)
         try encoderContainer.encode(memory, forKey: .memory)
         try encoderContainer.encode(storage, forKey: .storage)
         try encoderContainer.encode(miniNodeNumber, forKey: .miniNodeNumber)
         try encoderContainer.encode(maxNodeNumber, forKey: .maxNodeNumber)
    }
}
///  node
public class Node:NSObject,Codable{
    /// 节点类型：Master，Segment-N
    var nodeRole:String?
    /// 节点状态，Available：运行， Failure：故障
    var nodeStatus:String?
    /// CPU使用率
    var cpuUtilization:String?
    /// 内存使用率
    var memoryUtilization:String?
    /// 磁盘使用率
    var diskUtilization:String?



    public override init(){
            super.init()
    }

    enum NodeCodingKeys: String, CodingKey {
        case nodeRole
        case nodeStatus
        case cpuUtilization
        case memoryUtilization
        case diskUtilization
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NodeCodingKeys.self)
        if decoderContainer.contains(.nodeRole)
        {
            self.nodeRole = try decoderContainer.decode(String?.self, forKey: .nodeRole)
        }
        if decoderContainer.contains(.nodeStatus)
        {
            self.nodeStatus = try decoderContainer.decode(String?.self, forKey: .nodeStatus)
        }
        if decoderContainer.contains(.cpuUtilization)
        {
            self.cpuUtilization = try decoderContainer.decode(String?.self, forKey: .cpuUtilization)
        }
        if decoderContainer.contains(.memoryUtilization)
        {
            self.memoryUtilization = try decoderContainer.decode(String?.self, forKey: .memoryUtilization)
        }
        if decoderContainer.contains(.diskUtilization)
        {
            self.diskUtilization = try decoderContainer.decode(String?.self, forKey: .diskUtilization)
        }
    }
}
public extension Node{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NodeCodingKeys.self)
         try encoderContainer.encode(nodeRole, forKey: .nodeRole)
         try encoderContainer.encode(nodeStatus, forKey: .nodeStatus)
         try encoderContainer.encode(cpuUtilization, forKey: .cpuUtilization)
         try encoderContainer.encode(memoryUtilization, forKey: .memoryUtilization)
         try encoderContainer.encode(diskUtilization, forKey: .diskUtilization)
    }
}
