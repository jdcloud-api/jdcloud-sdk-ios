/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCharge

///  dBInstanceSpec
@objc(DBInstanceSpec)
public class DBInstanceSpec:NSObject,Codable{
    /// 实例名称，名称只支持数字、小写字母、中文及英文下划线，且不少于2字符不超过32字符；未填写取实例ID作为实例名称
    var instanceName:String?
    /// 节点规格，目前支持jdw.dc1.4xlarge
    /// Required:true
    var nodeType:String
    /// 节点数量，目前支持3个
    /// Required:true
    var nodeNumber:Int
    /// 可用区
    /// Required:true
    var azId:String
    /// VPCID
    /// Required:true
    var vpcId:String
    /// 子网ID
    /// Required:true
    var subnetId:String
    /// 数据库账号，账号只支持数字、大小写字母及英文下划线“_”，不超过16字符 ，非必填
    var accountName:String?
    /// 数据库密码，密码必须包含且只支持大小写字母及数字，不少于8字符不超过16字符，非必填，可创建后设置
    var accountPassword:String?
    /// 计费规格，包括计费类型，计费周期等
    /// Required:true
    var chargeSpec:ChargeSpec



    public  init(nodeType:String,nodeNumber:Int,azId:String,vpcId:String,subnetId:String,chargeSpec:ChargeSpec){
             self.nodeType = nodeType
             self.nodeNumber = nodeNumber
             self.azId = azId
             self.vpcId = vpcId
             self.subnetId = subnetId
             self.chargeSpec = chargeSpec
    }

    enum DBInstanceSpecCodingKeys: String, CodingKey {
        case instanceName
        case nodeType
        case nodeNumber
        case azId
        case vpcId
        case subnetId
        case accountName
        case accountPassword
        case chargeSpec
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DBInstanceSpecCodingKeys.self)
        if decoderContainer.contains(.instanceName)
        {
            self.instanceName = try decoderContainer.decode(String?.self, forKey: .instanceName)
        }
        self.nodeType = try decoderContainer.decode(String.self, forKey: .nodeType)
        self.nodeNumber = try decoderContainer.decode(Int.self, forKey: .nodeNumber)
        self.azId = try decoderContainer.decode(String.self, forKey: .azId)
        self.vpcId = try decoderContainer.decode(String.self, forKey: .vpcId)
        self.subnetId = try decoderContainer.decode(String.self, forKey: .subnetId)
        if decoderContainer.contains(.accountName)
        {
            self.accountName = try decoderContainer.decode(String?.self, forKey: .accountName)
        }
        if decoderContainer.contains(.accountPassword)
        {
            self.accountPassword = try decoderContainer.decode(String?.self, forKey: .accountPassword)
        }
        self.chargeSpec = try decoderContainer.decode(ChargeSpec.self, forKey: .chargeSpec)
    }
}
public extension DBInstanceSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DBInstanceSpecCodingKeys.self)
         try encoderContainer.encode(instanceName, forKey: .instanceName)
         try encoderContainer.encode(nodeType, forKey: .nodeType)
         try encoderContainer.encode(nodeNumber, forKey: .nodeNumber)
         try encoderContainer.encode(azId, forKey: .azId)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(accountName, forKey: .accountName)
         try encoderContainer.encode(accountPassword, forKey: .accountPassword)
         try encoderContainer.encode(chargeSpec, forKey: .chargeSpec)
    }
}
