/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  milestone
@objc(Milestone)
public class Milestone:NSObject,Codable{
    /// 里程碑ID
    var milestoneId:String?
    /// 应用ID
    var appId:String?
    /// 应用名称
    var appName:String?
    /// 地域
    var regionId:String?
    /// 描述
    var desc:String?
    /// 部署方式：1滚动部署，2蓝绿部署
    var deployMethod:Int?
    /// 部署来源：1url，2云编译，3云存储
    var deploySource:Int?
    /// 下载url
    var downloadUrl:String?
    /// md5
    var md5:String?
    /// 云编译项目名
    var compileProject:String?
    /// 云编译构建序号
    var compileSeries:String?
    /// 云存储空间
    var ossSpace:String?
    /// 云存储目录
    var ossDir:String?
    /// 文件类型：1.tar，2.zip,3.tar.gz
    var fileType:Int?
    /// 最新部署时间
    var lastDeployTime:Int?
    /// 部署组
    var deployGroup:[String?]?



    public override init(){
            super.init()
    }

    enum MilestoneCodingKeys: String, CodingKey {
        case milestoneId
        case appId
        case appName
        case regionId
        case desc
        case deployMethod
        case deploySource
        case downloadUrl
        case md5
        case compileProject
        case compileSeries
        case ossSpace
        case ossDir
        case fileType
        case lastDeployTime
        case deployGroup
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: MilestoneCodingKeys.self)
        if decoderContainer.contains(.milestoneId)
        {
            self.milestoneId = try decoderContainer.decode(String?.self, forKey: .milestoneId)
        }
        if decoderContainer.contains(.appId)
        {
            self.appId = try decoderContainer.decode(String?.self, forKey: .appId)
        }
        if decoderContainer.contains(.appName)
        {
            self.appName = try decoderContainer.decode(String?.self, forKey: .appName)
        }
        if decoderContainer.contains(.regionId)
        {
            self.regionId = try decoderContainer.decode(String?.self, forKey: .regionId)
        }
        if decoderContainer.contains(.desc)
        {
            self.desc = try decoderContainer.decode(String?.self, forKey: .desc)
        }
        if decoderContainer.contains(.deployMethod)
        {
            self.deployMethod = try decoderContainer.decode(Int?.self, forKey: .deployMethod)
        }
        if decoderContainer.contains(.deploySource)
        {
            self.deploySource = try decoderContainer.decode(Int?.self, forKey: .deploySource)
        }
        if decoderContainer.contains(.downloadUrl)
        {
            self.downloadUrl = try decoderContainer.decode(String?.self, forKey: .downloadUrl)
        }
        if decoderContainer.contains(.md5)
        {
            self.md5 = try decoderContainer.decode(String?.self, forKey: .md5)
        }
        if decoderContainer.contains(.compileProject)
        {
            self.compileProject = try decoderContainer.decode(String?.self, forKey: .compileProject)
        }
        if decoderContainer.contains(.compileSeries)
        {
            self.compileSeries = try decoderContainer.decode(String?.self, forKey: .compileSeries)
        }
        if decoderContainer.contains(.ossSpace)
        {
            self.ossSpace = try decoderContainer.decode(String?.self, forKey: .ossSpace)
        }
        if decoderContainer.contains(.ossDir)
        {
            self.ossDir = try decoderContainer.decode(String?.self, forKey: .ossDir)
        }
        if decoderContainer.contains(.fileType)
        {
            self.fileType = try decoderContainer.decode(Int?.self, forKey: .fileType)
        }
        if decoderContainer.contains(.lastDeployTime)
        {
            self.lastDeployTime = try decoderContainer.decode(Int?.self, forKey: .lastDeployTime)
        }
        if decoderContainer.contains(.deployGroup)
        {
            self.deployGroup = try decoderContainer.decode([String?]?.self, forKey: .deployGroup)
        }
    }
}
public extension Milestone{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: MilestoneCodingKeys.self)
         try encoderContainer.encode(milestoneId, forKey: .milestoneId)
         try encoderContainer.encode(appId, forKey: .appId)
         try encoderContainer.encode(appName, forKey: .appName)
         try encoderContainer.encode(regionId, forKey: .regionId)
         try encoderContainer.encode(desc, forKey: .desc)
         try encoderContainer.encode(deployMethod, forKey: .deployMethod)
         try encoderContainer.encode(deploySource, forKey: .deploySource)
         try encoderContainer.encode(downloadUrl, forKey: .downloadUrl)
         try encoderContainer.encode(md5, forKey: .md5)
         try encoderContainer.encode(compileProject, forKey: .compileProject)
         try encoderContainer.encode(compileSeries, forKey: .compileSeries)
         try encoderContainer.encode(ossSpace, forKey: .ossSpace)
         try encoderContainer.encode(ossDir, forKey: .ossDir)
         try encoderContainer.encode(fileType, forKey: .fileType)
         try encoderContainer.encode(lastDeployTime, forKey: .lastDeployTime)
         try encoderContainer.encode(deployGroup, forKey: .deployGroup)
    }
}
