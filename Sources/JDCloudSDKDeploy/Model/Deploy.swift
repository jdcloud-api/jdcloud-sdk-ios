/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  deploy
@objc(Deploy)
public class Deploy:NSObject,Codable{
    /// 上线单ID
    var deployId:String?
    /// 应用ID
    var appId:String?
    /// 应用名称
    var appName:String?
    /// 部署组名称
    var groupId:String?
    /// 部署组ID
    var groupName:String?
    /// 地域
    var regionId:String?
    /// 部署开始时间
    var startTime:Int?
    /// 部署结束时间
    var endTime:Int?
    /// 部署状态 0待部署, 1部署中, 2成功, 3失败, 4回滚中， 5回滚成功， 6回滚失败， 7已取消
    var deployStatus:Int?
    /// 描述
    var desc:String?
    /// 部署方式：1滚动部署，2蓝绿部署
    var deployMethod:Int?
    /// 部署来源：1url，2云编译，3云存储
    var deploySource:Int?
    /// 部署操作
    var deployCmd:String?
    /// 1使用输入的操作，2使用程序自带操作
    var cmdSource:Int?
    /// 部署操作展示格式：1form,2ymal
    var cmdType:Int?
    /// 项目类型 1tomcat,2
    var productType:Int?
    /// 下载url
    var downloadUrl:String?
    /// md5
    var md5:String?
    /// 云编译项目名
    var compileProject:String?
    /// 云编译构建序号
    var compileSeries:String?
    /// 云存储空间
    var ossSpace:String?
    /// 云存储目录
    var ossDir:String?
    /// 文件类型：1.tar，2.zio,3.tar.gz
    var fileType:Int?
    /// 是否可回滚 1是，2否
    var rollbackAble:Int?
    /// 并发单位
    var concurrencyUnit:Int?
    /// 并发机器数
    var concurrencyNum:Int?
    /// 并发度
    var concurrencyPct:Int?
    /// 负载均衡：1启动，2禁用
    var lbStatus:Int?
    /// lb实例
    var lbInstance:String?
    /// lb 后端实例
    var lbBackend:String?
    /// 同名文件处理方式：1部署失败，2覆盖，3保留
    var repeatPolicy:Int?
    /// 通知频率：1异常发送，2每次发送
    var noticeTrigger:Int?
    /// 通知方式：1消息，2邮件，3短信
    var noticeMethod:[String?]?
    /// 使用分布式服务框架：0不使用，1使用
    var jdsfEnabled:Int?



    public override init(){
            super.init()
    }

    enum DeployCodingKeys: String, CodingKey {
        case deployId
        case appId
        case appName
        case groupId
        case groupName
        case regionId
        case startTime
        case endTime
        case deployStatus
        case desc
        case deployMethod
        case deploySource
        case deployCmd
        case cmdSource
        case cmdType
        case productType
        case downloadUrl
        case md5
        case compileProject
        case compileSeries
        case ossSpace
        case ossDir
        case fileType
        case rollbackAble
        case concurrencyUnit
        case concurrencyNum
        case concurrencyPct
        case lbStatus
        case lbInstance
        case lbBackend
        case repeatPolicy
        case noticeTrigger
        case noticeMethod
        case jdsfEnabled
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeployCodingKeys.self)
        if decoderContainer.contains(.deployId)
        {
            self.deployId = try decoderContainer.decode(String?.self, forKey: .deployId)
        }
        if decoderContainer.contains(.appId)
        {
            self.appId = try decoderContainer.decode(String?.self, forKey: .appId)
        }
        if decoderContainer.contains(.appName)
        {
            self.appName = try decoderContainer.decode(String?.self, forKey: .appName)
        }
        if decoderContainer.contains(.groupId)
        {
            self.groupId = try decoderContainer.decode(String?.self, forKey: .groupId)
        }
        if decoderContainer.contains(.groupName)
        {
            self.groupName = try decoderContainer.decode(String?.self, forKey: .groupName)
        }
        if decoderContainer.contains(.regionId)
        {
            self.regionId = try decoderContainer.decode(String?.self, forKey: .regionId)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(Int?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(Int?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.deployStatus)
        {
            self.deployStatus = try decoderContainer.decode(Int?.self, forKey: .deployStatus)
        }
        if decoderContainer.contains(.desc)
        {
            self.desc = try decoderContainer.decode(String?.self, forKey: .desc)
        }
        if decoderContainer.contains(.deployMethod)
        {
            self.deployMethod = try decoderContainer.decode(Int?.self, forKey: .deployMethod)
        }
        if decoderContainer.contains(.deploySource)
        {
            self.deploySource = try decoderContainer.decode(Int?.self, forKey: .deploySource)
        }
        if decoderContainer.contains(.deployCmd)
        {
            self.deployCmd = try decoderContainer.decode(String?.self, forKey: .deployCmd)
        }
        if decoderContainer.contains(.cmdSource)
        {
            self.cmdSource = try decoderContainer.decode(Int?.self, forKey: .cmdSource)
        }
        if decoderContainer.contains(.cmdType)
        {
            self.cmdType = try decoderContainer.decode(Int?.self, forKey: .cmdType)
        }
        if decoderContainer.contains(.productType)
        {
            self.productType = try decoderContainer.decode(Int?.self, forKey: .productType)
        }
        if decoderContainer.contains(.downloadUrl)
        {
            self.downloadUrl = try decoderContainer.decode(String?.self, forKey: .downloadUrl)
        }
        if decoderContainer.contains(.md5)
        {
            self.md5 = try decoderContainer.decode(String?.self, forKey: .md5)
        }
        if decoderContainer.contains(.compileProject)
        {
            self.compileProject = try decoderContainer.decode(String?.self, forKey: .compileProject)
        }
        if decoderContainer.contains(.compileSeries)
        {
            self.compileSeries = try decoderContainer.decode(String?.self, forKey: .compileSeries)
        }
        if decoderContainer.contains(.ossSpace)
        {
            self.ossSpace = try decoderContainer.decode(String?.self, forKey: .ossSpace)
        }
        if decoderContainer.contains(.ossDir)
        {
            self.ossDir = try decoderContainer.decode(String?.self, forKey: .ossDir)
        }
        if decoderContainer.contains(.fileType)
        {
            self.fileType = try decoderContainer.decode(Int?.self, forKey: .fileType)
        }
        if decoderContainer.contains(.rollbackAble)
        {
            self.rollbackAble = try decoderContainer.decode(Int?.self, forKey: .rollbackAble)
        }
        if decoderContainer.contains(.concurrencyUnit)
        {
            self.concurrencyUnit = try decoderContainer.decode(Int?.self, forKey: .concurrencyUnit)
        }
        if decoderContainer.contains(.concurrencyNum)
        {
            self.concurrencyNum = try decoderContainer.decode(Int?.self, forKey: .concurrencyNum)
        }
        if decoderContainer.contains(.concurrencyPct)
        {
            self.concurrencyPct = try decoderContainer.decode(Int?.self, forKey: .concurrencyPct)
        }
        if decoderContainer.contains(.lbStatus)
        {
            self.lbStatus = try decoderContainer.decode(Int?.self, forKey: .lbStatus)
        }
        if decoderContainer.contains(.lbInstance)
        {
            self.lbInstance = try decoderContainer.decode(String?.self, forKey: .lbInstance)
        }
        if decoderContainer.contains(.lbBackend)
        {
            self.lbBackend = try decoderContainer.decode(String?.self, forKey: .lbBackend)
        }
        if decoderContainer.contains(.repeatPolicy)
        {
            self.repeatPolicy = try decoderContainer.decode(Int?.self, forKey: .repeatPolicy)
        }
        if decoderContainer.contains(.noticeTrigger)
        {
            self.noticeTrigger = try decoderContainer.decode(Int?.self, forKey: .noticeTrigger)
        }
        if decoderContainer.contains(.noticeMethod)
        {
            self.noticeMethod = try decoderContainer.decode([String?]?.self, forKey: .noticeMethod)
        }
        if decoderContainer.contains(.jdsfEnabled)
        {
            self.jdsfEnabled = try decoderContainer.decode(Int?.self, forKey: .jdsfEnabled)
        }
    }
}
public extension Deploy{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeployCodingKeys.self)
         try encoderContainer.encode(deployId, forKey: .deployId)
         try encoderContainer.encode(appId, forKey: .appId)
         try encoderContainer.encode(appName, forKey: .appName)
         try encoderContainer.encode(groupId, forKey: .groupId)
         try encoderContainer.encode(groupName, forKey: .groupName)
         try encoderContainer.encode(regionId, forKey: .regionId)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
         try encoderContainer.encode(deployStatus, forKey: .deployStatus)
         try encoderContainer.encode(desc, forKey: .desc)
         try encoderContainer.encode(deployMethod, forKey: .deployMethod)
         try encoderContainer.encode(deploySource, forKey: .deploySource)
         try encoderContainer.encode(deployCmd, forKey: .deployCmd)
         try encoderContainer.encode(cmdSource, forKey: .cmdSource)
         try encoderContainer.encode(cmdType, forKey: .cmdType)
         try encoderContainer.encode(productType, forKey: .productType)
         try encoderContainer.encode(downloadUrl, forKey: .downloadUrl)
         try encoderContainer.encode(md5, forKey: .md5)
         try encoderContainer.encode(compileProject, forKey: .compileProject)
         try encoderContainer.encode(compileSeries, forKey: .compileSeries)
         try encoderContainer.encode(ossSpace, forKey: .ossSpace)
         try encoderContainer.encode(ossDir, forKey: .ossDir)
         try encoderContainer.encode(fileType, forKey: .fileType)
         try encoderContainer.encode(rollbackAble, forKey: .rollbackAble)
         try encoderContainer.encode(concurrencyUnit, forKey: .concurrencyUnit)
         try encoderContainer.encode(concurrencyNum, forKey: .concurrencyNum)
         try encoderContainer.encode(concurrencyPct, forKey: .concurrencyPct)
         try encoderContainer.encode(lbStatus, forKey: .lbStatus)
         try encoderContainer.encode(lbInstance, forKey: .lbInstance)
         try encoderContainer.encode(lbBackend, forKey: .lbBackend)
         try encoderContainer.encode(repeatPolicy, forKey: .repeatPolicy)
         try encoderContainer.encode(noticeTrigger, forKey: .noticeTrigger)
         try encoderContainer.encode(noticeMethod, forKey: .noticeMethod)
         try encoderContainer.encode(jdsfEnabled, forKey: .jdsfEnabled)
    }
}
