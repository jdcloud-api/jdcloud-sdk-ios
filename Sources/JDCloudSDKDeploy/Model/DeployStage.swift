/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  deployStage
@objc(DeployStage)
public class DeployStage:NSObject,Codable{
    /// code
    var stageCode:Int?
    /// name
    var stageName:String?
    /// 状态（0未执行，1执行，2失败）
    var stageStatus:Int?
    /// 描述
    var stageMessage:String?
    /// 部署完成的实例数
    var succeedCount:Int?
    /// 所有实例数
    var totalCount:Int?
    /// CreateTime
    var createTime:Int?
    /// UpdateTime
    var updateTime:Int?



    public override init(){
            super.init()
    }

    enum DeployStageCodingKeys: String, CodingKey {
        case stageCode
        case stageName
        case stageStatus
        case stageMessage
        case succeedCount
        case totalCount
        case createTime
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeployStageCodingKeys.self)
        if decoderContainer.contains(.stageCode)
        {
            self.stageCode = try decoderContainer.decode(Int?.self, forKey: .stageCode)
        }
        if decoderContainer.contains(.stageName)
        {
            self.stageName = try decoderContainer.decode(String?.self, forKey: .stageName)
        }
        if decoderContainer.contains(.stageStatus)
        {
            self.stageStatus = try decoderContainer.decode(Int?.self, forKey: .stageStatus)
        }
        if decoderContainer.contains(.stageMessage)
        {
            self.stageMessage = try decoderContainer.decode(String?.self, forKey: .stageMessage)
        }
        if decoderContainer.contains(.succeedCount)
        {
            self.succeedCount = try decoderContainer.decode(Int?.self, forKey: .succeedCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(Int?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(Int?.self, forKey: .updateTime)
        }
    }
}
public extension DeployStage{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeployStageCodingKeys.self)
         try encoderContainer.encode(stageCode, forKey: .stageCode)
         try encoderContainer.encode(stageName, forKey: .stageName)
         try encoderContainer.encode(stageStatus, forKey: .stageStatus)
         try encoderContainer.encode(stageMessage, forKey: .stageMessage)
         try encoderContainer.encode(succeedCount, forKey: .succeedCount)
         try encoderContainer.encode(totalCount, forKey: .totalCount)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
