/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  pinInfo
@objc(PinInfo)
public class PinInfo:NSObject,Codable{
    /// pin
    var pin:String?
    /// 应用数量限制
    var appMax:Int?
    /// 当前应用数量
    var appCount:Int?
    /// 部署组数量限制
    var groupMax:Int?



    public override init(){
            super.init()
    }

    enum PinInfoCodingKeys: String, CodingKey {
        case pin
        case appMax
        case appCount
        case groupMax
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PinInfoCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.appMax)
        {
            self.appMax = try decoderContainer.decode(Int?.self, forKey: .appMax)
        }
        if decoderContainer.contains(.appCount)
        {
            self.appCount = try decoderContainer.decode(Int?.self, forKey: .appCount)
        }
        if decoderContainer.contains(.groupMax)
        {
            self.groupMax = try decoderContainer.decode(Int?.self, forKey: .groupMax)
        }
    }
}
public extension PinInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PinInfoCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(appMax, forKey: .appMax)
         try encoderContainer.encode(appCount, forKey: .appCount)
         try encoderContainer.encode(groupMax, forKey: .groupMax)
    }
}
