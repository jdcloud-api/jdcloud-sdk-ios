/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云部署
   云部署应用、部署组、部署任务相关的接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class DeployJDCloudClient:NSObject,JDCloudClient{
    
    private final var deployJDCloudClient:DeployJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        deployJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "deploy.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        deployJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "deploy/" + "v1"
    
    public let serviceName: String = "deploy"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func describeAppAsync(request:DescribeAppRequest,requestComplation:@escaping ExecuteResult<DescribeAppResult>) throws {
        deployJDCloudClient = self
        try DescribeAppExecutor(jdCloudClient: deployJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createDeployAsync(request:CreateDeployRequest,requestComplation:@escaping ExecuteResult<CreateDeployResult>) throws {
        deployJDCloudClient = self
        try CreateDeployExecutor(jdCloudClient: deployJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeDeployAsync(request:DescribeDeployRequest,requestComplation:@escaping ExecuteResult<DescribeDeployResult>) throws {
        deployJDCloudClient = self
        try DescribeDeployExecutor(jdCloudClient: deployJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAppsAsync(request:DescribeAppsRequest,requestComplation:@escaping ExecuteResult<DescribeAppsResult>) throws {
        deployJDCloudClient = self
        try DescribeAppsExecutor(jdCloudClient: deployJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeGroupsAsync(request:DescribeGroupsRequest,requestComplation:@escaping ExecuteResult<DescribeGroupsResult>) throws {
        deployJDCloudClient = self
        try DescribeGroupsExecutor(jdCloudClient: deployJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeGroupAsync(request:DescribeGroupRequest,requestComplation:@escaping ExecuteResult<DescribeGroupResult>) throws {
        deployJDCloudClient = self
        try DescribeGroupExecutor(jdCloudClient: deployJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension DeployJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "deploy.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
