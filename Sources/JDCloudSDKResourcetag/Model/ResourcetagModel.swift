/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Resource-Tag-APIs
   资源标签接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
///  getCostAttrTagKeysResult
public class GetCostAttrTagKeysResult:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 标签键及其费用属性相关信息
    var costAttrTagKeyInfos:[CostAttrTagKeyInfo?]?
    /// 分页信息
    var pageInfo:PageInfo?



    public override init(){
            super.init()
    }

    enum GetCostAttrTagKeysResultCodingKeys: String, CodingKey {
        case pin
        case costAttrTagKeyInfos
        case pageInfo
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetCostAttrTagKeysResultCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.costAttrTagKeyInfos)
        {
            self.costAttrTagKeyInfos = try decoderContainer.decode([CostAttrTagKeyInfo?]?.self, forKey: .costAttrTagKeyInfos)
        }
        if decoderContainer.contains(.pageInfo)
        {
            self.pageInfo = try decoderContainer.decode(PageInfo?.self, forKey: .pageInfo)
        }
    }
}
public extension GetCostAttrTagKeysResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetCostAttrTagKeysResultCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(costAttrTagKeyInfos, forKey: .costAttrTagKeyInfos)
         try encoderContainer.encode(pageInfo, forKey: .pageInfo)
    }
}
///  tag
public class Tag:NSObject,Codable{
    /// 标签键
    /// Required:true
    var key:String
    /// 标签值
    /// Required:true
    var value:String



    public  init(key:String,value:String){
             self.key = key
             self.value = value
    }

    enum TagCodingKeys: String, CodingKey {
        case key
        case value
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagCodingKeys.self)
        self.key = try decoderContainer.decode(String.self, forKey: .key)
        self.value = try decoderContainer.decode(String.self, forKey: .value)
    }
}
public extension Tag{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagCodingKeys.self)
         try encoderContainer.encode(key, forKey: .key)
         try encoderContainer.encode(value, forKey: .value)
    }
}
///  tagsResourcesInfo
public class TagsResourcesInfo:NSObject,Codable{
    /// 标签键
    var tagKey:String?
    /// 标签值
    var tagValue:String?
    /// 标签绑定的云主机资源个数
    var vmResourceCount:Int64?
    /// 标签绑定的云硬盘资源个数
    var diskResourceCount:Int64?
    /// 标签绑定的数据库SQL Server资源个数
    var sqlServerResourceCount:Int64?
    /// 标签绑定的MongoDB资源个数
    var mongodbResourceCount:Int64?
    /// 标签绑定的公网IP资源个数
    var ipResourceCount:Int64?
    /// 标签绑定的ElasticSearch资源个数
    var esResourceCount:Int64?
    /// 标签绑定的消息队列JCQ资源个数
    var jcqResourceCount:Int64?
    /// 标签绑定的分布式关系型数据库DRDS资源个数
    var drdsResourceCount:Int64?
    /// 标签绑定的Memcached资源个数
    var memcachedResourceCount:Int64?
    /// 标签绑定的云缓存Redis资源个数
    var redisResourceCount:Int64?
    /// 标签绑定的数据库(MySQL)资源个数
    var databaseResourceCount:Int64?
    /// 标签绑定的数据库[只读]资源个数
    var dbRoResourceCount:Int64?
    /// 标签绑定的Percona资源个数
    var perconaResourceCount:Int64?
    /// 标签绑定的MariaDB资源个数
    var mariadbResourceCount:Int64?
    /// 标签绑定的MariaDB[只读]资源个数
    var mariadbRoResourceCount:Int64?
    /// 标签绑定的PostgreSQL资源个数
    var pgResourceCount:Int64?
    /// 标签绑定的CDN资源个数
    var cdnResourceCount:Int64?
    /// 标签绑定的原生容器实例资源个数
    var nativecontainerResourceCount:Int64?
    /// 标签绑定的原生容器Pod资源个数
    var podResourceCount:Int64?
    /// 标签绑定的队列服务资源个数
    var jqsResourceCount:Int64?
    /// 标签绑定的云文件服务资源个数
    var zfsResourceCount:Int64?
    /// 标签绑定的Kubernetes集群资源个数
    var kubernetesNodegroupResourceCount:Int64?



    public override init(){
            super.init()
    }

    enum TagsResourcesInfoCodingKeys: String, CodingKey {
        case tagKey
        case tagValue
        case vmResourceCount
        case diskResourceCount
        case sqlServerResourceCount
        case mongodbResourceCount
        case ipResourceCount
        case esResourceCount
        case jcqResourceCount
        case drdsResourceCount
        case memcachedResourceCount
        case redisResourceCount
        case databaseResourceCount
        case dbRoResourceCount
        case perconaResourceCount
        case mariadbResourceCount
        case mariadbRoResourceCount
        case pgResourceCount
        case cdnResourceCount
        case nativecontainerResourceCount
        case podResourceCount
        case jqsResourceCount
        case zfsResourceCount
        case kubernetesNodegroupResourceCount
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagsResourcesInfoCodingKeys.self)
        if decoderContainer.contains(.tagKey)
        {
            self.tagKey = try decoderContainer.decode(String?.self, forKey: .tagKey)
        }
        if decoderContainer.contains(.tagValue)
        {
            self.tagValue = try decoderContainer.decode(String?.self, forKey: .tagValue)
        }
        if decoderContainer.contains(.vmResourceCount)
        {
            self.vmResourceCount = try decoderContainer.decode(Int64?.self, forKey: .vmResourceCount)
        }
        if decoderContainer.contains(.diskResourceCount)
        {
            self.diskResourceCount = try decoderContainer.decode(Int64?.self, forKey: .diskResourceCount)
        }
        if decoderContainer.contains(.sqlServerResourceCount)
        {
            self.sqlServerResourceCount = try decoderContainer.decode(Int64?.self, forKey: .sqlServerResourceCount)
        }
        if decoderContainer.contains(.mongodbResourceCount)
        {
            self.mongodbResourceCount = try decoderContainer.decode(Int64?.self, forKey: .mongodbResourceCount)
        }
        if decoderContainer.contains(.ipResourceCount)
        {
            self.ipResourceCount = try decoderContainer.decode(Int64?.self, forKey: .ipResourceCount)
        }
        if decoderContainer.contains(.esResourceCount)
        {
            self.esResourceCount = try decoderContainer.decode(Int64?.self, forKey: .esResourceCount)
        }
        if decoderContainer.contains(.jcqResourceCount)
        {
            self.jcqResourceCount = try decoderContainer.decode(Int64?.self, forKey: .jcqResourceCount)
        }
        if decoderContainer.contains(.drdsResourceCount)
        {
            self.drdsResourceCount = try decoderContainer.decode(Int64?.self, forKey: .drdsResourceCount)
        }
        if decoderContainer.contains(.memcachedResourceCount)
        {
            self.memcachedResourceCount = try decoderContainer.decode(Int64?.self, forKey: .memcachedResourceCount)
        }
        if decoderContainer.contains(.redisResourceCount)
        {
            self.redisResourceCount = try decoderContainer.decode(Int64?.self, forKey: .redisResourceCount)
        }
        if decoderContainer.contains(.databaseResourceCount)
        {
            self.databaseResourceCount = try decoderContainer.decode(Int64?.self, forKey: .databaseResourceCount)
        }
        if decoderContainer.contains(.dbRoResourceCount)
        {
            self.dbRoResourceCount = try decoderContainer.decode(Int64?.self, forKey: .dbRoResourceCount)
        }
        if decoderContainer.contains(.perconaResourceCount)
        {
            self.perconaResourceCount = try decoderContainer.decode(Int64?.self, forKey: .perconaResourceCount)
        }
        if decoderContainer.contains(.mariadbResourceCount)
        {
            self.mariadbResourceCount = try decoderContainer.decode(Int64?.self, forKey: .mariadbResourceCount)
        }
        if decoderContainer.contains(.mariadbRoResourceCount)
        {
            self.mariadbRoResourceCount = try decoderContainer.decode(Int64?.self, forKey: .mariadbRoResourceCount)
        }
        if decoderContainer.contains(.pgResourceCount)
        {
            self.pgResourceCount = try decoderContainer.decode(Int64?.self, forKey: .pgResourceCount)
        }
        if decoderContainer.contains(.cdnResourceCount)
        {
            self.cdnResourceCount = try decoderContainer.decode(Int64?.self, forKey: .cdnResourceCount)
        }
        if decoderContainer.contains(.nativecontainerResourceCount)
        {
            self.nativecontainerResourceCount = try decoderContainer.decode(Int64?.self, forKey: .nativecontainerResourceCount)
        }
        if decoderContainer.contains(.podResourceCount)
        {
            self.podResourceCount = try decoderContainer.decode(Int64?.self, forKey: .podResourceCount)
        }
        if decoderContainer.contains(.jqsResourceCount)
        {
            self.jqsResourceCount = try decoderContainer.decode(Int64?.self, forKey: .jqsResourceCount)
        }
        if decoderContainer.contains(.zfsResourceCount)
        {
            self.zfsResourceCount = try decoderContainer.decode(Int64?.self, forKey: .zfsResourceCount)
        }
        if decoderContainer.contains(.kubernetesNodegroupResourceCount)
        {
            self.kubernetesNodegroupResourceCount = try decoderContainer.decode(Int64?.self, forKey: .kubernetesNodegroupResourceCount)
        }
    }
}
public extension TagsResourcesInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagsResourcesInfoCodingKeys.self)
         try encoderContainer.encode(tagKey, forKey: .tagKey)
         try encoderContainer.encode(tagValue, forKey: .tagValue)
         try encoderContainer.encode(vmResourceCount, forKey: .vmResourceCount)
         try encoderContainer.encode(diskResourceCount, forKey: .diskResourceCount)
         try encoderContainer.encode(sqlServerResourceCount, forKey: .sqlServerResourceCount)
         try encoderContainer.encode(mongodbResourceCount, forKey: .mongodbResourceCount)
         try encoderContainer.encode(ipResourceCount, forKey: .ipResourceCount)
         try encoderContainer.encode(esResourceCount, forKey: .esResourceCount)
         try encoderContainer.encode(jcqResourceCount, forKey: .jcqResourceCount)
         try encoderContainer.encode(drdsResourceCount, forKey: .drdsResourceCount)
         try encoderContainer.encode(memcachedResourceCount, forKey: .memcachedResourceCount)
         try encoderContainer.encode(redisResourceCount, forKey: .redisResourceCount)
         try encoderContainer.encode(databaseResourceCount, forKey: .databaseResourceCount)
         try encoderContainer.encode(dbRoResourceCount, forKey: .dbRoResourceCount)
         try encoderContainer.encode(perconaResourceCount, forKey: .perconaResourceCount)
         try encoderContainer.encode(mariadbResourceCount, forKey: .mariadbResourceCount)
         try encoderContainer.encode(mariadbRoResourceCount, forKey: .mariadbRoResourceCount)
         try encoderContainer.encode(pgResourceCount, forKey: .pgResourceCount)
         try encoderContainer.encode(cdnResourceCount, forKey: .cdnResourceCount)
         try encoderContainer.encode(nativecontainerResourceCount, forKey: .nativecontainerResourceCount)
         try encoderContainer.encode(podResourceCount, forKey: .podResourceCount)
         try encoderContainer.encode(jqsResourceCount, forKey: .jqsResourceCount)
         try encoderContainer.encode(zfsResourceCount, forKey: .zfsResourceCount)
         try encoderContainer.encode(kubernetesNodegroupResourceCount, forKey: .kubernetesNodegroupResourceCount)
    }
}
///  标签操作费用属性结果
public class TagCostAttrOperateResult:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 标签键操作费用属性结果信息
    var operateInfos:[TagCostAttrOperateInfo?]?



    public override init(){
            super.init()
    }

    enum TagCostAttrOperateResultCodingKeys: String, CodingKey {
        case pin
        case operateInfos
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagCostAttrOperateResultCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.operateInfos)
        {
            self.operateInfos = try decoderContainer.decode([TagCostAttrOperateInfo?]?.self, forKey: .operateInfos)
        }
    }
}
public extension TagCostAttrOperateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagCostAttrOperateResultCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(operateInfos, forKey: .operateInfos)
    }
}
///  frontTagsResourcesInfo
public class FrontTagsResourcesInfo:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 地域名称
    var region:String?
    /// 标签列表信息
    var tagsResourcesInfos:[TagsResourcesInfo?]?
    /// 分页信息
    var pageInfo:PageInfo?



    public override init(){
            super.init()
    }

    enum FrontTagsResourcesInfoCodingKeys: String, CodingKey {
        case pin
        case region
        case tagsResourcesInfos
        case pageInfo
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: FrontTagsResourcesInfoCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.tagsResourcesInfos)
        {
            self.tagsResourcesInfos = try decoderContainer.decode([TagsResourcesInfo?]?.self, forKey: .tagsResourcesInfos)
        }
        if decoderContainer.contains(.pageInfo)
        {
            self.pageInfo = try decoderContainer.decode(PageInfo?.self, forKey: .pageInfo)
        }
    }
}
public extension FrontTagsResourcesInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: FrontTagsResourcesInfoCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(tagsResourcesInfos, forKey: .tagsResourcesInfos)
         try encoderContainer.encode(pageInfo, forKey: .pageInfo)
    }
}
///  tagCostAttrOperateInfo
public class TagCostAttrOperateInfo:NSObject,Codable{
    /// 标签键
    var tagKey:String?
    /// 操作费用属性是否成功
    var success:Bool?
    /// 操作费用属性的结果信息
    var msg:String?



    public override init(){
            super.init()
    }

    enum TagCostAttrOperateInfoCodingKeys: String, CodingKey {
        case tagKey
        case success
        case msg
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagCostAttrOperateInfoCodingKeys.self)
        if decoderContainer.contains(.tagKey)
        {
            self.tagKey = try decoderContainer.decode(String?.self, forKey: .tagKey)
        }
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
        if decoderContainer.contains(.msg)
        {
            self.msg = try decoderContainer.decode(String?.self, forKey: .msg)
        }
    }
}
public extension TagCostAttrOperateInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagCostAttrOperateInfoCodingKeys.self)
         try encoderContainer.encode(tagKey, forKey: .tagKey)
         try encoderContainer.encode(success, forKey: .success)
         try encoderContainer.encode(msg, forKey: .msg)
    }
}
///  frontResourcesResult
public class FrontResourcesResult:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 地域名称
    var region:String?
    /// 标签资源信息数组
    var frontResourceTagMapping:[FrontResourceTagMapping?]?
    /// 分页信息
    var pageInfo:PageInfo?



    public override init(){
            super.init()
    }

    enum FrontResourcesResultCodingKeys: String, CodingKey {
        case pin
        case region
        case frontResourceTagMapping
        case pageInfo
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: FrontResourcesResultCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.frontResourceTagMapping)
        {
            self.frontResourceTagMapping = try decoderContainer.decode([FrontResourceTagMapping?]?.self, forKey: .frontResourceTagMapping)
        }
        if decoderContainer.contains(.pageInfo)
        {
            self.pageInfo = try decoderContainer.decode(PageInfo?.self, forKey: .pageInfo)
        }
    }
}
public extension FrontResourcesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: FrontResourcesResultCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(frontResourceTagMapping, forKey: .frontResourceTagMapping)
         try encoderContainer.encode(pageInfo, forKey: .pageInfo)
    }
}
///  tagFilter
public class TagFilter:NSObject,Codable{
    /// 标签键
    var key:String?
    /// 标签值列表
    var values:[String?]?
    /// 操作选项, 默认为eq, 表示精确匹配
    var operatorValue:String?



    public override init(){
            super.init()
    }

    enum TagFilterCodingKeys: String, CodingKey {
        case key
        case values
        case operatorValue = "operator"
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagFilterCodingKeys.self)
        if decoderContainer.contains(.key)
        {
            self.key = try decoderContainer.decode(String?.self, forKey: .key)
        }
        if decoderContainer.contains(.values)
        {
            self.values = try decoderContainer.decode([String?]?.self, forKey: .values)
        }
        if decoderContainer.contains(.operatorValue)
        {
            self.operatorValue = try decoderContainer.decode(String?.self, forKey: .operatorValue)
        }
    }
}
public extension TagFilter{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagFilterCodingKeys.self)
         try encoderContainer.encode(key, forKey: .key)
         try encoderContainer.encode(values, forKey: .values)
         try encoderContainer.encode(operatorValue, forKey: .operatorValue)
    }
}
///  frontResourceTagMapping
public class FrontResourceTagMapping:NSObject,Codable{
    /// jrn本期不用, 默认为null
    var jrn:String?
    /// 资源id
    var resourceId:String?
    /// 产品线名称
    var serviceCode:String?
    /// 资源绑定的标签数组
    var tags:[Tag?]?
    /// 资源名称
    var resourceName:String?
    /// 可用区
    var az:String?



    public override init(){
            super.init()
    }

    enum FrontResourceTagMappingCodingKeys: String, CodingKey {
        case jrn
        case resourceId
        case serviceCode
        case tags
        case resourceName
        case az
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: FrontResourceTagMappingCodingKeys.self)
        if decoderContainer.contains(.jrn)
        {
            self.jrn = try decoderContainer.decode(String?.self, forKey: .jrn)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([Tag?]?.self, forKey: .tags)
        }
        if decoderContainer.contains(.resourceName)
        {
            self.resourceName = try decoderContainer.decode(String?.self, forKey: .resourceName)
        }
        if decoderContainer.contains(.az)
        {
            self.az = try decoderContainer.decode(String?.self, forKey: .az)
        }
    }
}
public extension FrontResourceTagMapping{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: FrontResourceTagMappingCodingKeys.self)
         try encoderContainer.encode(jrn, forKey: .jrn)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(tags, forKey: .tags)
         try encoderContainer.encode(resourceName, forKey: .resourceName)
         try encoderContainer.encode(az, forKey: .az)
    }
}
///  tagCostAttrOperateReq
public class TagCostAttrOperateReq:NSObject,Codable{
    /// 标签键操作费用属性信息
    /// Required:true
    var operations:[TagCostAttrOperation?]?



    public  init(operations:[TagCostAttrOperation?]?){
             self.operations = operations
    }

    enum TagCostAttrOperateReqCodingKeys: String, CodingKey {
        case operations
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagCostAttrOperateReqCodingKeys.self)
        self.operations = try decoderContainer.decode([TagCostAttrOperation?]?.self, forKey: .operations)
    }
}
public extension TagCostAttrOperateReq{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagCostAttrOperateReqCodingKeys.self)
         try encoderContainer.encode(operations, forKey: .operations)
    }
}
///  costAttrTagKeyInfo
public class CostAttrTagKeyInfo:NSObject,Codable{
    /// 标签键
    var tagKey:String?
    /// 费用属性是否设置
    var costAttr:Bool?
    /// 标签键是否有效
    var tagKeyValid:Bool?



    public override init(){
            super.init()
    }

    enum CostAttrTagKeyInfoCodingKeys: String, CodingKey {
        case tagKey
        case costAttr
        case tagKeyValid
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CostAttrTagKeyInfoCodingKeys.self)
        if decoderContainer.contains(.tagKey)
        {
            self.tagKey = try decoderContainer.decode(String?.self, forKey: .tagKey)
        }
        if decoderContainer.contains(.costAttr)
        {
            self.costAttr = try decoderContainer.decode(Bool?.self, forKey: .costAttr)
        }
        if decoderContainer.contains(.tagKeyValid)
        {
            self.tagKeyValid = try decoderContainer.decode(Bool?.self, forKey: .tagKeyValid)
        }
    }
}
public extension CostAttrTagKeyInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CostAttrTagKeyInfoCodingKeys.self)
         try encoderContainer.encode(tagKey, forKey: .tagKey)
         try encoderContainer.encode(costAttr, forKey: .costAttr)
         try encoderContainer.encode(tagKeyValid, forKey: .tagKeyValid)
    }
}
///  resourceReqVo
public class ResourceReqVo:NSObject,Codable{
    /// 产品线名称列表
      /// 标签系统支持的产品线名称如下
      /// - vm               disk        sqlserver  es          mongodb               ip
      /// - memcached        redis       drds       rds         database              db_ro
      /// - percona          percona_ro  mariadb    mariadb_ro  pg                    cdn
      /// - nativecontainer  pod         zfs        jqs         kubernetesNodegroup   jcq
      /// 
    var serviceCodes:[String?]?
    /// 资源id列表
    var resourceIds:[String?]?
    /// 标签过滤列表
    var tagFilters:[TagFilter?]?
    /// 排序依据
    var orderCondition:String?
    /// 排序方向, 取值为ASC, DESC
    var descOrAsc:String?
    /// 每页记录数
    var pageSize:Int32?
    /// 当前页码
    var currentPage:Int32?



    public override init(){
            super.init()
    }

    enum ResourceReqVoCodingKeys: String, CodingKey {
        case serviceCodes
        case resourceIds
        case tagFilters
        case orderCondition
        case descOrAsc
        case pageSize
        case currentPage
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResourceReqVoCodingKeys.self)
        if decoderContainer.contains(.serviceCodes)
        {
            self.serviceCodes = try decoderContainer.decode([String?]?.self, forKey: .serviceCodes)
        }
        if decoderContainer.contains(.resourceIds)
        {
            self.resourceIds = try decoderContainer.decode([String?]?.self, forKey: .resourceIds)
        }
        if decoderContainer.contains(.tagFilters)
        {
            self.tagFilters = try decoderContainer.decode([TagFilter?]?.self, forKey: .tagFilters)
        }
        if decoderContainer.contains(.orderCondition)
        {
            self.orderCondition = try decoderContainer.decode(String?.self, forKey: .orderCondition)
        }
        if decoderContainer.contains(.descOrAsc)
        {
            self.descOrAsc = try decoderContainer.decode(String?.self, forKey: .descOrAsc)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int32?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.currentPage)
        {
            self.currentPage = try decoderContainer.decode(Int32?.self, forKey: .currentPage)
        }
    }
}
public extension ResourceReqVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResourceReqVoCodingKeys.self)
         try encoderContainer.encode(serviceCodes, forKey: .serviceCodes)
         try encoderContainer.encode(resourceIds, forKey: .resourceIds)
         try encoderContainer.encode(tagFilters, forKey: .tagFilters)
         try encoderContainer.encode(orderCondition, forKey: .orderCondition)
         try encoderContainer.encode(descOrAsc, forKey: .descOrAsc)
         try encoderContainer.encode(pageSize, forKey: .pageSize)
         try encoderContainer.encode(currentPage, forKey: .currentPage)
    }
}
///  frontResourcesReqVo
public class FrontResourcesReqVo:NSObject,Codable{
    /// 产品线名称列表, 目前只支持查询同一条产品线的资源
      /// 标签系统支持的产品线名称如下
      /// - vm               disk        sqlserver  es          mongodb               ip
      /// - memcached        redis       drds       rds         database              db_ro
      /// - percona          percona_ro  mariadb    mariadb_ro  pg                    cdn
      /// - nativecontainer  pod         zfs        jqs         kubernetesNodegroup   jcq
      /// 
    /// Required:true
    var serviceCodes:[String?]?
    /// 资源id列表
    var resourceIds:[String?]?
    /// 标签过滤列表
    var tagFilters:[TagFilter?]?
    /// 每页记录数大小, 默认为20条记录每页, 上限为500条记录每页
    var pageSize:Int32?
    /// 当前页码, 默认为第一页
    var currentPage:Int32?



    public  init(serviceCodes:[String?]?){
             self.serviceCodes = serviceCodes
    }

    enum FrontResourcesReqVoCodingKeys: String, CodingKey {
        case serviceCodes
        case resourceIds
        case tagFilters
        case pageSize
        case currentPage
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: FrontResourcesReqVoCodingKeys.self)
        self.serviceCodes = try decoderContainer.decode([String?]?.self, forKey: .serviceCodes)
        if decoderContainer.contains(.resourceIds)
        {
            self.resourceIds = try decoderContainer.decode([String?]?.self, forKey: .resourceIds)
        }
        if decoderContainer.contains(.tagFilters)
        {
            self.tagFilters = try decoderContainer.decode([TagFilter?]?.self, forKey: .tagFilters)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int32?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.currentPage)
        {
            self.currentPage = try decoderContainer.decode(Int32?.self, forKey: .currentPage)
        }
    }
}
public extension FrontResourcesReqVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: FrontResourcesReqVoCodingKeys.self)
         try encoderContainer.encode(serviceCodes, forKey: .serviceCodes)
         try encoderContainer.encode(resourceIds, forKey: .resourceIds)
         try encoderContainer.encode(tagFilters, forKey: .tagFilters)
         try encoderContainer.encode(pageSize, forKey: .pageSize)
         try encoderContainer.encode(currentPage, forKey: .currentPage)
    }
}
///  pageInfo
public class PageInfo:NSObject,Codable{
    /// 当前页码
    var currentPage:Int32?
    /// 每页记录数
    var pageSize:Int32?
    /// 总记录数
    var totalRecord:Int64?
    /// 总页数
    var totalPage:Int32?



    public override init(){
            super.init()
    }

    enum PageInfoCodingKeys: String, CodingKey {
        case currentPage
        case pageSize
        case totalRecord
        case totalPage
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PageInfoCodingKeys.self)
        if decoderContainer.contains(.currentPage)
        {
            self.currentPage = try decoderContainer.decode(Int32?.self, forKey: .currentPage)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int32?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalRecord)
        {
            self.totalRecord = try decoderContainer.decode(Int64?.self, forKey: .totalRecord)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int32?.self, forKey: .totalPage)
        }
    }
}
public extension PageInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PageInfoCodingKeys.self)
         try encoderContainer.encode(currentPage, forKey: .currentPage)
         try encoderContainer.encode(pageSize, forKey: .pageSize)
         try encoderContainer.encode(totalRecord, forKey: .totalRecord)
         try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
///  tagCostAttrOperation
public class TagCostAttrOperation:NSObject,Codable{
    /// 标签键
    /// Required:true
    var tagKey:String
    /// 0:表示取消费用属性 1:表示设置费用属性
    /// Required:true
    var operate:Int32



    public  init(tagKey:String,operate:Int32){
             self.tagKey = tagKey
             self.operate = operate
    }

    enum TagCostAttrOperationCodingKeys: String, CodingKey {
        case tagKey
        case operate
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagCostAttrOperationCodingKeys.self)
        self.tagKey = try decoderContainer.decode(String.self, forKey: .tagKey)
        self.operate = try decoderContainer.decode(Int32.self, forKey: .operate)
    }
}
public extension TagCostAttrOperation{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagCostAttrOperationCodingKeys.self)
         try encoderContainer.encode(tagKey, forKey: .tagKey)
         try encoderContainer.encode(operate, forKey: .operate)
    }
}
///  tagsResVo
public class TagsResVo:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 地域名称
    var region:String?
    /// 标签数组
    var tags:[Tag?]?



    public override init(){
            super.init()
    }

    enum TagsResVoCodingKeys: String, CodingKey {
        case pin
        case region
        case tags
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagsResVoCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([Tag?]?.self, forKey: .tags)
        }
    }
}
public extension TagsResVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagsResVoCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(tags, forKey: .tags)
    }
}
///  tagKeysReqVo
public class TagKeysReqVo:NSObject,Codable{
    /// 产品线名称列表
      /// 标签系统支持的产品线名称如下
      /// - vm               disk        sqlserver  es          mongodb               ip
      /// - memcached        redis       drds       rds         database              db_ro
      /// - percona          percona_ro  mariadb    mariadb_ro  pg                    cdn
      /// - nativecontainer  pod         zfs        jqs         kubernetesNodegroup   jcq
      /// 
    var serviceCodes:[String?]?
    /// 标签过滤列表
    var tagFilters:[TagFilter?]?



    public override init(){
            super.init()
    }

    enum TagKeysReqVoCodingKeys: String, CodingKey {
        case serviceCodes
        case tagFilters
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagKeysReqVoCodingKeys.self)
        if decoderContainer.contains(.serviceCodes)
        {
            self.serviceCodes = try decoderContainer.decode([String?]?.self, forKey: .serviceCodes)
        }
        if decoderContainer.contains(.tagFilters)
        {
            self.tagFilters = try decoderContainer.decode([TagFilter?]?.self, forKey: .tagFilters)
        }
    }
}
public extension TagKeysReqVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagKeysReqVoCodingKeys.self)
         try encoderContainer.encode(serviceCodes, forKey: .serviceCodes)
         try encoderContainer.encode(tagFilters, forKey: .tagFilters)
    }
}
///  tagsReqVo
public class TagsReqVo:NSObject,Codable{
    /// 产品线名称列表
      /// 标签系统支持的产品线名称如下
      /// - vm               disk        sqlserver  es          mongodb               ip
      /// - memcached        redis       drds       rds         database              db_ro
      /// - percona          percona_ro  mariadb    mariadb_ro  pg                    cdn
      /// - nativecontainer  pod         zfs        jqs         kubernetesNodegroup   jcq
      /// 
    var serviceCodes:[String?]?
    /// 搜索类型, 取值为all和cost &lt;br/&gt;
      /// all: 表示搜索全部类型的标签, 默认值, 可不传
      /// cost: 表示只搜索具有费用属性的标签
      /// 
    var kind:String?
    /// 标签过滤列表
    var tagFilters:[TagFilter?]?



    public override init(){
            super.init()
    }

    enum TagsReqVoCodingKeys: String, CodingKey {
        case serviceCodes
        case kind
        case tagFilters
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagsReqVoCodingKeys.self)
        if decoderContainer.contains(.serviceCodes)
        {
            self.serviceCodes = try decoderContainer.decode([String?]?.self, forKey: .serviceCodes)
        }
        if decoderContainer.contains(.kind)
        {
            self.kind = try decoderContainer.decode(String?.self, forKey: .kind)
        }
        if decoderContainer.contains(.tagFilters)
        {
            self.tagFilters = try decoderContainer.decode([TagFilter?]?.self, forKey: .tagFilters)
        }
    }
}
public extension TagsReqVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagsReqVoCodingKeys.self)
         try encoderContainer.encode(serviceCodes, forKey: .serviceCodes)
         try encoderContainer.encode(kind, forKey: .kind)
         try encoderContainer.encode(tagFilters, forKey: .tagFilters)
    }
}
///  tagResourcesReqVo
public class TagResourcesReqVo:NSObject,Codable{
    /// 对指定产品线指定资源打标签, 目前只支持同一产品线的资源绑定标签
    /// Required:true
    var resources:[ResourcesMap?]?
    /// 标签集合
    /// Required:true
    var tags:[Tag?]?



    public  init(resources:[ResourcesMap?]?,tags:[Tag?]?){
             self.resources = resources
             self.tags = tags
    }

    enum TagResourcesReqVoCodingKeys: String, CodingKey {
        case resources
        case tags
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagResourcesReqVoCodingKeys.self)
        self.resources = try decoderContainer.decode([ResourcesMap?]?.self, forKey: .resources)
        self.tags = try decoderContainer.decode([Tag?]?.self, forKey: .tags)
    }
}
public extension TagResourcesReqVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagResourcesReqVoCodingKeys.self)
         try encoderContainer.encode(resources, forKey: .resources)
         try encoderContainer.encode(tags, forKey: .tags)
    }
}
///  请求标签键结果
public class TagKeysResVo:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 地域名称
    var region:String?
    /// 标签键数组
    var tagKeys:[String?]?



    public override init(){
            super.init()
    }

    enum TagKeysResVoCodingKeys: String, CodingKey {
        case pin
        case region
        case tagKeys
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagKeysResVoCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.tagKeys)
        {
            self.tagKeys = try decoderContainer.decode([String?]?.self, forKey: .tagKeys)
        }
    }
}
public extension TagKeysResVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagKeysResVoCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(tagKeys, forKey: .tagKeys)
    }
}
///  打标结果
public class TagResourcesResVo:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 地域名称
    var region:String?
    /// 打标失败列表
    var failedResourcesMap:[FailedResourcesMap?]?
    /// 资源与标签绑定成功的次数
    var successCount:Int?



    public override init(){
            super.init()
    }

    enum TagResourcesResVoCodingKeys: String, CodingKey {
        case pin
        case region
        case failedResourcesMap
        case successCount
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagResourcesResVoCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.failedResourcesMap)
        {
            self.failedResourcesMap = try decoderContainer.decode([FailedResourcesMap?]?.self, forKey: .failedResourcesMap)
        }
        if decoderContainer.contains(.successCount)
        {
            self.successCount = try decoderContainer.decode(Int?.self, forKey: .successCount)
        }
    }
}
public extension TagResourcesResVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagResourcesResVoCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(failedResourcesMap, forKey: .failedResourcesMap)
         try encoderContainer.encode(successCount, forKey: .successCount)
    }
}
///  resourcesMap
public class ResourcesMap:NSObject,Codable{
    /// 产品线名称列表
      /// 标签系统支持的产品线名称如下
      /// - vm               disk        sqlserver  es          mongodb               ip
      /// - memcached        redis       drds       rds         database              db_ro
      /// - percona          percona_ro  mariadb    mariadb_ro  pg                    cdn
      /// - nativecontainer  pod         zfs        jqs         kubernetesNodegroup   jcq
      /// 
    /// Required:true
    var serviceCode:String
    /// 资源id列表
    /// Required:true
    var resourceId:[String?]?



    public  init(serviceCode:String,resourceId:[String?]?){
             self.serviceCode = serviceCode
             self.resourceId = resourceId
    }

    enum ResourcesMapCodingKeys: String, CodingKey {
        case serviceCode
        case resourceId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResourcesMapCodingKeys.self)
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
        self.resourceId = try decoderContainer.decode([String?]?.self, forKey: .resourceId)
    }
}
public extension ResourcesMap{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResourcesMapCodingKeys.self)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
    }
}
///  resource2TagsMap
public class Resource2TagsMap:NSObject,Codable{
    /// 资源id
    /// Required:true
    var resourceId:String
    /// 标签数组(可以传入空数组)
    /// Required:true
    var tags:[Tag?]?



    public  init(resourceId:String,tags:[Tag?]?){
             self.resourceId = resourceId
             self.tags = tags
    }

    enum Resource2TagsMapCodingKeys: String, CodingKey {
        case resourceId
        case tags
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: Resource2TagsMapCodingKeys.self)
        self.resourceId = try decoderContainer.decode(String.self, forKey: .resourceId)
        self.tags = try decoderContainer.decode([Tag?]?.self, forKey: .tags)
    }
}
public extension Resource2TagsMap{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: Resource2TagsMapCodingKeys.self)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(tags, forKey: .tags)
    }
}
///  批量替换标签请求对象
public class ResetTagResourcesReqVo:NSObject,Codable{
    /// 产品线名称列表, 目前仅支持对同一个serviceCode下的资源进行批量标签替换
      /// 标签系统支持的产品线名称如下
      /// - vm               disk        sqlserver  es          mongodb               ip
      /// - memcached        redis       drds       rds         database              db_ro
      /// - percona          percona_ro  mariadb    mariadb_ro  pg                    cdn
      /// - nativecontainer  pod         zfs        jqs         kubernetesNodegroup   jcq
      /// 
    /// Required:true
    var serviceCodes:[String?]?
    /// 由资源id和替换后的标签构成的数组
    /// Required:true
    var resourceTags:[Resource2TagsMap?]?



    public  init(serviceCodes:[String?]?,resourceTags:[Resource2TagsMap?]?){
             self.serviceCodes = serviceCodes
             self.resourceTags = resourceTags
    }

    enum ResetTagResourcesReqVoCodingKeys: String, CodingKey {
        case serviceCodes
        case resourceTags
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResetTagResourcesReqVoCodingKeys.self)
        self.serviceCodes = try decoderContainer.decode([String?]?.self, forKey: .serviceCodes)
        self.resourceTags = try decoderContainer.decode([Resource2TagsMap?]?.self, forKey: .resourceTags)
    }
}
public extension ResetTagResourcesReqVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetTagResourcesReqVoCodingKeys.self)
         try encoderContainer.encode(serviceCodes, forKey: .serviceCodes)
         try encoderContainer.encode(resourceTags, forKey: .resourceTags)
    }
}
///  tagValuesReqVo
public class TagValuesReqVo:NSObject,Codable{
    /// 标签过滤列表
    var tagFilters:[TagFilter?]?



    public override init(){
            super.init()
    }

    enum TagValuesReqVoCodingKeys: String, CodingKey {
        case tagFilters
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagValuesReqVoCodingKeys.self)
        if decoderContainer.contains(.tagFilters)
        {
            self.tagFilters = try decoderContainer.decode([TagFilter?]?.self, forKey: .tagFilters)
        }
    }
}
public extension TagValuesReqVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagValuesReqVoCodingKeys.self)
         try encoderContainer.encode(tagFilters, forKey: .tagFilters)
    }
}
///  tagValuesResVo
public class TagValuesResVo:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 地域名称
    var region:String?
    /// 标签值数组
    var tagValues:[String?]?



    public override init(){
            super.init()
    }

    enum TagValuesResVoCodingKeys: String, CodingKey {
        case pin
        case region
        case tagValues
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagValuesResVoCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.tagValues)
        {
            self.tagValues = try decoderContainer.decode([String?]?.self, forKey: .tagValues)
        }
    }
}
public extension TagValuesResVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagValuesResVoCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(tagValues, forKey: .tagValues)
    }
}
///  查找资源id的参数对象
public class QueryResourceReqVo:NSObject,Codable{
    /// 产品线名称列表
      /// 标签系统支持的产品线名称如下
      /// - vm               disk        sqlserver  es          mongodb               ip
      /// - memcached        redis       drds       rds         database              db_ro
      /// - percona          percona_ro  mariadb    mariadb_ro  pg                    cdn
      /// - nativecontainer  pod         zfs        jqs         kubernetesNodegroup   jcq
      /// 
    /// Required:true
    var serviceCode:String
    /// 标签过滤列表
    var tagFilters:[TagFilter?]?
    /// 操作项(多个tagFilter之间支持and或or关系, 默认and关系)
    var operatorValue:String?



    public  init(serviceCode:String){
             self.serviceCode = serviceCode
    }

    enum QueryResourceReqVoCodingKeys: String, CodingKey {
        case serviceCode
        case tagFilters
        case operatorValue = "operator"
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryResourceReqVoCodingKeys.self)
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
        if decoderContainer.contains(.tagFilters)
        {
            self.tagFilters = try decoderContainer.decode([TagFilter?]?.self, forKey: .tagFilters)
        }
        if decoderContainer.contains(.operatorValue)
        {
            self.operatorValue = try decoderContainer.decode(String?.self, forKey: .operatorValue)
        }
    }
}
public extension QueryResourceReqVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryResourceReqVoCodingKeys.self)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(tagFilters, forKey: .tagFilters)
         try encoderContainer.encode(operatorValue, forKey: .operatorValue)
    }
}
///  resourceTagMapping
public class ResourceTagMapping:NSObject,Codable{
    /// jrn本期不用, 默认为null
    var jrn:String?
    /// 产品线名称
    var serviceCode:String?
    /// 资源id
    var resourceId:String?
    /// 该资源绑定的标签组成的数组
    var tags:[Tag?]?



    public override init(){
            super.init()
    }

    enum ResourceTagMappingCodingKeys: String, CodingKey {
        case jrn
        case serviceCode
        case resourceId
        case tags
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResourceTagMappingCodingKeys.self)
        if decoderContainer.contains(.jrn)
        {
            self.jrn = try decoderContainer.decode(String?.self, forKey: .jrn)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([Tag?]?.self, forKey: .tags)
        }
    }
}
public extension ResourceTagMapping{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResourceTagMappingCodingKeys.self)
         try encoderContainer.encode(jrn, forKey: .jrn)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(tags, forKey: .tags)
    }
}
///  批量替换标签结果
public class ResetTagResourcesResVo:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 地域名称
    var region:String?
    /// 批量替换标签结果
    var resetTagResourcesInfos:[ResetTagResourcesInfo?]?



    public override init(){
            super.init()
    }

    enum ResetTagResourcesResVoCodingKeys: String, CodingKey {
        case pin
        case region
        case resetTagResourcesInfos
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResetTagResourcesResVoCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.resetTagResourcesInfos)
        {
            self.resetTagResourcesInfos = try decoderContainer.decode([ResetTagResourcesInfo?]?.self, forKey: .resetTagResourcesInfos)
        }
    }
}
public extension ResetTagResourcesResVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetTagResourcesResVoCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(resetTagResourcesInfos, forKey: .resetTagResourcesInfos)
    }
}
///  unTagResourcesReqVo
public class UnTagResourcesReqVo:NSObject,Codable{
    /// 对指定产品线指定资源进行标签解绑, 目前只支持同一产品线的资源解绑标签
    /// Required:true
    var resources:[ResourcesMap?]?
    /// 标签数组
    /// Required:true
    var tags:[Tag?]?



    public  init(resources:[ResourcesMap?]?,tags:[Tag?]?){
             self.resources = resources
             self.tags = tags
    }

    enum UnTagResourcesReqVoCodingKeys: String, CodingKey {
        case resources
        case tags
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UnTagResourcesReqVoCodingKeys.self)
        self.resources = try decoderContainer.decode([ResourcesMap?]?.self, forKey: .resources)
        self.tags = try decoderContainer.decode([Tag?]?.self, forKey: .tags)
    }
}
public extension UnTagResourcesReqVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UnTagResourcesReqVoCodingKeys.self)
         try encoderContainer.encode(resources, forKey: .resources)
         try encoderContainer.encode(tags, forKey: .tags)
    }
}
///  解绑标签结果
public class UnTagResourcesResVo:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 地域名称
    var region:String?
    /// 解绑失败列表
    var failedResourcesMap:[FailedResourcesMap?]?
    /// 资源与标签解绑成功的次数
    var successCount:Int?



    public override init(){
            super.init()
    }

    enum UnTagResourcesResVoCodingKeys: String, CodingKey {
        case pin
        case region
        case failedResourcesMap
        case successCount
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UnTagResourcesResVoCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.failedResourcesMap)
        {
            self.failedResourcesMap = try decoderContainer.decode([FailedResourcesMap?]?.self, forKey: .failedResourcesMap)
        }
        if decoderContainer.contains(.successCount)
        {
            self.successCount = try decoderContainer.decode(Int?.self, forKey: .successCount)
        }
    }
}
public extension UnTagResourcesResVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UnTagResourcesResVoCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(failedResourcesMap, forKey: .failedResourcesMap)
         try encoderContainer.encode(successCount, forKey: .successCount)
    }
}
///  failedResourcesMap
public class FailedResourcesMap:NSObject,Codable{
    /// 资源id
    var resourceId:String?
    /// 资源与标签绑定或解绑失败的原因
    var msg:String?



    public override init(){
            super.init()
    }

    enum FailedResourcesMapCodingKeys: String, CodingKey {
        case resourceId
        case msg
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: FailedResourcesMapCodingKeys.self)
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.msg)
        {
            self.msg = try decoderContainer.decode(String?.self, forKey: .msg)
        }
    }
}
public extension FailedResourcesMap{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: FailedResourcesMapCodingKeys.self)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(msg, forKey: .msg)
    }
}
///  resetTagResourcesInfo
public class ResetTagResourcesInfo:NSObject,Codable{
    /// 资源id
    var resourceId:String?
    /// 批量替换标签状态
      /// 0: 批量替换标签成功
      /// 1: 批量替换标签失败
      /// 
    var status:Int32?
    /// 批量替换标签结果描述
      /// 批量替换标签成功时msg为操作成功
      /// 批量替换标签失败时msg为失败的原因
      /// 
    var msg:String?



    public override init(){
            super.init()
    }

    enum ResetTagResourcesInfoCodingKeys: String, CodingKey {
        case resourceId
        case status
        case msg
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResetTagResourcesInfoCodingKeys.self)
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int32?.self, forKey: .status)
        }
        if decoderContainer.contains(.msg)
        {
            self.msg = try decoderContainer.decode(String?.self, forKey: .msg)
        }
    }
}
public extension ResetTagResourcesInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetTagResourcesInfoCodingKeys.self)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(msg, forKey: .msg)
    }
}
///  resourceResVo
public class ResourceResVo:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 地域名称
    var region:String?
    /// 资源标签详情列表
    var resourceTagMappingList:[ResourceTagMapping?]?



    public override init(){
            super.init()
    }

    enum ResourceResVoCodingKeys: String, CodingKey {
        case pin
        case region
        case resourceTagMappingList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResourceResVoCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.resourceTagMappingList)
        {
            self.resourceTagMappingList = try decoderContainer.decode([ResourceTagMapping?]?.self, forKey: .resourceTagMappingList)
        }
    }
}
public extension ResourceResVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResourceResVoCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(resourceTagMappingList, forKey: .resourceTagMappingList)
    }
}
