/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Product
   关于产品基本信息操作的相关接口

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon

public class ExportThingModelResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ExportThingModelResult?;

    enum ExportThingModelResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExportThingModelResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ExportThingModelResult?.self, forKey: .result) ?? nil
    }
}

public extension ExportThingModelResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExportThingModelResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看产品功能列表接口 
public class ListProductAbilitiesResult:NSObject,JdCloudResult
{
    /// 分页信息
    var page:PageinfoVO?

    /// 产品详情
    var abilities:[ProductAbility?]?



    public override init(){
        super.init()
    }

    enum ListProductAbilitiesResultCodingKeys: String, CodingKey {
        case page
        case abilities
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListProductAbilitiesResultCodingKeys.self)
        if decoderContainer.contains(.page)
        {
            self.page = try decoderContainer.decode(PageinfoVO?.self, forKey: .page)
        }
        if decoderContainer.contains(.abilities)
        {
            self.abilities = try decoderContainer.decode([ProductAbility?]?.self, forKey: .abilities)
        }
    }
}
public extension ListProductAbilitiesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListProductAbilitiesResultCodingKeys.self)
        try encoderContainer.encode(page, forKey: .page)
        try encoderContainer.encode(abilities, forKey: .abilities)
    }
}

///  导入物模型
public class ImportThingModelRequest:JdCloudRequest
{
    /// 物模型JSON
    var thingModel:AnyObject?

    /// 产品Key
    var productKey:String


    public init(regionId: String,thingModel:AnyObject?,productKey:String){
        self.thingModel = thingModel
        self.productKey = productKey
        super.init(regionId: regionId)
    }


    enum ImportThingModelRequestRequestCodingKeys: String, CodingKey {
        case thingModel
        case productKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportThingModelRequestRequestCodingKeys.self)
        try encoderContainer.encode(productKey, forKey: .productKey)

    }
}


///  查看产品功能列表接口
public class ListProductAbilitiesRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为10，取值范围：[10,100]
    var pageSize:Int?

    /// abilityName-功能名称，精确匹配
      /// abilityType-功能类型，精确匹配
      /// 
    var filters:[Filter?]?

    /// 产品Key
    var productKey:String


    public init(regionId: String,productKey:String){
        self.productKey = productKey
        super.init(regionId: regionId)
    }


    enum ListProductAbilitiesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case productKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListProductAbilitiesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(productKey, forKey: .productKey)

    }
}

/// 导出物模型 
public class ExportThingModelResult:NSObject,JdCloudResult
{
    /// ThingModel
    var thingModel:AnyObject?



    public override init(){
        super.init()
    }

    enum ExportThingModelResultCodingKeys: String, CodingKey {
        case thingModel
    }

    required public init(from decoder: Decoder) throws {
    }
}
public extension ExportThingModelResult{
    func encode(to encoder: Encoder) throws {
    }
}
/// 导入物模型 
public class ImportThingModelResult:NSObject,JdCloudResult
{
}
public class ListProductAbilitiesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ListProductAbilitiesResult?;

    enum ListProductAbilitiesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListProductAbilitiesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ListProductAbilitiesResult?.self, forKey: .result) ?? nil
    }
}

public extension ListProductAbilitiesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListProductAbilitiesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ImportThingModelResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ImportThingModelResult?;

    enum ImportThingModelResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImportThingModelResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ImportThingModelResult?.self, forKey: .result) ?? nil
    }
}

public extension ImportThingModelResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportThingModelResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  导出物模型
public class ExportThingModelRequest:JdCloudRequest
{
    /// 产品Key
    var productKey:String


    public init(regionId: String,productKey:String){
        self.productKey = productKey
        super.init(regionId: regionId)
    }


    enum ExportThingModelRequestRequestCodingKeys: String, CodingKey {
        case productKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExportThingModelRequestRequestCodingKeys.self)
        try encoderContainer.encode(productKey, forKey: .productKey)

    }
}

/// 分页查询设备信息,支持一个或多个条件 
public class QueryDevicePageResult:NSObject,JdCloudResult
{
    /// PageSize
    var pageSize:Int?

    /// NowPage
    var nowPage:Int?

    /// TotalSize
    var totalSize:Int?

    /// TotalPage
    var totalPage:Int?

    /// Data
    var data:[DeviceVO?]?



    public override init(){
        super.init()
    }

    enum QueryDevicePageResultCodingKeys: String, CodingKey {
        case pageSize
        case nowPage
        case totalSize
        case totalPage
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryDevicePageResultCodingKeys.self)
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.nowPage)
        {
            self.nowPage = try decoderContainer.decode(Int?.self, forKey: .nowPage)
        }
        if decoderContainer.contains(.totalSize)
        {
            self.totalSize = try decoderContainer.decode(Int?.self, forKey: .totalSize)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([DeviceVO?]?.self, forKey: .data)
        }
    }
}
public extension QueryDevicePageResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryDevicePageResultCodingKeys.self)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(nowPage, forKey: .nowPage)
        try encoderContainer.encode(totalSize, forKey: .totalSize)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 删除设备 
public class RemoveDeviceResult:NSObject,JdCloudResult
{
}
/// 注册单个设备并返回秘钥信息 
public class AddDeviceResult:NSObject,JdCloudResult
{
    /// 设备名称
    var deviceName:String?

    /// 设备标识符
    var identifier:String?

    /// 设备秘钥
    var secret:String?



    public override init(){
        super.init()
    }

    enum AddDeviceResultCodingKeys: String, CodingKey {
        case deviceName
        case identifier
        case secret
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddDeviceResultCodingKeys.self)
        if decoderContainer.contains(.deviceName)
        {
            self.deviceName = try decoderContainer.decode(String?.self, forKey: .deviceName)
        }
        if decoderContainer.contains(.identifier)
        {
            self.identifier = try decoderContainer.decode(String?.self, forKey: .identifier)
        }
        if decoderContainer.contains(.secret)
        {
            self.secret = try decoderContainer.decode(String?.self, forKey: .secret)
        }
    }
}
public extension AddDeviceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddDeviceResultCodingKeys.self)
        try encoderContainer.encode(deviceName, forKey: .deviceName)
        try encoderContainer.encode(identifier, forKey: .identifier)
        try encoderContainer.encode(secret, forKey: .secret)
    }
}
/// 查询设备详情 
public class QueryDeviceDetailResult:NSObject,JdCloudResult
{
    /// 设备ID
    var deviceId:String?

    /// 设备名称
    var deviceName:String?

    /// 父级设备Id
    var parentId:String?

    /// 设备类型，同产品类型，0-普通设备，1-网关，2-Edge
    var deviceType:String?

    /// 设备状态，0-未激活，1-激活离线，2-激活在线
    var status:Int?

    /// 产品Key
    var productKey:String?

    /// 设备标识符
    var identifier:String?

    /// 设备秘钥
    var secret:String?

    /// 设备描述
    var descriptionValue:String?

    /// 激活时间
    var activatedTime:Int64?

    /// 最后连接时间
    var lastConnectedTime:Int64?

    /// 注册时间
    var createdTime:Int64?

    /// 修改时间
    var updatedTime:Int64?

    /// 产品名称
    var productName:String?

    /// 设备型号
    var model:String?

    /// 设备厂商
    var manufacturer:String?



    public override init(){
        super.init()
    }

    enum QueryDeviceDetailResultCodingKeys: String, CodingKey {
        case deviceId
        case deviceName
        case parentId
        case deviceType
        case status
        case productKey
        case identifier
        case secret
        case descriptionValue = "description"
        case activatedTime
        case lastConnectedTime
        case createdTime
        case updatedTime
        case productName
        case model
        case manufacturer
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryDeviceDetailResultCodingKeys.self)
        if decoderContainer.contains(.deviceId)
        {
            self.deviceId = try decoderContainer.decode(String?.self, forKey: .deviceId)
        }
        if decoderContainer.contains(.deviceName)
        {
            self.deviceName = try decoderContainer.decode(String?.self, forKey: .deviceName)
        }
        if decoderContainer.contains(.parentId)
        {
            self.parentId = try decoderContainer.decode(String?.self, forKey: .parentId)
        }
        if decoderContainer.contains(.deviceType)
        {
            self.deviceType = try decoderContainer.decode(String?.self, forKey: .deviceType)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.productKey)
        {
            self.productKey = try decoderContainer.decode(String?.self, forKey: .productKey)
        }
        if decoderContainer.contains(.identifier)
        {
            self.identifier = try decoderContainer.decode(String?.self, forKey: .identifier)
        }
        if decoderContainer.contains(.secret)
        {
            self.secret = try decoderContainer.decode(String?.self, forKey: .secret)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.activatedTime)
        {
            self.activatedTime = try decoderContainer.decode(Int64?.self, forKey: .activatedTime)
        }
        if decoderContainer.contains(.lastConnectedTime)
        {
            self.lastConnectedTime = try decoderContainer.decode(Int64?.self, forKey: .lastConnectedTime)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(Int64?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.updatedTime)
        {
            self.updatedTime = try decoderContainer.decode(Int64?.self, forKey: .updatedTime)
        }
        if decoderContainer.contains(.productName)
        {
            self.productName = try decoderContainer.decode(String?.self, forKey: .productName)
        }
        if decoderContainer.contains(.model)
        {
            self.model = try decoderContainer.decode(String?.self, forKey: .model)
        }
        if decoderContainer.contains(.manufacturer)
        {
            self.manufacturer = try decoderContainer.decode(String?.self, forKey: .manufacturer)
        }
    }
}
public extension QueryDeviceDetailResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryDeviceDetailResultCodingKeys.self)
        try encoderContainer.encode(deviceId, forKey: .deviceId)
        try encoderContainer.encode(deviceName, forKey: .deviceName)
        try encoderContainer.encode(parentId, forKey: .parentId)
        try encoderContainer.encode(deviceType, forKey: .deviceType)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(productKey, forKey: .productKey)
        try encoderContainer.encode(identifier, forKey: .identifier)
        try encoderContainer.encode(secret, forKey: .secret)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(activatedTime, forKey: .activatedTime)
        try encoderContainer.encode(lastConnectedTime, forKey: .lastConnectedTime)
        try encoderContainer.encode(createdTime, forKey: .createdTime)
        try encoderContainer.encode(updatedTime, forKey: .updatedTime)
        try encoderContainer.encode(productName, forKey: .productName)
        try encoderContainer.encode(model, forKey: .model)
        try encoderContainer.encode(manufacturer, forKey: .manufacturer)
    }
}

///  设备服务调用
public class InvokeThingServiceRequest:JdCloudRequest
{
    /// 服务名称
    var name:String?

    /// 输入参数,object的key为参数名称，value为参数值
    var input:AnyObject?

    /// 设备唯一标识
    var identifier:String

    /// 产品Key
    var productKey:String


    public init(regionId: String,identifier:String,productKey:String){
        self.identifier = identifier
        self.productKey = productKey
        super.init(regionId: regionId)
    }


    enum InvokeThingServiceRequestRequestCodingKeys: String, CodingKey {
        case name
        case input
        case identifier
        case productKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InvokeThingServiceRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(identifier, forKey: .identifier)
        try encoderContainer.encode(productKey, forKey: .productKey)

    }
}


///  查看设备影子
public class DescribeThingShadowRequest:JdCloudRequest
{
    /// 设备唯一标识
    var identifier:String

    /// 产品Key
    var productKey:String


    public init(regionId: String,identifier:String,productKey:String){
        self.identifier = identifier
        self.productKey = productKey
        super.init(regionId: regionId)
    }


    enum DescribeThingShadowRequestRequestCodingKeys: String, CodingKey {
        case identifier
        case productKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeThingShadowRequestRequestCodingKeys.self)
        try encoderContainer.encode(identifier, forKey: .identifier)
        try encoderContainer.encode(productKey, forKey: .productKey)

    }
}


///  分页查询设备信息,支持一个或多个条件
public class QueryDevicePageRequest:JdCloudRequest
{
    /// 设备名称，模糊匹配
    var deviceName:String?

    /// 设备状态 0-未激活，1-激活离线，2-激活在线
    var status:Int?

    /// 设备所归属的产品Key
    var productKey:String?

    /// 设备类型，同产品类型，0-设备，1-网关
    var deviceType:Int?

    /// 当前页数
    var nowPage:Int?

    /// 每页的数据条数
    var pageSize:Int?

    /// 排序关键字--name,type,productKey,status--最多支持一个字段
    var order:String?

    /// 顺序，升序降序--asc,desc
    var direction:String?

    /// 父设备Id
    var parentId:String?




    enum QueryDevicePageRequestRequestCodingKeys: String, CodingKey {
        case deviceName
        case status
        case productKey
        case deviceType
        case nowPage
        case pageSize
        case order
        case direction
        case parentId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryDevicePageRequestRequestCodingKeys.self)
        try encoderContainer.encode(deviceName, forKey: .deviceName)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(productKey, forKey: .productKey)
        try encoderContainer.encode(deviceType, forKey: .deviceType)
        try encoderContainer.encode(nowPage, forKey: .nowPage)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(order, forKey: .order)
        try encoderContainer.encode(direction, forKey: .direction)
        try encoderContainer.encode(parentId, forKey: .parentId)

    }
}

public class DescribeThingShadowResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeThingShadowResult?;

    enum DescribeThingShadowResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeThingShadowResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeThingShadowResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeThingShadowResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeThingShadowResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateDeviceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateDeviceResult?;

    enum UpdateDeviceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateDeviceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateDeviceResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateDeviceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateDeviceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除设备 
public class RemoveDeviceByIdResult:NSObject,JdCloudResult
{
}

///  删除设备
public class RemoveDeviceByIdRequest:JdCloudRequest
{
    /// 设备Id
    var deviceId:String


    public init(regionId: String,deviceId:String){
        self.deviceId = deviceId
        super.init(regionId: regionId)
    }


    enum RemoveDeviceByIdRequestRequestCodingKeys: String, CodingKey {
        case deviceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveDeviceByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(deviceId, forKey: .deviceId)

    }
}


///  查询设备详情
public class QueryDeviceDetailRequest:JdCloudRequest
{
    /// 设备名称
    var deviceName:String

    /// 产品Key
    var productKey:String


    public init(regionId: String,deviceName:String,productKey:String){
        self.deviceName = deviceName
        self.productKey = productKey
        super.init(regionId: regionId)
    }


    enum QueryDeviceDetailRequestRequestCodingKeys: String, CodingKey {
        case deviceName
        case productKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryDeviceDetailRequestRequestCodingKeys.self)
        try encoderContainer.encode(deviceName, forKey: .deviceName)
        try encoderContainer.encode(productKey, forKey: .productKey)

    }
}


///  注册单个设备并返回秘钥信息
public class AddDeviceRequest:JdCloudRequest
{
    /// 设备名称
    var deviceName:String?

    /// 设备所归属的产品
    var productKey:String?

    /// 设备型号
    var model:String?

    /// 厂商
    var manufacturer:String?

    /// 设备描述
    var descriptionValue:String?




    enum AddDeviceRequestRequestCodingKeys: String, CodingKey {
        case deviceName
        case productKey
        case model
        case manufacturer
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddDeviceRequestRequestCodingKeys.self)
        try encoderContainer.encode(deviceName, forKey: .deviceName)
        try encoderContainer.encode(productKey, forKey: .productKey)
        try encoderContainer.encode(model, forKey: .model)
        try encoderContainer.encode(manufacturer, forKey: .manufacturer)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}

public class RemoveDeviceByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RemoveDeviceByIdResult?;

    enum RemoveDeviceByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RemoveDeviceByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RemoveDeviceByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension RemoveDeviceByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveDeviceByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改设备详情 
public class UpdateDeviceResult:NSObject,JdCloudResult
{
    /// 设备详情
    var device:DeviceVO?



    public override init(){
        super.init()
    }

    enum UpdateDeviceResultCodingKeys: String, CodingKey {
        case device
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateDeviceResultCodingKeys.self)
        if decoderContainer.contains(.device)
        {
            self.device = try decoderContainer.decode(DeviceVO?.self, forKey: .device)
        }
    }
}
public extension UpdateDeviceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateDeviceResultCodingKeys.self)
        try encoderContainer.encode(device, forKey: .device)
    }
}
public class AddDeviceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddDeviceResult?;

    enum AddDeviceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddDeviceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddDeviceResult?.self, forKey: .result) ?? nil
    }
}

public extension AddDeviceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddDeviceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QueryDevicePageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryDevicePageResult?;

    enum QueryDevicePageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryDevicePageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryDevicePageResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryDevicePageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryDevicePageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QueryDeviceDetailResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryDeviceDetailResult?;

    enum QueryDeviceDetailResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryDeviceDetailResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryDeviceDetailResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryDeviceDetailResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryDeviceDetailResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看设备影子 
public class DescribeThingShadowResult:NSObject,JdCloudResult
{
    /// 设备状态
    var state:AnyObject?

    /// 当用户更新设备状态文档后，设备影子服务会自动更新metadata的值。设备状态的元数据的信息包含以 Epoch 时间表示的每个属性的时间戳，用来获取准确的更新时间。
    var metadata:AnyObject?

    /// 设备影子版本
    var version:Int?

    /// 设备影子更新时间
    var timestamp:Int64?



    public override init(){
        super.init()
    }

    enum DescribeThingShadowResultCodingKeys: String, CodingKey {
        case state
        case metadata
        case version
        case timestamp
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeThingShadowResultCodingKeys.self)
        if decoderContainer.contains(.version)
        {
            self.version = try decoderContainer.decode(Int?.self, forKey: .version)
        }
        if decoderContainer.contains(.timestamp)
        {
            self.timestamp = try decoderContainer.decode(Int64?.self, forKey: .timestamp)
        }
    }
}
public extension DescribeThingShadowResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeThingShadowResultCodingKeys.self)
        try encoderContainer.encode(version, forKey: .version)
        try encoderContainer.encode(timestamp, forKey: .timestamp)
    }
}
/// 设备服务调用 
public class InvokeThingServiceResult:NSObject,JdCloudResult
{
    /// 消息唯一标识
    var msgId:String?



    public override init(){
        super.init()
    }

    enum InvokeThingServiceResultCodingKeys: String, CodingKey {
        case msgId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InvokeThingServiceResultCodingKeys.self)
        if decoderContainer.contains(.msgId)
        {
            self.msgId = try decoderContainer.decode(String?.self, forKey: .msgId)
        }
    }
}
public extension InvokeThingServiceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InvokeThingServiceResultCodingKeys.self)
        try encoderContainer.encode(msgId, forKey: .msgId)
    }
}
public class UpdateThingShadowResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateThingShadowResult?;

    enum UpdateThingShadowResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateThingShadowResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateThingShadowResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateThingShadowResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateThingShadowResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class InvokeThingServiceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:InvokeThingServiceResult?;

    enum InvokeThingServiceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InvokeThingServiceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(InvokeThingServiceResult?.self, forKey: .result) ?? nil
    }
}

public extension InvokeThingServiceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InvokeThingServiceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  更新设备影子的期望值
public class UpdateThingShadowRequest:JdCloudRequest
{
    /// 运行状态
    var state:AnyObject?

    /// 设备唯一标识
    var identifier:String

    /// 产品Key
    var productKey:String


    public init(regionId: String,identifier:String,productKey:String){
        self.identifier = identifier
        self.productKey = productKey
        super.init(regionId: regionId)
    }


    enum UpdateThingShadowRequestRequestCodingKeys: String, CodingKey {
        case state
        case identifier
        case productKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateThingShadowRequestRequestCodingKeys.self)
        try encoderContainer.encode(identifier, forKey: .identifier)
        try encoderContainer.encode(productKey, forKey: .productKey)

    }
}

public class RemoveDeviceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RemoveDeviceResult?;

    enum RemoveDeviceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RemoveDeviceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RemoveDeviceResult?.self, forKey: .result) ?? nil
    }
}

public extension RemoveDeviceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveDeviceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 更新设备影子的期望值 
public class UpdateThingShadowResult:NSObject,JdCloudResult
{
}

///  修改设备详情
public class UpdateDeviceRequest:JdCloudRequest
{
    /// 设备型号
    var model:String?

    /// 设备厂商
    var manufacturer:String?

    /// 设备描述
    var descriptionValue:String?

    /// 设备状态
    var status:Int?

    /// 设备Id
    var deviceId:String


    public init(regionId: String,deviceId:String){
        self.deviceId = deviceId
        super.init(regionId: regionId)
    }


    enum UpdateDeviceRequestRequestCodingKeys: String, CodingKey {
        case model
        case manufacturer
        case descriptionValue = "description"
        case status
        case deviceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateDeviceRequestRequestCodingKeys.self)
        try encoderContainer.encode(model, forKey: .model)
        try encoderContainer.encode(manufacturer, forKey: .manufacturer)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(deviceId, forKey: .deviceId)

    }
}


///  删除设备
public class RemoveDeviceRequest:JdCloudRequest
{
    /// 设备名称
    var deviceName:String

    /// 产品Key
    var productKey:String


    public init(regionId: String,deviceName:String,productKey:String){
        self.deviceName = deviceName
        self.productKey = productKey
        super.init(regionId: regionId)
    }


    enum RemoveDeviceRequestRequestCodingKeys: String, CodingKey {
        case deviceName
        case productKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveDeviceRequestRequestCodingKeys.self)
        try encoderContainer.encode(deviceName, forKey: .deviceName)
        try encoderContainer.encode(productKey, forKey: .productKey)

    }
}

/// 新建产品 
public class CreateProductResult:NSObject,JdCloudResult
{
    /// ProductKey
    var productKey:String?



    public override init(){
        super.init()
    }

    enum CreateProductResultCodingKeys: String, CodingKey {
        case productKey
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateProductResultCodingKeys.self)
        if decoderContainer.contains(.productKey)
        {
            self.productKey = try decoderContainer.decode(String?.self, forKey: .productKey)
        }
    }
}
public extension CreateProductResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateProductResultCodingKeys.self)
        try encoderContainer.encode(productKey, forKey: .productKey)
    }
}
/// 查看产品列表接口 
public class ListProductsResult:NSObject,JdCloudResult
{
    /// 分页信息
    var page:PageinfoVO?

    /// 产品详情
    var products:[Product?]?



    public override init(){
        super.init()
    }

    enum ListProductsResultCodingKeys: String, CodingKey {
        case page
        case products
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListProductsResultCodingKeys.self)
        if decoderContainer.contains(.page)
        {
            self.page = try decoderContainer.decode(PageinfoVO?.self, forKey: .page)
        }
        if decoderContainer.contains(.products)
        {
            self.products = try decoderContainer.decode([Product?]?.self, forKey: .products)
        }
    }
}
public extension ListProductsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListProductsResultCodingKeys.self)
        try encoderContainer.encode(page, forKey: .page)
        try encoderContainer.encode(products, forKey: .products)
    }
}

///  查看产品
public class DescribeProductRequest:JdCloudRequest
{
    /// 产品Key
    var productKey:String


    public init(regionId: String,productKey:String){
        self.productKey = productKey
        super.init(regionId: regionId)
    }


    enum DescribeProductRequestRequestCodingKeys: String, CodingKey {
        case productKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProductRequestRequestCodingKeys.self)
        try encoderContainer.encode(productKey, forKey: .productKey)

    }
}


///  修改产品
public class UpdateProductRequest:JdCloudRequest
{
    /// 产品名称，名称不可为空，3-30个字符，只支持汉字、英文字母、数字、下划线“_”及中划线“-”，必须以汉字、英文字母及数字开头结尾
    var productName:String?

    /// 产品描述，80字符以内
    var productDescription:String?

    /// 动态注册,0:关闭，1:开启
    var dynamicRegister:Int?

    /// 产品Key
    var productKey:String


    public init(regionId: String,productKey:String){
        self.productKey = productKey
        super.init(regionId: regionId)
    }


    enum UpdateProductRequestRequestCodingKeys: String, CodingKey {
        case productName
        case productDescription
        case dynamicRegister
        case productKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateProductRequestRequestCodingKeys.self)
        try encoderContainer.encode(productName, forKey: .productName)
        try encoderContainer.encode(productDescription, forKey: .productDescription)
        try encoderContainer.encode(dynamicRegister, forKey: .dynamicRegister)
        try encoderContainer.encode(productKey, forKey: .productKey)

    }
}

/// 修改产品 
public class UpdateProductResult:NSObject,JdCloudResult
{
}
public class DescribeProductResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeProductResult?;

    enum DescribeProductResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProductResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeProductResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeProductResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProductResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除产品
public class DeleteProductRequest:JdCloudRequest
{
    /// 产品Key
    var productKey:String


    public init(regionId: String,productKey:String){
        self.productKey = productKey
        super.init(regionId: regionId)
    }


    enum DeleteProductRequestRequestCodingKeys: String, CodingKey {
        case productKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteProductRequestRequestCodingKeys.self)
        try encoderContainer.encode(productKey, forKey: .productKey)

    }
}

/// 删除产品 
public class DeleteProductResult:NSObject,JdCloudResult
{
}
public class UpdateProductResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateProductResult?;

    enum UpdateProductResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateProductResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateProductResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateProductResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateProductResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateProductResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateProductResult?;

    enum CreateProductResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateProductResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateProductResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateProductResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateProductResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查看产品列表接口
public class ListProductsRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为10，取值范围：[10,100]
    var pageSize:Int?

    /// productName-产品名称，精确匹配，支持单个
      /// productKey-产品key，精确匹配，支持单个
      /// productType-产品类型，精确匹配，支持单个
      /// 
    var filters:[Filter?]?




    enum ListProductsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListProductsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class DeleteProductResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteProductResult?;

    enum DeleteProductResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteProductResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteProductResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteProductResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteProductResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ListProductsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ListProductsResult?;

    enum ListProductsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListProductsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ListProductsResult?.self, forKey: .result) ?? nil
    }
}

public extension ListProductsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListProductsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看产品 
public class DescribeProductResult:NSObject,JdCloudResult
{
    /// 产品名称
    var productName:String?

    /// 节点类型，取值：
      /// 0：设备。设备不能挂载子设备。可以直连物联网平台，也可以作为网关的子设备连接物联网平台
      /// 1：网关。网关可以挂载子设备，具有子设备管理模块，维持子设备的拓扑关系，和将拓扑关系同步到物联网平台
      /// 
    var productType:Int?

    /// 产品key
    var productKey:String?

    /// 产品秘钥
    var productSecret:String?

    /// 创建时间,时间为东八区（UTC/GMT+08:00）
    var createdTime:Int64?

    /// 包含设备数
    var deviceCount:Int?

    /// 动态注册,0:关闭，1:开启
    var dynamicRegister:Int?

    /// 产品描述信息
    var productDescription:String?

    /// 产品类型,如自定义等
    var templateName:String?



    public override init(){
        super.init()
    }

    enum DescribeProductResultCodingKeys: String, CodingKey {
        case productName
        case productType
        case productKey
        case productSecret
        case createdTime
        case deviceCount
        case dynamicRegister
        case productDescription
        case templateName
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProductResultCodingKeys.self)
        if decoderContainer.contains(.productName)
        {
            self.productName = try decoderContainer.decode(String?.self, forKey: .productName)
        }
        if decoderContainer.contains(.productType)
        {
            self.productType = try decoderContainer.decode(Int?.self, forKey: .productType)
        }
        if decoderContainer.contains(.productKey)
        {
            self.productKey = try decoderContainer.decode(String?.self, forKey: .productKey)
        }
        if decoderContainer.contains(.productSecret)
        {
            self.productSecret = try decoderContainer.decode(String?.self, forKey: .productSecret)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(Int64?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.deviceCount)
        {
            self.deviceCount = try decoderContainer.decode(Int?.self, forKey: .deviceCount)
        }
        if decoderContainer.contains(.dynamicRegister)
        {
            self.dynamicRegister = try decoderContainer.decode(Int?.self, forKey: .dynamicRegister)
        }
        if decoderContainer.contains(.productDescription)
        {
            self.productDescription = try decoderContainer.decode(String?.self, forKey: .productDescription)
        }
        if decoderContainer.contains(.templateName)
        {
            self.templateName = try decoderContainer.decode(String?.self, forKey: .templateName)
        }
    }
}
public extension DescribeProductResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProductResultCodingKeys.self)
        try encoderContainer.encode(productName, forKey: .productName)
        try encoderContainer.encode(productType, forKey: .productType)
        try encoderContainer.encode(productKey, forKey: .productKey)
        try encoderContainer.encode(productSecret, forKey: .productSecret)
        try encoderContainer.encode(createdTime, forKey: .createdTime)
        try encoderContainer.encode(deviceCount, forKey: .deviceCount)
        try encoderContainer.encode(dynamicRegister, forKey: .dynamicRegister)
        try encoderContainer.encode(productDescription, forKey: .productDescription)
        try encoderContainer.encode(templateName, forKey: .templateName)
    }
}

///  新建产品
public class CreateProductRequest:JdCloudRequest
{
    /// 产品名称，名称不可为空，3-30个字符，只支持汉字、英文字母、数字、下划线“_”及中划线“-”，必须以汉字、英文字母及数字开头结尾
    var productName:String

    /// 节点类型，取值：
      /// 0：设备。设备不能挂载子设备。可以直连物联网平台，也可以作为网关的子设备连接物联网平台
      /// 1：网关。网关可以挂载子设备，具有子设备管理模块，维持子设备的拓扑关系，和将拓扑关系同步到物联网平台
      /// 
    var productType:Int

    /// 产品描述，80字符以内
    var productDescription:String?

    /// 物模型模板ID，内部参数，用户不可见，默认为自定义
    var templateId:String?


    public init(regionId: String,productName:String,productType:Int){
        self.productName = productName
        self.productType = productType
        super.init(regionId: regionId)
    }


    enum CreateProductRequestRequestCodingKeys: String, CodingKey {
        case productName
        case productType
        case productDescription
        case templateId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateProductRequestRequestCodingKeys.self)
        try encoderContainer.encode(productName, forKey: .productName)
        try encoderContainer.encode(productType, forKey: .productType)
        try encoderContainer.encode(productDescription, forKey: .productDescription)
        try encoderContainer.encode(templateId, forKey: .templateId)

    }
}

