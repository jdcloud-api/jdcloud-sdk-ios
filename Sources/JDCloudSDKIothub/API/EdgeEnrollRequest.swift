/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   EdgeManager
   edge管理模块

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  添加边缘计算设备
@objc(EdgeEnrollRequest)
public class EdgeEnrollRequest:JdCloudRequest
{
    /// 边缘计算设备显示名称
    var edgeName:String

    /// IoTHubInstance编号
    var instanceId:String

    /// 操作系统
    var os:String

    /// 硬件平台版本
    var hardware:String

    /// 边缘说明
    var edgeDesc:String?

    /// 边缘计算节点编号
    var edgeId:String


    public init(regionId: String,edgeName:String,instanceId:String,os:String,hardware:String,edgeId:String){
        self.edgeName = edgeName
        self.instanceId = instanceId
        self.os = os
        self.hardware = hardware
        self.edgeId = edgeId
        super.init(regionId: regionId)
    }


    enum EdgeEnrollRequestRequestCodingKeys: String, CodingKey {
        case edgeName
        case instanceId
        case os
        case hardware
        case edgeDesc
        case edgeId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EdgeEnrollRequestRequestCodingKeys.self)
        try encoderContainer.encode(edgeName, forKey: .edgeName)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(os, forKey: .os)
        try encoderContainer.encode(hardware, forKey: .hardware)
        try encoderContainer.encode(edgeDesc, forKey: .edgeDesc)
        try encoderContainer.encode(edgeId, forKey: .edgeId)

    }
}
