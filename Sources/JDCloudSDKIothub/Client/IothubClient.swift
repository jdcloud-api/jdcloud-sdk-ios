/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JCLOUD IoT Hub API
   API related to IoT Hub

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class IothubJDCloudClient:NSObject,JDCloudClient{
    
    private final var iothubJDCloudClient:IothubJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        iothubJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "iothub.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        iothubJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "iothub/" + "v2"
    
    public let serviceName: String = "iothub"
    
    public let version: String = "v2"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func updateDeviceAsync(request:UpdateDeviceRequest,requestComplation:@escaping ExecuteResult<UpdateDeviceResult>) throws {
        iothubJDCloudClient = self
        try UpdateDeviceExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listProductAbilitiesAsync(request:ListProductAbilitiesRequest,requestComplation:@escaping ExecuteResult<ListProductAbilitiesResult>) throws {
        iothubJDCloudClient = self
        try ListProductAbilitiesExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteProductAsync(request:DeleteProductRequest,requestComplation:@escaping ExecuteResult<DeleteProductResult>) throws {
        iothubJDCloudClient = self
        try DeleteProductExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func removeDeviceByIdAsync(request:RemoveDeviceByIdRequest,requestComplation:@escaping ExecuteResult<RemoveDeviceByIdResult>) throws {
        iothubJDCloudClient = self
        try RemoveDeviceByIdExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func exportThingModelAsync(request:ExportThingModelRequest,requestComplation:@escaping ExecuteResult<ExportThingModelResult>) throws {
        iothubJDCloudClient = self
        try ExportThingModelExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func invokeThingServiceAsync(request:InvokeThingServiceRequest,requestComplation:@escaping ExecuteResult<InvokeThingServiceResult>) throws {
        iothubJDCloudClient = self
        try InvokeThingServiceExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func removeDeviceAsync(request:RemoveDeviceRequest,requestComplation:@escaping ExecuteResult<RemoveDeviceResult>) throws {
        iothubJDCloudClient = self
        try RemoveDeviceExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func importThingModelAsync(request:ImportThingModelRequest,requestComplation:@escaping ExecuteResult<ImportThingModelResult>) throws {
        iothubJDCloudClient = self
        try ImportThingModelExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateThingShadowAsync(request:UpdateThingShadowRequest,requestComplation:@escaping ExecuteResult<UpdateThingShadowResult>) throws {
        iothubJDCloudClient = self
        try UpdateThingShadowExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeProductAsync(request:DescribeProductRequest,requestComplation:@escaping ExecuteResult<DescribeProductResult>) throws {
        iothubJDCloudClient = self
        try DescribeProductExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeThingShadowAsync(request:DescribeThingShadowRequest,requestComplation:@escaping ExecuteResult<DescribeThingShadowResult>) throws {
        iothubJDCloudClient = self
        try DescribeThingShadowExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addDeviceAsync(request:AddDeviceRequest,requestComplation:@escaping ExecuteResult<AddDeviceResult>) throws {
        iothubJDCloudClient = self
        try AddDeviceExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listProductsAsync(request:ListProductsRequest,requestComplation:@escaping ExecuteResult<ListProductsResult>) throws {
        iothubJDCloudClient = self
        try ListProductsExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryDeviceDetailAsync(request:QueryDeviceDetailRequest,requestComplation:@escaping ExecuteResult<QueryDeviceDetailResult>) throws {
        iothubJDCloudClient = self
        try QueryDeviceDetailExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryDevicePageAsync(request:QueryDevicePageRequest,requestComplation:@escaping ExecuteResult<QueryDevicePageResult>) throws {
        iothubJDCloudClient = self
        try QueryDevicePageExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createProductAsync(request:CreateProductRequest,requestComplation:@escaping ExecuteResult<CreateProductResult>) throws {
        iothubJDCloudClient = self
        try CreateProductExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateProductAsync(request:UpdateProductRequest,requestComplation:@escaping ExecuteResult<UpdateProductResult>) throws {
        iothubJDCloudClient = self
        try UpdateProductExecutor(jdCloudClient: iothubJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension IothubJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "iothub.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
