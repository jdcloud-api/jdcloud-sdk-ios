/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  action
@objc(Action)
public class Action:NSObject,Codable{
    /// ActionId
    var actionId:String?
    /// 动作类型，包括：handle（数据处理）、forward（转发数据）和failure（转发失败）
    var actionType:String?
    /// 操作类型,包括：JCQ、JsScript、Kafka、RabbitMq、RDS和ES
    var operationType:String?
    /// 规则动作的配置信息, Configuration是JSONObject格式，会根据不同的规则动作，形成不同的JSONObject格式，即不同的配置信息格式。
    var configuration:AnyObject?



    public override init(){
            super.init()
    }

    enum ActionCodingKeys: String, CodingKey {
        case actionId
        case actionType
        case operationType
        case configuration
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ActionCodingKeys.self)
        if decoderContainer.contains(.actionId)
        {
            self.actionId = try decoderContainer.decode(String?.self, forKey: .actionId)
        }
        if decoderContainer.contains(.actionType)
        {
            self.actionType = try decoderContainer.decode(String?.self, forKey: .actionType)
        }
        if decoderContainer.contains(.operationType)
        {
            self.operationType = try decoderContainer.decode(String?.self, forKey: .operationType)
        }
    }
}
public extension Action{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ActionCodingKeys.self)
         try encoderContainer.encode(actionId, forKey: .actionId)
         try encoderContainer.encode(actionType, forKey: .actionType)
         try encoderContainer.encode(operationType, forKey: .operationType)
    }
}
