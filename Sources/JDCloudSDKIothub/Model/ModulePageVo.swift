/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  modulePageVo
@objc(ModulePageVo)
public class ModulePageVo:NSObject,Codable{
    /// Module唯一标识
    var uuid:String?
    /// Module编号
    var moduleId:String?
    /// Module显示名称
    var moduleName:String?
    /// 设备编号
    var deviceId:String?
    /// 设备显示名称
    var deviceName:String?
    /// 设备类型[0-普通设备,1-云网关设备,2-Edge设备]
    var deviceType:Int?
    /// 模块部署状态[0-部署完成,1-待部署]
    var moduleStatus:Int?
    /// 模块类型版本
    var moduleTypeVersion:String?



    public override init(){
            super.init()
    }

    enum ModulePageVoCodingKeys: String, CodingKey {
        case uuid
        case moduleId
        case moduleName
        case deviceId
        case deviceName
        case deviceType
        case moduleStatus
        case moduleTypeVersion
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModulePageVoCodingKeys.self)
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.moduleId)
        {
            self.moduleId = try decoderContainer.decode(String?.self, forKey: .moduleId)
        }
        if decoderContainer.contains(.moduleName)
        {
            self.moduleName = try decoderContainer.decode(String?.self, forKey: .moduleName)
        }
        if decoderContainer.contains(.deviceId)
        {
            self.deviceId = try decoderContainer.decode(String?.self, forKey: .deviceId)
        }
        if decoderContainer.contains(.deviceName)
        {
            self.deviceName = try decoderContainer.decode(String?.self, forKey: .deviceName)
        }
        if decoderContainer.contains(.deviceType)
        {
            self.deviceType = try decoderContainer.decode(Int?.self, forKey: .deviceType)
        }
        if decoderContainer.contains(.moduleStatus)
        {
            self.moduleStatus = try decoderContainer.decode(Int?.self, forKey: .moduleStatus)
        }
        if decoderContainer.contains(.moduleTypeVersion)
        {
            self.moduleTypeVersion = try decoderContainer.decode(String?.self, forKey: .moduleTypeVersion)
        }
    }
}
public extension ModulePageVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModulePageVoCodingKeys.self)
         try encoderContainer.encode(uuid, forKey: .uuid)
         try encoderContainer.encode(moduleId, forKey: .moduleId)
         try encoderContainer.encode(moduleName, forKey: .moduleName)
         try encoderContainer.encode(deviceId, forKey: .deviceId)
         try encoderContainer.encode(deviceName, forKey: .deviceName)
         try encoderContainer.encode(deviceType, forKey: .deviceType)
         try encoderContainer.encode(moduleStatus, forKey: .moduleStatus)
         try encoderContainer.encode(moduleTypeVersion, forKey: .moduleTypeVersion)
    }
}
