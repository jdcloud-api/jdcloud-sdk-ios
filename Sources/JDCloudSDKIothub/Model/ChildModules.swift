/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  childModules
@objc(ChildModules)
public class ChildModules:NSObject,Codable{
    /// 模块编号
    var moduleId:String?
    /// 模块名称
    var moduleName:String?
    /// 模块类型版本
    var moduleTypeVersion:String?
    /// 物模型名称
    var omName:String?
    /// 物模型描述
    var omDesc:String?
    /// 模块状态
    var moduleState:String?



    public override init(){
            super.init()
    }

    enum ChildModulesCodingKeys: String, CodingKey {
        case moduleId
        case moduleName
        case moduleTypeVersion
        case omName
        case omDesc
        case moduleState
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ChildModulesCodingKeys.self)
        if decoderContainer.contains(.moduleId)
        {
            self.moduleId = try decoderContainer.decode(String?.self, forKey: .moduleId)
        }
        if decoderContainer.contains(.moduleName)
        {
            self.moduleName = try decoderContainer.decode(String?.self, forKey: .moduleName)
        }
        if decoderContainer.contains(.moduleTypeVersion)
        {
            self.moduleTypeVersion = try decoderContainer.decode(String?.self, forKey: .moduleTypeVersion)
        }
        if decoderContainer.contains(.omName)
        {
            self.omName = try decoderContainer.decode(String?.self, forKey: .omName)
        }
        if decoderContainer.contains(.omDesc)
        {
            self.omDesc = try decoderContainer.decode(String?.self, forKey: .omDesc)
        }
        if decoderContainer.contains(.moduleState)
        {
            self.moduleState = try decoderContainer.decode(String?.self, forKey: .moduleState)
        }
    }
}
public extension ChildModules{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ChildModulesCodingKeys.self)
         try encoderContainer.encode(moduleId, forKey: .moduleId)
         try encoderContainer.encode(moduleName, forKey: .moduleName)
         try encoderContainer.encode(moduleTypeVersion, forKey: .moduleTypeVersion)
         try encoderContainer.encode(omName, forKey: .omName)
         try encoderContainer.encode(omDesc, forKey: .omDesc)
         try encoderContainer.encode(moduleState, forKey: .moduleState)
    }
}
