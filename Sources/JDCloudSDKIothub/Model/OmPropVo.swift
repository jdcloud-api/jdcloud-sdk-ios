/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  omPropVo
@objc(OmPropVo)
public class OmPropVo:NSObject,Codable{
    /// Uuid
    var uuid:String?
    /// OmId
    var omId:String?
    /// OmName
    var omName:String?
    /// AttrName
    var attrName:String?
    /// AttrText
    var attrText:String?
    /// AttrType
    var attrType:String?
    /// UserPin
    var userPin:String?
    /// InstanceId
    var instanceId:String?



    public override init(){
            super.init()
    }

    enum OmPropVoCodingKeys: String, CodingKey {
        case uuid
        case omId
        case omName
        case attrName
        case attrText
        case attrType
        case userPin
        case instanceId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OmPropVoCodingKeys.self)
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.omId)
        {
            self.omId = try decoderContainer.decode(String?.self, forKey: .omId)
        }
        if decoderContainer.contains(.omName)
        {
            self.omName = try decoderContainer.decode(String?.self, forKey: .omName)
        }
        if decoderContainer.contains(.attrName)
        {
            self.attrName = try decoderContainer.decode(String?.self, forKey: .attrName)
        }
        if decoderContainer.contains(.attrText)
        {
            self.attrText = try decoderContainer.decode(String?.self, forKey: .attrText)
        }
        if decoderContainer.contains(.attrType)
        {
            self.attrType = try decoderContainer.decode(String?.self, forKey: .attrType)
        }
        if decoderContainer.contains(.userPin)
        {
            self.userPin = try decoderContainer.decode(String?.self, forKey: .userPin)
        }
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
    }
}
public extension OmPropVo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OmPropVoCodingKeys.self)
         try encoderContainer.encode(uuid, forKey: .uuid)
         try encoderContainer.encode(omId, forKey: .omId)
         try encoderContainer.encode(omName, forKey: .omName)
         try encoderContainer.encode(attrName, forKey: .attrName)
         try encoderContainer.encode(attrText, forKey: .attrText)
         try encoderContainer.encode(attrType, forKey: .attrType)
         try encoderContainer.encode(userPin, forKey: .userPin)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
    }
}
