/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  edgeInfoVO
@objc(EdgeInfoVO)
public class EdgeInfoVO:NSObject,Codable{
    /// 系统流水号
    var uuid:String?
    /// Edge的唯一编号
    var edgeId:String?
    /// Edge的名称
    var edgeName:String?
    /// 是否在线【0-离线，1-在线】
    var edgeStatus:Int?
    /// 边缘计算说明
    var edgeDesc:String?
    /// Edge版本
    var edgeVersion:String?
    /// Edge创建时间
    var createTime:String?
    /// 最后在线时间
    var lastOnlineTime:String?
    /// 最后开机时间
    var lastTurnOnTime:String?
    /// IoT Hub实例编号
    var iothubInstanceId:String?
    /// IoT Hub实例名称
    var iothubInstanceName:String?



    public override init(){
            super.init()
    }

    enum EdgeInfoVOCodingKeys: String, CodingKey {
        case uuid
        case edgeId
        case edgeName
        case edgeStatus
        case edgeDesc
        case edgeVersion
        case createTime
        case lastOnlineTime
        case lastTurnOnTime
        case iothubInstanceId
        case iothubInstanceName
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EdgeInfoVOCodingKeys.self)
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.edgeId)
        {
            self.edgeId = try decoderContainer.decode(String?.self, forKey: .edgeId)
        }
        if decoderContainer.contains(.edgeName)
        {
            self.edgeName = try decoderContainer.decode(String?.self, forKey: .edgeName)
        }
        if decoderContainer.contains(.edgeStatus)
        {
            self.edgeStatus = try decoderContainer.decode(Int?.self, forKey: .edgeStatus)
        }
        if decoderContainer.contains(.edgeDesc)
        {
            self.edgeDesc = try decoderContainer.decode(String?.self, forKey: .edgeDesc)
        }
        if decoderContainer.contains(.edgeVersion)
        {
            self.edgeVersion = try decoderContainer.decode(String?.self, forKey: .edgeVersion)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.lastOnlineTime)
        {
            self.lastOnlineTime = try decoderContainer.decode(String?.self, forKey: .lastOnlineTime)
        }
        if decoderContainer.contains(.lastTurnOnTime)
        {
            self.lastTurnOnTime = try decoderContainer.decode(String?.self, forKey: .lastTurnOnTime)
        }
        if decoderContainer.contains(.iothubInstanceId)
        {
            self.iothubInstanceId = try decoderContainer.decode(String?.self, forKey: .iothubInstanceId)
        }
        if decoderContainer.contains(.iothubInstanceName)
        {
            self.iothubInstanceName = try decoderContainer.decode(String?.self, forKey: .iothubInstanceName)
        }
    }
}
public extension EdgeInfoVO{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EdgeInfoVOCodingKeys.self)
         try encoderContainer.encode(uuid, forKey: .uuid)
         try encoderContainer.encode(edgeId, forKey: .edgeId)
         try encoderContainer.encode(edgeName, forKey: .edgeName)
         try encoderContainer.encode(edgeStatus, forKey: .edgeStatus)
         try encoderContainer.encode(edgeDesc, forKey: .edgeDesc)
         try encoderContainer.encode(edgeVersion, forKey: .edgeVersion)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(lastOnlineTime, forKey: .lastOnlineTime)
         try encoderContainer.encode(lastTurnOnTime, forKey: .lastTurnOnTime)
         try encoderContainer.encode(iothubInstanceId, forKey: .iothubInstanceId)
         try encoderContainer.encode(iothubInstanceName, forKey: .iothubInstanceName)
    }
}
