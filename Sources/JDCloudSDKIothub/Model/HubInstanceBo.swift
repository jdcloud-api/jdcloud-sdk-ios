/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  hubInstanceBo
@objc(HubInstanceBo)
public class HubInstanceBo:NSObject,Codable{
    /// InstanceUuid
    var instanceUuid:String?
    /// InstanceId
    var instanceId:String?
    /// InstanceName
    var instanceName:String?
    /// Region
    var region:String?



    public override init(){
            super.init()
    }

    enum HubInstanceBoCodingKeys: String, CodingKey {
        case instanceUuid
        case instanceId
        case instanceName
        case region
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: HubInstanceBoCodingKeys.self)
        if decoderContainer.contains(.instanceUuid)
        {
            self.instanceUuid = try decoderContainer.decode(String?.self, forKey: .instanceUuid)
        }
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.instanceName)
        {
            self.instanceName = try decoderContainer.decode(String?.self, forKey: .instanceName)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
    }
}
public extension HubInstanceBo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: HubInstanceBoCodingKeys.self)
         try encoderContainer.encode(instanceUuid, forKey: .instanceUuid)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
         try encoderContainer.encode(instanceName, forKey: .instanceName)
         try encoderContainer.encode(region, forKey: .region)
    }
}
