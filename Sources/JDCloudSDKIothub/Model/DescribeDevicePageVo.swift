/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  describeDevicePageVo
@objc(DescribeDevicePageVo)
public class DescribeDevicePageVo:NSObject,Codable{
    /// Uuid
    var uuid:String?
    /// InstanceId
    var instanceId:String?
    /// DeviceId
    var deviceId:String?
    /// DisplayName
    var displayName:String?
    /// DeviceType
    var deviceType:String?
    /// DeviceState
    var deviceState:String?
    /// OmId
    var omId:String?
    /// DeviceFilePath
    var deviceFilePath:String?
    /// OmName
    var omName:String?
    /// CreateTime
    var createTime:String?
    /// UserPin
    var userPin:String?
    /// ParentUuid
    var parentUuid:String?
    /// ParentName
    var parentName:String?
    /// LastConnectTime
    var lastConnectTime:String?



    public override init(){
            super.init()
    }

    enum DescribeDevicePageVoCodingKeys: String, CodingKey {
        case uuid
        case instanceId
        case deviceId
        case displayName
        case deviceType
        case deviceState
        case omId
        case deviceFilePath
        case omName
        case createTime
        case userPin
        case parentUuid
        case parentName
        case lastConnectTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDevicePageVoCodingKeys.self)
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.deviceId)
        {
            self.deviceId = try decoderContainer.decode(String?.self, forKey: .deviceId)
        }
        if decoderContainer.contains(.displayName)
        {
            self.displayName = try decoderContainer.decode(String?.self, forKey: .displayName)
        }
        if decoderContainer.contains(.deviceType)
        {
            self.deviceType = try decoderContainer.decode(String?.self, forKey: .deviceType)
        }
        if decoderContainer.contains(.deviceState)
        {
            self.deviceState = try decoderContainer.decode(String?.self, forKey: .deviceState)
        }
        if decoderContainer.contains(.omId)
        {
            self.omId = try decoderContainer.decode(String?.self, forKey: .omId)
        }
        if decoderContainer.contains(.deviceFilePath)
        {
            self.deviceFilePath = try decoderContainer.decode(String?.self, forKey: .deviceFilePath)
        }
        if decoderContainer.contains(.omName)
        {
            self.omName = try decoderContainer.decode(String?.self, forKey: .omName)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.userPin)
        {
            self.userPin = try decoderContainer.decode(String?.self, forKey: .userPin)
        }
        if decoderContainer.contains(.parentUuid)
        {
            self.parentUuid = try decoderContainer.decode(String?.self, forKey: .parentUuid)
        }
        if decoderContainer.contains(.parentName)
        {
            self.parentName = try decoderContainer.decode(String?.self, forKey: .parentName)
        }
        if decoderContainer.contains(.lastConnectTime)
        {
            self.lastConnectTime = try decoderContainer.decode(String?.self, forKey: .lastConnectTime)
        }
    }
}
public extension DescribeDevicePageVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDevicePageVoCodingKeys.self)
         try encoderContainer.encode(uuid, forKey: .uuid)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
         try encoderContainer.encode(deviceId, forKey: .deviceId)
         try encoderContainer.encode(displayName, forKey: .displayName)
         try encoderContainer.encode(deviceType, forKey: .deviceType)
         try encoderContainer.encode(deviceState, forKey: .deviceState)
         try encoderContainer.encode(omId, forKey: .omId)
         try encoderContainer.encode(deviceFilePath, forKey: .deviceFilePath)
         try encoderContainer.encode(omName, forKey: .omName)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(userPin, forKey: .userPin)
         try encoderContainer.encode(parentUuid, forKey: .parentUuid)
         try encoderContainer.encode(parentName, forKey: .parentName)
         try encoderContainer.encode(lastConnectTime, forKey: .lastConnectTime)
    }
}
