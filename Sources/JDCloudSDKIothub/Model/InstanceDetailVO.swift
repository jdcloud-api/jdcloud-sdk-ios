/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  instanceDetailVO
@objc(InstanceDetailVO)
public class InstanceDetailVO:NSObject,Codable{
    /// Id
    var id:String?
    /// Name
    var name:String?
    /// SubNetId
    var subNetId:String?
    /// SubNetName
    var subNetName:String?
    /// VpcId
    var vpcId:String?
    /// VpcName
    var vpcName:String?
    /// AzName
    var azName:String?
    /// PubDomain
    var pubDomain:String?
    /// PriDomain
    var priDomain:String?
    /// Status
    var status:String?
    /// CreateTime
    var createTime:String?
    /// Description
    var descriptionValue:String?
    /// Region
    var region:String?
    /// RdsInstanceId
    var rdsInstanceId:String?
    /// RdsDatabase
    var rdsDatabase:String?
    /// RdsHostName
    var rdsHostName:String?
    /// RdsUserName
    var rdsUserName:String?
    /// JcqAccessPoint
    var jcqAccessPoint:String?
    /// JcqTopicName
    var jcqTopicName:String?
    /// JcqTopicType
    var jcqTopicType:String?
    /// JcqRegion
    var jcqRegion:String?



    public override init(){
            super.init()
    }

    enum InstanceDetailVOCodingKeys: String, CodingKey {
        case id
        case name
        case subNetId
        case subNetName
        case vpcId
        case vpcName
        case azName
        case pubDomain
        case priDomain
        case status
        case createTime
        case descriptionValue = "description"
        case region
        case rdsInstanceId
        case rdsDatabase
        case rdsHostName
        case rdsUserName
        case jcqAccessPoint
        case jcqTopicName
        case jcqTopicType
        case jcqRegion
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InstanceDetailVOCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.subNetId)
        {
            self.subNetId = try decoderContainer.decode(String?.self, forKey: .subNetId)
        }
        if decoderContainer.contains(.subNetName)
        {
            self.subNetName = try decoderContainer.decode(String?.self, forKey: .subNetName)
        }
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
        if decoderContainer.contains(.vpcName)
        {
            self.vpcName = try decoderContainer.decode(String?.self, forKey: .vpcName)
        }
        if decoderContainer.contains(.azName)
        {
            self.azName = try decoderContainer.decode(String?.self, forKey: .azName)
        }
        if decoderContainer.contains(.pubDomain)
        {
            self.pubDomain = try decoderContainer.decode(String?.self, forKey: .pubDomain)
        }
        if decoderContainer.contains(.priDomain)
        {
            self.priDomain = try decoderContainer.decode(String?.self, forKey: .priDomain)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.rdsInstanceId)
        {
            self.rdsInstanceId = try decoderContainer.decode(String?.self, forKey: .rdsInstanceId)
        }
        if decoderContainer.contains(.rdsDatabase)
        {
            self.rdsDatabase = try decoderContainer.decode(String?.self, forKey: .rdsDatabase)
        }
        if decoderContainer.contains(.rdsHostName)
        {
            self.rdsHostName = try decoderContainer.decode(String?.self, forKey: .rdsHostName)
        }
        if decoderContainer.contains(.rdsUserName)
        {
            self.rdsUserName = try decoderContainer.decode(String?.self, forKey: .rdsUserName)
        }
        if decoderContainer.contains(.jcqAccessPoint)
        {
            self.jcqAccessPoint = try decoderContainer.decode(String?.self, forKey: .jcqAccessPoint)
        }
        if decoderContainer.contains(.jcqTopicName)
        {
            self.jcqTopicName = try decoderContainer.decode(String?.self, forKey: .jcqTopicName)
        }
        if decoderContainer.contains(.jcqTopicType)
        {
            self.jcqTopicType = try decoderContainer.decode(String?.self, forKey: .jcqTopicType)
        }
        if decoderContainer.contains(.jcqRegion)
        {
            self.jcqRegion = try decoderContainer.decode(String?.self, forKey: .jcqRegion)
        }
    }
}
public extension InstanceDetailVO{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InstanceDetailVOCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(subNetId, forKey: .subNetId)
         try encoderContainer.encode(subNetName, forKey: .subNetName)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(vpcName, forKey: .vpcName)
         try encoderContainer.encode(azName, forKey: .azName)
         try encoderContainer.encode(pubDomain, forKey: .pubDomain)
         try encoderContainer.encode(priDomain, forKey: .priDomain)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(rdsInstanceId, forKey: .rdsInstanceId)
         try encoderContainer.encode(rdsDatabase, forKey: .rdsDatabase)
         try encoderContainer.encode(rdsHostName, forKey: .rdsHostName)
         try encoderContainer.encode(rdsUserName, forKey: .rdsUserName)
         try encoderContainer.encode(jcqAccessPoint, forKey: .jcqAccessPoint)
         try encoderContainer.encode(jcqTopicName, forKey: .jcqTopicName)
         try encoderContainer.encode(jcqTopicType, forKey: .jcqTopicType)
         try encoderContainer.encode(jcqRegion, forKey: .jcqRegion)
    }
}
