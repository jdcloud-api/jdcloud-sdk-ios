/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Operation Records APIs
   Anti DDoS Protection Package Operation Records APIs

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

public class DescribeCpsIpResourcesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCpsIpResourcesResult?;

    enum DescribeCpsIpResourcesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCpsIpResourcesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCpsIpResourcesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCpsIpResourcesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCpsIpResourcesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询 DDoS 防护包可防护的托管区公网 IP
public class DescribeCcsIpResourcesRequest:JdCloudRequest
{
    /// 页码
    var pageNumber:Int?

    /// 分页大小
    var pageSize:Int?




    enum DescribeCcsIpResourcesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCcsIpResourcesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

/// 查询 DDoS 防护包可防护的托管区公网 IP 
public class DescribeCcsIpResourcesResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[IpResource?]?

    /// 当前页数量
    var currentCount:Int?

    /// 总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeCcsIpResourcesResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCcsIpResourcesResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([IpResource?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeCcsIpResourcesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCcsIpResourcesResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}

///  查询 DDoS 防护包可防护的云物理服务器公网 IP(包括云物理服务器弹性公网 IP 及云物理服务器基础网络实例的公网 IP)
public class DescribeCpsIpResourcesRequest:JdCloudRequest
{
    /// 页码
    var pageNumber:Int?

    /// 分页大小
    var pageSize:Int?




    enum DescribeCpsIpResourcesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCpsIpResourcesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

public class DescribeElasticIpResourcesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeElasticIpResourcesResult?;

    enum DescribeElasticIpResourcesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpResourcesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeElasticIpResourcesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeElasticIpResourcesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpResourcesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询 DDoS 防护包可防护的私有网络弹性公网 IP(不包括运营商级 NAT 保留地址和 IPv6)
public class DescribeElasticIpResourcesRequest:JdCloudRequest
{
    /// 页码
    var pageNumber:Int?

    /// 分页大小
    var pageSize:Int?




    enum DescribeElasticIpResourcesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpResourcesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

public class DescribeCcsIpResourcesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCcsIpResourcesResult?;

    enum DescribeCcsIpResourcesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCcsIpResourcesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCcsIpResourcesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCcsIpResourcesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCcsIpResourcesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询 DDoS 防护包可防护的私有网络弹性公网 IP(不包括运营商级 NAT 保留地址和 IPv6) 
public class DescribeElasticIpResourcesResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[IpResource?]?

    /// 当前页数量
    var currentCount:Int?

    /// 实例总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeElasticIpResourcesResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpResourcesResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([IpResource?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeElasticIpResourcesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpResourcesResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
/// 查询 DDoS 防护包可防护的云物理服务器公网 IP(包括云物理服务器弹性公网 IP 及云物理服务器基础网络实例的公网 IP) 
public class DescribeCpsIpResourcesResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[IpResource?]?

    /// 当前页数量
    var currentCount:Int?

    /// 实例总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeCpsIpResourcesResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCpsIpResourcesResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([IpResource?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeCpsIpResourcesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCpsIpResourcesResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}

///  查询各类型攻击次数, 参数 ip 优先级大于 instanceId
      ///       ///   - 指定 ip 参数时, 忽略 instanceId 参数, 查询 ip 相关攻击记录的各类型攻击次数
      ///       ///   - 未指定 ip 时, 查询 instanceId 指定实例相关攻击记录的各类型攻击次数
      ///       ///   - ip 和 instanceId 均未指定时, 查询用户所有公网 IP 攻击记录的各类型攻击次数
      ///       /// 
public class DescribeAttackTypeCountRequest:JdCloudRequest
{
    /// 开始时间, 只能查询最近 90 天以内的数据, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String

    /// 结束时间, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String

    /// 防护包实例 Id
    var instanceId:String?

    /// DDoS 防护包已防护的公网 IP
      /// - 使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-protection-package/api/describeprotectediplist&quot;&gt;describeProtectedIpList&lt;/a&gt; 接口查询 DDoS 防护包已防护的公网 IP
      /// 
    var ip:[String?]?


    public init(regionId: String,startTime:String,endTime:String){
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum DescribeAttackTypeCountRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case instanceId
        case ip
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackTypeCountRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(ip, forKey: .ip)

    }
}

public class DescribeIpMonitorFlowResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeIpMonitorFlowResult?;

    enum DescribeIpMonitorFlowResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIpMonitorFlowResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeIpMonitorFlowResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeIpMonitorFlowResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIpMonitorFlowResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  攻击记录统计, 参数 ip 优先级大于 instanceId
      ///       ///   - 指定 ip 参数时, 忽略 instanceId 参数, 统计 ip 的攻击情况
      ///       ///   - 未指定 ip 时, 统计 instanceId 指定实例相关攻击情况
      ///       ///   - ip 和 instanceId 均未指定时, 查询用户所有公网 IP 攻击情况
      ///       /// 
public class DescribeAttackStatisticsRequest:JdCloudRequest
{
    /// 开始时间, 只能查询最近 90 天以内的数据, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String

    /// 结束时间, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String

    /// 防护包实例 Id
    var instanceId:String?

    /// DDoS 防护包已防护的公网 IP
      /// - 使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-protection-package/api/describeprotectediplist&quot;&gt;describeProtectedIpList&lt;/a&gt; 接口查询 DDoS 防护包已防护的公网 IP
      /// 
    var ip:[String?]?


    public init(regionId: String,startTime:String,endTime:String){
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum DescribeAttackStatisticsRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case instanceId
        case ip
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackStatisticsRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(ip, forKey: .ip)

    }
}

public class DescribeAttackSourceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAttackSourceResult?;

    enum DescribeAttackSourceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackSourceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAttackSourceResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAttackSourceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackSourceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询公网 IP 的监控流量 
public class DescribeIpMonitorFlowResult:NSObject,JdCloudResult
{
    /// Bps
    var bps:IpResourceFlow?

    /// Pps
    var pps:IpResourceFlow?



    public override init(){
        super.init()
    }

    enum DescribeIpMonitorFlowResultCodingKeys: String, CodingKey {
        case bps
        case pps
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIpMonitorFlowResultCodingKeys.self)
        if decoderContainer.contains(.bps)
        {
            self.bps = try decoderContainer.decode(IpResourceFlow?.self, forKey: .bps)
        }
        if decoderContainer.contains(.pps)
        {
            self.pps = try decoderContainer.decode(IpResourceFlow?.self, forKey: .pps)
        }
    }
}
public extension DescribeIpMonitorFlowResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIpMonitorFlowResultCodingKeys.self)
        try encoderContainer.encode(bps, forKey: .bps)
        try encoderContainer.encode(pps, forKey: .pps)
    }
}
/// 攻击记录统计, 参数 ip 优先级大于 instanceId
      ///       ///   - 指定 ip 参数时, 忽略 instanceId 参数, 统计 ip 的攻击情况
      ///       ///   - 未指定 ip 时, 统计 instanceId 指定实例相关攻击情况
      ///       ///   - ip 和 instanceId 均未指定时, 查询用户所有公网 IP 攻击情况
      ///       ///  
public class DescribeAttackStatisticsResult:NSObject,JdCloudResult
{
    /// 攻击次数
    var attackCount:Int?

    /// 黑洞次数
    var blackHoleCount:Int?

    /// 攻击流量峰值
    var peak:Double?

    /// 攻击流量单位
    var unit:String?



    public override init(){
        super.init()
    }

    enum DescribeAttackStatisticsResultCodingKeys: String, CodingKey {
        case attackCount
        case blackHoleCount
        case peak
        case unit
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackStatisticsResultCodingKeys.self)
        if decoderContainer.contains(.attackCount)
        {
            self.attackCount = try decoderContainer.decode(Int?.self, forKey: .attackCount)
        }
        if decoderContainer.contains(.blackHoleCount)
        {
            self.blackHoleCount = try decoderContainer.decode(Int?.self, forKey: .blackHoleCount)
        }
        if decoderContainer.contains(.peak)
        {
            self.peak = try decoderContainer.decode(Double?.self, forKey: .peak)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
    }
}
public extension DescribeAttackStatisticsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackStatisticsResultCodingKeys.self)
        try encoderContainer.encode(attackCount, forKey: .attackCount)
        try encoderContainer.encode(blackHoleCount, forKey: .blackHoleCount)
        try encoderContainer.encode(peak, forKey: .peak)
        try encoderContainer.encode(unit, forKey: .unit)
    }
}
/// 查询攻击来源 
public class DescribeAttackSourceResult:NSObject,JdCloudResult
{
    /// 攻击来源 IP 列表
    var data:[String?]?



    public override init(){
        super.init()
    }

    enum DescribeAttackSourceResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackSourceResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([String?]?.self, forKey: .data)
        }
    }
}
public extension DescribeAttackSourceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackSourceResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  查询公网 IP 的监控流量
public class DescribeIpMonitorFlowRequest:JdCloudRequest
{
    /// 开始时间, 只能查询最近 90 天以内的数据, UTC 时间, 格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String

    /// 查询的结束时间, UTC 时间, 格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String

    /// DDoS 防护包已防护的公网 IP
      /// - 使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-protection-package/api/describeprotectediplist&quot;&gt;describeProtectedIpList&lt;/a&gt; 接口查询 DDoS 防护包已防护的公网 IP
      /// 
    var ip:[String?]?


    public init(regionId: String,startTime:String,endTime:String){
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum DescribeIpMonitorFlowRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case ip
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIpMonitorFlowRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(ip, forKey: .ip)

    }
}

/// 查询攻击记录, 参数 ip 优先级大于 instanceId
      ///       ///   - 指定 ip 参数时, 忽略 instanceId 参数, 查询 ip 相关攻击记录
      ///       ///   - 未指定 ip 时, 查询 instanceId 指定实例相关攻击记录
      ///       ///   - ip 和 instanceId 均未指定时, 查询用户所有公网 IP 攻击记录
      ///       ///  
public class DescribeAttackLogsResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[AttackLog?]?

    /// 当前页数量
    var currentCount:Int?

    /// 实例总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeAttackLogsResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackLogsResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([AttackLog?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeAttackLogsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackLogsResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}

///  查询攻击记录, 参数 ip 优先级大于 instanceId
      ///       ///   - 指定 ip 参数时, 忽略 instanceId 参数, 查询 ip 相关攻击记录
      ///       ///   - 未指定 ip 时, 查询 instanceId 指定实例相关攻击记录
      ///       ///   - ip 和 instanceId 均未指定时, 查询用户所有公网 IP 攻击记录
      ///       /// 
public class DescribeAttackLogsRequest:JdCloudRequest
{
    /// 页码
    var pageNumber:Int?

    /// 分页大小
    var pageSize:Int?

    /// 开始时间, 只能查询最近 90 天以内的数据, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String

    /// 查询的结束时间, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String

    /// 防护包实例 Id
    var instanceId:String?

    /// DDoS 防护包已防护的公网 IP
      /// - 使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-protection-package/api/describeprotectediplist&quot;&gt;describeProtectedIpList&lt;/a&gt; 接口查询 DDoS 防护包已防护的公网 IP
      /// 
    var ip:[String?]?


    public init(regionId: String,startTime:String,endTime:String){
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum DescribeAttackLogsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case instanceId
        case ip
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackLogsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(ip, forKey: .ip)

    }
}


///  查询攻击来源
public class DescribeAttackSourceRequest:JdCloudRequest
{
    /// DDoS 防护包已防护的公网 IP
      /// - 使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-protection-package/api/describeprotectediplist&quot;&gt;describeProtectedIpList&lt;/a&gt; 接口查询 DDoS 防护包已防护的公网 IP
      /// 
    var ip:String

    /// 攻击记录 Id
    var attackLogId:String


    public init(regionId: String,ip:String,attackLogId:String){
        self.ip = ip
        self.attackLogId = attackLogId
        super.init(regionId: regionId)
    }


    enum DescribeAttackSourceRequestRequestCodingKeys: String, CodingKey {
        case ip
        case attackLogId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackSourceRequestRequestCodingKeys.self)
        try encoderContainer.encode(ip, forKey: .ip)
        try encoderContainer.encode(attackLogId, forKey: .attackLogId)

    }
}

public class DescribeAttackStatisticsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAttackStatisticsResult?;

    enum DescribeAttackStatisticsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackStatisticsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAttackStatisticsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAttackStatisticsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackStatisticsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询各类型攻击次数, 参数 ip 优先级大于 instanceId
      ///       ///   - 指定 ip 参数时, 忽略 instanceId 参数, 查询 ip 相关攻击记录的各类型攻击次数
      ///       ///   - 未指定 ip 时, 查询 instanceId 指定实例相关攻击记录的各类型攻击次数
      ///       ///   - ip 和 instanceId 均未指定时, 查询用户所有公网 IP 攻击记录的各类型攻击次数
      ///       ///  
public class DescribeAttackTypeCountResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[AttackTypeCount?]?



    public override init(){
        super.init()
    }

    enum DescribeAttackTypeCountResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackTypeCountResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([AttackTypeCount?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeAttackTypeCountResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackTypeCountResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class DescribeAttackTypeCountResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAttackTypeCountResult?;

    enum DescribeAttackTypeCountResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackTypeCountResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAttackTypeCountResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAttackTypeCountResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackTypeCountResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeAttackLogsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAttackLogsResult?;

    enum DescribeAttackLogsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackLogsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAttackLogsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAttackLogsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackLogsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeProtectedIpListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeProtectedIpListResult?;

    enum DescribeProtectedIpListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProtectedIpListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeProtectedIpListResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeProtectedIpListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProtectedIpListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  防护包防护信息概要
public class DescribeProtectionOutlineRequest:JdCloudRequest
{
}


///  修改防护包实例或 IP 的防护规则
public class ModifyProtectionRuleRequest:JdCloudRequest
{
    /// 修改防护规则请求参数
    var protectionRuleSpec:ProtectionRuleSpec

    /// 防护包实例 Id
    var instanceId:String


    public init(regionId: String,protectionRuleSpec:ProtectionRuleSpec,instanceId:String){
        self.protectionRuleSpec = protectionRuleSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyProtectionRuleRequestRequestCodingKeys: String, CodingKey {
        case protectionRuleSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyProtectionRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(protectionRuleSpec, forKey: .protectionRuleSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class ModifyInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstanceResult?;

    enum ModifyInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取防护包实例或 IP 的防护规则 
public class DescribeProtectionRuleResult:NSObject,JdCloudResult
{
    /// Data
    var data:ProtectionRule?



    public override init(){
        super.init()
    }

    enum DescribeProtectionRuleResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProtectionRuleResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(ProtectionRule?.self, forKey: .data)
        }
    }
}
public extension DescribeProtectionRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProtectionRuleResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class DescribeInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceResult?;

    enum DescribeInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstancesResult?;

    enum DescribeInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取防护包实例或 IP 的防护规则
public class DescribeProtectionRuleRequest:JdCloudRequest
{
    /// 被防护 IP, 缺省时获取防护包实例的防护规则
    var ip:String?

    /// 防护包实例 Id
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeProtectionRuleRequestRequestCodingKeys: String, CodingKey {
        case ip
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProtectionRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(ip, forKey: .ip)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询防护包实例列表
public class DescribeInstancesRequest:JdCloudRequest
{
    /// 页码
    var pageNumber:Int?

    /// 分页大小
    var pageSize:Int?

    /// 防护包名称, 支持模糊匹配
    var name:String?




    enum DescribeInstancesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(name, forKey: .name)

    }
}


///  升级防护包实例
public class ModifyInstanceRequest:JdCloudRequest
{
    /// 升级防护包实例请求参数
    var modifyInstanceSpec:ModifyInstanceSpec

    /// 防护包实例 Id
    var instanceId:String


    public init(regionId: String,modifyInstanceSpec:ModifyInstanceSpec,instanceId:String){
        self.modifyInstanceSpec = modifyInstanceSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstanceRequestRequestCodingKeys: String, CodingKey {
        case modifyInstanceSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(modifyInstanceSpec, forKey: .modifyInstanceSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  添加防护包防护 IP.
      ///       /// - 防护包仅能防护防护包实例所在区域的公网 IP, 且该公网 IP 未被其他防护包防护, 如果已经被其他防护包防护, 请先调用删除防护包防护 IP 接口删除防护 IP
      ///       /// - 防护包可添加的防护 IP 个数小于等于防护包的可防护 IP 数量减去已防护的 IP 数量
      ///       /// - 使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-protection-package/api/describeelasticipresources&quot;&gt;describeElasticIpResources&lt;/a&gt; 接口查询防护包可防护的弹性公网 IP
      ///       /// - 使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-protection-package/api/describecpsipresources&quot;&gt;describeCpsIpResources&lt;/a&gt; 接口查询防护包可防护的云物理服务器公网 IP
      ///       /// 
public class AddProtectedIpRequest:JdCloudRequest
{
    /// 添加防护包防护 IP 请求参数
    var protectedIpSpec:ProtectedIpSpec

    /// 防护包实例 Id
    var instanceId:String


    public init(regionId: String,protectedIpSpec:ProtectedIpSpec,instanceId:String){
        self.protectedIpSpec = protectedIpSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum AddProtectedIpRequestRequestCodingKeys: String, CodingKey {
        case protectedIpSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddProtectedIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(protectedIpSpec, forKey: .protectedIpSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 添加防护包防护 IP.
      ///       /// - 防护包仅能防护防护包实例所在区域的公网 IP, 且该公网 IP 未被其他防护包防护, 如果已经被其他防护包防护, 请先调用删除防护包防护 IP 接口删除防护 IP
      ///       /// - 防护包可添加的防护 IP 个数小于等于防护包的可防护 IP 数量减去已防护的 IP 数量
      ///       /// - 使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-protection-package/api/describeelasticipresources&quot;&gt;describeElasticIpResources&lt;/a&gt; 接口查询防护包可防护的弹性公网 IP
      ///       /// - 使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-protection-package/api/describecpsipresources&quot;&gt;describeCpsIpResources&lt;/a&gt; 接口查询防护包可防护的云物理服务器公网 IP
      ///       ///  
public class AddProtectedIpResult:NSObject,JdCloudResult
{
    /// 添加防护 IP 结果, 0: 添加失败, 1: 添加成功
    var code:Int?

    /// 添加失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum AddProtectedIpResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddProtectedIpResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension AddProtectedIpResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddProtectedIpResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 修改防护包实例名称 
public class ModifyInstanceNameResult:NSObject,JdCloudResult
{
    /// 修改结果, 0: 修改失败, 1: 修改成功
    var code:Int?

    /// 修改失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyInstanceNameResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceNameResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyInstanceNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceNameResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 防护包防护信息概要 
public class DescribeProtectionOutlineResult:NSObject,JdCloudResult
{
    /// Data
    var data:ProtectionOutline?



    public override init(){
        super.init()
    }

    enum DescribeProtectionOutlineResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProtectionOutlineResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(ProtectionOutline?.self, forKey: .data)
        }
    }
}
public extension DescribeProtectionOutlineResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProtectionOutlineResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  创建防护包实例, 当前支持区域: 华北-北京, 华东-宿迁, 华东-上海
public class CreateInstanceRequest:JdCloudRequest
{
    /// 创建防护包实例请求参数
    var createInstanceSpec:CreateInstanceSpec


    public init(regionId: String,createInstanceSpec:CreateInstanceSpec){
        self.createInstanceSpec = createInstanceSpec
        super.init(regionId: regionId)
    }


    enum CreateInstanceRequestRequestCodingKeys: String, CodingKey {
        case createInstanceSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(createInstanceSpec, forKey: .createInstanceSpec)

    }
}

public class AddProtectedIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddProtectedIpResult?;

    enum AddProtectedIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddProtectedIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddProtectedIpResult?.self, forKey: .result) ?? nil
    }
}

public extension AddProtectedIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddProtectedIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询已防护 IP 列表
public class DescribeProtectedIpListRequest:JdCloudRequest
{
    /// 页码
    var pageNumber:Int?

    /// 分页大小
    var pageSize:Int?

    /// 实例 Id, 缺省时查询用户所有已防护 IP
    var instanceId:Int?

    /// 被防护 IP类型: 0: 全部, 1: 弹性公网 IP, 2: 云物理服务器公网 IP, 4: 托管区公网 IP
    var type:Int

    /// 被防护 IP, 支持模糊查询
    var ip:String?


    public init(regionId: String,type:Int){
        self.type = type
        super.init(regionId: regionId)
    }


    enum DescribeProtectedIpListRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case instanceId
        case type
        case ip
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProtectedIpListRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(type, forKey: .type)
        try encoderContainer.encode(ip, forKey: .ip)

    }
}

/// 查询防护规则 Geo 拦截可设置区域 
public class DescribeGeoAreasResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[Country?]?



    public override init(){
        super.init()
    }

    enum DescribeGeoAreasResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeGeoAreasResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([Country?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeGeoAreasResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeGeoAreasResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class CheckInstanceNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CheckInstanceNameResult?;

    enum CheckInstanceNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckInstanceNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CheckInstanceNameResult?.self, forKey: .result) ?? nil
    }
}

public extension CheckInstanceNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckInstanceNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除防护包防护 IP
public class DeleteProtectedIpRequest:JdCloudRequest
{
    /// 删除防护包防护 IP 请求参数
    var protectedIpSpec:ProtectedIpSpec

    /// 防护包实例 Id
    var instanceId:String


    public init(regionId: String,protectedIpSpec:ProtectedIpSpec,instanceId:String){
        self.protectedIpSpec = protectedIpSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DeleteProtectedIpRequestRequestCodingKeys: String, CodingKey {
        case protectedIpSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteProtectedIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(protectedIpSpec, forKey: .protectedIpSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 删除防护包防护 IP 
public class DeleteProtectedIpResult:NSObject,JdCloudResult
{
    /// 删除防护 IP 结果, 0: 删除失败, 1: 删除成功
    var code:Int?

    /// 删除失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DeleteProtectedIpResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteProtectedIpResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DeleteProtectedIpResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteProtectedIpResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 检测实例名称是否可用, 防护包实例名称不可重复 
public class CheckInstanceNameResult:NSObject,JdCloudResult
{
    /// 检测结果 code, 0: 不可用, 1: 可用
    var code:Int?

    /// 检测结果, 不可用时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum CheckInstanceNameResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckInstanceNameResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension CheckInstanceNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckInstanceNameResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  修改防护包实例名称
public class ModifyInstanceNameRequest:JdCloudRequest
{
    /// 修改防护包实例名称请求参数
    var modifyInstanceNameSpec:ModifyInstanceNameSpec

    /// 防护包实例 Id
    var instanceId:String


    public init(regionId: String,modifyInstanceNameSpec:ModifyInstanceNameSpec,instanceId:String){
        self.modifyInstanceNameSpec = modifyInstanceNameSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstanceNameRequestRequestCodingKeys: String, CodingKey {
        case modifyInstanceNameSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(modifyInstanceNameSpec, forKey: .modifyInstanceNameSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeProtectionOutlineResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeProtectionOutlineResult?;

    enum DescribeProtectionOutlineResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProtectionOutlineResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeProtectionOutlineResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeProtectionOutlineResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProtectionOutlineResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyProtectionRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyProtectionRuleResult?;

    enum ModifyProtectionRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyProtectionRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyProtectionRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyProtectionRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyProtectionRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询防护包实例
public class DescribeInstanceRequest:JdCloudRequest
{
    /// 防护包实例 Id
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 升级防护包实例 
public class ModifyInstanceResult:NSObject,JdCloudResult
{
    /// 升级的防护包实例 Id
    var instanceId:String?



    public override init(){
        super.init()
    }

    enum ModifyInstanceResultCodingKeys: String, CodingKey {
        case instanceId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceResultCodingKeys.self)
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
    }
}
public extension ModifyInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceResultCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
    }
}
public class ModifyInstanceNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstanceNameResult?;

    enum ModifyInstanceNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstanceNameResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstanceNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改防护包实例或 IP 的防护规则 
public class ModifyProtectionRuleResult:NSObject,JdCloudResult
{
    /// 修改防护规则结果, 0: 修改失败, 1: 修改成功
    var code:Int?

    /// 修改失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyProtectionRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyProtectionRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyProtectionRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyProtectionRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 创建防护包实例, 当前支持区域: 华北-北京, 华东-宿迁, 华东-上海 
public class CreateInstanceResult:NSObject,JdCloudResult
{
    /// 创建的防护包实例 Id
    var instanceId:String?



    public override init(){
        super.init()
    }

    enum CreateInstanceResultCodingKeys: String, CodingKey {
        case instanceId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceResultCodingKeys.self)
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
    }
}
public extension CreateInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceResultCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
    }
}

///  查询防护规则 Geo 拦截可设置区域
public class DescribeGeoAreasRequest:JdCloudRequest
{
}

public class DeleteProtectedIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteProtectedIpResult?;

    enum DeleteProtectedIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteProtectedIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteProtectedIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteProtectedIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteProtectedIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询防护包实例列表 
public class DescribeInstancesResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[Instance?]?

    /// 当前页数量
    var currentCount:Int?

    /// 实例总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeInstancesResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([Instance?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
/// 查询防护包实例 
public class DescribeInstanceResult:NSObject,JdCloudResult
{
    /// Data
    var data:Instance?



    public override init(){
        super.init()
    }

    enum DescribeInstanceResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Instance?.self, forKey: .data)
        }
    }
}
public extension DescribeInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class DescribeGeoAreasResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeGeoAreasResult?;

    enum DescribeGeoAreasResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeGeoAreasResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeGeoAreasResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeGeoAreasResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeGeoAreasResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeProtectionRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeProtectionRuleResult?;

    enum DescribeProtectionRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProtectionRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeProtectionRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeProtectionRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProtectionRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateInstanceResult?;

    enum CreateInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  检测实例名称是否可用, 防护包实例名称不可重复
public class CheckInstanceNameRequest:JdCloudRequest
{
    /// 待检测实例名称, 长度限制为 1-80 个字符, 只允许包含中文, 字母, 数字, -, ., /, _
    var instanceName:String


    public init(regionId: String,instanceName:String){
        self.instanceName = instanceName
        super.init(regionId: regionId)
    }


    enum CheckInstanceNameRequestRequestCodingKeys: String, CodingKey {
        case instanceName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckInstanceNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceName, forKey: .instanceName)

    }
}

/// 查询已防护 IP 列表 
public class DescribeProtectedIpListResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[ProtectedIp?]?

    /// 当前页数量
    var currentCount:Int?

    /// 实例总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeProtectedIpListResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProtectedIpListResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([ProtectedIp?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeProtectedIpListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProtectedIpListResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
public class DescribeOperationRecordsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeOperationRecordsResult?;

    enum DescribeOperationRecordsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeOperationRecordsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeOperationRecordsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeOperationRecordsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeOperationRecordsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询操作日志
public class DescribeOperationRecordsRequest:JdCloudRequest
{
    /// 页码
    var pageNumber:Int?

    /// 分页大小
    var pageSize:Int?

    /// 开始时间, UTC 时间, 格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String

    /// 结束时间, UTC 时间, 格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String

    /// 操作类型, 默认查全部.
      /// - 0: 全部
      /// - 1: 套餐变更
      /// - 2: 防护规则变更
      /// - 3: 防护对象变更
      /// - 4: IP 地址变更
      /// - 5: 防护包名称变更
      /// 
    var action:Int?

    /// 防护包名称, 支持模糊匹配
    var name:String?


    public init(regionId: String,startTime:String,endTime:String){
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum DescribeOperationRecordsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case action
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeOperationRecordsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(action, forKey: .action)
        try encoderContainer.encode(name, forKey: .name)

    }
}

/// 查询操作日志 
public class DescribeOperationRecordsResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[OperationRecord?]?

    /// 当前页数量
    var currentCount:Int?

    /// 实例总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeOperationRecordsResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeOperationRecordsResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([OperationRecord?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeOperationRecordsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeOperationRecordsResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
