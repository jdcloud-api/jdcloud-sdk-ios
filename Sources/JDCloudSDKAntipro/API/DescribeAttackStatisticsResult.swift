/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Attack Log APIs
   Anti DDoS Protection Package Attack Log APIs

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 攻击记录统计, 参数 ip 优先级大于 instanceId
      ///       ///   - 指定 ip 参数时, 忽略 instanceId 参数, 统计 ip 的攻击情况
      ///       ///   - 未指定 ip 时, 统计 instanceId 指定实例相关攻击情况
      ///       ///   - ip 和 instanceId 均未指定时, 查询用户所有公网 IP 攻击情况
      ///       /// 
@objc(DescribeAttackStatisticsResult)
public class DescribeAttackStatisticsResult:NSObject,JdCloudResult
{
    /// 攻击次数
    var attackCount:Int?

    /// 黑洞次数
    var blackHoleCount:Int?

    /// 攻击流量峰值
    var peak:Double?

    /// 攻击流量单位
    var unit:String?



    public override init(){
        super.init()
    }

    enum DescribeAttackStatisticsResultCodingKeys: String, CodingKey {
        case attackCount
        case blackHoleCount
        case peak
        case unit
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackStatisticsResultCodingKeys.self)
        if decoderContainer.contains(.attackCount)
        {
            self.attackCount = try decoderContainer.decode(Int?.self, forKey: .attackCount)
        }
        if decoderContainer.contains(.blackHoleCount)
        {
            self.blackHoleCount = try decoderContainer.decode(Int?.self, forKey: .blackHoleCount)
        }
        if decoderContainer.contains(.peak)
        {
            self.peak = try decoderContainer.decode(Double?.self, forKey: .peak)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
    }
}
public extension DescribeAttackStatisticsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackStatisticsResultCodingKeys.self)
        try encoderContainer.encode(attackCount, forKey: .attackCount)
        try encoderContainer.encode(blackHoleCount, forKey: .blackHoleCount)
        try encoderContainer.encode(peak, forKey: .peak)
        try encoderContainer.encode(unit, forKey: .unit)
    }
}
