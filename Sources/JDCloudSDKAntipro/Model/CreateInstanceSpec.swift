/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createInstanceSpec
@objc(CreateInstanceSpec)
public class CreateInstanceSpec:NSObject,Codable{
    /// 防护包实例名称, 新购防护包时必传
      /// 长度限制为 1-80 个字符, 只允许包含中文, 字母, 数字, -, ., /, _
      /// 
    /// Required:true
    var name:String
    /// 可防护 IP 数量, 1, 5, 10, 50, 100, 1000(不限)
    /// Required:true
    var ipNum:Int
    /// 保底带宽: 10, 20, 30, 50, 单位: Gbps
    /// Required:true
    var bpGbps:Int
    /// 弹性带宽: 0, 10, 20, 单位: Gbps
    /// Required:true
    var epGbps:Int
    /// 购买防护包时长, 新购防护包时必传
      /// - timeUnit 为 3 时, 可取值 1-9
      /// - timeUnit 为 4 时, 可取值 1-3
      /// 
    /// Required:true
    var timeSpan:Int
    /// 购买时长类型, 新购防护包时必传
      /// - 3: 月
      /// - 4: 年
    /// Required:true
    var timeUnit:Int



    public  init(name:String,ipNum:Int,bpGbps:Int,epGbps:Int,timeSpan:Int,timeUnit:Int){
             self.name = name
             self.ipNum = ipNum
             self.bpGbps = bpGbps
             self.epGbps = epGbps
             self.timeSpan = timeSpan
             self.timeUnit = timeUnit
    }

    enum CreateInstanceSpecCodingKeys: String, CodingKey {
        case name
        case ipNum
        case bpGbps
        case epGbps
        case timeSpan
        case timeUnit
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceSpecCodingKeys.self)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        self.ipNum = try decoderContainer.decode(Int.self, forKey: .ipNum)
        self.bpGbps = try decoderContainer.decode(Int.self, forKey: .bpGbps)
        self.epGbps = try decoderContainer.decode(Int.self, forKey: .epGbps)
        self.timeSpan = try decoderContainer.decode(Int.self, forKey: .timeSpan)
        self.timeUnit = try decoderContainer.decode(Int.self, forKey: .timeUnit)
    }
}
public extension CreateInstanceSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceSpecCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(ipNum, forKey: .ipNum)
         try encoderContainer.encode(bpGbps, forKey: .bpGbps)
         try encoderContainer.encode(epGbps, forKey: .epGbps)
         try encoderContainer.encode(timeSpan, forKey: .timeSpan)
         try encoderContainer.encode(timeUnit, forKey: .timeUnit)
    }
}
