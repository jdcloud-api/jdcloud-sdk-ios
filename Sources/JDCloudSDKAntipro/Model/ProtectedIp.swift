/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  protectedIp
@objc(ProtectedIp)
public class ProtectedIp:NSObject,Codable{
    /// 被防护 IP
    var ip:String?
    /// 安全状态, 0: 安全, 1: 清洗, 2: 黑洞
    var safeStatus:Int?
    /// 公网 IP 类型或绑定资源类型:
      ///   0: 未知类型,
      ///   1: 弹性公网 IP(IP 为弹性公网 IP, 绑定资源类型未知),
      ///   10: 弹性公网 IP(IP 为弹性公网 IP, 但未绑定资源),
      ///   11: 云主机,
      ///   12: 负载均衡,
      ///   13: 原生容器实例,
      ///   14: 原生容器 Pod,
      ///   2: 云物理服务器,
      /// 
    var resourceType:Int?
    /// 防护规则类型, 0: 默认(防护包的防护规则), 1: IP 自定义规则
    var protectionRuleType:Int?



    public override init(){
            super.init()
    }

    enum ProtectedIpCodingKeys: String, CodingKey {
        case ip
        case safeStatus
        case resourceType
        case protectionRuleType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ProtectedIpCodingKeys.self)
        if decoderContainer.contains(.ip)
        {
            self.ip = try decoderContainer.decode(String?.self, forKey: .ip)
        }
        if decoderContainer.contains(.safeStatus)
        {
            self.safeStatus = try decoderContainer.decode(Int?.self, forKey: .safeStatus)
        }
        if decoderContainer.contains(.resourceType)
        {
            self.resourceType = try decoderContainer.decode(Int?.self, forKey: .resourceType)
        }
        if decoderContainer.contains(.protectionRuleType)
        {
            self.protectionRuleType = try decoderContainer.decode(Int?.self, forKey: .protectionRuleType)
        }
    }
}
public extension ProtectedIp{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ProtectedIpCodingKeys.self)
         try encoderContainer.encode(ip, forKey: .ip)
         try encoderContainer.encode(safeStatus, forKey: .safeStatus)
         try encoderContainer.encode(resourceType, forKey: .resourceType)
         try encoderContainer.encode(protectionRuleType, forKey: .protectionRuleType)
    }
}
