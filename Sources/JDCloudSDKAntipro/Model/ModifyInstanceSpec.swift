/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  modifyInstanceSpec
@objc(ModifyInstanceSpec)
public class ModifyInstanceSpec:NSObject,Codable{
    /// 可防护 IP 数量, 1, 5, 10, 50, 100, 1000(不限), 可升级, 不可降级
    /// Required:true
    var ipNum:Int
    /// 保底带宽: 10, 20, 30, 50, 单位: Gbps, 可升级, 不可降级
    /// Required:true
    var bpGbps:Int
    /// 弹性带宽: 0, 10, 20, 单位: Gbps, 可升级, 可降级
    /// Required:true
    var epGbps:Int



    public  init(ipNum:Int,bpGbps:Int,epGbps:Int){
             self.ipNum = ipNum
             self.bpGbps = bpGbps
             self.epGbps = epGbps
    }

    enum ModifyInstanceSpecCodingKeys: String, CodingKey {
        case ipNum
        case bpGbps
        case epGbps
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceSpecCodingKeys.self)
        self.ipNum = try decoderContainer.decode(Int.self, forKey: .ipNum)
        self.bpGbps = try decoderContainer.decode(Int.self, forKey: .bpGbps)
        self.epGbps = try decoderContainer.decode(Int.self, forKey: .epGbps)
    }
}
public extension ModifyInstanceSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceSpecCodingKeys.self)
         try encoderContainer.encode(ipNum, forKey: .ipNum)
         try encoderContainer.encode(bpGbps, forKey: .bpGbps)
         try encoderContainer.encode(epGbps, forKey: .epGbps)
    }
}
