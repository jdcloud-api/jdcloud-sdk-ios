/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  protectionOutline
@objc(ProtectionOutline)
public class ProtectionOutline:NSObject,Codable{
    /// 已防护天数
    var protectedDay:Int64?
    /// 已防护 IP 数量
    var protectedIpCount:Int64?
    /// 7 日攻击次数
    var weekAttackCount:Int64?
    /// 7 日攻击流量峰值
    var weekAttackPeak:Double?
    /// 7 日攻击流量单位
    var weekAttackUnit:String?
    /// 30 日攻击次数
    var monthAttackCount:Int64?
    /// 30 日攻击流量峰值
    var monthAttackPeak:Double?
    /// 30 日攻击流量单位
    var monthAttackUnit:String?
    /// 当前攻击数量
    var currentAttackCount:Int64?



    public override init(){
            super.init()
    }

    enum ProtectionOutlineCodingKeys: String, CodingKey {
        case protectedDay
        case protectedIpCount
        case weekAttackCount
        case weekAttackPeak
        case weekAttackUnit
        case monthAttackCount
        case monthAttackPeak
        case monthAttackUnit
        case currentAttackCount
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ProtectionOutlineCodingKeys.self)
        if decoderContainer.contains(.protectedDay)
        {
            self.protectedDay = try decoderContainer.decode(Int64?.self, forKey: .protectedDay)
        }
        if decoderContainer.contains(.protectedIpCount)
        {
            self.protectedIpCount = try decoderContainer.decode(Int64?.self, forKey: .protectedIpCount)
        }
        if decoderContainer.contains(.weekAttackCount)
        {
            self.weekAttackCount = try decoderContainer.decode(Int64?.self, forKey: .weekAttackCount)
        }
        if decoderContainer.contains(.weekAttackPeak)
        {
            self.weekAttackPeak = try decoderContainer.decode(Double?.self, forKey: .weekAttackPeak)
        }
        if decoderContainer.contains(.weekAttackUnit)
        {
            self.weekAttackUnit = try decoderContainer.decode(String?.self, forKey: .weekAttackUnit)
        }
        if decoderContainer.contains(.monthAttackCount)
        {
            self.monthAttackCount = try decoderContainer.decode(Int64?.self, forKey: .monthAttackCount)
        }
        if decoderContainer.contains(.monthAttackPeak)
        {
            self.monthAttackPeak = try decoderContainer.decode(Double?.self, forKey: .monthAttackPeak)
        }
        if decoderContainer.contains(.monthAttackUnit)
        {
            self.monthAttackUnit = try decoderContainer.decode(String?.self, forKey: .monthAttackUnit)
        }
        if decoderContainer.contains(.currentAttackCount)
        {
            self.currentAttackCount = try decoderContainer.decode(Int64?.self, forKey: .currentAttackCount)
        }
    }
}
public extension ProtectionOutline{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ProtectionOutlineCodingKeys.self)
         try encoderContainer.encode(protectedDay, forKey: .protectedDay)
         try encoderContainer.encode(protectedIpCount, forKey: .protectedIpCount)
         try encoderContainer.encode(weekAttackCount, forKey: .weekAttackCount)
         try encoderContainer.encode(weekAttackPeak, forKey: .weekAttackPeak)
         try encoderContainer.encode(weekAttackUnit, forKey: .weekAttackUnit)
         try encoderContainer.encode(monthAttackCount, forKey: .monthAttackCount)
         try encoderContainer.encode(monthAttackPeak, forKey: .monthAttackPeak)
         try encoderContainer.encode(monthAttackUnit, forKey: .monthAttackUnit)
         try encoderContainer.encode(currentAttackCount, forKey: .currentAttackCount)
    }
}
