/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  orderSpec
@objc(OrderSpec)
public class OrderSpec:NSObject,Codable{
    /// 操作类型 1: 新购防护包, 3: 升级防护包
    /// Required:true
    var buyType:Int
    /// 防护包实例 Id, 升级防护包实例时必传
    var id:String?
    /// 防护包实例名称, 新购防护包时必传
      /// 长度限制为 1-80 个字符, 只允许包含中文, 字母, 数字, -, ., /, _
      /// 
    var name:String?
    /// 套餐类型, 1: 独享 IP, 2: 共享 IP
    /// Required:true
    var pkgType:Int
    /// 可防护 IP 数量, 5, 10, 50, 100 1000(不限)
    /// Required:true
    var ipNum:Int
    /// 保底带宽: 10, 20, 30, 50, 单位: Gbps
    /// Required:true
    var bp:Int
    /// 弹性带宽: 0, 10, 20, 单位: Gbps
    /// Required:true
    var ep:Int
    /// 购买防护包时长, 新购防护包时必传
      /// - timeUnit 为 3 时, 可取值 1-9
      /// - timeUnit 为 4 时, 可取值 1-3
      /// 
    var timeSpan:Int?
    /// 购买时长类型, 新购防护包时必传
      /// - 3: 月
      /// - 4: 年
      /// 
    var timeUnit:Int?
    /// 回调 url
    /// Required:true
    var returnUrl:String



    public  init(buyType:Int,pkgType:Int,ipNum:Int,bp:Int,ep:Int,returnUrl:String){
             self.buyType = buyType
             self.pkgType = pkgType
             self.ipNum = ipNum
             self.bp = bp
             self.ep = ep
             self.returnUrl = returnUrl
    }

    enum OrderSpecCodingKeys: String, CodingKey {
        case buyType
        case id
        case name
        case pkgType
        case ipNum
        case bp
        case ep
        case timeSpan
        case timeUnit
        case returnUrl
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OrderSpecCodingKeys.self)
        self.buyType = try decoderContainer.decode(Int.self, forKey: .buyType)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        self.pkgType = try decoderContainer.decode(Int.self, forKey: .pkgType)
        self.ipNum = try decoderContainer.decode(Int.self, forKey: .ipNum)
        self.bp = try decoderContainer.decode(Int.self, forKey: .bp)
        self.ep = try decoderContainer.decode(Int.self, forKey: .ep)
        if decoderContainer.contains(.timeSpan)
        {
            self.timeSpan = try decoderContainer.decode(Int?.self, forKey: .timeSpan)
        }
        if decoderContainer.contains(.timeUnit)
        {
            self.timeUnit = try decoderContainer.decode(Int?.self, forKey: .timeUnit)
        }
        self.returnUrl = try decoderContainer.decode(String.self, forKey: .returnUrl)
    }
}
public extension OrderSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OrderSpecCodingKeys.self)
         try encoderContainer.encode(buyType, forKey: .buyType)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(pkgType, forKey: .pkgType)
         try encoderContainer.encode(ipNum, forKey: .ipNum)
         try encoderContainer.encode(bp, forKey: .bp)
         try encoderContainer.encode(ep, forKey: .ep)
         try encoderContainer.encode(timeSpan, forKey: .timeSpan)
         try encoderContainer.encode(timeUnit, forKey: .timeUnit)
         try encoderContainer.encode(returnUrl, forKey: .returnUrl)
    }
}
