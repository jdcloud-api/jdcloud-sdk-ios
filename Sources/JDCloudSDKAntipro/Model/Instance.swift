/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  instance
@objc(Instance)
public class Instance:NSObject,Codable{
    /// 防护包实例 Id
    var id:String?
    /// 防护包实例名称
    var name:String?
    /// 防护包实例地域
    var region:String?
    /// 套餐类型, 1: 独享 IP, 2: 共享 IP
    var type:Int?
    /// 可防护 IP 个数
    var ipCount:Int?
    /// 保底带宽, 单位 Gbps
    var basicBandwidth:Int?
    /// 弹性带宽, 单位 Gbps
    var elasticBandwidth:Int?
    /// 实例过期时间
    var expireTime:String?
    /// 实例创建时间
    var createTime:String?
    /// 防护对象
    var protectedObjects:[ProtectedObject?]?
    /// 是否为试用防护包
    var onTrial:Bool?
    /// 资源 Id
    var resourceId:String?



    public override init(){
            super.init()
    }

    enum InstanceCodingKeys: String, CodingKey {
        case id
        case name
        case region
        case type
        case ipCount
        case basicBandwidth
        case elasticBandwidth
        case expireTime
        case createTime
        case protectedObjects
        case onTrial
        case resourceId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InstanceCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(Int?.self, forKey: .type)
        }
        if decoderContainer.contains(.ipCount)
        {
            self.ipCount = try decoderContainer.decode(Int?.self, forKey: .ipCount)
        }
        if decoderContainer.contains(.basicBandwidth)
        {
            self.basicBandwidth = try decoderContainer.decode(Int?.self, forKey: .basicBandwidth)
        }
        if decoderContainer.contains(.elasticBandwidth)
        {
            self.elasticBandwidth = try decoderContainer.decode(Int?.self, forKey: .elasticBandwidth)
        }
        if decoderContainer.contains(.expireTime)
        {
            self.expireTime = try decoderContainer.decode(String?.self, forKey: .expireTime)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.protectedObjects)
        {
            self.protectedObjects = try decoderContainer.decode([ProtectedObject?]?.self, forKey: .protectedObjects)
        }
        if decoderContainer.contains(.onTrial)
        {
            self.onTrial = try decoderContainer.decode(Bool?.self, forKey: .onTrial)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
    }
}
public extension Instance{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InstanceCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(ipCount, forKey: .ipCount)
         try encoderContainer.encode(basicBandwidth, forKey: .basicBandwidth)
         try encoderContainer.encode(elasticBandwidth, forKey: .elasticBandwidth)
         try encoderContainer.encode(expireTime, forKey: .expireTime)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(protectedObjects, forKey: .protectedObjects)
         try encoderContainer.encode(onTrial, forKey: .onTrial)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
    }
}
