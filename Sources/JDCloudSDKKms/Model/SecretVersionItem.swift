/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  secretVersionItem
@objc(SecretVersionItem)
public class SecretVersionItem:NSObject,Codable{
    /// 版本标识
    /// Required:true
    var secretVersion:String
    /// Secret当前状态: 0: 已启用、1: 已禁用
    /// Required:true
    var secretStatus:Int
    /// Secret激活时间，采用ISO8601标准，格式为: YYYY-MM-DDTHH:mm:ssZ
    /// Required:true
    var startTime:String
    /// 到期时间，采用ISO8601标准，格式为: YYYY-MM-DDTHH:mm:ssZ
    /// Required:true
    var expireTime:String
    /// 密钥的内容
    /// Required:true
    var secretData:String



    public  init(secretVersion:String,secretStatus:Int,startTime:String,expireTime:String,secretData:String){
             self.secretVersion = secretVersion
             self.secretStatus = secretStatus
             self.startTime = startTime
             self.expireTime = expireTime
             self.secretData = secretData
    }

    enum SecretVersionItemCodingKeys: String, CodingKey {
        case secretVersion
        case secretStatus
        case startTime
        case expireTime
        case secretData
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SecretVersionItemCodingKeys.self)
        self.secretVersion = try decoderContainer.decode(String.self, forKey: .secretVersion)
        self.secretStatus = try decoderContainer.decode(Int.self, forKey: .secretStatus)
        self.startTime = try decoderContainer.decode(String.self, forKey: .startTime)
        self.expireTime = try decoderContainer.decode(String.self, forKey: .expireTime)
        self.secretData = try decoderContainer.decode(String.self, forKey: .secretData)
    }
}
public extension SecretVersionItem{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SecretVersionItemCodingKeys.self)
         try encoderContainer.encode(secretVersion, forKey: .secretVersion)
         try encoderContainer.encode(secretStatus, forKey: .secretStatus)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(expireTime, forKey: .expireTime)
         try encoderContainer.encode(secretData, forKey: .secretData)
    }
}
