/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  keyDetail
@objc(KeyDetail)
public class KeyDetail:NSObject,Codable{
    /// KeyID
    /// Required:true
    var keyId:String
    /// Key名称
    /// Required:true
    var keyName:String
    /// 轮换周期
    var rotationCycle:Int?
    /// Key版本的个数
    /// Required:true
    var keyVersionCount:Int
    /// Key版本详情的列表
    /// Required:true
    var keyVersionList:[KeyVersionItem?]



    public  init(keyId:String,keyName:String,keyVersionCount:Int,keyVersionList:[KeyVersionItem?]){
             self.keyId = keyId
             self.keyName = keyName
             self.keyVersionCount = keyVersionCount
             self.keyVersionList = keyVersionList
    }

    enum KeyDetailCodingKeys: String, CodingKey {
        case keyId
        case keyName
        case rotationCycle
        case keyVersionCount
        case keyVersionList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: KeyDetailCodingKeys.self)
        self.keyId = try decoderContainer.decode(String.self, forKey: .keyId)
        self.keyName = try decoderContainer.decode(String.self, forKey: .keyName)
        if decoderContainer.contains(.rotationCycle)
        {
            self.rotationCycle = try decoderContainer.decode(Int?.self, forKey: .rotationCycle)
        }
        self.keyVersionCount = try decoderContainer.decode(Int.self, forKey: .keyVersionCount)
        self.keyVersionList = try decoderContainer.decode([KeyVersionItem?].self, forKey: .keyVersionList)
    }
}
public extension KeyDetail{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: KeyDetailCodingKeys.self)
         try encoderContainer.encode(keyId, forKey: .keyId)
         try encoderContainer.encode(keyName, forKey: .keyName)
         try encoderContainer.encode(rotationCycle, forKey: .rotationCycle)
         try encoderContainer.encode(keyVersionCount, forKey: .keyVersionCount)
         try encoderContainer.encode(keyVersionList, forKey: .keyVersionList)
    }
}
