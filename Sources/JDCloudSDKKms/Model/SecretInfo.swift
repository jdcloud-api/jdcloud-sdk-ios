/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  secretInfo
@objc(SecretInfo)
public class SecretInfo:NSObject,Codable{
    /// SecretID
    /// Required:true
    var secretId:String
    /// Secret名称
    /// Required:true
    var secretName:String
    /// Secret用途描述
    /// Required:true
    var secretDesc:String
    /// Secret当前状态: 0: 已启用、1: 已禁用
    /// Required:true
    var secretStatus:Int
    /// Secret创建时间，采用ISO8601标准，格式为: YYYY-MM-DDTHH:mm:ssZ
    /// Required:true
    var createTime:String



    public  init(secretId:String,secretName:String,secretDesc:String,secretStatus:Int,createTime:String){
             self.secretId = secretId
             self.secretName = secretName
             self.secretDesc = secretDesc
             self.secretStatus = secretStatus
             self.createTime = createTime
    }

    enum SecretInfoCodingKeys: String, CodingKey {
        case secretId
        case secretName
        case secretDesc
        case secretStatus
        case createTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SecretInfoCodingKeys.self)
        self.secretId = try decoderContainer.decode(String.self, forKey: .secretId)
        self.secretName = try decoderContainer.decode(String.self, forKey: .secretName)
        self.secretDesc = try decoderContainer.decode(String.self, forKey: .secretDesc)
        self.secretStatus = try decoderContainer.decode(Int.self, forKey: .secretStatus)
        self.createTime = try decoderContainer.decode(String.self, forKey: .createTime)
    }
}
public extension SecretInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SecretInfoCodingKeys.self)
         try encoderContainer.encode(secretId, forKey: .secretId)
         try encoderContainer.encode(secretName, forKey: .secretName)
         try encoderContainer.encode(secretDesc, forKey: .secretDesc)
         try encoderContainer.encode(secretStatus, forKey: .secretStatus)
         try encoderContainer.encode(createTime, forKey: .createTime)
    }
}
