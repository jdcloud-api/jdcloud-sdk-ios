/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   密钥管理服务
   基于硬件保护密钥的安全数据托管服务

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class KmsJDCloudClient:NSObject,JDCloudClient{
    
    private final var kmsJDCloudClient:KmsJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        kmsJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "kms.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        kmsJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "kms/" + "v1"
    
    public let serviceName: String = "kms"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func getPublicKeyAsync(request:GetPublicKeyRequest,requestComplation:@escaping ExecuteResult<GetPublicKeyResult>) throws {
        kmsJDCloudClient = self
        try GetPublicKeyExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeKeyListAsync(request:DescribeKeyListRequest,requestComplation:@escaping ExecuteResult<DescribeKeyListResult>) throws {
        kmsJDCloudClient = self
        try DescribeKeyListExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateSecretVersionAsync(request:UpdateSecretVersionRequest,requestComplation:@escaping ExecuteResult<UpdateSecretVersionResult>) throws {
        kmsJDCloudClient = self
        try UpdateSecretVersionExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func generateDataKeyAsync(request:GenerateDataKeyRequest,requestComplation:@escaping ExecuteResult<GenerateDataKeyResult>) throws {
        kmsJDCloudClient = self
        try GenerateDataKeyExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createSecretAsync(request:CreateSecretRequest,requestComplation:@escaping ExecuteResult<CreateSecretResult>) throws {
        kmsJDCloudClient = self
        try CreateSecretExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableKeyVersionAsync(request:EnableKeyVersionRequest,requestComplation:@escaping ExecuteResult<EnableKeyVersionResult>) throws {
        kmsJDCloudClient = self
        try EnableKeyVersionExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func encryptAsync(request:EncryptRequest,requestComplation:@escaping ExecuteResult<EncryptResult>) throws {
        kmsJDCloudClient = self
        try EncryptExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableKeyAsync(request:EnableKeyRequest,requestComplation:@escaping ExecuteResult<EnableKeyResult>) throws {
        kmsJDCloudClient = self
        try EnableKeyExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func cancelKeyDeletionAsync(request:CancelKeyDeletionRequest,requestComplation:@escaping ExecuteResult<CancelKeyDeletionResult>) throws {
        kmsJDCloudClient = self
        try CancelKeyDeletionExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteSecretAsync(request:DeleteSecretRequest,requestComplation:@escaping ExecuteResult<DeleteSecretResult>) throws {
        kmsJDCloudClient = self
        try DeleteSecretExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableSecretAsync(request:DisableSecretRequest,requestComplation:@escaping ExecuteResult<DisableSecretResult>) throws {
        kmsJDCloudClient = self
        try DisableSecretExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableSecretVersionAsync(request:DisableSecretVersionRequest,requestComplation:@escaping ExecuteResult<DisableSecretVersionResult>) throws {
        kmsJDCloudClient = self
        try DisableSecretVersionExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createKeyAsync(request:CreateKeyRequest,requestComplation:@escaping ExecuteResult<CreateKeyResult>) throws {
        kmsJDCloudClient = self
        try CreateKeyExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateKeyDescriptionAsync(request:UpdateKeyDescriptionRequest,requestComplation:@escaping ExecuteResult<UpdateKeyDescriptionResult>) throws {
        kmsJDCloudClient = self
        try UpdateKeyDescriptionExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func signAsync(request:SignRequest,requestComplation:@escaping ExecuteResult<SignResult>) throws {
        kmsJDCloudClient = self
        try SignExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSecretVersionListAsync(request:DescribeSecretVersionListRequest,requestComplation:@escaping ExecuteResult<DescribeSecretVersionListResult>) throws {
        kmsJDCloudClient = self
        try DescribeSecretVersionListExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func exportSecretAsync(request:ExportSecretRequest,requestComplation:@escaping ExecuteResult<ExportSecretResult>) throws {
        kmsJDCloudClient = self
        try ExportSecretExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func validateAsync(request:ValidateRequest,requestComplation:@escaping ExecuteResult<ValidateResult>) throws {
        kmsJDCloudClient = self
        try ValidateExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteSecretVersionAsync(request:DeleteSecretVersionRequest,requestComplation:@escaping ExecuteResult<DeleteSecretVersionResult>) throws {
        kmsJDCloudClient = self
        try DeleteSecretVersionExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeKeyAsync(request:DescribeKeyRequest,requestComplation:@escaping ExecuteResult<DescribeKeyResult>) throws {
        kmsJDCloudClient = self
        try DescribeKeyExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func importSecretAsync(request:ImportSecretRequest,requestComplation:@escaping ExecuteResult<ImportSecretResult>) throws {
        kmsJDCloudClient = self
        try ImportSecretExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func scheduleKeyDeletionAsync(request:ScheduleKeyDeletionRequest,requestComplation:@escaping ExecuteResult<ScheduleKeyDeletionResult>) throws {
        kmsJDCloudClient = self
        try ScheduleKeyDeletionExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func keyRotationAsync(request:KeyRotationRequest,requestComplation:@escaping ExecuteResult<KeyRotationResult>) throws {
        kmsJDCloudClient = self
        try KeyRotationExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSecretListAsync(request:DescribeSecretListRequest,requestComplation:@escaping ExecuteResult<DescribeSecretListResult>) throws {
        kmsJDCloudClient = self
        try DescribeSecretListExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSecretVersionInfoAsync(request:DescribeSecretVersionInfoRequest,requestComplation:@escaping ExecuteResult<DescribeSecretVersionInfoResult>) throws {
        kmsJDCloudClient = self
        try DescribeSecretVersionInfoExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableKeyVersionAsync(request:DisableKeyVersionRequest,requestComplation:@escaping ExecuteResult<DisableKeyVersionResult>) throws {
        kmsJDCloudClient = self
        try DisableKeyVersionExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func decryptAsync(request:DecryptRequest,requestComplation:@escaping ExecuteResult<DecryptResult>) throws {
        kmsJDCloudClient = self
        try DecryptExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableSecretAsync(request:EnableSecretRequest,requestComplation:@escaping ExecuteResult<EnableSecretResult>) throws {
        kmsJDCloudClient = self
        try EnableSecretExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableKeyAsync(request:DisableKeyRequest,requestComplation:@escaping ExecuteResult<DisableKeyResult>) throws {
        kmsJDCloudClient = self
        try DisableKeyExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableSecretVersionAsync(request:EnableSecretVersionRequest,requestComplation:@escaping ExecuteResult<EnableSecretVersionResult>) throws {
        kmsJDCloudClient = self
        try EnableSecretVersionExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func scheduleKeyVersionDeletionAsync(request:ScheduleKeyVersionDeletionRequest,requestComplation:@escaping ExecuteResult<ScheduleKeyVersionDeletionResult>) throws {
        kmsJDCloudClient = self
        try ScheduleKeyVersionDeletionExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createSecretVersionAsync(request:CreateSecretVersionRequest,requestComplation:@escaping ExecuteResult<CreateSecretVersionResult>) throws {
        kmsJDCloudClient = self
        try CreateSecretVersionExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeKeyDetailAsync(request:DescribeKeyDetailRequest,requestComplation:@escaping ExecuteResult<DescribeKeyDetailResult>) throws {
        kmsJDCloudClient = self
        try DescribeKeyDetailExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateSecretAsync(request:UpdateSecretRequest,requestComplation:@escaping ExecuteResult<UpdateSecretResult>) throws {
        kmsJDCloudClient = self
        try UpdateSecretExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func cancelKeyVersionDeletionAsync(request:CancelKeyVersionDeletionRequest,requestComplation:@escaping ExecuteResult<CancelKeyVersionDeletionResult>) throws {
        kmsJDCloudClient = self
        try CancelKeyVersionDeletionExecutor(jdCloudClient: kmsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension KmsJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "kms.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
