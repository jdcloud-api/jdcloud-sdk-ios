/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Key Management Service
   基于硬件保护密钥的安全数据托管服务

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 从KMS中获取一对数据密钥的明文/密文
@objc(GenerateDataKeyResult)
public class GenerateDataKeyResult:NSObject,JdCloudResult
{
    /// 明文DEK Base64-encoded binary data object
    var plaintext:String?

    /// 密文DEK Base64-encoded binary data object
    var ciphertextBlob:String?



    public override init(){
        super.init()
    }

    enum GenerateDataKeyResultCodingKeys: String, CodingKey {
        case plaintext
        case ciphertextBlob
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GenerateDataKeyResultCodingKeys.self)
        if decoderContainer.contains(.plaintext)
        {
            self.plaintext = try decoderContainer.decode(String?.self, forKey: .plaintext)
        }
        if decoderContainer.contains(.ciphertextBlob)
        {
            self.ciphertextBlob = try decoderContainer.decode(String?.self, forKey: .ciphertextBlob)
        }
    }
}
public extension GenerateDataKeyResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GenerateDataKeyResultCodingKeys.self)
        try encoderContainer.encode(plaintext, forKey: .plaintext)
        try encoderContainer.encode(ciphertextBlob, forKey: .ciphertextBlob)
    }
}
