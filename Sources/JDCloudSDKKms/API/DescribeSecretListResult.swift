/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Secret Management Service
   基于硬件保护机密的安全数据托管服务

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 获取机密列表
@objc(DescribeSecretListResult)
public class DescribeSecretListResult:NSObject,JdCloudResult
{
    /// Secret列表
    var secretList:[SecretInfo?]?

    /// Secret的数量
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeSecretListResultCodingKeys: String, CodingKey {
        case secretList
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretListResultCodingKeys.self)
        if decoderContainer.contains(.secretList)
        {
            self.secretList = try decoderContainer.decode([SecretInfo?]?.self, forKey: .secretList)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeSecretListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretListResultCodingKeys.self)
        try encoderContainer.encode(secretList, forKey: .secretList)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
