/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Key Management Service
   基于硬件保护密钥的安全数据托管服务

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  获取机密列表
public class DescribeSecretListRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?




    enum DescribeSecretListRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretListRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

public class EnableSecretResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableSecretResult?;

    enum EnableSecretResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableSecretResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableSecretResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableSecretResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableSecretResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取指定机密版本的详细信息
public class DescribeSecretVersionInfoRequest:JdCloudRequest
{
    /// 机密ID
    var secretId:String


    public init(regionId: String,secretId:String){
        self.secretId = secretId
        super.init(regionId: regionId)
    }


    enum DescribeSecretVersionInfoRequestRequestCodingKeys: String, CodingKey {
        case secretId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretVersionInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(secretId, forKey: .secretId)

    }
}

public class EnableSecretVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableSecretVersionResult?;

    enum EnableSecretVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableSecretVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableSecretVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableSecretVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableSecretVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  启用指定版本机密
public class EnableSecretVersionRequest:JdCloudRequest
{
    /// 机密ID
    var secretId:String


    public init(regionId: String,secretId:String){
        self.secretId = secretId
        super.init(regionId: regionId)
    }


    enum EnableSecretVersionRequestRequestCodingKeys: String, CodingKey {
        case secretId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableSecretVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(secretId, forKey: .secretId)

    }
}

/// 创建机密 
public class CreateSecretResult:NSObject,JdCloudResult
{
    /// secretId
    var secretId:String?



    public override init(){
        super.init()
    }

    enum CreateSecretResultCodingKeys: String, CodingKey {
        case secretId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSecretResultCodingKeys.self)
        if decoderContainer.contains(.secretId)
        {
            self.secretId = try decoderContainer.decode(String?.self, forKey: .secretId)
        }
    }
}
public extension CreateSecretResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecretResultCodingKeys.self)
        try encoderContainer.encode(secretId, forKey: .secretId)
    }
}
public class CreateSecretVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSecretVersionResult?;

    enum CreateSecretVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSecretVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSecretVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSecretVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecretVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改机密描述 
public class UpdateSecretResult:NSObject,JdCloudResult
{
}

///  修改机密描述
public class UpdateSecretRequest:JdCloudRequest
{
    /// SecretDescCfg
    var secretDescCfg:SecretDescCfg

    /// 机密ID
    var secretId:String


    public init(regionId: String,secretDescCfg:SecretDescCfg,secretId:String){
        self.secretDescCfg = secretDescCfg
        self.secretId = secretId
        super.init(regionId: regionId)
    }


    enum UpdateSecretRequestRequestCodingKeys: String, CodingKey {
        case secretDescCfg
        case secretId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateSecretRequestRequestCodingKeys.self)
        try encoderContainer.encode(secretDescCfg, forKey: .secretDescCfg)
        try encoderContainer.encode(secretId, forKey: .secretId)

    }
}

/// 获取机密详情 
public class DescribeSecretVersionListResult:NSObject,JdCloudResult
{
    /// SecretDetail
    var secretDetail:SecretDetail?



    public override init(){
        super.init()
    }

    enum DescribeSecretVersionListResultCodingKeys: String, CodingKey {
        case secretDetail
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretVersionListResultCodingKeys.self)
        if decoderContainer.contains(.secretDetail)
        {
            self.secretDetail = try decoderContainer.decode(SecretDetail?.self, forKey: .secretDetail)
        }
    }
}
public extension DescribeSecretVersionListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretVersionListResultCodingKeys.self)
        try encoderContainer.encode(secretDetail, forKey: .secretDetail)
    }
}
public class DescribeSecretVersionInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSecretVersionInfoResult?;

    enum DescribeSecretVersionInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretVersionInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSecretVersionInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSecretVersionInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretVersionInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  禁用指定版本机密
public class DisableSecretVersionRequest:JdCloudRequest
{
    /// 机密ID
    var secretId:String


    public init(regionId: String,secretId:String){
        self.secretId = secretId
        super.init(regionId: regionId)
    }


    enum DisableSecretVersionRequestRequestCodingKeys: String, CodingKey {
        case secretId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableSecretVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(secretId, forKey: .secretId)

    }
}

public class DescribeSecretVersionListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSecretVersionListResult?;

    enum DescribeSecretVersionListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretVersionListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSecretVersionListResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSecretVersionListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretVersionListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建机密新的版本，默认为已启用状态
public class CreateSecretVersionRequest:JdCloudRequest
{
    /// SecretVersionCfg
    var secretVersionCfg:SecretVersionCfg

    /// 机密ID
    var secretId:String


    public init(regionId: String,secretVersionCfg:SecretVersionCfg,secretId:String){
        self.secretVersionCfg = secretVersionCfg
        self.secretId = secretId
        super.init(regionId: regionId)
    }


    enum CreateSecretVersionRequestRequestCodingKeys: String, CodingKey {
        case secretVersionCfg
        case secretId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecretVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(secretVersionCfg, forKey: .secretVersionCfg)
        try encoderContainer.encode(secretId, forKey: .secretId)

    }
}

public class DeleteSecretVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSecretVersionResult?;

    enum DeleteSecretVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSecretVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSecretVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSecretVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecretVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建机密新的版本，默认为已启用状态 
public class CreateSecretVersionResult:NSObject,JdCloudResult
{
}

///  启用机密
public class EnableSecretRequest:JdCloudRequest
{
    /// 机密ID
    var secretId:String


    public init(regionId: String,secretId:String){
        self.secretId = secretId
        super.init(regionId: regionId)
    }


    enum EnableSecretRequestRequestCodingKeys: String, CodingKey {
        case secretId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableSecretRequestRequestCodingKeys.self)
        try encoderContainer.encode(secretId, forKey: .secretId)

    }
}


///  禁用机密
public class DisableSecretRequest:JdCloudRequest
{
    /// 机密ID
    var secretId:String


    public init(regionId: String,secretId:String){
        self.secretId = secretId
        super.init(regionId: regionId)
    }


    enum DisableSecretRequestRequestCodingKeys: String, CodingKey {
        case secretId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableSecretRequestRequestCodingKeys.self)
        try encoderContainer.encode(secretId, forKey: .secretId)

    }
}

public class DeleteSecretResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSecretResult?;

    enum DeleteSecretResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSecretResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSecretResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSecretResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecretResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取机密列表 
public class DescribeSecretListResult:NSObject,JdCloudResult
{
    /// Secret列表
    var secretList:[SecretInfo?]?

    /// Secret的数量
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeSecretListResultCodingKeys: String, CodingKey {
        case secretList
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretListResultCodingKeys.self)
        if decoderContainer.contains(.secretList)
        {
            self.secretList = try decoderContainer.decode([SecretInfo?]?.self, forKey: .secretList)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeSecretListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretListResultCodingKeys.self)
        try encoderContainer.encode(secretList, forKey: .secretList)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class CreateSecretResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSecretResult?;

    enum CreateSecretResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSecretResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSecretResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSecretResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecretResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 启用机密 
public class EnableSecretResult:NSObject,JdCloudResult
{
}

///  获取机密详情
public class DescribeSecretVersionListRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// 机密ID
    var secretId:String


    public init(regionId: String,secretId:String){
        self.secretId = secretId
        super.init(regionId: regionId)
    }


    enum DescribeSecretVersionListRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case secretId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretVersionListRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(secretId, forKey: .secretId)

    }
}

public class UpdateSecretResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateSecretResult?;

    enum UpdateSecretResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateSecretResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateSecretResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateSecretResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateSecretResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改机密指定版本配置
public class UpdateSecretVersionRequest:JdCloudRequest
{
    /// SecretTimeCfg
    var secretTimeCfg:SecretTimeCfg

    /// 机密ID
    var secretId:String


    public init(regionId: String,secretTimeCfg:SecretTimeCfg,secretId:String){
        self.secretTimeCfg = secretTimeCfg
        self.secretId = secretId
        super.init(regionId: regionId)
    }


    enum UpdateSecretVersionRequestRequestCodingKeys: String, CodingKey {
        case secretTimeCfg
        case secretId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateSecretVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(secretTimeCfg, forKey: .secretTimeCfg)
        try encoderContainer.encode(secretId, forKey: .secretId)

    }
}

/// 删除机密 
public class DeleteSecretResult:NSObject,JdCloudResult
{
}
/// 修改机密指定版本配置 
public class UpdateSecretVersionResult:NSObject,JdCloudResult
{
}
/// 禁用指定版本机密 
public class DisableSecretVersionResult:NSObject,JdCloudResult
{
}
/// 删除指定版本机密 
public class DeleteSecretVersionResult:NSObject,JdCloudResult
{
}
/// 导入机密 
public class ImportSecretResult:NSObject,JdCloudResult
{
}

///  创建机密
public class CreateSecretRequest:JdCloudRequest
{
    /// SecretCfg
    var secretCfg:SecretCfg


    public init(regionId: String,secretCfg:SecretCfg){
        self.secretCfg = secretCfg
        super.init(regionId: regionId)
    }


    enum CreateSecretRequestRequestCodingKeys: String, CodingKey {
        case secretCfg
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecretRequestRequestCodingKeys.self)
        try encoderContainer.encode(secretCfg, forKey: .secretCfg)

    }
}


///  删除机密
public class DeleteSecretRequest:JdCloudRequest
{
    /// 机密ID
    var secretId:String


    public init(regionId: String,secretId:String){
        self.secretId = secretId
        super.init(regionId: regionId)
    }


    enum DeleteSecretRequestRequestCodingKeys: String, CodingKey {
        case secretId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecretRequestRequestCodingKeys.self)
        try encoderContainer.encode(secretId, forKey: .secretId)

    }
}

public class DisableSecretResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableSecretResult?;

    enum DisableSecretResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableSecretResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableSecretResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableSecretResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableSecretResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  导出机密
public class ExportSecretRequest:JdCloudRequest
{
    /// 机密ID
    var secretId:String


    public init(regionId: String,secretId:String){
        self.secretId = secretId
        super.init(regionId: regionId)
    }


    enum ExportSecretRequestRequestCodingKeys: String, CodingKey {
        case secretId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExportSecretRequestRequestCodingKeys.self)
        try encoderContainer.encode(secretId, forKey: .secretId)

    }
}

/// 导出机密 
public class ExportSecretResult:NSObject,JdCloudResult
{
    /// 机密包
    var secretPackage:String?



    public override init(){
        super.init()
    }

    enum ExportSecretResultCodingKeys: String, CodingKey {
        case secretPackage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExportSecretResultCodingKeys.self)
        if decoderContainer.contains(.secretPackage)
        {
            self.secretPackage = try decoderContainer.decode(String?.self, forKey: .secretPackage)
        }
    }
}
public extension ExportSecretResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExportSecretResultCodingKeys.self)
        try encoderContainer.encode(secretPackage, forKey: .secretPackage)
    }
}
/// 启用指定版本机密 
public class EnableSecretVersionResult:NSObject,JdCloudResult
{
}
public class ImportSecretResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ImportSecretResult?;

    enum ImportSecretResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImportSecretResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ImportSecretResult?.self, forKey: .result) ?? nil
    }
}

public extension ImportSecretResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportSecretResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取指定机密版本的详细信息 
public class DescribeSecretVersionInfoResult:NSObject,JdCloudResult
{
    /// SecretVersionItem
    var secretVersionItem:SecretVersionItem?



    public override init(){
        super.init()
    }

    enum DescribeSecretVersionInfoResultCodingKeys: String, CodingKey {
        case secretVersionItem
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretVersionInfoResultCodingKeys.self)
        if decoderContainer.contains(.secretVersionItem)
        {
            self.secretVersionItem = try decoderContainer.decode(SecretVersionItem?.self, forKey: .secretVersionItem)
        }
    }
}
public extension DescribeSecretVersionInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretVersionInfoResultCodingKeys.self)
        try encoderContainer.encode(secretVersionItem, forKey: .secretVersionItem)
    }
}
/// 禁用机密 
public class DisableSecretResult:NSObject,JdCloudResult
{
}
public class DisableSecretVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableSecretVersionResult?;

    enum DisableSecretVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableSecretVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableSecretVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableSecretVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableSecretVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeSecretListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSecretListResult?;

    enum DescribeSecretListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSecretListResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSecretListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除指定版本机密
public class DeleteSecretVersionRequest:JdCloudRequest
{
    /// 机密ID
    var secretId:String


    public init(regionId: String,secretId:String){
        self.secretId = secretId
        super.init(regionId: regionId)
    }


    enum DeleteSecretVersionRequestRequestCodingKeys: String, CodingKey {
        case secretId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecretVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(secretId, forKey: .secretId)

    }
}

public class ExportSecretResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ExportSecretResult?;

    enum ExportSecretResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExportSecretResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ExportSecretResult?.self, forKey: .result) ?? nil
    }
}

public extension ExportSecretResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExportSecretResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateSecretVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateSecretVersionResult?;

    enum UpdateSecretVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateSecretVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateSecretVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateSecretVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateSecretVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  导入机密
public class ImportSecretRequest:JdCloudRequest
{
    /// 密钥包的内容
    var secretPackage:String?




    enum ImportSecretRequestRequestCodingKeys: String, CodingKey {
        case secretPackage
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportSecretRequestRequestCodingKeys.self)
        try encoderContainer.encode(secretPackage, forKey: .secretPackage)

    }
}

public class DisableKeyVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableKeyVersionResult?;

    enum DisableKeyVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableKeyVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableKeyVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableKeyVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableKeyVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取密钥详情 
public class DescribeKeyResult:NSObject,JdCloudResult
{
    /// KeyInfo
    var keyInfo:KeyInfo?



    public override init(){
        super.init()
    }

    enum DescribeKeyResultCodingKeys: String, CodingKey {
        case keyInfo
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeKeyResultCodingKeys.self)
        if decoderContainer.contains(.keyInfo)
        {
            self.keyInfo = try decoderContainer.decode(KeyInfo?.self, forKey: .keyInfo)
        }
    }
}
public extension DescribeKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeyResultCodingKeys.self)
        try encoderContainer.encode(keyInfo, forKey: .keyInfo)
    }
}
/// 禁用当前状态为&#x60;已启用&#x60;的密钥 
public class DisableKeyResult:NSObject,JdCloudResult
{
}

///  获取非对称密钥的公钥
public class GetPublicKeyRequest:JdCloudRequest
{
    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum GetPublicKeyRequestRequestCodingKeys: String, CodingKey {
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPublicKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}


///  -   修改对称密钥配置，包括key的名称、用途、是否自动轮换和轮换周期等;
      ///       /// -   修改非对称密钥配置，包括key的名称、用途等。
      ///       /// 
public class UpdateKeyDescriptionRequest:JdCloudRequest
{
    /// KeyCfg
    var keyCfg:KeyCfg

    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyCfg:KeyCfg,keyId:String){
        self.keyCfg = keyCfg
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum UpdateKeyDescriptionRequestRequestCodingKeys: String, CodingKey {
        case keyCfg
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateKeyDescriptionRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyCfg, forKey: .keyCfg)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}


///  立即轮换密钥，自动轮换周期顺延-支持对称密钥
public class KeyRotationRequest:JdCloudRequest
{
    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum KeyRotationRequestRequestCodingKeys: String, CodingKey {
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: KeyRotationRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}


///  从KMS中获取一对数据密钥的明文/密文
public class GenerateDataKeyRequest:JdCloudRequest
{
    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum GenerateDataKeyRequestRequestCodingKeys: String, CodingKey {
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GenerateDataKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

/// 使用密钥对数据进行加密，针对非对称密钥：使用公钥进行加密，仅支持RSA_PKCS1_PADDING填充方式，最大加密数据长度为245字节 
public class EncryptResult:NSObject,JdCloudResult
{
    /// 密文数据 Base64-encoded binary data object
    var ciphertextBlob:String?



    public override init(){
        super.init()
    }

    enum EncryptResultCodingKeys: String, CodingKey {
        case ciphertextBlob
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EncryptResultCodingKeys.self)
        if decoderContainer.contains(.ciphertextBlob)
        {
            self.ciphertextBlob = try decoderContainer.decode(String?.self, forKey: .ciphertextBlob)
        }
    }
}
public extension EncryptResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EncryptResultCodingKeys.self)
        try encoderContainer.encode(ciphertextBlob, forKey: .ciphertextBlob)
    }
}
/// 计划在以后的是个时间点删除指定版本密钥，默认为7天 
public class ScheduleKeyVersionDeletionResult:NSObject,JdCloudResult
{
}

///  启用指定版本密钥
public class EnableKeyVersionRequest:JdCloudRequest
{
    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum EnableKeyVersionRequestRequestCodingKeys: String, CodingKey {
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableKeyVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

/// 使用非对称密钥的公钥验证签名 
public class ValidateResult:NSObject,JdCloudResult
{
    /// 校验签名结果，true为成功，false为失败
    var validated:Bool?



    public override init(){
        super.init()
    }

    enum ValidateResultCodingKeys: String, CodingKey {
        case validated
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ValidateResultCodingKeys.self)
        if decoderContainer.contains(.validated)
        {
            self.validated = try decoderContainer.decode(Bool?.self, forKey: .validated)
        }
    }
}
public extension ValidateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ValidateResultCodingKeys.self)
        try encoderContainer.encode(validated, forKey: .validated)
    }
}
/// 从KMS中获取一对数据密钥的明文/密文 
public class GenerateDataKeyResult:NSObject,JdCloudResult
{
    /// 明文DEK Base64-encoded binary data object
    var plaintext:String?

    /// 密文DEK Base64-encoded binary data object
    var ciphertextBlob:String?



    public override init(){
        super.init()
    }

    enum GenerateDataKeyResultCodingKeys: String, CodingKey {
        case plaintext
        case ciphertextBlob
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GenerateDataKeyResultCodingKeys.self)
        if decoderContainer.contains(.plaintext)
        {
            self.plaintext = try decoderContainer.decode(String?.self, forKey: .plaintext)
        }
        if decoderContainer.contains(.ciphertextBlob)
        {
            self.ciphertextBlob = try decoderContainer.decode(String?.self, forKey: .ciphertextBlob)
        }
    }
}
public extension GenerateDataKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GenerateDataKeyResultCodingKeys.self)
        try encoderContainer.encode(plaintext, forKey: .plaintext)
        try encoderContainer.encode(ciphertextBlob, forKey: .ciphertextBlob)
    }
}
public class DisableKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableKeyResult?;

    enum DisableKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ValidateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ValidateResult?;

    enum ValidateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ValidateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ValidateResult?.self, forKey: .result) ?? nil
    }
}

public extension ValidateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ValidateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  取消删除指定版本密钥
public class CancelKeyVersionDeletionRequest:JdCloudRequest
{
    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum CancelKeyVersionDeletionRequestRequestCodingKeys: String, CodingKey {
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CancelKeyVersionDeletionRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}


///  使用密钥对数据进行解密，针对非对称密钥：使用私钥进行加密
public class DecryptRequest:JdCloudRequest
{
    /// 密文数据 Base64-encoded binary data object
    var ciphertextBlob:String?

    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum DecryptRequestRequestCodingKeys: String, CodingKey {
        case ciphertextBlob
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DecryptRequestRequestCodingKeys.self)
        try encoderContainer.encode(ciphertextBlob, forKey: .ciphertextBlob)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

public class SignResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SignResult?;

    enum SignResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SignResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SignResult?.self, forKey: .result) ?? nil
    }
}

public extension SignResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SignResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// -   修改对称密钥配置，包括key的名称、用途、是否自动轮换和轮换周期等;
      ///       /// -   修改非对称密钥配置，包括key的名称、用途等。
      ///       ///  
public class UpdateKeyDescriptionResult:NSObject,JdCloudResult
{
}
/// 获取非对称密钥的公钥 
public class GetPublicKeyResult:NSObject,JdCloudResult
{
    /// 公钥，PEM格式
    var publicKeyBlob:String?



    public override init(){
        super.init()
    }

    enum GetPublicKeyResultCodingKeys: String, CodingKey {
        case publicKeyBlob
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPublicKeyResultCodingKeys.self)
        if decoderContainer.contains(.publicKeyBlob)
        {
            self.publicKeyBlob = try decoderContainer.decode(String?.self, forKey: .publicKeyBlob)
        }
    }
}
public extension GetPublicKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPublicKeyResultCodingKeys.self)
        try encoderContainer.encode(publicKeyBlob, forKey: .publicKeyBlob)
    }
}
public class ScheduleKeyDeletionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ScheduleKeyDeletionResult?;

    enum ScheduleKeyDeletionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ScheduleKeyDeletionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ScheduleKeyDeletionResult?.self, forKey: .result) ?? nil
    }
}

public extension ScheduleKeyDeletionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ScheduleKeyDeletionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 禁用指定版本密钥 
public class DisableKeyVersionResult:NSObject,JdCloudResult
{
}

///  获取密钥列表
public class DescribeKeyListRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?




    enum DescribeKeyListRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeyListRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

/// 计划在以后的是个时间点删除密钥，默认为7天 
public class ScheduleKeyDeletionResult:NSObject,JdCloudResult
{
}
public class GetPublicKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetPublicKeyResult?;

    enum GetPublicKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPublicKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetPublicKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension GetPublicKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPublicKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取版本详情
public class DescribeKeyDetailRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum DescribeKeyDetailRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeyDetailRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

public class EnableKeyVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableKeyVersionResult?;

    enum EnableKeyVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableKeyVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableKeyVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableKeyVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableKeyVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CancelKeyVersionDeletionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CancelKeyVersionDeletionResult?;

    enum CancelKeyVersionDeletionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CancelKeyVersionDeletionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CancelKeyVersionDeletionResult?.self, forKey: .result) ?? nil
    }
}

public extension CancelKeyVersionDeletionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CancelKeyVersionDeletionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeKeyResult?;

    enum DescribeKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取版本详情 
public class DescribeKeyDetailResult:NSObject,JdCloudResult
{
    /// KeyDetail
    var keyDetail:KeyDetail?



    public override init(){
        super.init()
    }

    enum DescribeKeyDetailResultCodingKeys: String, CodingKey {
        case keyDetail
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeKeyDetailResultCodingKeys.self)
        if decoderContainer.contains(.keyDetail)
        {
            self.keyDetail = try decoderContainer.decode(KeyDetail?.self, forKey: .keyDetail)
        }
    }
}
public extension DescribeKeyDetailResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeyDetailResultCodingKeys.self)
        try encoderContainer.encode(keyDetail, forKey: .keyDetail)
    }
}

///  计划在以后的是个时间点删除指定版本密钥，默认为7天
public class ScheduleKeyVersionDeletionRequest:JdCloudRequest
{
    /// 延迟删除时间，单位（天），默认为7天；支持时间范围：7~30天
    var delayDays:Int?

    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum ScheduleKeyVersionDeletionRequestRequestCodingKeys: String, CodingKey {
        case delayDays
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ScheduleKeyVersionDeletionRequestRequestCodingKeys.self)
        try encoderContainer.encode(delayDays, forKey: .delayDays)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

/// 启用当前状态为&#x60;已禁用&#x60;的密钥 
public class EnableKeyResult:NSObject,JdCloudResult
{
}
public class CancelKeyDeletionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CancelKeyDeletionResult?;

    enum CancelKeyDeletionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CancelKeyDeletionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CancelKeyDeletionResult?.self, forKey: .result) ?? nil
    }
}

public extension CancelKeyDeletionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CancelKeyDeletionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  使用非对称密钥的公钥验证签名
public class ValidateRequest:JdCloudRequest
{
    /// 需要签名的数据 Base64-encoded binary data object
    var plaintext:String?

    /// 签名
    var signature:String?

    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum ValidateRequestRequestCodingKeys: String, CodingKey {
        case plaintext
        case signature
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ValidateRequestRequestCodingKeys.self)
        try encoderContainer.encode(plaintext, forKey: .plaintext)
        try encoderContainer.encode(signature, forKey: .signature)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

/// 启用指定版本密钥 
public class EnableKeyVersionResult:NSObject,JdCloudResult
{
}
/// 取消删除指定版本密钥 
public class CancelKeyVersionDeletionResult:NSObject,JdCloudResult
{
}
/// 创建一个CMK（用户主密钥），默认为启用状态 
public class CreateKeyResult:NSObject,JdCloudResult
{
    /// 创建的密钥ID
    var keyId:String?



    public override init(){
        super.init()
    }

    enum CreateKeyResultCodingKeys: String, CodingKey {
        case keyId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateKeyResultCodingKeys.self)
        if decoderContainer.contains(.keyId)
        {
            self.keyId = try decoderContainer.decode(String?.self, forKey: .keyId)
        }
    }
}
public extension CreateKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeyResultCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)
    }
}
public class GenerateDataKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GenerateDataKeyResult?;

    enum GenerateDataKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GenerateDataKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GenerateDataKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension GenerateDataKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GenerateDataKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 使用非对称密钥的私钥签名,签名算法仅支持RSA_PKCS1_PADDING填充方式,最大签名数据长度为4K字节 
public class SignResult:NSObject,JdCloudResult
{
    /// 签名
    var signature:String?



    public override init(){
        super.init()
    }

    enum SignResultCodingKeys: String, CodingKey {
        case signature
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SignResultCodingKeys.self)
        if decoderContainer.contains(.signature)
        {
            self.signature = try decoderContainer.decode(String?.self, forKey: .signature)
        }
    }
}
public extension SignResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SignResultCodingKeys.self)
        try encoderContainer.encode(signature, forKey: .signature)
    }
}
public class ScheduleKeyVersionDeletionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ScheduleKeyVersionDeletionResult?;

    enum ScheduleKeyVersionDeletionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ScheduleKeyVersionDeletionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ScheduleKeyVersionDeletionResult?.self, forKey: .result) ?? nil
    }
}

public extension ScheduleKeyVersionDeletionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ScheduleKeyVersionDeletionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class KeyRotationResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:KeyRotationResult?;

    enum KeyRotationResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: KeyRotationResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(KeyRotationResult?.self, forKey: .result) ?? nil
    }
}

public extension KeyRotationResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: KeyRotationResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class EncryptResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EncryptResult?;

    enum EncryptResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EncryptResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EncryptResult?.self, forKey: .result) ?? nil
    }
}

public extension EncryptResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EncryptResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  取消删除密钥
public class CancelKeyDeletionRequest:JdCloudRequest
{
    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum CancelKeyDeletionRequestRequestCodingKeys: String, CodingKey {
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CancelKeyDeletionRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

/// 立即轮换密钥，自动轮换周期顺延-支持对称密钥 
public class KeyRotationResult:NSObject,JdCloudResult
{
}

///  使用密钥对数据进行加密，针对非对称密钥：使用公钥进行加密，仅支持RSA_PKCS1_PADDING填充方式，最大加密数据长度为245字节
public class EncryptRequest:JdCloudRequest
{
    /// 明文数据 Base64-encoded binary data object
    var plaintext:String?

    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum EncryptRequestRequestCodingKeys: String, CodingKey {
        case plaintext
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EncryptRequestRequestCodingKeys.self)
        try encoderContainer.encode(plaintext, forKey: .plaintext)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

/// 取消删除密钥 
public class CancelKeyDeletionResult:NSObject,JdCloudResult
{
}

///  使用非对称密钥的私钥签名,签名算法仅支持RSA_PKCS1_PADDING填充方式,最大签名数据长度为4K字节
public class SignRequest:JdCloudRequest
{
    /// 需要签名的数据 Base64-encoded binary data object
    var plaintext:String?

    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum SignRequestRequestCodingKeys: String, CodingKey {
        case plaintext
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SignRequestRequestCodingKeys.self)
        try encoderContainer.encode(plaintext, forKey: .plaintext)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}


///  计划在以后的是个时间点删除密钥，默认为7天
public class ScheduleKeyDeletionRequest:JdCloudRequest
{
    /// 延迟删除时间，单位（天），默认为7天；支持时间范围：7~30天
    var delayDays:Int?

    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum ScheduleKeyDeletionRequestRequestCodingKeys: String, CodingKey {
        case delayDays
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ScheduleKeyDeletionRequestRequestCodingKeys.self)
        try encoderContainer.encode(delayDays, forKey: .delayDays)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

public class UpdateKeyDescriptionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateKeyDescriptionResult?;

    enum UpdateKeyDescriptionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateKeyDescriptionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateKeyDescriptionResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateKeyDescriptionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateKeyDescriptionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DecryptResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DecryptResult?;

    enum DecryptResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DecryptResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DecryptResult?.self, forKey: .result) ?? nil
    }
}

public extension DecryptResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DecryptResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class EnableKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableKeyResult?;

    enum EnableKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  禁用当前状态为&#x60;已启用&#x60;的密钥
public class DisableKeyRequest:JdCloudRequest
{
    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum DisableKeyRequestRequestCodingKeys: String, CodingKey {
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

public class CreateKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateKeyResult?;

    enum CreateKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取密钥详情
public class DescribeKeyRequest:JdCloudRequest
{
    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum DescribeKeyRequestRequestCodingKeys: String, CodingKey {
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

public class DescribeKeyListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeKeyListResult?;

    enum DescribeKeyListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeKeyListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeKeyListResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeKeyListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeyListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  启用当前状态为&#x60;已禁用&#x60;的密钥
public class EnableKeyRequest:JdCloudRequest
{
    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum EnableKeyRequestRequestCodingKeys: String, CodingKey {
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

public class DescribeKeyDetailResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeKeyDetailResult?;

    enum DescribeKeyDetailResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeKeyDetailResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeKeyDetailResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeKeyDetailResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeyDetailResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建一个CMK（用户主密钥），默认为启用状态
public class CreateKeyRequest:JdCloudRequest
{
    /// KeyCfg
    var keyCfg:KeyCfg


    public init(regionId: String,keyCfg:KeyCfg){
        self.keyCfg = keyCfg
        super.init(regionId: regionId)
    }


    enum CreateKeyRequestRequestCodingKeys: String, CodingKey {
        case keyCfg
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyCfg, forKey: .keyCfg)

    }
}

/// 获取密钥列表 
public class DescribeKeyListResult:NSObject,JdCloudResult
{
    /// Key列表
    var keyList:[KeyInfo?]?

    /// Key的数量
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeKeyListResultCodingKeys: String, CodingKey {
        case keyList
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeKeyListResultCodingKeys.self)
        if decoderContainer.contains(.keyList)
        {
            self.keyList = try decoderContainer.decode([KeyInfo?]?.self, forKey: .keyList)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeKeyListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeyListResultCodingKeys.self)
        try encoderContainer.encode(keyList, forKey: .keyList)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 使用密钥对数据进行解密，针对非对称密钥：使用私钥进行加密 
public class DecryptResult:NSObject,JdCloudResult
{
    /// 明文数据 Base64-encoded binary data object
    var plaintext:String?



    public override init(){
        super.init()
    }

    enum DecryptResultCodingKeys: String, CodingKey {
        case plaintext
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DecryptResultCodingKeys.self)
        if decoderContainer.contains(.plaintext)
        {
            self.plaintext = try decoderContainer.decode(String?.self, forKey: .plaintext)
        }
    }
}
public extension DecryptResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DecryptResultCodingKeys.self)
        try encoderContainer.encode(plaintext, forKey: .plaintext)
    }
}

///  禁用指定版本密钥
public class DisableKeyVersionRequest:JdCloudRequest
{
    /// 密钥ID
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum DisableKeyVersionRequestRequestCodingKeys: String, CodingKey {
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableKeyVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

