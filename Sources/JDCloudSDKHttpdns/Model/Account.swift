/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  account
@objc(Account)
public class Account:NSObject,Codable{
    /// 索引id
    var id:Int?
    /// 用户名
    var userPin:String?
    /// 账户ID
    var accountId:String?
    /// 提供httpdns服务的IP
    var serviceIp:[String?]?
    /// httpdns服务的密钥
    var key:[String?]?
    /// httpdns服务的密钥的状态，同key的序号对应
    var keyStatus:[Int?]?
    /// 账户创建时间
    var createTime:Int64?
    /// 账户更新时间
    var updateTime:Int64?
    /// 非鉴权方式是否可以访问httpdns服务，0:不可以，1:可以
    var noauthAccess:Int?
    /// 账户最多可以创建的域名
    var domainLimit:Int?
    /// 账户状态，0:正常 1:使用80%流量，2:欠费 3:停服
    var accountStatus:Int?



    public override init(){
            super.init()
    }

    enum AccountCodingKeys: String, CodingKey {
        case id
        case userPin
        case accountId
        case serviceIp
        case key
        case keyStatus
        case createTime
        case updateTime
        case noauthAccess
        case domainLimit
        case accountStatus
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AccountCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.userPin)
        {
            self.userPin = try decoderContainer.decode(String?.self, forKey: .userPin)
        }
        if decoderContainer.contains(.accountId)
        {
            self.accountId = try decoderContainer.decode(String?.self, forKey: .accountId)
        }
        if decoderContainer.contains(.serviceIp)
        {
            self.serviceIp = try decoderContainer.decode([String?]?.self, forKey: .serviceIp)
        }
        if decoderContainer.contains(.key)
        {
            self.key = try decoderContainer.decode([String?]?.self, forKey: .key)
        }
        if decoderContainer.contains(.keyStatus)
        {
            self.keyStatus = try decoderContainer.decode([Int?]?.self, forKey: .keyStatus)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(Int64?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(Int64?.self, forKey: .updateTime)
        }
        if decoderContainer.contains(.noauthAccess)
        {
            self.noauthAccess = try decoderContainer.decode(Int?.self, forKey: .noauthAccess)
        }
        if decoderContainer.contains(.domainLimit)
        {
            self.domainLimit = try decoderContainer.decode(Int?.self, forKey: .domainLimit)
        }
        if decoderContainer.contains(.accountStatus)
        {
            self.accountStatus = try decoderContainer.decode(Int?.self, forKey: .accountStatus)
        }
    }
}
public extension Account{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AccountCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(userPin, forKey: .userPin)
         try encoderContainer.encode(accountId, forKey: .accountId)
         try encoderContainer.encode(serviceIp, forKey: .serviceIp)
         try encoderContainer.encode(key, forKey: .key)
         try encoderContainer.encode(keyStatus, forKey: .keyStatus)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
         try encoderContainer.encode(noauthAccess, forKey: .noauthAccess)
         try encoderContainer.encode(domainLimit, forKey: .domainLimit)
         try encoderContainer.encode(accountStatus, forKey: .accountStatus)
    }
}
