/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  dataplan
@objc(Dataplan)
public class Dataplan:NSObject,Codable{
    /// 流量包索引ID
    var id:Int?
    /// 账户ID
    var accountId:String?
    /// 这个流量包的总数
    var number:Double?
    /// 这个流量包的单位
    var unit:Int?
    /// 这个流量包的起始时间
    var startTime:Int64?
    /// 这个流量包的过期时间
    var expireTime:Int64?
    /// 这个流量包使用过了的数量
    var usedNumber:Double?
    /// 流量包的类型，1:免费流量包 2:收费包
    var type:Int?
    /// 是否过期，0:未过期 1:过期了
    var isExpired:Int?



    public override init(){
            super.init()
    }

    enum DataplanCodingKeys: String, CodingKey {
        case id
        case accountId
        case number
        case unit
        case startTime
        case expireTime
        case usedNumber
        case type
        case isExpired
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DataplanCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.accountId)
        {
            self.accountId = try decoderContainer.decode(String?.self, forKey: .accountId)
        }
        if decoderContainer.contains(.number)
        {
            self.number = try decoderContainer.decode(Double?.self, forKey: .number)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(Int?.self, forKey: .unit)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(Int64?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.expireTime)
        {
            self.expireTime = try decoderContainer.decode(Int64?.self, forKey: .expireTime)
        }
        if decoderContainer.contains(.usedNumber)
        {
            self.usedNumber = try decoderContainer.decode(Double?.self, forKey: .usedNumber)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(Int?.self, forKey: .type)
        }
        if decoderContainer.contains(.isExpired)
        {
            self.isExpired = try decoderContainer.decode(Int?.self, forKey: .isExpired)
        }
    }
}
public extension Dataplan{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DataplanCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(accountId, forKey: .accountId)
         try encoderContainer.encode(number, forKey: .number)
         try encoderContainer.encode(unit, forKey: .unit)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(expireTime, forKey: .expireTime)
         try encoderContainer.encode(usedNumber, forKey: .usedNumber)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(isExpired, forKey: .isExpired)
    }
}
