/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  domain
@objc(Domain)
public class Domain:NSObject,Codable{
    /// 索引ID
    var id:Int?
    /// 账户ID
    var accountId:String?
    /// 服务的域名
    var domainName:String?
    /// 域名创建时间
    var createTime:Int64?
    /// 从本月1号开始到现在的httpdns总查询次数
    var queryCount:Int64?
    /// 是否删除
    var isDelete:Int?



    public override init(){
            super.init()
    }

    enum DomainCodingKeys: String, CodingKey {
        case id
        case accountId
        case domainName
        case createTime
        case queryCount
        case isDelete
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DomainCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.accountId)
        {
            self.accountId = try decoderContainer.decode(String?.self, forKey: .accountId)
        }
        if decoderContainer.contains(.domainName)
        {
            self.domainName = try decoderContainer.decode(String?.self, forKey: .domainName)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(Int64?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.queryCount)
        {
            self.queryCount = try decoderContainer.decode(Int64?.self, forKey: .queryCount)
        }
        if decoderContainer.contains(.isDelete)
        {
            self.isDelete = try decoderContainer.decode(Int?.self, forKey: .isDelete)
        }
    }
}
public extension Domain{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DomainCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(accountId, forKey: .accountId)
         try encoderContainer.encode(domainName, forKey: .domainName)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(queryCount, forKey: .queryCount)
         try encoderContainer.encode(isDelete, forKey: .isDelete)
    }
}
