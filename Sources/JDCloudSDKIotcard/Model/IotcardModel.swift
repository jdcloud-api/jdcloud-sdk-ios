/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   iot-card-Related-API
   物联网卡服务相关API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
///  operationIotCardResp
public class OperationIotCardResp:NSObject,Codable{
    /// 物联网卡iccid
    var iccid:String?
    /// 操作状态(0:操作成功;1:操作失败)
    var status:String?
    /// 卡操作反馈信息
    var message:String?



    public override init(){
            super.init()
    }

    enum OperationIotCardRespCodingKeys: String, CodingKey {
        case iccid
        case status
        case message
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OperationIotCardRespCodingKeys.self)
        if decoderContainer.contains(.iccid)
        {
            self.iccid = try decoderContainer.decode(String?.self, forKey: .iccid)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension OperationIotCardResp{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OperationIotCardRespCodingKeys.self)
         try encoderContainer.encode(iccid, forKey: .iccid)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(message, forKey: .message)
    }
}
///  gprsStatusResp
public class GprsStatusResp:NSObject,Codable{
    /// 物联网卡iccid
    var iccid:String?
    /// 物联网卡msisdn
    var msisdn:String?
    /// GPRS在线状态(00:离线;01:在线;02:该运营商不支持查询;03:未知)
    var onlinestatus:String?



    public override init(){
            super.init()
    }

    enum GprsStatusRespCodingKeys: String, CodingKey {
        case iccid
        case msisdn
        case onlinestatus
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GprsStatusRespCodingKeys.self)
        if decoderContainer.contains(.iccid)
        {
            self.iccid = try decoderContainer.decode(String?.self, forKey: .iccid)
        }
        if decoderContainer.contains(.msisdn)
        {
            self.msisdn = try decoderContainer.decode(String?.self, forKey: .msisdn)
        }
        if decoderContainer.contains(.onlinestatus)
        {
            self.onlinestatus = try decoderContainer.decode(String?.self, forKey: .onlinestatus)
        }
    }
}
public extension GprsStatusResp{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GprsStatusRespCodingKeys.self)
         try encoderContainer.encode(iccid, forKey: .iccid)
         try encoderContainer.encode(msisdn, forKey: .msisdn)
         try encoderContainer.encode(onlinestatus, forKey: .onlinestatus)
    }
}
///  onOffStatusResp
public class OnOffStatusResp:NSObject,Codable{
    /// 物联网卡iccid
    var iccid:String?
    /// 物联网卡msisdn
    var msisdn:String?
    /// 终端的开关机状态(00:关机;01:开机;02:该运营商不支持查询;03:未知)
    var status:String?



    public override init(){
            super.init()
    }

    enum OnOffStatusRespCodingKeys: String, CodingKey {
        case iccid
        case msisdn
        case status
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OnOffStatusRespCodingKeys.self)
        if decoderContainer.contains(.iccid)
        {
            self.iccid = try decoderContainer.decode(String?.self, forKey: .iccid)
        }
        if decoderContainer.contains(.msisdn)
        {
            self.msisdn = try decoderContainer.decode(String?.self, forKey: .msisdn)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
    }
}
public extension OnOffStatusResp{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OnOffStatusRespCodingKeys.self)
         try encoderContainer.encode(iccid, forKey: .iccid)
         try encoderContainer.encode(msisdn, forKey: .msisdn)
         try encoderContainer.encode(status, forKey: .status)
    }
}
///  lifeStatusResp
public class LifeStatusResp:NSObject,Codable{
    /// 物联网卡iccid
    var iccid:String?
    /// 物联网卡msisdn
    var msisdn:String?
    /// 生命周期状态(00:可激活;01:已激活;02:已停用;03:已失效;04:未知;05:可测试)
    var status:String?



    public override init(){
            super.init()
    }

    enum LifeStatusRespCodingKeys: String, CodingKey {
        case iccid
        case msisdn
        case status
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: LifeStatusRespCodingKeys.self)
        if decoderContainer.contains(.iccid)
        {
            self.iccid = try decoderContainer.decode(String?.self, forKey: .iccid)
        }
        if decoderContainer.contains(.msisdn)
        {
            self.msisdn = try decoderContainer.decode(String?.self, forKey: .msisdn)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
    }
}
public extension LifeStatusResp{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: LifeStatusRespCodingKeys.self)
         try encoderContainer.encode(iccid, forKey: .iccid)
         try encoderContainer.encode(msisdn, forKey: .msisdn)
         try encoderContainer.encode(status, forKey: .status)
    }
}
///  gprsRealtimeInfoResp
public class GprsRealtimeInfoResp:NSObject,Codable{
    /// 套餐流量总量(单位MB)
    var total:String?
    /// 累计使用量(单位KB)
    var used:String?



    public override init(){
            super.init()
    }

    enum GprsRealtimeInfoRespCodingKeys: String, CodingKey {
        case total
        case used
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GprsRealtimeInfoRespCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(String?.self, forKey: .total)
        }
        if decoderContainer.contains(.used)
        {
            self.used = try decoderContainer.decode(String?.self, forKey: .used)
        }
    }
}
public extension GprsRealtimeInfoResp{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GprsRealtimeInfoRespCodingKeys.self)
         try encoderContainer.encode(total, forKey: .total)
         try encoderContainer.encode(used, forKey: .used)
    }
}
