/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Resource
   Interface of Resource

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 模板校验 
public class ValidateTemplateResult:NSObject,JdCloudResult
{
    /// Describe
    var describe:String?

    /// 验证模板结果信息，JSON格式
    var result:AnyObject?



    public override init(){
        super.init()
    }

    enum ValidateTemplateResultCodingKeys: String, CodingKey {
        case describe
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ValidateTemplateResultCodingKeys.self)
        if decoderContainer.contains(.describe)
        {
            self.describe = try decoderContainer.decode(String?.self, forKey: .describe)
        }
    }
}
public extension ValidateTemplateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ValidateTemplateResultCodingKeys.self)
        try encoderContainer.encode(describe, forKey: .describe)
    }
}
public class ValidateTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ValidateTemplateResult?;

    enum ValidateTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ValidateTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ValidateTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension ValidateTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ValidateTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  模板校验
public class ValidateTemplateRequest:JdCloudRequest
{
    /// Environment
    var environment:Environment?

    /// 模板
    var template:AnyObject?

    /// 可取值:(validateTemplate (检测模板), validateStack (检测模板和environment)) 默认validateTemplate
    var validateMode:String?


    public init(regionId: String,template:AnyObject?){
        self.template = template
        super.init(regionId: regionId)
    }


    enum ValidateTemplateRequestRequestCodingKeys: String, CodingKey {
        case environment
        case template
        case validateMode
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ValidateTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(environment, forKey: .environment)
        try encoderContainer.encode(validateMode, forKey: .validateMode)

    }
}

public class DescribeStacksResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeStacksResult?;

    enum DescribeStacksResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStacksResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeStacksResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeStacksResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStacksResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询资源栈列表 
public class DescribeStacksResult:NSObject,JdCloudResult
{
    /// List
    var list:[StackOut?]?

    /// TotalCount
    var totalCount:Int64?



    public override init(){
        super.init()
    }

    enum DescribeStacksResultCodingKeys: String, CodingKey {
        case list
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStacksResultCodingKeys.self)
        if decoderContainer.contains(.list)
        {
            self.list = try decoderContainer.decode([StackOut?]?.self, forKey: .list)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int64?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeStacksResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStacksResultCodingKeys.self)
        try encoderContainer.encode(list, forKey: .list)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 执行更改集 
public class ExecuteChangeSetResult:NSObject,JdCloudResult
{
}

///  查询资源栈列表
public class DescribeStacksRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
    var pageSize:Int64?

    /// 资源栈名称
    var stackName:String?

    /// 资源栈正在执行的动作
    var action:String?

    /// 资源栈正在执行的动作的状态
    var status:String?

    /// 创建开始时间
    var createStartTime:String?

    /// 创建结束时间
    var createEndTime:String?

    /// 更新开始时间
    var updateStartTime:String?

    /// 更新结束时间
    var updateEndTime:String?

    /// 排序字段, createtime, updatetime
    var sortField:String?

    /// 排序方式，asc，desc
    var sortBy:String?




    enum DescribeStacksRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case stackName
        case action
        case status
        case createStartTime
        case createEndTime
        case updateStartTime
        case updateEndTime
        case sortField
        case sortBy
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStacksRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(stackName, forKey: .stackName)
        try encoderContainer.encode(action, forKey: .action)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(createStartTime, forKey: .createStartTime)
        try encoderContainer.encode(createEndTime, forKey: .createEndTime)
        try encoderContainer.encode(updateStartTime, forKey: .updateStartTime)
        try encoderContainer.encode(updateEndTime, forKey: .updateEndTime)
        try encoderContainer.encode(sortField, forKey: .sortField)
        try encoderContainer.encode(sortBy, forKey: .sortBy)

    }
}

public class DescribeStackResourcesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeStackResourcesResult?;

    enum DescribeStackResourcesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStackResourcesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeStackResourcesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeStackResourcesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStackResourcesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询资源栈事件列表 
public class DescribeStackEventsResult:NSObject,JdCloudResult
{
    /// List
    var list:[EventOut?]?

    /// TotalCount
    var totalCount:Int64?



    public override init(){
        super.init()
    }

    enum DescribeStackEventsResultCodingKeys: String, CodingKey {
        case list
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStackEventsResultCodingKeys.self)
        if decoderContainer.contains(.list)
        {
            self.list = try decoderContainer.decode([EventOut?]?.self, forKey: .list)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int64?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeStackEventsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStackEventsResultCodingKeys.self)
        try encoderContainer.encode(list, forKey: .list)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 查询资源栈详情 
public class DescribeStackResult:NSObject,JdCloudResult
{
    /// Stack
    var stack:StackOut?



    public override init(){
        super.init()
    }

    enum DescribeStackResultCodingKeys: String, CodingKey {
        case stack
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStackResultCodingKeys.self)
        if decoderContainer.contains(.stack)
        {
            self.stack = try decoderContainer.decode(StackOut?.self, forKey: .stack)
        }
    }
}
public extension DescribeStackResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStackResultCodingKeys.self)
        try encoderContainer.encode(stack, forKey: .stack)
    }
}
/// 查询资源栈使用的模板 
public class DescribeStackTemplateResult:NSObject,JdCloudResult
{
    /// 模板信息
    var template:String?



    public override init(){
        super.init()
    }

    enum DescribeStackTemplateResultCodingKeys: String, CodingKey {
        case template
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStackTemplateResultCodingKeys.self)
        if decoderContainer.contains(.template)
        {
            self.template = try decoderContainer.decode(String?.self, forKey: .template)
        }
    }
}
public extension DescribeStackTemplateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStackTemplateResultCodingKeys.self)
        try encoderContainer.encode(template, forKey: .template)
    }
}

///  创建资源栈
public class CreateStackRequest:JdCloudRequest
{
    /// Environment
    var environment:Environment

    /// 模板, JSON对象
    var template:AnyObject?


    public init(regionId: String,environment:Environment,template:AnyObject?){
        self.environment = environment
        self.template = template
        super.init(regionId: regionId)
    }


    enum CreateStackRequestRequestCodingKeys: String, CodingKey {
        case environment
        case template
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateStackRequestRequestCodingKeys.self)
        try encoderContainer.encode(environment, forKey: .environment)

    }
}

public class DescribeStackEventsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeStackEventsResult?;

    enum DescribeStackEventsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStackEventsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeStackEventsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeStackEventsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStackEventsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询资源栈详情
public class DescribeStackRequest:JdCloudRequest
{
    /// 资源栈 ID
    var stackId:String


    public init(regionId: String,stackId:String){
        self.stackId = stackId
        super.init(regionId: regionId)
    }


    enum DescribeStackRequestRequestCodingKeys: String, CodingKey {
        case stackId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStackRequestRequestCodingKeys.self)
        try encoderContainer.encode(stackId, forKey: .stackId)

    }
}

/// 创建更改集 
public class CreateChangeSetResult:NSObject,JdCloudResult
{
    /// Id
    var id:String?



    public override init(){
        super.init()
    }

    enum CreateChangeSetResultCodingKeys: String, CodingKey {
        case id
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateChangeSetResultCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
    }
}
public extension CreateChangeSetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateChangeSetResultCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)
    }
}

///  执行更改集
public class ExecuteChangeSetRequest:JdCloudRequest
{
    /// 资源栈 ID
    var stackId:String

    /// 更改集 ID
    var changesetId:String


    public init(regionId: String,stackId:String,changesetId:String){
        self.stackId = stackId
        self.changesetId = changesetId
        super.init(regionId: regionId)
    }


    enum ExecuteChangeSetRequestRequestCodingKeys: String, CodingKey {
        case stackId
        case changesetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecuteChangeSetRequestRequestCodingKeys.self)
        try encoderContainer.encode(stackId, forKey: .stackId)
        try encoderContainer.encode(changesetId, forKey: .changesetId)

    }
}

public class CreateStackResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateStackResult?;

    enum CreateStackResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateStackResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateStackResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateStackResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateStackResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeStackResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeStackResult?;

    enum DescribeStackResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStackResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeStackResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeStackResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStackResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateChangeSetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateChangeSetResult?;

    enum CreateChangeSetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateChangeSetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateChangeSetResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateChangeSetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateChangeSetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除资源栈
public class DeleteStackRequest:JdCloudRequest
{
    /// 资源栈 ID
    var stackId:String


    public init(regionId: String,stackId:String){
        self.stackId = stackId
        super.init(regionId: regionId)
    }


    enum DeleteStackRequestRequestCodingKeys: String, CodingKey {
        case stackId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteStackRequestRequestCodingKeys.self)
        try encoderContainer.encode(stackId, forKey: .stackId)

    }
}

/// 创建资源栈 
public class CreateStackResult:NSObject,JdCloudResult
{
    /// StackID
    var stackID:String?



    public override init(){
        super.init()
    }

    enum CreateStackResultCodingKeys: String, CodingKey {
        case stackID
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateStackResultCodingKeys.self)
        if decoderContainer.contains(.stackID)
        {
            self.stackID = try decoderContainer.decode(String?.self, forKey: .stackID)
        }
    }
}
public extension CreateStackResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateStackResultCodingKeys.self)
        try encoderContainer.encode(stackID, forKey: .stackID)
    }
}
public class DeleteStackResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteStackResult?;

    enum DeleteStackResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteStackResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteStackResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteStackResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteStackResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询资源栈使用的模板
public class DescribeStackTemplateRequest:JdCloudRequest
{
    /// 资源栈 ID
    var stackId:String


    public init(regionId: String,stackId:String){
        self.stackId = stackId
        super.init(regionId: regionId)
    }


    enum DescribeStackTemplateRequestRequestCodingKeys: String, CodingKey {
        case stackId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStackTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(stackId, forKey: .stackId)

    }
}

public class DescribeStackTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeStackTemplateResult?;

    enum DescribeStackTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStackTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeStackTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeStackTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStackTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除资源栈 
public class DeleteStackResult:NSObject,JdCloudResult
{
    /// Details
    var details:String?



    public override init(){
        super.init()
    }

    enum DeleteStackResultCodingKeys: String, CodingKey {
        case details
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteStackResultCodingKeys.self)
        if decoderContainer.contains(.details)
        {
            self.details = try decoderContainer.decode(String?.self, forKey: .details)
        }
    }
}
public extension DeleteStackResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteStackResultCodingKeys.self)
        try encoderContainer.encode(details, forKey: .details)
    }
}
public class ExecuteChangeSetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ExecuteChangeSetResult?;

    enum ExecuteChangeSetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecuteChangeSetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ExecuteChangeSetResult?.self, forKey: .result) ?? nil
    }
}

public extension ExecuteChangeSetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecuteChangeSetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建更改集
public class CreateChangeSetRequest:JdCloudRequest
{
    /// Environment
    var environment:Environment

    /// 模板, JSON对象
    var template:AnyObject?

    /// 资源栈 ID
    var stackId:String


    public init(regionId: String,environment:Environment,template:AnyObject?,stackId:String){
        self.environment = environment
        self.template = template
        self.stackId = stackId
        super.init(regionId: regionId)
    }


    enum CreateChangeSetRequestRequestCodingKeys: String, CodingKey {
        case environment
        case template
        case stackId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateChangeSetRequestRequestCodingKeys.self)
        try encoderContainer.encode(environment, forKey: .environment)
        try encoderContainer.encode(stackId, forKey: .stackId)

    }
}


///  查询资源栈中资源列表
public class DescribeStackResourcesRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
    var pageSize:Int64?

    /// 按照京东云产品线名称或者资源逻辑ID进行模糊搜索
    var search:String?

    /// 只按照京东云产品线名称进行模糊搜索，比如VM，Disk等
    var product:String?

    /// 资源栈 ID
    var stackId:String


    public init(regionId: String,stackId:String){
        self.stackId = stackId
        super.init(regionId: regionId)
    }


    enum DescribeStackResourcesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case search
        case product
        case stackId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStackResourcesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(search, forKey: .search)
        try encoderContainer.encode(product, forKey: .product)
        try encoderContainer.encode(stackId, forKey: .stackId)

    }
}


///  查询资源栈事件列表
public class DescribeStackEventsRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
    var pageSize:Int64?

    /// 事件开始时间
    var startTime:String?

    /// 事件结束时间
    var endTime:String?

    /// 资源栈 ID
    var stackId:String


    public init(regionId: String,stackId:String){
        self.stackId = stackId
        super.init(regionId: regionId)
    }


    enum DescribeStackEventsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case stackId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStackEventsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(stackId, forKey: .stackId)

    }
}

/// 查询资源栈中资源列表 
public class DescribeStackResourcesResult:NSObject,JdCloudResult
{
    /// List
    var list:[ResourceOut?]?

    /// TotalCount
    var totalCount:Int64?



    public override init(){
        super.init()
    }

    enum DescribeStackResourcesResultCodingKeys: String, CodingKey {
        case list
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStackResourcesResultCodingKeys.self)
        if decoderContainer.contains(.list)
        {
            self.list = try decoderContainer.decode([ResourceOut?]?.self, forKey: .list)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int64?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeStackResourcesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStackResourcesResultCodingKeys.self)
        try encoderContainer.encode(list, forKey: .list)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  查询支持的资源结构详情
public class DescribeResourceTypeSpecificationRequest:JdCloudRequest
{
    /// 资源类型
    var resourceType:String


    public init(regionId: String,resourceType:String){
        self.resourceType = resourceType
        super.init(regionId: regionId)
    }


    enum DescribeResourceTypeSpecificationRequestRequestCodingKeys: String, CodingKey {
        case resourceType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeResourceTypeSpecificationRequestRequestCodingKeys.self)
        try encoderContainer.encode(resourceType, forKey: .resourceType)

    }
}

/// 查询支持的资源结构详情 
public class DescribeResourceTypeSpecificationResult:NSObject,JdCloudResult
{
    /// PropertyTypes
    var propertyTypes:[String:PropertyTypes?]?

    /// ResourceTypes
    var resourceTypes:ResourceTypes?



    public override init(){
        super.init()
    }

    enum DescribeResourceTypeSpecificationResultCodingKeys: String, CodingKey {
        case propertyTypes
        case resourceTypes
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeResourceTypeSpecificationResultCodingKeys.self)
        if decoderContainer.contains(.propertyTypes)
        {
            self.propertyTypes = try decoderContainer.decode([String:PropertyTypes?]?.self, forKey: .propertyTypes)
        }
        if decoderContainer.contains(.resourceTypes)
        {
            self.resourceTypes = try decoderContainer.decode(ResourceTypes?.self, forKey: .resourceTypes)
        }
    }
}
public extension DescribeResourceTypeSpecificationResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeResourceTypeSpecificationResultCodingKeys.self)
        try encoderContainer.encode(propertyTypes, forKey: .propertyTypes)
        try encoderContainer.encode(resourceTypes, forKey: .resourceTypes)
    }
}
public class DescribeResourceTypeSpecificationResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeResourceTypeSpecificationResult?;

    enum DescribeResourceTypeSpecificationResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeResourceTypeSpecificationResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeResourceTypeSpecificationResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeResourceTypeSpecificationResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeResourceTypeSpecificationResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询支持的资源列表 
public class DescribeResourceTypeListResult:NSObject,JdCloudResult
{
    /// ResourceTypeList
    var resourceTypeList:[DescribeResourceTypeListItem?]?

    /// TotalCount
    var totalCount:Int64?



    public override init(){
        super.init()
    }

    enum DescribeResourceTypeListResultCodingKeys: String, CodingKey {
        case resourceTypeList
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeResourceTypeListResultCodingKeys.self)
        if decoderContainer.contains(.resourceTypeList)
        {
            self.resourceTypeList = try decoderContainer.decode([DescribeResourceTypeListItem?]?.self, forKey: .resourceTypeList)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int64?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeResourceTypeListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeResourceTypeListResultCodingKeys.self)
        try encoderContainer.encode(resourceTypeList, forKey: .resourceTypeList)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeResourceTypeListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeResourceTypeListResult?;

    enum DescribeResourceTypeListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeResourceTypeListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeResourceTypeListResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeResourceTypeListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeResourceTypeListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询支持的资源列表
public class DescribeResourceTypeListRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
    var pageSize:Int64?

    /// 产品线类型，比如 VM
    var product:String?

    /// 搜索的内容
    var search:String?




    enum DescribeResourceTypeListRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case product
        case search
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeResourceTypeListRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(product, forKey: .product)
        try encoderContainer.encode(search, forKey: .search)

    }
}

