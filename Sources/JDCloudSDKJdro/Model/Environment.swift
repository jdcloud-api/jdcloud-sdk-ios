/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  环境信息
@objc(Environment)
public class Environment:NSObject,Codable{
    /// 禁止回滚，默认false，即创建资源栈失败时回滚
    var disableRollback:Bool?
    /// 资源栈名称
    /// Required:true
    var name:String
    /// 自定义参数值map, 内容为键值对形式，key为参数，value为自定义参数值。Params中的参数值会覆盖模板文件中参数的默认值。
    var params:[String:String?]?
    /// 超时时间，单位分钟，范围10-180
    /// Required:true
    var timeout:Int64



    public  init(name:String,timeout:Int64){
             self.name = name
             self.timeout = timeout
    }

    enum EnvironmentCodingKeys: String, CodingKey {
        case disableRollback
        case name
        case params
        case timeout
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnvironmentCodingKeys.self)
        if decoderContainer.contains(.disableRollback)
        {
            self.disableRollback = try decoderContainer.decode(Bool?.self, forKey: .disableRollback)
        }
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        if decoderContainer.contains(.params)
        {
            self.params = try decoderContainer.decode([String:String?]?.self, forKey: .params)
        }
        self.timeout = try decoderContainer.decode(Int64.self, forKey: .timeout)
    }
}
public extension Environment{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnvironmentCodingKeys.self)
         try encoderContainer.encode(disableRollback, forKey: .disableRollback)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(params, forKey: .params)
         try encoderContainer.encode(timeout, forKey: .timeout)
    }
}
