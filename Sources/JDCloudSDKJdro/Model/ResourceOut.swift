/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  resourceOut
@objc(ResourceOut)
public class ResourceOut:NSObject,Codable{
    /// 资源运行操作
    var action:String?
    /// 创建时间
    var createTime:String?
    /// 删除策略
    var deletePolicy:String?
    /// 删除时间
    var deleteTime:String?
    /// 资源逻辑ID
    var logicId:String?
    /// 资源ID
    var physicalId:String?
    /// 地域信息
    var region:String?
    /// Snapshot信息，仅针对磁盘资源类型
    var snapshot:String?
    /// 资源栈ID
    var stackId:String?
    /// 资源运行状态
    var status:String?
    /// 资源运行状态原因
    var statusReason:String?
    /// 资源类型
    var type:String?
    /// 更新时间
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum ResourceOutCodingKeys: String, CodingKey {
        case action
        case createTime
        case deletePolicy
        case deleteTime
        case logicId
        case physicalId
        case region
        case snapshot
        case stackId
        case status
        case statusReason
        case type
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResourceOutCodingKeys.self)
        if decoderContainer.contains(.action)
        {
            self.action = try decoderContainer.decode(String?.self, forKey: .action)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.deletePolicy)
        {
            self.deletePolicy = try decoderContainer.decode(String?.self, forKey: .deletePolicy)
        }
        if decoderContainer.contains(.deleteTime)
        {
            self.deleteTime = try decoderContainer.decode(String?.self, forKey: .deleteTime)
        }
        if decoderContainer.contains(.logicId)
        {
            self.logicId = try decoderContainer.decode(String?.self, forKey: .logicId)
        }
        if decoderContainer.contains(.physicalId)
        {
            self.physicalId = try decoderContainer.decode(String?.self, forKey: .physicalId)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.snapshot)
        {
            self.snapshot = try decoderContainer.decode(String?.self, forKey: .snapshot)
        }
        if decoderContainer.contains(.stackId)
        {
            self.stackId = try decoderContainer.decode(String?.self, forKey: .stackId)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.statusReason)
        {
            self.statusReason = try decoderContainer.decode(String?.self, forKey: .statusReason)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(String?.self, forKey: .type)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension ResourceOut{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResourceOutCodingKeys.self)
         try encoderContainer.encode(action, forKey: .action)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(deletePolicy, forKey: .deletePolicy)
         try encoderContainer.encode(deleteTime, forKey: .deleteTime)
         try encoderContainer.encode(logicId, forKey: .logicId)
         try encoderContainer.encode(physicalId, forKey: .physicalId)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(snapshot, forKey: .snapshot)
         try encoderContainer.encode(stackId, forKey: .stackId)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(statusReason, forKey: .statusReason)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
