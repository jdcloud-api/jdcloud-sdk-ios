/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  changeSet
@objc(ChangeSet)
public class ChangeSet:NSObject,Codable{
    /// 更改集操作
    var action:String?
    /// 更改信息
    var changeInfo:String?
    /// changeset的详细信息
    var changeMap:[String:Change?]?
    /// 创建时间
    var createTime:String?
    /// 更改集描述
    var describe:String?
    /// Id
    var id:String?
    /// 是否执行
    var isRun:Int64?
    /// 更改集名称
    var name:String?
    /// 地域信息
    var region:String?
    /// 执行时间
    var runTime:String?
    /// 对应资源栈ID
    var stackId:String?
    /// 状态
    var status:String?
    /// 状态原因
    var statusReason:String?
    /// 对应模板ID
    var templateId:String?



    public override init(){
            super.init()
    }

    enum ChangeSetCodingKeys: String, CodingKey {
        case action
        case changeInfo
        case changeMap
        case createTime
        case describe
        case id
        case isRun
        case name
        case region
        case runTime
        case stackId
        case status
        case statusReason
        case templateId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ChangeSetCodingKeys.self)
        if decoderContainer.contains(.action)
        {
            self.action = try decoderContainer.decode(String?.self, forKey: .action)
        }
        if decoderContainer.contains(.changeInfo)
        {
            self.changeInfo = try decoderContainer.decode(String?.self, forKey: .changeInfo)
        }
        if decoderContainer.contains(.changeMap)
        {
            self.changeMap = try decoderContainer.decode([String:Change?]?.self, forKey: .changeMap)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.describe)
        {
            self.describe = try decoderContainer.decode(String?.self, forKey: .describe)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.isRun)
        {
            self.isRun = try decoderContainer.decode(Int64?.self, forKey: .isRun)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.runTime)
        {
            self.runTime = try decoderContainer.decode(String?.self, forKey: .runTime)
        }
        if decoderContainer.contains(.stackId)
        {
            self.stackId = try decoderContainer.decode(String?.self, forKey: .stackId)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.statusReason)
        {
            self.statusReason = try decoderContainer.decode(String?.self, forKey: .statusReason)
        }
        if decoderContainer.contains(.templateId)
        {
            self.templateId = try decoderContainer.decode(String?.self, forKey: .templateId)
        }
    }
}
public extension ChangeSet{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ChangeSetCodingKeys.self)
         try encoderContainer.encode(action, forKey: .action)
         try encoderContainer.encode(changeInfo, forKey: .changeInfo)
         try encoderContainer.encode(changeMap, forKey: .changeMap)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(describe, forKey: .describe)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(isRun, forKey: .isRun)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(runTime, forKey: .runTime)
         try encoderContainer.encode(stackId, forKey: .stackId)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(statusReason, forKey: .statusReason)
         try encoderContainer.encode(templateId, forKey: .templateId)
    }
}
