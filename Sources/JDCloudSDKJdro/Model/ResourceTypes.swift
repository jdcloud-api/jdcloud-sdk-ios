/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  资源类型定义
@objc(ResourceTypes)
public class ResourceTypes:NSObject,Codable{
    /// 资源输出参数定义
    var attributes:[String:ResourceAttribute?]?
    /// 资源描述
    var descriptionValue:String?
    /// 文档链接
    var documentation:String?
    /// 资源属性定义
    var properties:[String:PropertyTypeDefinition?]?



    public override init(){
            super.init()
    }

    enum ResourceTypesCodingKeys: String, CodingKey {
        case attributes
        case descriptionValue = "description"
        case documentation
        case properties
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResourceTypesCodingKeys.self)
        if decoderContainer.contains(.attributes)
        {
            self.attributes = try decoderContainer.decode([String:ResourceAttribute?]?.self, forKey: .attributes)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.documentation)
        {
            self.documentation = try decoderContainer.decode(String?.self, forKey: .documentation)
        }
        if decoderContainer.contains(.properties)
        {
            self.properties = try decoderContainer.decode([String:PropertyTypeDefinition?]?.self, forKey: .properties)
        }
    }
}
public extension ResourceTypes{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResourceTypesCodingKeys.self)
         try encoderContainer.encode(attributes, forKey: .attributes)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(documentation, forKey: .documentation)
         try encoderContainer.encode(properties, forKey: .properties)
    }
}
