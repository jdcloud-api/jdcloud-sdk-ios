/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Security Token Service
   Security Token Service API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
///  credentials
public class Credentials:NSObject,Codable{
    /// 临时accessKey
    var accessKey:String?
    /// 临时secretKey
    var secretKey:String?
    /// 临时安全令牌
    var sessionToken:String?
    /// 有效期
    var expiration:String?



    public override init(){
            super.init()
    }

    enum CredentialsCodingKeys: String, CodingKey {
        case accessKey
        case secretKey
        case sessionToken
        case expiration
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CredentialsCodingKeys.self)
        if decoderContainer.contains(.accessKey)
        {
            self.accessKey = try decoderContainer.decode(String?.self, forKey: .accessKey)
        }
        if decoderContainer.contains(.secretKey)
        {
            self.secretKey = try decoderContainer.decode(String?.self, forKey: .secretKey)
        }
        if decoderContainer.contains(.sessionToken)
        {
            self.sessionToken = try decoderContainer.decode(String?.self, forKey: .sessionToken)
        }
        if decoderContainer.contains(.expiration)
        {
            self.expiration = try decoderContainer.decode(String?.self, forKey: .expiration)
        }
    }
}
public extension Credentials{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CredentialsCodingKeys.self)
         try encoderContainer.encode(accessKey, forKey: .accessKey)
         try encoderContainer.encode(secretKey, forKey: .secretKey)
         try encoderContainer.encode(sessionToken, forKey: .sessionToken)
         try encoderContainer.encode(expiration, forKey: .expiration)
    }
}
///  assumedRoleService
public class AssumedRoleService:NSObject,Codable{
    /// 代入角色id
    var assumedServiceRoleId:String?
    /// 代入角色名
    var assumedServiceRoleName:String?



    public override init(){
            super.init()
    }

    enum AssumedRoleServiceCodingKeys: String, CodingKey {
        case assumedServiceRoleId
        case assumedServiceRoleName
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssumedRoleServiceCodingKeys.self)
        if decoderContainer.contains(.assumedServiceRoleId)
        {
            self.assumedServiceRoleId = try decoderContainer.decode(String?.self, forKey: .assumedServiceRoleId)
        }
        if decoderContainer.contains(.assumedServiceRoleName)
        {
            self.assumedServiceRoleName = try decoderContainer.decode(String?.self, forKey: .assumedServiceRoleName)
        }
    }
}
public extension AssumedRoleService{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssumedRoleServiceCodingKeys.self)
         try encoderContainer.encode(assumedServiceRoleId, forKey: .assumedServiceRoleId)
         try encoderContainer.encode(assumedServiceRoleName, forKey: .assumedServiceRoleName)
    }
}
///  assumeServiceRoleInfo
public class AssumeServiceRoleInfo:NSObject,Codable{
    /// 角色类型, 1-服务相关角色，2-服务角色
    /// Required:true
    var roleType:Int
    /// 令牌有效期，单位秒，默认3600
    var durationSeconds:Int?



    public  init(roleType:Int){
             self.roleType = roleType
    }

    enum AssumeServiceRoleInfoCodingKeys: String, CodingKey {
        case roleType
        case durationSeconds
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssumeServiceRoleInfoCodingKeys.self)
        self.roleType = try decoderContainer.decode(Int.self, forKey: .roleType)
        if decoderContainer.contains(.durationSeconds)
        {
            self.durationSeconds = try decoderContainer.decode(Int?.self, forKey: .durationSeconds)
        }
    }
}
public extension AssumeServiceRoleInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssumeServiceRoleInfoCodingKeys.self)
         try encoderContainer.encode(roleType, forKey: .roleType)
         try encoderContainer.encode(durationSeconds, forKey: .durationSeconds)
    }
}
///  assumeRoleInfo
public class AssumeRoleInfo:NSObject,Codable{
    /// 角色资源标识(jrn)
    /// Required:true
    var roleJrn:String
    /// 角色会话名称
    /// Required:true
    var roleSessionName:String
    /// 临时凭证有效期，单位秒，取值范围：3600~您所扮演的角色设置的maxSessionDuration，默认3600
    var durationSeconds:Int?



    public  init(roleJrn:String,roleSessionName:String){
             self.roleJrn = roleJrn
             self.roleSessionName = roleSessionName
    }

    enum AssumeRoleInfoCodingKeys: String, CodingKey {
        case roleJrn
        case roleSessionName
        case durationSeconds
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssumeRoleInfoCodingKeys.self)
        self.roleJrn = try decoderContainer.decode(String.self, forKey: .roleJrn)
        self.roleSessionName = try decoderContainer.decode(String.self, forKey: .roleSessionName)
        if decoderContainer.contains(.durationSeconds)
        {
            self.durationSeconds = try decoderContainer.decode(Int?.self, forKey: .durationSeconds)
        }
    }
}
public extension AssumeRoleInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssumeRoleInfoCodingKeys.self)
         try encoderContainer.encode(roleJrn, forKey: .roleJrn)
         try encoderContainer.encode(roleSessionName, forKey: .roleSessionName)
         try encoderContainer.encode(durationSeconds, forKey: .durationSeconds)
    }
}
///  assumedRoleUser
public class AssumedRoleUser:NSObject,Codable{
    /// 代入角色id
    var assumedRoleId:String?
    /// 京东云资源标识(jrn)
    var jrn:String?



    public override init(){
            super.init()
    }

    enum AssumedRoleUserCodingKeys: String, CodingKey {
        case assumedRoleId
        case jrn
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssumedRoleUserCodingKeys.self)
        if decoderContainer.contains(.assumedRoleId)
        {
            self.assumedRoleId = try decoderContainer.decode(String?.self, forKey: .assumedRoleId)
        }
        if decoderContainer.contains(.jrn)
        {
            self.jrn = try decoderContainer.decode(String?.self, forKey: .jrn)
        }
    }
}
public extension AssumedRoleUser{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssumedRoleUserCodingKeys.self)
         try encoderContainer.encode(assumedRoleId, forKey: .assumedRoleId)
         try encoderContainer.encode(jrn, forKey: .jrn)
    }
}
