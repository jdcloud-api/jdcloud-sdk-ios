/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  credentials
@objc(Credentials)
public class Credentials:NSObject,Codable{
    /// 临时accessKey
    var accessKey:String?
    /// 临时secretKey
    var secretKey:String?
    /// 临时安全令牌
    var sessionToken:String?
    /// 有效期
    var expiration:String?



    public override init(){
            super.init()
    }

    enum CredentialsCodingKeys: String, CodingKey {
        case accessKey
        case secretKey
        case sessionToken
        case expiration
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CredentialsCodingKeys.self)
        if decoderContainer.contains(.accessKey)
        {
            self.accessKey = try decoderContainer.decode(String?.self, forKey: .accessKey)
        }
        if decoderContainer.contains(.secretKey)
        {
            self.secretKey = try decoderContainer.decode(String?.self, forKey: .secretKey)
        }
        if decoderContainer.contains(.sessionToken)
        {
            self.sessionToken = try decoderContainer.decode(String?.self, forKey: .sessionToken)
        }
        if decoderContainer.contains(.expiration)
        {
            self.expiration = try decoderContainer.decode(String?.self, forKey: .expiration)
        }
    }
}
public extension Credentials{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CredentialsCodingKeys.self)
         try encoderContainer.encode(accessKey, forKey: .accessKey)
         try encoderContainer.encode(secretKey, forKey: .secretKey)
         try encoderContainer.encode(sessionToken, forKey: .sessionToken)
         try encoderContainer.encode(expiration, forKey: .expiration)
    }
}
