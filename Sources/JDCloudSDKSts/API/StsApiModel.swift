/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Security Token Service
   Security Token Service API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  扮演用户角色，获取临时凭证
public class AssumeRoleRequest:JdCloudRequest
{
    /// 扮演角色参数
    var assumeRoleInfo:AssumeRoleInfo


    public init(regionId: String,assumeRoleInfo:AssumeRoleInfo){
        self.assumeRoleInfo = assumeRoleInfo
        super.init(regionId: regionId)
    }


    enum AssumeRoleRequestRequestCodingKeys: String, CodingKey {
        case assumeRoleInfo
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssumeRoleRequestRequestCodingKeys.self)
        try encoderContainer.encode(assumeRoleInfo, forKey: .assumeRoleInfo)

    }
}

public class AssumeRoleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AssumeRoleResult?;

    enum AssumeRoleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssumeRoleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AssumeRoleResult?.self, forKey: .result) ?? nil
    }
}

public extension AssumeRoleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssumeRoleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 扮演用户角色，获取临时凭证 
public class AssumeRoleResult:NSObject,JdCloudResult
{
    /// 凭证信息
    var credentials:Credentials?



    public override init(){
        super.init()
    }

    enum AssumeRoleResultCodingKeys: String, CodingKey {
        case credentials
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssumeRoleResultCodingKeys.self)
        if decoderContainer.contains(.credentials)
        {
            self.credentials = try decoderContainer.decode(Credentials?.self, forKey: .credentials)
        }
    }
}
public extension AssumeRoleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssumeRoleResultCodingKeys.self)
        try encoderContainer.encode(credentials, forKey: .credentials)
    }
}
