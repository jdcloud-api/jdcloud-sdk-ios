/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   分布式云物理服务器
   分布式云物理服务器地域操作相关的接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon


///  删除别名IP
public class DeleteAliasIpRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 别名IP ID
    var aliasIpId:String


    public init(regionId: String,aliasIpId:String){
        self.aliasIpId = aliasIpId
        super.init(regionId: regionId)
    }


    enum DeleteAliasIpRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case aliasIpId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAliasIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(aliasIpId, forKey: .aliasIpId)

    }
}

/// 查询别名IP列表 
public class DescribeAliasIpsResult:NSObject,JdCloudResult
{
    /// AliasIps
    var aliasIps:[AliasIp?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeAliasIpsResultCodingKeys: String, CodingKey {
        case aliasIps
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAliasIpsResultCodingKeys.self)
        if decoderContainer.contains(.aliasIps)
        {
            self.aliasIps = try decoderContainer.decode([AliasIp?]?.self, forKey: .aliasIps)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeAliasIpsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAliasIpsResultCodingKeys.self)
        try encoderContainer.encode(aliasIps, forKey: .aliasIps)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  查询别名IP列表
public class DescribeAliasIpsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 子网ID
    var subnetId:String?

    /// 实例ID
    var instanceId:String?

    /// CIDR段，模糊搜索
    var cidr:String?




    enum DescribeAliasIpsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case subnetId
        case instanceId
        case cidr
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAliasIpsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(subnetId, forKey: .subnetId)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(cidr, forKey: .cidr)

    }
}


///  添加别名IP
public class CreateAliasIpRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 别名IP配置
    var aliasIpSpec:AliasIpSpec


    public init(regionId: String,aliasIpSpec:AliasIpSpec){
        self.aliasIpSpec = aliasIpSpec
        super.init(regionId: regionId)
    }


    enum CreateAliasIpRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case aliasIpSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAliasIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(aliasIpSpec, forKey: .aliasIpSpec)

    }
}

public class CreateAliasIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateAliasIpResult?;

    enum CreateAliasIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAliasIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateAliasIpResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateAliasIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAliasIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeAliasIpsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAliasIpsResult?;

    enum DescribeAliasIpsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAliasIpsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAliasIpsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAliasIpsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAliasIpsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteAliasIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteAliasIpResult?;

    enum DeleteAliasIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteAliasIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteAliasIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteAliasIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAliasIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加别名IP 
public class CreateAliasIpResult:NSObject,JdCloudResult
{
    /// SuccessList
    var successList:[AliasIpSuccessInfo?]?

    /// ErrorList
    var errorList:[AliasIpErrorInfo?]?



    public override init(){
        super.init()
    }

    enum CreateAliasIpResultCodingKeys: String, CodingKey {
        case successList
        case errorList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAliasIpResultCodingKeys.self)
        if decoderContainer.contains(.successList)
        {
            self.successList = try decoderContainer.decode([AliasIpSuccessInfo?]?.self, forKey: .successList)
        }
        if decoderContainer.contains(.errorList)
        {
            self.errorList = try decoderContainer.decode([AliasIpErrorInfo?]?.self, forKey: .errorList)
        }
    }
}
public extension CreateAliasIpResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAliasIpResultCodingKeys.self)
        try encoderContainer.encode(successList, forKey: .successList)
        try encoderContainer.encode(errorList, forKey: .errorList)
    }
}
/// 删除别名IP 
public class DeleteAliasIpResult:NSObject,JdCloudResult
{
    /// 删除操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DeleteAliasIpResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteAliasIpResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DeleteAliasIpResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAliasIpResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class CreateSubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSubnetResult?;

    enum CreateSubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询子网详情 
public class DescribeSubnetResult:NSObject,JdCloudResult
{
    /// 子网详细信息
    var subnet:Subnet?



    public override init(){
        super.init()
    }

    enum DescribeSubnetResultCodingKeys: String, CodingKey {
        case subnet
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubnetResultCodingKeys.self)
        if decoderContainer.contains(.subnet)
        {
            self.subnet = try decoderContainer.decode(Subnet?.self, forKey: .subnet)
        }
    }
}
public extension DescribeSubnetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetResultCodingKeys.self)
        try encoderContainer.encode(subnet, forKey: .subnet)
    }
}
/// 修改子网 
public class ModifySubnetResult:NSObject,JdCloudResult
{
    /// 子网详细信息
    var subnet:Subnet?



    public override init(){
        super.init()
    }

    enum ModifySubnetResultCodingKeys: String, CodingKey {
        case subnet
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifySubnetResultCodingKeys.self)
        if decoderContainer.contains(.subnet)
        {
            self.subnet = try decoderContainer.decode(Subnet?.self, forKey: .subnet)
        }
    }
}
public extension ModifySubnetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifySubnetResultCodingKeys.self)
        try encoderContainer.encode(subnet, forKey: .subnet)
    }
}

///  创建子网
public class CreateSubnetRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 子网配置
    var subnetSpec:SubnetSpec


    public init(regionId: String,subnetSpec:SubnetSpec){
        self.subnetSpec = subnetSpec
        super.init(regionId: regionId)
    }


    enum CreateSubnetRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case subnetSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(subnetSpec, forKey: .subnetSpec)

    }
}

public class ModifySubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifySubnetResult?;

    enum ModifySubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifySubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifySubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifySubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifySubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改子网
public class ModifySubnetRequest:JdCloudRequest
{
    /// 名称
    var name:String?

    /// 描述
    var descriptionValue:String?

    /// 子网ID
    var subnetId:String


    public init(regionId: String,subnetId:String){
        self.subnetId = subnetId
        super.init(regionId: regionId)
    }


    enum ModifySubnetRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case subnetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifySubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(subnetId, forKey: .subnetId)

    }
}


///  查询子网详情
public class DescribeSubnetRequest:JdCloudRequest
{
    /// 子网ID
    var subnetId:String


    public init(regionId: String,subnetId:String){
        self.subnetId = subnetId
        super.init(regionId: regionId)
    }


    enum DescribeSubnetRequestRequestCodingKeys: String, CodingKey {
        case subnetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(subnetId, forKey: .subnetId)

    }
}

public class DeleteSubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSubnetResult?;

    enum DeleteSubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除子网 
public class DeleteSubnetResult:NSObject,JdCloudResult
{
    /// 删除操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DeleteSubnetResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSubnetResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DeleteSubnetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubnetResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class DescribeSubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSubnetResult?;

    enum DescribeSubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询子网列表
public class DescribeSubnetsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 可用区，精确匹配
    var az:String?

    /// 子网名称
    var name:String?

    /// 私有网络ID，精确匹配
    var vpcId:String?

    /// subnetId - 子网ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeSubnetsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case az
        case name
        case vpcId
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(az, forKey: .az)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  删除子网
public class DeleteSubnetRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 子网ID
    var subnetId:String


    public init(regionId: String,subnetId:String){
        self.subnetId = subnetId
        super.init(regionId: regionId)
    }


    enum DeleteSubnetRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case subnetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(subnetId, forKey: .subnetId)

    }
}

/// 创建子网 
public class CreateSubnetResult:NSObject,JdCloudResult
{
    /// 子网ID
    var subnetId:String?



    public override init(){
        super.init()
    }

    enum CreateSubnetResultCodingKeys: String, CodingKey {
        case subnetId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubnetResultCodingKeys.self)
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
    }
}
public extension CreateSubnetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubnetResultCodingKeys.self)
        try encoderContainer.encode(subnetId, forKey: .subnetId)
    }
}
/// 查询子网列表 
public class DescribeSubnetsResult:NSObject,JdCloudResult
{
    /// Subnets
    var subnets:[Subnet?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeSubnetsResultCodingKeys: String, CodingKey {
        case subnets
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubnetsResultCodingKeys.self)
        if decoderContainer.contains(.subnets)
        {
            self.subnets = try decoderContainer.decode([Subnet?]?.self, forKey: .subnets)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeSubnetsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetsResultCodingKeys.self)
        try encoderContainer.encode(subnets, forKey: .subnets)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeSubnetsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSubnetsResult?;

    enum DescribeSubnetsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubnetsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSubnetsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSubnetsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除弹性公网IP
      ///       /// 
public class DeleteelasticIpRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 弹性公网IPID
    var elasticIpId:String


    public init(regionId: String,elasticIpId:String){
        self.elasticIpId = elasticIpId
        super.init(regionId: regionId)
    }


    enum DeleteelasticIpRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case elasticIpId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteelasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)

    }
}

public class DescribeElasticIpStockResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeElasticIpStockResult?;

    enum DescribeElasticIpStockResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpStockResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeElasticIpStockResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeElasticIpStockResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpStockResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteelasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteelasticIpResult?;

    enum DeleteelasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteelasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteelasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteelasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteelasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改弹性公网IP带宽
      ///       /// 
public class ModifyElasticIpBandwidthRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 带宽，单位Mbps，取值范围[1,10240]
    var bandwidth:Int

    /// 额外上行带宽，单位Mbps，取值范围[0,10240]
    var extraUplinkBandwidth:Int?

    /// 弹性公网IPID
    var elasticIpId:String


    public init(regionId: String,bandwidth:Int,elasticIpId:String){
        self.bandwidth = bandwidth
        self.elasticIpId = elasticIpId
        super.init(regionId: regionId)
    }


    enum ModifyElasticIpBandwidthRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case bandwidth
        case extraUplinkBandwidth
        case elasticIpId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyElasticIpBandwidthRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(bandwidth, forKey: .bandwidth)
        try encoderContainer.encode(extraUplinkBandwidth, forKey: .extraUplinkBandwidth)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)

    }
}


///  查询弹性公网IP列表&lt;br/&gt;
      ///       /// 支持分页查询，默认每页20条&lt;br/&gt;
      ///       /// 
public class DescribeElasticIpsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 弹性公网IP状态，取值范围：associate、disassociate
    var status:String?

    /// elasticIpId - 弹性公网IPID，精确匹配，支持多个&lt;br/&gt;
      /// elasticIp - 弹性公网IP，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeElasticIpsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case status
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 查询弹性公网IP库存 
public class DescribeElasticIpStockResult:NSObject,JdCloudResult
{
    /// 地域
    var region:String?

    /// 可用弹性公网IP库存
    var available:Int?

    /// 可用带宽库存
    var availableBandwidth:Int?

    /// 可用额外上行带宽库存
    var availableExtraUplinkBandwidth:Int?



    public override init(){
        super.init()
    }

    enum DescribeElasticIpStockResultCodingKeys: String, CodingKey {
        case region
        case available
        case availableBandwidth
        case availableExtraUplinkBandwidth
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpStockResultCodingKeys.self)
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.available)
        {
            self.available = try decoderContainer.decode(Int?.self, forKey: .available)
        }
        if decoderContainer.contains(.availableBandwidth)
        {
            self.availableBandwidth = try decoderContainer.decode(Int?.self, forKey: .availableBandwidth)
        }
        if decoderContainer.contains(.availableExtraUplinkBandwidth)
        {
            self.availableExtraUplinkBandwidth = try decoderContainer.decode(Int?.self, forKey: .availableExtraUplinkBandwidth)
        }
    }
}
public extension DescribeElasticIpStockResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpStockResultCodingKeys.self)
        try encoderContainer.encode(region, forKey: .region)
        try encoderContainer.encode(available, forKey: .available)
        try encoderContainer.encode(availableBandwidth, forKey: .availableBandwidth)
        try encoderContainer.encode(availableExtraUplinkBandwidth, forKey: .availableExtraUplinkBandwidth)
    }
}
/// 修改弹性公网IP带宽
      ///       ///  
public class ModifyElasticIpBandwidthResult:NSObject,JdCloudResult
{
    /// 修改带宽是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum ModifyElasticIpBandwidthResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyElasticIpBandwidthResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension ModifyElasticIpBandwidthResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyElasticIpBandwidthResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  申请弹性公网IP
      ///       /// 
public class ApplyElasticIpsRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 弹性公网IP配置
    var elasticIpSpec:ElasticIpSpec


    public init(regionId: String,elasticIpSpec:ElasticIpSpec){
        self.elasticIpSpec = elasticIpSpec
        super.init(regionId: regionId)
    }


    enum ApplyElasticIpsRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case elasticIpSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ApplyElasticIpsRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(elasticIpSpec, forKey: .elasticIpSpec)

    }
}

/// 查询弹性公网IP详情 
public class DescribeElasticIpResult:NSObject,JdCloudResult
{
    /// 弹性公网IP详细信息
    var elasticIp:ElasticIp?



    public override init(){
        super.init()
    }

    enum DescribeElasticIpResultCodingKeys: String, CodingKey {
        case elasticIp
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpResultCodingKeys.self)
        if decoderContainer.contains(.elasticIp)
        {
            self.elasticIp = try decoderContainer.decode(ElasticIp?.self, forKey: .elasticIp)
        }
    }
}
public extension DescribeElasticIpResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpResultCodingKeys.self)
        try encoderContainer.encode(elasticIp, forKey: .elasticIp)
    }
}
/// 查询弹性公网IP列表&lt;br/&gt;
      ///       /// 支持分页查询，默认每页20条&lt;br/&gt;
      ///       ///  
public class DescribeElasticIpsResult:NSObject,JdCloudResult
{
    /// ElasticIps
    var elasticIps:[ElasticIp?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeElasticIpsResultCodingKeys: String, CodingKey {
        case elasticIps
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpsResultCodingKeys.self)
        if decoderContainer.contains(.elasticIps)
        {
            self.elasticIps = try decoderContainer.decode([ElasticIp?]?.self, forKey: .elasticIps)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeElasticIpsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpsResultCodingKeys.self)
        try encoderContainer.encode(elasticIps, forKey: .elasticIps)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 删除弹性公网IP
      ///       ///  
public class DeleteelasticIpResult:NSObject,JdCloudResult
{
    /// 删除操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DeleteelasticIpResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteelasticIpResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DeleteelasticIpResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteelasticIpResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
/// 申请弹性公网IP
      ///       ///  
public class ApplyElasticIpsResult:NSObject,JdCloudResult
{
    /// 弹性公网IPID
    var elasticIpIds:[String?]?



    public override init(){
        super.init()
    }

    enum ApplyElasticIpsResultCodingKeys: String, CodingKey {
        case elasticIpIds
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ApplyElasticIpsResultCodingKeys.self)
        if decoderContainer.contains(.elasticIpIds)
        {
            self.elasticIpIds = try decoderContainer.decode([String?]?.self, forKey: .elasticIpIds)
        }
    }
}
public extension ApplyElasticIpsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ApplyElasticIpsResultCodingKeys.self)
        try encoderContainer.encode(elasticIpIds, forKey: .elasticIpIds)
    }
}
public class ModifyElasticIpBandwidthResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyElasticIpBandwidthResult?;

    enum ModifyElasticIpBandwidthResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyElasticIpBandwidthResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyElasticIpBandwidthResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyElasticIpBandwidthResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyElasticIpBandwidthResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询弹性公网IP详情
public class DescribeElasticIpRequest:JdCloudRequest
{
    /// 弹性公网IPID
    var elasticIpId:String


    public init(regionId: String,elasticIpId:String){
        self.elasticIpId = elasticIpId
        super.init(regionId: regionId)
    }


    enum DescribeElasticIpRequestRequestCodingKeys: String, CodingKey {
        case elasticIpId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)

    }
}

public class DescribeElasticIpsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeElasticIpsResult?;

    enum DescribeElasticIpsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeElasticIpsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeElasticIpsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询弹性公网IP库存
public class DescribeElasticIpStockRequest:JdCloudRequest
{
}

public class DescribeElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeElasticIpResult?;

    enum DescribeElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ApplyElasticIpsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ApplyElasticIpsResult?;

    enum ApplyElasticIpsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ApplyElasticIpsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ApplyElasticIpsResult?.self, forKey: .result) ?? nil
    }
}

public extension ApplyElasticIpsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ApplyElasticIpsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询链路类型列表 
public class DescribeLineTypesResult:NSObject,JdCloudResult
{
    /// LineTypes
    var lineTypes:[LineType?]?



    public override init(){
        super.init()
    }

    enum DescribeLineTypesResultCodingKeys: String, CodingKey {
        case lineTypes
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLineTypesResultCodingKeys.self)
        if decoderContainer.contains(.lineTypes)
        {
            self.lineTypes = try decoderContainer.decode([LineType?]?.self, forKey: .lineTypes)
        }
    }
}
public extension DescribeLineTypesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLineTypesResultCodingKeys.self)
        try encoderContainer.encode(lineTypes, forKey: .lineTypes)
    }
}
public class DescribeLineTypesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLineTypesResult?;

    enum DescribeLineTypesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLineTypesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLineTypesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLineTypesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLineTypesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询链路类型列表
public class DescribeLineTypesRequest:JdCloudRequest
{
}

public class CreateKeypairsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateKeypairsResult?;

    enum CreateKeypairsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateKeypairsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateKeypairsResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateKeypairsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeypairsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询密钥对详情 
public class DescribeKeypairResult:NSObject,JdCloudResult
{
    /// 密钥对详细信息
    var server:Keypair?



    public override init(){
        super.init()
    }

    enum DescribeKeypairResultCodingKeys: String, CodingKey {
        case server
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeKeypairResultCodingKeys.self)
        if decoderContainer.contains(.server)
        {
            self.server = try decoderContainer.decode(Keypair?.self, forKey: .server)
        }
    }
}
public extension DescribeKeypairResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeypairResultCodingKeys.self)
        try encoderContainer.encode(server, forKey: .server)
    }
}
/// 创建密钥对 
public class CreateKeypairsResult:NSObject,JdCloudResult
{
    /// 密钥对id
    var keypairId:String?

    /// 地域
    var region:String?

    /// 密钥对名称
    var name:String?

    /// 公钥
    var publicKey:String?

    /// 指纹
    var fingerPrint:String?

    /// 创建时间
    var createTime:String?

    /// 更新时间
    var updateTime:String?

    /// 私钥
    var privateKey:String?



    public override init(){
        super.init()
    }

    enum CreateKeypairsResultCodingKeys: String, CodingKey {
        case keypairId
        case region
        case name
        case publicKey
        case fingerPrint
        case createTime
        case updateTime
        case privateKey
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateKeypairsResultCodingKeys.self)
        if decoderContainer.contains(.keypairId)
        {
            self.keypairId = try decoderContainer.decode(String?.self, forKey: .keypairId)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.publicKey)
        {
            self.publicKey = try decoderContainer.decode(String?.self, forKey: .publicKey)
        }
        if decoderContainer.contains(.fingerPrint)
        {
            self.fingerPrint = try decoderContainer.decode(String?.self, forKey: .fingerPrint)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
        if decoderContainer.contains(.privateKey)
        {
            self.privateKey = try decoderContainer.decode(String?.self, forKey: .privateKey)
        }
    }
}
public extension CreateKeypairsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeypairsResultCodingKeys.self)
        try encoderContainer.encode(keypairId, forKey: .keypairId)
        try encoderContainer.encode(region, forKey: .region)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(publicKey, forKey: .publicKey)
        try encoderContainer.encode(fingerPrint, forKey: .fingerPrint)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(updateTime, forKey: .updateTime)
        try encoderContainer.encode(privateKey, forKey: .privateKey)
    }
}
public class DescribeKeypairResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeKeypairResult?;

    enum DescribeKeypairResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeKeypairResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeKeypairResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeKeypairResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeypairResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询密钥对列表
public class DescribeKeypairsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 密钥对名称
    var name:String?

    /// keypairId  - 密钥对ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeKeypairsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case name
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeypairsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  查询密钥对详情
public class DescribeKeypairRequest:JdCloudRequest
{
    /// 密钥对ID
    var keypairId:String


    public init(regionId: String,keypairId:String){
        self.keypairId = keypairId
        super.init(regionId: regionId)
    }


    enum DescribeKeypairRequestRequestCodingKeys: String, CodingKey {
        case keypairId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeypairRequestRequestCodingKeys.self)
        try encoderContainer.encode(keypairId, forKey: .keypairId)

    }
}

public class DescribeKeypairsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeKeypairsResult?;

    enum DescribeKeypairsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeKeypairsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeKeypairsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeKeypairsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeypairsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  导入密钥对
public class ImportKeypairsRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 密钥对名称
    var name:String

    /// 公钥
    var publicKey:String


    public init(regionId: String,name:String,publicKey:String){
        self.name = name
        self.publicKey = publicKey
        super.init(regionId: regionId)
    }


    enum ImportKeypairsRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case name
        case publicKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportKeypairsRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(publicKey, forKey: .publicKey)

    }
}


///  创建密钥对
public class CreateKeypairsRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 密钥对名称
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum CreateKeypairsRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeypairsRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(name, forKey: .name)

    }
}

/// 删除密钥对 
public class DeleteKeypairsResult:NSObject,JdCloudResult
{
    /// 删除操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DeleteKeypairsResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteKeypairsResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DeleteKeypairsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteKeypairsResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
/// 查询密钥对列表 
public class DescribeKeypairsResult:NSObject,JdCloudResult
{
    /// Servers
    var servers:[Keypair?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeKeypairsResultCodingKeys: String, CodingKey {
        case servers
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeKeypairsResultCodingKeys.self)
        if decoderContainer.contains(.servers)
        {
            self.servers = try decoderContainer.decode([Keypair?]?.self, forKey: .servers)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeKeypairsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeypairsResultCodingKeys.self)
        try encoderContainer.encode(servers, forKey: .servers)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 导入密钥对 
public class ImportKeypairsResult:NSObject,JdCloudResult
{
    /// 密钥对id
    var keypairId:String?

    /// 地域
    var region:String?

    /// 密钥对名称
    var name:String?

    /// 公钥
    var publicKey:String?

    /// 指纹
    var fingerPrint:String?

    /// 创建时间
    var createTime:String?

    /// 更新时间
    var updateTime:String?



    public override init(){
        super.init()
    }

    enum ImportKeypairsResultCodingKeys: String, CodingKey {
        case keypairId
        case region
        case name
        case publicKey
        case fingerPrint
        case createTime
        case updateTime
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImportKeypairsResultCodingKeys.self)
        if decoderContainer.contains(.keypairId)
        {
            self.keypairId = try decoderContainer.decode(String?.self, forKey: .keypairId)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.publicKey)
        {
            self.publicKey = try decoderContainer.decode(String?.self, forKey: .publicKey)
        }
        if decoderContainer.contains(.fingerPrint)
        {
            self.fingerPrint = try decoderContainer.decode(String?.self, forKey: .fingerPrint)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension ImportKeypairsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportKeypairsResultCodingKeys.self)
        try encoderContainer.encode(keypairId, forKey: .keypairId)
        try encoderContainer.encode(region, forKey: .region)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(publicKey, forKey: .publicKey)
        try encoderContainer.encode(fingerPrint, forKey: .fingerPrint)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
public class DeleteKeypairsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteKeypairsResult?;

    enum DeleteKeypairsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteKeypairsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteKeypairsResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteKeypairsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteKeypairsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除密钥对
public class DeleteKeypairsRequest:JdCloudRequest
{
    /// 密钥对ID
    var keypairId:String


    public init(regionId: String,keypairId:String){
        self.keypairId = keypairId
        super.init(regionId: regionId)
    }


    enum DeleteKeypairsRequestRequestCodingKeys: String, CodingKey {
        case keypairId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteKeypairsRequestRequestCodingKeys.self)
        try encoderContainer.encode(keypairId, forKey: .keypairId)

    }
}

public class ImportKeypairsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ImportKeypairsResult?;

    enum ImportKeypairsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImportKeypairsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ImportKeypairsResult?.self, forKey: .result) ?? nil
    }
}

public extension ImportKeypairsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportKeypairsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除次要CIDR
public class DeleteSecondaryCidrRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 次要CIDR ID
    var secondaryCidrId:String


    public init(regionId: String,secondaryCidrId:String){
        self.secondaryCidrId = secondaryCidrId
        super.init(regionId: regionId)
    }


    enum DeleteSecondaryCidrRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case secondaryCidrId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecondaryCidrRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(secondaryCidrId, forKey: .secondaryCidrId)

    }
}

/// 查询次要CIDR列表 
public class DescribeSecondaryCidrsResult:NSObject,JdCloudResult
{
    /// SecondaryCidrs
    var secondaryCidrs:[SecondaryCidr?]?



    public override init(){
        super.init()
    }

    enum DescribeSecondaryCidrsResultCodingKeys: String, CodingKey {
        case secondaryCidrs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecondaryCidrsResultCodingKeys.self)
        if decoderContainer.contains(.secondaryCidrs)
        {
            self.secondaryCidrs = try decoderContainer.decode([SecondaryCidr?]?.self, forKey: .secondaryCidrs)
        }
    }
}
public extension DescribeSecondaryCidrsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecondaryCidrsResultCodingKeys.self)
        try encoderContainer.encode(secondaryCidrs, forKey: .secondaryCidrs)
    }
}
public class DeleteSecondaryCidrResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSecondaryCidrResult?;

    enum DeleteSecondaryCidrResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSecondaryCidrResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSecondaryCidrResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSecondaryCidrResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecondaryCidrResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateSecondaryCidrResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSecondaryCidrResult?;

    enum CreateSecondaryCidrResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSecondaryCidrResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSecondaryCidrResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSecondaryCidrResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecondaryCidrResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除次要CIDR 
public class DeleteSecondaryCidrResult:NSObject,JdCloudResult
{
    /// 删除操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DeleteSecondaryCidrResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSecondaryCidrResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DeleteSecondaryCidrResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecondaryCidrResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  添加次要CIDR
public class CreateSecondaryCidrRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 次要cidr配置
    var secondaryCidrSpec:SecondaryCidrSpec


    public init(regionId: String,secondaryCidrSpec:SecondaryCidrSpec){
        self.secondaryCidrSpec = secondaryCidrSpec
        super.init(regionId: regionId)
    }


    enum CreateSecondaryCidrRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case secondaryCidrSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecondaryCidrRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(secondaryCidrSpec, forKey: .secondaryCidrSpec)

    }
}

public class DescribeSecondaryCidrsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSecondaryCidrsResult?;

    enum DescribeSecondaryCidrsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecondaryCidrsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSecondaryCidrsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSecondaryCidrsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecondaryCidrsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加次要CIDR 
public class CreateSecondaryCidrResult:NSObject,JdCloudResult
{
    /// 次要cidr的ID
    var secondaryCidrId:String?



    public override init(){
        super.init()
    }

    enum CreateSecondaryCidrResultCodingKeys: String, CodingKey {
        case secondaryCidrId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSecondaryCidrResultCodingKeys.self)
        if decoderContainer.contains(.secondaryCidrId)
        {
            self.secondaryCidrId = try decoderContainer.decode(String?.self, forKey: .secondaryCidrId)
        }
    }
}
public extension CreateSecondaryCidrResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecondaryCidrResultCodingKeys.self)
        try encoderContainer.encode(secondaryCidrId, forKey: .secondaryCidrId)
    }
}

///  查询次要CIDR列表
public class DescribeSecondaryCidrsRequest:JdCloudRequest
{
    /// 子网ID
    var subnetId:String


    public init(regionId: String,subnetId:String){
        self.subnetId = subnetId
        super.init(regionId: regionId)
    }


    enum DescribeSecondaryCidrsRequestRequestCodingKeys: String, CodingKey {
        case subnetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecondaryCidrsRequestRequestCodingKeys.self)
        try encoderContainer.encode(subnetId, forKey: .subnetId)

    }
}

/// 查询单个分布式云物理服务器硬件监控信息 
public class DescribeInstanceStatusResult:NSObject,JdCloudResult
{
    /// CPU状态是否正常
    var cpus:Bool?

    /// 内存状态是否正常
    var mems:Bool?

    /// 硬盘状态是否正常
    var disks:Bool?

    /// 网卡状态是否正常
    var nics:Bool?



    public override init(){
        super.init()
    }

    enum DescribeInstanceStatusResultCodingKeys: String, CodingKey {
        case cpus
        case mems
        case disks
        case nics
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceStatusResultCodingKeys.self)
        if decoderContainer.contains(.cpus)
        {
            self.cpus = try decoderContainer.decode(Bool?.self, forKey: .cpus)
        }
        if decoderContainer.contains(.mems)
        {
            self.mems = try decoderContainer.decode(Bool?.self, forKey: .mems)
        }
        if decoderContainer.contains(.disks)
        {
            self.disks = try decoderContainer.decode(Bool?.self, forKey: .disks)
        }
        if decoderContainer.contains(.nics)
        {
            self.nics = try decoderContainer.decode(Bool?.self, forKey: .nics)
        }
    }
}
public extension DescribeInstanceStatusResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceStatusResultCodingKeys.self)
        try encoderContainer.encode(cpus, forKey: .cpus)
        try encoderContainer.encode(mems, forKey: .mems)
        try encoderContainer.encode(disks, forKey: .disks)
        try encoderContainer.encode(nics, forKey: .nics)
    }
}

///  查询分布式云物理服务器实例类型
public class DescribeDeviceTypesRequest:JdCloudRequest
{
    /// 可用区，精确匹配
    var az:String?




    enum DescribeDeviceTypesRequestRequestCodingKeys: String, CodingKey {
        case az
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceTypesRequestRequestCodingKeys.self)
        try encoderContainer.encode(az, forKey: .az)

    }
}

public class DescribeOSResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeOSResult?;

    enum DescribeOSResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeOSResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeOSResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeOSResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeOSResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 批量查询分布式云物理服务器详细信息&lt;br/&gt;
      ///       /// 支持分页查询，默认每页20条&lt;br/&gt;
      ///       ///  
public class DescribeInstancesResult:NSObject,JdCloudResult
{
    /// Instances
    var instances:[Instance?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeInstancesResultCodingKeys: String, CodingKey {
        case instances
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        if decoderContainer.contains(.instances)
        {
            self.instances = try decoderContainer.decode([Instance?]?.self, forKey: .instances)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        try encoderContainer.encode(instances, forKey: .instances)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeDeviceTypesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDeviceTypesResult?;

    enum DescribeDeviceTypesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeviceTypesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDeviceTypesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDeviceTypesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceTypesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 重置分布式云物理服务器密码
      ///       ///  
public class ResetPasswordResult:NSObject,JdCloudResult
{
    /// 重置结果
    var success:Bool?



    public override init(){
        super.init()
    }

    enum ResetPasswordResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResetPasswordResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension ResetPasswordResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetPasswordResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
/// 查询单台分布式云物理服务器详细信息 
public class DescribeInstanceResult:NSObject,JdCloudResult
{
    /// Instance
    var instance:Instance?



    public override init(){
        super.init()
    }

    enum DescribeInstanceResultCodingKeys: String, CodingKey {
        case instance
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceResultCodingKeys.self)
        if decoderContainer.contains(.instance)
        {
            self.instance = try decoderContainer.decode(Instance?.self, forKey: .instance)
        }
    }
}
public extension DescribeInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceResultCodingKeys.self)
        try encoderContainer.encode(instance, forKey: .instance)
    }
}

///  对单台分布式云物理服务器执行关机操作，只能停止running状态的服务器 [MFA enabled]
public class StopInstanceRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum StopInstanceRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 对单台分布式云物理服务器执行开机操作，只能启动stopped状态的服务器 
public class StartInstanceResult:NSObject,JdCloudResult
{
    /// 开机操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum StartInstanceResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartInstanceResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension StartInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartInstanceResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  重装分布式云物理服务器，只能重装stopped状态的服务器&lt;br/&gt;
      ///       /// - 可调用接口（describeOS）获取分布式云物理服务器支持的操作系统列表
      ///       ///  [MFA enabled]
public class ReinstallInstanceRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 分布式云物理服务器配置
    var instanceSpec:ReinstallInstanceSpec

    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceSpec:ReinstallInstanceSpec,instanceId:String){
        self.instanceSpec = instanceSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ReinstallInstanceRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case instanceSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReinstallInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(instanceSpec, forKey: .instanceSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询可用的私有IP列表
public class DescribeAvailablePrivateIpRequest:JdCloudRequest
{
    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeAvailablePrivateIpRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAvailablePrivateIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class StopInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopInstanceResult?;

    enum StopInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension StopInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询分布式云物理服务器实例类型 
public class DescribeDeviceTypesResult:NSObject,JdCloudResult
{
    /// DeviceTypes
    var deviceTypes:[DeviceType?]?



    public override init(){
        super.init()
    }

    enum DescribeDeviceTypesResultCodingKeys: String, CodingKey {
        case deviceTypes
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeviceTypesResultCodingKeys.self)
        if decoderContainer.contains(.deviceTypes)
        {
            self.deviceTypes = try decoderContainer.decode([DeviceType?]?.self, forKey: .deviceTypes)
        }
    }
}
public extension DescribeDeviceTypesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceTypesResultCodingKeys.self)
        try encoderContainer.encode(deviceTypes, forKey: .deviceTypes)
    }
}

///  创建一台或多台指定配置的分布式云物理服务器&lt;br/&gt;
      ///       /// - 地域与可用区&lt;br/&gt;
      ///       ///   - 调用接口（queryEdCPSRegions）获取分布式云物理服务器支持的地域与可用区&lt;br/&gt;
      ///       /// - 实例类型&lt;br/&gt;
      ///       ///   - 调用接口（describeDeviceTypes）获取物理实例类型列表&lt;br/&gt;
      ///       ///   - 不能使用已下线、或已售馨的实例类型&lt;br/&gt;
      ///       /// - 操作系统&lt;br/&gt;
      ///       ///   - 可调用接口（describeOS）获取分布式云物理服务器支持的操作系统列表&lt;br/&gt;
      ///       /// - 存储&lt;br/&gt;
      ///       ///   - 数据盘多种RAID可选，可调用接口（describeDeviceRaids）获取服务器支持的RAID列表&lt;br/&gt;
      ///       /// - 网络&lt;br/&gt;
      ///       ///   - 网络类型目前支持vpc&lt;br/&gt;
      ///       ///   - 线路目前支持联通un、电信ct、移动cm&lt;br/&gt;
      ///       ///   - 支持不启用外网，如果启用外网，带宽范围[1,200] 单位Mbps&lt;br/&gt;
      ///       /// - 其他&lt;br/&gt;
      ///       ///   - 购买时长，可按年或月购买：月取值范围[1,9], 年取值范围[1,3]&lt;br/&gt;
      ///       ///   - 密码设置参考公共参数规范&lt;br/&gt;
      ///       /// 
public class CreateInstancesRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 描述分布式云物理服务器配置
    var instanceSpec:InstanceSpec


    public init(regionId: String,instanceSpec:InstanceSpec){
        self.instanceSpec = instanceSpec
        super.init(regionId: regionId)
    }


    enum CreateInstancesRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case instanceSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(instanceSpec, forKey: .instanceSpec)

    }
}

public class DescribeDeviceRaidsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDeviceRaidsResult?;

    enum DescribeDeviceRaidsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeviceRaidsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDeviceRaidsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDeviceRaidsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceRaidsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询单台分布式云物理服务器详细信息
public class DescribeInstanceRequest:JdCloudRequest
{
    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeDeviceStockResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDeviceStockResult?;

    enum DescribeDeviceStockResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeviceStockResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDeviceStockResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDeviceStockResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceStockResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DisassociateElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisassociateElasticIpResult?;

    enum DisassociateElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisassociateElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisassociateElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DisassociateElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  解绑弹性公网IP
      ///       /// 
public class DisassociateElasticIpRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 弹性公网IPId
    var elasticIpId:String

    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,elasticIpId:String,instanceId:String){
        self.elasticIpId = elasticIpId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DisassociateElasticIpRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case elasticIpId
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询单个分布式云物理服务器硬件监控信息
public class DescribeInstanceStatusRequest:JdCloudRequest
{
    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceStatusRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceStatusRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  批量查询分布式云物理服务器详细信息&lt;br/&gt;
      ///       /// 支持分页查询，默认每页20条&lt;br/&gt;
      ///       /// 
public class DescribeInstancesRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 可用区，精确匹配
    var az:String?

    /// 分布式云物理服务器名称，支持模糊匹配
    var name:String?

    /// 网络类型，精确匹配，支持vpc
    var networkType:String?

    /// 实例类型，精确匹配，调用接口（describeDeviceTypes）获取实例类型
    var deviceType:String?

    /// 子网ID
    var subnetId:String?

    /// 是否启用外网, yes/no
    var enableInternet:String?

    /// 密钥对id
    var keypairId:String?

    /// instanceId - 分布式云物理服务器ID，精确匹配，支持多个&lt;br/&gt;
      /// privateIp - 分布式云物理服务器内网IP，精确匹配，支持多个&lt;br/&gt;
      /// status - 分布式云物理服务器状态，参考分布式云物理服务器状态，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeInstancesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case az
        case name
        case networkType
        case deviceType
        case subnetId
        case enableInternet
        case keypairId
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(az, forKey: .az)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(networkType, forKey: .networkType)
        try encoderContainer.encode(deviceType, forKey: .deviceType)
        try encoderContainer.encode(subnetId, forKey: .subnetId)
        try encoderContainer.encode(enableInternet, forKey: .enableInternet)
        try encoderContainer.encode(keypairId, forKey: .keypairId)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 查询分布式云物理服务器支持的操作系统 
public class DescribeOSResult:NSObject,JdCloudResult
{
    /// Oss
    var oss:[Os?]?



    public override init(){
        super.init()
    }

    enum DescribeOSResultCodingKeys: String, CodingKey {
        case oss
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeOSResultCodingKeys.self)
        if decoderContainer.contains(.oss)
        {
            self.oss = try decoderContainer.decode([Os?]?.self, forKey: .oss)
        }
    }
}
public extension DescribeOSResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeOSResultCodingKeys.self)
        try encoderContainer.encode(oss, forKey: .oss)
    }
}
/// 查询分布式云物理服务器名称 
public class DescribeInstanceNameResult:NSObject,JdCloudResult
{
    /// 分布式云物理服务器名称
    var name:String?



    public override init(){
        super.init()
    }

    enum DescribeInstanceNameResultCodingKeys: String, CodingKey {
        case name
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceNameResultCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
    }
}
public extension DescribeInstanceNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceNameResultCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
    }
}

///  修改分布式云物理服务器部分信息，包括名称、描述
public class ModifyInstanceRequest:JdCloudRequest
{
    /// 分布式云物理服务器名称
    var name:String?

    /// 分布式云物理服务器描述
    var descriptionValue:String?

    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstanceRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询单个分布式云物理服务器已安装的RAID信息，包括系统盘RAID信息和数据盘RAID信息
public class DescribeInstanceRaidRequest:JdCloudRequest
{
    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceRaidRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceRaidRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询分布式云物理服务器支持的操作系统
public class DescribeOSRequest:JdCloudRequest
{
    /// 实例类型，可调用接口（describeDeviceTypes）获取指定地域的实例类型，例如：edcps.c.normal1
    var deviceType:String

    /// 操作系统类型，取值范围：CentOS、Ubuntu
    var osType:String?


    public init(regionId: String,deviceType:String){
        self.deviceType = deviceType
        super.init(regionId: regionId)
    }


    enum DescribeOSRequestRequestCodingKeys: String, CodingKey {
        case deviceType
        case osType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeOSRequestRequestCodingKeys.self)
        try encoderContainer.encode(deviceType, forKey: .deviceType)
        try encoderContainer.encode(osType, forKey: .osType)

    }
}

/// 创建一台或多台指定配置的分布式云物理服务器&lt;br/&gt;
      ///       /// - 地域与可用区&lt;br/&gt;
      ///       ///   - 调用接口（queryEdCPSRegions）获取分布式云物理服务器支持的地域与可用区&lt;br/&gt;
      ///       /// - 实例类型&lt;br/&gt;
      ///       ///   - 调用接口（describeDeviceTypes）获取物理实例类型列表&lt;br/&gt;
      ///       ///   - 不能使用已下线、或已售馨的实例类型&lt;br/&gt;
      ///       /// - 操作系统&lt;br/&gt;
      ///       ///   - 可调用接口（describeOS）获取分布式云物理服务器支持的操作系统列表&lt;br/&gt;
      ///       /// - 存储&lt;br/&gt;
      ///       ///   - 数据盘多种RAID可选，可调用接口（describeDeviceRaids）获取服务器支持的RAID列表&lt;br/&gt;
      ///       /// - 网络&lt;br/&gt;
      ///       ///   - 网络类型目前支持vpc&lt;br/&gt;
      ///       ///   - 线路目前支持联通un、电信ct、移动cm&lt;br/&gt;
      ///       ///   - 支持不启用外网，如果启用外网，带宽范围[1,200] 单位Mbps&lt;br/&gt;
      ///       /// - 其他&lt;br/&gt;
      ///       ///   - 购买时长，可按年或月购买：月取值范围[1,9], 年取值范围[1,3]&lt;br/&gt;
      ///       ///   - 密码设置参考公共参数规范&lt;br/&gt;
      ///       ///  
public class CreateInstancesResult:NSObject,JdCloudResult
{
    /// InstanceIds
    var instanceIds:[String?]?



    public override init(){
        super.init()
    }

    enum CreateInstancesResultCodingKeys: String, CodingKey {
        case instanceIds
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstancesResultCodingKeys.self)
        if decoderContainer.contains(.instanceIds)
        {
            self.instanceIds = try decoderContainer.decode([String?]?.self, forKey: .instanceIds)
        }
    }
}
public extension CreateInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstancesResultCodingKeys.self)
        try encoderContainer.encode(instanceIds, forKey: .instanceIds)
    }
}
/// 查询单个分布式云物理服务器已安装的RAID信息，包括系统盘RAID信息和数据盘RAID信息 
public class DescribeInstanceRaidResult:NSObject,JdCloudResult
{
    /// 系统盘RAID类型ID
    var sysRaidTypeId:String?

    /// 系统盘RAID类型
    var sysRaidType:String?

    /// 数据盘RAID类型ID
    var dataRaidTypeId:String?

    /// 数据盘RAID类型
    var dataRaidType:String?



    public override init(){
        super.init()
    }

    enum DescribeInstanceRaidResultCodingKeys: String, CodingKey {
        case sysRaidTypeId
        case sysRaidType
        case dataRaidTypeId
        case dataRaidType
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceRaidResultCodingKeys.self)
        if decoderContainer.contains(.sysRaidTypeId)
        {
            self.sysRaidTypeId = try decoderContainer.decode(String?.self, forKey: .sysRaidTypeId)
        }
        if decoderContainer.contains(.sysRaidType)
        {
            self.sysRaidType = try decoderContainer.decode(String?.self, forKey: .sysRaidType)
        }
        if decoderContainer.contains(.dataRaidTypeId)
        {
            self.dataRaidTypeId = try decoderContainer.decode(String?.self, forKey: .dataRaidTypeId)
        }
        if decoderContainer.contains(.dataRaidType)
        {
            self.dataRaidType = try decoderContainer.decode(String?.self, forKey: .dataRaidType)
        }
    }
}
public extension DescribeInstanceRaidResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceRaidResultCodingKeys.self)
        try encoderContainer.encode(sysRaidTypeId, forKey: .sysRaidTypeId)
        try encoderContainer.encode(sysRaidType, forKey: .sysRaidType)
        try encoderContainer.encode(dataRaidTypeId, forKey: .dataRaidTypeId)
        try encoderContainer.encode(dataRaidType, forKey: .dataRaidType)
    }
}
public class RestartInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RestartInstanceResult?;

    enum RestartInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RestartInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RestartInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension RestartInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestartInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询某种实例类型的分布式云物理服务器支持的RAID类型，可查询系统盘RAID类型和数据盘RAID类型 
public class DescribeDeviceRaidsResult:NSObject,JdCloudResult
{
    /// Raids
    var raids:[Raid?]?



    public override init(){
        super.init()
    }

    enum DescribeDeviceRaidsResultCodingKeys: String, CodingKey {
        case raids
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeviceRaidsResultCodingKeys.self)
        if decoderContainer.contains(.raids)
        {
            self.raids = try decoderContainer.decode([Raid?]?.self, forKey: .raids)
        }
    }
}
public extension DescribeDeviceRaidsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceRaidsResultCodingKeys.self)
        try encoderContainer.encode(raids, forKey: .raids)
    }
}
public class DescribeInstanceStatusResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceStatusResult?;

    enum DescribeInstanceStatusResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceStatusResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceStatusResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceStatusResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceStatusResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  重置分布式云物理服务器密码
      ///       /// 
public class ResetPasswordRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 密码
    var password:String

    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,password:String,instanceId:String){
        self.password = password
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ResetPasswordRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case password
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetPasswordRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(password, forKey: .password)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 重启单台分布式云物理服务器，只能重启running状态的服务器 [MFA enabled] 
public class RestartInstanceResult:NSObject,JdCloudResult
{
    /// 重启操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum RestartInstanceResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RestartInstanceResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension RestartInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestartInstanceResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class DescribeInstanceNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceNameResult?;

    enum DescribeInstanceNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceNameResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AssociateElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AssociateElasticIpResult?;

    enum AssociateElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AssociateElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension AssociateElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 重装分布式云物理服务器，只能重装stopped状态的服务器&lt;br/&gt;
      ///       /// - 可调用接口（describeOS）获取分布式云物理服务器支持的操作系统列表
      ///       ///  [MFA enabled] 
public class ReinstallInstanceResult:NSObject,JdCloudResult
{
    /// 重装操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum ReinstallInstanceResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReinstallInstanceResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension ReinstallInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReinstallInstanceResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  重启单台分布式云物理服务器，只能重启running状态的服务器 [MFA enabled]
public class RestartInstanceRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum RestartInstanceRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestartInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class ReinstallInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ReinstallInstanceResult?;

    enum ReinstallInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReinstallInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ReinstallInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension ReinstallInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReinstallInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除单台云物理物理服务器，只能删除运行running、停止stopped、错误error状态的服务器&lt;br/&gt;
      ///       /// 不能删除没有计费信息的服务器&lt;br/&gt;
      ///       /// 
public class DeleteInstanceRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DeleteInstanceRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  绑定弹性公网IP
      ///       /// 
public class AssociateElasticIpRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 弹性公网IPID
    var elasticIpId:String

    /// 私有IP
    var targetIp:String?

    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,elasticIpId:String,instanceId:String){
        self.elasticIpId = elasticIpId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum AssociateElasticIpRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case elasticIpId
        case targetIp
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(targetIp, forKey: .targetIp)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 查询可用的私有IP列表 
public class DescribeAvailablePrivateIpResult:NSObject,JdCloudResult
{
}
/// 对单台分布式云物理服务器执行关机操作，只能停止running状态的服务器 [MFA enabled] 
public class StopInstanceResult:NSObject,JdCloudResult
{
    /// 关机操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum StopInstanceResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopInstanceResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension StopInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopInstanceResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class DescribeInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceResult?;

    enum DescribeInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改分布式云物理服务器部分信息，包括名称、描述 
public class ModifyInstanceResult:NSObject,JdCloudResult
{
    /// 分布式云物理服务器名称
    var name:String?

    /// 分布式云物理服务器描述
    var descriptionValue:String?



    public override init(){
        super.init()
    }

    enum ModifyInstanceResultCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceResultCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
    }
}
public extension ModifyInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceResultCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
    }
}
/// 解绑弹性公网IP
      ///       ///  
public class DisassociateElasticIpResult:NSObject,JdCloudResult
{
    /// 解绑结果
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DisassociateElasticIpResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisassociateElasticIpResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DisassociateElasticIpResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class CreateInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateInstancesResult?;

    enum CreateInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteInstanceResult?;

    enum DeleteInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstanceResult?;

    enum ModifyInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeInstanceRaidResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceRaidResult?;

    enum DescribeInstanceRaidResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceRaidResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceRaidResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceRaidResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceRaidResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询某种实例类型的分布式云物理服务器支持的RAID类型，可查询系统盘RAID类型和数据盘RAID类型
public class DescribeDeviceRaidsRequest:JdCloudRequest
{
    /// 实例类型，可调用（describeDeviceTypes）接口获取指定地域的实例类型，例如：edcps.c.normal1
    var deviceType:String

    /// 磁盘类型，取值范围：system、data
    var volumeType:String?


    public init(regionId: String,deviceType:String){
        self.deviceType = deviceType
        super.init(regionId: regionId)
    }


    enum DescribeDeviceRaidsRequestRequestCodingKeys: String, CodingKey {
        case deviceType
        case volumeType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceRaidsRequestRequestCodingKeys.self)
        try encoderContainer.encode(deviceType, forKey: .deviceType)
        try encoderContainer.encode(volumeType, forKey: .volumeType)

    }
}

public class ResetPasswordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResetPasswordResult?;

    enum ResetPasswordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResetPasswordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResetPasswordResult?.self, forKey: .result) ?? nil
    }
}

public extension ResetPasswordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetPasswordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstancesResult?;

    enum DescribeInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class StartInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartInstanceResult?;

    enum StartInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension StartInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询分布式云物理服务器库存
public class DescribeDeviceStockRequest:JdCloudRequest
{
    /// 实例类型，调用接口（describeDeviceTypes）获取实例类型
    var deviceType:String?




    enum DescribeDeviceStockRequestRequestCodingKeys: String, CodingKey {
        case deviceType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceStockRequestRequestCodingKeys.self)
        try encoderContainer.encode(deviceType, forKey: .deviceType)

    }
}

/// 查询分布式云物理服务器库存 
public class DescribeDeviceStockResult:NSObject,JdCloudResult
{
    /// DevicesStock
    var devicesStock:[ResourceStock?]?



    public override init(){
        super.init()
    }

    enum DescribeDeviceStockResultCodingKeys: String, CodingKey {
        case devicesStock
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeviceStockResultCodingKeys.self)
        if decoderContainer.contains(.devicesStock)
        {
            self.devicesStock = try decoderContainer.decode([ResourceStock?]?.self, forKey: .devicesStock)
        }
    }
}
public extension DescribeDeviceStockResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceStockResultCodingKeys.self)
        try encoderContainer.encode(devicesStock, forKey: .devicesStock)
    }
}
/// 删除单台云物理物理服务器，只能删除运行running、停止stopped、错误error状态的服务器&lt;br/&gt;
      ///       /// 不能删除没有计费信息的服务器&lt;br/&gt;
      ///       ///  
public class DeleteInstanceResult:NSObject,JdCloudResult
{
    /// 删除操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DeleteInstanceResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteInstanceResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DeleteInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteInstanceResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  对单台分布式云物理服务器执行开机操作，只能启动stopped状态的服务器
public class StartInstanceRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum StartInstanceRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeAvailablePrivateIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAvailablePrivateIpResult?;

    enum DescribeAvailablePrivateIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAvailablePrivateIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAvailablePrivateIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAvailablePrivateIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAvailablePrivateIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询分布式云物理服务器名称
public class DescribeInstanceNameRequest:JdCloudRequest
{
    /// 分布式云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceNameRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 绑定弹性公网IP
      ///       ///  
public class AssociateElasticIpResult:NSObject,JdCloudResult
{
    /// 绑定结果
    var success:Bool?



    public override init(){
        super.init()
    }

    enum AssociateElasticIpResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateElasticIpResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension AssociateElasticIpResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
/// 创建私有网络 
public class CreateVpcResult:NSObject,JdCloudResult
{
    /// 私有网络ID
    var vpcId:String?



    public override init(){
        super.init()
    }

    enum CreateVpcResultCodingKeys: String, CodingKey {
        case vpcId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcResultCodingKeys.self)
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
    }
}
public extension CreateVpcResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcResultCodingKeys.self)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
    }
}
/// 删除私有网络
      ///       ///  
public class DeleteVpcResult:NSObject,JdCloudResult
{
    /// 删除操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DeleteVpcResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVpcResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DeleteVpcResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class DescribeVpcsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeVpcsResult?;

    enum DescribeVpcsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeVpcsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeVpcsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyVpcResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyVpcResult?;

    enum ModifyVpcResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyVpcResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyVpcResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyVpcResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyVpcResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改私有网络
      ///       ///  
public class ModifyVpcResult:NSObject,JdCloudResult
{
    /// 私有网络详细信息
    var vpc:Vpc?



    public override init(){
        super.init()
    }

    enum ModifyVpcResultCodingKeys: String, CodingKey {
        case vpc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyVpcResultCodingKeys.self)
        if decoderContainer.contains(.vpc)
        {
            self.vpc = try decoderContainer.decode(Vpc?.self, forKey: .vpc)
        }
    }
}
public extension ModifyVpcResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyVpcResultCodingKeys.self)
        try encoderContainer.encode(vpc, forKey: .vpc)
    }
}
/// 查询私有网络列表 
public class DescribeVpcsResult:NSObject,JdCloudResult
{
    /// Vpcs
    var vpcs:[Vpc?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeVpcsResultCodingKeys: String, CodingKey {
        case vpcs
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcsResultCodingKeys.self)
        if decoderContainer.contains(.vpcs)
        {
            self.vpcs = try decoderContainer.decode([Vpc?]?.self, forKey: .vpcs)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeVpcsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcsResultCodingKeys.self)
        try encoderContainer.encode(vpcs, forKey: .vpcs)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  删除私有网络
      ///       /// 
public class DeleteVpcRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 私有网络ID
    var vpcId:String


    public init(regionId: String,vpcId:String){
        self.vpcId = vpcId
        super.init(regionId: regionId)
    }


    enum DeleteVpcRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case vpcId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(vpcId, forKey: .vpcId)

    }
}

/// 查询私有网络详情 
public class DescribeVpcResult:NSObject,JdCloudResult
{
    /// 私有网络详细信息
    var vpc:Vpc?



    public override init(){
        super.init()
    }

    enum DescribeVpcResultCodingKeys: String, CodingKey {
        case vpc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcResultCodingKeys.self)
        if decoderContainer.contains(.vpc)
        {
            self.vpc = try decoderContainer.decode(Vpc?.self, forKey: .vpc)
        }
    }
}
public extension DescribeVpcResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcResultCodingKeys.self)
        try encoderContainer.encode(vpc, forKey: .vpc)
    }
}

///  查询私有网络列表
public class DescribeVpcsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 私有网络名称
    var name:String?

    /// vpcId - 私有网络ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeVpcsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case name
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  修改私有网络
      ///       /// 
public class ModifyVpcRequest:JdCloudRequest
{
    /// 名称
    var name:String?

    /// 描述
    var descriptionValue:String?

    /// 私有网络ID
    var vpcId:String


    public init(regionId: String,vpcId:String){
        self.vpcId = vpcId
        super.init(regionId: regionId)
    }


    enum ModifyVpcRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case vpcId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyVpcRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(vpcId, forKey: .vpcId)

    }
}


///  创建私有网络
public class CreateVpcRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 子网配置
    var vpcSpec:VpcSpec


    public init(regionId: String,vpcSpec:VpcSpec){
        self.vpcSpec = vpcSpec
        super.init(regionId: regionId)
    }


    enum CreateVpcRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case vpcSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(vpcSpec, forKey: .vpcSpec)

    }
}


///  查询私有网络详情
public class DescribeVpcRequest:JdCloudRequest
{
    /// 私有网络ID
    var vpcId:String


    public init(regionId: String,vpcId:String){
        self.vpcId = vpcId
        super.init(regionId: regionId)
    }


    enum DescribeVpcRequestRequestCodingKeys: String, CodingKey {
        case vpcId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcId, forKey: .vpcId)

    }
}

public class CreateVpcResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVpcResult?;

    enum CreateVpcResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVpcResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVpcResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteVpcResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVpcResult?;

    enum DeleteVpcResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVpcResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVpcResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVpcResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeVpcResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeVpcResult?;

    enum DescribeVpcResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeVpcResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeVpcResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询分布式分布式云物理服务器地域列表 
public class DescribeEdCPSRegionsResult:NSObject,JdCloudResult
{
    /// Regions
    var regions:[Region?]?



    public override init(){
        super.init()
    }

    enum DescribeEdCPSRegionsResultCodingKeys: String, CodingKey {
        case regions
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeEdCPSRegionsResultCodingKeys.self)
        if decoderContainer.contains(.regions)
        {
            self.regions = try decoderContainer.decode([Region?]?.self, forKey: .regions)
        }
    }
}
public extension DescribeEdCPSRegionsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeEdCPSRegionsResultCodingKeys.self)
        try encoderContainer.encode(regions, forKey: .regions)
    }
}
public class DescribeEdCPSRegionsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeEdCPSRegionsResult?;

    enum DescribeEdCPSRegionsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeEdCPSRegionsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeEdCPSRegionsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeEdCPSRegionsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeEdCPSRegionsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询分布式分布式云物理服务器地域列表
public class DescribeEdCPSRegionsRequest:JdCloudRequest
{
}

