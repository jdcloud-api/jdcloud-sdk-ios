/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Cluster
   集群相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

///  查询 kubernetes 集群服务配置信息
public class DescribeServerConfigExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/regions/{regionId}/serverConfig")
    }
    
}
///  查询版本信息
public class DescribeVersionsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/regions/{regionId}/versions")
    }
    
}
///  查询节点版本
public class DescribeNodeVersionExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/regions/{regionId}/nodeVersions/{nodeVersion}")
    }
    
}
///  查询可升级的控制节点版本
public class DescribeUpgradableMasterVersionsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/regions/{regionId}/clusters/{clusterId}/upgradableMasterVersions")
    }
    
}
///  查询可升级的节点版本
public class DescribeUpgradableNodeVersionsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/regions/{regionId}/clusters/{clusterId}/upgradableNodeVersions")
    }
    
}
///  查询工作节点组列表
public class DescribeNodeGroupsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/regions/{regionId}/nodeGroups")
    }
    
}
///  创建工作节点组&lt;br&gt;
      /// - 要求集群状态为running
      /// 
public class CreateNodeGroupExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/regions/{regionId}/nodeGroups")
    }
    
}
///  查询单个工作节点组详情
public class DescribeNodeGroupExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/regions/{regionId}/nodeGroups/{nodeGroupId}")
    }
    
}
///  修改工作节点组的 名称 和 描述&lt;br&gt;name 和 description 必须要指定一个
public class ModifyNodeGroupExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PATCH", url: "/regions/{regionId}/nodeGroups/{nodeGroupId}")
    }
    
}
///  集群摘除工作节点组并删除工作节点组
public class DeleteNodeGroupExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/regions/{regionId}/nodeGroups/{nodeGroupId}")
    }
    
}
///  调整工作节点组实例数量
public class SetNodeGroupSizeExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/regions/{regionId}/nodeGroups/{nodeGroupId}:setNodeGroupSize")
    }
    
}
///  设置工作节点组的自动修复
public class SetAutoRepairExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/regions/{regionId}/nodeGroups/{nodeGroupId}:setAutoRepair")
    }
    
}
///  回滚未升级完的工作节点组
public class RollbackNodeGroupUpgradeExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/regions/{regionId}/nodeGroups/{nodeGroupId}:rollbackNodeGroupUpgrade")
    }
    
}
///  查询 kubernetes 集群配额
public class DescribeQuotasExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/regions/{regionId}/quotas")
    }
    
}
///  查询集群列表
public class DescribeClustersExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/regions/{regionId}/clusters")
    }
    
}
///  - 创建集群
      /// - 证书
      ///   - 关于kubernetes的证书，默认生成，不需要用户传入。
      /// - nodegroup
      ///   - cluster必须与nodeGroup进行绑定
      ///   - cluster支持多nodegroup
      ///   - 状态
      ///     - pending,reconciling,deleting状态不可以操作更新接口
      ///     - running，running_with_error状态可以操作nodegroup所有接口
      ///     - error状态只可以查询，删除
      ///     - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到
      /// - 状态限制
      ///   - pending,reconciling,deleting状态不可以操作更新接口
      ///   - running状态可以操作cluster所有接口
      ///   - error状态只可以查询，删除
      ///   - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到
      /// 
public class CreateClusterExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/regions/{regionId}/clusters")
    }
    
}
///  查询单个集群详情。
public class DescribeClusterExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/regions/{regionId}/clusters/{clusterId}")
    }
    
}
///  修改集群的 名称 和 描述。&lt;br&gt;集群 name 和 description 必须要指定一个
public class ModifyClusterExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PATCH", url: "/regions/{regionId}/clusters/{clusterId}")
    }
    
}
///  删除集群，以及集群的所有node节点，网络，云盘等所有资源。
public class DeleteClusterExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/regions/{regionId}/clusters/{clusterId}")
    }
    
}
///  Deprecated 建议使用 setAddons 接口 &lt;br&gt;设置用户自定义监控状态
public class SetUserMetricsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/regions/{regionId}/clusters/{clusterId}:setUserMetrics")
    }
    
}
///  终止升级
public class AbortUpgradeExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/regions/{regionId}/clusters/{clusterId}:abortUpgrade")
    }
    
}
///  查询集群操作进度
public class DescribeProgressExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/regions/{regionId}/clusters/{clusterId}/progress")
    }
    
}
///  设置自动升级
public class SetAutoUpgradeExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/regions/{regionId}/clusters/{clusterId}:setAutoUpgrade")
    }
    
}
///  触发升级
public class UpgradeClusterExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/regions/{regionId}/clusters/{clusterId}:upgradeCluster")
    }
    
}
///  设置集群组件
public class SetAddonsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/regions/{regionId}/clusters/{clusterId}:setAddons")
    }
    
}
