/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   NodeGroup
   节点组相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  创建k8s的nodeGroup
      ///       /// 要求集群状态为running
      ///       /// 
@objc(CreateNodeGroupRequest)
public class CreateNodeGroupRequest:JdCloudRequest
{
    /// 名称（同一用户的 cluster 内部唯一）
    var name:String

    /// 描述
    var descriptionValue:String?

    /// node group所属的cluster
    var clusterId:String

    /// 节点组配置
    var nodeConfig:NodeConfigSpec

    /// nodeGroup初始化大小
    var initialNodeCount:Int

    /// k8s运行的vpc
    var vpcId:String

    /// k8s的node的cidr
    var nodeCidr:String

    /// 是否开启 node group 的自动修复，默认关闭
    var autoRepair:Bool?


    public init(regionId: String,name:String,clusterId:String,nodeConfig:NodeConfigSpec,initialNodeCount:Int,vpcId:String,nodeCidr:String){
        self.name = name
        self.clusterId = clusterId
        self.nodeConfig = nodeConfig
        self.initialNodeCount = initialNodeCount
        self.vpcId = vpcId
        self.nodeCidr = nodeCidr
        super.init(regionId: regionId)
    }


    enum CreateNodeGroupRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case clusterId
        case nodeConfig
        case initialNodeCount
        case vpcId
        case nodeCidr
        case autoRepair
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNodeGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(clusterId, forKey: .clusterId)
        try encoderContainer.encode(nodeConfig, forKey: .nodeConfig)
        try encoderContainer.encode(initialNodeCount, forKey: .initialNodeCount)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(nodeCidr, forKey: .nodeCidr)
        try encoderContainer.encode(autoRepair, forKey: .autoRepair)

    }
}
