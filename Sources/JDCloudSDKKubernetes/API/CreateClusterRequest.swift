/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Cluster
   集群相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  - 创建集群
      ///       /// - 证书
      ///       ///   - 关于kubernetes的证书，默认生成，不需要用户传入。
      ///       /// - nodegroup
      ///       ///   - cluster必须与nodeGroup进行绑定
      ///       ///   - cluster支持多nodegroup
      ///       ///   - 状态
      ///       ///     - pending,reconciling,deleting状态不可以操作更新接口
      ///       ///     - running，running_with_error状态可以操作nodegroup所有接口
      ///       ///     - error状态只可以查询，删除
      ///       ///     - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到
      ///       /// - 状态限制
      ///       ///   - pending,reconciling,deleting状态不可以操作更新接口
      ///       ///   - running状态可以操作cluster所有接口
      ///       ///   - error状态只可以查询，删除
      ///       ///   - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到
      ///       /// 
@objc(CreateClusterRequest)
public class CreateClusterRequest:JdCloudRequest
{
    /// 名称（同一用户的 cluster 允许重名）
    var name:String

    /// 描述
    var descriptionValue:String?

    /// 默认开启 basicAuth与clientCertificate最少选择一个
    var basicAuth:Bool?

    /// 默认开启 clientCertificate
    var clientCertificate:Bool?

    /// 集群所在的az
    var azs:[String?]?

    /// pod 创建参数
    var nodeGroup:NodeGroupSpec

    /// k8s的master的cidr
    var masterCidr:String

    /// 用户的AccessKey，插件调用open-api时的认证凭证
    var accessKey:String

    /// 用户的SecretKey，插件调用open-api时的认证凭证
    var secretKey:String

    /// 是否启用用户自定义监控，默认不启用
    var userMetrics:Bool?


    public init(regionId: String,name:String,nodeGroup:NodeGroupSpec,masterCidr:String,accessKey:String,secretKey:String){
        self.name = name
        self.nodeGroup = nodeGroup
        self.masterCidr = masterCidr
        self.accessKey = accessKey
        self.secretKey = secretKey
        super.init(regionId: regionId)
    }


    enum CreateClusterRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case basicAuth
        case clientCertificate
        case azs
        case nodeGroup
        case masterCidr
        case accessKey
        case secretKey
        case userMetrics
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateClusterRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(basicAuth, forKey: .basicAuth)
        try encoderContainer.encode(clientCertificate, forKey: .clientCertificate)
        try encoderContainer.encode(azs, forKey: .azs)
        try encoderContainer.encode(nodeGroup, forKey: .nodeGroup)
        try encoderContainer.encode(masterCidr, forKey: .masterCidr)
        try encoderContainer.encode(accessKey, forKey: .accessKey)
        try encoderContainer.encode(secretKey, forKey: .secretKey)
        try encoderContainer.encode(userMetrics, forKey: .userMetrics)

    }
}
