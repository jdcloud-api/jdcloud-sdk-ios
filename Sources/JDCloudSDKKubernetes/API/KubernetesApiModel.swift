/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Cluster
   集群相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon


///  查询版本信息
public class DescribeVersionsRequest:JdCloudRequest
{
    /// 集群的大版本，如 1.12.4-jcs.1
    var masterVersion:String?




    enum DescribeVersionsRequestRequestCodingKeys: String, CodingKey {
        case masterVersion
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVersionsRequestRequestCodingKeys.self)
        try encoderContainer.encode(masterVersion, forKey: .masterVersion)

    }
}

/// 查询版本信息 
public class DescribeVersionsResult:NSObject,JdCloudResult
{
    /// MasterVersions
    var masterVersions:[MasterVersion?]?



    public override init(){
        super.init()
    }

    enum DescribeVersionsResultCodingKeys: String, CodingKey {
        case masterVersions
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVersionsResultCodingKeys.self)
        if decoderContainer.contains(.masterVersions)
        {
            self.masterVersions = try decoderContainer.decode([MasterVersion?]?.self, forKey: .masterVersions)
        }
    }
}
public extension DescribeVersionsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVersionsResultCodingKeys.self)
        try encoderContainer.encode(masterVersions, forKey: .masterVersions)
    }
}
/// 查询节点版本 
public class DescribeNodeVersionResult:NSObject,JdCloudResult
{
    /// NodeVersion
    var nodeVersion:NodeVersion?



    public override init(){
        super.init()
    }

    enum DescribeNodeVersionResultCodingKeys: String, CodingKey {
        case nodeVersion
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNodeVersionResultCodingKeys.self)
        if decoderContainer.contains(.nodeVersion)
        {
            self.nodeVersion = try decoderContainer.decode(NodeVersion?.self, forKey: .nodeVersion)
        }
    }
}
public extension DescribeNodeVersionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNodeVersionResultCodingKeys.self)
        try encoderContainer.encode(nodeVersion, forKey: .nodeVersion)
    }
}
public class DescribeVersionsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeVersionsResult?;

    enum DescribeVersionsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVersionsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeVersionsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeVersionsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVersionsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询可升级的控制节点版本 
public class DescribeUpgradableMasterVersionsResult:NSObject,JdCloudResult
{
    /// MasterVersions
    var masterVersions:[MasterVersion?]?



    public override init(){
        super.init()
    }

    enum DescribeUpgradableMasterVersionsResultCodingKeys: String, CodingKey {
        case masterVersions
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUpgradableMasterVersionsResultCodingKeys.self)
        if decoderContainer.contains(.masterVersions)
        {
            self.masterVersions = try decoderContainer.decode([MasterVersion?]?.self, forKey: .masterVersions)
        }
    }
}
public extension DescribeUpgradableMasterVersionsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUpgradableMasterVersionsResultCodingKeys.self)
        try encoderContainer.encode(masterVersions, forKey: .masterVersions)
    }
}

///  查询 kubernetes 集群服务配置信息
public class DescribeServerConfigRequest:JdCloudRequest
{
}


///  查询可升级的控制节点版本
public class DescribeUpgradableMasterVersionsRequest:JdCloudRequest
{
    /// 集群 ID
    var clusterId:String


    public init(regionId: String,clusterId:String){
        self.clusterId = clusterId
        super.init(regionId: regionId)
    }


    enum DescribeUpgradableMasterVersionsRequestRequestCodingKeys: String, CodingKey {
        case clusterId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUpgradableMasterVersionsRequestRequestCodingKeys.self)
        try encoderContainer.encode(clusterId, forKey: .clusterId)

    }
}

/// 查询 kubernetes 集群服务配置信息 
public class DescribeServerConfigResult:NSObject,JdCloudResult
{
    /// ServerConfig
    var serverConfig:ServerConfig?



    public override init(){
        super.init()
    }

    enum DescribeServerConfigResultCodingKeys: String, CodingKey {
        case serverConfig
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeServerConfigResultCodingKeys.self)
        if decoderContainer.contains(.serverConfig)
        {
            self.serverConfig = try decoderContainer.decode(ServerConfig?.self, forKey: .serverConfig)
        }
    }
}
public extension DescribeServerConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeServerConfigResultCodingKeys.self)
        try encoderContainer.encode(serverConfig, forKey: .serverConfig)
    }
}

///  查询节点版本
public class DescribeNodeVersionRequest:JdCloudRequest
{
    /// 节点版本
    var nodeVersion:String


    public init(regionId: String,nodeVersion:String){
        self.nodeVersion = nodeVersion
        super.init(regionId: regionId)
    }


    enum DescribeNodeVersionRequestRequestCodingKeys: String, CodingKey {
        case nodeVersion
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNodeVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(nodeVersion, forKey: .nodeVersion)

    }
}

/// 查询可升级的节点版本 
public class DescribeUpgradableNodeVersionsResult:NSObject,JdCloudResult
{
    /// NdoeVersions
    var ndoeVersions:[NodeVersion?]?



    public override init(){
        super.init()
    }

    enum DescribeUpgradableNodeVersionsResultCodingKeys: String, CodingKey {
        case ndoeVersions
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUpgradableNodeVersionsResultCodingKeys.self)
        if decoderContainer.contains(.ndoeVersions)
        {
            self.ndoeVersions = try decoderContainer.decode([NodeVersion?]?.self, forKey: .ndoeVersions)
        }
    }
}
public extension DescribeUpgradableNodeVersionsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUpgradableNodeVersionsResultCodingKeys.self)
        try encoderContainer.encode(ndoeVersions, forKey: .ndoeVersions)
    }
}
public class DescribeUpgradableMasterVersionsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeUpgradableMasterVersionsResult?;

    enum DescribeUpgradableMasterVersionsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUpgradableMasterVersionsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeUpgradableMasterVersionsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeUpgradableMasterVersionsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUpgradableMasterVersionsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeServerConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeServerConfigResult?;

    enum DescribeServerConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeServerConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeServerConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeServerConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeServerConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeNodeVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeNodeVersionResult?;

    enum DescribeNodeVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNodeVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeNodeVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeNodeVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNodeVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询可升级的节点版本
public class DescribeUpgradableNodeVersionsRequest:JdCloudRequest
{
    /// 节点组 id
    var nodeGroupIds:[String?]?

    /// 集群 ID
    var clusterId:String


    public init(regionId: String,clusterId:String){
        self.clusterId = clusterId
        super.init(regionId: regionId)
    }


    enum DescribeUpgradableNodeVersionsRequestRequestCodingKeys: String, CodingKey {
        case nodeGroupIds
        case clusterId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUpgradableNodeVersionsRequestRequestCodingKeys.self)
        try encoderContainer.encode(nodeGroupIds, forKey: .nodeGroupIds)
        try encoderContainer.encode(clusterId, forKey: .clusterId)

    }
}

public class DescribeUpgradableNodeVersionsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeUpgradableNodeVersionsResult?;

    enum DescribeUpgradableNodeVersionsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUpgradableNodeVersionsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeUpgradableNodeVersionsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeUpgradableNodeVersionsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUpgradableNodeVersionsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询单个工作节点组详情
public class DescribeNodeGroupRequest:JdCloudRequest
{
    /// 工作节点组 ID
    var nodeGroupId:String


    public init(regionId: String,nodeGroupId:String){
        self.nodeGroupId = nodeGroupId
        super.init(regionId: regionId)
    }


    enum DescribeNodeGroupRequestRequestCodingKeys: String, CodingKey {
        case nodeGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNodeGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(nodeGroupId, forKey: .nodeGroupId)

    }
}


///  修改工作节点组的 名称 和 描述&lt;br&gt;name 和 description 必须要指定一个
public class ModifyNodeGroupRequest:JdCloudRequest
{
    /// 工作节点组名称
    var name:String?

    /// 工作节点组描述
    var descriptionValue:String?

    /// 工作节点组 ID
    var nodeGroupId:String


    public init(regionId: String,nodeGroupId:String){
        self.nodeGroupId = nodeGroupId
        super.init(regionId: regionId)
    }


    enum ModifyNodeGroupRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case nodeGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyNodeGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(nodeGroupId, forKey: .nodeGroupId)

    }
}


///  调整工作节点组实例数量
public class SetNodeGroupSizeRequest:JdCloudRequest
{
    /// 预期目标节点数量
    var expectCount:Int

    /// 工作节点组 ID
    var nodeGroupId:String


    public init(regionId: String,expectCount:Int,nodeGroupId:String){
        self.expectCount = expectCount
        self.nodeGroupId = nodeGroupId
        super.init(regionId: regionId)
    }


    enum SetNodeGroupSizeRequestRequestCodingKeys: String, CodingKey {
        case expectCount
        case nodeGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetNodeGroupSizeRequestRequestCodingKeys.self)
        try encoderContainer.encode(expectCount, forKey: .expectCount)
        try encoderContainer.encode(nodeGroupId, forKey: .nodeGroupId)

    }
}


///  查询工作节点组列表
public class DescribeNodeGroupsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// Tag筛选条件
    var tags:[TagFilter?]?

    /// name - 节点组名称，模糊匹配，支持单个
      /// id - 节点组 id，支持多个
      /// clusterId - 根据 clusterId 查询
      /// clusterName - 根据 cluster 名称查询
      /// 
    var filters:[Filter?]?




    enum DescribeNodeGroupsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case tags
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNodeGroupsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(tags, forKey: .tags)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class SetAutoRepairResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetAutoRepairResult?;

    enum SetAutoRepairResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetAutoRepairResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetAutoRepairResult?.self, forKey: .result) ?? nil
    }
}

public extension SetAutoRepairResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetAutoRepairResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 调整工作节点组实例数量 
public class SetNodeGroupSizeResult:NSObject,JdCloudResult
{
}
public class DeleteNodeGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteNodeGroupResult?;

    enum DeleteNodeGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteNodeGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteNodeGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteNodeGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteNodeGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateNodeGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateNodeGroupResult?;

    enum CreateNodeGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateNodeGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateNodeGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateNodeGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNodeGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeNodeGroupsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeNodeGroupsResult?;

    enum DescribeNodeGroupsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNodeGroupsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeNodeGroupsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeNodeGroupsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNodeGroupsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建工作节点组&lt;br&gt;
      ///       /// - 要求集群状态为running
      ///       ///  
public class CreateNodeGroupResult:NSObject,JdCloudResult
{
    /// NodeGroupId
    var nodeGroupId:String?



    public override init(){
        super.init()
    }

    enum CreateNodeGroupResultCodingKeys: String, CodingKey {
        case nodeGroupId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateNodeGroupResultCodingKeys.self)
        if decoderContainer.contains(.nodeGroupId)
        {
            self.nodeGroupId = try decoderContainer.decode(String?.self, forKey: .nodeGroupId)
        }
    }
}
public extension CreateNodeGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNodeGroupResultCodingKeys.self)
        try encoderContainer.encode(nodeGroupId, forKey: .nodeGroupId)
    }
}
/// 查询工作节点组列表 
public class DescribeNodeGroupsResult:NSObject,JdCloudResult
{
    /// NodeGroups
    var nodeGroups:[NodeGroup?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeNodeGroupsResultCodingKeys: String, CodingKey {
        case nodeGroups
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNodeGroupsResultCodingKeys.self)
        if decoderContainer.contains(.nodeGroups)
        {
            self.nodeGroups = try decoderContainer.decode([NodeGroup?]?.self, forKey: .nodeGroups)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeNodeGroupsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNodeGroupsResultCodingKeys.self)
        try encoderContainer.encode(nodeGroups, forKey: .nodeGroups)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 查询单个工作节点组详情 
public class DescribeNodeGroupResult:NSObject,JdCloudResult
{
    /// NodeGroup
    var nodeGroup:NodeGroup?



    public override init(){
        super.init()
    }

    enum DescribeNodeGroupResultCodingKeys: String, CodingKey {
        case nodeGroup
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNodeGroupResultCodingKeys.self)
        if decoderContainer.contains(.nodeGroup)
        {
            self.nodeGroup = try decoderContainer.decode(NodeGroup?.self, forKey: .nodeGroup)
        }
    }
}
public extension DescribeNodeGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNodeGroupResultCodingKeys.self)
        try encoderContainer.encode(nodeGroup, forKey: .nodeGroup)
    }
}
/// 设置工作节点组的自动修复 
public class SetAutoRepairResult:NSObject,JdCloudResult
{
}

///  设置工作节点组的自动修复
public class SetAutoRepairRequest:JdCloudRequest
{
    /// 是否开启自动修复
    var enabled:Bool

    /// 工作节点组 ID
    var nodeGroupId:String


    public init(regionId: String,enabled:Bool,nodeGroupId:String){
        self.enabled = enabled
        self.nodeGroupId = nodeGroupId
        super.init(regionId: regionId)
    }


    enum SetAutoRepairRequestRequestCodingKeys: String, CodingKey {
        case enabled
        case nodeGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetAutoRepairRequestRequestCodingKeys.self)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(nodeGroupId, forKey: .nodeGroupId)

    }
}

/// 回滚未升级完的工作节点组 
public class RollbackNodeGroupUpgradeResult:NSObject,JdCloudResult
{
}
public class DescribeNodeGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeNodeGroupResult?;

    enum DescribeNodeGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNodeGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeNodeGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeNodeGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNodeGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 集群摘除工作节点组并删除工作节点组 
public class DeleteNodeGroupResult:NSObject,JdCloudResult
{
}
public class RollbackNodeGroupUpgradeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RollbackNodeGroupUpgradeResult?;

    enum RollbackNodeGroupUpgradeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RollbackNodeGroupUpgradeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RollbackNodeGroupUpgradeResult?.self, forKey: .result) ?? nil
    }
}

public extension RollbackNodeGroupUpgradeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RollbackNodeGroupUpgradeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建工作节点组&lt;br&gt;
      ///       /// - 要求集群状态为running
      ///       /// 
public class CreateNodeGroupRequest:JdCloudRequest
{
    /// 名称（同一用户的 cluster 内部唯一）
    var name:String

    /// 描述
    var descriptionValue:String?

    /// 工作节点所属的集群
    var clusterId:String

    /// 工作节点配置信息
    var nodeConfig:NodeConfigSpec

    /// 工作节点组的 az，必须为集群az的子集，默认为集群az
    var azs:[String?]?

    /// 工作节点组初始化大小
    var initialNodeCount:Int

    /// 工作节点组初始化大小运行的VPC
    var vpcId:String

    /// 工作节点组的cidr
    var nodeCidr:String

    /// 是否开启工作节点组的自动修复，默认关闭
    var autoRepair:Bool?


    public init(regionId: String,name:String,clusterId:String,nodeConfig:NodeConfigSpec,initialNodeCount:Int,vpcId:String,nodeCidr:String){
        self.name = name
        self.clusterId = clusterId
        self.nodeConfig = nodeConfig
        self.initialNodeCount = initialNodeCount
        self.vpcId = vpcId
        self.nodeCidr = nodeCidr
        super.init(regionId: regionId)
    }


    enum CreateNodeGroupRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case clusterId
        case nodeConfig
        case azs
        case initialNodeCount
        case vpcId
        case nodeCidr
        case autoRepair
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNodeGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(clusterId, forKey: .clusterId)
        try encoderContainer.encode(nodeConfig, forKey: .nodeConfig)
        try encoderContainer.encode(azs, forKey: .azs)
        try encoderContainer.encode(initialNodeCount, forKey: .initialNodeCount)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(nodeCidr, forKey: .nodeCidr)
        try encoderContainer.encode(autoRepair, forKey: .autoRepair)

    }
}


///  回滚未升级完的工作节点组
public class RollbackNodeGroupUpgradeRequest:JdCloudRequest
{
    /// 工作节点组 ID
    var nodeGroupId:String


    public init(regionId: String,nodeGroupId:String){
        self.nodeGroupId = nodeGroupId
        super.init(regionId: regionId)
    }


    enum RollbackNodeGroupUpgradeRequestRequestCodingKeys: String, CodingKey {
        case nodeGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RollbackNodeGroupUpgradeRequestRequestCodingKeys.self)
        try encoderContainer.encode(nodeGroupId, forKey: .nodeGroupId)

    }
}

public class ModifyNodeGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyNodeGroupResult?;

    enum ModifyNodeGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyNodeGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyNodeGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyNodeGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyNodeGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  集群摘除工作节点组并删除工作节点组
public class DeleteNodeGroupRequest:JdCloudRequest
{
    /// 工作节点组 ID
    var nodeGroupId:String


    public init(regionId: String,nodeGroupId:String){
        self.nodeGroupId = nodeGroupId
        super.init(regionId: regionId)
    }


    enum DeleteNodeGroupRequestRequestCodingKeys: String, CodingKey {
        case nodeGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteNodeGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(nodeGroupId, forKey: .nodeGroupId)

    }
}

/// 修改工作节点组的 名称 和 描述&lt;br&gt;name 和 description 必须要指定一个 
public class ModifyNodeGroupResult:NSObject,JdCloudResult
{
}
public class SetNodeGroupSizeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetNodeGroupSizeResult?;

    enum SetNodeGroupSizeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetNodeGroupSizeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetNodeGroupSizeResult?.self, forKey: .result) ?? nil
    }
}

public extension SetNodeGroupSizeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetNodeGroupSizeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeQuotasResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeQuotasResult?;

    enum DescribeQuotasResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQuotasResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeQuotasResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeQuotasResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotasResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询 kubernetes 集群配额 
public class DescribeQuotasResult:NSObject,JdCloudResult
{
    /// 配额列表
    var quotas:[Quota?]?



    public override init(){
        super.init()
    }

    enum DescribeQuotasResultCodingKeys: String, CodingKey {
        case quotas
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQuotasResultCodingKeys.self)
        if decoderContainer.contains(.quotas)
        {
            self.quotas = try decoderContainer.decode([Quota?]?.self, forKey: .quotas)
        }
    }
}
public extension DescribeQuotasResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotasResultCodingKeys.self)
        try encoderContainer.encode(quotas, forKey: .quotas)
    }
}

///  查询 kubernetes 集群配额
public class DescribeQuotasRequest:JdCloudRequest
{
    /// resourceTypes - 资源类型，暂时只支持[kubernetes]
      /// 
    var filters:[Filter?]?




    enum DescribeQuotasRequestRequestCodingKeys: String, CodingKey {
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotasRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class DescribeProgressResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeProgressResult?;

    enum DescribeProgressResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProgressResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeProgressResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeProgressResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProgressResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询单个集群详情。
public class DescribeClusterRequest:JdCloudRequest
{
    /// 集群 ID
    var clusterId:String


    public init(regionId: String,clusterId:String){
        self.clusterId = clusterId
        super.init(regionId: regionId)
    }


    enum DescribeClusterRequestRequestCodingKeys: String, CodingKey {
        case clusterId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeClusterRequestRequestCodingKeys.self)
        try encoderContainer.encode(clusterId, forKey: .clusterId)

    }
}


///  修改集群的 名称 和 描述。&lt;br&gt;集群 name 和 description 必须要指定一个
public class ModifyClusterRequest:JdCloudRequest
{
    /// 集群名称
    var name:String?

    /// 集群描述
    var descriptionValue:String?

    /// 集群 ID
    var clusterId:String


    public init(regionId: String,clusterId:String){
        self.clusterId = clusterId
        super.init(regionId: regionId)
    }


    enum ModifyClusterRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case clusterId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyClusterRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(clusterId, forKey: .clusterId)

    }
}

public class DeleteClusterResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteClusterResult?;

    enum DeleteClusterResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteClusterResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteClusterResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteClusterResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteClusterResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 设置集群组件 
public class SetAddonsResult:NSObject,JdCloudResult
{
}
/// 查询集群列表 
public class DescribeClustersResult:NSObject,JdCloudResult
{
    /// Clusters
    var clusters:[Cluster?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeClustersResultCodingKeys: String, CodingKey {
        case clusters
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeClustersResultCodingKeys.self)
        if decoderContainer.contains(.clusters)
        {
            self.clusters = try decoderContainer.decode([Cluster?]?.self, forKey: .clusters)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeClustersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeClustersResultCodingKeys.self)
        try encoderContainer.encode(clusters, forKey: .clusters)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  设置集群组件
public class SetAddonsRequest:JdCloudRequest
{
    /// 需要设置的集群组件配置
    var addonsConfig:[AddonConfigSpec?]?

    /// 集群 ID
    var clusterId:String


    public init(regionId: String,addonsConfig:[AddonConfigSpec?]?,clusterId:String){
        self.addonsConfig = addonsConfig
        self.clusterId = clusterId
        super.init(regionId: regionId)
    }


    enum SetAddonsRequestRequestCodingKeys: String, CodingKey {
        case addonsConfig
        case clusterId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetAddonsRequestRequestCodingKeys.self)
        try encoderContainer.encode(addonsConfig, forKey: .addonsConfig)
        try encoderContainer.encode(clusterId, forKey: .clusterId)

    }
}

public class AbortUpgradeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AbortUpgradeResult?;

    enum AbortUpgradeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AbortUpgradeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AbortUpgradeResult?.self, forKey: .result) ?? nil
    }
}

public extension AbortUpgradeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AbortUpgradeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改集群的 名称 和 描述。&lt;br&gt;集群 name 和 description 必须要指定一个 
public class ModifyClusterResult:NSObject,JdCloudResult
{
}
/// Deprecated 建议使用 setAddons 接口 &lt;br&gt;设置用户自定义监控状态 
public class SetUserMetricsResult:NSObject,JdCloudResult
{
}
/// 查询集群操作进度 
public class DescribeProgressResult:NSObject,JdCloudResult
{
    /// MasterProgress
    var masterProgress:MasterProgress?

    /// NodeGroupProgresses
    var nodeGroupProgresses:[NodeGroupProgress?]?



    public override init(){
        super.init()
    }

    enum DescribeProgressResultCodingKeys: String, CodingKey {
        case masterProgress
        case nodeGroupProgresses
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProgressResultCodingKeys.self)
        if decoderContainer.contains(.masterProgress)
        {
            self.masterProgress = try decoderContainer.decode(MasterProgress?.self, forKey: .masterProgress)
        }
        if decoderContainer.contains(.nodeGroupProgresses)
        {
            self.nodeGroupProgresses = try decoderContainer.decode([NodeGroupProgress?]?.self, forKey: .nodeGroupProgresses)
        }
    }
}
public extension DescribeProgressResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProgressResultCodingKeys.self)
        try encoderContainer.encode(masterProgress, forKey: .masterProgress)
        try encoderContainer.encode(nodeGroupProgresses, forKey: .nodeGroupProgresses)
    }
}
public class CreateClusterResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateClusterResult?;

    enum CreateClusterResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateClusterResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateClusterResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateClusterResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateClusterResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeClustersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeClustersResult?;

    enum DescribeClustersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeClustersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeClustersResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeClustersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeClustersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeClusterResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeClusterResult?;

    enum DescribeClusterResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeClusterResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeClusterResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeClusterResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeClusterResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class SetAutoUpgradeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetAutoUpgradeResult?;

    enum SetAutoUpgradeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetAutoUpgradeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetAutoUpgradeResult?.self, forKey: .result) ?? nil
    }
}

public extension SetAutoUpgradeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetAutoUpgradeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 设置自动升级 
public class SetAutoUpgradeResult:NSObject,JdCloudResult
{
}

///  设置自动升级
public class SetAutoUpgradeRequest:JdCloudRequest
{
    /// 开启或者关闭集群自动升级，开启时必须指定 maintenancePolicy
    var autoUpgrade:Bool

    /// 开启集群自动升级, 必须配置集群维护策略
    var maintenanceWindow:MaintenanceWindowSpec?

    /// 集群 ID
    var clusterId:String


    public init(regionId: String,autoUpgrade:Bool,clusterId:String){
        self.autoUpgrade = autoUpgrade
        self.clusterId = clusterId
        super.init(regionId: regionId)
    }


    enum SetAutoUpgradeRequestRequestCodingKeys: String, CodingKey {
        case autoUpgrade
        case maintenanceWindow
        case clusterId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetAutoUpgradeRequestRequestCodingKeys.self)
        try encoderContainer.encode(autoUpgrade, forKey: .autoUpgrade)
        try encoderContainer.encode(maintenanceWindow, forKey: .maintenanceWindow)
        try encoderContainer.encode(clusterId, forKey: .clusterId)

    }
}


///  Deprecated 建议使用 setAddons 接口 &lt;br&gt;设置用户自定义监控状态
public class SetUserMetricsRequest:JdCloudRequest
{
    /// 是否开启自定义监控
    var enabled:Bool?

    /// 集群 ID
    var clusterId:String


    public init(regionId: String,clusterId:String){
        self.clusterId = clusterId
        super.init(regionId: regionId)
    }


    enum SetUserMetricsRequestRequestCodingKeys: String, CodingKey {
        case enabled
        case clusterId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetUserMetricsRequestRequestCodingKeys.self)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(clusterId, forKey: .clusterId)

    }
}

public class UpgradeClusterResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpgradeClusterResult?;

    enum UpgradeClusterResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpgradeClusterResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpgradeClusterResult?.self, forKey: .result) ?? nil
    }
}

public extension UpgradeClusterResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpgradeClusterResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询集群操作进度
public class DescribeProgressRequest:JdCloudRequest
{
    /// 节点组 ID
    var nodeGroupIds:[String?]?

    /// 集群 ID
    var clusterId:String


    public init(regionId: String,clusterId:String){
        self.clusterId = clusterId
        super.init(regionId: regionId)
    }


    enum DescribeProgressRequestRequestCodingKeys: String, CodingKey {
        case nodeGroupIds
        case clusterId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProgressRequestRequestCodingKeys.self)
        try encoderContainer.encode(nodeGroupIds, forKey: .nodeGroupIds)
        try encoderContainer.encode(clusterId, forKey: .clusterId)

    }
}

/// 删除集群，以及集群的所有node节点，网络，云盘等所有资源。 
public class DeleteClusterResult:NSObject,JdCloudResult
{
}
/// - 创建集群
      ///       /// - 证书
      ///       ///   - 关于kubernetes的证书，默认生成，不需要用户传入。
      ///       /// - nodegroup
      ///       ///   - cluster必须与nodeGroup进行绑定
      ///       ///   - cluster支持多nodegroup
      ///       ///   - 状态
      ///       ///     - pending,reconciling,deleting状态不可以操作更新接口
      ///       ///     - running，running_with_error状态可以操作nodegroup所有接口
      ///       ///     - error状态只可以查询，删除
      ///       ///     - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到
      ///       /// - 状态限制
      ///       ///   - pending,reconciling,deleting状态不可以操作更新接口
      ///       ///   - running状态可以操作cluster所有接口
      ///       ///   - error状态只可以查询，删除
      ///       ///   - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到
      ///       ///  
public class CreateClusterResult:NSObject,JdCloudResult
{
    /// ClusterId
    var clusterId:String?



    public override init(){
        super.init()
    }

    enum CreateClusterResultCodingKeys: String, CodingKey {
        case clusterId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateClusterResultCodingKeys.self)
        if decoderContainer.contains(.clusterId)
        {
            self.clusterId = try decoderContainer.decode(String?.self, forKey: .clusterId)
        }
    }
}
public extension CreateClusterResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateClusterResultCodingKeys.self)
        try encoderContainer.encode(clusterId, forKey: .clusterId)
    }
}
public class ModifyClusterResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyClusterResult?;

    enum ModifyClusterResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyClusterResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyClusterResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyClusterResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyClusterResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  触发升级
public class UpgradeClusterRequest:JdCloudRequest
{
    /// 升级范围
    var scope:String

    /// 节点组 id
    var nodeGroupIds:[String?]?

    /// 集群 ID
    var clusterId:String


    public init(regionId: String,scope:String,clusterId:String){
        self.scope = scope
        self.clusterId = clusterId
        super.init(regionId: regionId)
    }


    enum UpgradeClusterRequestRequestCodingKeys: String, CodingKey {
        case scope
        case nodeGroupIds
        case clusterId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpgradeClusterRequestRequestCodingKeys.self)
        try encoderContainer.encode(scope, forKey: .scope)
        try encoderContainer.encode(nodeGroupIds, forKey: .nodeGroupIds)
        try encoderContainer.encode(clusterId, forKey: .clusterId)

    }
}


///  查询集群列表
public class DescribeClustersRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// name - 集群名称，模糊匹配，仅支持单个   
      /// id - id，支持多个   
      /// 
    var filters:[Filter?]?




    enum DescribeClustersRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeClustersRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 终止升级 
public class AbortUpgradeResult:NSObject,JdCloudResult
{
}
/// 触发升级 
public class UpgradeClusterResult:NSObject,JdCloudResult
{
}
public class SetAddonsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetAddonsResult?;

    enum SetAddonsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetAddonsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetAddonsResult?.self, forKey: .result) ?? nil
    }
}

public extension SetAddonsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetAddonsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class SetUserMetricsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetUserMetricsResult?;

    enum SetUserMetricsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetUserMetricsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetUserMetricsResult?.self, forKey: .result) ?? nil
    }
}

public extension SetUserMetricsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetUserMetricsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除集群，以及集群的所有node节点，网络，云盘等所有资源。
public class DeleteClusterRequest:JdCloudRequest
{
    /// 集群 ID
    var clusterId:String


    public init(regionId: String,clusterId:String){
        self.clusterId = clusterId
        super.init(regionId: regionId)
    }


    enum DeleteClusterRequestRequestCodingKeys: String, CodingKey {
        case clusterId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteClusterRequestRequestCodingKeys.self)
        try encoderContainer.encode(clusterId, forKey: .clusterId)

    }
}

/// 查询单个集群详情。 
public class DescribeClusterResult:NSObject,JdCloudResult
{
    /// Cluster
    var cluster:Cluster?



    public override init(){
        super.init()
    }

    enum DescribeClusterResultCodingKeys: String, CodingKey {
        case cluster
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeClusterResultCodingKeys.self)
        if decoderContainer.contains(.cluster)
        {
            self.cluster = try decoderContainer.decode(Cluster?.self, forKey: .cluster)
        }
    }
}
public extension DescribeClusterResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeClusterResultCodingKeys.self)
        try encoderContainer.encode(cluster, forKey: .cluster)
    }
}

///  - 创建集群
      ///       /// - 证书
      ///       ///   - 关于kubernetes的证书，默认生成，不需要用户传入。
      ///       /// - nodegroup
      ///       ///   - cluster必须与nodeGroup进行绑定
      ///       ///   - cluster支持多nodegroup
      ///       ///   - 状态
      ///       ///     - pending,reconciling,deleting状态不可以操作更新接口
      ///       ///     - running，running_with_error状态可以操作nodegroup所有接口
      ///       ///     - error状态只可以查询，删除
      ///       ///     - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到
      ///       /// - 状态限制
      ///       ///   - pending,reconciling,deleting状态不可以操作更新接口
      ///       ///   - running状态可以操作cluster所有接口
      ///       ///   - error状态只可以查询，删除
      ///       ///   - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到
      ///       /// 
public class CreateClusterRequest:JdCloudRequest
{
    /// 名称（同一用户的 cluster 允许重名）
    var name:String

    /// 描述
    var descriptionValue:String?

    /// 默认开启 basicAuth与clientCertificate最少选择一个
    var basicAuth:Bool?

    /// 默认开启 clientCertificate
    var clientCertificate:Bool?

    /// 集群所在的az
    var azs:[String?]?

    /// 集群节点组
    var nodeGroup:NodeGroupSpec

    /// k8s的master的cidr
    var masterCidr:String

    /// 用户的AccessKey，插件调用open-api时的认证凭证
    var accessKey:String

    /// 用户的SecretKey，插件调用open-api时的认证凭证
    var secretKey:String

    /// deprecated 在addonsConfig中同时指定，将被addonsConfig的设置覆盖 &lt;br&gt;是否启用用户自定义监控
    var userMetrics:Bool?

    /// 集群组件配置
    var addonsConfig:[AddonConfigSpec?]?


    public init(regionId: String,name:String,nodeGroup:NodeGroupSpec,masterCidr:String,accessKey:String,secretKey:String){
        self.name = name
        self.nodeGroup = nodeGroup
        self.masterCidr = masterCidr
        self.accessKey = accessKey
        self.secretKey = secretKey
        super.init(regionId: regionId)
    }


    enum CreateClusterRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case basicAuth
        case clientCertificate
        case azs
        case nodeGroup
        case masterCidr
        case accessKey
        case secretKey
        case userMetrics
        case addonsConfig
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateClusterRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(basicAuth, forKey: .basicAuth)
        try encoderContainer.encode(clientCertificate, forKey: .clientCertificate)
        try encoderContainer.encode(azs, forKey: .azs)
        try encoderContainer.encode(nodeGroup, forKey: .nodeGroup)
        try encoderContainer.encode(masterCidr, forKey: .masterCidr)
        try encoderContainer.encode(accessKey, forKey: .accessKey)
        try encoderContainer.encode(secretKey, forKey: .secretKey)
        try encoderContainer.encode(userMetrics, forKey: .userMetrics)
        try encoderContainer.encode(addonsConfig, forKey: .addonsConfig)

    }
}


///  终止升级
public class AbortUpgradeRequest:JdCloudRequest
{
    /// 集群 ID
    var clusterId:String


    public init(regionId: String,clusterId:String){
        self.clusterId = clusterId
        super.init(regionId: regionId)
    }


    enum AbortUpgradeRequestRequestCodingKeys: String, CodingKey {
        case clusterId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AbortUpgradeRequestRequestCodingKeys.self)
        try encoderContainer.encode(clusterId, forKey: .clusterId)

    }
}

