/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  创建集群请求参数模型
@objc(ClusterSpec)
public class ClusterSpec:NSObject,Codable{
    /// 名称（同一用户的 cluster 允许重名）
    /// Required:true
    var name:String
    /// 描述
    var descriptionValue:String?
    /// 默认开启 basicAuth与clientCertificate最少选择一个
    var basicAuth:Bool?
    /// 默认开启 basicAuth与clientCertificate最少选择一个
    var clientCertificate:Bool?
    /// kubernetes的版本,默认1.8
    var version:String?
    /// 集群所在的az
    /// Required:true
    var azs:[String?]
    /// 实例组
    var nodeGroup:NodeGroupSpec?
    /// k8s的master的cidr
    /// Required:true
    var masterCIDR:String
    /// 用户的AccessKey，插件调用open-api时的认证凭证
    /// Required:true
    var accessKey:String
    /// 用户的SecretKey，插件调用open-api时的认证凭证
    /// Required:true
    var secretKey:String



    public  init(name:String,azs:[String?],masterCIDR:String,accessKey:String,secretKey:String){
             self.name = name
             self.azs = azs
             self.masterCIDR = masterCIDR
             self.accessKey = accessKey
             self.secretKey = secretKey
    }

    enum ClusterSpecCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case basicAuth
        case clientCertificate
        case version
        case azs
        case nodeGroup
        case masterCIDR
        case accessKey
        case secretKey
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ClusterSpecCodingKeys.self)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.basicAuth)
        {
            self.basicAuth = try decoderContainer.decode(Bool?.self, forKey: .basicAuth)
        }
        if decoderContainer.contains(.clientCertificate)
        {
            self.clientCertificate = try decoderContainer.decode(Bool?.self, forKey: .clientCertificate)
        }
        if decoderContainer.contains(.version)
        {
            self.version = try decoderContainer.decode(String?.self, forKey: .version)
        }
        self.azs = try decoderContainer.decode([String?].self, forKey: .azs)
        if decoderContainer.contains(.nodeGroup)
        {
            self.nodeGroup = try decoderContainer.decode(NodeGroupSpec?.self, forKey: .nodeGroup)
        }
        self.masterCIDR = try decoderContainer.decode(String.self, forKey: .masterCIDR)
        self.accessKey = try decoderContainer.decode(String.self, forKey: .accessKey)
        self.secretKey = try decoderContainer.decode(String.self, forKey: .secretKey)
    }
}
public extension ClusterSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ClusterSpecCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(basicAuth, forKey: .basicAuth)
         try encoderContainer.encode(clientCertificate, forKey: .clientCertificate)
         try encoderContainer.encode(version, forKey: .version)
         try encoderContainer.encode(azs, forKey: .azs)
         try encoderContainer.encode(nodeGroup, forKey: .nodeGroup)
         try encoderContainer.encode(masterCIDR, forKey: .masterCIDR)
         try encoderContainer.encode(accessKey, forKey: .accessKey)
         try encoderContainer.encode(secretKey, forKey: .secretKey)
    }
}
