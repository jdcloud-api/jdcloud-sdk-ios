/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  serverConfig
@objc(ServerConfig)
public class ServerConfig:NSObject,Codable{
    /// kubernetes master 的支持版本
    var validMasterVersions:[String?]?
    /// kubernetes master 的默认版本
    var defaultMasterVersion:String?
    /// node 节点的配置
    var validNodeConfig:[ValidNodeConfig?]?



    public override init(){
            super.init()
    }

    enum ServerConfigCodingKeys: String, CodingKey {
        case validMasterVersions
        case defaultMasterVersion
        case validNodeConfig
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ServerConfigCodingKeys.self)
        if decoderContainer.contains(.validMasterVersions)
        {
            self.validMasterVersions = try decoderContainer.decode([String?]?.self, forKey: .validMasterVersions)
        }
        if decoderContainer.contains(.defaultMasterVersion)
        {
            self.defaultMasterVersion = try decoderContainer.decode(String?.self, forKey: .defaultMasterVersion)
        }
        if decoderContainer.contains(.validNodeConfig)
        {
            self.validNodeConfig = try decoderContainer.decode([ValidNodeConfig?]?.self, forKey: .validNodeConfig)
        }
    }
}
public extension ServerConfig{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ServerConfigCodingKeys.self)
         try encoderContainer.encode(validMasterVersions, forKey: .validMasterVersions)
         try encoderContainer.encode(defaultMasterVersion, forKey: .defaultMasterVersion)
         try encoderContainer.encode(validNodeConfig, forKey: .validNodeConfig)
    }
}
