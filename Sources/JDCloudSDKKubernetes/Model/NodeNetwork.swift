/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  节点网络配置
@objc(NodeNetwork)
public class NodeNetwork:NSObject,Codable{
    /// pod子网的id
    var podSubnetId:String?
    /// node子网的id
    var nodeSubnetId:String?
    /// service子网的id
    var serviceSubnetId:String?
    /// service关联LB的具有公网访问能力的子网id
    var servicePublicSubnetId:String?
    /// node的cidr
    var nodeNetworkCidr:String?
    /// vpc id
    var vpcId:String?



    public override init(){
            super.init()
    }

    enum NodeNetworkCodingKeys: String, CodingKey {
        case podSubnetId
        case nodeSubnetId
        case serviceSubnetId
        case servicePublicSubnetId
        case nodeNetworkCidr
        case vpcId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NodeNetworkCodingKeys.self)
        if decoderContainer.contains(.podSubnetId)
        {
            self.podSubnetId = try decoderContainer.decode(String?.self, forKey: .podSubnetId)
        }
        if decoderContainer.contains(.nodeSubnetId)
        {
            self.nodeSubnetId = try decoderContainer.decode(String?.self, forKey: .nodeSubnetId)
        }
        if decoderContainer.contains(.serviceSubnetId)
        {
            self.serviceSubnetId = try decoderContainer.decode(String?.self, forKey: .serviceSubnetId)
        }
        if decoderContainer.contains(.servicePublicSubnetId)
        {
            self.servicePublicSubnetId = try decoderContainer.decode(String?.self, forKey: .servicePublicSubnetId)
        }
        if decoderContainer.contains(.nodeNetworkCidr)
        {
            self.nodeNetworkCidr = try decoderContainer.decode(String?.self, forKey: .nodeNetworkCidr)
        }
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
    }
}
public extension NodeNetwork{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NodeNetworkCodingKeys.self)
         try encoderContainer.encode(podSubnetId, forKey: .podSubnetId)
         try encoderContainer.encode(nodeSubnetId, forKey: .nodeSubnetId)
         try encoderContainer.encode(serviceSubnetId, forKey: .serviceSubnetId)
         try encoderContainer.encode(servicePublicSubnetId, forKey: .servicePublicSubnetId)
         try encoderContainer.encode(nodeNetworkCidr, forKey: .nodeNetworkCidr)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
    }
}
