/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  描述一个masterAuth
@objc(MasterAuth)
public class MasterAuth:NSObject,Codable{
    /// base64编码，集群的根的public certificate
    var clusterCaCertificate:String?
    /// base64编码，客户端连接集群的public certificate
    var clientCertificate:String?
    /// base64编码, client的私钥
    var clientKey:String?
    /// basic auth的user
    var user:String?
    /// basic auth的password
    var password:String?



    public override init(){
            super.init()
    }

    enum MasterAuthCodingKeys: String, CodingKey {
        case clusterCaCertificate
        case clientCertificate
        case clientKey
        case user
        case password
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: MasterAuthCodingKeys.self)
        if decoderContainer.contains(.clusterCaCertificate)
        {
            self.clusterCaCertificate = try decoderContainer.decode(String?.self, forKey: .clusterCaCertificate)
        }
        if decoderContainer.contains(.clientCertificate)
        {
            self.clientCertificate = try decoderContainer.decode(String?.self, forKey: .clientCertificate)
        }
        if decoderContainer.contains(.clientKey)
        {
            self.clientKey = try decoderContainer.decode(String?.self, forKey: .clientKey)
        }
        if decoderContainer.contains(.user)
        {
            self.user = try decoderContainer.decode(String?.self, forKey: .user)
        }
        if decoderContainer.contains(.password)
        {
            self.password = try decoderContainer.decode(String?.self, forKey: .password)
        }
    }
}
public extension MasterAuth{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: MasterAuthCodingKeys.self)
         try encoderContainer.encode(clusterCaCertificate, forKey: .clusterCaCertificate)
         try encoderContainer.encode(clientCertificate, forKey: .clientCertificate)
         try encoderContainer.encode(clientKey, forKey: .clientKey)
         try encoderContainer.encode(user, forKey: .user)
         try encoderContainer.encode(password, forKey: .password)
    }
}
