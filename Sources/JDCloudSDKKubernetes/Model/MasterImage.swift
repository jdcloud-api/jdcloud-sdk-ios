/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  masterImage
@objc(MasterImage)
public class MasterImage:NSObject,Codable{
    /// 镜像编码
    var code:String?
    /// 虚机镜像id
    var imageId:String?
    /// 主版本号
    var mainVersion:String?
    /// 内部版本号
    var innerVersion:String?
    /// 是否默认镜像
    var isDefault:Bool?
    /// 可见度:0：所有人可见；1：授权用户可见；2：只有白名单用户可见
    var visibility:Int?
    /// 默认ndoe镜像编码
    var defaultNodeImageCode:String?
    /// node 节点的配置
    var nodeImages:[NodeImage?]?



    public override init(){
            super.init()
    }

    enum MasterImageCodingKeys: String, CodingKey {
        case code
        case imageId
        case mainVersion
        case innerVersion
        case isDefault
        case visibility
        case defaultNodeImageCode
        case nodeImages
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: MasterImageCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(String?.self, forKey: .code)
        }
        if decoderContainer.contains(.imageId)
        {
            self.imageId = try decoderContainer.decode(String?.self, forKey: .imageId)
        }
        if decoderContainer.contains(.mainVersion)
        {
            self.mainVersion = try decoderContainer.decode(String?.self, forKey: .mainVersion)
        }
        if decoderContainer.contains(.innerVersion)
        {
            self.innerVersion = try decoderContainer.decode(String?.self, forKey: .innerVersion)
        }
        if decoderContainer.contains(.isDefault)
        {
            self.isDefault = try decoderContainer.decode(Bool?.self, forKey: .isDefault)
        }
        if decoderContainer.contains(.visibility)
        {
            self.visibility = try decoderContainer.decode(Int?.self, forKey: .visibility)
        }
        if decoderContainer.contains(.defaultNodeImageCode)
        {
            self.defaultNodeImageCode = try decoderContainer.decode(String?.self, forKey: .defaultNodeImageCode)
        }
        if decoderContainer.contains(.nodeImages)
        {
            self.nodeImages = try decoderContainer.decode([NodeImage?]?.self, forKey: .nodeImages)
        }
    }
}
public extension MasterImage{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: MasterImageCodingKeys.self)
         try encoderContainer.encode(code, forKey: .code)
         try encoderContainer.encode(imageId, forKey: .imageId)
         try encoderContainer.encode(mainVersion, forKey: .mainVersion)
         try encoderContainer.encode(innerVersion, forKey: .innerVersion)
         try encoderContainer.encode(isDefault, forKey: .isDefault)
         try encoderContainer.encode(visibility, forKey: .visibility)
         try encoderContainer.encode(defaultNodeImageCode, forKey: .defaultNodeImageCode)
         try encoderContainer.encode(nodeImages, forKey: .nodeImages)
    }
}
