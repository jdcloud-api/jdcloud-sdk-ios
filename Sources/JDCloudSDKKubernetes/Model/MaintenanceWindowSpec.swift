/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  集群维护窗口
@objc(MaintenanceWindowSpec)
public class MaintenanceWindowSpec:NSObject,Codable{
    /// daily, weekly, monthly， 默认 weekly
    var periodType:String?
    /// 维护操作开始具体日期, 仅对 periodType 取值为 weekly 或 monthly 时有效, periodType 为 weekly 时可以取 1-7, periodType 为 monthly 时可取 1-28
      /// 
    var startDay:Int?
    /// 维护操作开始具体时间. 时间格式符合RFC3339，并使用 UTC 时间，精确到分钟，例如 23:27
    /// Required:true
    var startTime:String
    /// 时区，使用 IANA 数据格式，例如：&quot;Asia/Shanghai&quot; 或 &quot;America/Los_Angeles&quot;，默认 &quot;UTC&quot;
    var timeZone:String?
    /// 维护运行时长: 4-24 小时，步长 1 小时， 默认为： 4小时
    var duration:Int?



    public  init(startTime:String){
             self.startTime = startTime
    }

    enum MaintenanceWindowSpecCodingKeys: String, CodingKey {
        case periodType
        case startDay
        case startTime
        case timeZone
        case duration
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: MaintenanceWindowSpecCodingKeys.self)
        if decoderContainer.contains(.periodType)
        {
            self.periodType = try decoderContainer.decode(String?.self, forKey: .periodType)
        }
        if decoderContainer.contains(.startDay)
        {
            self.startDay = try decoderContainer.decode(Int?.self, forKey: .startDay)
        }
        self.startTime = try decoderContainer.decode(String.self, forKey: .startTime)
        if decoderContainer.contains(.timeZone)
        {
            self.timeZone = try decoderContainer.decode(String?.self, forKey: .timeZone)
        }
        if decoderContainer.contains(.duration)
        {
            self.duration = try decoderContainer.decode(Int?.self, forKey: .duration)
        }
    }
}
public extension MaintenanceWindowSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: MaintenanceWindowSpecCodingKeys.self)
         try encoderContainer.encode(periodType, forKey: .periodType)
         try encoderContainer.encode(startDay, forKey: .startDay)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(timeZone, forKey: .timeZone)
         try encoderContainer.encode(duration, forKey: .duration)
    }
}
