/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  nodeImage
@objc(NodeImage)
public class NodeImage:NSObject,Codable{
    /// 镜像编码
    var code:String?
    /// 虚机镜像id
    var imageId:String?
    /// 镜像操作系统
    var imageOs:String?
    /// 主版本号
    var mainVersion:String?
    /// 内部版本号
    var innerVersion:String?
    /// 可见度
    var visibility:Int?



    public override init(){
            super.init()
    }

    enum NodeImageCodingKeys: String, CodingKey {
        case code
        case imageId
        case imageOs
        case mainVersion
        case innerVersion
        case visibility
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NodeImageCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(String?.self, forKey: .code)
        }
        if decoderContainer.contains(.imageId)
        {
            self.imageId = try decoderContainer.decode(String?.self, forKey: .imageId)
        }
        if decoderContainer.contains(.imageOs)
        {
            self.imageOs = try decoderContainer.decode(String?.self, forKey: .imageOs)
        }
        if decoderContainer.contains(.mainVersion)
        {
            self.mainVersion = try decoderContainer.decode(String?.self, forKey: .mainVersion)
        }
        if decoderContainer.contains(.innerVersion)
        {
            self.innerVersion = try decoderContainer.decode(String?.self, forKey: .innerVersion)
        }
        if decoderContainer.contains(.visibility)
        {
            self.visibility = try decoderContainer.decode(Int?.self, forKey: .visibility)
        }
    }
}
public extension NodeImage{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NodeImageCodingKeys.self)
         try encoderContainer.encode(code, forKey: .code)
         try encoderContainer.encode(imageId, forKey: .imageId)
         try encoderContainer.encode(imageOs, forKey: .imageOs)
         try encoderContainer.encode(mainVersion, forKey: .mainVersion)
         try encoderContainer.encode(innerVersion, forKey: .innerVersion)
         try encoderContainer.encode(visibility, forKey: .visibility)
    }
}
