/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Pod
   Pod 相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon

/// 查询资源的配额，支持：原生容器 pod 和 secret.
      ///       ///  
public class DescribeQuotaResult:NSObject,JdCloudResult
{
    /// Quota
    var quota:Quota?



    public override init(){
        super.init()
    }

    enum DescribeQuotaResultCodingKeys: String, CodingKey {
        case quota
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQuotaResultCodingKeys.self)
        if decoderContainer.contains(.quota)
        {
            self.quota = try decoderContainer.decode(Quota?.self, forKey: .quota)
        }
    }
}
public extension DescribeQuotaResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotaResultCodingKeys.self)
        try encoderContainer.encode(quota, forKey: .quota)
    }
}
public class DescribeQuotaResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeQuotaResult?;

    enum DescribeQuotaResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQuotaResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeQuotaResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeQuotaResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotaResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询资源的配额，支持：原生容器 pod 和 secret.
      ///       /// 
public class DescribeQuotaRequest:JdCloudRequest
{
    /// resourceType - 资源类型，支持 [container, pod, secret]
      /// 
    var resourceType:String


    public init(regionId: String,resourceType:String){
        self.resourceType = resourceType
        super.init(regionId: regionId)
    }


    enum DescribeQuotaRequestRequestCodingKeys: String, CodingKey {
        case resourceType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotaRequestRequestCodingKeys.self)
        try encoderContainer.encode(resourceType, forKey: .resourceType)

    }
}

/// 查询实例规格信息列表
      ///       ///  
public class DescribeInstanceTypesResult:NSObject,JdCloudResult
{
    /// 通用的实例规格
    var instanceTypes:[InstanceType?]?

    /// 用户特有的实例规格；需要工单申请
    var specificInstanceTypes:[InstanceType?]?

    /// 总数量
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeInstanceTypesResultCodingKeys: String, CodingKey {
        case instanceTypes
        case specificInstanceTypes
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceTypesResultCodingKeys.self)
        if decoderContainer.contains(.instanceTypes)
        {
            self.instanceTypes = try decoderContainer.decode([InstanceType?]?.self, forKey: .instanceTypes)
        }
        if decoderContainer.contains(.specificInstanceTypes)
        {
            self.specificInstanceTypes = try decoderContainer.decode([InstanceType?]?.self, forKey: .specificInstanceTypes)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInstanceTypesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTypesResultCodingKeys.self)
        try encoderContainer.encode(instanceTypes, forKey: .instanceTypes)
        try encoderContainer.encode(specificInstanceTypes, forKey: .specificInstanceTypes)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeInstanceTypesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceTypesResult?;

    enum DescribeInstanceTypesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceTypesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceTypesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceTypesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTypesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询实例规格信息列表
      ///       /// 
public class DescribeInstanceTypesRequest:JdCloudRequest
{
    /// instanceTypes - 实例规格，精确匹配，支持多个
      /// az - 可用区，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeInstanceTypesRequestRequestCodingKeys: String, CodingKey {
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTypesRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class ResizeTTYResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResizeTTYResult?;

    enum ResizeTTYResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResizeTTYResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResizeTTYResult?.self, forKey: .result) ?? nil
    }
}

public extension ResizeTTYResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResizeTTYResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ExecStartResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ExecStartResult?;

    enum ExecStartResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecStartResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ExecStartResult?.self, forKey: .result) ?? nil
    }
}

public extension ExecStartResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecStartResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 执行exec，此接口需要升级Http协议到WebSocket 
public class ExecStartResult:NSObject,JdCloudResult
{
}

///  创建 exec
      ///       /// 
public class ExecCreateRequest:JdCloudRequest
{
    /// 执行的命令
    var command:[String?]?

    /// 执行命令是否分配tty。默认不分配
    var tty:Bool?

    /// Pod ID
    var podId:String

    /// container name
    var containerName:String


    public init(regionId: String,podId:String,containerName:String){
        self.podId = podId
        self.containerName = containerName
        super.init(regionId: regionId)
    }


    enum ExecCreateRequestRequestCodingKeys: String, CodingKey {
        case command
        case tty
        case podId
        case containerName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecCreateRequestRequestCodingKeys.self)
        try encoderContainer.encode(command, forKey: .command)
        try encoderContainer.encode(tty, forKey: .tty)
        try encoderContainer.encode(podId, forKey: .podId)
        try encoderContainer.encode(containerName, forKey: .containerName)

    }
}

/// 获取exec退出码 
public class ExecGetExitCodeResult:NSObject,JdCloudResult
{
    /// exec命令执行的退出码
    var execCode:Int?



    public override init(){
        super.init()
    }

    enum ExecGetExitCodeResultCodingKeys: String, CodingKey {
        case execCode
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecGetExitCodeResultCodingKeys.self)
        if decoderContainer.contains(.execCode)
        {
            self.execCode = try decoderContainer.decode(Int?.self, forKey: .execCode)
        }
    }
}
public extension ExecGetExitCodeResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecGetExitCodeResultCodingKeys.self)
        try encoderContainer.encode(execCode, forKey: .execCode)
    }
}

///  将容器连接到本地标准输入输出
      ///       /// 
public class AttachRequest:JdCloudRequest
{
    /// Pod ID
    var podId:String

    /// container name
    var containerName:String


    public init(regionId: String,podId:String,containerName:String){
        self.podId = podId
        self.containerName = containerName
        super.init(regionId: regionId)
    }


    enum AttachRequestRequestCodingKeys: String, CodingKey {
        case podId
        case containerName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachRequestRequestCodingKeys.self)
        try encoderContainer.encode(podId, forKey: .podId)
        try encoderContainer.encode(containerName, forKey: .containerName)

    }
}

public class AttachResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AttachResult?;

    enum AttachResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AttachResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AttachResult?.self, forKey: .result) ?? nil
    }
}

public extension AttachResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取 pod 中某个容器的详情
public class DescribeContainerRequest:JdCloudRequest
{
    /// Pod ID
    var podId:String

    /// container name
    var containerName:String


    public init(regionId: String,podId:String,containerName:String){
        self.podId = podId
        self.containerName = containerName
        super.init(regionId: regionId)
    }


    enum DescribeContainerRequestRequestCodingKeys: String, CodingKey {
        case podId
        case containerName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeContainerRequestRequestCodingKeys.self)
        try encoderContainer.encode(podId, forKey: .podId)
        try encoderContainer.encode(containerName, forKey: .containerName)

    }
}

/// 将容器连接到本地标准输入输出
      ///       ///  
public class AttachResult:NSObject,JdCloudResult
{
}

///  获取exec退出码
public class ExecGetExitCodeRequest:JdCloudRequest
{
    /// ExecId
    var execId:String

    /// Pod ID
    var podId:String

    /// container name
    var containerName:String


    public init(regionId: String,execId:String,podId:String,containerName:String){
        self.execId = execId
        self.podId = podId
        self.containerName = containerName
        super.init(regionId: regionId)
    }


    enum ExecGetExitCodeRequestRequestCodingKeys: String, CodingKey {
        case execId
        case podId
        case containerName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecGetExitCodeRequestRequestCodingKeys.self)
        try encoderContainer.encode(execId, forKey: .execId)
        try encoderContainer.encode(podId, forKey: .podId)
        try encoderContainer.encode(containerName, forKey: .containerName)

    }
}


///  执行exec，此接口需要升级Http协议到WebSocket
public class ExecStartRequest:JdCloudRequest
{
    /// ExecId
    var execId:String

    /// Pod ID
    var podId:String

    /// container name
    var containerName:String


    public init(regionId: String,execId:String,podId:String,containerName:String){
        self.execId = execId
        self.podId = podId
        self.containerName = containerName
        super.init(regionId: regionId)
    }


    enum ExecStartRequestRequestCodingKeys: String, CodingKey {
        case execId
        case podId
        case containerName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecStartRequestRequestCodingKeys.self)
        try encoderContainer.encode(execId, forKey: .execId)
        try encoderContainer.encode(podId, forKey: .podId)
        try encoderContainer.encode(containerName, forKey: .containerName)

    }
}

/// 创建 exec
      ///       ///  
public class ExecCreateResult:NSObject,JdCloudResult
{
    /// exec id
    var execId:String?



    public override init(){
        super.init()
    }

    enum ExecCreateResultCodingKeys: String, CodingKey {
        case execId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecCreateResultCodingKeys.self)
        if decoderContainer.contains(.execId)
        {
            self.execId = try decoderContainer.decode(String?.self, forKey: .execId)
        }
    }
}
public extension ExecCreateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecCreateResultCodingKeys.self)
        try encoderContainer.encode(execId, forKey: .execId)
    }
}

///  设置TTY大小
public class ResizeTTYRequest:JdCloudRequest
{
    /// tty row，取值范围：[10, 2000]
    var height:Int

    /// tty column，取值范围：[10, 1000]
    var width:Int

    /// exec ID
    var execId:String?

    /// Pod ID
    var podId:String

    /// container name
    var containerName:String


    public init(regionId: String,height:Int,width:Int,podId:String,containerName:String){
        self.height = height
        self.width = width
        self.podId = podId
        self.containerName = containerName
        super.init(regionId: regionId)
    }


    enum ResizeTTYRequestRequestCodingKeys: String, CodingKey {
        case height
        case width
        case execId
        case podId
        case containerName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResizeTTYRequestRequestCodingKeys.self)
        try encoderContainer.encode(height, forKey: .height)
        try encoderContainer.encode(width, forKey: .width)
        try encoderContainer.encode(execId, forKey: .execId)
        try encoderContainer.encode(podId, forKey: .podId)
        try encoderContainer.encode(containerName, forKey: .containerName)

    }
}

public class ExecCreateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ExecCreateResult?;

    enum ExecCreateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecCreateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ExecCreateResult?.self, forKey: .result) ?? nil
    }
}

public extension ExecCreateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecCreateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 设置TTY大小 
public class ResizeTTYResult:NSObject,JdCloudResult
{
}
public class ExecGetExitCodeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ExecGetExitCodeResult?;

    enum ExecGetExitCodeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecGetExitCodeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ExecGetExitCodeResult?.self, forKey: .result) ?? nil
    }
}

public extension ExecGetExitCodeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecGetExitCodeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeContainerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeContainerResult?;

    enum DescribeContainerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeContainerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeContainerResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeContainerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeContainerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取 pod 中某个容器的详情 
public class DescribeContainerResult:NSObject,JdCloudResult
{
    /// Container
    var container:Container?



    public override init(){
        super.init()
    }

    enum DescribeContainerResultCodingKeys: String, CodingKey {
        case container
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeContainerResultCodingKeys.self)
        if decoderContainer.contains(.container)
        {
            self.container = try decoderContainer.decode(Container?.self, forKey: .container)
        }
    }
}
public extension DescribeContainerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeContainerResultCodingKeys.self)
        try encoderContainer.encode(container, forKey: .container)
    }
}

///  创建一个 secret，用于存放镜像仓库机密相关信息。
      ///       /// 
public class CreateSecretRequest:JdCloudRequest
{
    /// 机密数据名称，不能重复
      /// 
    var name:String

    /// 机密数据的类型，目前仅支持：docker-registry 类型，用来和docker registry认证的类型。
      /// 
    var secretType:String

    /// 机密的数据。&lt;br&gt;
      /// key 的有效字符包括字母、数字、-、_和.； &lt;br&gt;
      /// value 是 Base64 编码的字符串，不能包含换行符（在 linux 下使用 base64 -w 0选项），每个value长度上限为4KB，整个data的长度不能超过256KB; &lt;br&gt;
      /// 必须包含server、username、password 字段，email 字段是可选的。&lt;br&gt;
      /// 
    var data:DockerRegistryData


    public init(regionId: String,name:String,secretType:String,data:DockerRegistryData){
        self.name = name
        self.secretType = secretType
        self.data = data
        super.init(regionId: regionId)
    }


    enum CreateSecretRequestRequestCodingKeys: String, CodingKey {
        case name
        case secretType
        case data
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecretRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(secretType, forKey: .secretType)
        try encoderContainer.encode(data, forKey: .data)

    }
}

public class DeleteSecretResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSecretResult?;

    enum DeleteSecretResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSecretResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSecretResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSecretResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecretResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除单个 secret
      ///       /// 
public class DeleteSecretRequest:JdCloudRequest
{
    /// Secret Name
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum DeleteSecretRequestRequestCodingKeys: String, CodingKey {
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecretRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)

    }
}

/// 删除单个 secret
      ///       ///  
public class DeleteSecretResult:NSObject,JdCloudResult
{
}

///  查询单个 secret 详情
      ///       /// 
public class DescribeSecretRequest:JdCloudRequest
{
    /// Secret Name
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum DescribeSecretRequestRequestCodingKeys: String, CodingKey {
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)

    }
}

/// 查询单个 secret 详情
      ///       ///  
public class DescribeSecretResult:NSObject,JdCloudResult
{
    /// Secret
    var secret:Secret?



    public override init(){
        super.init()
    }

    enum DescribeSecretResultCodingKeys: String, CodingKey {
        case secret
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretResultCodingKeys.self)
        if decoderContainer.contains(.secret)
        {
            self.secret = try decoderContainer.decode(Secret?.self, forKey: .secret)
        }
    }
}
public extension DescribeSecretResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretResultCodingKeys.self)
        try encoderContainer.encode(secret, forKey: .secret)
    }
}

///  查询 secret 列表。&lt;br&gt; 
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       /// 
public class DescribeSecretsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// name - secret名称，支持模糊搜索
      /// 
    var filters:[Filter?]?




    enum DescribeSecretsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class DescribeSecretResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSecretResult?;

    enum DescribeSecretResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSecretResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSecretResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateSecretResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSecretResult?;

    enum CreateSecretResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSecretResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSecretResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSecretResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecretResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询 secret 列表。&lt;br&gt; 
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       ///  
public class DescribeSecretsResult:NSObject,JdCloudResult
{
    /// Secrets
    var secrets:[Secret?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeSecretsResultCodingKeys: String, CodingKey {
        case secrets
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretsResultCodingKeys.self)
        if decoderContainer.contains(.secrets)
        {
            self.secrets = try decoderContainer.decode([Secret?]?.self, forKey: .secrets)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeSecretsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretsResultCodingKeys.self)
        try encoderContainer.encode(secrets, forKey: .secrets)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeSecretsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSecretsResult?;

    enum DescribeSecretsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSecretsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSecretsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建一个 secret，用于存放镜像仓库机密相关信息。
      ///       ///  
public class CreateSecretResult:NSObject,JdCloudResult
{
    /// SecretName
    var secretName:String?



    public override init(){
        super.init()
    }

    enum CreateSecretResultCodingKeys: String, CodingKey {
        case secretName
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSecretResultCodingKeys.self)
        if decoderContainer.contains(.secretName)
        {
            self.secretName = try decoderContainer.decode(String?.self, forKey: .secretName)
        }
    }
}
public extension CreateSecretResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecretResultCodingKeys.self)
        try encoderContainer.encode(secretName, forKey: .secretName)
    }
}

///  修改 pod 的描述。
      ///       /// 
public class ModifyPodAttributeRequest:JdCloudRequest
{
    /// 修改后的描述
    var descriptionValue:String?

    /// Pod ID
    var podId:String


    public init(regionId: String,podId:String){
        self.podId = podId
        super.init(regionId: regionId)
    }


    enum ModifyPodAttributeRequestRequestCodingKeys: String, CodingKey {
        case descriptionValue = "description"
        case podId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyPodAttributeRequestRequestCodingKeys.self)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(podId, forKey: .podId)

    }
}

/// 批量查询 pod 的详细信息&lt;br&gt;
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       ///  
public class DescribePodsResult:NSObject,JdCloudResult
{
    /// Pods
    var pods:[Pod?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribePodsResultCodingKeys: String, CodingKey {
        case pods
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePodsResultCodingKeys.self)
        if decoderContainer.contains(.pods)
        {
            self.pods = try decoderContainer.decode([Pod?]?.self, forKey: .pods)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribePodsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePodsResultCodingKeys.self)
        try encoderContainer.encode(pods, forKey: .pods)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class ModifyPodAttributeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyPodAttributeResult?;

    enum ModifyPodAttributeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyPodAttributeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyPodAttributeResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyPodAttributeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyPodAttributeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// pod 解绑公网 IP，解绑的是主网卡、主内网 IP 对应的弹性 IP.
      ///       ///  
public class DisassociateElasticIpResult:NSObject,JdCloudResult
{
}

///  启动处于关闭状态的单个 pod ，处在任务执行中的 pod 无法启动。&lt;br&gt;
      ///       /// pod 实例或其绑定的云盘已欠费时，容器将无法正常启动。&lt;br&gt;
      ///       /// 
public class StartPodRequest:JdCloudRequest
{
    /// Pod ID
    var podId:String


    public init(regionId: String,podId:String){
        self.podId = podId
        super.init(regionId: regionId)
    }


    enum StartPodRequestRequestCodingKeys: String, CodingKey {
        case podId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartPodRequestRequestCodingKeys.self)
        try encoderContainer.encode(podId, forKey: .podId)

    }
}

public class StopPodResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopPodResult?;

    enum StopPodResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopPodResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopPodResult?.self, forKey: .result) ?? nil
    }
}

public extension StopPodResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopPodResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetContainerLogsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetContainerLogsResult?;

    enum GetContainerLogsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetContainerLogsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetContainerLogsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetContainerLogsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetContainerLogsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  批量查询 pod 的详细信息&lt;br&gt;
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       /// 
public class DescribePodsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// podId - pod ID，精确匹配，支持多个
      /// privateIpAddress - 主网卡IP地址，模糊匹配，支持单个
      /// az - 可用区，精确匹配，支持多个
      /// vpcId - 私有网络ID，精确匹配，支持多个
      /// phase - pod 状态，精确匹配，支持多个
      /// name - 实例名称，模糊匹配，支持单个
      /// subnetId - 镜像ID，模糊匹配，支持单个
      /// 
    var filters:[Filter?]?

    /// Tag筛选条件
    var tags:[TagFilter?]?




    enum DescribePodsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case tags
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePodsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(tags, forKey: .tags)

    }
}

/// pod 绑定弹性公网 IP，绑定的是主网卡、主内网IP对应的弹性IP. &lt;br&gt;
      ///       /// 一个 pod 只能绑定一个弹性公网 IP(主网卡)，若主网卡已存在弹性公网IP，会返回错误。&lt;br&gt;
      ///       /// 如果是黑名单中的用户，会返回错误。
      ///       ///  
public class AssociateElasticIpResult:NSObject,JdCloudResult
{
}

///  创建一台或多台 pod
      ///       /// - 创建pod需要通过实名认证
      ///       /// - hostname规范
      ///       ///     - 支持两种方式：以标签方式书写或以完整主机名方式书写
      ///       ///     - 标签规范
      ///       ///         - 0-9，a-z(不分大小写)和-（减号），其他的都是无效的字符串
      ///       ///         - 不能以减号开始，也不能以减号结尾
      ///       ///         - 最小1个字符，最大63个字符
      ///       ///     - 完整的主机名由一系列标签与点连接组成
      ///       ///         - 标签与标签之间使用“.”(点)进行连接
      ///       ///         - 不能以“.”(点)开始，也不能以“.”(点)结尾
      ///       ///         - 整个主机名（包括标签以及分隔点“.”）最多有63个ASCII字符
      ///       ///     - 正则：^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]))*$
      ///       /// - 网络配置
      ///       ///     - 指定主网卡配置信息
      ///       ///         - 必须指定subnetId
      ///       ///         - 可以指定elasticIp规格来约束创建的弹性IP，带宽取值范围[1-100]Mbps，步进1Mbps
      ///       ///         - 可以指定网卡的主IP(primaryIpAddress)和辅助IP(secondaryIpAddresses)，此时maxCount只能为1
      ///       ///         - 可以设置网卡的自动删除autoDelete属性，指明是否删除实例时自动删除网卡
      ///       ///         - 安全组securityGroup需与子网Subnet在同一个私有网络VPC内
      ///       ///         - 一个 pod 创建时至多指定5个安全组
      ///       ///         - 主网卡deviceIndex设置为1
      ///       /// - 存储
      ///       ///     - volume分为container system disk和pod data volume，container system disk的挂载目录是/，data volume的挂载目录可以随意指定
      ///       ///     - container system disk
      ///       ///         - 只能是cloud类别
      ///       ///         - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1
      ///       ///         - 磁盘大小
      ///       ///             - 所有类型：范围[20,100]GB，步长为10G
      ///       ///         - 自动删除
      ///       ///             - 默认自动删除
      ///       ///         - 可以选择已存在的云硬盘
      ///       ///     - data volume
      ///       ///         - 当前只能选择cloud类别
      ///       ///         - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1
      ///       ///         - 磁盘大小
      ///       ///             - 所有类型：范围[20,4000]GB，步长为10G
      ///       ///         - 自动删除
      ///       ///             - 默认自动删除
      ///       ///         - 可以选择已存在的云硬盘
      ///       ///         - 可以从快照创建磁盘
      ///       /// - pod 容器日志
      ///       ///     - default：默认在本地分配10MB的存储空间，自动rotate
      ///       /// - DNS-1123 label规范
      ///       ///     - 长度范围: [1-63]
      ///       ///     - 正则表达式: ^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$
      ///       ///     - 例子: my-name, 123-abc
      ///       /// - DNS-1123 subdomain规范
      ///       ///     - 长度范围: [1-253]
      ///       ///     - 正则表达式: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
      ///       ///     - 例子: example.com, registry.docker-cn.com
      ///       /// - 其他
      ///       ///     - 创建完成后，pod 状态为running
      ///       ///     - maxCount为最大努力，不保证一定能达到maxCount
      ///       /// 
public class CreatePodsRequest:JdCloudRequest
{
    /// pod 创建参数
    var podSpec:PodSpec

    /// 购买实例数量；取值范围：[1,100]
    var maxCount:Int

    /// 保证请求幂等性的字符串；最大长度64个ASCII字符
    var clientToken:String?


    public init(regionId: String,podSpec:PodSpec,maxCount:Int){
        self.podSpec = podSpec
        self.maxCount = maxCount
        super.init(regionId: regionId)
    }


    enum CreatePodsRequestRequestCodingKeys: String, CodingKey {
        case podSpec
        case maxCount
        case clientToken
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreatePodsRequestRequestCodingKeys.self)
        try encoderContainer.encode(podSpec, forKey: .podSpec)
        try encoderContainer.encode(maxCount, forKey: .maxCount)
        try encoderContainer.encode(clientToken, forKey: .clientToken)

    }
}


///  对 pod 中的容器使用新的镜像进行重置，pod 需要处于关闭状态。
      ///       /// 
public class RebuildPodRequest:JdCloudRequest
{
    /// 重置容器相关参数
    var containers:[RebuildContainerSpec?]?

    /// Pod ID
    var podId:String


    public init(regionId: String,containers:[RebuildContainerSpec?]?,podId:String){
        self.containers = containers
        self.podId = podId
        super.init(regionId: regionId)
    }


    enum RebuildPodRequestRequestCodingKeys: String, CodingKey {
        case containers
        case podId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RebuildPodRequestRequestCodingKeys.self)
        try encoderContainer.encode(containers, forKey: .containers)
        try encoderContainer.encode(podId, forKey: .podId)

    }
}


///  查询一个 pod 的详细信息
      ///       /// 
public class DescribePodRequest:JdCloudRequest
{
    /// Pod ID
    var podId:String


    public init(regionId: String,podId:String){
        self.podId = podId
        super.init(regionId: regionId)
    }


    enum DescribePodRequestRequestCodingKeys: String, CodingKey {
        case podId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePodRequestRequestCodingKeys.self)
        try encoderContainer.encode(podId, forKey: .podId)

    }
}

/// 停止处于运行状态的单个实例，处于任务执行中的 pod 无法启动。
      ///       ///  
public class StopPodResult:NSObject,JdCloudResult
{
}
/// pod 状态必须为 stopped、running 或 error状态。 &lt;br&gt;
      ///       /// 按量付费的实例，如不主动删除将一直运行，不再使用的实例，可通过本接口主动停用。&lt;br&gt;
      ///       /// 只能支持主动删除按量计费类型的实例。包年包月过期的 pod 也可以删除，其它的情况还请发工单系统。计费状态异常的容器无法删除。
      ///       ///  [MFA enabled] 
public class DeletePodResult:NSObject,JdCloudResult
{
}

///  podName 是否符合命名规范，以及查询指定 podName 区域内是否已经存在。
      ///       /// 
public class CheckPodNameRequest:JdCloudRequest
{
    /// 用户定义的 pod 名称，符合 DNS-1123 subdomain 规范。
    var podName:String

    /// 需要创建的 pod 总数，默认创建一个，不同的总数会对校验结果产生影响。
    var maxCount:Int?


    public init(regionId: String,podName:String){
        self.podName = podName
        super.init(regionId: regionId)
    }


    enum CheckPodNameRequestRequestCodingKeys: String, CodingKey {
        case podName
        case maxCount
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckPodNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(podName, forKey: .podName)
        try encoderContainer.encode(maxCount, forKey: .maxCount)

    }
}

/// 调整pod实例类型配置。
      ///       /// - pod phase 需是停止状态；
      ///       /// - 支持升配、降配；**不支持原有规格**
      ///       /// - 计费类型不变
      ///       ///     - 包年包月：需要计算配置差价，如果所选配置价格高，需要补齐到期前的差价，到期时间不变；如果所选配置价格低，需要延长到期时间
      ///       ///     - 按配置：按照所选规格，进行计费
      ///       /// - 支持对 pod 中的容器进行资源限制、资源需求的调整
      ///       ///     - 容器需求的总资源占用不得超过 pod 的实例类型
      ///       ///     - 容器资源限制不得超过 pod 的实例类型
      ///       ///  
public class ResizePodResult:NSObject,JdCloudResult
{
}
/// 查询一个 pod 的详细信息
      ///       ///  
public class DescribePodResult:NSObject,JdCloudResult
{
    /// Pod
    var pod:Pod?



    public override init(){
        super.init()
    }

    enum DescribePodResultCodingKeys: String, CodingKey {
        case pod
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePodResultCodingKeys.self)
        if decoderContainer.contains(.pod)
        {
            self.pod = try decoderContainer.decode(Pod?.self, forKey: .pod)
        }
    }
}
public extension DescribePodResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePodResultCodingKeys.self)
        try encoderContainer.encode(pod, forKey: .pod)
    }
}

///  pod 绑定弹性公网 IP，绑定的是主网卡、主内网IP对应的弹性IP. &lt;br&gt;
      ///       /// 一个 pod 只能绑定一个弹性公网 IP(主网卡)，若主网卡已存在弹性公网IP，会返回错误。&lt;br&gt;
      ///       /// 如果是黑名单中的用户，会返回错误。
      ///       /// 
public class AssociateElasticIpRequest:JdCloudRequest
{
    /// 弹性IP ID
    var elasticIpId:String

    /// Pod ID
    var podId:String


    public init(regionId: String,elasticIpId:String,podId:String){
        self.elasticIpId = elasticIpId
        self.podId = podId
        super.init(regionId: regionId)
    }


    enum AssociateElasticIpRequestRequestCodingKeys: String, CodingKey {
        case elasticIpId
        case podId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(podId, forKey: .podId)

    }
}

/// 启动处于关闭状态的单个 pod ，处在任务执行中的 pod 无法启动。&lt;br&gt;
      ///       /// pod 实例或其绑定的云盘已欠费时，容器将无法正常启动。&lt;br&gt;
      ///       ///  
public class StartPodResult:NSObject,JdCloudResult
{
}
public class CheckPodNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CheckPodNameResult?;

    enum CheckPodNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckPodNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CheckPodNameResult?.self, forKey: .result) ?? nil
    }
}

public extension CheckPodNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckPodNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改 pod 的描述。
      ///       ///  
public class ModifyPodAttributeResult:NSObject,JdCloudResult
{
}

///  pod 状态必须为 stopped、running 或 error状态。 &lt;br&gt;
      ///       /// 按量付费的实例，如不主动删除将一直运行，不再使用的实例，可通过本接口主动停用。&lt;br&gt;
      ///       /// 只能支持主动删除按量计费类型的实例。包年包月过期的 pod 也可以删除，其它的情况还请发工单系统。计费状态异常的容器无法删除。
      ///       ///  [MFA enabled]
public class DeletePodRequest:JdCloudRequest
{
    /// Pod ID
    var podId:String


    public init(regionId: String,podId:String){
        self.podId = podId
        super.init(regionId: regionId)
    }


    enum DeletePodRequestRequestCodingKeys: String, CodingKey {
        case podId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeletePodRequestRequestCodingKeys.self)
        try encoderContainer.encode(podId, forKey: .podId)

    }
}

public class StartPodResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartPodResult?;

    enum StartPodResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartPodResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartPodResult?.self, forKey: .result) ?? nil
    }
}

public extension StartPodResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartPodResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建一台或多台 pod
      ///       /// - 创建pod需要通过实名认证
      ///       /// - hostname规范
      ///       ///     - 支持两种方式：以标签方式书写或以完整主机名方式书写
      ///       ///     - 标签规范
      ///       ///         - 0-9，a-z(不分大小写)和-（减号），其他的都是无效的字符串
      ///       ///         - 不能以减号开始，也不能以减号结尾
      ///       ///         - 最小1个字符，最大63个字符
      ///       ///     - 完整的主机名由一系列标签与点连接组成
      ///       ///         - 标签与标签之间使用“.”(点)进行连接
      ///       ///         - 不能以“.”(点)开始，也不能以“.”(点)结尾
      ///       ///         - 整个主机名（包括标签以及分隔点“.”）最多有63个ASCII字符
      ///       ///     - 正则：^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]))*$
      ///       /// - 网络配置
      ///       ///     - 指定主网卡配置信息
      ///       ///         - 必须指定subnetId
      ///       ///         - 可以指定elasticIp规格来约束创建的弹性IP，带宽取值范围[1-100]Mbps，步进1Mbps
      ///       ///         - 可以指定网卡的主IP(primaryIpAddress)和辅助IP(secondaryIpAddresses)，此时maxCount只能为1
      ///       ///         - 可以设置网卡的自动删除autoDelete属性，指明是否删除实例时自动删除网卡
      ///       ///         - 安全组securityGroup需与子网Subnet在同一个私有网络VPC内
      ///       ///         - 一个 pod 创建时至多指定5个安全组
      ///       ///         - 主网卡deviceIndex设置为1
      ///       /// - 存储
      ///       ///     - volume分为container system disk和pod data volume，container system disk的挂载目录是/，data volume的挂载目录可以随意指定
      ///       ///     - container system disk
      ///       ///         - 只能是cloud类别
      ///       ///         - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1
      ///       ///         - 磁盘大小
      ///       ///             - 所有类型：范围[20,100]GB，步长为10G
      ///       ///         - 自动删除
      ///       ///             - 默认自动删除
      ///       ///         - 可以选择已存在的云硬盘
      ///       ///     - data volume
      ///       ///         - 当前只能选择cloud类别
      ///       ///         - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1
      ///       ///         - 磁盘大小
      ///       ///             - 所有类型：范围[20,4000]GB，步长为10G
      ///       ///         - 自动删除
      ///       ///             - 默认自动删除
      ///       ///         - 可以选择已存在的云硬盘
      ///       ///         - 可以从快照创建磁盘
      ///       /// - pod 容器日志
      ///       ///     - default：默认在本地分配10MB的存储空间，自动rotate
      ///       /// - DNS-1123 label规范
      ///       ///     - 长度范围: [1-63]
      ///       ///     - 正则表达式: ^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$
      ///       ///     - 例子: my-name, 123-abc
      ///       /// - DNS-1123 subdomain规范
      ///       ///     - 长度范围: [1-253]
      ///       ///     - 正则表达式: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
      ///       ///     - 例子: example.com, registry.docker-cn.com
      ///       /// - 其他
      ///       ///     - 创建完成后，pod 状态为running
      ///       ///     - maxCount为最大努力，不保证一定能达到maxCount
      ///       ///  
public class CreatePodsResult:NSObject,JdCloudResult
{
    /// PodIds
    var podIds:[String?]?



    public override init(){
        super.init()
    }

    enum CreatePodsResultCodingKeys: String, CodingKey {
        case podIds
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreatePodsResultCodingKeys.self)
        if decoderContainer.contains(.podIds)
        {
            self.podIds = try decoderContainer.decode([String?]?.self, forKey: .podIds)
        }
    }
}
public extension CreatePodsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreatePodsResultCodingKeys.self)
        try encoderContainer.encode(podIds, forKey: .podIds)
    }
}
public class CreatePodsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreatePodsResult?;

    enum CreatePodsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreatePodsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreatePodsResult?.self, forKey: .result) ?? nil
    }
}

public extension CreatePodsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreatePodsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ResizePodResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResizePodResult?;

    enum ResizePodResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResizePodResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResizePodResult?.self, forKey: .result) ?? nil
    }
}

public extension ResizePodResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResizePodResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class RebuildPodResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RebuildPodResult?;

    enum RebuildPodResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RebuildPodResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RebuildPodResult?.self, forKey: .result) ?? nil
    }
}

public extension RebuildPodResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RebuildPodResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询单个容器日志
      ///       ///  
public class GetContainerLogsResult:NSObject,JdCloudResult
{
    /// Logs
    var logs:Logs?



    public override init(){
        super.init()
    }

    enum GetContainerLogsResultCodingKeys: String, CodingKey {
        case logs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetContainerLogsResultCodingKeys.self)
        if decoderContainer.contains(.logs)
        {
            self.logs = try decoderContainer.decode(Logs?.self, forKey: .logs)
        }
    }
}
public extension GetContainerLogsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetContainerLogsResultCodingKeys.self)
        try encoderContainer.encode(logs, forKey: .logs)
    }
}
/// 对 pod 中的容器使用新的镜像进行重置，pod 需要处于关闭状态。
      ///       ///  
public class RebuildPodResult:NSObject,JdCloudResult
{
}

///  停止处于运行状态的单个实例，处于任务执行中的 pod 无法启动。
      ///       /// 
public class StopPodRequest:JdCloudRequest
{
    /// Pod ID
    var podId:String


    public init(regionId: String,podId:String){
        self.podId = podId
        super.init(regionId: regionId)
    }


    enum StopPodRequestRequestCodingKeys: String, CodingKey {
        case podId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopPodRequestRequestCodingKeys.self)
        try encoderContainer.encode(podId, forKey: .podId)

    }
}

public class DescribePodsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribePodsResult?;

    enum DescribePodsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePodsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribePodsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribePodsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePodsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribePodResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribePodResult?;

    enum DescribePodResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribePodResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribePodResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribePodResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribePodResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AssociateElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AssociateElasticIpResult?;

    enum AssociateElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AssociateElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension AssociateElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  pod 解绑公网 IP，解绑的是主网卡、主内网 IP 对应的弹性 IP.
      ///       /// 
public class DisassociateElasticIpRequest:JdCloudRequest
{
    /// 弹性IP ID
    var elasticIpId:String

    /// Pod ID
    var podId:String


    public init(regionId: String,elasticIpId:String,podId:String){
        self.elasticIpId = elasticIpId
        self.podId = podId
        super.init(regionId: regionId)
    }


    enum DisassociateElasticIpRequestRequestCodingKeys: String, CodingKey {
        case elasticIpId
        case podId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(podId, forKey: .podId)

    }
}


///  调整pod实例类型配置。
      ///       /// - pod phase 需是停止状态；
      ///       /// - 支持升配、降配；**不支持原有规格**
      ///       /// - 计费类型不变
      ///       ///     - 包年包月：需要计算配置差价，如果所选配置价格高，需要补齐到期前的差价，到期时间不变；如果所选配置价格低，需要延长到期时间
      ///       ///     - 按配置：按照所选规格，进行计费
      ///       /// - 支持对 pod 中的容器进行资源限制、资源需求的调整
      ///       ///     - 容器需求的总资源占用不得超过 pod 的实例类型
      ///       ///     - 容器资源限制不得超过 pod 的实例类型
      ///       /// 
public class ResizePodRequest:JdCloudRequest
{
    /// 新实例类型，不可与原实例类型相同
    var instanceType:String

    /// 新实例类型，不可与原实例类型相同
    var containerResources:[ContainerResourceSpec?]?

    /// Pod ID
    var podId:String


    public init(regionId: String,instanceType:String,podId:String){
        self.instanceType = instanceType
        self.podId = podId
        super.init(regionId: regionId)
    }


    enum ResizePodRequestRequestCodingKeys: String, CodingKey {
        case instanceType
        case containerResources
        case podId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResizePodRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceType, forKey: .instanceType)
        try encoderContainer.encode(containerResources, forKey: .containerResources)
        try encoderContainer.encode(podId, forKey: .podId)

    }
}

public class DeletePodResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeletePodResult?;

    enum DeletePodResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeletePodResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeletePodResult?.self, forKey: .result) ?? nil
    }
}

public extension DeletePodResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeletePodResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DisassociateElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisassociateElasticIpResult?;

    enum DisassociateElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisassociateElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisassociateElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DisassociateElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// podName 是否符合命名规范，以及查询指定 podName 区域内是否已经存在。
      ///       ///  
public class CheckPodNameResult:NSObject,JdCloudResult
{
    /// 用户指定 podName 是否通过校验 0 通过 1 名称为空 2 不符合规范 3 重名。
    var code:Int?

    /// code 字段非零时，给出详细原因。
    var reason:String?



    public override init(){
        super.init()
    }

    enum CheckPodNameResultCodingKeys: String, CodingKey {
        case code
        case reason
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckPodNameResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.reason)
        {
            self.reason = try decoderContainer.decode(String?.self, forKey: .reason)
        }
    }
}
public extension CheckPodNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckPodNameResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(reason, forKey: .reason)
    }
}

///  查询单个容器日志
      ///       /// 
public class GetContainerLogsRequest:JdCloudRequest
{
    /// 返回日志文件中倒数 tailLines 行，如不指定，默认从容器启动时或 sinceSeconds 指定的时间读取。
      /// 
    var tailLines:Int?

    /// 返回相对于当前时间之前sinceSeconds之内的日志。
      /// 
    var sinceSeconds:Int?

    /// 限制返回的日志文件内容字节数，取值范围 [1-4]KB，最大 4KB.
      /// 
    var limitBytes:Int?

    /// 日志时间上限，不传表示不限时间
      /// 
    var startTime:String?

    /// 日志时间下限，不传表示不限时间
      /// 
    var endTime:String?

    /// Pod ID
    var podId:String

    /// container name
    var containerName:String


    public init(regionId: String,podId:String,containerName:String){
        self.podId = podId
        self.containerName = containerName
        super.init(regionId: regionId)
    }


    enum GetContainerLogsRequestRequestCodingKeys: String, CodingKey {
        case tailLines
        case sinceSeconds
        case limitBytes
        case startTime
        case endTime
        case podId
        case containerName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetContainerLogsRequestRequestCodingKeys.self)
        try encoderContainer.encode(tailLines, forKey: .tailLines)
        try encoderContainer.encode(sinceSeconds, forKey: .sinceSeconds)
        try encoderContainer.encode(limitBytes, forKey: .limitBytes)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(podId, forKey: .podId)
        try encoderContainer.encode(containerName, forKey: .containerName)

    }
}

