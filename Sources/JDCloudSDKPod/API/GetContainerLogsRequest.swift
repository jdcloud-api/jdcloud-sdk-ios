/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   pod
   pod 相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  查询单个容器日志
      ///       /// 
@objc(GetContainerLogsRequest)
public class GetContainerLogsRequest:JdCloudRequest
{
    /// 返回日志文件中倒数 tailLines 行，如不指定，默认从容器启动时或 sinceSeconds 指定的时间读取。
      /// 
    var tailLines:Int?

    /// 返回相对于当前时间之前sinceSeconds之内的日志。
      /// 
    var sinceSeconds:Int?

    /// 限制返回的日志文件内容字节数，取值范围 [1-4]KB，最大 4KB.
      /// 
    var limitBytes:Int?

    /// 日志时间上限，不传表示不限时间
      /// 
    var startTime:String?

    /// 日志时间下限，不传表示不限时间
      /// 
    var endTime:String?

    /// Pod ID
    var podId:String

    /// container name
    var containerName:String


    public init(regionId: String,podId:String,containerName:String){
        self.podId = podId
        self.containerName = containerName
        super.init(regionId: regionId)
    }


    enum GetContainerLogsRequestRequestCodingKeys: String, CodingKey {
        case tailLines
        case sinceSeconds
        case limitBytes
        case startTime
        case endTime
        case podId
        case containerName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetContainerLogsRequestRequestCodingKeys.self)
        try encoderContainer.encode(tailLines, forKey: .tailLines)
        try encoderContainer.encode(sinceSeconds, forKey: .sinceSeconds)
        try encoderContainer.encode(limitBytes, forKey: .limitBytes)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(podId, forKey: .podId)
        try encoderContainer.encode(containerName, forKey: .containerName)

    }
}
