/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   pod
   pod 服务

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class PodJDCloudClient:NSObject,JDCloudClient{
    
    private final var podJDCloudClient:PodJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        podJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "pod.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        podJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "pod/" + "v1"
    
    public let serviceName: String = "pod"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func describeQuotaAsync(request:DescribeQuotaRequest,requestComplation:@escaping ExecuteResult<DescribeQuotaResult>) throws {
        podJDCloudClient = self
        try DescribeQuotaExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeContainerAsync(request:DescribeContainerRequest,requestComplation:@escaping ExecuteResult<DescribeContainerResult>) throws {
        podJDCloudClient = self
        try DescribeContainerExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSecretsAsync(request:DescribeSecretsRequest,requestComplation:@escaping ExecuteResult<DescribeSecretsResult>) throws {
        podJDCloudClient = self
        try DescribeSecretsExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createSecretAsync(request:CreateSecretRequest,requestComplation:@escaping ExecuteResult<CreateSecretResult>) throws {
        podJDCloudClient = self
        try CreateSecretExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSecretAsync(request:DescribeSecretRequest,requestComplation:@escaping ExecuteResult<DescribeSecretResult>) throws {
        podJDCloudClient = self
        try DescribeSecretExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disassociateElasticIpAsync(request:DisassociateElasticIpRequest,requestComplation:@escaping ExecuteResult<DisassociateElasticIpResult>) throws {
        podJDCloudClient = self
        try DisassociateElasticIpExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func resizeTTYAsync(request:ResizeTTYRequest,requestComplation:@escaping ExecuteResult<ResizeTTYResult>) throws {
        podJDCloudClient = self
        try ResizeTTYExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func attachAsync(request:AttachRequest,requestComplation:@escaping ExecuteResult<AttachResult>) throws {
        podJDCloudClient = self
        try AttachExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func execStartAsync(request:ExecStartRequest,requestComplation:@escaping ExecuteResult<ExecStartResult>) throws {
        podJDCloudClient = self
        try ExecStartExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startPodAsync(request:StartPodRequest,requestComplation:@escaping ExecuteResult<StartPodResult>) throws {
        podJDCloudClient = self
        try StartPodExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describePodsAsync(request:DescribePodsRequest,requestComplation:@escaping ExecuteResult<DescribePodsResult>) throws {
        podJDCloudClient = self
        try DescribePodsExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func execGetExitCodeAsync(request:ExecGetExitCodeRequest,requestComplation:@escaping ExecuteResult<ExecGetExitCodeResult>) throws {
        podJDCloudClient = self
        try ExecGetExitCodeExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createPodsAsync(request:CreatePodsRequest,requestComplation:@escaping ExecuteResult<CreatePodsResult>) throws {
        podJDCloudClient = self
        try CreatePodsExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func checkPodNameAsync(request:CheckPodNameRequest,requestComplation:@escaping ExecuteResult<CheckPodNameResult>) throws {
        podJDCloudClient = self
        try CheckPodNameExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getContainerLogsAsync(request:GetContainerLogsRequest,requestComplation:@escaping ExecuteResult<GetContainerLogsResult>) throws {
        podJDCloudClient = self
        try GetContainerLogsExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceTypesAsync(request:DescribeInstanceTypesRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceTypesResult>) throws {
        podJDCloudClient = self
        try DescribeInstanceTypesExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyPodAttributeAsync(request:ModifyPodAttributeRequest,requestComplation:@escaping ExecuteResult<ModifyPodAttributeResult>) throws {
        podJDCloudClient = self
        try ModifyPodAttributeExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deletePodAsync(request:DeletePodRequest,requestComplation:@escaping ExecuteResult<DeletePodResult>) throws {
        podJDCloudClient = self
        try DeletePodExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func rebuildPodAsync(request:RebuildPodRequest,requestComplation:@escaping ExecuteResult<RebuildPodResult>) throws {
        podJDCloudClient = self
        try RebuildPodExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func associateElasticIpAsync(request:AssociateElasticIpRequest,requestComplation:@escaping ExecuteResult<AssociateElasticIpResult>) throws {
        podJDCloudClient = self
        try AssociateElasticIpExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func resizePodAsync(request:ResizePodRequest,requestComplation:@escaping ExecuteResult<ResizePodResult>) throws {
        podJDCloudClient = self
        try ResizePodExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func execCreateAsync(request:ExecCreateRequest,requestComplation:@escaping ExecuteResult<ExecCreateResult>) throws {
        podJDCloudClient = self
        try ExecCreateExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopPodAsync(request:StopPodRequest,requestComplation:@escaping ExecuteResult<StopPodResult>) throws {
        podJDCloudClient = self
        try StopPodExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describePodAsync(request:DescribePodRequest,requestComplation:@escaping ExecuteResult<DescribePodResult>) throws {
        podJDCloudClient = self
        try DescribePodExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteSecretAsync(request:DeleteSecretRequest,requestComplation:@escaping ExecuteResult<DeleteSecretResult>) throws {
        podJDCloudClient = self
        try DeleteSecretExecutor(jdCloudClient: podJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension PodJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "pod.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
