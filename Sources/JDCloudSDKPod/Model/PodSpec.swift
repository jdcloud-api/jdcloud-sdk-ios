/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCharge

///  指定的创建 pod 参数
@objc(PodSpec)
public class PodSpec:NSObject,Codable{
    /// Pod名称
    /// Required:true
    var name:String
    /// 描述信息，默认为空；允许输入UTF-8编码下的全部字符，不超过256字符。
    var descriptionValue:String?
    /// 主机名；范围：[1-63]个ASCII字符，默认值为 podId
    var hostname:String?
    /// pod中容器重启策略；Always, OnFailure, Never；默认：Always
    var restartPolicy:String?
    /// 优雅关机宽限时长，如果超时，则触发强制关机。默认：30s，值不能是负数，范围：[0-300]
    var terminationGracePeriodSeconds:Int?
    /// 实例类型；参考[文档](https://www.jdcloud.com/help/detail/1992/isCatalog/1)
    /// Required:true
    var instanceType:String
    /// 容器所属可用区
    /// Required:true
    var az:String
    /// pod内容器的/etc/resolv.conf配置
    var dnsConfig:DnsConfig?
    /// 容器日志配置信息；默认会在本地分配10MB的存储空间
    var logConfig:LogConfig?
    /// 域名和IP映射的信息；&lt;/br&gt; 最大10个alias
    var hostAliases:[HostAlias?]?
    /// 域名和IP映射的信息；&lt;/br&gt; 最大10个alias
    var volumes:[Volume?]?
    /// 域名和IP映射的信息；&lt;/br&gt; 最大10个alias
    /// Required:true
    var containers:[ContainerSpec?]
    /// 预付费（prepaid_by_duration）, 按配置后付费（postpaid_by_duration）。默认：按配置后付费
    var charge:ChargeSpec?
    /// 主网卡主IP关联的弹性IP规格
    var elasticIp:ElasticIp?
    /// 主网卡配置信息
    /// Required:true
    var primaryNetworkInterface:NetworkInterfaceAttachmentSpec



    public  init(name:String,instanceType:String,az:String,containers:[ContainerSpec?],primaryNetworkInterface:NetworkInterfaceAttachmentSpec){
             self.name = name
             self.instanceType = instanceType
             self.az = az
             self.containers = containers
             self.primaryNetworkInterface = primaryNetworkInterface
    }

    enum PodSpecCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case hostname
        case restartPolicy
        case terminationGracePeriodSeconds
        case instanceType
        case az
        case dnsConfig
        case logConfig
        case hostAliases
        case volumes
        case containers
        case charge
        case elasticIp
        case primaryNetworkInterface
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PodSpecCodingKeys.self)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.hostname)
        {
            self.hostname = try decoderContainer.decode(String?.self, forKey: .hostname)
        }
        if decoderContainer.contains(.restartPolicy)
        {
            self.restartPolicy = try decoderContainer.decode(String?.self, forKey: .restartPolicy)
        }
        if decoderContainer.contains(.terminationGracePeriodSeconds)
        {
            self.terminationGracePeriodSeconds = try decoderContainer.decode(Int?.self, forKey: .terminationGracePeriodSeconds)
        }
        self.instanceType = try decoderContainer.decode(String.self, forKey: .instanceType)
        self.az = try decoderContainer.decode(String.self, forKey: .az)
        if decoderContainer.contains(.dnsConfig)
        {
            self.dnsConfig = try decoderContainer.decode(DnsConfig?.self, forKey: .dnsConfig)
        }
        if decoderContainer.contains(.logConfig)
        {
            self.logConfig = try decoderContainer.decode(LogConfig?.self, forKey: .logConfig)
        }
        if decoderContainer.contains(.hostAliases)
        {
            self.hostAliases = try decoderContainer.decode([HostAlias?]?.self, forKey: .hostAliases)
        }
        if decoderContainer.contains(.volumes)
        {
            self.volumes = try decoderContainer.decode([Volume?]?.self, forKey: .volumes)
        }
        self.containers = try decoderContainer.decode([ContainerSpec?].self, forKey: .containers)
        if decoderContainer.contains(.charge)
        {
            self.charge = try decoderContainer.decode(ChargeSpec?.self, forKey: .charge)
        }
        if decoderContainer.contains(.elasticIp)
        {
            self.elasticIp = try decoderContainer.decode(ElasticIp?.self, forKey: .elasticIp)
        }
        self.primaryNetworkInterface = try decoderContainer.decode(NetworkInterfaceAttachmentSpec.self, forKey: .primaryNetworkInterface)
    }
}
public extension PodSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PodSpecCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(hostname, forKey: .hostname)
         try encoderContainer.encode(restartPolicy, forKey: .restartPolicy)
         try encoderContainer.encode(terminationGracePeriodSeconds, forKey: .terminationGracePeriodSeconds)
         try encoderContainer.encode(instanceType, forKey: .instanceType)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(dnsConfig, forKey: .dnsConfig)
         try encoderContainer.encode(logConfig, forKey: .logConfig)
         try encoderContainer.encode(hostAliases, forKey: .hostAliases)
         try encoderContainer.encode(volumes, forKey: .volumes)
         try encoderContainer.encode(containers, forKey: .containers)
         try encoderContainer.encode(charge, forKey: .charge)
         try encoderContainer.encode(elasticIp, forKey: .elasticIp)
         try encoderContainer.encode(primaryNetworkInterface, forKey: .primaryNetworkInterface)
    }
}
