/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKNc

///  机密数据
@objc(Secret)
public class Secret:NSObject,Codable{
    /// 机密数据名称
    var name:String?
    /// 私密数据的类型，目前仅支持如下类型：docker-registry：用来和docker registry认证的类型
    var type:String?
    /// 创建时间
    var createdAt:String?
    /// 机密的数据
    var data:DockerRegistryData?



    public override init(){
            super.init()
    }

    enum SecretCodingKeys: String, CodingKey {
        case name
        case type
        case createdAt
        case data
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SecretCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(String?.self, forKey: .type)
        }
        if decoderContainer.contains(.createdAt)
        {
            self.createdAt = try decoderContainer.decode(String?.self, forKey: .createdAt)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(DockerRegistryData?.self, forKey: .data)
        }
    }
}
public extension Secret{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SecretCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(createdAt, forKey: .createdAt)
         try encoderContainer.encode(data, forKey: .data)
    }
}
