/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  pod 中的 contianer 状态
@objc(ContainerStateTerminated)
public class ContainerStateTerminated:NSObject,Codable{
    /// 容器被termination的信号。
    var signal:Int?
    /// 容器被termination的退出码。
    var exitCode:Int?
    /// （简要）容器被termination的原因。
    var reason:String?
    /// 容器被termination的详细信息。
    var message:String?
    /// 容器被termination的时间。
    var finishedAt:String?
    /// 容器开始执行的时间。
    var startedAt:String?



    public override init(){
            super.init()
    }

    enum ContainerStateTerminatedCodingKeys: String, CodingKey {
        case signal
        case exitCode
        case reason
        case message
        case finishedAt
        case startedAt
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ContainerStateTerminatedCodingKeys.self)
        if decoderContainer.contains(.signal)
        {
            self.signal = try decoderContainer.decode(Int?.self, forKey: .signal)
        }
        if decoderContainer.contains(.exitCode)
        {
            self.exitCode = try decoderContainer.decode(Int?.self, forKey: .exitCode)
        }
        if decoderContainer.contains(.reason)
        {
            self.reason = try decoderContainer.decode(String?.self, forKey: .reason)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.finishedAt)
        {
            self.finishedAt = try decoderContainer.decode(String?.self, forKey: .finishedAt)
        }
        if decoderContainer.contains(.startedAt)
        {
            self.startedAt = try decoderContainer.decode(String?.self, forKey: .startedAt)
        }
    }
}
public extension ContainerStateTerminated{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ContainerStateTerminatedCodingKeys.self)
         try encoderContainer.encode(signal, forKey: .signal)
         try encoderContainer.encode(exitCode, forKey: .exitCode)
         try encoderContainer.encode(reason, forKey: .reason)
         try encoderContainer.encode(message, forKey: .message)
         try encoderContainer.encode(finishedAt, forKey: .finishedAt)
         try encoderContainer.encode(startedAt, forKey: .startedAt)
    }
}
