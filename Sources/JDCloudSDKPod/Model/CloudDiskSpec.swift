/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  容器系统盘配置
@objc(CloudDiskSpec)
public class CloudDiskSpec:NSObject,Codable{
    /// 云盘id，使用已有云盘
    var volumeId:String?
    /// 云盘名称
    var name:String?
    /// 云盘快照id，根据云盘快照创建云盘。
    var snapshot:String?
    /// 云盘类型：ssd,premium-hdd,hdd.std1,ssd.gp1,ssd.io1
    var diskType:String?
    /// 云盘size,单位 GB,要求
    var sizeGB:Int?
    /// 指定volume文件系统类型，目前支持[xfs, ext4]；如果新创建的盘，不指定文件系统类型默认格式化成xfs
    var fsType:String?
    /// 是否随pod删除。默认：true
    var autoDelete:Bool?



    public override init(){
            super.init()
    }

    enum CloudDiskSpecCodingKeys: String, CodingKey {
        case volumeId
        case name
        case snapshot
        case diskType
        case sizeGB
        case fsType
        case autoDelete
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CloudDiskSpecCodingKeys.self)
        if decoderContainer.contains(.volumeId)
        {
            self.volumeId = try decoderContainer.decode(String?.self, forKey: .volumeId)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.snapshot)
        {
            self.snapshot = try decoderContainer.decode(String?.self, forKey: .snapshot)
        }
        if decoderContainer.contains(.diskType)
        {
            self.diskType = try decoderContainer.decode(String?.self, forKey: .diskType)
        }
        if decoderContainer.contains(.sizeGB)
        {
            self.sizeGB = try decoderContainer.decode(Int?.self, forKey: .sizeGB)
        }
        if decoderContainer.contains(.fsType)
        {
            self.fsType = try decoderContainer.decode(String?.self, forKey: .fsType)
        }
        if decoderContainer.contains(.autoDelete)
        {
            self.autoDelete = try decoderContainer.decode(Bool?.self, forKey: .autoDelete)
        }
    }
}
public extension CloudDiskSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CloudDiskSpecCodingKeys.self)
         try encoderContainer.encode(volumeId, forKey: .volumeId)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(snapshot, forKey: .snapshot)
         try encoderContainer.encode(diskType, forKey: .diskType)
         try encoderContainer.encode(sizeGB, forKey: .sizeGB)
         try encoderContainer.encode(fsType, forKey: .fsType)
         try encoderContainer.encode(autoDelete, forKey: .autoDelete)
    }
}
