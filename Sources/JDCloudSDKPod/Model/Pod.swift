/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCharge

///  pod 详情
@objc(Pod)
public class Pod:NSObject,Codable{
    /// pod ID
    var podId:String?
    /// pod 名称
    var name:String?
    /// 描述信息，默认为空。
    var descriptionValue:String?
    /// 可用区
    var az:String?
    /// 主机名
    var hostname:String?
    /// pod 所需的计算资源规格
    var instanceType:String?
    /// pod重启策略
    var restartPolicy:String?
    /// 优雅关闭的时间
    var terminationGracePeriodSeconds:Int?
    /// 主网卡所属vpcId
    var vpcId:String?
    /// 主网卡所属子网的ID
    var subnetId:String?
    /// 主网卡主IP地址
    var privateIpAddress:String?
    /// pod内容器的/etc/resolv.conf配置
    var dnsConfig:DnsConfig?
    /// 容器日志配置信息；默认会在本地分配10MB的存储空间
    var logConfig:LogConfig?
    /// pod内容器的/etc/hosts配置
    var hostAliases:[HostAlias?]?
    /// 属于Pod的volume列表，提供挂载到containers上。
    var volumes:[Volume?]?
    /// pod内的容器信息
    var containers:[Container?]?
    /// pod状态信息
    var podStatus:PodStatus?
    /// 主网卡主IP关联的弹性IP规格
    var elasticIp:ElasticIp?
    /// 主网卡配置信息
    var primaryNetworkInterface:NetworkInterfaceAttachment?
    /// Tags
    var tags:[Tag?]?
    /// 计费配置；如不指定，默认计费类型是后付费-按使用时常付费
    var charge:Charge?
    /// Pod创建时间
    var createTime:String?



    public override init(){
            super.init()
    }

    enum PodCodingKeys: String, CodingKey {
        case podId
        case name
        case descriptionValue = "description"
        case az
        case hostname
        case instanceType
        case restartPolicy
        case terminationGracePeriodSeconds
        case vpcId
        case subnetId
        case privateIpAddress
        case dnsConfig
        case logConfig
        case hostAliases
        case volumes
        case containers
        case podStatus
        case elasticIp
        case primaryNetworkInterface
        case tags
        case charge
        case createTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PodCodingKeys.self)
        if decoderContainer.contains(.podId)
        {
            self.podId = try decoderContainer.decode(String?.self, forKey: .podId)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.az)
        {
            self.az = try decoderContainer.decode(String?.self, forKey: .az)
        }
        if decoderContainer.contains(.hostname)
        {
            self.hostname = try decoderContainer.decode(String?.self, forKey: .hostname)
        }
        if decoderContainer.contains(.instanceType)
        {
            self.instanceType = try decoderContainer.decode(String?.self, forKey: .instanceType)
        }
        if decoderContainer.contains(.restartPolicy)
        {
            self.restartPolicy = try decoderContainer.decode(String?.self, forKey: .restartPolicy)
        }
        if decoderContainer.contains(.terminationGracePeriodSeconds)
        {
            self.terminationGracePeriodSeconds = try decoderContainer.decode(Int?.self, forKey: .terminationGracePeriodSeconds)
        }
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
        if decoderContainer.contains(.privateIpAddress)
        {
            self.privateIpAddress = try decoderContainer.decode(String?.self, forKey: .privateIpAddress)
        }
        if decoderContainer.contains(.dnsConfig)
        {
            self.dnsConfig = try decoderContainer.decode(DnsConfig?.self, forKey: .dnsConfig)
        }
        if decoderContainer.contains(.logConfig)
        {
            self.logConfig = try decoderContainer.decode(LogConfig?.self, forKey: .logConfig)
        }
        if decoderContainer.contains(.hostAliases)
        {
            self.hostAliases = try decoderContainer.decode([HostAlias?]?.self, forKey: .hostAliases)
        }
        if decoderContainer.contains(.volumes)
        {
            self.volumes = try decoderContainer.decode([Volume?]?.self, forKey: .volumes)
        }
        if decoderContainer.contains(.containers)
        {
            self.containers = try decoderContainer.decode([Container?]?.self, forKey: .containers)
        }
        if decoderContainer.contains(.podStatus)
        {
            self.podStatus = try decoderContainer.decode(PodStatus?.self, forKey: .podStatus)
        }
        if decoderContainer.contains(.elasticIp)
        {
            self.elasticIp = try decoderContainer.decode(ElasticIp?.self, forKey: .elasticIp)
        }
        if decoderContainer.contains(.primaryNetworkInterface)
        {
            self.primaryNetworkInterface = try decoderContainer.decode(NetworkInterfaceAttachment?.self, forKey: .primaryNetworkInterface)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([Tag?]?.self, forKey: .tags)
        }
        if decoderContainer.contains(.charge)
        {
            self.charge = try decoderContainer.decode(Charge?.self, forKey: .charge)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
    }
}
public extension Pod{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PodCodingKeys.self)
         try encoderContainer.encode(podId, forKey: .podId)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(hostname, forKey: .hostname)
         try encoderContainer.encode(instanceType, forKey: .instanceType)
         try encoderContainer.encode(restartPolicy, forKey: .restartPolicy)
         try encoderContainer.encode(terminationGracePeriodSeconds, forKey: .terminationGracePeriodSeconds)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(privateIpAddress, forKey: .privateIpAddress)
         try encoderContainer.encode(dnsConfig, forKey: .dnsConfig)
         try encoderContainer.encode(logConfig, forKey: .logConfig)
         try encoderContainer.encode(hostAliases, forKey: .hostAliases)
         try encoderContainer.encode(volumes, forKey: .volumes)
         try encoderContainer.encode(containers, forKey: .containers)
         try encoderContainer.encode(podStatus, forKey: .podStatus)
         try encoderContainer.encode(elasticIp, forKey: .elasticIp)
         try encoderContainer.encode(primaryNetworkInterface, forKey: .primaryNetworkInterface)
         try encoderContainer.encode(tags, forKey: .tags)
         try encoderContainer.encode(charge, forKey: .charge)
         try encoderContainer.encode(createTime, forKey: .createTime)
    }
}
