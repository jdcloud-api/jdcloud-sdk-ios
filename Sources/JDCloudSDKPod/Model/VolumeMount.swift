/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  容器挂载信息
@objc(VolumeMount)
public class VolumeMount:NSObject,Codable{
    /// 必须使用pod volume名称
    /// Required:true
    var name:String
    /// 容器内挂载点，绝对路径，不得重复和嵌套挂载，不得挂载到根目录(&quot;/&quot;)。长度范围：[1-1024]
    /// Required:true
    var mountPath:String
    /// 是否以只读方式挂载。默认 读写模式
    var readOnly:Bool?



    public  init(name:String,mountPath:String){
             self.name = name
             self.mountPath = mountPath
    }

    enum VolumeMountCodingKeys: String, CodingKey {
        case name
        case mountPath
        case readOnly
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: VolumeMountCodingKeys.self)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        self.mountPath = try decoderContainer.decode(String.self, forKey: .mountPath)
        if decoderContainer.contains(.readOnly)
        {
            self.readOnly = try decoderContainer.decode(Bool?.self, forKey: .readOnly)
        }
    }
}
public extension VolumeMount{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: VolumeMountCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(mountPath, forKey: .mountPath)
         try encoderContainer.encode(readOnly, forKey: .readOnly)
    }
}
