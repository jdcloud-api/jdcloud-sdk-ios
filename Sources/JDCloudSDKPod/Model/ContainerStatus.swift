/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  pod 中的 contianer 状态
@objc(ContainerStatus)
public class ContainerStatus:NSObject,Codable{
    /// 容器名称
    var name:String?
    /// 容器被重新启动的次数
    var restartCount:Int?
    /// 容器是否通过了就绪探针探测
    var ready:Bool?
    /// 关于容器当前状态详细信息
    var state:ContainerState?
    /// 关于容器最后一次termination详细信息
    var lastState:ContainerState?



    public override init(){
            super.init()
    }

    enum ContainerStatusCodingKeys: String, CodingKey {
        case name
        case restartCount
        case ready
        case state
        case lastState
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ContainerStatusCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.restartCount)
        {
            self.restartCount = try decoderContainer.decode(Int?.self, forKey: .restartCount)
        }
        if decoderContainer.contains(.ready)
        {
            self.ready = try decoderContainer.decode(Bool?.self, forKey: .ready)
        }
        if decoderContainer.contains(.state)
        {
            self.state = try decoderContainer.decode(ContainerState?.self, forKey: .state)
        }
        if decoderContainer.contains(.lastState)
        {
            self.lastState = try decoderContainer.decode(ContainerState?.self, forKey: .lastState)
        }
    }
}
public extension ContainerStatus{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ContainerStatusCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(restartCount, forKey: .restartCount)
         try encoderContainer.encode(ready, forKey: .ready)
         try encoderContainer.encode(state, forKey: .state)
         try encoderContainer.encode(lastState, forKey: .lastState)
    }
}
