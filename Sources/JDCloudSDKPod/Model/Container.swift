/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  container 详情
@objc(Container)
public class Container:NSObject,Codable{
    /// 容器名称
    var name:String?
    /// 容器执行命令，如果不指定默认是docker镜像的ENTRYPOINT。总长度256个字符。
    var command:[String?]?
    /// 容器执行命令的参数，如果不指定默认是docker镜像的CMD。总长度2048个字符。
    var args:[String?]?
    /// 容器执行的环境变量；如果和镜像中的环境变量Key相同，会覆盖镜像中的值。长度范围：[0-100]
    var env:[EnvSpec?]?
    /// 镜像名称 &lt;/br&gt; 容器镜像名字。 nginx:latest。长度范围：[1-500] 1. Docker Hub官方镜像通过类似nginx, mysql/mysql-server的名字指定 &lt;/br&gt; 2. repository长度最大256个字符，tag最大128个字符，registry最大255个字符 &lt;/br&gt;
    var image:String?
    /// 镜像仓库secret名字。如果目前不传，默认选择dockerHub镜像
    var secret:String?
    /// 容器是否分配tty。默认不分配
    var tty:Bool?
    /// 容器的工作目录。如果不指定，默认是根目录（/）；必须是绝对路径；长度范围：[0-1024]
    var workingDir:String?
    /// 容器存活探针配置
    var livenessProbe:ProbeSpec?
    /// 容器服务就绪探针配置
    var readinessProbe:ProbeSpec?
    /// 容器计算资源配置
    var resources:ResourceRequestsSpec?
    /// 容器计算资源配置
    var systemDisk:CloudDiskSpec?
    /// 容器计算资源配置
    var volumeMounts:[VolumeMount?]?
    /// 容器状态信息
    var containerStatus:ContainerStatus?



    public override init(){
            super.init()
    }

    enum ContainerCodingKeys: String, CodingKey {
        case name
        case command
        case args
        case env
        case image
        case secret
        case tty
        case workingDir
        case livenessProbe
        case readinessProbe
        case resources
        case systemDisk
        case volumeMounts
        case containerStatus
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ContainerCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.command)
        {
            self.command = try decoderContainer.decode([String?]?.self, forKey: .command)
        }
        if decoderContainer.contains(.args)
        {
            self.args = try decoderContainer.decode([String?]?.self, forKey: .args)
        }
        if decoderContainer.contains(.env)
        {
            self.env = try decoderContainer.decode([EnvSpec?]?.self, forKey: .env)
        }
        if decoderContainer.contains(.image)
        {
            self.image = try decoderContainer.decode(String?.self, forKey: .image)
        }
        if decoderContainer.contains(.secret)
        {
            self.secret = try decoderContainer.decode(String?.self, forKey: .secret)
        }
        if decoderContainer.contains(.tty)
        {
            self.tty = try decoderContainer.decode(Bool?.self, forKey: .tty)
        }
        if decoderContainer.contains(.workingDir)
        {
            self.workingDir = try decoderContainer.decode(String?.self, forKey: .workingDir)
        }
        if decoderContainer.contains(.livenessProbe)
        {
            self.livenessProbe = try decoderContainer.decode(ProbeSpec?.self, forKey: .livenessProbe)
        }
        if decoderContainer.contains(.readinessProbe)
        {
            self.readinessProbe = try decoderContainer.decode(ProbeSpec?.self, forKey: .readinessProbe)
        }
        if decoderContainer.contains(.resources)
        {
            self.resources = try decoderContainer.decode(ResourceRequestsSpec?.self, forKey: .resources)
        }
        if decoderContainer.contains(.systemDisk)
        {
            self.systemDisk = try decoderContainer.decode(CloudDiskSpec?.self, forKey: .systemDisk)
        }
        if decoderContainer.contains(.volumeMounts)
        {
            self.volumeMounts = try decoderContainer.decode([VolumeMount?]?.self, forKey: .volumeMounts)
        }
        if decoderContainer.contains(.containerStatus)
        {
            self.containerStatus = try decoderContainer.decode(ContainerStatus?.self, forKey: .containerStatus)
        }
    }
}
public extension Container{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ContainerCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(command, forKey: .command)
         try encoderContainer.encode(args, forKey: .args)
         try encoderContainer.encode(env, forKey: .env)
         try encoderContainer.encode(image, forKey: .image)
         try encoderContainer.encode(secret, forKey: .secret)
         try encoderContainer.encode(tty, forKey: .tty)
         try encoderContainer.encode(workingDir, forKey: .workingDir)
         try encoderContainer.encode(livenessProbe, forKey: .livenessProbe)
         try encoderContainer.encode(readinessProbe, forKey: .readinessProbe)
         try encoderContainer.encode(resources, forKey: .resources)
         try encoderContainer.encode(systemDisk, forKey: .systemDisk)
         try encoderContainer.encode(volumeMounts, forKey: .volumeMounts)
         try encoderContainer.encode(containerStatus, forKey: .containerStatus)
    }
}
