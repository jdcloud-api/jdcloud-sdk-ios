/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD流计算API
   提供流计算操作的相关接口。

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class StreamcomputerJDCloudClient:NSObject,JDCloudClient{
    
    private final var streamcomputerJDCloudClient:StreamcomputerJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        streamcomputerJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "streamcompute.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        streamcomputerJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "streamcomputer/" + "v1"
    
    public let serviceName: String = "streamcomputer"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func queryNamespaceDetailAsync(request:QueryNamespaceDetailRequest,requestComplation:@escaping ExecuteResult<QueryNamespaceDetailResult>) throws {
        streamcomputerJDCloudClient = self
        try QueryNamespaceDetailExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeJobAsync(request:DescribeJobRequest,requestComplation:@escaping ExecuteResult<DescribeJobResult>) throws {
        streamcomputerJDCloudClient = self
        try DescribeJobExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeStorageAsync(request:DescribeStorageRequest,requestComplation:@escaping ExecuteResult<DescribeStorageResult>) throws {
        streamcomputerJDCloudClient = self
        try DescribeStorageExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteJobAsync(request:DeleteJobRequest,requestComplation:@escaping ExecuteResult<DeleteJobResult>) throws {
        streamcomputerJDCloudClient = self
        try DeleteJobExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addOrUpdateJobAsync(request:AddOrUpdateJobRequest,requestComplation:@escaping ExecuteResult<AddOrUpdateJobResult>) throws {
        streamcomputerJDCloudClient = self
        try AddOrUpdateJobExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryNamespacesAsync(request:QueryNamespacesRequest,requestComplation:@escaping ExecuteResult<QueryNamespacesResult>) throws {
        streamcomputerJDCloudClient = self
        try QueryNamespacesExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startJobAsync(request:StartJobRequest,requestComplation:@escaping ExecuteResult<StartJobResult>) throws {
        streamcomputerJDCloudClient = self
        try StartJobExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addOrUpdateStorageAsync(request:AddOrUpdateStorageRequest,requestComplation:@escaping ExecuteResult<AddOrUpdateStorageResult>) throws {
        streamcomputerJDCloudClient = self
        try AddOrUpdateStorageExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getJobListAsync(request:GetJobListRequest,requestComplation:@escaping ExecuteResult<GetJobListResult>) throws {
        streamcomputerJDCloudClient = self
        try GetJobListExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteNamespaceAsync(request:DeleteNamespaceRequest,requestComplation:@escaping ExecuteResult<DeleteNamespaceResult>) throws {
        streamcomputerJDCloudClient = self
        try DeleteNamespaceExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopJobAsync(request:StopJobRequest,requestComplation:@escaping ExecuteResult<StopJobResult>) throws {
        streamcomputerJDCloudClient = self
        try StopJobExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createNamespaceAsync(request:CreateNamespaceRequest,requestComplation:@escaping ExecuteResult<CreateNamespaceResult>) throws {
        streamcomputerJDCloudClient = self
        try CreateNamespaceExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getStorageListAsync(request:GetStorageListRequest,requestComplation:@escaping ExecuteResult<GetStorageListResult>) throws {
        streamcomputerJDCloudClient = self
        try GetStorageListExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateNamespaceAsync(request:UpdateNamespaceRequest,requestComplation:@escaping ExecuteResult<UpdateNamespaceResult>) throws {
        streamcomputerJDCloudClient = self
        try UpdateNamespaceExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteStorageAsync(request:DeleteStorageRequest,requestComplation:@escaping ExecuteResult<DeleteStorageResult>) throws {
        streamcomputerJDCloudClient = self
        try DeleteStorageExecutor(jdCloudClient: streamcomputerJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension StreamcomputerJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "streamcompute.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
