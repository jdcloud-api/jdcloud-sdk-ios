/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  namespace
@objc(Namespace)
public class Namespace:NSObject,Codable{
    /// Id
    var id:Int?
    /// Name
    var name:String?
    /// Pods
    var pods:String?
    /// Type
    var type:UInt8?
    /// TypeValue
    var typeValue:String?
    /// Deleted
    var deleted:Int?
    /// CreateTime
    var createTime:String?
    /// UpdateTime
    var updateTime:String?
    /// UserName
    var userName:String?
    /// Status
    var status:String?
    /// SourceId
    var sourceId:String?
    /// ResourceId
    var resourceId:String?
    /// PodsUpdateTime
    var podsUpdateTime:String?



    public override init(){
            super.init()
    }

    enum NamespaceCodingKeys: String, CodingKey {
        case id
        case name
        case pods
        case type
        case typeValue
        case deleted
        case createTime
        case updateTime
        case userName
        case status
        case sourceId
        case resourceId
        case podsUpdateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NamespaceCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.pods)
        {
            self.pods = try decoderContainer.decode(String?.self, forKey: .pods)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(UInt8?.self, forKey: .type)
        }
        if decoderContainer.contains(.typeValue)
        {
            self.typeValue = try decoderContainer.decode(String?.self, forKey: .typeValue)
        }
        if decoderContainer.contains(.deleted)
        {
            self.deleted = try decoderContainer.decode(Int?.self, forKey: .deleted)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
        if decoderContainer.contains(.userName)
        {
            self.userName = try decoderContainer.decode(String?.self, forKey: .userName)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.sourceId)
        {
            self.sourceId = try decoderContainer.decode(String?.self, forKey: .sourceId)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.podsUpdateTime)
        {
            self.podsUpdateTime = try decoderContainer.decode(String?.self, forKey: .podsUpdateTime)
        }
    }
}
public extension Namespace{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NamespaceCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(pods, forKey: .pods)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(typeValue, forKey: .typeValue)
         try encoderContainer.encode(deleted, forKey: .deleted)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
         try encoderContainer.encode(userName, forKey: .userName)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(sourceId, forKey: .sourceId)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(podsUpdateTime, forKey: .podsUpdateTime)
    }
}
