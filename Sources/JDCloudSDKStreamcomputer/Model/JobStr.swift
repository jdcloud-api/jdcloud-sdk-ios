/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  jobStr
@objc(JobStr)
public class JobStr:NSObject,Codable{
    /// NamespaceId
    var namespaceId:String?
    /// Name
    var name:String?
    /// Description
    var descriptionValue:String?
    /// ResourceConsume
    var resourceConsume:Int?
    /// Id
    var id:Int?
    /// Uid
    var uid:String?
    /// Status
    var status:UInt8?
    /// Duration
    var duration:Int?
    /// AppName
    var appName:String?
    /// Deleted
    var deleted:UInt8?
    /// CreateTime
    var createTime:String?
    /// UpdateTime
    var updateTime:String?
    /// UserName
    var userName:String?
    /// SqlStatement
    var sqlStatement:String?
    /// JobType
    var jobType:String?



    public override init(){
            super.init()
    }

    enum JobStrCodingKeys: String, CodingKey {
        case namespaceId
        case name
        case descriptionValue = "description"
        case resourceConsume
        case id
        case uid
        case status
        case duration
        case appName
        case deleted
        case createTime
        case updateTime
        case userName
        case sqlStatement
        case jobType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: JobStrCodingKeys.self)
        if decoderContainer.contains(.namespaceId)
        {
            self.namespaceId = try decoderContainer.decode(String?.self, forKey: .namespaceId)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.resourceConsume)
        {
            self.resourceConsume = try decoderContainer.decode(Int?.self, forKey: .resourceConsume)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.uid)
        {
            self.uid = try decoderContainer.decode(String?.self, forKey: .uid)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(UInt8?.self, forKey: .status)
        }
        if decoderContainer.contains(.duration)
        {
            self.duration = try decoderContainer.decode(Int?.self, forKey: .duration)
        }
        if decoderContainer.contains(.appName)
        {
            self.appName = try decoderContainer.decode(String?.self, forKey: .appName)
        }
        if decoderContainer.contains(.deleted)
        {
            self.deleted = try decoderContainer.decode(UInt8?.self, forKey: .deleted)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
        if decoderContainer.contains(.userName)
        {
            self.userName = try decoderContainer.decode(String?.self, forKey: .userName)
        }
        if decoderContainer.contains(.sqlStatement)
        {
            self.sqlStatement = try decoderContainer.decode(String?.self, forKey: .sqlStatement)
        }
        if decoderContainer.contains(.jobType)
        {
            self.jobType = try decoderContainer.decode(String?.self, forKey: .jobType)
        }
    }
}
public extension JobStr{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: JobStrCodingKeys.self)
         try encoderContainer.encode(namespaceId, forKey: .namespaceId)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(resourceConsume, forKey: .resourceConsume)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(uid, forKey: .uid)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(duration, forKey: .duration)
         try encoderContainer.encode(appName, forKey: .appName)
         try encoderContainer.encode(deleted, forKey: .deleted)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
         try encoderContainer.encode(userName, forKey: .userName)
         try encoderContainer.encode(sqlStatement, forKey: .sqlStatement)
         try encoderContainer.encode(jobType, forKey: .jobType)
    }
}
