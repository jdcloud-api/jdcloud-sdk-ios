/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   storage相关 API
   流计算storage相关信息接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  添加或者更新job
public class AddOrUpdateJobRequest:JdCloudRequest
{
    /// 创建作业的详情
    var jobStr:JobStr


    public init(regionId: String,jobStr:JobStr){
        self.jobStr = jobStr
        super.init(regionId: regionId)
    }


    enum AddOrUpdateJobRequestRequestCodingKeys: String, CodingKey {
        case jobStr
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddOrUpdateJobRequestRequestCodingKeys.self)
        try encoderContainer.encode(jobStr, forKey: .jobStr)

    }
}


///  删除作业
public class DeleteJobRequest:JdCloudRequest
{
    /// NamespaceId
    var namespaceId:String

    /// JobId
    var jobId:Int


    public init(regionId: String,namespaceId:String,jobId:Int){
        self.namespaceId = namespaceId
        self.jobId = jobId
        super.init(regionId: regionId)
    }


    enum DeleteJobRequestRequestCodingKeys: String, CodingKey {
        case namespaceId
        case jobId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteJobRequestRequestCodingKeys.self)
        try encoderContainer.encode(namespaceId, forKey: .namespaceId)
        try encoderContainer.encode(jobId, forKey: .jobId)

    }
}


///  查询指定作业详情
public class DescribeJobRequest:JdCloudRequest
{
    /// JobId
    var jobId:Int

    /// NamespaceId
    var namespaceId:Int


    public init(regionId: String,jobId:Int,namespaceId:Int){
        self.jobId = jobId
        self.namespaceId = namespaceId
        super.init(regionId: regionId)
    }


    enum DescribeJobRequestRequestCodingKeys: String, CodingKey {
        case jobId
        case namespaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeJobRequestRequestCodingKeys.self)
        try encoderContainer.encode(jobId, forKey: .jobId)
        try encoderContainer.encode(namespaceId, forKey: .namespaceId)

    }
}

/// 查询指定作业详情 
public class DescribeJobResult:NSObject,JdCloudResult
{
    /// JobStr
    var jobStr:JobStr?



    public override init(){
        super.init()
    }

    enum DescribeJobResultCodingKeys: String, CodingKey {
        case jobStr
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeJobResultCodingKeys.self)
        if decoderContainer.contains(.jobStr)
        {
            self.jobStr = try decoderContainer.decode(JobStr?.self, forKey: .jobStr)
        }
    }
}
public extension DescribeJobResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeJobResultCodingKeys.self)
        try encoderContainer.encode(jobStr, forKey: .jobStr)
    }
}
/// 删除作业 
public class DeleteJobResult:NSObject,JdCloudResult
{
    /// 删除job返回信息
    var message:String?

    /// Status
    var status:Bool?



    public override init(){
        super.init()
    }

    enum DeleteJobResultCodingKeys: String, CodingKey {
        case message
        case status
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteJobResultCodingKeys.self)
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
    }
}
public extension DeleteJobResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteJobResultCodingKeys.self)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(status, forKey: .status)
    }
}
public class DeleteJobResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteJobResult?;

    enum DeleteJobResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteJobResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteJobResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteJobResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteJobResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetJobListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetJobListResult?;

    enum GetJobListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetJobListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetJobListResult?.self, forKey: .result) ?? nil
    }
}

public extension GetJobListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetJobListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询指定应用下的所有job
public class GetJobListRequest:JdCloudRequest
{
    /// NamespaceId
    var namespaceId:String


    public init(regionId: String,namespaceId:String){
        self.namespaceId = namespaceId
        super.init(regionId: regionId)
    }


    enum GetJobListRequestRequestCodingKeys: String, CodingKey {
        case namespaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetJobListRequestRequestCodingKeys.self)
        try encoderContainer.encode(namespaceId, forKey: .namespaceId)

    }
}

public class DescribeJobResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeJobResult?;

    enum DescribeJobResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeJobResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeJobResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeJobResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeJobResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加或者更新job 
public class AddOrUpdateJobResult:NSObject,JdCloudResult
{
    /// 成功结果对象
    var okInfo:OkInfo?



    public override init(){
        super.init()
    }

    enum AddOrUpdateJobResultCodingKeys: String, CodingKey {
        case okInfo
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddOrUpdateJobResultCodingKeys.self)
        if decoderContainer.contains(.okInfo)
        {
            self.okInfo = try decoderContainer.decode(OkInfo?.self, forKey: .okInfo)
        }
    }
}
public extension AddOrUpdateJobResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddOrUpdateJobResultCodingKeys.self)
        try encoderContainer.encode(okInfo, forKey: .okInfo)
    }
}
/// 查询指定应用下的所有job 
public class GetJobListResult:NSObject,JdCloudResult
{
    /// 查询出的job对象
    var data:[JobStr?]?



    public override init(){
        super.init()
    }

    enum GetJobListResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetJobListResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([JobStr?]?.self, forKey: .data)
        }
    }
}
public extension GetJobListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetJobListResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class StopJobResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopJobResult?;

    enum StopJobResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopJobResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopJobResult?.self, forKey: .result) ?? nil
    }
}

public extension StopJobResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopJobResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 停止作业运行job 
public class StopJobResult:NSObject,JdCloudResult
{
    /// 成功启动作业返回信息
    var message:String?



    public override init(){
        super.init()
    }

    enum StopJobResultCodingKeys: String, CodingKey {
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopJobResultCodingKeys.self)
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension StopJobResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopJobResultCodingKeys.self)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class AddOrUpdateJobResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddOrUpdateJobResult?;

    enum AddOrUpdateJobResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddOrUpdateJobResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddOrUpdateJobResult?.self, forKey: .result) ?? nil
    }
}

public extension AddOrUpdateJobResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddOrUpdateJobResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 运行job 
public class StartJobResult:NSObject,JdCloudResult
{
    /// 是否成功提交作业
    var message:String?



    public override init(){
        super.init()
    }

    enum StartJobResultCodingKeys: String, CodingKey {
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartJobResultCodingKeys.self)
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension StartJobResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartJobResultCodingKeys.self)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class StartJobResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartJobResult?;

    enum StartJobResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartJobResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartJobResult?.self, forKey: .result) ?? nil
    }
}

public extension StartJobResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartJobResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  运行job
public class StartJobRequest:JdCloudRequest
{
    /// NamespaceId
    var namespaceId:String

    /// JobId
    var jobId:Int


    public init(regionId: String,namespaceId:String,jobId:Int){
        self.namespaceId = namespaceId
        self.jobId = jobId
        super.init(regionId: regionId)
    }


    enum StartJobRequestRequestCodingKeys: String, CodingKey {
        case namespaceId
        case jobId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartJobRequestRequestCodingKeys.self)
        try encoderContainer.encode(namespaceId, forKey: .namespaceId)
        try encoderContainer.encode(jobId, forKey: .jobId)

    }
}


///  停止作业运行job
public class StopJobRequest:JdCloudRequest
{
    /// NamespaceId
    var namespaceId:String

    /// JobId
    var jobId:Int


    public init(regionId: String,namespaceId:String,jobId:Int){
        self.namespaceId = namespaceId
        self.jobId = jobId
        super.init(regionId: regionId)
    }


    enum StopJobRequestRequestCodingKeys: String, CodingKey {
        case namespaceId
        case jobId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopJobRequestRequestCodingKeys.self)
        try encoderContainer.encode(namespaceId, forKey: .namespaceId)
        try encoderContainer.encode(jobId, forKey: .jobId)

    }
}


///  创建namespace
public class CreateNamespaceRequest:JdCloudRequest
{
    /// NamespaceStr
    var namespaceStr:Namespace


    public init(regionId: String,namespaceStr:Namespace){
        self.namespaceStr = namespaceStr
        super.init(regionId: regionId)
    }


    enum CreateNamespaceRequestRequestCodingKeys: String, CodingKey {
        case namespaceStr
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNamespaceRequestRequestCodingKeys.self)
        try encoderContainer.encode(namespaceStr, forKey: .namespaceStr)

    }
}


///  更新namespace
public class UpdateNamespaceRequest:JdCloudRequest
{
    /// NamespaceStr
    var namespaceStr:Namespace


    public init(regionId: String,namespaceStr:Namespace){
        self.namespaceStr = namespaceStr
        super.init(regionId: regionId)
    }


    enum UpdateNamespaceRequestRequestCodingKeys: String, CodingKey {
        case namespaceStr
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateNamespaceRequestRequestCodingKeys.self)
        try encoderContainer.encode(namespaceStr, forKey: .namespaceStr)

    }
}


///  查询某个应用详情
public class QueryNamespaceDetailRequest:JdCloudRequest
{
    /// NamespaceId
    var namespaceId:Int


    public init(regionId: String,namespaceId:Int){
        self.namespaceId = namespaceId
        super.init(regionId: regionId)
    }


    enum QueryNamespaceDetailRequestRequestCodingKeys: String, CodingKey {
        case namespaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryNamespaceDetailRequestRequestCodingKeys.self)
        try encoderContainer.encode(namespaceId, forKey: .namespaceId)

    }
}

/// 更新namespace 
public class UpdateNamespaceResult:NSObject,JdCloudResult
{
    /// 更新成功标志
    var status:Bool?



    public override init(){
        super.init()
    }

    enum UpdateNamespaceResultCodingKeys: String, CodingKey {
        case status
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateNamespaceResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
    }
}
public extension UpdateNamespaceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateNamespaceResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
    }
}
/// 删除namespace,如果旗下关联有其他资源，不允许删除 
public class DeleteNamespaceResult:NSObject,JdCloudResult
{
    /// 删除namespace成功标志
    var status:Bool?



    public override init(){
        super.init()
    }

    enum DeleteNamespaceResultCodingKeys: String, CodingKey {
        case status
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteNamespaceResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
    }
}
public extension DeleteNamespaceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteNamespaceResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
    }
}
/// 创建namespace 
public class CreateNamespaceResult:NSObject,JdCloudResult
{
    /// 创建成功标志
    var status:Bool?



    public override init(){
        super.init()
    }

    enum CreateNamespaceResultCodingKeys: String, CodingKey {
        case status
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateNamespaceResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
    }
}
public extension CreateNamespaceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNamespaceResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
    }
}
public class CreateNamespaceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateNamespaceResult?;

    enum CreateNamespaceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateNamespaceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateNamespaceResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateNamespaceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNamespaceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除namespace,如果旗下关联有其他资源，不允许删除
public class DeleteNamespaceRequest:JdCloudRequest
{
    /// NamespaceId
    var namespaceId:Int


    public init(regionId: String,namespaceId:Int){
        self.namespaceId = namespaceId
        super.init(regionId: regionId)
    }


    enum DeleteNamespaceRequestRequestCodingKeys: String, CodingKey {
        case namespaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteNamespaceRequestRequestCodingKeys.self)
        try encoderContainer.encode(namespaceId, forKey: .namespaceId)

    }
}

public class QueryNamespacesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryNamespacesResult?;

    enum QueryNamespacesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryNamespacesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryNamespacesResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryNamespacesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryNamespacesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询租户下的应用列表
public class QueryNamespacesRequest:JdCloudRequest
{
    /// Keyword
    var keyword:String?




    enum QueryNamespacesRequestRequestCodingKeys: String, CodingKey {
        case keyword
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryNamespacesRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyword, forKey: .keyword)

    }
}

/// 查询租户下的应用列表 
public class QueryNamespacesResult:NSObject,JdCloudResult
{
    /// namespaces信息
    var namespaces:[Namespace?]?



    public override init(){
        super.init()
    }

    enum QueryNamespacesResultCodingKeys: String, CodingKey {
        case namespaces
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryNamespacesResultCodingKeys.self)
        if decoderContainer.contains(.namespaces)
        {
            self.namespaces = try decoderContainer.decode([Namespace?]?.self, forKey: .namespaces)
        }
    }
}
public extension QueryNamespacesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryNamespacesResultCodingKeys.self)
        try encoderContainer.encode(namespaces, forKey: .namespaces)
    }
}
/// 查询某个应用详情 
public class QueryNamespaceDetailResult:NSObject,JdCloudResult
{
    /// 查询出的namespace对象
    var namespace:Namespace?



    public override init(){
        super.init()
    }

    enum QueryNamespaceDetailResultCodingKeys: String, CodingKey {
        case namespace
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryNamespaceDetailResultCodingKeys.self)
        if decoderContainer.contains(.namespace)
        {
            self.namespace = try decoderContainer.decode(Namespace?.self, forKey: .namespace)
        }
    }
}
public extension QueryNamespaceDetailResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryNamespaceDetailResultCodingKeys.self)
        try encoderContainer.encode(namespace, forKey: .namespace)
    }
}
public class QueryNamespaceDetailResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryNamespaceDetailResult?;

    enum QueryNamespaceDetailResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryNamespaceDetailResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryNamespaceDetailResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryNamespaceDetailResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryNamespaceDetailResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateNamespaceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateNamespaceResult?;

    enum UpdateNamespaceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateNamespaceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateNamespaceResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateNamespaceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateNamespaceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteNamespaceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteNamespaceResult?;

    enum DeleteNamespaceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteNamespaceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteNamespaceResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteNamespaceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteNamespaceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeStorageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeStorageResult?;

    enum DescribeStorageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStorageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeStorageResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeStorageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStorageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除指定输入 
public class DeleteStorageResult:NSObject,JdCloudResult
{
    /// Message
    var message:String?



    public override init(){
        super.init()
    }

    enum DeleteStorageResultCodingKeys: String, CodingKey {
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteStorageResultCodingKeys.self)
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DeleteStorageResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteStorageResultCodingKeys.self)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  创建或者更新storage
public class AddOrUpdateStorageRequest:JdCloudRequest
{
    /// 创建或者更新storage的详情
    var storageStr:Storage


    public init(regionId: String,storageStr:Storage){
        self.storageStr = storageStr
        super.init(regionId: regionId)
    }


    enum AddOrUpdateStorageRequestRequestCodingKeys: String, CodingKey {
        case storageStr
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddOrUpdateStorageRequestRequestCodingKeys.self)
        try encoderContainer.encode(storageStr, forKey: .storageStr)

    }
}

public class DeleteStorageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteStorageResult?;

    enum DeleteStorageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteStorageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteStorageResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteStorageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteStorageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建或者更新storage
public class GetStorageListRequest:JdCloudRequest
{
    /// storage类型
    var storageType:String

    /// namespaceId
    var namespaceId:String


    public init(regionId: String,storageType:String,namespaceId:String){
        self.storageType = storageType
        self.namespaceId = namespaceId
        super.init(regionId: regionId)
    }


    enum GetStorageListRequestRequestCodingKeys: String, CodingKey {
        case storageType
        case namespaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetStorageListRequestRequestCodingKeys.self)
        try encoderContainer.encode(storageType, forKey: .storageType)
        try encoderContainer.encode(namespaceId, forKey: .namespaceId)

    }
}

/// 创建或者更新storage 
public class AddOrUpdateStorageResult:NSObject,JdCloudResult
{
    /// Message
    var message:String?

    /// Status
    var status:Bool?



    public override init(){
        super.init()
    }

    enum AddOrUpdateStorageResultCodingKeys: String, CodingKey {
        case message
        case status
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddOrUpdateStorageResultCodingKeys.self)
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
    }
}
public extension AddOrUpdateStorageResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddOrUpdateStorageResultCodingKeys.self)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(status, forKey: .status)
    }
}

///  查询指定输入
public class DescribeStorageRequest:JdCloudRequest
{
    /// storageId
    var storageId:Int


    public init(regionId: String,storageId:Int){
        self.storageId = storageId
        super.init(regionId: regionId)
    }


    enum DescribeStorageRequestRequestCodingKeys: String, CodingKey {
        case storageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStorageRequestRequestCodingKeys.self)
        try encoderContainer.encode(storageId, forKey: .storageId)

    }
}


///  删除指定输入
public class DeleteStorageRequest:JdCloudRequest
{
    /// storageId
    var storageId:Int


    public init(regionId: String,storageId:Int){
        self.storageId = storageId
        super.init(regionId: regionId)
    }


    enum DeleteStorageRequestRequestCodingKeys: String, CodingKey {
        case storageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteStorageRequestRequestCodingKeys.self)
        try encoderContainer.encode(storageId, forKey: .storageId)

    }
}

/// 创建或者更新storage 
public class GetStorageListResult:NSObject,JdCloudResult
{
    /// StorageList
    var storageList:[Storage?]?



    public override init(){
        super.init()
    }

    enum GetStorageListResultCodingKeys: String, CodingKey {
        case storageList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetStorageListResultCodingKeys.self)
        if decoderContainer.contains(.storageList)
        {
            self.storageList = try decoderContainer.decode([Storage?]?.self, forKey: .storageList)
        }
    }
}
public extension GetStorageListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetStorageListResultCodingKeys.self)
        try encoderContainer.encode(storageList, forKey: .storageList)
    }
}
public class AddOrUpdateStorageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddOrUpdateStorageResult?;

    enum AddOrUpdateStorageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddOrUpdateStorageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddOrUpdateStorageResult?.self, forKey: .result) ?? nil
    }
}

public extension AddOrUpdateStorageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddOrUpdateStorageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetStorageListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetStorageListResult?;

    enum GetStorageListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetStorageListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetStorageListResult?.self, forKey: .result) ?? nil
    }
}

public extension GetStorageListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetStorageListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询指定输入 
public class DescribeStorageResult:NSObject,JdCloudResult
{
    /// Data
    var data:Storage?



    public override init(){
        super.init()
    }

    enum DescribeStorageResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeStorageResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Storage?.self, forKey: .data)
        }
    }
}
public extension DescribeStorageResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeStorageResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
