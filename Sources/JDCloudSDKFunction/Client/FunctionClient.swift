/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   京东云function接口
   function相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class FunctionJDCloudClient:NSObject,JDCloudClient{
    
    private final var functionJDCloudClient:FunctionJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        functionJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "function.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        functionJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "function/" + "v1"
    
    public let serviceName: String = "function"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func getVersionAsync(request:GetVersionRequest,requestComplation:@escaping ExecuteResult<GetVersionResult>) throws {
        functionJDCloudClient = self
        try GetVersionExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createAliasAsync(request:CreateAliasRequest,requestComplation:@escaping ExecuteResult<CreateAliasResult>) throws {
        functionJDCloudClient = self
        try CreateAliasExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createFunctionAsync(request:CreateFunctionRequest,requestComplation:@escaping ExecuteResult<CreateFunctionResult>) throws {
        functionJDCloudClient = self
        try CreateFunctionExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteAliasAsync(request:DeleteAliasRequest,requestComplation:@escaping ExecuteResult<DeleteAliasResult>) throws {
        functionJDCloudClient = self
        try DeleteAliasExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVersionAsync(request:CreateVersionRequest,requestComplation:@escaping ExecuteResult<CreateVersionResult>) throws {
        functionJDCloudClient = self
        try CreateVersionExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getFunctionAsync(request:GetFunctionRequest,requestComplation:@escaping ExecuteResult<GetFunctionResult>) throws {
        functionJDCloudClient = self
        try GetFunctionExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listVersionAsync(request:ListVersionRequest,requestComplation:@escaping ExecuteResult<ListVersionResult>) throws {
        functionJDCloudClient = self
        try ListVersionExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func invokeAsync(request:InvokeRequest,requestComplation:@escaping ExecuteResult<InvokeResult>) throws {
        functionJDCloudClient = self
        try InvokeExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateAliasAsync(request:UpdateAliasRequest,requestComplation:@escaping ExecuteResult<UpdateAliasResult>) throws {
        functionJDCloudClient = self
        try UpdateAliasExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func asyncInvokeAsync(request:AsyncInvokeRequest,requestComplation:@escaping ExecuteResult<AsyncInvokeResult>) throws {
        functionJDCloudClient = self
        try AsyncInvokeExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getTriggerAsync(request:GetTriggerRequest,requestComplation:@escaping ExecuteResult<GetTriggerResult>) throws {
        functionJDCloudClient = self
        try GetTriggerExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVersionAsync(request:DeleteVersionRequest,requestComplation:@escaping ExecuteResult<DeleteVersionResult>) throws {
        functionJDCloudClient = self
        try DeleteVersionExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteFunctionAsync(request:DeleteFunctionRequest,requestComplation:@escaping ExecuteResult<DeleteFunctionResult>) throws {
        functionJDCloudClient = self
        try DeleteFunctionExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listFunctionAsync(request:ListFunctionRequest,requestComplation:@escaping ExecuteResult<ListFunctionResultResult>) throws {
        functionJDCloudClient = self
        try ListFunctionExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listAliasAsync(request:ListAliasRequest,requestComplation:@escaping ExecuteResult<ListAliasResult>) throws {
        functionJDCloudClient = self
        try ListAliasExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getAliasAsync(request:GetAliasRequest,requestComplation:@escaping ExecuteResult<GetAliasResult>) throws {
        functionJDCloudClient = self
        try GetAliasExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateFunctionAsync(request:UpdateFunctionRequest,requestComplation:@escaping ExecuteResult<UpdateFunctionResult>) throws {
        functionJDCloudClient = self
        try UpdateFunctionExecutor(jdCloudClient: functionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension FunctionJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "function.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
