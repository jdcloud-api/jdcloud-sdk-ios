/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Function OpenAPI
   

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon

public class UpdateFunctionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateFunctionResult?;

    enum UpdateFunctionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateFunctionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateFunctionResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateFunctionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateFunctionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  更新函数
public class UpdateFunctionRequest:JdCloudRequest
{
    /// 函数描述信息
    var descriptionValue:String?

    /// 函数入口，格式为入口文件.入口函数名
    var entrance:String?

    /// 函数运行最大内存
    var memory:Int?

    /// 函数运行环境
    var runTime:String?

    /// 函数运行超时时间
    var overTime:Int?

    /// 函数代码包
    var code:Code?

    /// 函数运行时环境变量
    var environment:Env?

    /// 函数指定的日志集Id
    var logSetId:String?

    /// 函数指定的日志主题Id
    var logTopicId:String?

    /// 函数配置的VPCId
    var vpcId:String?

    /// 函数配置的子网Id
    var subnetId:String?

    /// 函数名称
    var functionName:String


    public init(regionId: String,functionName:String){
        self.functionName = functionName
        super.init(regionId: regionId)
    }


    enum UpdateFunctionRequestRequestCodingKeys: String, CodingKey {
        case descriptionValue = "description"
        case entrance
        case memory
        case runTime
        case overTime
        case code
        case environment
        case logSetId
        case logTopicId
        case vpcId
        case subnetId
        case functionName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateFunctionRequestRequestCodingKeys.self)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(entrance, forKey: .entrance)
        try encoderContainer.encode(memory, forKey: .memory)
        try encoderContainer.encode(runTime, forKey: .runTime)
        try encoderContainer.encode(overTime, forKey: .overTime)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(environment, forKey: .environment)
        try encoderContainer.encode(logSetId, forKey: .logSetId)
        try encoderContainer.encode(logTopicId, forKey: .logTopicId)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(subnetId, forKey: .subnetId)
        try encoderContainer.encode(functionName, forKey: .functionName)

    }
}

/// 控制台测试执行函数 
public class InvokeResult:NSObject,JdCloudResult
{
    /// Data
    var data:FunctionInvokeResult?



    public override init(){
        super.init()
    }

    enum InvokeResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InvokeResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(FunctionInvokeResult?.self, forKey: .data)
        }
    }
}
public extension InvokeResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InvokeResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class GetFunctionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetFunctionResult?;

    enum GetFunctionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetFunctionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetFunctionResult?.self, forKey: .result) ?? nil
    }
}

public extension GetFunctionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetFunctionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询函数详情 
public class GetFunctionResult:NSObject,JdCloudResult
{
    /// Data
    var data:Function?



    public override init(){
        super.init()
    }

    enum GetFunctionResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetFunctionResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Function?.self, forKey: .data)
        }
    }
}
public extension GetFunctionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetFunctionResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  查询函数详情
public class GetFunctionRequest:JdCloudRequest
{
    /// 函数名称
    var functionName:String


    public init(regionId: String,functionName:String){
        self.functionName = functionName
        super.init(regionId: regionId)
    }


    enum GetFunctionRequestRequestCodingKeys: String, CodingKey {
        case functionName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetFunctionRequestRequestCodingKeys.self)
        try encoderContainer.encode(functionName, forKey: .functionName)

    }
}

public class AsyncInvokeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AsyncInvokeResult?;

    enum AsyncInvokeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AsyncInvokeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AsyncInvokeResult?.self, forKey: .result) ?? nil
    }
}

public extension AsyncInvokeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AsyncInvokeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 异步测试执行函数 
public class AsyncInvokeResult:NSObject,JdCloudResult
{
}

///  查询函数列表
public class ListFunctionRequest:JdCloudRequest
{
    /// 是否返回所有函数
    var listAll:Bool

    /// 页码
    var pageNumber:Int?

    /// 分页大小
    var pageSize:Int?

    /// functionId -函数ID，精确匹配，支持多个
      /// functionName  - 函数名称，模糊匹配，支持单个
      /// 
    var filters:[Filter?]?


    public init(regionId: String,listAll:Bool){
        self.listAll = listAll
        super.init(regionId: regionId)
    }


    enum ListFunctionRequestRequestCodingKeys: String, CodingKey {
        case listAll
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListFunctionRequestRequestCodingKeys.self)
        try encoderContainer.encode(listAll, forKey: .listAll)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class ListFunctionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ListFunctionResult?;

    enum ListFunctionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListFunctionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ListFunctionResult?.self, forKey: .result) ?? nil
    }
}

public extension ListFunctionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListFunctionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建函数 
public class CreateFunctionResult:NSObject,JdCloudResult
{
    /// Data
    var data:Function?



    public override init(){
        super.init()
    }

    enum CreateFunctionResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateFunctionResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Function?.self, forKey: .data)
        }
    }
}
public extension CreateFunctionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateFunctionResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 更新函数 
public class UpdateFunctionResult:NSObject,JdCloudResult
{
    /// Data
    var data:Function?



    public override init(){
        super.init()
    }

    enum UpdateFunctionResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateFunctionResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Function?.self, forKey: .data)
        }
    }
}
public extension UpdateFunctionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateFunctionResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  删除函数
public class DeleteFunctionRequest:JdCloudRequest
{
    /// 函数名称
    var functionName:String


    public init(regionId: String,functionName:String){
        self.functionName = functionName
        super.init(regionId: regionId)
    }


    enum DeleteFunctionRequestRequestCodingKeys: String, CodingKey {
        case functionName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteFunctionRequestRequestCodingKeys.self)
        try encoderContainer.encode(functionName, forKey: .functionName)

    }
}

/// 查询函数列表 
public class ListFunctionResultResult:NSObject,JdCloudResult
{
    /// Data
    var data:ListFunctionResult?



    public override init(){
        super.init()
    }

    enum ListFunctionResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListFunctionResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(ListFunctionResult?.self, forKey: .data)
        }
    }
}
public extension ListFunctionResultResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListFunctionResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  控制台测试执行函数
public class InvokeRequest:JdCloudRequest
{
    /// 执行函数的输入事件
    var event:String

    /// 函数名称
    var functionName:String

    /// 版本名称
    var versionName:String


    public init(regionId: String,event:String,functionName:String,versionName:String){
        self.event = event
        self.functionName = functionName
        self.versionName = versionName
        super.init(regionId: regionId)
    }


    enum InvokeRequestRequestCodingKeys: String, CodingKey {
        case event
        case functionName
        case versionName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InvokeRequestRequestCodingKeys.self)
        try encoderContainer.encode(event, forKey: .event)
        try encoderContainer.encode(functionName, forKey: .functionName)
        try encoderContainer.encode(versionName, forKey: .versionName)

    }
}


///  创建函数
public class CreateFunctionRequest:JdCloudRequest
{
    /// 函数名称
    var name:String?

    /// 函数描述信息
    var descriptionValue:String?

    /// 函数入口，格式为入口文件.入口函数名
    var entrance:String?

    /// 函数运行最大内存
    var memory:Int?

    /// 函数运行环境
    var runTime:String?

    /// 函数运行超时时间
    var overTime:Int?

    /// 函数代码包
    var code:Code?

    /// 函数运行时环境变量
    var environment:Env?

    /// 函数指定的日志集Id
    var logSetId:String?

    /// 函数指定的日志主题Id
    var logTopicId:String?

    /// 函数配置的VPCId
    var vpcId:String?

    /// 函数配置的子网Id
    var subnetId:String?




    enum CreateFunctionRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case entrance
        case memory
        case runTime
        case overTime
        case code
        case environment
        case logSetId
        case logTopicId
        case vpcId
        case subnetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateFunctionRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(entrance, forKey: .entrance)
        try encoderContainer.encode(memory, forKey: .memory)
        try encoderContainer.encode(runTime, forKey: .runTime)
        try encoderContainer.encode(overTime, forKey: .overTime)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(environment, forKey: .environment)
        try encoderContainer.encode(logSetId, forKey: .logSetId)
        try encoderContainer.encode(logTopicId, forKey: .logTopicId)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(subnetId, forKey: .subnetId)

    }
}

public class DeleteFunctionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteFunctionResult?;

    enum DeleteFunctionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteFunctionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteFunctionResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteFunctionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteFunctionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  异步测试执行函数
public class AsyncInvokeRequest:JdCloudRequest
{
    /// 异步执行函数的输入事件
    var event:String

    /// 函数名称
    var functionName:String

    /// 版本名称
    var versionName:String


    public init(regionId: String,event:String,functionName:String,versionName:String){
        self.event = event
        self.functionName = functionName
        self.versionName = versionName
        super.init(regionId: regionId)
    }


    enum AsyncInvokeRequestRequestCodingKeys: String, CodingKey {
        case event
        case functionName
        case versionName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AsyncInvokeRequestRequestCodingKeys.self)
        try encoderContainer.encode(event, forKey: .event)
        try encoderContainer.encode(functionName, forKey: .functionName)
        try encoderContainer.encode(versionName, forKey: .versionName)

    }
}

/// 删除函数 
public class DeleteFunctionResult:NSObject,JdCloudResult
{
}
public class CreateFunctionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateFunctionResult?;

    enum CreateFunctionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateFunctionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateFunctionResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateFunctionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateFunctionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class InvokeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:InvokeResult?;

    enum InvokeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InvokeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(InvokeResult?.self, forKey: .result) ?? nil
    }
}

public extension InvokeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InvokeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询版本列表 
public class ListVersionResult:NSObject,JdCloudResult
{
    /// Data
    var data:[FunctionSpec?]?



    public override init(){
        super.init()
    }

    enum ListVersionResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListVersionResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([FunctionSpec?]?.self, forKey: .data)
        }
    }
}
public extension ListVersionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListVersionResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  创建版本
public class CreateVersionRequest:JdCloudRequest
{
    /// 版本描述
    var descriptionValue:String?

    /// 函数名称
    var functionName:String


    public init(regionId: String,functionName:String){
        self.functionName = functionName
        super.init(regionId: regionId)
    }


    enum CreateVersionRequestRequestCodingKeys: String, CodingKey {
        case descriptionValue = "description"
        case functionName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(functionName, forKey: .functionName)

    }
}

public class DeleteVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVersionResult?;

    enum DeleteVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除版本 
public class DeleteVersionResult:NSObject,JdCloudResult
{
}
public class GetVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVersionResult?;

    enum GetVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ListVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ListVersionResult?;

    enum ListVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ListVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension ListVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建版本 
public class CreateVersionResult:NSObject,JdCloudResult
{
    /// Data
    var data:Function?



    public override init(){
        super.init()
    }

    enum CreateVersionResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVersionResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Function?.self, forKey: .data)
        }
    }
}
public extension CreateVersionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVersionResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 获取版本详情 
public class GetVersionResult:NSObject,JdCloudResult
{
    /// Data
    var data:Function?



    public override init(){
        super.init()
    }

    enum GetVersionResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVersionResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Function?.self, forKey: .data)
        }
    }
}
public extension GetVersionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVersionResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  获取版本详情
public class GetVersionRequest:JdCloudRequest
{
    /// 函数名称
    var functionName:String

    /// 版本名称
    var versionName:String


    public init(regionId: String,functionName:String,versionName:String){
        self.functionName = functionName
        self.versionName = versionName
        super.init(regionId: regionId)
    }


    enum GetVersionRequestRequestCodingKeys: String, CodingKey {
        case functionName
        case versionName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(functionName, forKey: .functionName)
        try encoderContainer.encode(versionName, forKey: .versionName)

    }
}

public class CreateVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVersionResult?;

    enum CreateVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除版本
public class DeleteVersionRequest:JdCloudRequest
{
    /// 函数名称
    var functionName:String

    /// 版本名称
    var versionName:String


    public init(regionId: String,functionName:String,versionName:String){
        self.functionName = functionName
        self.versionName = versionName
        super.init(regionId: regionId)
    }


    enum DeleteVersionRequestRequestCodingKeys: String, CodingKey {
        case functionName
        case versionName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(functionName, forKey: .functionName)
        try encoderContainer.encode(versionName, forKey: .versionName)

    }
}


///  查询版本列表
public class ListVersionRequest:JdCloudRequest
{
    /// 函数名称
    var functionName:String


    public init(regionId: String,functionName:String){
        self.functionName = functionName
        super.init(regionId: regionId)
    }


    enum ListVersionRequestRequestCodingKeys: String, CodingKey {
        case functionName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(functionName, forKey: .functionName)

    }
}

public class GetTriggerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetTriggerResult?;

    enum GetTriggerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTriggerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetTriggerResult?.self, forKey: .result) ?? nil
    }
}

public extension GetTriggerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTriggerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取触发器详情
public class GetTriggerRequest:JdCloudRequest
{
    /// 触发器Id
    var triggerId:String

    /// 函数名称
    var functionName:String

    /// 版本名称
    var versionName:String


    public init(regionId: String,triggerId:String,functionName:String,versionName:String){
        self.triggerId = triggerId
        self.functionName = functionName
        self.versionName = versionName
        super.init(regionId: regionId)
    }


    enum GetTriggerRequestRequestCodingKeys: String, CodingKey {
        case triggerId
        case functionName
        case versionName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTriggerRequestRequestCodingKeys.self)
        try encoderContainer.encode(triggerId, forKey: .triggerId)
        try encoderContainer.encode(functionName, forKey: .functionName)
        try encoderContainer.encode(versionName, forKey: .versionName)

    }
}

/// 获取触发器详情 
public class GetTriggerResult:NSObject,JdCloudResult
{
    /// Data
    var data:Trigger?



    public override init(){
        super.init()
    }

    enum GetTriggerResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTriggerResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Trigger?.self, forKey: .data)
        }
    }
}
public extension GetTriggerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTriggerResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 删除别名 
public class DeleteAliasResult:NSObject,JdCloudResult
{
}
/// 更新别名 
public class UpdateAliasResult:NSObject,JdCloudResult
{
    /// Data
    var data:Alias?



    public override init(){
        super.init()
    }

    enum UpdateAliasResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateAliasResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Alias?.self, forKey: .data)
        }
    }
}
public extension UpdateAliasResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAliasResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  删除别名
public class DeleteAliasRequest:JdCloudRequest
{
    /// 别名所属函数名称
    var functionName:String

    /// 别名名称
    var aliasName:String


    public init(regionId: String,functionName:String,aliasName:String){
        self.functionName = functionName
        self.aliasName = aliasName
        super.init(regionId: regionId)
    }


    enum DeleteAliasRequestRequestCodingKeys: String, CodingKey {
        case functionName
        case aliasName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAliasRequestRequestCodingKeys.self)
        try encoderContainer.encode(functionName, forKey: .functionName)
        try encoderContainer.encode(aliasName, forKey: .aliasName)

    }
}

public class CreateAliasResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateAliasResult?;

    enum CreateAliasResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAliasResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateAliasResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateAliasResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAliasResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建别名 
public class CreateAliasResult:NSObject,JdCloudResult
{
    /// Data
    var data:Alias?



    public override init(){
        super.init()
    }

    enum CreateAliasResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAliasResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Alias?.self, forKey: .data)
        }
    }
}
public extension CreateAliasResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAliasResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  查询别名列表
public class ListAliasRequest:JdCloudRequest
{
    /// 别名所属函数名称
    var functionName:String


    public init(regionId: String,functionName:String){
        self.functionName = functionName
        super.init(regionId: regionId)
    }


    enum ListAliasRequestRequestCodingKeys: String, CodingKey {
        case functionName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListAliasRequestRequestCodingKeys.self)
        try encoderContainer.encode(functionName, forKey: .functionName)

    }
}

public class DeleteAliasResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteAliasResult?;

    enum DeleteAliasResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteAliasResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteAliasResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteAliasResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAliasResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateAliasResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateAliasResult?;

    enum UpdateAliasResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateAliasResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateAliasResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateAliasResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAliasResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询别名详情
public class GetAliasRequest:JdCloudRequest
{
    /// 别名所属函数名称
    var functionName:String

    /// 别名名称
    var aliasName:String


    public init(regionId: String,functionName:String,aliasName:String){
        self.functionName = functionName
        self.aliasName = aliasName
        super.init(regionId: regionId)
    }


    enum GetAliasRequestRequestCodingKeys: String, CodingKey {
        case functionName
        case aliasName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetAliasRequestRequestCodingKeys.self)
        try encoderContainer.encode(functionName, forKey: .functionName)
        try encoderContainer.encode(aliasName, forKey: .aliasName)

    }
}

/// 查询别名详情 
public class GetAliasResult:NSObject,JdCloudResult
{
    /// Data
    var data:Alias?



    public override init(){
        super.init()
    }

    enum GetAliasResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetAliasResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Alias?.self, forKey: .data)
        }
    }
}
public extension GetAliasResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetAliasResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class GetAliasResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetAliasResult?;

    enum GetAliasResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetAliasResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetAliasResult?.self, forKey: .result) ?? nil
    }
}

public extension GetAliasResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetAliasResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  更新别名
public class UpdateAliasRequest:JdCloudRequest
{
    /// 别名描述信息
    var descriptionValue:String

    /// 别名所属函数名称
    var functionName:String

    /// 别名名称
    var aliasName:String


    public init(regionId: String,descriptionValue:String,functionName:String,aliasName:String){
        self.descriptionValue = descriptionValue
        self.functionName = functionName
        self.aliasName = aliasName
        super.init(regionId: regionId)
    }


    enum UpdateAliasRequestRequestCodingKeys: String, CodingKey {
        case descriptionValue = "description"
        case functionName
        case aliasName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAliasRequestRequestCodingKeys.self)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(functionName, forKey: .functionName)
        try encoderContainer.encode(aliasName, forKey: .aliasName)

    }
}

public class ListAliasResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ListAliasResult?;

    enum ListAliasResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListAliasResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ListAliasResult?.self, forKey: .result) ?? nil
    }
}

public extension ListAliasResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListAliasResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建别名
public class CreateAliasRequest:JdCloudRequest
{
    /// 别名名称
    var aliasName:String

    /// 别名描述信息
    var descriptionValue:String?

    /// 别名所属函数名称
    var functionName:String


    public init(regionId: String,aliasName:String,functionName:String){
        self.aliasName = aliasName
        self.functionName = functionName
        super.init(regionId: regionId)
    }


    enum CreateAliasRequestRequestCodingKeys: String, CodingKey {
        case aliasName
        case descriptionValue = "description"
        case functionName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAliasRequestRequestCodingKeys.self)
        try encoderContainer.encode(aliasName, forKey: .aliasName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(functionName, forKey: .functionName)

    }
}

/// 查询别名列表 
public class ListAliasResult:NSObject,JdCloudResult
{
    /// Data
    var data:[Alias?]?



    public override init(){
        super.init()
    }

    enum ListAliasResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListAliasResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([Alias?]?.self, forKey: .data)
        }
    }
}
public extension ListAliasResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListAliasResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
