/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Function OpenAPI
   

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  functionInvokeResult
@objc(FunctionInvokeResult)
public class FunctionInvokeResult:NSObject,Codable{
    /// 函数执行结果
    var result:String?
    /// 代码包校验和
    var codeCheckSum:String?
    /// 函数执行时间
    var invokeTime:Double?
    /// 函数收费时间
    var billingTime:Double?
    /// 函数设置内存大小
    var setupMem:Double?
    /// 函数实际使用内存大小
    var realMem:Double?
    /// 函数执行日志
    var logStr:String?



    public override init(){
            super.init()
    }

    enum FunctionInvokeResultCodingKeys: String, CodingKey {
        case result
        case codeCheckSum
        case invokeTime
        case billingTime
        case setupMem
        case realMem
        case logStr
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: FunctionInvokeResultCodingKeys.self)
        self.result = try decoderContainer.decode(String?.self, forKey: .result)
        self.codeCheckSum = try decoderContainer.decode(String?.self, forKey: .codeCheckSum)
        self.invokeTime = try decoderContainer.decode(Double?.self, forKey: .invokeTime)
        self.billingTime = try decoderContainer.decode(Double?.self, forKey: .billingTime)
        self.setupMem = try decoderContainer.decode(Double?.self, forKey: .setupMem)
        self.realMem = try decoderContainer.decode(Double?.self, forKey: .realMem)
        self.logStr = try decoderContainer.decode(String?.self, forKey: .logStr)
    }
}
public extension FunctionInvokeResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: FunctionInvokeResultCodingKeys.self)
         try encoderContainer.encode(result, forKey: .result)
         try encoderContainer.encode(codeCheckSum, forKey: .codeCheckSum)
         try encoderContainer.encode(invokeTime, forKey: .invokeTime)
         try encoderContainer.encode(billingTime, forKey: .billingTime)
         try encoderContainer.encode(setupMem, forKey: .setupMem)
         try encoderContainer.encode(realMem, forKey: .realMem)
         try encoderContainer.encode(logStr, forKey: .logStr)
    }
}
