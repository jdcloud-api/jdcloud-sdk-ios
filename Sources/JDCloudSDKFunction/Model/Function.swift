/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  function
@objc(Function)
public class Function:NSObject,Codable{
    /// 函数Id
    var functionId:String?
    /// 函数名称
    var name:String?
    /// 函数描述
    var descriptionValue:String?
    /// 函数入口，格式为入口文件.入口函数名
    var entrance:String?
    /// 函数运行最大内存
    var memory:Int32?
    /// 函数运行环境，目前有python3.6
    var runTime:String?
    /// 函数超时时间
    var overTime:Int32?
    /// 函数版本名称
    var version:String?
    /// 函数代码
    var code:Code?
    /// 函数环境变量
    var environment:Env?
    /// 函数指定的日志集id
    var logSetId:String?
    /// 函数指定的日志主题id
    var logTopicId:String?
    /// 代码包校验和
    var codeCheckSum:String?
    /// 代码包大小，单位为字节
    var codeSize:Int32?
    /// 代码包下载的url地址
    var downloadUrl:String?
    /// 函数配置的VPCid
    var vpcId:String?
    /// 函数配置的子网id
    var subnetId:String?
    /// 函数创建时间
    var createTime:String?
    /// 函数最后更新时间
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum FunctionCodingKeys: String, CodingKey {
        case functionId
        case name
        case descriptionValue = "description"
        case entrance
        case memory
        case runTime
        case overTime
        case version
        case code
        case environment
        case logSetId
        case logTopicId
        case codeCheckSum
        case codeSize
        case downloadUrl
        case vpcId
        case subnetId
        case createTime
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: FunctionCodingKeys.self)
        self.functionId = try decoderContainer.decode(String?.self, forKey: .functionId)
        self.name = try decoderContainer.decode(String?.self, forKey: .name)
        self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        self.entrance = try decoderContainer.decode(String?.self, forKey: .entrance)
        self.memory = try decoderContainer.decode(Int32?.self, forKey: .memory)
        self.runTime = try decoderContainer.decode(String?.self, forKey: .runTime)
        self.overTime = try decoderContainer.decode(Int32?.self, forKey: .overTime)
        self.version = try decoderContainer.decode(String?.self, forKey: .version)
        self.code = try decoderContainer.decode(Code?.self, forKey: .code)
        self.environment = try decoderContainer.decode(Env?.self, forKey: .environment)
        self.logSetId = try decoderContainer.decode(String?.self, forKey: .logSetId)
        self.logTopicId = try decoderContainer.decode(String?.self, forKey: .logTopicId)
        self.codeCheckSum = try decoderContainer.decode(String?.self, forKey: .codeCheckSum)
        self.codeSize = try decoderContainer.decode(Int32?.self, forKey: .codeSize)
        self.downloadUrl = try decoderContainer.decode(String?.self, forKey: .downloadUrl)
        self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
    }
}
public extension Function{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: FunctionCodingKeys.self)
         try encoderContainer.encode(functionId, forKey: .functionId)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(entrance, forKey: .entrance)
         try encoderContainer.encode(memory, forKey: .memory)
         try encoderContainer.encode(runTime, forKey: .runTime)
         try encoderContainer.encode(overTime, forKey: .overTime)
         try encoderContainer.encode(version, forKey: .version)
         try encoderContainer.encode(code, forKey: .code)
         try encoderContainer.encode(environment, forKey: .environment)
         try encoderContainer.encode(logSetId, forKey: .logSetId)
         try encoderContainer.encode(logTopicId, forKey: .logTopicId)
         try encoderContainer.encode(codeCheckSum, forKey: .codeCheckSum)
         try encoderContainer.encode(codeSize, forKey: .codeSize)
         try encoderContainer.encode(downloadUrl, forKey: .downloadUrl)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
