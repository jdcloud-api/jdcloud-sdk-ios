/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  apiTrigger
@objc(ApiTrigger)
public class ApiTrigger:NSObject,Codable{
    /// 接口ID
    var apiId:String?
    /// 分组ID
    var apiGroupId:String?
    /// 分组名称
    var groupName:String?
    /// 修订版本号
    var revision:String?
    /// API名称
    var apiName:String?
    /// 请求方式
    var action:String?
    /// 请求路径，同时发布多个环境后会有多个路径
    var path:[String?]?
    /// API描述
    var descriptionValue:String?
    /// 部署状态(1:已部署)
    var deploymentStatus:Int?



    public override init(){
            super.init()
    }

    enum ApiTriggerCodingKeys: String, CodingKey {
        case apiId
        case apiGroupId
        case groupName
        case revision
        case apiName
        case action
        case path
        case descriptionValue = "description"
        case deploymentStatus
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ApiTriggerCodingKeys.self)
        if decoderContainer.contains(.apiId)
        {
            self.apiId = try decoderContainer.decode(String?.self, forKey: .apiId)
        }
        if decoderContainer.contains(.apiGroupId)
        {
            self.apiGroupId = try decoderContainer.decode(String?.self, forKey: .apiGroupId)
        }
        if decoderContainer.contains(.groupName)
        {
            self.groupName = try decoderContainer.decode(String?.self, forKey: .groupName)
        }
        if decoderContainer.contains(.revision)
        {
            self.revision = try decoderContainer.decode(String?.self, forKey: .revision)
        }
        if decoderContainer.contains(.apiName)
        {
            self.apiName = try decoderContainer.decode(String?.self, forKey: .apiName)
        }
        if decoderContainer.contains(.action)
        {
            self.action = try decoderContainer.decode(String?.self, forKey: .action)
        }
        if decoderContainer.contains(.path)
        {
            self.path = try decoderContainer.decode([String?]?.self, forKey: .path)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.deploymentStatus)
        {
            self.deploymentStatus = try decoderContainer.decode(Int?.self, forKey: .deploymentStatus)
        }
    }
}
public extension ApiTrigger{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ApiTriggerCodingKeys.self)
         try encoderContainer.encode(apiId, forKey: .apiId)
         try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
         try encoderContainer.encode(groupName, forKey: .groupName)
         try encoderContainer.encode(revision, forKey: .revision)
         try encoderContainer.encode(apiName, forKey: .apiName)
         try encoderContainer.encode(action, forKey: .action)
         try encoderContainer.encode(path, forKey: .path)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(deploymentStatus, forKey: .deploymentStatus)
    }
}
