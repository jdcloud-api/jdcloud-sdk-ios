/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCloud Redis API
   京东云缓存Redis相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class RedisJDCloudClient:NSObject,JDCloudClient{
    
    private final var redisJDCloudClient:RedisJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        redisJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "redis.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        redisJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "redis/" + "v1"
    
    public let serviceName: String = "redis"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func modifyBackupPolicyAsync(request:ModifyBackupPolicyRequest,requestComplation:@escaping ExecuteResult<ModifyBackupPolicyResult>) throws {
        redisJDCloudClient = self
        try ModifyBackupPolicyExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyCacheInstanceClassAsync(request:ModifyCacheInstanceClassRequest,requestComplation:@escaping ExecuteResult<ModifyCacheInstanceClassResult>) throws {
        redisJDCloudClient = self
        try ModifyCacheInstanceClassExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createBackupAsync(request:CreateBackupRequest,requestComplation:@escaping ExecuteResult<CreateBackupResult>) throws {
        redisJDCloudClient = self
        try CreateBackupExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceConfigAsync(request:DescribeInstanceConfigRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceConfigResult>) throws {
        redisJDCloudClient = self
        try DescribeInstanceConfigExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeBackupPolicyAsync(request:DescribeBackupPolicyRequest,requestComplation:@escaping ExecuteResult<DescribeBackupPolicyResult>) throws {
        redisJDCloudClient = self
        try DescribeBackupPolicyExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteCacheInstanceAsync(request:DeleteCacheInstanceRequest,requestComplation:@escaping ExecuteResult<DeleteCacheInstanceResult>) throws {
        redisJDCloudClient = self
        try DeleteCacheInstanceExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func resetCacheInstancePasswordAsync(request:ResetCacheInstancePasswordRequest,requestComplation:@escaping ExecuteResult<ResetCacheInstancePasswordResult>) throws {
        redisJDCloudClient = self
        try ResetCacheInstancePasswordExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSlowLogAsync(request:DescribeSlowLogRequest,requestComplation:@escaping ExecuteResult<DescribeSlowLogResult>) throws {
        redisJDCloudClient = self
        try DescribeSlowLogExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createCacheInstanceAsync(request:CreateCacheInstanceRequest,requestComplation:@escaping ExecuteResult<CreateCacheInstanceResult>) throws {
        redisJDCloudClient = self
        try CreateCacheInstanceExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func restoreInstanceAsync(request:RestoreInstanceRequest,requestComplation:@escaping ExecuteResult<RestoreInstanceResult>) throws {
        redisJDCloudClient = self
        try RestoreInstanceExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeUserQuotaAsync(request:DescribeUserQuotaRequest,requestComplation:@escaping ExecuteResult<DescribeUserQuotaResult>) throws {
        redisJDCloudClient = self
        try DescribeUserQuotaExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeDownloadUrlAsync(request:DescribeDownloadUrlRequest,requestComplation:@escaping ExecuteResult<DescribeDownloadUrlResult>) throws {
        redisJDCloudClient = self
        try DescribeDownloadUrlExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCacheInstancesAsync(request:DescribeCacheInstancesRequest,requestComplation:@escaping ExecuteResult<DescribeCacheInstancesResult>) throws {
        redisJDCloudClient = self
        try DescribeCacheInstancesExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeClusterInfoAsync(request:DescribeClusterInfoRequest,requestComplation:@escaping ExecuteResult<DescribeClusterInfoResult>) throws {
        redisJDCloudClient = self
        try DescribeClusterInfoExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyCacheInstanceAttributeAsync(request:ModifyCacheInstanceAttributeRequest,requestComplation:@escaping ExecuteResult<ModifyCacheInstanceAttributeResult>) throws {
        redisJDCloudClient = self
        try ModifyCacheInstanceAttributeExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeBackupsAsync(request:DescribeBackupsRequest,requestComplation:@escaping ExecuteResult<DescribeBackupsResult>) throws {
        redisJDCloudClient = self
        try DescribeBackupsExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCacheInstanceAsync(request:DescribeCacheInstanceRequest,requestComplation:@escaping ExecuteResult<DescribeCacheInstanceResult>) throws {
        redisJDCloudClient = self
        try DescribeCacheInstanceExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyInstanceConfigAsync(request:ModifyInstanceConfigRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceConfigResult>) throws {
        redisJDCloudClient = self
        try ModifyInstanceConfigExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceClassAsync(request:DescribeInstanceClassRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceClassResult>) throws {
        redisJDCloudClient = self
        try DescribeInstanceClassExecutor(jdCloudClient: redisJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension RedisJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "redis.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
