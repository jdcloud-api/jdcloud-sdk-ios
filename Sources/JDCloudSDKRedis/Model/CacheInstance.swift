/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCharge

///  cacheInstance
@objc(CacheInstance)
public class CacheInstance:NSObject,Codable{
    /// 实例ID
    var cacheInstanceId:String?
    /// 实例名称
    var cacheInstanceName:String?
    /// 实例规格代码，参见&lt;a href&#x3D;&quot;https://www.jdcloud.com/help/detail/411/isCatalog/1&quot;&gt;实例规格代码&lt;/a&gt;
    var cacheInstanceClass:String?
    /// 容量，单位MB
    var cacheInstanceMemoryMB:Int?
    /// 实例状态，running：运行，error：错误，creating：创建中，changing：变配中，deleting：删除中
    var cacheInstanceStatus:String?
    /// 实例描述
    var cacheInstanceDescription:String?
    /// 创建时间
    var createTime:String?
    /// az信息
    var azId:AzId?
    /// 所属VPC的ID
    var vpcId:String?
    /// 所属子网的ID
    var subnetId:String?
    /// 访问域名
    var connectionDomain:String?
    /// 端口
    var port:Int?
    /// 计费信息
    var charge:Charge?
    /// 实例版本
    var instanceVersion:String?
    /// 是否免密
    var auth:Bool?



    public override init(){
            super.init()
    }

    enum CacheInstanceCodingKeys: String, CodingKey {
        case cacheInstanceId
        case cacheInstanceName
        case cacheInstanceClass
        case cacheInstanceMemoryMB
        case cacheInstanceStatus
        case cacheInstanceDescription
        case createTime
        case azId
        case vpcId
        case subnetId
        case connectionDomain
        case port
        case charge
        case instanceVersion
        case auth
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CacheInstanceCodingKeys.self)
        if decoderContainer.contains(.cacheInstanceId)
        {
            self.cacheInstanceId = try decoderContainer.decode(String?.self, forKey: .cacheInstanceId)
        }
        if decoderContainer.contains(.cacheInstanceName)
        {
            self.cacheInstanceName = try decoderContainer.decode(String?.self, forKey: .cacheInstanceName)
        }
        if decoderContainer.contains(.cacheInstanceClass)
        {
            self.cacheInstanceClass = try decoderContainer.decode(String?.self, forKey: .cacheInstanceClass)
        }
        if decoderContainer.contains(.cacheInstanceMemoryMB)
        {
            self.cacheInstanceMemoryMB = try decoderContainer.decode(Int?.self, forKey: .cacheInstanceMemoryMB)
        }
        if decoderContainer.contains(.cacheInstanceStatus)
        {
            self.cacheInstanceStatus = try decoderContainer.decode(String?.self, forKey: .cacheInstanceStatus)
        }
        if decoderContainer.contains(.cacheInstanceDescription)
        {
            self.cacheInstanceDescription = try decoderContainer.decode(String?.self, forKey: .cacheInstanceDescription)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.azId)
        {
            self.azId = try decoderContainer.decode(AzId?.self, forKey: .azId)
        }
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
        if decoderContainer.contains(.connectionDomain)
        {
            self.connectionDomain = try decoderContainer.decode(String?.self, forKey: .connectionDomain)
        }
        if decoderContainer.contains(.port)
        {
            self.port = try decoderContainer.decode(Int?.self, forKey: .port)
        }
        if decoderContainer.contains(.charge)
        {
            self.charge = try decoderContainer.decode(Charge?.self, forKey: .charge)
        }
        if decoderContainer.contains(.instanceVersion)
        {
            self.instanceVersion = try decoderContainer.decode(String?.self, forKey: .instanceVersion)
        }
        if decoderContainer.contains(.auth)
        {
            self.auth = try decoderContainer.decode(Bool?.self, forKey: .auth)
        }
    }
}
public extension CacheInstance{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CacheInstanceCodingKeys.self)
         try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)
         try encoderContainer.encode(cacheInstanceName, forKey: .cacheInstanceName)
         try encoderContainer.encode(cacheInstanceClass, forKey: .cacheInstanceClass)
         try encoderContainer.encode(cacheInstanceMemoryMB, forKey: .cacheInstanceMemoryMB)
         try encoderContainer.encode(cacheInstanceStatus, forKey: .cacheInstanceStatus)
         try encoderContainer.encode(cacheInstanceDescription, forKey: .cacheInstanceDescription)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(azId, forKey: .azId)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(connectionDomain, forKey: .connectionDomain)
         try encoderContainer.encode(port, forKey: .port)
         try encoderContainer.encode(charge, forKey: .charge)
         try encoderContainer.encode(instanceVersion, forKey: .instanceVersion)
         try encoderContainer.encode(auth, forKey: .auth)
    }
}
