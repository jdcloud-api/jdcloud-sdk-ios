/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  Redis实例的资源信息
@objc(InstanceName)
public class InstanceName:NSObject,Codable{
    /// 资源Id（即实例id）
    /// Required:true
    var resourceId:String
    /// 资源名称（即实例名称）
    /// Required:true
    var resourceName:String
    /// service code（redis）
    /// Required:true
    var serviceCode:String



    public  init(resourceId:String,resourceName:String,serviceCode:String){
             self.resourceId = resourceId
             self.resourceName = resourceName
             self.serviceCode = serviceCode
    }

    enum InstanceNameCodingKeys: String, CodingKey {
        case resourceId
        case resourceName
        case serviceCode
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InstanceNameCodingKeys.self)
        self.resourceId = try decoderContainer.decode(String.self, forKey: .resourceId)
        self.resourceName = try decoderContainer.decode(String.self, forKey: .resourceName)
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
    }
}
public extension InstanceName{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InstanceNameCodingKeys.self)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(resourceName, forKey: .resourceName)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
    }
}
