/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  某缓存Redis实例规格信息
@objc(InstanceClass)
public class InstanceClass:NSObject,Codable{
    /// 实例规格代码,参见实例规格代码表
    var instanceClassValue:String?
    /// cpu
    var cpu:Int?
    /// 内存
    var memoryMB:Int?
    /// 磁盘
    var diskGB:Int?
    /// 最大链接数
    var maxConnetction:Int?
    /// 带宽
    var bandwidthMbps:Int?



    public override init(){
            super.init()
    }

    enum InstanceClassCodingKeys: String, CodingKey {
        case instanceClassValue = "instanceClass"
        case cpu
        case memoryMB
        case diskGB
        case maxConnetction
        case bandwidthMbps
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InstanceClassCodingKeys.self)
        if decoderContainer.contains(.instanceClassValue)
        {
            self.instanceClassValue = try decoderContainer.decode(String?.self, forKey: .instanceClassValue)
        }
        if decoderContainer.contains(.cpu)
        {
            self.cpu = try decoderContainer.decode(Int?.self, forKey: .cpu)
        }
        if decoderContainer.contains(.memoryMB)
        {
            self.memoryMB = try decoderContainer.decode(Int?.self, forKey: .memoryMB)
        }
        if decoderContainer.contains(.diskGB)
        {
            self.diskGB = try decoderContainer.decode(Int?.self, forKey: .diskGB)
        }
        if decoderContainer.contains(.maxConnetction)
        {
            self.maxConnetction = try decoderContainer.decode(Int?.self, forKey: .maxConnetction)
        }
        if decoderContainer.contains(.bandwidthMbps)
        {
            self.bandwidthMbps = try decoderContainer.decode(Int?.self, forKey: .bandwidthMbps)
        }
    }
}
public extension InstanceClass{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InstanceClassCodingKeys.self)
         try encoderContainer.encode(instanceClassValue, forKey: .instanceClassValue)
         try encoderContainer.encode(cpu, forKey: .cpu)
         try encoderContainer.encode(memoryMB, forKey: .memoryMB)
         try encoderContainer.encode(diskGB, forKey: .diskGB)
         try encoderContainer.encode(maxConnetction, forKey: .maxConnetction)
         try encoderContainer.encode(bandwidthMbps, forKey: .bandwidthMbps)
    }
}
