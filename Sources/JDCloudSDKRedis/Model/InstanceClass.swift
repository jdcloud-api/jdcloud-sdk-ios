/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  缓存Redis实例的规格信息
@objc(InstanceClass)
public class InstanceClass:NSObject,Codable{
    /// 规格代码：redis 2.8与redis 4.0的规格码不同，具体参考 https://docs.jdcloud.com/cn/jcs-for-redis/specifications
    var instanceClassValue:String?
    /// 规格类型：master-slave表示主从版，cluster表示集群版
    var instanceType:String?
    /// cpu核数
    var cpu:Int?
    /// 内存总容量（MB）
    var memoryMB:Int?
    /// 磁盘总容量（GB）
    var diskGB:Int?
    /// 最大连接数
    var maxConnection:Int?
    /// 内网带宽（MBps）
    var bandwidthMbps:Int?



    public override init(){
            super.init()
    }

    enum InstanceClassCodingKeys: String, CodingKey {
        case instanceClassValue = "instanceClass"
        case instanceType
        case cpu
        case memoryMB
        case diskGB
        case maxConnection
        case bandwidthMbps
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InstanceClassCodingKeys.self)
        if decoderContainer.contains(.instanceClassValue)
        {
            self.instanceClassValue = try decoderContainer.decode(String?.self, forKey: .instanceClassValue)
        }
        if decoderContainer.contains(.instanceType)
        {
            self.instanceType = try decoderContainer.decode(String?.self, forKey: .instanceType)
        }
        if decoderContainer.contains(.cpu)
        {
            self.cpu = try decoderContainer.decode(Int?.self, forKey: .cpu)
        }
        if decoderContainer.contains(.memoryMB)
        {
            self.memoryMB = try decoderContainer.decode(Int?.self, forKey: .memoryMB)
        }
        if decoderContainer.contains(.diskGB)
        {
            self.diskGB = try decoderContainer.decode(Int?.self, forKey: .diskGB)
        }
        if decoderContainer.contains(.maxConnection)
        {
            self.maxConnection = try decoderContainer.decode(Int?.self, forKey: .maxConnection)
        }
        if decoderContainer.contains(.bandwidthMbps)
        {
            self.bandwidthMbps = try decoderContainer.decode(Int?.self, forKey: .bandwidthMbps)
        }
    }
}
public extension InstanceClass{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InstanceClassCodingKeys.self)
         try encoderContainer.encode(instanceClassValue, forKey: .instanceClassValue)
         try encoderContainer.encode(instanceType, forKey: .instanceType)
         try encoderContainer.encode(cpu, forKey: .cpu)
         try encoderContainer.encode(memoryMB, forKey: .memoryMB)
         try encoderContainer.encode(diskGB, forKey: .diskGB)
         try encoderContainer.encode(maxConnection, forKey: .maxConnection)
         try encoderContainer.encode(bandwidthMbps, forKey: .bandwidthMbps)
    }
}
