/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Redis Instance API
   缓存Redis实例的创建、删除、修改基本信息、设置密码、变配、列表查询、备份、配置参数接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 创建一个指定配置的缓存Redis实例：可选择主从版或集群版，每种类型又分为多种规格（按CPU核数、内存容量、磁盘容量、带宽等划分），具体可参考产品规格代码，https://docs.jdcloud.com/cn/jcs-for-redis/specifications
      ///       /// 
@objc(CreateCacheInstanceResult)
public class CreateCacheInstanceResult:NSObject,JdCloudResult
{
    /// 创建实例后生成的实例ID
    var cacheInstanceId:String?

    /// 创建实例后生成的订单编号
    var orderNum:String?



    public override init(){
        super.init()
    }

    enum CreateCacheInstanceResultCodingKeys: String, CodingKey {
        case cacheInstanceId
        case orderNum
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateCacheInstanceResultCodingKeys.self)
        if decoderContainer.contains(.cacheInstanceId)
        {
            self.cacheInstanceId = try decoderContainer.decode(String?.self, forKey: .cacheInstanceId)
        }
        if decoderContainer.contains(.orderNum)
        {
            self.orderNum = try decoderContainer.decode(String?.self, forKey: .orderNum)
        }
    }
}
public extension CreateCacheInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateCacheInstanceResultCodingKeys.self)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)
        try encoderContainer.encode(orderNum, forKey: .orderNum)
    }
}
