/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Redis Instance Order API
   查询缓存Redis订单结果

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon
    import JDCloudSDKCharge

/// 查询账户的缓存Redis配额信息 
public class DescribeUserQuotaResult:NSObject,JdCloudResult
{
    /// Quota
    var quota:Quota?



    public override init(){
        super.init()
    }

    enum DescribeUserQuotaResultCodingKeys: String, CodingKey {
        case quota
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUserQuotaResultCodingKeys.self)
        if decoderContainer.contains(.quota)
        {
            self.quota = try decoderContainer.decode(Quota?.self, forKey: .quota)
        }
    }
}
public extension DescribeUserQuotaResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUserQuotaResultCodingKeys.self)
        try encoderContainer.encode(quota, forKey: .quota)
    }
}
public class DescribeUserQuotaResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeUserQuotaResult?;

    enum DescribeUserQuotaResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUserQuotaResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeUserQuotaResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeUserQuotaResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUserQuotaResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询账户的缓存Redis配额信息
public class DescribeUserQuotaRequest:JdCloudRequest
{
}

public class DescribeInstanceConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceConfigResult?;

    enum DescribeInstanceConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改缓存Redis实例的配置参数，支持部分参数修改
public class ModifyInstanceConfigRequest:JdCloudRequest
{
    /// 要修改的配置参数名和参数值
    var instanceConfig:[ConfigItem?]?

    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,instanceConfig:[ConfigItem?]?,cacheInstanceId:String){
        self.instanceConfig = instanceConfig
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstanceConfigRequestRequestCodingKeys: String, CodingKey {
        case instanceConfig
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceConfig, forKey: .instanceConfig)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}

/// 查询缓存Redis实例列表，可分页、可排序、可搜索、可过滤 
public class DescribeCacheInstancesResult:NSObject,JdCloudResult
{
    /// 分页后的实例列表
    var cacheInstances:[CacheInstance?]?

    /// 实例总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeCacheInstancesResultCodingKeys: String, CodingKey {
        case cacheInstances
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCacheInstancesResultCodingKeys.self)
        if decoderContainer.contains(.cacheInstances)
        {
            self.cacheInstances = try decoderContainer.decode([CacheInstance?]?.self, forKey: .cacheInstances)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeCacheInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCacheInstancesResultCodingKeys.self)
        try encoderContainer.encode(cacheInstances, forKey: .cacheInstances)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeBackupsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBackupsResult?;

    enum DescribeBackupsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBackupsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBackupsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取缓存Redis实例的备份文件临时下载地址 
public class DescribeDownloadUrlResult:NSObject,JdCloudResult
{
    /// 备份文件下载信息列表
    var downloadUrls:[DownloadUrl?]?



    public override init(){
        super.init()
    }

    enum DescribeDownloadUrlResultCodingKeys: String, CodingKey {
        case downloadUrls
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDownloadUrlResultCodingKeys.self)
        if decoderContainer.contains(.downloadUrls)
        {
            self.downloadUrls = try decoderContainer.decode([DownloadUrl?]?.self, forKey: .downloadUrls)
        }
    }
}
public extension DescribeDownloadUrlResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDownloadUrlResultCodingKeys.self)
        try encoderContainer.encode(downloadUrls, forKey: .downloadUrls)
    }
}
/// 重置缓存Redis实例的密码，可为空 
public class ResetCacheInstancePasswordResult:NSObject,JdCloudResult
{
}

///  查询缓存Redis实例的自动备份策略
public class DescribeBackupPolicyRequest:JdCloudRequest
{
    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,cacheInstanceId:String){
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum DescribeBackupPolicyRequestRequestCodingKeys: String, CodingKey {
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}

public class ResetCacheInstancePasswordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResetCacheInstancePasswordResult?;

    enum ResetCacheInstancePasswordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResetCacheInstancePasswordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResetCacheInstancePasswordResult?.self, forKey: .result) ?? nil
    }
}

public extension ResetCacheInstancePasswordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetCacheInstancePasswordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyCacheInstanceAttributeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyCacheInstanceAttributeResult?;

    enum ModifyCacheInstanceAttributeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyCacheInstanceAttributeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyCacheInstanceAttributeResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyCacheInstanceAttributeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCacheInstanceAttributeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建并执行缓存Redis实例的备份任务，只能为手动备份，可设置备份文件名称
public class CreateBackupRequest:JdCloudRequest
{
    /// 备份文件名称，只支持英文数字和下划线的组合，长度不超过32个字符
    var fileName:String

    /// 备份类型：手动备份为1，只能为手动备份
    var backupType:Int

    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,fileName:String,backupType:Int,cacheInstanceId:String){
        self.fileName = fileName
        self.backupType = backupType
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum CreateBackupRequestRequestCodingKeys: String, CodingKey {
        case fileName
        case backupType
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackupRequestRequestCodingKeys.self)
        try encoderContainer.encode(fileName, forKey: .fileName)
        try encoderContainer.encode(backupType, forKey: .backupType)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}

/// 查看缓存Redis实例的当前配置参数 
public class DescribeInstanceConfigResult:NSObject,JdCloudResult
{
    /// InstanceConfig
    var instanceConfig:[ConfigItem?]?



    public override init(){
        super.init()
    }

    enum DescribeInstanceConfigResultCodingKeys: String, CodingKey {
        case instanceConfig
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceConfigResultCodingKeys.self)
        if decoderContainer.contains(.instanceConfig)
        {
            self.instanceConfig = try decoderContainer.decode([ConfigItem?]?.self, forKey: .instanceConfig)
        }
    }
}
public extension DescribeInstanceConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceConfigResultCodingKeys.self)
        try encoderContainer.encode(instanceConfig, forKey: .instanceConfig)
    }
}
/// 创建并执行缓存Redis实例的备份任务，只能为手动备份，可设置备份文件名称 
public class CreateBackupResult:NSObject,JdCloudResult
{
    /// 本次备份任务ID，可用于查询本次备份任务的结果
    var baseId:String?



    public override init(){
        super.init()
    }

    enum CreateBackupResultCodingKeys: String, CodingKey {
        case baseId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBackupResultCodingKeys.self)
        if decoderContainer.contains(.baseId)
        {
            self.baseId = try decoderContainer.decode(String?.self, forKey: .baseId)
        }
    }
}
public extension CreateBackupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackupResultCodingKeys.self)
        try encoderContainer.encode(baseId, forKey: .baseId)
    }
}
/// 查询缓存Redis实例的自动备份策略 
public class DescribeBackupPolicyResult:NSObject,JdCloudResult
{
    /// 备份周期，包括：Monday，Tuesday，Wednesday，Thursday，Friday，Saturday，Sunday，多个用逗号分隔
    var backupPeriod:String?

    /// 备份时间，格式为：HH:mm-HH:mm 时区，例如&quot;01:00-02:00 +0800&quot;，表示东八区的1点到2点
    var backupTime:String?

    /// 下次自动备份时间段，ISO 8601标准的UTC时间，格式为：YYYY-MM-DDTHH:mm:ssZ~YYYY-MM-DDTHH:mm:ssZ
    var nextBackupTime:String?



    public override init(){
        super.init()
    }

    enum DescribeBackupPolicyResultCodingKeys: String, CodingKey {
        case backupPeriod
        case backupTime
        case nextBackupTime
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupPolicyResultCodingKeys.self)
        if decoderContainer.contains(.backupPeriod)
        {
            self.backupPeriod = try decoderContainer.decode(String?.self, forKey: .backupPeriod)
        }
        if decoderContainer.contains(.backupTime)
        {
            self.backupTime = try decoderContainer.decode(String?.self, forKey: .backupTime)
        }
        if decoderContainer.contains(.nextBackupTime)
        {
            self.nextBackupTime = try decoderContainer.decode(String?.self, forKey: .nextBackupTime)
        }
    }
}
public extension DescribeBackupPolicyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupPolicyResultCodingKeys.self)
        try encoderContainer.encode(backupPeriod, forKey: .backupPeriod)
        try encoderContainer.encode(backupTime, forKey: .backupTime)
        try encoderContainer.encode(nextBackupTime, forKey: .nextBackupTime)
    }
}
/// 修改缓存Redis实例的资源名称或描述，二者至少选一 
public class ModifyCacheInstanceAttributeResult:NSObject,JdCloudResult
{
}
public class ModifyBackupPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyBackupPolicyResult?;

    enum ModifyBackupPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyBackupPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyBackupPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyBackupPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBackupPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改缓存Redis实例的资源名称或描述，二者至少选一
public class ModifyCacheInstanceAttributeRequest:JdCloudRequest
{
    /// 实例的名称，名称只支持数字、字母、英文下划线、中文，且不少于2字符不超过32字符
    var cacheInstanceName:String?

    /// 实例的描述，不能超过256个字符
    var cacheInstanceDescription:String?

    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,cacheInstanceId:String){
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum ModifyCacheInstanceAttributeRequestRequestCodingKeys: String, CodingKey {
        case cacheInstanceName
        case cacheInstanceDescription
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCacheInstanceAttributeRequestRequestCodingKeys.self)
        try encoderContainer.encode(cacheInstanceName, forKey: .cacheInstanceName)
        try encoderContainer.encode(cacheInstanceDescription, forKey: .cacheInstanceDescription)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}

public class DescribeDownloadUrlResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDownloadUrlResult?;

    enum DescribeDownloadUrlResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDownloadUrlResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDownloadUrlResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDownloadUrlResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDownloadUrlResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class RestoreInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RestoreInstanceResult?;

    enum RestoreInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RestoreInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RestoreInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension RestoreInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeClusterInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeClusterInfoResult?;

    enum DescribeClusterInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeClusterInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeClusterInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeClusterInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeClusterInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取缓存Redis实例的慢查询日志
public class DescribeSlowLogRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// 开始时间
    var startTime:String?

    /// 结束时间
    var endTime:String?

    /// 分片id
    var shardId:String?

    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,cacheInstanceId:String){
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum DescribeSlowLogRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case shardId
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSlowLogRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(shardId, forKey: .shardId)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}


///  重置缓存Redis实例的密码，可为空
public class ResetCacheInstancePasswordRequest:JdCloudRequest
{
    /// 密码，为空即为免密，不少于8字符不超过16字符
    var password:String?

    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,cacheInstanceId:String){
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum ResetCacheInstancePasswordRequestRequestCodingKeys: String, CodingKey {
        case password
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetCacheInstancePasswordRequestRequestCodingKeys.self)
        try encoderContainer.encode(password, forKey: .password)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}


///  查询缓存Redis实例的备份结果（备份文件列表），可分页、可指定起止时间或备份任务ID
public class DescribeBackupsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// 开始时间
    var startTime:String?

    /// 结束时间
    var endTime:String?

    /// 备份任务ID
    var baseId:String?

    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,cacheInstanceId:String){
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum DescribeBackupsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case baseId
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(baseId, forKey: .baseId)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}


///  删除按配置计费、或包年包月已到期的缓存Redis实例，包年包月未到期不可删除。
      ///       /// 只有处于运行running或者错误error状态才可以删除，其余状态不可以删除。
      ///       /// 白名单用户不能删除包年包月已到期的缓存Redis实例。
      ///       /// 
public class DeleteCacheInstanceRequest:JdCloudRequest
{
    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,cacheInstanceId:String){
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum DeleteCacheInstanceRequestRequestCodingKeys: String, CodingKey {
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCacheInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}

public class DescribeCacheInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCacheInstancesResult?;

    enum DescribeCacheInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCacheInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCacheInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCacheInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCacheInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateBackupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateBackupResult?;

    enum CreateBackupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBackupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateBackupResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateBackupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询Redis实例的集群内部信息
public class DescribeClusterInfoRequest:JdCloudRequest
{
    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,cacheInstanceId:String){
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum DescribeClusterInfoRequestRequestCodingKeys: String, CodingKey {
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeClusterInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}


///  修改缓存Redis实例的自动备份策略，可修改备份周期和备份时间
public class ModifyBackupPolicyRequest:JdCloudRequest
{
    /// 备份时间，格式为：HH:mm-HH:mm 时区，例如&quot;01:00-02:00 +0800&quot;，表示东八区的1点到2点
    var backupTime:String

    /// 备份周期，包括：Monday，Tuesday，Wednesday，Thursday，Friday，Saturday，Sunday，多个用逗号分隔
    var backupPeriod:String

    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,backupTime:String,backupPeriod:String,cacheInstanceId:String){
        self.backupTime = backupTime
        self.backupPeriod = backupPeriod
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum ModifyBackupPolicyRequestRequestCodingKeys: String, CodingKey {
        case backupTime
        case backupPeriod
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBackupPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(backupTime, forKey: .backupTime)
        try encoderContainer.encode(backupPeriod, forKey: .backupPeriod)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}

public class CreateCacheInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateCacheInstanceResult?;

    enum CreateCacheInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateCacheInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateCacheInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateCacheInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateCacheInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyCacheInstanceClassResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyCacheInstanceClassResult?;

    enum ModifyCacheInstanceClassResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyCacheInstanceClassResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyCacheInstanceClassResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyCacheInstanceClassResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCacheInstanceClassResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建一个指定配置的缓存Redis实例：可选择主从版或集群版，每种类型又分为多种规格（按CPU核数、内存容量、磁盘容量、带宽等划分），具体可参考产品规格代码，https://docs.jdcloud.com/cn/jcs-for-redis/specifications
      ///       ///  
public class CreateCacheInstanceResult:NSObject,JdCloudResult
{
    /// 实例ID
    var cacheInstanceId:String?

    /// 订单编号
    var orderNum:String?



    public override init(){
        super.init()
    }

    enum CreateCacheInstanceResultCodingKeys: String, CodingKey {
        case cacheInstanceId
        case orderNum
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateCacheInstanceResultCodingKeys.self)
        if decoderContainer.contains(.cacheInstanceId)
        {
            self.cacheInstanceId = try decoderContainer.decode(String?.self, forKey: .cacheInstanceId)
        }
        if decoderContainer.contains(.orderNum)
        {
            self.orderNum = try decoderContainer.decode(String?.self, forKey: .orderNum)
        }
    }
}
public extension CreateCacheInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateCacheInstanceResultCodingKeys.self)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)
        try encoderContainer.encode(orderNum, forKey: .orderNum)
    }
}
/// 恢复缓存Redis实例的某次备份 
public class RestoreInstanceResult:NSObject,JdCloudResult
{
}

///  创建一个指定配置的缓存Redis实例：可选择主从版或集群版，每种类型又分为多种规格（按CPU核数、内存容量、磁盘容量、带宽等划分），具体可参考产品规格代码，https://docs.jdcloud.com/cn/jcs-for-redis/specifications
      ///       /// 
public class CreateCacheInstanceRequest:JdCloudRequest
{
    /// 创建实例时指定的信息
    var cacheInstance:CacheInstanceSpec

    /// 实例的计费类型
    var charge:ChargeSpec?


    public init(regionId: String,cacheInstance:CacheInstanceSpec){
        self.cacheInstance = cacheInstance
        super.init(regionId: regionId)
    }


    enum CreateCacheInstanceRequestRequestCodingKeys: String, CodingKey {
        case cacheInstance
        case charge
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateCacheInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(cacheInstance, forKey: .cacheInstance)
        try encoderContainer.encode(charge, forKey: .charge)

    }
}


///  变更缓存Redis实例规格（变配），只能变更运行状态的实例规格，变更的规格不能与之前的相同。
      ///       /// 预付费用户，从集群版变配到主从版，新规格的内存大小要大于老规格的内存大小，从主从版到集群版，新规格的内存大小要不小于老规格的内存大小。
      ///       /// 
public class ModifyCacheInstanceClassRequest:JdCloudRequest
{
    /// 变更后的实例规格
    var cacheInstanceClass:String

    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,cacheInstanceClass:String,cacheInstanceId:String){
        self.cacheInstanceClass = cacheInstanceClass
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum ModifyCacheInstanceClassRequestRequestCodingKeys: String, CodingKey {
        case cacheInstanceClass
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCacheInstanceClassRequestRequestCodingKeys.self)
        try encoderContainer.encode(cacheInstanceClass, forKey: .cacheInstanceClass)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}


///  查询缓存Redis实例列表，可分页、可排序、可搜索、可过滤
public class DescribeCacheInstancesRequest:JdCloudRequest
{
    /// 页码：取值范围[1,∞)，默认为1
    var pageNumber:Int?

    /// 分页大小：取值范围[10, 100]，默认为10
    var pageSize:Int?

    /// 过滤属性：
      /// cacheInstanceId - 实例Id，精确匹配，可选择多个
      /// cacheInstanceName - 实例名称，模糊匹配
      /// cacheInstanceStatus - 实例状态，精确匹配，可选择多个(running：运行中，error：错误，creating：创建中，changing：变配中，configuring：参数修改中，restoring：备份恢复中，deleting：删除中)
      /// redisVersion - redis引擎版本，精确匹配，可选择2.8和4.0
      /// instanceType - 实例类型，精确匹配（redis表示主从版，redis_cluster表示集群版）
      /// chargeMode - 计费类型，精确匹配（prepaid_by_duration表示包年包月预付费，postpaid_by_duration表示按配置后付费）
      /// 
    var filters:[Filter?]?

    /// 排序属性：
      /// createTime - 按创建时间排序(asc表示按时间正序，desc表示按时间倒序)
      /// 
    var sorts:[Sort?]?

    /// 标签的过滤条件
    var tagFilters:[TagFilter?]?




    enum DescribeCacheInstancesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case sorts
        case tagFilters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCacheInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(sorts, forKey: .sorts)
        try encoderContainer.encode(tagFilters, forKey: .tagFilters)

    }
}

/// 修改缓存Redis实例的自动备份策略，可修改备份周期和备份时间 
public class ModifyBackupPolicyResult:NSObject,JdCloudResult
{
}
public class DescribeSlowLogResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSlowLogResult?;

    enum DescribeSlowLogResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSlowLogResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSlowLogResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSlowLogResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSlowLogResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteCacheInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteCacheInstanceResult?;

    enum DeleteCacheInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteCacheInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteCacheInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteCacheInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCacheInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查看缓存Redis实例的当前配置参数
public class DescribeInstanceConfigRequest:JdCloudRequest
{
    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,cacheInstanceId:String){
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceConfigRequestRequestCodingKeys: String, CodingKey {
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}

/// 查询缓存Redis实例的备份结果（备份文件列表），可分页、可指定起止时间或备份任务ID 
public class DescribeBackupsResult:NSObject,JdCloudResult
{
    /// 备份结果（备份文件）列表
    var backups:[Backup?]?

    /// 备份结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeBackupsResultCodingKeys: String, CodingKey {
        case backups
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupsResultCodingKeys.self)
        if decoderContainer.contains(.backups)
        {
            self.backups = try decoderContainer.decode([Backup?]?.self, forKey: .backups)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeBackupsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupsResultCodingKeys.self)
        try encoderContainer.encode(backups, forKey: .backups)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeBackupPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBackupPolicyResult?;

    enum DescribeBackupPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBackupPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBackupPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeCacheInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCacheInstanceResult?;

    enum DescribeCacheInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCacheInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCacheInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCacheInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCacheInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除按配置计费、或包年包月已到期的缓存Redis实例，包年包月未到期不可删除。
      ///       /// 只有处于运行running或者错误error状态才可以删除，其余状态不可以删除。
      ///       /// 白名单用户不能删除包年包月已到期的缓存Redis实例。
      ///       ///  
public class DeleteCacheInstanceResult:NSObject,JdCloudResult
{
}
/// 修改缓存Redis实例的配置参数，支持部分参数修改 
public class ModifyInstanceConfigResult:NSObject,JdCloudResult
{
}
public class ModifyInstanceConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstanceConfigResult?;

    enum ModifyInstanceConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstanceConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstanceConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取缓存Redis实例的慢查询日志 
public class DescribeSlowLogResult:NSObject,JdCloudResult
{
    /// 该页的慢查询日志列表
    var slowLogs:[SlowLog?]?

    /// 慢查询日志总条数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeSlowLogResultCodingKeys: String, CodingKey {
        case slowLogs
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSlowLogResultCodingKeys.self)
        if decoderContainer.contains(.slowLogs)
        {
            self.slowLogs = try decoderContainer.decode([SlowLog?]?.self, forKey: .slowLogs)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeSlowLogResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSlowLogResultCodingKeys.self)
        try encoderContainer.encode(slowLogs, forKey: .slowLogs)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  获取缓存Redis实例的备份文件临时下载地址
public class DescribeDownloadUrlRequest:JdCloudRequest
{
    /// 备份任务ID
    var baseId:String

    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,baseId:String,cacheInstanceId:String){
        self.baseId = baseId
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum DescribeDownloadUrlRequestRequestCodingKeys: String, CodingKey {
        case baseId
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDownloadUrlRequestRequestCodingKeys.self)
        try encoderContainer.encode(baseId, forKey: .baseId)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}

/// 变更缓存Redis实例规格（变配），只能变更运行状态的实例规格，变更的规格不能与之前的相同。
      ///       /// 预付费用户，从集群版变配到主从版，新规格的内存大小要大于老规格的内存大小，从主从版到集群版，新规格的内存大小要不小于老规格的内存大小。
      ///       ///  
public class ModifyCacheInstanceClassResult:NSObject,JdCloudResult
{
    /// 本次变更请求的订单编号
    var orderNum:String?



    public override init(){
        super.init()
    }

    enum ModifyCacheInstanceClassResultCodingKeys: String, CodingKey {
        case orderNum
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyCacheInstanceClassResultCodingKeys.self)
        if decoderContainer.contains(.orderNum)
        {
            self.orderNum = try decoderContainer.decode(String?.self, forKey: .orderNum)
        }
    }
}
public extension ModifyCacheInstanceClassResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCacheInstanceClassResultCodingKeys.self)
        try encoderContainer.encode(orderNum, forKey: .orderNum)
    }
}
/// 查询缓存Redis实例的详细信息 
public class DescribeCacheInstanceResult:NSObject,JdCloudResult
{
    /// 该实例的详细信息
    var cacheInstance:CacheInstance?



    public override init(){
        super.init()
    }

    enum DescribeCacheInstanceResultCodingKeys: String, CodingKey {
        case cacheInstance
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCacheInstanceResultCodingKeys.self)
        if decoderContainer.contains(.cacheInstance)
        {
            self.cacheInstance = try decoderContainer.decode(CacheInstance?.self, forKey: .cacheInstance)
        }
    }
}
public extension DescribeCacheInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCacheInstanceResultCodingKeys.self)
        try encoderContainer.encode(cacheInstance, forKey: .cacheInstance)
    }
}

///  恢复缓存Redis实例的某次备份
public class RestoreInstanceRequest:JdCloudRequest
{
    /// 备份任务ID
    var baseId:String

    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,baseId:String,cacheInstanceId:String){
        self.baseId = baseId
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum RestoreInstanceRequestRequestCodingKeys: String, CodingKey {
        case baseId
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(baseId, forKey: .baseId)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}

/// 查询Redis实例的集群内部信息 
public class DescribeClusterInfoResult:NSObject,JdCloudResult
{
    /// 集群内部信息
    var info:ClusterInfo?



    public override init(){
        super.init()
    }

    enum DescribeClusterInfoResultCodingKeys: String, CodingKey {
        case info
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeClusterInfoResultCodingKeys.self)
        if decoderContainer.contains(.info)
        {
            self.info = try decoderContainer.decode(ClusterInfo?.self, forKey: .info)
        }
    }
}
public extension DescribeClusterInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeClusterInfoResultCodingKeys.self)
        try encoderContainer.encode(info, forKey: .info)
    }
}

///  查询缓存Redis实例的详细信息
public class DescribeCacheInstanceRequest:JdCloudRequest
{
    /// 缓存Redis实例ID，是访问实例的唯一标识
    var cacheInstanceId:String


    public init(regionId: String,cacheInstanceId:String){
        self.cacheInstanceId = cacheInstanceId
        super.init(regionId: regionId)
    }


    enum DescribeCacheInstanceRequestRequestCodingKeys: String, CodingKey {
        case cacheInstanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCacheInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(cacheInstanceId, forKey: .cacheInstanceId)

    }
}

/// 查询某区域下的缓存Redis实例规格列表 
public class DescribeInstanceClassResult:NSObject,JdCloudResult
{
    /// InstanceClasses
    var instanceClasses:[InstanceClass?]?

    /// TotalCount
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeInstanceClassResultCodingKeys: String, CodingKey {
        case instanceClasses
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceClassResultCodingKeys.self)
        if decoderContainer.contains(.instanceClasses)
        {
            self.instanceClasses = try decoderContainer.decode([InstanceClass?]?.self, forKey: .instanceClasses)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInstanceClassResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceClassResultCodingKeys.self)
        try encoderContainer.encode(instanceClasses, forKey: .instanceClasses)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeInstanceClassResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceClassResult?;

    enum DescribeInstanceClassResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceClassResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceClassResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceClassResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceClassResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询某区域下的缓存Redis实例规格列表
public class DescribeInstanceClassRequest:JdCloudRequest
{
    /// 缓存Redis的版本号：目前有2.8和4.0，默认为2.8
    var redisVersion:String?




    enum DescribeInstanceClassRequestRequestCodingKeys: String, CodingKey {
        case redisVersion
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceClassRequestRequestCodingKeys.self)
        try encoderContainer.encode(redisVersion, forKey: .redisVersion)

    }
}

