/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   OSS相关接口
   OSS相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
///  user
public class User:NSObject,Codable{
    /// Id
    /// Required:true
    var id:String
    /// DisplayName
    /// Required:true
    var displayName:String



    public  init(id:String,displayName:String){
             self.id = id
             self.displayName = displayName
    }

    enum UserCodingKeys: String, CodingKey {
        case id
        case displayName
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UserCodingKeys.self)
        self.id = try decoderContainer.decode(String.self, forKey: .id)
        self.displayName = try decoderContainer.decode(String.self, forKey: .displayName)
    }
}
public extension User{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UserCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(displayName, forKey: .displayName)
    }
}
///  bucket
public class Bucket:NSObject,Codable{
    /// Name
    /// Required:true
    var name:String
    /// CreationDate
    var creationDate:String?



    public  init(name:String){
             self.name = name
    }

    enum BucketCodingKeys: String, CodingKey {
        case name
        case creationDate
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BucketCodingKeys.self)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        if decoderContainer.contains(.creationDate)
        {
            self.creationDate = try decoderContainer.decode(String?.self, forKey: .creationDate)
        }
    }
}
public extension Bucket{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BucketCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(creationDate, forKey: .creationDate)
    }
}
///  listBucketResult
public class ListBucketResult:NSObject,Codable{
    /// Owner
    /// Required:true
    var owner:User
    /// Buckets
    /// Required:true
    var buckets:[Bucket?]?



    public  init(owner:User,buckets:[Bucket?]?){
             self.owner = owner
             self.buckets = buckets
    }

    enum ListBucketResultCodingKeys: String, CodingKey {
        case owner
        case buckets
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListBucketResultCodingKeys.self)
        self.owner = try decoderContainer.decode(User.self, forKey: .owner)
        self.buckets = try decoderContainer.decode([Bucket?]?.self, forKey: .buckets)
    }
}
public extension ListBucketResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListBucketResultCodingKeys.self)
         try encoderContainer.encode(owner, forKey: .owner)
         try encoderContainer.encode(buckets, forKey: .buckets)
    }
}
