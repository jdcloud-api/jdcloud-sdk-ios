/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   OSS相关接口
   OSS相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 创建bucket
      ///       ///  
public class PutBucketResult:NSObject,JdCloudResult
{
}

///  查询bucket是否存在
      ///       /// 
public class HeadBucketRequest:JdCloudRequest
{
    /// bucket名字，例如：test-bucket
    var bucketname:String


    public init(regionId: String,bucketname:String){
        self.bucketname = bucketname
        super.init(regionId: regionId)
    }


    enum HeadBucketRequestRequestCodingKeys: String, CodingKey {
        case bucketname
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: HeadBucketRequestRequestCodingKeys.self)
        try encoderContainer.encode(bucketname, forKey: .bucketname)

    }
}

public class DeleteBucketResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteBucketResult?;

    enum DeleteBucketResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteBucketResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteBucketResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteBucketResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBucketResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ListBucketsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ListBucketsResult?;

    enum ListBucketsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListBucketsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ListBucketsResult?.self, forKey: .result) ?? nil
    }
}

public extension ListBucketsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListBucketsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class HeadBucketResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:HeadBucketResult?;

    enum HeadBucketResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: HeadBucketResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(HeadBucketResult?.self, forKey: .result) ?? nil
    }
}

public extension HeadBucketResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: HeadBucketResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除一个bucket
      ///       ///  
public class DeleteBucketResult:NSObject,JdCloudResult
{
}
public class PutBucketResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:PutBucketResult?;

    enum PutBucketResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PutBucketResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(PutBucketResult?.self, forKey: .result) ?? nil
    }
}

public extension PutBucketResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PutBucketResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  列出当前用户的所有bucket
      ///       /// 
public class ListBucketsRequest:JdCloudRequest
{
}


///  创建bucket
      ///       /// 
public class PutBucketRequest:JdCloudRequest
{
    /// bucket名字，例如：test-bucket
    var bucketname:String


    public init(regionId: String,bucketname:String){
        self.bucketname = bucketname
        super.init(regionId: regionId)
    }


    enum PutBucketRequestRequestCodingKeys: String, CodingKey {
        case bucketname
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PutBucketRequestRequestCodingKeys.self)
        try encoderContainer.encode(bucketname, forKey: .bucketname)

    }
}


///  删除一个bucket
      ///       /// 
public class DeleteBucketRequest:JdCloudRequest
{
    /// bucket名字，例如：test-bucket
    var bucketname:String


    public init(regionId: String,bucketname:String){
        self.bucketname = bucketname
        super.init(regionId: regionId)
    }


    enum DeleteBucketRequestRequestCodingKeys: String, CodingKey {
        case bucketname
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBucketRequestRequestCodingKeys.self)
        try encoderContainer.encode(bucketname, forKey: .bucketname)

    }
}

/// 查询bucket是否存在
      ///       ///  
public class HeadBucketResult:NSObject,JdCloudResult
{
}
/// 列出当前用户的所有bucket
      ///       ///  
public class ListBucketsResult:NSObject,JdCloudResult
{
    /// Owner
    var owner:User?

    /// Buckets
    var buckets:[Bucket?]?



    public override init(){
        super.init()
    }

    enum ListBucketsResultCodingKeys: String, CodingKey {
        case owner
        case buckets
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListBucketsResultCodingKeys.self)
        if decoderContainer.contains(.owner)
        {
            self.owner = try decoderContainer.decode(User?.self, forKey: .owner)
        }
        if decoderContainer.contains(.buckets)
        {
            self.buckets = try decoderContainer.decode([Bucket?]?.self, forKey: .buckets)
        }
    }
}
public extension ListBucketsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListBucketsResultCodingKeys.self)
        try encoderContainer.encode(owner, forKey: .owner)
        try encoderContainer.encode(buckets, forKey: .buckets)
    }
}
