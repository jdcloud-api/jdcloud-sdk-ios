/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  ccIpLimitSpec
@objc(CcIpLimitSpec)
public class CcIpLimitSpec:NSObject,Codable{
    /// cc防护每ip的限速大小
    /// Required:true
    var ccSpeedLimit:Int64
    /// cc防护每ip的限速大小的统计周期
    /// Required:true
    var ccSpeedPeriod:Int64



    public  init(ccSpeedLimit:Int64,ccSpeedPeriod:Int64){
             self.ccSpeedLimit = ccSpeedLimit
             self.ccSpeedPeriod = ccSpeedPeriod
    }

    enum CcIpLimitSpecCodingKeys: String, CodingKey {
        case ccSpeedLimit
        case ccSpeedPeriod
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CcIpLimitSpecCodingKeys.self)
        self.ccSpeedLimit = try decoderContainer.decode(Int64.self, forKey: .ccSpeedLimit)
        self.ccSpeedPeriod = try decoderContainer.decode(Int64.self, forKey: .ccSpeedPeriod)
    }
}
public extension CcIpLimitSpec{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CcIpLimitSpecCodingKeys.self)
         try encoderContainer.encode(ccSpeedLimit, forKey: .ccSpeedLimit)
         try encoderContainer.encode(ccSpeedPeriod, forKey: .ccSpeedPeriod)
    }
}
