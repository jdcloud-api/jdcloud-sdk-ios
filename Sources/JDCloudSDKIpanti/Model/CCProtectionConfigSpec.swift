/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  cCProtectionConfigSpec
@objc(CCProtectionConfigSpec)
public class CCProtectionConfigSpec:NSObject,Codable{
    /// 防护等级, 0: 正常, 1: 宽松, 2: 紧急, 3: 自定义
    /// Required:true
    var level:Int
    /// HTTP 请求数阈值, 防护等级为自定义时必传
    var ccThreshold:Int64?
    /// Host 的防护阈值, 防护等级为自定义时必传
    var hostQps:Int64?
    /// Host + Url 的防护阈值, 防护等级为自定义时必传
    var hostUrlQps:Int64?
    /// 每个源 IP 对 Host 的防护阈值, 防护等级为自定义时必传
    var ipHostQps:Int64?
    /// 每个源 IP 对 Host + Url 的防护阈值, 防护等级为自定义时必传
    var ipHostUrlQps:Int64?



    public  init(level:Int){
             self.level = level
    }

    enum CCProtectionConfigSpecCodingKeys: String, CodingKey {
        case level
        case ccThreshold
        case hostQps
        case hostUrlQps
        case ipHostQps
        case ipHostUrlQps
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CCProtectionConfigSpecCodingKeys.self)
        self.level = try decoderContainer.decode(Int.self, forKey: .level)
        if decoderContainer.contains(.ccThreshold)
        {
            self.ccThreshold = try decoderContainer.decode(Int64?.self, forKey: .ccThreshold)
        }
        if decoderContainer.contains(.hostQps)
        {
            self.hostQps = try decoderContainer.decode(Int64?.self, forKey: .hostQps)
        }
        if decoderContainer.contains(.hostUrlQps)
        {
            self.hostUrlQps = try decoderContainer.decode(Int64?.self, forKey: .hostUrlQps)
        }
        if decoderContainer.contains(.ipHostQps)
        {
            self.ipHostQps = try decoderContainer.decode(Int64?.self, forKey: .ipHostQps)
        }
        if decoderContainer.contains(.ipHostUrlQps)
        {
            self.ipHostUrlQps = try decoderContainer.decode(Int64?.self, forKey: .ipHostUrlQps)
        }
    }
}
public extension CCProtectionConfigSpec{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CCProtectionConfigSpecCodingKeys.self)
         try encoderContainer.encode(level, forKey: .level)
         try encoderContainer.encode(ccThreshold, forKey: .ccThreshold)
         try encoderContainer.encode(hostQps, forKey: .hostQps)
         try encoderContainer.encode(hostUrlQps, forKey: .hostUrlQps)
         try encoderContainer.encode(ipHostQps, forKey: .ipHostQps)
         try encoderContainer.encode(ipHostUrlQps, forKey: .ipHostUrlQps)
    }
}
