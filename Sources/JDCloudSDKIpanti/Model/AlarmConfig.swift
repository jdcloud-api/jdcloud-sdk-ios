/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  alarmConfig
@objc(AlarmConfig)
public class AlarmConfig:NSObject,Codable{
    /// 黑洞告警邮件开关 0 关闭 1 开启
    var blackHoleAlarmEmailStatus:Int?
    /// 黑洞告警短信开关 0 关闭 1 开启
    var blackHoleAlarmSmsStatus:Int?
    /// 黑洞告警总开关  0 关闭 1 开启
    var blackHoleAlarmStatus:Int?
    /// DDos 攻击告警邮件开关  0 关闭 1 开启
    var ddosAlarmEmailStatus:Int?
    /// DDos 攻击告警短信开关  0 关闭 1 开启
    var ddosAlarmSmsStatus:Int?
    /// DDos 告警总开关 0 关闭 1 开启
    var ddosAlarmStatus:Int?
    /// 错误码告警总开关
    var errorCodeAlarmStatus:Int?
    /// 错误码告警域名列表
    var errorCodeDomain:[String?]?



    public override init(){
            super.init()
    }

    enum AlarmConfigCodingKeys: String, CodingKey {
        case blackHoleAlarmEmailStatus
        case blackHoleAlarmSmsStatus
        case blackHoleAlarmStatus
        case ddosAlarmEmailStatus
        case ddosAlarmSmsStatus
        case ddosAlarmStatus
        case errorCodeAlarmStatus
        case errorCodeDomain
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AlarmConfigCodingKeys.self)
        if decoderContainer.contains(.blackHoleAlarmEmailStatus)
        {
            self.blackHoleAlarmEmailStatus = try decoderContainer.decode(Int?.self, forKey: .blackHoleAlarmEmailStatus)
        }
        if decoderContainer.contains(.blackHoleAlarmSmsStatus)
        {
            self.blackHoleAlarmSmsStatus = try decoderContainer.decode(Int?.self, forKey: .blackHoleAlarmSmsStatus)
        }
        if decoderContainer.contains(.blackHoleAlarmStatus)
        {
            self.blackHoleAlarmStatus = try decoderContainer.decode(Int?.self, forKey: .blackHoleAlarmStatus)
        }
        if decoderContainer.contains(.ddosAlarmEmailStatus)
        {
            self.ddosAlarmEmailStatus = try decoderContainer.decode(Int?.self, forKey: .ddosAlarmEmailStatus)
        }
        if decoderContainer.contains(.ddosAlarmSmsStatus)
        {
            self.ddosAlarmSmsStatus = try decoderContainer.decode(Int?.self, forKey: .ddosAlarmSmsStatus)
        }
        if decoderContainer.contains(.ddosAlarmStatus)
        {
            self.ddosAlarmStatus = try decoderContainer.decode(Int?.self, forKey: .ddosAlarmStatus)
        }
        if decoderContainer.contains(.errorCodeAlarmStatus)
        {
            self.errorCodeAlarmStatus = try decoderContainer.decode(Int?.self, forKey: .errorCodeAlarmStatus)
        }
        if decoderContainer.contains(.errorCodeDomain)
        {
            self.errorCodeDomain = try decoderContainer.decode([String?]?.self, forKey: .errorCodeDomain)
        }
    }
}
public extension AlarmConfig{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AlarmConfigCodingKeys.self)
         try encoderContainer.encode(blackHoleAlarmEmailStatus, forKey: .blackHoleAlarmEmailStatus)
         try encoderContainer.encode(blackHoleAlarmSmsStatus, forKey: .blackHoleAlarmSmsStatus)
         try encoderContainer.encode(blackHoleAlarmStatus, forKey: .blackHoleAlarmStatus)
         try encoderContainer.encode(ddosAlarmEmailStatus, forKey: .ddosAlarmEmailStatus)
         try encoderContainer.encode(ddosAlarmSmsStatus, forKey: .ddosAlarmSmsStatus)
         try encoderContainer.encode(ddosAlarmStatus, forKey: .ddosAlarmStatus)
         try encoderContainer.encode(errorCodeAlarmStatus, forKey: .errorCodeAlarmStatus)
         try encoderContainer.encode(errorCodeDomain, forKey: .errorCodeDomain)
    }
}
