/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  instanceSpec
@objc(InstanceSpec)
public class InstanceSpec:NSObject,Codable{
    /// 实例名称
    var name:String?
    /// 购买类型：1新购 3升级
    var buyType:Int?
    /// 购买时长单位：3月 4年
    var timeUnit:Int?
    /// 购买时长跨度
    var timeSpan:Int?
    /// 线路：TELECOM为电信线路，UNICOM为联通线路，CMCC为移动线路
    var carrier:String?
    /// 保底带宽：单位Gbps
    var bp:Int?
    /// 弹性带宽：单位Gbps
    var ep:Int?
    /// 业务带宽：单位Mbps
    var bw:Int?
    /// 支付成功后跳转的页面，控制台交互模式传该字段
    var returnUrl:String?



    public override init(){
            super.init()
    }

    enum InstanceSpecCodingKeys: String, CodingKey {
        case name
        case buyType
        case timeUnit
        case timeSpan
        case carrier
        case bp
        case ep
        case bw
        case returnUrl
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InstanceSpecCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.buyType)
        {
            self.buyType = try decoderContainer.decode(Int?.self, forKey: .buyType)
        }
        if decoderContainer.contains(.timeUnit)
        {
            self.timeUnit = try decoderContainer.decode(Int?.self, forKey: .timeUnit)
        }
        if decoderContainer.contains(.timeSpan)
        {
            self.timeSpan = try decoderContainer.decode(Int?.self, forKey: .timeSpan)
        }
        if decoderContainer.contains(.carrier)
        {
            self.carrier = try decoderContainer.decode(String?.self, forKey: .carrier)
        }
        if decoderContainer.contains(.bp)
        {
            self.bp = try decoderContainer.decode(Int?.self, forKey: .bp)
        }
        if decoderContainer.contains(.ep)
        {
            self.ep = try decoderContainer.decode(Int?.self, forKey: .ep)
        }
        if decoderContainer.contains(.bw)
        {
            self.bw = try decoderContainer.decode(Int?.self, forKey: .bw)
        }
        if decoderContainer.contains(.returnUrl)
        {
            self.returnUrl = try decoderContainer.decode(String?.self, forKey: .returnUrl)
        }
    }
}
public extension InstanceSpec{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InstanceSpecCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(buyType, forKey: .buyType)
         try encoderContainer.encode(timeUnit, forKey: .timeUnit)
         try encoderContainer.encode(timeSpan, forKey: .timeSpan)
         try encoderContainer.encode(carrier, forKey: .carrier)
         try encoderContainer.encode(bp, forKey: .bp)
         try encoderContainer.encode(ep, forKey: .ep)
         try encoderContainer.encode(bw, forKey: .bw)
         try encoderContainer.encode(returnUrl, forKey: .returnUrl)
    }
}
