/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  cpsIpResource
@objc(CpsIpResource)
public class CpsIpResource:NSObject,Codable{
    /// 云物理服务器公网 IP 地址
    var ip:String?
    /// 公网 IP 类型或绑定资源类型:
      ///   0: 未知类型
      ///   1: 弹性公网 IP(IP 为弹性公网 IP, 绑定资源类型未知)
      ///   10: 弹性公网 IP(IP 为弹性公网 IP, 但未绑定资源)
      ///   11: 弹性公网 IP, 绑定了云主机
      ///   12: 弹性公网 IP, 绑定了负载均衡
      ///   13: 弹性公网 IP, 绑定了原生容器实例
      ///   14: 弹性公网 IP, 绑定了原生容器 Pod
      ///   2: 云物理服务器公网 IP
    var resourceType:Int?



    public override init(){
            super.init()
    }

    enum CpsIpResourceCodingKeys: String, CodingKey {
        case ip
        case resourceType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CpsIpResourceCodingKeys.self)
        if decoderContainer.contains(.ip)
        {
            self.ip = try decoderContainer.decode(String?.self, forKey: .ip)
        }
        if decoderContainer.contains(.resourceType)
        {
            self.resourceType = try decoderContainer.decode(Int?.self, forKey: .resourceType)
        }
    }
}
public extension CpsIpResource{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CpsIpResourceCodingKeys.self)
         try encoderContainer.encode(ip, forKey: .ip)
         try encoderContainer.encode(resourceType, forKey: .resourceType)
    }
}
