/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createInstanceSpec
@objc(CreateInstanceSpec)
public class CreateInstanceSpec:NSObject,Codable{
    /// 实例 Id, 升级时必传
    var id:Int64?
    /// 实例名称, 新购时必传
    var name:String?
    /// 购买类型：1新购 3升级
    /// Required:true
    var buyType:Int
    /// 链路类型, 1: 电信, 2: 电信、联通, 3: 电信、联通和移动
    /// Required:true
    var carrier:Int
    /// 可防护 ip 类型, 目前仅电信线路支持 IPV6 线路:
      /// - 0: IPV4,
      /// - 1: IPV4/IPV6
      /// 
    /// Required:true
    var ipType:Int
    /// 保底带宽：单位Gbps
    /// Required:true
    var bp:Int
    /// 弹性带宽：单位Gbps
    /// Required:true
    var ep:Int
    /// 业务带宽：单位Mbps
    /// Required:true
    var bw:Int
    /// 购买防护包时长, 新购高防实例时必传
      /// - timeUnit 为 3 时, 可取值 1-9
      /// - timeUnit 为 4 时, 可取值 1-3
      /// 
    var timeSpan:Int64?
    /// 购买时长类型, 新购高防实例时必传
      /// - 3: 月
      /// - 4: 年
      /// 
    var timeUnit:Int?
    /// 支付成功后跳转的页面，控制台交互模式传该字段
    var returnUrl:String?



    public  init(buyType:Int,carrier:Int,ipType:Int,bp:Int,ep:Int,bw:Int){
             self.buyType = buyType
             self.carrier = carrier
             self.ipType = ipType
             self.bp = bp
             self.ep = ep
             self.bw = bw
    }

    enum CreateInstanceSpecCodingKeys: String, CodingKey {
        case id
        case name
        case buyType
        case carrier
        case ipType
        case bp
        case ep
        case bw
        case timeSpan
        case timeUnit
        case returnUrl
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceSpecCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int64?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        self.buyType = try decoderContainer.decode(Int.self, forKey: .buyType)
        self.carrier = try decoderContainer.decode(Int.self, forKey: .carrier)
        self.ipType = try decoderContainer.decode(Int.self, forKey: .ipType)
        self.bp = try decoderContainer.decode(Int.self, forKey: .bp)
        self.ep = try decoderContainer.decode(Int.self, forKey: .ep)
        self.bw = try decoderContainer.decode(Int.self, forKey: .bw)
        if decoderContainer.contains(.timeSpan)
        {
            self.timeSpan = try decoderContainer.decode(Int64?.self, forKey: .timeSpan)
        }
        if decoderContainer.contains(.timeUnit)
        {
            self.timeUnit = try decoderContainer.decode(Int?.self, forKey: .timeUnit)
        }
        if decoderContainer.contains(.returnUrl)
        {
            self.returnUrl = try decoderContainer.decode(String?.self, forKey: .returnUrl)
        }
    }
}
public extension CreateInstanceSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceSpecCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(buyType, forKey: .buyType)
         try encoderContainer.encode(carrier, forKey: .carrier)
         try encoderContainer.encode(ipType, forKey: .ipType)
         try encoderContainer.encode(bp, forKey: .bp)
         try encoderContainer.encode(ep, forKey: .ep)
         try encoderContainer.encode(bw, forKey: .bw)
         try encoderContainer.encode(timeSpan, forKey: .timeSpan)
         try encoderContainer.encode(timeUnit, forKey: .timeUnit)
         try encoderContainer.encode(returnUrl, forKey: .returnUrl)
    }
}
