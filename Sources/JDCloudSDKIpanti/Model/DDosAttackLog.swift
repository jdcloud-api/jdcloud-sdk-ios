/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  dDoSAttackLog
@objc(DDoSAttackLog)
public class DDoSAttackLog:NSObject,Codable{
    /// 攻击流量大小
    var attackTraffic:Double?
    /// 是否触发黑洞，0否 1是
    var blackHole:Int?
    /// 攻击开始时间
    var startTime:String?
    /// 攻击结束时间
    var endTime:String?
    /// 流量单位，bps、Kbps、Mbps、Gbps
    var unit:String?
    /// 高防实例id
    var instanceId:String?
    /// 高防实例名称
    var name:String?



    public override init(){
            super.init()
    }

    enum DDoSAttackLogCodingKeys: String, CodingKey {
        case attackTraffic
        case blackHole
        case startTime
        case endTime
        case unit
        case instanceId
        case name
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DDoSAttackLogCodingKeys.self)
        if decoderContainer.contains(.attackTraffic)
        {
            self.attackTraffic = try decoderContainer.decode(Double?.self, forKey: .attackTraffic)
        }
        if decoderContainer.contains(.blackHole)
        {
            self.blackHole = try decoderContainer.decode(Int?.self, forKey: .blackHole)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
    }
}
public extension DDoSAttackLog{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DDoSAttackLogCodingKeys.self)
         try encoderContainer.encode(attackTraffic, forKey: .attackTraffic)
         try encoderContainer.encode(blackHole, forKey: .blackHole)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
         try encoderContainer.encode(unit, forKey: .unit)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
         try encoderContainer.encode(name, forKey: .name)
    }
}
