/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  cCProtectionRule
@objc(CCProtectionRule)
public class CCProtectionRule:NSObject,Codable{
    /// CC 防护规则 ID
    var id:Int64?
    /// CC 防护规则对应的网站规则 ID
    var webRuleId:Int64?
    /// CC 防护规则对应的实例 ID
    var instanceId:Int64?
    /// CC 防护规则名称, 30 字符以内
    var name:String?
    /// CC 防护规则状态: 0: 关闭, 1: 开启
    var enable:Int?
    /// uri, 以 / 开头, 200 字符以内
    var uri:String?
    /// 匹配 uri 类型, 0: 精确匹配, 1: 前缀匹配
    var matchType:Int?
    /// 检测周期, 单位为秒, 取值范围[5, 10800]
    var detectPeriod:Int64?
    /// ip 访问次数, 取值范围[2, 2000]
    var singleIpLimit:Int64?
    /// 阻断类型, 1: 封禁, 2: 人机交互
    var blockType:Int?
    /// 阻断持续时间, 单位为分钟, 取值范围[1, 1440]
    var blockTime:Int64?



    public override init(){
            super.init()
    }

    enum CCProtectionRuleCodingKeys: String, CodingKey {
        case id
        case webRuleId
        case instanceId
        case name
        case enable
        case uri
        case matchType
        case detectPeriod
        case singleIpLimit
        case blockType
        case blockTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CCProtectionRuleCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int64?.self, forKey: .id)
        }
        if decoderContainer.contains(.webRuleId)
        {
            self.webRuleId = try decoderContainer.decode(Int64?.self, forKey: .webRuleId)
        }
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(Int64?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.enable)
        {
            self.enable = try decoderContainer.decode(Int?.self, forKey: .enable)
        }
        if decoderContainer.contains(.uri)
        {
            self.uri = try decoderContainer.decode(String?.self, forKey: .uri)
        }
        if decoderContainer.contains(.matchType)
        {
            self.matchType = try decoderContainer.decode(Int?.self, forKey: .matchType)
        }
        if decoderContainer.contains(.detectPeriod)
        {
            self.detectPeriod = try decoderContainer.decode(Int64?.self, forKey: .detectPeriod)
        }
        if decoderContainer.contains(.singleIpLimit)
        {
            self.singleIpLimit = try decoderContainer.decode(Int64?.self, forKey: .singleIpLimit)
        }
        if decoderContainer.contains(.blockType)
        {
            self.blockType = try decoderContainer.decode(Int?.self, forKey: .blockType)
        }
        if decoderContainer.contains(.blockTime)
        {
            self.blockTime = try decoderContainer.decode(Int64?.self, forKey: .blockTime)
        }
    }
}
public extension CCProtectionRule{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CCProtectionRuleCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(webRuleId, forKey: .webRuleId)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(enable, forKey: .enable)
         try encoderContainer.encode(uri, forKey: .uri)
         try encoderContainer.encode(matchType, forKey: .matchType)
         try encoderContainer.encode(detectPeriod, forKey: .detectPeriod)
         try encoderContainer.encode(singleIpLimit, forKey: .singleIpLimit)
         try encoderContainer.encode(blockType, forKey: .blockType)
         try encoderContainer.encode(blockTime, forKey: .blockTime)
    }
}
