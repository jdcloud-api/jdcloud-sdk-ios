/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  certificate
@objc(Certificate)
public class Certificate:NSObject,Codable{
    /// 证书 Id
    var id:Int64?
    /// 证书名称
    var name:String?
    /// 证书
    var content:String?
    /// 秘钥
    var rsaKey:String?
    /// 绑定域名
    var domain:String?
    /// 证书生效时间
    var from:String?
    /// 证书到期时间
    var to:String?
    /// 加密算法
    var sigAlgName:String?
    /// 颁发者
    var issuer:String?
    /// 颁发给
    var organization:String?
    /// 上传时间
    var uploadTime:String?
    /// 已关联域名
    var associatedDomains:[String?]?
    /// 推荐域名
    var sanDomains:[String?]?



    public override init(){
            super.init()
    }

    enum CertificateCodingKeys: String, CodingKey {
        case id
        case name
        case content
        case rsaKey
        case domain
        case from
        case to
        case sigAlgName
        case issuer
        case organization
        case uploadTime
        case associatedDomains
        case sanDomains
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CertificateCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int64?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.content)
        {
            self.content = try decoderContainer.decode(String?.self, forKey: .content)
        }
        if decoderContainer.contains(.rsaKey)
        {
            self.rsaKey = try decoderContainer.decode(String?.self, forKey: .rsaKey)
        }
        if decoderContainer.contains(.domain)
        {
            self.domain = try decoderContainer.decode(String?.self, forKey: .domain)
        }
        if decoderContainer.contains(.from)
        {
            self.from = try decoderContainer.decode(String?.self, forKey: .from)
        }
        if decoderContainer.contains(.to)
        {
            self.to = try decoderContainer.decode(String?.self, forKey: .to)
        }
        if decoderContainer.contains(.sigAlgName)
        {
            self.sigAlgName = try decoderContainer.decode(String?.self, forKey: .sigAlgName)
        }
        if decoderContainer.contains(.issuer)
        {
            self.issuer = try decoderContainer.decode(String?.self, forKey: .issuer)
        }
        if decoderContainer.contains(.organization)
        {
            self.organization = try decoderContainer.decode(String?.self, forKey: .organization)
        }
        if decoderContainer.contains(.uploadTime)
        {
            self.uploadTime = try decoderContainer.decode(String?.self, forKey: .uploadTime)
        }
        if decoderContainer.contains(.associatedDomains)
        {
            self.associatedDomains = try decoderContainer.decode([String?]?.self, forKey: .associatedDomains)
        }
        if decoderContainer.contains(.sanDomains)
        {
            self.sanDomains = try decoderContainer.decode([String?]?.self, forKey: .sanDomains)
        }
    }
}
public extension Certificate{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CertificateCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(content, forKey: .content)
         try encoderContainer.encode(rsaKey, forKey: .rsaKey)
         try encoderContainer.encode(domain, forKey: .domain)
         try encoderContainer.encode(from, forKey: .from)
         try encoderContainer.encode(to, forKey: .to)
         try encoderContainer.encode(sigAlgName, forKey: .sigAlgName)
         try encoderContainer.encode(issuer, forKey: .issuer)
         try encoderContainer.encode(organization, forKey: .organization)
         try encoderContainer.encode(uploadTime, forKey: .uploadTime)
         try encoderContainer.encode(associatedDomains, forKey: .associatedDomains)
         try encoderContainer.encode(sanDomains, forKey: .sanDomains)
    }
}
