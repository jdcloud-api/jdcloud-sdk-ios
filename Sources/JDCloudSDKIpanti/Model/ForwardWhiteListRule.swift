/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  forwardWhiteListRule
@objc(ForwardWhiteListRule)
public class ForwardWhiteListRule:NSObject,Codable{
    /// 是否开启, 0: 关闭, 1: 开启
    var status:Int?
    /// 引用的 IP 黑白名单 Id
    var ipSetId:String?
    /// 引用的 IP 黑白名单名称
    var ipSetName:String?
    /// IP 或 IP 段的数组
    var ip:[String?]?



    public override init(){
            super.init()
    }

    enum ForwardWhiteListRuleCodingKeys: String, CodingKey {
        case status
        case ipSetId
        case ipSetName
        case ip
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ForwardWhiteListRuleCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.ipSetId)
        {
            self.ipSetId = try decoderContainer.decode(String?.self, forKey: .ipSetId)
        }
        if decoderContainer.contains(.ipSetName)
        {
            self.ipSetName = try decoderContainer.decode(String?.self, forKey: .ipSetName)
        }
        if decoderContainer.contains(.ip)
        {
            self.ip = try decoderContainer.decode([String?]?.self, forKey: .ip)
        }
    }
}
public extension ForwardWhiteListRule{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ForwardWhiteListRuleCodingKeys.self)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(ipSetId, forKey: .ipSetId)
         try encoderContainer.encode(ipSetName, forKey: .ipSetName)
         try encoderContainer.encode(ip, forKey: .ip)
    }
}
