/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  cCProtectionRuleSpec
@objc(CCProtectionRuleSpec)
public class CCProtectionRuleSpec:NSObject,Codable{
    /// CC 防护规则名称, 不允许为空, 长度不超过 32 个字符, 支持中文, 大小写字母, 数字及字符&#39;-&#39;、&#39;/&#39;、&#39;.&#39;、&#39;_&#39;
    /// Required:true
    var name:String
    /// uri, 不允许为空, 以 / 开头, 长度不超过 2048 个字符
    /// Required:true
    var uri:String
    /// 匹配 uri 类型, 0: 精确匹配, 1: 前缀匹配
    /// Required:true
    var matchType:Int
    /// 检测周期, 单位为秒, 取值范围[5, 10800]
    /// Required:true
    var detectPeriod:Int64
    /// ip 访问次数, 取值范围[2, 2000]
    /// Required:true
    var singleIpLimit:Int64
    /// 阻断类型, 1: 封禁, 2: 人机交互
    /// Required:true
    var blockType:Int
    /// 阻断持续时间, 单位为分钟, 取值范围[1, 1440]
    /// Required:true
    var blockTime:Int64



    public  init(name:String,uri:String,matchType:Int,detectPeriod:Int64,singleIpLimit:Int64,blockType:Int,blockTime:Int64){
             self.name = name
             self.uri = uri
             self.matchType = matchType
             self.detectPeriod = detectPeriod
             self.singleIpLimit = singleIpLimit
             self.blockType = blockType
             self.blockTime = blockTime
    }

    enum CCProtectionRuleSpecCodingKeys: String, CodingKey {
        case name
        case uri
        case matchType
        case detectPeriod
        case singleIpLimit
        case blockType
        case blockTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CCProtectionRuleSpecCodingKeys.self)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        self.uri = try decoderContainer.decode(String.self, forKey: .uri)
        self.matchType = try decoderContainer.decode(Int.self, forKey: .matchType)
        self.detectPeriod = try decoderContainer.decode(Int64.self, forKey: .detectPeriod)
        self.singleIpLimit = try decoderContainer.decode(Int64.self, forKey: .singleIpLimit)
        self.blockType = try decoderContainer.decode(Int.self, forKey: .blockType)
        self.blockTime = try decoderContainer.decode(Int64.self, forKey: .blockTime)
    }
}
public extension CCProtectionRuleSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CCProtectionRuleSpecCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(uri, forKey: .uri)
         try encoderContainer.encode(matchType, forKey: .matchType)
         try encoderContainer.encode(detectPeriod, forKey: .detectPeriod)
         try encoderContainer.encode(singleIpLimit, forKey: .singleIpLimit)
         try encoderContainer.encode(blockType, forKey: .blockType)
         try encoderContainer.encode(blockTime, forKey: .blockTime)
    }
}
