/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  forwardRuleSpec
@objc(ForwardRuleSpec)
public class ForwardRuleSpec:NSObject,Codable{
    /// 协议：TCP或者UDP
    var protocolValue:String?
    /// 端口号
    var port:Int?
    /// 转发规则：wrr-&gt;带权重的轮询，wlc-&gt;加权最小连接，rr-&gt;不带权重的轮询，sh-&gt;源地址hash
    var algorithm:String?
    /// 回源类型，ip或者domain
    var originType:String?
    /// OriginAddr
    var originAddr:[OriginAddrItem?]?
    /// OnlineAddr
    var onlineAddr:[String?]?
    /// 回源域名
    var originDomain:String?
    /// 回源端口号
    var originPort:Int?



    public override init(){
            super.init()
    }

    enum ForwardRuleSpecCodingKeys: String, CodingKey {
        case protocolValue = "protocol"
        case port
        case algorithm
        case originType
        case originAddr
        case onlineAddr
        case originDomain
        case originPort
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ForwardRuleSpecCodingKeys.self)
        if decoderContainer.contains(.protocolValue)
        {
            self.protocolValue = try decoderContainer.decode(String?.self, forKey: .protocolValue)
        }
        if decoderContainer.contains(.port)
        {
            self.port = try decoderContainer.decode(Int?.self, forKey: .port)
        }
        if decoderContainer.contains(.algorithm)
        {
            self.algorithm = try decoderContainer.decode(String?.self, forKey: .algorithm)
        }
        if decoderContainer.contains(.originType)
        {
            self.originType = try decoderContainer.decode(String?.self, forKey: .originType)
        }
        if decoderContainer.contains(.originAddr)
        {
            self.originAddr = try decoderContainer.decode([OriginAddrItem?]?.self, forKey: .originAddr)
        }
        if decoderContainer.contains(.onlineAddr)
        {
            self.onlineAddr = try decoderContainer.decode([String?]?.self, forKey: .onlineAddr)
        }
        if decoderContainer.contains(.originDomain)
        {
            self.originDomain = try decoderContainer.decode(String?.self, forKey: .originDomain)
        }
        if decoderContainer.contains(.originPort)
        {
            self.originPort = try decoderContainer.decode(Int?.self, forKey: .originPort)
        }
    }
}
public extension ForwardRuleSpec{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ForwardRuleSpecCodingKeys.self)
         try encoderContainer.encode(protocolValue, forKey: .protocolValue)
         try encoderContainer.encode(port, forKey: .port)
         try encoderContainer.encode(algorithm, forKey: .algorithm)
         try encoderContainer.encode(originType, forKey: .originType)
         try encoderContainer.encode(originAddr, forKey: .originAddr)
         try encoderContainer.encode(onlineAddr, forKey: .onlineAddr)
         try encoderContainer.encode(originDomain, forKey: .originDomain)
         try encoderContainer.encode(originPort, forKey: .originPort)
    }
}
