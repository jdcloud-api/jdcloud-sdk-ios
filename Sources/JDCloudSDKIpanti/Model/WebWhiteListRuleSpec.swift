/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  webWhiteListRuleSpec
@objc(WebWhiteListRuleSpec)
public class WebWhiteListRuleSpec:NSObject,Codable{
    /// 白名单规则名称
    /// Required:true
    var name:String
    /// 模式:&lt;br&gt;- 0: uri&lt;br&gt;- 1: ip&lt;br&gt;- 2: cookie&lt;br&gt;- 3: geo&lt;br&gt;- 4: header
    /// Required:true
    var mode:Int
    /// 匹配 key. mode 为 cookie 和 header 时必传.
      /// - mode 为 cookie 时, 传 cookie 的 name
      /// - mode 为 header 时, 传 header 的 key
      /// 
    var key:String?
    /// 匹配 value.
      /// - mode 为 uri 时, 传要匹配的 uri
      /// - mode 为 ip 时, 传引用的 ip 黑白名单 Id
      /// - mode 为 cookie 时, 传 cookie 的 value
      /// - mode 为 geo 时, 传 geo 区域编码以 &#39;,&#39; 分隔的字符串. 查询 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-pro/api/describegeoareas&quot;&gt;describeGeoAreas&lt;/a&gt; 接口获取可设置的地域编码列表
      /// - mode 为 header 时, 传 header 的 value
      /// 
    /// Required:true
    var value:String
    /// 匹配规则. mode 为 uri, cookie 和 header 时必传. 支持以下匹配规则
      /// - 0: 完全匹配
      /// - 1: 前缀匹配
      /// - 2: 包含
      /// - 3: 正则匹配
      /// - 4: 后缀匹配
      /// 
    var pattern:Int?
    /// 命中后处理动作.
      /// - 0: 放行
      /// - 1: CC 防护
      /// 
    /// Required:true
    var action:Int
    /// 规则状态.
      /// - 0: 关闭
      /// - 1: 开启
      /// 
    /// Required:true
    var status:Int



    public  init(name:String,mode:Int,value:String,action:Int,status:Int){
             self.name = name
             self.mode = mode
             self.value = value
             self.action = action
             self.status = status
    }

    enum WebWhiteListRuleSpecCodingKeys: String, CodingKey {
        case name
        case mode
        case key
        case value
        case pattern
        case action
        case status
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: WebWhiteListRuleSpecCodingKeys.self)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        self.mode = try decoderContainer.decode(Int.self, forKey: .mode)
        if decoderContainer.contains(.key)
        {
            self.key = try decoderContainer.decode(String?.self, forKey: .key)
        }
        self.value = try decoderContainer.decode(String.self, forKey: .value)
        if decoderContainer.contains(.pattern)
        {
            self.pattern = try decoderContainer.decode(Int?.self, forKey: .pattern)
        }
        self.action = try decoderContainer.decode(Int.self, forKey: .action)
        self.status = try decoderContainer.decode(Int.self, forKey: .status)
    }
}
public extension WebWhiteListRuleSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: WebWhiteListRuleSpecCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(mode, forKey: .mode)
         try encoderContainer.encode(key, forKey: .key)
         try encoderContainer.encode(value, forKey: .value)
         try encoderContainer.encode(pattern, forKey: .pattern)
         try encoderContainer.encode(action, forKey: .action)
         try encoderContainer.encode(status, forKey: .status)
    }
}
