/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  certInfoModifySpec
@objc(CertInfoModifySpec)
public class CertInfoModifySpec:NSObject,Codable{
    /// 证书 Id
      /// - 如果传 certId, 请确认已经上传了相应的证书
      /// - certId 缺省时网站规则将使用 httpsCertContent, httpsRsaKey 对应的证书
      /// 
    var certId:Int64?
    /// 证书内容
    var httpsCertContent:String?
    /// 私钥
    var httpsRsaKey:String?



    public override init(){
            super.init()
    }

    enum CertInfoModifySpecCodingKeys: String, CodingKey {
        case certId
        case httpsCertContent
        case httpsRsaKey
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CertInfoModifySpecCodingKeys.self)
        if decoderContainer.contains(.certId)
        {
            self.certId = try decoderContainer.decode(Int64?.self, forKey: .certId)
        }
        if decoderContainer.contains(.httpsCertContent)
        {
            self.httpsCertContent = try decoderContainer.decode(String?.self, forKey: .httpsCertContent)
        }
        if decoderContainer.contains(.httpsRsaKey)
        {
            self.httpsRsaKey = try decoderContainer.decode(String?.self, forKey: .httpsRsaKey)
        }
    }
}
public extension CertInfoModifySpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CertInfoModifySpecCodingKeys.self)
         try encoderContainer.encode(certId, forKey: .certId)
         try encoderContainer.encode(httpsCertContent, forKey: .httpsCertContent)
         try encoderContainer.encode(httpsRsaKey, forKey: .httpsRsaKey)
    }
}
