/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   IP Sets
   IP 黑白名单库, 预定义的 IP 黑白名单绑定到转发规则的黑名单或白名单后生效

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon


///  查询网站类规则的 CC 防护规则列表
public class DescribeCCProtectionRulesOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum DescribeCCProtectionRulesOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCProtectionRulesOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}


///  开启网站类规则的黑名单
public class EnableWebRuleBlackListRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum EnableWebRuleBlackListRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWebRuleBlackListRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}


///  添加网站类规则的白名单规则
public class CreateWhiteListRuleOfWebRuleRequest:JdCloudRequest
{
    /// 添加网站类规则的白名单规则请求参数
    var webWhiteListRuleSpec:WebWhiteListRuleSpec

    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,webWhiteListRuleSpec:WebWhiteListRuleSpec,instanceId:String,webRuleId:String){
        self.webWhiteListRuleSpec = webWhiteListRuleSpec
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum CreateWhiteListRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case webWhiteListRuleSpec
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateWhiteListRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(webWhiteListRuleSpec, forKey: .webWhiteListRuleSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

/// 开启网站类规则 CC 观察者模式, 观察模式下，CC 防护只告警不防御。支持批量操作, 批量操作时 webRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 
public class EnableWebRuleCCObserverModeResult:NSObject,JdCloudResult
{
    /// 0: 开启 CC 观察者模式失败, 1: 开启 CC 观察者模式成功
    var code:Int?

    /// 开启 CC 观察者模式失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum EnableWebRuleCCObserverModeResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableWebRuleCCObserverModeResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension EnableWebRuleCCObserverModeResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWebRuleCCObserverModeResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class EnableWebRuleCCObserverModeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableWebRuleCCObserverModeResult?;

    enum EnableWebRuleCCObserverModeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableWebRuleCCObserverModeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableWebRuleCCObserverModeResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableWebRuleCCObserverModeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWebRuleCCObserverModeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询网站类防护规则的黑名单用量信息
public class DescribeWebRuleBlackListUsageRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum DescribeWebRuleBlackListUsageRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleBlackListUsageRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

public class DisableWebRuleCCObserverModeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableWebRuleCCObserverModeResult?;

    enum DisableWebRuleCCObserverModeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableWebRuleCCObserverModeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableWebRuleCCObserverModeResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableWebRuleCCObserverModeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWebRuleCCObserverModeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除网站规则。支持批量操作, 批量操作时 webRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 
public class DeleteWebRuleResult:NSObject,JdCloudResult
{
    /// 删除网站类规则结果, 0: 删除失败, 1: 删除成功
    var code:Int?

    /// 删除失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DeleteWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DeleteWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  关闭网站类规则的黑名单
public class DisableWebRuleBlackListRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum DisableWebRuleBlackListRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWebRuleBlackListRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

/// 修改网站类规则的 CC 防护配置 
public class ModifyCCProtectionConfigOfWebRuleResult:NSObject,JdCloudResult
{
    /// 0: 修改失败, 1: 修改成功
    var code:Int?

    /// 修改失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyCCProtectionConfigOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyCCProtectionConfigOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyCCProtectionConfigOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCCProtectionConfigOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class ModifyCCProtectionConfigOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyCCProtectionConfigOfWebRuleResult?;

    enum ModifyCCProtectionConfigOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyCCProtectionConfigOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyCCProtectionConfigOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyCCProtectionConfigOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCCProtectionConfigOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询网站类规则的白名单规则
public class DescribeWhiteListRuleOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的白名单规则 Id
    var webWhiteListRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String,webWhiteListRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.webWhiteListRuleId = webWhiteListRuleId
        super.init(regionId: regionId)
    }


    enum DescribeWhiteListRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
        case webWhiteListRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWhiteListRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(webWhiteListRuleId, forKey: .webWhiteListRuleId)

    }
}

/// 查询网站类规则 
public class DescribeWebRuleResult:NSObject,JdCloudResult
{
    /// Data
    var data:WebRule?



    public override init(){
        super.init()
    }

    enum DescribeWebRuleResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(WebRule?.self, forKey: .data)
        }
    }
}
public extension DescribeWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 关闭网站类规则 CC 防护, 网站类规则的 CC 防护规则和 CC 防护配置失效。支持批量操作, 批量操作时 webRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 
public class DisableWebRuleCCResult:NSObject,JdCloudResult
{
    /// 0: 禁用 CC 失败, 1: 禁用 CC 成功
    var code:Int?

    /// 禁用 CC 失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DisableWebRuleCCResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableWebRuleCCResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DisableWebRuleCCResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWebRuleCCResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  查询网站类规则的白名单规则列表
public class DescribeWhiteListRulesOfWebRuleRequest:JdCloudRequest
{
    /// 页码, 默认为1
    var pageNumber:Int?

    /// 分页大小, 默认为10, 取值范围[10, 100]
    var pageSize:Int?

    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum DescribeWhiteListRulesOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWhiteListRulesOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

public class EnableCCProtectionRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableCCProtectionRuleOfWebRuleResult?;

    enum EnableCCProtectionRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableCCProtectionRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableCCProtectionRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableCCProtectionRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableCCProtectionRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 关闭网站类规则的白名单 
public class DisableWebRuleWhiteListResult:NSObject,JdCloudResult
{
    /// 关闭结果, 0: 关闭失败, 1: 关闭成功
    var code:Int?

    /// 关闭失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DisableWebRuleWhiteListResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableWebRuleWhiteListResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DisableWebRuleWhiteListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWebRuleWhiteListResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  添加网站类规则的黑名单规则
public class CreateBlackListRuleOfWebRuleRequest:JdCloudRequest
{
    /// 添加网站类规则的黑名单规则请求参数
    var webBlackListRuleSpec:WebBlackListRuleSpec

    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,webBlackListRuleSpec:WebBlackListRuleSpec,instanceId:String,webRuleId:String){
        self.webBlackListRuleSpec = webBlackListRuleSpec
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum CreateBlackListRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case webBlackListRuleSpec
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBlackListRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(webBlackListRuleSpec, forKey: .webBlackListRuleSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

/// 查询网站类规则的黑名单规则 
public class DescribeBlackListRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// Data
    var data:WebBlackListRule?



    public override init(){
        super.init()
    }

    enum DescribeBlackListRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBlackListRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(WebBlackListRule?.self, forKey: .data)
        }
    }
}
public extension DescribeBlackListRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBlackListRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  关闭网站类规则的黑名单规则, 批量操作时 webBlackListRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败
public class DisableBlackListRuleOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的黑名单规则 Id
    var webBlackListRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String,webBlackListRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.webBlackListRuleId = webBlackListRuleId
        super.init(regionId: regionId)
    }


    enum DisableBlackListRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
        case webBlackListRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableBlackListRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(webBlackListRuleId, forKey: .webBlackListRuleId)

    }
}


///  添加网站类规则的 CC 防护规则
public class CreateCCProtectionRuleOfWebRuleRequest:JdCloudRequest
{
    /// 添加 CC 防护规则请求参数
    var ccProtectionRuleSpec:CCProtectionRuleSpec

    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,ccProtectionRuleSpec:CCProtectionRuleSpec,instanceId:String,webRuleId:String){
        self.ccProtectionRuleSpec = ccProtectionRuleSpec
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum CreateCCProtectionRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case ccProtectionRuleSpec
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateCCProtectionRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(ccProtectionRuleSpec, forKey: .ccProtectionRuleSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}


///  开启网站类规则 CC 观察者模式, 观察模式下，CC 防护只告警不防御。支持批量操作, 批量操作时 webRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败
public class EnableWebRuleCCObserverModeRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum EnableWebRuleCCObserverModeRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWebRuleCCObserverModeRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

/// 查询网站类规则的白名单规则 
public class DescribeWhiteListRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// Data
    var data:WebWhiteListRule?



    public override init(){
        super.init()
    }

    enum DescribeWhiteListRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWhiteListRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(WebWhiteListRule?.self, forKey: .data)
        }
    }
}
public extension DescribeWhiteListRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWhiteListRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 修改网站类规则的黑名单规则 
public class ModifyBlackListRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 修改结果, 0: 修改失败, 1: 修改成功
    var code:Int?

    /// 修改失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyBlackListRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyBlackListRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyBlackListRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBlackListRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 删除网站类规则的黑名单规则, 批量操作时 webBlackListRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 
public class DeleteBlackListRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 删除结果, 0: 删除失败, 1: 删除成功
    var code:Int?

    /// 删除失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DeleteBlackListRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteBlackListRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DeleteBlackListRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBlackListRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  查询网站类规则
public class DescribeWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum DescribeWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}


///  删除网站类规则的白名单规则, 批量操作时 webWhiteListRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败
public class DeleteWhiteListRuleOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的白名单规则 Id
    var webWhiteListRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String,webWhiteListRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.webWhiteListRuleId = webWhiteListRuleId
        super.init(regionId: regionId)
    }


    enum DeleteWhiteListRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
        case webWhiteListRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteWhiteListRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(webWhiteListRuleId, forKey: .webWhiteListRuleId)

    }
}


///  开启网站类规则的白名单规则, 批量操作时 webWhiteListRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败
public class EnableWhiteListRuleOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的白名单规则 Id
    var webWhiteListRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String,webWhiteListRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.webWhiteListRuleId = webWhiteListRuleId
        super.init(regionId: regionId)
    }


    enum EnableWhiteListRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
        case webWhiteListRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWhiteListRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(webWhiteListRuleId, forKey: .webWhiteListRuleId)

    }
}

public class EnableWhiteListRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableWhiteListRuleOfWebRuleResult?;

    enum EnableWhiteListRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableWhiteListRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableWhiteListRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableWhiteListRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWhiteListRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  关闭网站类规则的 CC 防护规则
public class DisableCCProtectionRuleOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的 CC 防护规则 Id
    var ccProtectionRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String,ccProtectionRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.ccProtectionRuleId = ccProtectionRuleId
        super.init(regionId: regionId)
    }


    enum DisableCCProtectionRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
        case ccProtectionRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableCCProtectionRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(ccProtectionRuleId, forKey: .ccProtectionRuleId)

    }
}

public class DescribeWebRulesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeWebRulesResult?;

    enum DescribeWebRulesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWebRulesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeWebRulesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeWebRulesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRulesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改网站类规则的 CC 防护规则
public class ModifyCCProtectionRuleOfWebRuleRequest:JdCloudRequest
{
    /// 修改 CC 防护规则请求参数
    var ccProtectionRuleSpec:CCProtectionRuleSpec

    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的 CC 防护规则 Id
    var ccProtectionRuleId:String


    public init(regionId: String,ccProtectionRuleSpec:CCProtectionRuleSpec,instanceId:String,webRuleId:String,ccProtectionRuleId:String){
        self.ccProtectionRuleSpec = ccProtectionRuleSpec
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.ccProtectionRuleId = ccProtectionRuleId
        super.init(regionId: regionId)
    }


    enum ModifyCCProtectionRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case ccProtectionRuleSpec
        case instanceId
        case webRuleId
        case ccProtectionRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCCProtectionRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(ccProtectionRuleSpec, forKey: .ccProtectionRuleSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(ccProtectionRuleId, forKey: .ccProtectionRuleId)

    }
}

/// 添加网站类规则的黑名单规则 
public class CreateBlackListRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 0: 添加失败, 1: 添加成功
    var code:Int?

    /// 添加失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum CreateBlackListRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBlackListRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension CreateBlackListRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBlackListRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 查询网站类转发规则 Geo 模式的黑名单可设置区域编码 
public class DescribeWebRuleBlackListGeoAreasResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[Country?]?



    public override init(){
        super.init()
    }

    enum DescribeWebRuleBlackListGeoAreasResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWebRuleBlackListGeoAreasResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([Country?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeWebRuleBlackListGeoAreasResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleBlackListGeoAreasResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}

///  查询网站类规则的 CC 防护默认配置
public class DescribeCCProtectionDefaultConfigOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum DescribeCCProtectionDefaultConfigOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCProtectionDefaultConfigOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

/// 网站类规则切换成回源状态 
public class SwitchWebRuleOriginResult:NSObject,JdCloudResult
{
    /// 0: 规则切换成回源失败, 1: 规则切换成回源成功
    var code:Int?

    /// 规则切换成回源失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum SwitchWebRuleOriginResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SwitchWebRuleOriginResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension SwitchWebRuleOriginResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SwitchWebRuleOriginResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 删除网站规则的 CC 防护规则 
public class DeleteCCProtectionRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 0: 删除失败, 1: 删除成功
    var code:Int?

    /// 删除失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DeleteCCProtectionRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteCCProtectionRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DeleteCCProtectionRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCCProtectionRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 开启网站类规则的白名单 
public class EnableWebRuleWhiteListResult:NSObject,JdCloudResult
{
    /// 开启结果, 0: 开启失败, 1: 开启成功
    var code:Int?

    /// 开启失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum EnableWebRuleWhiteListResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableWebRuleWhiteListResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension EnableWebRuleWhiteListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWebRuleWhiteListResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  编辑网站规则证书信息
public class ModifyCertInfoRequest:JdCloudRequest
{
    /// 编辑网站规则证书信息请求参数
    var certInfoModifySpec:CertInfoModifySpec

    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,certInfoModifySpec:CertInfoModifySpec,instanceId:String,webRuleId:String){
        self.certInfoModifySpec = certInfoModifySpec
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum ModifyCertInfoRequestRequestCodingKeys: String, CodingKey {
        case certInfoModifySpec
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCertInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(certInfoModifySpec, forKey: .certInfoModifySpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

public class DeleteBlackListRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteBlackListRuleOfWebRuleResult?;

    enum DeleteBlackListRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteBlackListRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteBlackListRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteBlackListRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBlackListRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加网站类规则的 CC 防护规则 
public class CreateCCProtectionRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 0: 添加失败, 1: 添加成功
    var code:Int?

    /// 添加失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum CreateCCProtectionRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateCCProtectionRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension CreateCCProtectionRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateCCProtectionRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  查询网站类规则的 CC 防护规则
public class DescribeCCProtectionRuleOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的 CC 防护规则 Id
    var ccProtectionRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String,ccProtectionRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.ccProtectionRuleId = ccProtectionRuleId
        super.init(regionId: regionId)
    }


    enum DescribeCCProtectionRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
        case ccProtectionRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCProtectionRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(ccProtectionRuleId, forKey: .ccProtectionRuleId)

    }
}

/// 关闭网站类规则的黑名单规则, 批量操作时 webBlackListRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 
public class DisableBlackListRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 关闭结果, 0: 关闭失败, 1: 关闭成功
    var code:Int?

    /// 关闭失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DisableBlackListRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableBlackListRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DisableBlackListRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableBlackListRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  查询网站类防护规则的白名单用量信息
public class DescribeWebRuleWhiteListUsageRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum DescribeWebRuleWhiteListUsageRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleWhiteListUsageRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

public class DeleteCCProtectionRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteCCProtectionRuleOfWebRuleResult?;

    enum DeleteCCProtectionRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteCCProtectionRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteCCProtectionRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteCCProtectionRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCCProtectionRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyCertInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyCertInfoResult?;

    enum ModifyCertInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyCertInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyCertInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyCertInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCertInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeWebRuleWhiteListGeoAreasResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeWebRuleWhiteListGeoAreasResult?;

    enum DescribeWebRuleWhiteListGeoAreasResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWebRuleWhiteListGeoAreasResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeWebRuleWhiteListGeoAreasResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeWebRuleWhiteListGeoAreasResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleWhiteListGeoAreasResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 开启网站类规则的白名单规则, 批量操作时 webWhiteListRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 
public class EnableWhiteListRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 开启结果, 0: 开启失败, 1: 开启成功
    var code:Int?

    /// 开启失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum EnableWhiteListRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableWhiteListRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension EnableWhiteListRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWhiteListRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 查询网站类规则的 CC 防护规则列表 
public class DescribeCCProtectionRulesOfWebRuleResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[CCProtectionRule?]?

    /// 当前页数量
    var currentCount:Int64?

    /// 总数
    var totalCount:Int64?

    /// 总页数
    var totalPage:Int64?



    public override init(){
        super.init()
    }

    enum DescribeCCProtectionRulesOfWebRuleResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCProtectionRulesOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([CCProtectionRule?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int64?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int64?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int64?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeCCProtectionRulesOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCProtectionRulesOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
public class EnableWebRuleWhiteListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableWebRuleWhiteListResult?;

    enum EnableWebRuleWhiteListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableWebRuleWhiteListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableWebRuleWhiteListResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableWebRuleWhiteListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWebRuleWhiteListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DisableWebRuleBlackListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableWebRuleBlackListResult?;

    enum DisableWebRuleBlackListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableWebRuleBlackListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableWebRuleBlackListResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableWebRuleBlackListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWebRuleBlackListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeWhiteListRulesOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeWhiteListRulesOfWebRuleResult?;

    enum DescribeWhiteListRulesOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWhiteListRulesOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeWhiteListRulesOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeWhiteListRulesOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWhiteListRulesOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DisableCCProtectionRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableCCProtectionRuleOfWebRuleResult?;

    enum DisableCCProtectionRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableCCProtectionRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableCCProtectionRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableCCProtectionRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableCCProtectionRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteWhiteListRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteWhiteListRuleOfWebRuleResult?;

    enum DeleteWhiteListRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteWhiteListRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteWhiteListRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteWhiteListRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteWhiteListRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  开启网站类规则的白名单
public class EnableWebRuleWhiteListRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum EnableWebRuleWhiteListRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWebRuleWhiteListRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

public class CreateWhiteListRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateWhiteListRuleOfWebRuleResult?;

    enum CreateWhiteListRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateWhiteListRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateWhiteListRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateWhiteListRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateWhiteListRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyWebRuleResult?;

    enum ModifyWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DisableWebRuleCCResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableWebRuleCCResult?;

    enum DisableWebRuleCCResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableWebRuleCCResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableWebRuleCCResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableWebRuleCCResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWebRuleCCResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询某个实例下的网站类规则 
public class DescribeWebRulesResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[WebRule?]?

    /// 当前页数量
    var currentCount:Int?

    /// 总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeWebRulesResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWebRulesResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([WebRule?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeWebRulesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRulesResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}

///  网站类规则切换成防御状态
public class SwitchWebRuleProtectRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum SwitchWebRuleProtectRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SwitchWebRuleProtectRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

public class DescribeWebRuleBlackListGeoAreasResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeWebRuleBlackListGeoAreasResult?;

    enum DescribeWebRuleBlackListGeoAreasResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWebRuleBlackListGeoAreasResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeWebRuleBlackListGeoAreasResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeWebRuleBlackListGeoAreasResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleBlackListGeoAreasResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 网站类规则开启 CC 防护, 开启后网站类规则已配置的防护规则和 CC 防护配置生效, 若没有配置过 CC 防护, 默认的 CC 防护配置生效。支持批量操作, 批量操作时 webRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 
public class EnableWebRuleCCResult:NSObject,JdCloudResult
{
    /// 0: 开启 CC 失败, 1: 开启 CC 成功
    var code:Int?

    /// 开启 CC 失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum EnableWebRuleCCResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableWebRuleCCResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension EnableWebRuleCCResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWebRuleCCResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 添加网站类规则的白名单规则 
public class CreateWhiteListRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 0: 添加失败, 1: 添加成功
    var code:Int?

    /// 添加失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum CreateWhiteListRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateWhiteListRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension CreateWhiteListRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateWhiteListRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  修改网站类规则的黑名单规则
public class ModifyBlackListRuleOfWebRuleRequest:JdCloudRequest
{
    /// 修改网站类规则的黑名单规则请求参数
    var webBlackListRuleSpec:WebBlackListRuleSpec

    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的黑名单规则 Id
    var webBlackListRuleId:String


    public init(regionId: String,webBlackListRuleSpec:WebBlackListRuleSpec,instanceId:String,webRuleId:String,webBlackListRuleId:String){
        self.webBlackListRuleSpec = webBlackListRuleSpec
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.webBlackListRuleId = webBlackListRuleId
        super.init(regionId: regionId)
    }


    enum ModifyBlackListRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case webBlackListRuleSpec
        case instanceId
        case webRuleId
        case webBlackListRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBlackListRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(webBlackListRuleSpec, forKey: .webBlackListRuleSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(webBlackListRuleId, forKey: .webBlackListRuleId)

    }
}

/// 添加网站类规则 
public class CreateWebRuleResult:NSObject,JdCloudResult
{
    /// 0: 添加失败, 1: 添加成功
    var code:Int?

    /// 添加失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum CreateWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension CreateWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class ModifyBlackListRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyBlackListRuleOfWebRuleResult?;

    enum ModifyBlackListRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyBlackListRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyBlackListRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyBlackListRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBlackListRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DisableWhiteListRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableWhiteListRuleOfWebRuleResult?;

    enum DisableWhiteListRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableWhiteListRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableWhiteListRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableWhiteListRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWhiteListRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改网站类规则的白名单规则
public class ModifyWhiteListRuleOfWebRuleRequest:JdCloudRequest
{
    /// 修改网站类规则的白名单规则请求参数
    var webWhiteListRuleSpec:WebWhiteListRuleSpec

    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的白名单规则 Id
    var webWhiteListRuleId:String


    public init(regionId: String,webWhiteListRuleSpec:WebWhiteListRuleSpec,instanceId:String,webRuleId:String,webWhiteListRuleId:String){
        self.webWhiteListRuleSpec = webWhiteListRuleSpec
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.webWhiteListRuleId = webWhiteListRuleId
        super.init(regionId: regionId)
    }


    enum ModifyWhiteListRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case webWhiteListRuleSpec
        case instanceId
        case webRuleId
        case webWhiteListRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyWhiteListRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(webWhiteListRuleSpec, forKey: .webWhiteListRuleSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(webWhiteListRuleId, forKey: .webWhiteListRuleId)

    }
}

/// 查询网站类防护规则的白名单用量信息 
public class DescribeWebRuleWhiteListUsageResult:NSObject,JdCloudResult
{
    /// 已配置的白名单规则数量
    var allocatedNum:Int?

    /// 开启的白名单规则数量
    var activeNum:Int?

    /// 还可添加的白名单规则数量
    var surplusAllocateNum:Int?

    /// 最多可添加的白名单规则数量
    var maxAllocateNum:Int?



    public override init(){
        super.init()
    }

    enum DescribeWebRuleWhiteListUsageResultCodingKeys: String, CodingKey {
        case allocatedNum
        case activeNum
        case surplusAllocateNum
        case maxAllocateNum
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWebRuleWhiteListUsageResultCodingKeys.self)
        if decoderContainer.contains(.allocatedNum)
        {
            self.allocatedNum = try decoderContainer.decode(Int?.self, forKey: .allocatedNum)
        }
        if decoderContainer.contains(.activeNum)
        {
            self.activeNum = try decoderContainer.decode(Int?.self, forKey: .activeNum)
        }
        if decoderContainer.contains(.surplusAllocateNum)
        {
            self.surplusAllocateNum = try decoderContainer.decode(Int?.self, forKey: .surplusAllocateNum)
        }
        if decoderContainer.contains(.maxAllocateNum)
        {
            self.maxAllocateNum = try decoderContainer.decode(Int?.self, forKey: .maxAllocateNum)
        }
    }
}
public extension DescribeWebRuleWhiteListUsageResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleWhiteListUsageResultCodingKeys.self)
        try encoderContainer.encode(allocatedNum, forKey: .allocatedNum)
        try encoderContainer.encode(activeNum, forKey: .activeNum)
        try encoderContainer.encode(surplusAllocateNum, forKey: .surplusAllocateNum)
        try encoderContainer.encode(maxAllocateNum, forKey: .maxAllocateNum)
    }
}
/// 关闭网站类规则的黑名单 
public class DisableWebRuleBlackListResult:NSObject,JdCloudResult
{
    /// 关闭结果, 0: 关闭失败, 1: 关闭成功
    var code:Int?

    /// 关闭失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DisableWebRuleBlackListResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableWebRuleBlackListResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DisableWebRuleBlackListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWebRuleBlackListResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  修改网站类规则
public class ModifyWebRuleRequest:JdCloudRequest
{
    /// 更新网站类规则请求参数
    var webRuleSpec:WebRuleSpec

    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,webRuleSpec:WebRuleSpec,instanceId:String,webRuleId:String){
        self.webRuleSpec = webRuleSpec
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum ModifyWebRuleRequestRequestCodingKeys: String, CodingKey {
        case webRuleSpec
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(webRuleSpec, forKey: .webRuleSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}


///  开启网站类规则的 CC 防护规则
public class EnableCCProtectionRuleOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的 CC 防护规则 Id
    var ccProtectionRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String,ccProtectionRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.ccProtectionRuleId = ccProtectionRuleId
        super.init(regionId: regionId)
    }


    enum EnableCCProtectionRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
        case ccProtectionRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableCCProtectionRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(ccProtectionRuleId, forKey: .ccProtectionRuleId)

    }
}

/// 查询网站类规则的 CC 防护配置 
public class DescribeCCProtectionConfigOfWebRuleResult:NSObject,JdCloudResult
{
    /// Data
    var data:CCProtectionConfig?



    public override init(){
        super.init()
    }

    enum DescribeCCProtectionConfigOfWebRuleResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCProtectionConfigOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(CCProtectionConfig?.self, forKey: .data)
        }
    }
}
public extension DescribeCCProtectionConfigOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCProtectionConfigOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class DeleteWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteWebRuleResult?;

    enum DeleteWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加网站类规则
public class CreateWebRuleRequest:JdCloudRequest
{
    /// 添加网站类规则请求参数
    var webRuleSpec:WebRuleSpec

    /// 高防实例 Id
    var instanceId:String


    public init(regionId: String,webRuleSpec:WebRuleSpec,instanceId:String){
        self.webRuleSpec = webRuleSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum CreateWebRuleRequestRequestCodingKeys: String, CodingKey {
        case webRuleSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(webRuleSpec, forKey: .webRuleSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  网站类规则开启 CC 防护, 开启后网站类规则已配置的防护规则和 CC 防护配置生效, 若没有配置过 CC 防护, 默认的 CC 防护配置生效。支持批量操作, 批量操作时 webRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败
public class EnableWebRuleCCRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum EnableWebRuleCCRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWebRuleCCRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}


///  查询网站类转发规则 Geo 模式的黑名单可设置区域编码
public class DescribeWebRuleBlackListGeoAreasRequest:JdCloudRequest
{
}


///  删除网站规则。支持批量操作, 批量操作时 webRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败
public class DeleteWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum DeleteWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}


///  删除网站规则的 CC 防护规则
public class DeleteCCProtectionRuleOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的 CC 防护规则 Id
    var ccProtectionRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String,ccProtectionRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.ccProtectionRuleId = ccProtectionRuleId
        super.init(regionId: regionId)
    }


    enum DeleteCCProtectionRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
        case ccProtectionRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteCCProtectionRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(ccProtectionRuleId, forKey: .ccProtectionRuleId)

    }
}

/// 开启网站类规则的 CC 防护规则 
public class EnableCCProtectionRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 0: 开启失败, 1: 开启成功
    var code:Int?

    /// 开启失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum EnableCCProtectionRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableCCProtectionRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension EnableCCProtectionRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableCCProtectionRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  查询网站类转发规则 Geo 模式的白名单可设置区域编码
public class DescribeWebRuleWhiteListGeoAreasRequest:JdCloudRequest
{
}


///  网站类规则切换成回源状态
public class SwitchWebRuleOriginRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum SwitchWebRuleOriginRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SwitchWebRuleOriginRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

/// 关闭网站类规则的白名单规则, 批量操作时 webWhiteListRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 
public class DisableWhiteListRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 关闭结果, 0: 关闭失败, 1: 关闭成功
    var code:Int?

    /// 关闭失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DisableWhiteListRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableWhiteListRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DisableWhiteListRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWhiteListRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  关闭网站类规则 CC 防护, 网站类规则的 CC 防护规则和 CC 防护配置失效。支持批量操作, 批量操作时 webRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败
public class DisableWebRuleCCRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum DisableWebRuleCCRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWebRuleCCRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

/// 删除网站类规则的白名单规则, 批量操作时 webWhiteListRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 
public class DeleteWhiteListRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 删除结果, 0: 删除失败, 1: 删除成功
    var code:Int?

    /// 删除失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DeleteWhiteListRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteWhiteListRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DeleteWhiteListRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteWhiteListRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class CreateBlackListRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateBlackListRuleOfWebRuleResult?;

    enum CreateBlackListRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBlackListRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateBlackListRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateBlackListRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBlackListRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询某个实例下的网站类规则
public class DescribeWebRulesRequest:JdCloudRequest
{
    /// 页码, 默认为1
    var pageNumber:Int?

    /// 分页大小, 默认为10, 取值范围[10, 100]
    var pageSize:Int?

    /// 查询类型名称, domain:源站域名, ip:源站 IP, rawDomain: 域名
    var searchType:String?

    /// 查询类型值
    var searchValue:String?

    /// 高防实例 Id
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeWebRulesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case searchType
        case searchValue
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRulesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(searchType, forKey: .searchType)
        try encoderContainer.encode(searchValue, forKey: .searchValue)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeCCProtectionConfigOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCCProtectionConfigOfWebRuleResult?;

    enum DescribeCCProtectionConfigOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCProtectionConfigOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCCProtectionConfigOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCCProtectionConfigOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCProtectionConfigOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询网站类转发规则 Geo 模式的白名单可设置区域编码 
public class DescribeWebRuleWhiteListGeoAreasResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[Country?]?



    public override init(){
        super.init()
    }

    enum DescribeWebRuleWhiteListGeoAreasResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWebRuleWhiteListGeoAreasResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([Country?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeWebRuleWhiteListGeoAreasResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleWhiteListGeoAreasResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class DescribeBlackListRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBlackListRuleOfWebRuleResult?;

    enum DescribeBlackListRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBlackListRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBlackListRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBlackListRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBlackListRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeWebRuleWhiteListUsageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeWebRuleWhiteListUsageResult?;

    enum DescribeWebRuleWhiteListUsageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWebRuleWhiteListUsageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeWebRuleWhiteListUsageResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeWebRuleWhiteListUsageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleWhiteListUsageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  关闭网站类规则的白名单
public class DisableWebRuleWhiteListRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum DisableWebRuleWhiteListRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWebRuleWhiteListRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}


///  修改网站类规则的 CC 防护配置
public class ModifyCCProtectionConfigOfWebRuleRequest:JdCloudRequest
{
    /// 修改 CC 防护配置请求参数
    var ccProtectionConfigSpec:CCProtectionConfigSpec

    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,ccProtectionConfigSpec:CCProtectionConfigSpec,instanceId:String,webRuleId:String){
        self.ccProtectionConfigSpec = ccProtectionConfigSpec
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum ModifyCCProtectionConfigOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case ccProtectionConfigSpec
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCCProtectionConfigOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(ccProtectionConfigSpec, forKey: .ccProtectionConfigSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

/// 修改网站类规则的白名单规则 
public class ModifyWhiteListRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 修改结果, 0: 修改失败, 1: 修改成功
    var code:Int?

    /// 修改失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyWhiteListRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyWhiteListRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyWhiteListRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyWhiteListRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  查询网站类规则的 CC 防护配置
public class DescribeCCProtectionConfigOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum DescribeCCProtectionConfigOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCProtectionConfigOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

/// 编辑网站规则证书信息 
public class ModifyCertInfoResult:NSObject,JdCloudResult
{
    /// 上传 SSL 证书结果, 0: 删除证书失败, 1: 删除证书成功
    var code:Int?

    /// 上传成功时为证书 Id, 失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyCertInfoResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyCertInfoResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyCertInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCertInfoResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 关闭网站类规则 CC 观察者模式, 观察模式下, CC 防护只告警不防御。支持批量操作, 批量操作时 webRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 
public class DisableWebRuleCCObserverModeResult:NSObject,JdCloudResult
{
    /// 0: 关闭 CC 观察者模式失败, 1: 关闭 CC 观察者模式成功
    var code:Int?

    /// 关闭 CC 观察者模式失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DisableWebRuleCCObserverModeResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableWebRuleCCObserverModeResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DisableWebRuleCCObserverModeResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWebRuleCCObserverModeResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class CreateWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateWebRuleResult?;

    enum CreateWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeCCProtectionRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCCProtectionRuleOfWebRuleResult?;

    enum DescribeCCProtectionRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCProtectionRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCCProtectionRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCCProtectionRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCProtectionRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除网站类规则的黑名单规则, 批量操作时 webBlackListRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败
public class DeleteBlackListRuleOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的黑名单规则 Id
    var webBlackListRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String,webBlackListRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.webBlackListRuleId = webBlackListRuleId
        super.init(regionId: regionId)
    }


    enum DeleteBlackListRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
        case webBlackListRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBlackListRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(webBlackListRuleId, forKey: .webBlackListRuleId)

    }
}

/// 网站类规则切换成防御状态 
public class SwitchWebRuleProtectResult:NSObject,JdCloudResult
{
    /// 0: 规则切换成防御失败, 1: 规则切换成防御成功
    var code:Int?

    /// 规则切换成防御失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum SwitchWebRuleProtectResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SwitchWebRuleProtectResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension SwitchWebRuleProtectResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SwitchWebRuleProtectResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 修改网站类规则的 CC 防护规则 
public class ModifyCCProtectionRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 0: 修改失败, 1: 修改成功
    var code:Int?

    /// 修改失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyCCProtectionRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyCCProtectionRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyCCProtectionRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCCProtectionRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  查询网站类规则的黑名单规则列表
public class DescribeBlackListRulesOfWebRuleRequest:JdCloudRequest
{
    /// 页码, 默认为1
    var pageNumber:Int?

    /// 分页大小, 默认为10, 取值范围[10, 100]
    var pageSize:Int?

    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum DescribeBlackListRulesOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBlackListRulesOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}

public class DescribeCCProtectionDefaultConfigOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCCProtectionDefaultConfigOfWebRuleResult?;

    enum DescribeCCProtectionDefaultConfigOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCProtectionDefaultConfigOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCCProtectionDefaultConfigOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCCProtectionDefaultConfigOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCProtectionDefaultConfigOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 开启网站类规则的黑名单 
public class EnableWebRuleBlackListResult:NSObject,JdCloudResult
{
    /// 开启结果, 0: 开启失败, 1: 开启成功
    var code:Int?

    /// 开启失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum EnableWebRuleBlackListResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableWebRuleBlackListResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension EnableWebRuleBlackListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWebRuleBlackListResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 查询网站类规则的白名单规则列表 
public class DescribeWhiteListRulesOfWebRuleResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[WebWhiteListRule?]?

    /// 当前页数量
    var currentCount:Int?

    /// 总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeWhiteListRulesOfWebRuleResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWhiteListRulesOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([WebWhiteListRule?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeWhiteListRulesOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWhiteListRulesOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
public class DescribeWhiteListRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeWhiteListRuleOfWebRuleResult?;

    enum DescribeWhiteListRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWhiteListRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeWhiteListRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeWhiteListRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWhiteListRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 关闭网站类规则的 CC 防护规则 
public class DisableCCProtectionRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 0: 关闭失败, 1: 关闭成功
    var code:Int?

    /// 关闭失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DisableCCProtectionRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableCCProtectionRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DisableCCProtectionRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableCCProtectionRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class ModifyWhiteListRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyWhiteListRuleOfWebRuleResult?;

    enum ModifyWhiteListRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyWhiteListRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyWhiteListRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyWhiteListRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyWhiteListRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DisableBlackListRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableBlackListRuleOfWebRuleResult?;

    enum DisableBlackListRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableBlackListRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableBlackListRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableBlackListRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableBlackListRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询网站类规则的 CC 防护默认配置 
public class DescribeCCProtectionDefaultConfigOfWebRuleResult:NSObject,JdCloudResult
{
    /// Data
    var data:CCProtectionDefaultConfig?



    public override init(){
        super.init()
    }

    enum DescribeCCProtectionDefaultConfigOfWebRuleResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCProtectionDefaultConfigOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(CCProtectionDefaultConfig?.self, forKey: .data)
        }
    }
}
public extension DescribeCCProtectionDefaultConfigOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCProtectionDefaultConfigOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 查询网站类规则的黑名单规则列表 
public class DescribeBlackListRulesOfWebRuleResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[WebBlackListRule?]?

    /// 当前页数量
    var currentCount:Int?

    /// 总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeBlackListRulesOfWebRuleResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBlackListRulesOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([WebBlackListRule?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeBlackListRulesOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBlackListRulesOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
public class SwitchWebRuleOriginResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SwitchWebRuleOriginResult?;

    enum SwitchWebRuleOriginResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SwitchWebRuleOriginResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SwitchWebRuleOriginResult?.self, forKey: .result) ?? nil
    }
}

public extension SwitchWebRuleOriginResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SwitchWebRuleOriginResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 开启网站类规则的黑名单规则, 批量操作时 webBlackListRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 
public class EnableBlackListRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// 开启结果, 0: 开启失败, 1: 开启成功
    var code:Int?

    /// 开启失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum EnableBlackListRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableBlackListRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension EnableBlackListRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableBlackListRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class EnableWebRuleCCResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableWebRuleCCResult?;

    enum EnableWebRuleCCResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableWebRuleCCResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableWebRuleCCResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableWebRuleCCResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWebRuleCCResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DisableWebRuleWhiteListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableWebRuleWhiteListResult?;

    enum DisableWebRuleWhiteListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableWebRuleWhiteListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableWebRuleWhiteListResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableWebRuleWhiteListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWebRuleWhiteListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeWebRuleBlackListUsageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeWebRuleBlackListUsageResult?;

    enum DescribeWebRuleBlackListUsageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWebRuleBlackListUsageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeWebRuleBlackListUsageResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeWebRuleBlackListUsageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleBlackListUsageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改网站类规则 
public class ModifyWebRuleResult:NSObject,JdCloudResult
{
    /// 修改网站类规则结果, 0: 修改失败, 1: 修改成功
    var code:Int?

    /// 修改失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyWebRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyWebRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class DescribeBlackListRulesOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBlackListRulesOfWebRuleResult?;

    enum DescribeBlackListRulesOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBlackListRulesOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBlackListRulesOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBlackListRulesOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBlackListRulesOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class EnableWebRuleBlackListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableWebRuleBlackListResult?;

    enum EnableWebRuleBlackListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableWebRuleBlackListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableWebRuleBlackListResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableWebRuleBlackListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWebRuleBlackListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  开启网站类规则的黑名单规则, 批量操作时 webBlackListRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败
public class EnableBlackListRuleOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的黑名单规则 Id
    var webBlackListRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String,webBlackListRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.webBlackListRuleId = webBlackListRuleId
        super.init(regionId: regionId)
    }


    enum EnableBlackListRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
        case webBlackListRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableBlackListRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(webBlackListRuleId, forKey: .webBlackListRuleId)

    }
}

public class DescribeWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeWebRuleResult?;

    enum DescribeWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class EnableBlackListRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableBlackListRuleOfWebRuleResult?;

    enum EnableBlackListRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableBlackListRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableBlackListRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableBlackListRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableBlackListRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateCCProtectionRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateCCProtectionRuleOfWebRuleResult?;

    enum CreateCCProtectionRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateCCProtectionRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateCCProtectionRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateCCProtectionRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateCCProtectionRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询网站类规则的黑名单规则
public class DescribeBlackListRuleOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的黑名单规则 Id
    var webBlackListRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String,webBlackListRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.webBlackListRuleId = webBlackListRuleId
        super.init(regionId: regionId)
    }


    enum DescribeBlackListRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
        case webBlackListRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBlackListRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(webBlackListRuleId, forKey: .webBlackListRuleId)

    }
}

public class SwitchWebRuleProtectResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SwitchWebRuleProtectResult?;

    enum SwitchWebRuleProtectResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SwitchWebRuleProtectResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SwitchWebRuleProtectResult?.self, forKey: .result) ?? nil
    }
}

public extension SwitchWebRuleProtectResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SwitchWebRuleProtectResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeCCProtectionRulesOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCCProtectionRulesOfWebRuleResult?;

    enum DescribeCCProtectionRulesOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCProtectionRulesOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCCProtectionRulesOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCCProtectionRulesOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCProtectionRulesOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询网站类规则的 CC 防护规则 
public class DescribeCCProtectionRuleOfWebRuleResult:NSObject,JdCloudResult
{
    /// Data
    var data:CCProtectionRule?



    public override init(){
        super.init()
    }

    enum DescribeCCProtectionRuleOfWebRuleResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCProtectionRuleOfWebRuleResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(CCProtectionRule?.self, forKey: .data)
        }
    }
}
public extension DescribeCCProtectionRuleOfWebRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCProtectionRuleOfWebRuleResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class ModifyCCProtectionRuleOfWebRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyCCProtectionRuleOfWebRuleResult?;

    enum ModifyCCProtectionRuleOfWebRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyCCProtectionRuleOfWebRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyCCProtectionRuleOfWebRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyCCProtectionRuleOfWebRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyCCProtectionRuleOfWebRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询网站类防护规则的黑名单用量信息 
public class DescribeWebRuleBlackListUsageResult:NSObject,JdCloudResult
{
    /// 已配置的黑名单规则数量
    var allocatedNum:Int?

    /// 开启的黑名单规则数量
    var activeNum:Int?

    /// 还可添加的黑名单规则数量
    var surplusAllocateNum:Int?

    /// 最多可添加的黑名单规则数量
    var maxAllocateNum:Int?



    public override init(){
        super.init()
    }

    enum DescribeWebRuleBlackListUsageResultCodingKeys: String, CodingKey {
        case allocatedNum
        case activeNum
        case surplusAllocateNum
        case maxAllocateNum
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWebRuleBlackListUsageResultCodingKeys.self)
        if decoderContainer.contains(.allocatedNum)
        {
            self.allocatedNum = try decoderContainer.decode(Int?.self, forKey: .allocatedNum)
        }
        if decoderContainer.contains(.activeNum)
        {
            self.activeNum = try decoderContainer.decode(Int?.self, forKey: .activeNum)
        }
        if decoderContainer.contains(.surplusAllocateNum)
        {
            self.surplusAllocateNum = try decoderContainer.decode(Int?.self, forKey: .surplusAllocateNum)
        }
        if decoderContainer.contains(.maxAllocateNum)
        {
            self.maxAllocateNum = try decoderContainer.decode(Int?.self, forKey: .maxAllocateNum)
        }
    }
}
public extension DescribeWebRuleBlackListUsageResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleBlackListUsageResultCodingKeys.self)
        try encoderContainer.encode(allocatedNum, forKey: .allocatedNum)
        try encoderContainer.encode(activeNum, forKey: .activeNum)
        try encoderContainer.encode(surplusAllocateNum, forKey: .surplusAllocateNum)
        try encoderContainer.encode(maxAllocateNum, forKey: .maxAllocateNum)
    }
}

///  关闭网站类规则的白名单规则, 批量操作时 webWhiteListRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败
public class DisableWhiteListRuleOfWebRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String

    /// 网站类规则的白名单规则 Id
    var webWhiteListRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String,webWhiteListRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        self.webWhiteListRuleId = webWhiteListRuleId
        super.init(regionId: regionId)
    }


    enum DisableWhiteListRuleOfWebRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
        case webWhiteListRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWhiteListRuleOfWebRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)
        try encoderContainer.encode(webWhiteListRuleId, forKey: .webWhiteListRuleId)

    }
}


///  关闭网站类规则 CC 观察者模式, 观察模式下, CC 防护只告警不防御。支持批量操作, 批量操作时 webRuleId 传多个, 以 &#39;,&#39; 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败
public class DisableWebRuleCCObserverModeRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 网站规则 Id
    var webRuleId:String


    public init(regionId: String,instanceId:String,webRuleId:String){
        self.instanceId = instanceId
        self.webRuleId = webRuleId
        super.init(regionId: regionId)
    }


    enum DisableWebRuleCCObserverModeRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case webRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWebRuleCCObserverModeRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(webRuleId, forKey: .webRuleId)

    }
}


///  查询某个实例下的非网站转发配置
public class DescribeForwardRulesRequest:JdCloudRequest
{
    /// 页码, 默认为1
    var pageNumber:Int?

    /// 分页大小, 默认为10, 取值范围[10, 100]
    var pageSize:Int?

    /// 查询类型名称, domain:源站域名, ip:源站 IP, port: 转发端口, originPort: 源站端口
    var searchType:String?

    /// 查询类型值
    var searchValue:String?

    /// 高防实例 Id
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeForwardRulesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case searchType
        case searchValue
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeForwardRulesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(searchType, forKey: .searchType)
        try encoderContainer.encode(searchValue, forKey: .searchValue)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class EnableBlackListRuleOfForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableBlackListRuleOfForwardRuleResult?;

    enum EnableBlackListRuleOfForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableBlackListRuleOfForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableBlackListRuleOfForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableBlackListRuleOfForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableBlackListRuleOfForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询非网站类规则
public class DescribeForwardRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,instanceId:String,forwardRuleId:String){
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum DescribeForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}

/// 更新非网站类规则 
public class ModifyForwardRuleResult:NSObject,JdCloudResult
{
    /// 0: 更新规则失败, 1: 更新规则成功
    var code:Int?

    /// 更新规则失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyForwardRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class CreateForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateForwardRuleResult?;

    enum CreateForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询非网站类转发规则的防护规则 Geo 拦截可设置区域编码 
public class DescribeGeoAreasResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[Country?]?



    public override init(){
        super.init()
    }

    enum DescribeGeoAreasResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeGeoAreasResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([Country?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeGeoAreasResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeGeoAreasResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class DescribeGeoAreasResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeGeoAreasResult?;

    enum DescribeGeoAreasResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeGeoAreasResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeGeoAreasResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeGeoAreasResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeGeoAreasResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询转发规则的白名单规则
public class DescribeWhiteListRuleOfForwardRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,instanceId:String,forwardRuleId:String){
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum DescribeWhiteListRuleOfForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWhiteListRuleOfForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}

/// 开启转发规则的白名单规则 
public class EnableWhiteListRuleOfForwardRuleResult:NSObject,JdCloudResult
{
    /// 开启结果, 0: 开启失败, 1: 开启成功
    var code:Int?

    /// 开启失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum EnableWhiteListRuleOfForwardRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableWhiteListRuleOfForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension EnableWhiteListRuleOfForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWhiteListRuleOfForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 查询非网站类转发规则的防护规则 
public class DescribeProtectionRuleOfForwardRuleResult:NSObject,JdCloudResult
{
    /// ProtectionRule
    var protectionRule:ForwardProtectionRule?



    public override init(){
        super.init()
    }

    enum DescribeProtectionRuleOfForwardRuleResultCodingKeys: String, CodingKey {
        case protectionRule
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProtectionRuleOfForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.protectionRule)
        {
            self.protectionRule = try decoderContainer.decode(ForwardProtectionRule?.self, forKey: .protectionRule)
        }
    }
}
public extension DescribeProtectionRuleOfForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProtectionRuleOfForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(protectionRule, forKey: .protectionRule)
    }
}
/// 开启转发规则的黑名单规则 
public class EnableBlackListRuleOfForwardRuleResult:NSObject,JdCloudResult
{
    /// 开启结果, 0: 开启失败, 1: 开启成功
    var code:Int?

    /// 开启失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum EnableBlackListRuleOfForwardRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableBlackListRuleOfForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension EnableBlackListRuleOfForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableBlackListRuleOfForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 修改非网站类转发规则的防护规则 
public class ModifyProtectionRuleOfForwardRuleResult:NSObject,JdCloudResult
{
    /// 0: 修改规则失败, 1: 修改规则成功
    var code:Int?

    /// 修改规则失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyProtectionRuleOfForwardRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyProtectionRuleOfForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyProtectionRuleOfForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyProtectionRuleOfForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class ModifyWhiteListRuleOfForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyWhiteListRuleOfForwardRuleResult?;

    enum ModifyWhiteListRuleOfForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyWhiteListRuleOfForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyWhiteListRuleOfForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyWhiteListRuleOfForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyWhiteListRuleOfForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  开启转发规则的白名单规则
public class EnableWhiteListRuleOfForwardRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,instanceId:String,forwardRuleId:String){
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum EnableWhiteListRuleOfForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWhiteListRuleOfForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}


///  开启转发规则的黑名单规则
public class EnableBlackListRuleOfForwardRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,instanceId:String,forwardRuleId:String){
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum EnableBlackListRuleOfForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableBlackListRuleOfForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}

public class ModifyBlackListRuleOfForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyBlackListRuleOfForwardRuleResult?;

    enum ModifyBlackListRuleOfForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyBlackListRuleOfForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyBlackListRuleOfForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyBlackListRuleOfForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBlackListRuleOfForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除非网站规则, 批量操作时, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 
public class DeleteForwardRuleResult:NSObject,JdCloudResult
{
    /// 0: 删除规则失败, 1: 删除规则成功
    var code:Int?

    /// 删除规则失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DeleteForwardRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DeleteForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class DescribeWhiteListRuleOfForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeWhiteListRuleOfForwardRuleResult?;

    enum DescribeWhiteListRuleOfForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWhiteListRuleOfForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeWhiteListRuleOfForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeWhiteListRuleOfForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWhiteListRuleOfForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询转发规则的白名单规则 
public class DescribeWhiteListRuleOfForwardRuleResult:NSObject,JdCloudResult
{
    /// Data
    var data:ForwardWhiteListRule?



    public override init(){
        super.init()
    }

    enum DescribeWhiteListRuleOfForwardRuleResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWhiteListRuleOfForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(ForwardWhiteListRule?.self, forKey: .data)
        }
    }
}
public extension DescribeWhiteListRuleOfForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWhiteListRuleOfForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  查询非网站类转发规则的防护规则 Geo 拦截可设置区域编码
public class DescribeGeoAreasRequest:JdCloudRequest
{
}

public class DisableWhiteListRuleOfForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableWhiteListRuleOfForwardRuleResult?;

    enum DisableWhiteListRuleOfForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableWhiteListRuleOfForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableWhiteListRuleOfForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableWhiteListRuleOfForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWhiteListRuleOfForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeForwardRuleResult?;

    enum DescribeForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  非网站类规则切换成回源状态
public class SwitchForwardRuleOriginRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,instanceId:String,forwardRuleId:String){
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum SwitchForwardRuleOriginRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SwitchForwardRuleOriginRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}

/// 非网站类规则切换成回源状态 
public class SwitchForwardRuleOriginResult:NSObject,JdCloudResult
{
    /// 0: 切换失败, 1: 切换成功
    var code:Int?

    /// 切换失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum SwitchForwardRuleOriginResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SwitchForwardRuleOriginResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension SwitchForwardRuleOriginResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SwitchForwardRuleOriginResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  更新非网站类规则
public class ModifyForwardRuleRequest:JdCloudRequest
{
    /// 更新非网站类规则请求参数
    var forwardRuleSpec:ForwardRuleSpec

    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,forwardRuleSpec:ForwardRuleSpec,instanceId:String,forwardRuleId:String){
        self.forwardRuleSpec = forwardRuleSpec
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum ModifyForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case forwardRuleSpec
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(forwardRuleSpec, forKey: .forwardRuleSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}

/// 添加非网站类规则 
public class CreateForwardRuleResult:NSObject,JdCloudResult
{
    /// 0: 添加规则失败, 1: 添加规则成功
    var code:Int?

    /// 添加规则失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum CreateForwardRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension CreateForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 查询某个实例下的非网站转发配置 
public class DescribeForwardRulesResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[ForwardRule?]?

    /// 当前页数量
    var currentCount:Int?

    /// 总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeForwardRulesResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeForwardRulesResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([ForwardRule?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeForwardRulesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeForwardRulesResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
public class ModifyForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyForwardRuleResult?;

    enum ModifyForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeProtectionRuleOfForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeProtectionRuleOfForwardRuleResult?;

    enum DescribeProtectionRuleOfForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProtectionRuleOfForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeProtectionRuleOfForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeProtectionRuleOfForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProtectionRuleOfForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  非网站类规则切换成防御状态
public class SwitchForwardRuleProtectRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,instanceId:String,forwardRuleId:String){
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum SwitchForwardRuleProtectRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SwitchForwardRuleProtectRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}


///  查询转发规则的黑名单规则
public class DescribeBlackListRuleOfForwardRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,instanceId:String,forwardRuleId:String){
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum DescribeBlackListRuleOfForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBlackListRuleOfForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}

public class EnableWhiteListRuleOfForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableWhiteListRuleOfForwardRuleResult?;

    enum EnableWhiteListRuleOfForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableWhiteListRuleOfForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableWhiteListRuleOfForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableWhiteListRuleOfForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableWhiteListRuleOfForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询非网站类规则 
public class DescribeForwardRuleResult:NSObject,JdCloudResult
{
    /// Data
    var data:ForwardRule?



    public override init(){
        super.init()
    }

    enum DescribeForwardRuleResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(ForwardRule?.self, forKey: .data)
        }
    }
}
public extension DescribeForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  添加非网站类规则
public class CreateForwardRuleRequest:JdCloudRequest
{
    /// 添加非网站类规则请求参数
    var forwardRuleSpec:ForwardRuleSpec

    /// 高防实例 Id
    var instanceId:String


    public init(regionId: String,forwardRuleSpec:ForwardRuleSpec,instanceId:String){
        self.forwardRuleSpec = forwardRuleSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum CreateForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case forwardRuleSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(forwardRuleSpec, forKey: .forwardRuleSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 非网站类规则切换成防御状态 
public class SwitchForwardRuleProtectResult:NSObject,JdCloudResult
{
    /// 0: 切换失败, 1: 切换成功
    var code:Int?

    /// 切换失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum SwitchForwardRuleProtectResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SwitchForwardRuleProtectResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension SwitchForwardRuleProtectResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SwitchForwardRuleProtectResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class ModifyProtectionRuleOfForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyProtectionRuleOfForwardRuleResult?;

    enum ModifyProtectionRuleOfForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyProtectionRuleOfForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyProtectionRuleOfForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyProtectionRuleOfForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyProtectionRuleOfForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改转发规则的黑名单规则 
public class ModifyBlackListRuleOfForwardRuleResult:NSObject,JdCloudResult
{
    /// 修改结果, 0: 修改失败, 1: 修改成功
    var code:Int?

    /// 修改失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyBlackListRuleOfForwardRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyBlackListRuleOfForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyBlackListRuleOfForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBlackListRuleOfForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  删除非网站规则, 批量操作时, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败
public class DeleteForwardRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,instanceId:String,forwardRuleId:String){
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum DeleteForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}

public class DescribeForwardRulesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeForwardRulesResult?;

    enum DescribeForwardRulesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeForwardRulesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeForwardRulesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeForwardRulesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeForwardRulesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改转发规则的黑名单规则
public class ModifyBlackListRuleOfForwardRuleRequest:JdCloudRequest
{
    /// 修改转发规则的黑名单规则请求参数
    var modifySpec:ModifyBlackListRuleOfForwardRuleSpec

    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,modifySpec:ModifyBlackListRuleOfForwardRuleSpec,instanceId:String,forwardRuleId:String){
        self.modifySpec = modifySpec
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum ModifyBlackListRuleOfForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case modifySpec
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBlackListRuleOfForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(modifySpec, forKey: .modifySpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}

/// 修改转发规则的白名单规则 
public class ModifyWhiteListRuleOfForwardRuleResult:NSObject,JdCloudResult
{
    /// 修改结果, 0: 修改失败, 1: 修改成功
    var code:Int?

    /// 修改失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyWhiteListRuleOfForwardRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyWhiteListRuleOfForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyWhiteListRuleOfForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyWhiteListRuleOfForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  查询非网站类转发规则的防护规则
public class DescribeProtectionRuleOfForwardRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,instanceId:String,forwardRuleId:String){
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum DescribeProtectionRuleOfForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProtectionRuleOfForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}

/// 关闭转发规则的白名单规则 
public class DisableWhiteListRuleOfForwardRuleResult:NSObject,JdCloudResult
{
    /// 关闭结果, 0: 关闭失败, 1: 关闭成功
    var code:Int?

    /// 关闭失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DisableWhiteListRuleOfForwardRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableWhiteListRuleOfForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DisableWhiteListRuleOfForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWhiteListRuleOfForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class SwitchForwardRuleProtectResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SwitchForwardRuleProtectResult?;

    enum SwitchForwardRuleProtectResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SwitchForwardRuleProtectResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SwitchForwardRuleProtectResult?.self, forKey: .result) ?? nil
    }
}

public extension SwitchForwardRuleProtectResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SwitchForwardRuleProtectResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  关闭转发规则的黑名单规则
public class DisableBlackListRuleOfForwardRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,instanceId:String,forwardRuleId:String){
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum DisableBlackListRuleOfForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableBlackListRuleOfForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}

public class SwitchForwardRuleOriginResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SwitchForwardRuleOriginResult?;

    enum SwitchForwardRuleOriginResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SwitchForwardRuleOriginResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SwitchForwardRuleOriginResult?.self, forKey: .result) ?? nil
    }
}

public extension SwitchForwardRuleOriginResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SwitchForwardRuleOriginResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 关闭转发规则的黑名单规则 
public class DisableBlackListRuleOfForwardRuleResult:NSObject,JdCloudResult
{
    /// 关闭结果, 0: 关闭失败, 1: 关闭成功
    var code:Int?

    /// 关闭失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum DisableBlackListRuleOfForwardRuleResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableBlackListRuleOfForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DisableBlackListRuleOfForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableBlackListRuleOfForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  关闭转发规则的白名单规则
public class DisableWhiteListRuleOfForwardRuleRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,instanceId:String,forwardRuleId:String){
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum DisableWhiteListRuleOfForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableWhiteListRuleOfForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}

public class DescribeBlackListRuleOfForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBlackListRuleOfForwardRuleResult?;

    enum DescribeBlackListRuleOfForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBlackListRuleOfForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBlackListRuleOfForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBlackListRuleOfForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBlackListRuleOfForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteForwardRuleResult?;

    enum DeleteForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询转发规则的黑名单规则 
public class DescribeBlackListRuleOfForwardRuleResult:NSObject,JdCloudResult
{
    /// Data
    var data:ForwardBlackListRule?



    public override init(){
        super.init()
    }

    enum DescribeBlackListRuleOfForwardRuleResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBlackListRuleOfForwardRuleResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(ForwardBlackListRule?.self, forKey: .data)
        }
    }
}
public extension DescribeBlackListRuleOfForwardRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBlackListRuleOfForwardRuleResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  修改非网站类转发规则的防护规则
public class ModifyProtectionRuleOfForwardRuleRequest:JdCloudRequest
{
    /// 修改非网站类转发规则的防护规则请求参数
    var forwardProtectionRuleSpec:ForwardProtectionRuleSpec

    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,forwardProtectionRuleSpec:ForwardProtectionRuleSpec,instanceId:String,forwardRuleId:String){
        self.forwardProtectionRuleSpec = forwardProtectionRuleSpec
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum ModifyProtectionRuleOfForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case forwardProtectionRuleSpec
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyProtectionRuleOfForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(forwardProtectionRuleSpec, forKey: .forwardProtectionRuleSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}


///  修改转发规则的白名单规则
public class ModifyWhiteListRuleOfForwardRuleRequest:JdCloudRequest
{
    /// 修改转发规则的黑名单规则请求参数
    var modifySpec:ModifyWhiteListRuleOfForwardRuleSpec

    /// 高防实例 Id
    var instanceId:String

    /// 转发规则 Id
    var forwardRuleId:String


    public init(regionId: String,modifySpec:ModifyWhiteListRuleOfForwardRuleSpec,instanceId:String,forwardRuleId:String){
        self.modifySpec = modifySpec
        self.instanceId = instanceId
        self.forwardRuleId = forwardRuleId
        super.init(regionId: regionId)
    }


    enum ModifyWhiteListRuleOfForwardRuleRequestRequestCodingKeys: String, CodingKey {
        case modifySpec
        case instanceId
        case forwardRuleId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyWhiteListRuleOfForwardRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(modifySpec, forKey: .modifySpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(forwardRuleId, forKey: .forwardRuleId)

    }
}

public class DisableBlackListRuleOfForwardRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableBlackListRuleOfForwardRuleResult?;

    enum DisableBlackListRuleOfForwardRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableBlackListRuleOfForwardRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableBlackListRuleOfForwardRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableBlackListRuleOfForwardRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableBlackListRuleOfForwardRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询 CC 攻击日志详情.
      ///       /// - 参数 attackId 优先级高于 instanceId, attackId 不为空时, 忽略 instanceId
      ///       /// 
public class DescribeCCAttackLogDetailsRequest:JdCloudRequest
{
    /// 页码, 默认为1
    var pageNumber:Int?

    /// 分页大小, 默认为10, 取值范围[10, 100]
    var pageSize:Int?

    /// 开始时间, 只能查询最近 60 天以内的数据, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String

    /// 查询的结束时间, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String

    /// 高防实例 ID
    var instanceId:String?

    /// 查询的子域名，只有选中某一个实例后才能多选子域名
    var subDomain:[String?]?

    /// CC 攻击记录Id
    var attackId:String?


    public init(regionId: String,startTime:String,endTime:String){
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum DescribeCCAttackLogDetailsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case instanceId
        case subDomain
        case attackId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCAttackLogDetailsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(subDomain, forKey: .subDomain)
        try encoderContainer.encode(attackId, forKey: .attackId)

    }
}


///  查询 CC 攻击日志
public class DescribeCCAttackLogsRequest:JdCloudRequest
{
    /// 页码, 默认为1
    var pageNumber:Int?

    /// 分页大小, 默认为10, 取值范围[10, 100]
    var pageSize:Int?

    /// 开始时间, 只能查询最近 60 天以内的数据, UTC 时间, 格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String

    /// 查询的结束时间, UTC 时间, 格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String

    /// 高防实例 ID
    var instanceId:[String?]?


    public init(regionId: String,startTime:String,endTime:String){
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum DescribeCCAttackLogsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCAttackLogsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 查询 CC 攻击日志 
public class DescribeCCAttackLogsResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[CCAttackLog?]?

    /// 当前页数量
    var currentCount:Int?

    /// 实例总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeCCAttackLogsResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCAttackLogsResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([CCAttackLog?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeCCAttackLogsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCAttackLogsResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
public class DescribeCCAttackLogsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCCAttackLogsResult?;

    enum DescribeCCAttackLogsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCAttackLogsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCCAttackLogsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCCAttackLogsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCAttackLogsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询 CC 攻击日志详情.
      ///       /// - 参数 attackId 优先级高于 instanceId, attackId 不为空时, 忽略 instanceId
      ///       ///  
public class DescribeCCAttackLogDetailsResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[CCAttackLogDetail?]?

    /// 当前页数量
    var currentCount:Int?

    /// 实例总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeCCAttackLogDetailsResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCAttackLogDetailsResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([CCAttackLogDetail?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeCCAttackLogDetailsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCAttackLogDetailsResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}

///  查询攻击次数及流量峰值
public class DescribeAttackStatisticsRequest:JdCloudRequest
{
    /// 开始时间, 只能查询最近 60 天以内的数据, UTC 时间, 格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String

    /// 查询的结束时间, UTC 时间, 格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String

    /// 高防实例 ID
    var instanceId:[String?]?

    /// 攻击类型, 0 为 DDoS, 1 为 CC
    var type:Int


    public init(regionId: String,startTime:String,endTime:String,type:Int){
        self.startTime = startTime
        self.endTime = endTime
        self.type = type
        super.init(regionId: regionId)
    }


    enum DescribeAttackStatisticsRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case instanceId
        case type
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackStatisticsRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(type, forKey: .type)

    }
}

/// 查询攻击次数及流量峰值 
public class DescribeAttackStatisticsResult:NSObject,JdCloudResult
{
    /// 攻击流量峰值
    var flow:Double?

    /// 攻击次数
    var count:Int?

    /// 流量单位, bps、Kbps、Mbps、Gbps
    var unit:String?



    public override init(){
        super.init()
    }

    enum DescribeAttackStatisticsResultCodingKeys: String, CodingKey {
        case flow
        case count
        case unit
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackStatisticsResultCodingKeys.self)
        if decoderContainer.contains(.flow)
        {
            self.flow = try decoderContainer.decode(Double?.self, forKey: .flow)
        }
        if decoderContainer.contains(.count)
        {
            self.count = try decoderContainer.decode(Int?.self, forKey: .count)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
    }
}
public extension DescribeAttackStatisticsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackStatisticsResultCodingKeys.self)
        try encoderContainer.encode(flow, forKey: .flow)
        try encoderContainer.encode(count, forKey: .count)
        try encoderContainer.encode(unit, forKey: .unit)
    }
}
public class DescribeAttackStatisticsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAttackStatisticsResult?;

    enum DescribeAttackStatisticsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackStatisticsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAttackStatisticsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAttackStatisticsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackStatisticsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询 DDoS 攻击日志 
public class DescribeDDoSAttackLogsResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[DDoSAttackLog?]?

    /// 当前页数量
    var currentCount:Int?

    /// 实例总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeDDoSAttackLogsResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDDoSAttackLogsResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([DDoSAttackLog?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeDDoSAttackLogsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDDoSAttackLogsResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
/// 查询各类型攻击次数 
public class DescribeAttackTypeCountResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[AttackTypeCount?]?



    public override init(){
        super.init()
    }

    enum DescribeAttackTypeCountResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackTypeCountResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([AttackTypeCount?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeAttackTypeCountResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackTypeCountResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}

///  查询各类型攻击次数
public class DescribeAttackTypeCountRequest:JdCloudRequest
{
    /// 开始时间, 只能查询最近 60 天以内的数据, UTC 时间, 格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String

    /// 查询的结束时间, UTC 时间, 格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String

    /// 高防实例 ID
    var instanceId:[String?]?


    public init(regionId: String,startTime:String,endTime:String){
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum DescribeAttackTypeCountRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackTypeCountRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeAttackTypeCountResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAttackTypeCountResult?;

    enum DescribeAttackTypeCountResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackTypeCountResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAttackTypeCountResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAttackTypeCountResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackTypeCountResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询 DDoS 攻击日志
public class DescribeDDoSAttackLogsRequest:JdCloudRequest
{
    /// 页码, 默认为1
    var pageNumber:Int?

    /// 分页大小, 默认为10, 取值范围[10, 100]
    var pageSize:Int?

    /// 开始时间, 只能查询最近 60 天以内的数据, UTC 时间, 格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String

    /// 查询的结束时间, UTC 时间, 格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String

    /// 高防实例 ID
    var instanceId:[String?]?


    public init(regionId: String,startTime:String,endTime:String){
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum DescribeDDoSAttackLogsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDDoSAttackLogsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeDDoSAttackLogsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDDoSAttackLogsResult?;

    enum DescribeDDoSAttackLogsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDDoSAttackLogsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDDoSAttackLogsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDDoSAttackLogsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDDoSAttackLogsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeCCAttackLogDetailsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCCAttackLogDetailsResult?;

    enum DescribeCCAttackLogDetailsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCAttackLogDetailsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCCAttackLogDetailsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCCAttackLogDetailsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCAttackLogDetailsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改实例名称
public class ModifyInstanceNameRequest:JdCloudRequest
{
    /// 修改实例名称请求参数
    var renameInstanceSpec:RenameInstanceSpec

    /// 实例 ID
    var instanceId:String


    public init(regionId: String,renameInstanceSpec:RenameInstanceSpec,instanceId:String){
        self.renameInstanceSpec = renameInstanceSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstanceNameRequestRequestCodingKeys: String, CodingKey {
        case renameInstanceSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(renameInstanceSpec, forKey: .renameInstanceSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询用户可设置为网站类规则回源 IP 的京东云云物理服务器公网 IP 资源
public class DescribeCpsIpListRequest:JdCloudRequest
{
    /// 页码, 默认为 1
    var pageNumber:Int?

    /// 分页大小, 默认为 10, 取值范围 [0, 100], 0 表示全量
    var pageSize:Int?




    enum DescribeCpsIpListRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCpsIpListRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}


///  更新告警配置
public class ModifyAlarmConfigRequest:JdCloudRequest
{
    /// 更新告警配置请求参数
    var alarmConfigSpec:AlarmConfigSpec

    /// 实例 ID
    var instanceId:String


    public init(regionId: String,alarmConfigSpec:AlarmConfigSpec,instanceId:String){
        self.alarmConfigSpec = alarmConfigSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyAlarmConfigRequestRequestCodingKeys: String, CodingKey {
        case alarmConfigSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyAlarmConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(alarmConfigSpec, forKey: .alarmConfigSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 新购或升级高防实例 
public class CreateInstanceResult:NSObject,JdCloudResult
{
    /// 0: 新购或升级实例失败, 1: 新购或升级实例成功
    var code:Int?

    /// 新购或升级成功时为 订单 id, 创建实例失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum CreateInstanceResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension CreateInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  检测实例名称是否合法
public class CheckNameRequest:JdCloudRequest
{
    /// 待检测实例名称
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum CheckNameRequestRequestCodingKeys: String, CodingKey {
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)

    }
}

/// 查询实例 
public class DescribeInstanceResult:NSObject,JdCloudResult
{
    /// Data
    var data:Instance?



    public override init(){
        super.init()
    }

    enum DescribeInstanceResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Instance?.self, forKey: .data)
        }
    }
}
public extension DescribeInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class DescribeAlarmConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAlarmConfigResult?;

    enum DescribeAlarmConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAlarmConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAlarmConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAlarmConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改实例名称 
public class ModifyInstanceNameResult:NSObject,JdCloudResult
{
    /// 0: 修改实例名称失败, 1: 修改实例名称成功
    var code:Int?

    /// 修改失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyInstanceNameResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceNameResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyInstanceNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceNameResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 更新告警配置 
public class ModifyAlarmConfigResult:NSObject,JdCloudResult
{
    /// 0: 修改失败, 1: 修改成功
    var code:Int?

    /// 修改失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyAlarmConfigResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyAlarmConfigResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyAlarmConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyAlarmConfigResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 更新实例弹性防护带宽 
public class ModifyEPBResult:NSObject,JdCloudResult
{
    /// 0: 修改失败, 1: 修改成功
    var code:Int?

    /// 修改失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum ModifyEPBResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyEPBResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension ModifyEPBResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyEPBResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  查询实例列表
public class DescribeInstancesRequest:JdCloudRequest
{
    /// 页码, 默认为 1
    var pageNumber:Int?

    /// 分页大小, 默认为 10, 取值范围[10, 100], 0 表示全量
    var pageSize:Int?

    /// 实例名称，可模糊匹配
    var name:String?




    enum DescribeInstancesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(name, forKey: .name)

    }
}

public class DescribeVpcIpListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeVpcIpListResult?;

    enum DescribeVpcIpListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcIpListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeVpcIpListResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeVpcIpListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcIpListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeProtectionStatisticsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeProtectionStatisticsResult?;

    enum DescribeProtectionStatisticsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProtectionStatisticsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeProtectionStatisticsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeProtectionStatisticsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProtectionStatisticsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询用户可设置为网站类规则回源 IP 的京东云云物理服务器公网 IP 资源 
public class DescribeCpsIpListResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[CpsIpResource?]?

    /// 当前页数量
    var currentCount:Int?

    /// 总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeCpsIpListResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCpsIpListResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([CpsIpResource?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeCpsIpListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCpsIpListResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}

///  查询实例
public class DescribeInstanceRequest:JdCloudRequest
{
    /// 实例 ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class ModifyEPBResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyEPBResult?;

    enum ModifyEPBResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyEPBResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyEPBResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyEPBResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyEPBResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  新购或升级高防实例
public class CreateInstanceRequest:JdCloudRequest
{
    /// 新购或升级实例请求参数
    var createInstanceSpec:CreateInstanceSpec


    public init(regionId: String,createInstanceSpec:CreateInstanceSpec){
        self.createInstanceSpec = createInstanceSpec
        super.init(regionId: regionId)
    }


    enum CreateInstanceRequestRequestCodingKeys: String, CodingKey {
        case createInstanceSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(createInstanceSpec, forKey: .createInstanceSpec)

    }
}

public class CreateInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateInstanceResult?;

    enum CreateInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 检测实例名称是否合法 
public class CheckNameResult:NSObject,JdCloudResult
{
    /// 检测结果 code, 0: 不可用, 1: 可用
    var code:Int?

    /// 检测结果, 不可用时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum CheckNameResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckNameResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension CheckNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckNameResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 查询高防实例防护统计信息 
public class DescribeProtectionStatisticsResult:NSObject,JdCloudResult
{
    /// Data
    var data:ProtectionStatistics?



    public override init(){
        super.init()
    }

    enum DescribeProtectionStatisticsResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProtectionStatisticsResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(ProtectionStatistics?.self, forKey: .data)
        }
    }
}
public extension DescribeProtectionStatisticsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProtectionStatisticsResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class DescribeInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstancesResult?;

    enum DescribeInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceResult?;

    enum DescribeInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeNameListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeNameListResult?;

    enum DescribeNameListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNameListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeNameListResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeNameListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNameListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询告警配置 
public class DescribeAlarmConfigResult:NSObject,JdCloudResult
{
    /// Data
    var data:AlarmConfig?



    public override init(){
        super.init()
    }

    enum DescribeAlarmConfigResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAlarmConfigResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(AlarmConfig?.self, forKey: .data)
        }
    }
}
public extension DescribeAlarmConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmConfigResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 查询高防实例名称列表 
public class DescribeNameListResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[InstanceIdName?]?

    /// 当前页数量
    var currentCount:Int?

    /// 总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeNameListResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNameListResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([InstanceIdName?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeNameListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNameListResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
public class ModifyAlarmConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyAlarmConfigResult?;

    enum ModifyAlarmConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyAlarmConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyAlarmConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyAlarmConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyAlarmConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询高防实例防护统计信息
public class DescribeProtectionStatisticsRequest:JdCloudRequest
{
}

public class DescribeCpsIpListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCpsIpListResult?;

    enum DescribeCpsIpListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCpsIpListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCpsIpListResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCpsIpListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCpsIpListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询实例列表 
public class DescribeInstancesResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[Instance?]?

    /// 当前页数量
    var currentCount:Int?

    /// 总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeInstancesResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([Instance?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
/// 查询用户可设置为网站类规则回源 IP 的京东云云内弹性公网 IP 资源 
public class DescribeVpcIpListResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[VpcIpResource?]?

    /// 当前页数量
    var currentCount:Int?

    /// 总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeVpcIpListResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcIpListResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([VpcIpResource?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeVpcIpListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcIpListResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}

///  查询用户可设置为网站类规则回源 IP 的京东云云内弹性公网 IP 资源
public class DescribeVpcIpListRequest:JdCloudRequest
{
    /// 页码, 默认为 1
    var pageNumber:Int?

    /// 分页大小, 默认为 10, 取值范围 [0, 100], 0 表示全量
    var pageSize:Int?




    enum DescribeVpcIpListRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcIpListRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}


///  查询高防实例名称列表
public class DescribeNameListRequest:JdCloudRequest
{
    /// 高防实例 ID, 为空则查询所有实例名称
    var id:String?

    /// 实例名称, 可模糊匹配
    var name:String?

    /// 页码, 默认为 1
    var pageNumber:Int?

    /// 分页大小, 默认为 10, 取值范围 [10, 100]
    var pageSize:Int?




    enum DescribeNameListRequestRequestCodingKeys: String, CodingKey {
        case id
        case name
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNameListRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

public class CheckNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CheckNameResult?;

    enum CheckNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CheckNameResult?.self, forKey: .result) ?? nil
    }
}

public extension CheckNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  更新实例弹性防护带宽
public class ModifyEPBRequest:JdCloudRequest
{
    /// 修改实例名称请求参数
    var modifyInstanceEPBSpec:ModifyInstanceEPBSpec

    /// 实例 ID
    var instanceId:String


    public init(regionId: String,modifyInstanceEPBSpec:ModifyInstanceEPBSpec,instanceId:String){
        self.modifyInstanceEPBSpec = modifyInstanceEPBSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyEPBRequestRequestCodingKeys: String, CodingKey {
        case modifyInstanceEPBSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyEPBRequestRequestCodingKeys.self)
        try encoderContainer.encode(modifyInstanceEPBSpec, forKey: .modifyInstanceEPBSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询告警配置
public class DescribeAlarmConfigRequest:JdCloudRequest
{
    /// 实例 ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeAlarmConfigRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class ModifyInstanceNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstanceNameResult?;

    enum ModifyInstanceNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstanceNameResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstanceNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeDDoSGraphResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDDoSGraphResult?;

    enum DescribeDDoSGraphResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDDoSGraphResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDDoSGraphResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDDoSGraphResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDDoSGraphResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 转发流量报表 
public class DescribeFwdGraphResult:NSObject,JdCloudResult
{
    /// 转发流量列表
    var forwardRecord:[Double?]?

    /// 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var time:[String?]?

    /// 流量单位, bps, Kbps, Mbps, Gbps
    var unit:String?



    public override init(){
        super.init()
    }

    enum DescribeFwdGraphResultCodingKeys: String, CodingKey {
        case forwardRecord
        case time
        case unit
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeFwdGraphResultCodingKeys.self)
        if decoderContainer.contains(.forwardRecord)
        {
            self.forwardRecord = try decoderContainer.decode([Double?]?.self, forKey: .forwardRecord)
        }
        if decoderContainer.contains(.time)
        {
            self.time = try decoderContainer.decode([String?]?.self, forKey: .time)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
    }
}
public extension DescribeFwdGraphResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeFwdGraphResultCodingKeys.self)
        try encoderContainer.encode(forwardRecord, forKey: .forwardRecord)
        try encoderContainer.encode(time, forKey: .time)
        try encoderContainer.encode(unit, forKey: .unit)
    }
}

///  CC 防护流量报表
public class DescribeCCGraphRequest:JdCloudRequest
{
    /// 开始时间, 最多查最近 60 天, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String

    /// 查询的结束时间, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String

    /// 高防实例 Id 列表
    var instanceId:[String?]?

    /// 规则域名列表
    var subDomain:[String?]?


    public init(regionId: String,startTime:String,endTime:String){
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum DescribeCCGraphRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case instanceId
        case subDomain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCGraphRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(subDomain, forKey: .subDomain)

    }
}

public class DescribeFwdGraphResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeFwdGraphResult?;

    enum DescribeFwdGraphResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeFwdGraphResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeFwdGraphResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeFwdGraphResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeFwdGraphResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  转发流量报表
public class DescribeFwdGraphRequest:JdCloudRequest
{
    /// 开始时间, 最多查最近 60 天, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String

    /// 查询的结束时间, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String

    /// 高防实例 Id 列表
    var instanceId:[String?]?


    public init(regionId: String,startTime:String,endTime:String){
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum DescribeFwdGraphRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeFwdGraphRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// CC 防护流量报表 
public class DescribeCCGraphResult:NSObject,JdCloudResult
{
    /// 防护后 CC 次数
    var postProtect:[Int64?]?

    /// 防护前 CC 次数
    var preProtect:[Int64?]?

    /// 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var time:[String?]?

    /// 流量单位
    var unit:String?



    public override init(){
        super.init()
    }

    enum DescribeCCGraphResultCodingKeys: String, CodingKey {
        case postProtect
        case preProtect
        case time
        case unit
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCGraphResultCodingKeys.self)
        if decoderContainer.contains(.postProtect)
        {
            self.postProtect = try decoderContainer.decode([Int64?]?.self, forKey: .postProtect)
        }
        if decoderContainer.contains(.preProtect)
        {
            self.preProtect = try decoderContainer.decode([Int64?]?.self, forKey: .preProtect)
        }
        if decoderContainer.contains(.time)
        {
            self.time = try decoderContainer.decode([String?]?.self, forKey: .time)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
    }
}
public extension DescribeCCGraphResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCGraphResultCodingKeys.self)
        try encoderContainer.encode(postProtect, forKey: .postProtect)
        try encoderContainer.encode(preProtect, forKey: .preProtect)
        try encoderContainer.encode(time, forKey: .time)
        try encoderContainer.encode(unit, forKey: .unit)
    }
}
public class DescribeCCGraphResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCCGraphResult?;

    enum DescribeCCGraphResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCCGraphResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCCGraphResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCCGraphResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCCGraphResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// DDos 防护流量报表 
public class DescribeDDoSGraphResult:NSObject,JdCloudResult
{
    /// 防护前 DDoS 流量
    var preProtect:[Double?]?

    /// 防护后 DDoS 流量
    var postProtect:[Double?]?

    /// 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var time:[String?]?

    /// 流量单位, bps, Kbps, Mbps, Gbps
    var unit:String?



    public override init(){
        super.init()
    }

    enum DescribeDDoSGraphResultCodingKeys: String, CodingKey {
        case preProtect
        case postProtect
        case time
        case unit
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDDoSGraphResultCodingKeys.self)
        if decoderContainer.contains(.preProtect)
        {
            self.preProtect = try decoderContainer.decode([Double?]?.self, forKey: .preProtect)
        }
        if decoderContainer.contains(.postProtect)
        {
            self.postProtect = try decoderContainer.decode([Double?]?.self, forKey: .postProtect)
        }
        if decoderContainer.contains(.time)
        {
            self.time = try decoderContainer.decode([String?]?.self, forKey: .time)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
    }
}
public extension DescribeDDoSGraphResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDDoSGraphResultCodingKeys.self)
        try encoderContainer.encode(preProtect, forKey: .preProtect)
        try encoderContainer.encode(postProtect, forKey: .postProtect)
        try encoderContainer.encode(time, forKey: .time)
        try encoderContainer.encode(unit, forKey: .unit)
    }
}

///  DDos 防护流量报表
public class DescribeDDoSGraphRequest:JdCloudRequest
{
    /// 开始时间, 最多查最近 60 天, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String

    /// 查询的结束时间, UTC 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var endTime:String

    /// 高防实例 Id 列表
    var instanceId:[String?]?


    public init(regionId: String,startTime:String,endTime:String){
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum DescribeDDoSGraphRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDDoSGraphRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询实例的 IP 黑白名单
public class DescribeIpSetRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// IP 黑白名单 Id
    var ipSetId:String


    public init(regionId: String,instanceId:String,ipSetId:String){
        self.instanceId = instanceId
        self.ipSetId = ipSetId
        super.init(regionId: regionId)
    }


    enum DescribeIpSetRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case ipSetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIpSetRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(ipSetId, forKey: .ipSetId)

    }
}

public class DescribeIpSetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeIpSetResult?;

    enum DescribeIpSetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIpSetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeIpSetResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeIpSetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIpSetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加实例的 IP 黑白名单, 预定义的 IP 黑白名单绑定到转发规则的黑名单或白名单后生效
public class CreateIpSetRequest:JdCloudRequest
{
    /// 添加实例的 IP 黑白名单请求参数
    var ipSetSpec:IpSetSpec

    /// 高防实例 Id
    var instanceId:String


    public init(regionId: String,ipSetSpec:IpSetSpec,instanceId:String){
        self.ipSetSpec = ipSetSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum CreateIpSetRequestRequestCodingKeys: String, CodingKey {
        case ipSetSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateIpSetRequestRequestCodingKeys.self)
        try encoderContainer.encode(ipSetSpec, forKey: .ipSetSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询实例的 IP 黑白名单用量信息
public class DescribeIpSetUsageRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeIpSetUsageRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIpSetUsageRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询实例的 IP 黑白名单库列表
public class DescribeIpSetsRequest:JdCloudRequest
{
    /// 页码, 默认为1
    var pageNumber:Int?

    /// 分页大小, 默认为10, 取值范围[10, 100]
    var pageSize:Int?

    /// 高防实例 Id
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeIpSetsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIpSetsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  删除实例的 IP 黑白名单. 支持批量操作, 批量操作时 ipSetId 传多个, 以 &#39;,&#39; 分隔. IP 黑白名单规则被引用时不允许删除
public class DeleteIpSetRequest:JdCloudRequest
{
    /// 高防实例 Id
    var instanceId:String

    /// IP 黑白名单 Id
    var ipSetId:String


    public init(regionId: String,instanceId:String,ipSetId:String){
        self.instanceId = instanceId
        self.ipSetId = ipSetId
        super.init(regionId: regionId)
    }


    enum DeleteIpSetRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case ipSetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteIpSetRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(ipSetId, forKey: .ipSetId)

    }
}

/// 查询实例的 IP 黑白名单 
public class DescribeIpSetResult:NSObject,JdCloudResult
{
    /// Data
    var data:IpSet?



    public override init(){
        super.init()
    }

    enum DescribeIpSetResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIpSetResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(IpSet?.self, forKey: .data)
        }
    }
}
public extension DescribeIpSetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIpSetResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class DeleteIpSetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteIpSetResult?;

    enum DeleteIpSetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteIpSetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteIpSetResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteIpSetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteIpSetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加实例的 IP 黑白名单, 预定义的 IP 黑白名单绑定到转发规则的黑名单或白名单后生效 
public class CreateIpSetResult:NSObject,JdCloudResult
{
    /// 0: 添加失败, 1: 添加成功
    var code:Int?

    /// 添加失败时给出具体原因
    var message:String?



    public override init(){
        super.init()
    }

    enum CreateIpSetResultCodingKeys: String, CodingKey {
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateIpSetResultCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension CreateIpSetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateIpSetResultCodingKeys.self)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 删除实例的 IP 黑白名单. 支持批量操作, 批量操作时 ipSetId 传多个, 以 &#39;,&#39; 分隔. IP 黑白名单规则被引用时不允许删除 
public class DeleteIpSetResult:NSObject,JdCloudResult
{
    /// Data
    var data:BatchResultDetail?



    public override init(){
        super.init()
    }

    enum DeleteIpSetResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteIpSetResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(BatchResultDetail?.self, forKey: .data)
        }
    }
}
public extension DeleteIpSetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteIpSetResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class CreateIpSetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateIpSetResult?;

    enum CreateIpSetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateIpSetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateIpSetResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateIpSetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateIpSetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeIpSetUsageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeIpSetUsageResult?;

    enum DescribeIpSetUsageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIpSetUsageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeIpSetUsageResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeIpSetUsageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIpSetUsageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询实例的 IP 黑白名单库列表 
public class DescribeIpSetsResult:NSObject,JdCloudResult
{
    /// DataList
    var dataList:[IpSet?]?

    /// 当前页数量
    var currentCount:Int?

    /// 总数
    var totalCount:Int?

    /// 总页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeIpSetsResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIpSetsResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([IpSet?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeIpSetsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIpSetsResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
public class DescribeIpSetsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeIpSetsResult?;

    enum DescribeIpSetsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIpSetsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeIpSetsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeIpSetsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIpSetsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询实例的 IP 黑白名单用量信息 
public class DescribeIpSetUsageResult:NSObject,JdCloudResult
{
    /// 实例已添加的 IP 黑白名单数量
    var allocatedNum:Int?

    /// 实例还可添加的 IP 黑白名单数量
    var surplusAllocateNum:Int?

    /// 实例最多可添加的 IP 黑白名单数量
    var maxAllocateNum:Int?



    public override init(){
        super.init()
    }

    enum DescribeIpSetUsageResultCodingKeys: String, CodingKey {
        case allocatedNum
        case surplusAllocateNum
        case maxAllocateNum
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIpSetUsageResultCodingKeys.self)
        if decoderContainer.contains(.allocatedNum)
        {
            self.allocatedNum = try decoderContainer.decode(Int?.self, forKey: .allocatedNum)
        }
        if decoderContainer.contains(.surplusAllocateNum)
        {
            self.surplusAllocateNum = try decoderContainer.decode(Int?.self, forKey: .surplusAllocateNum)
        }
        if decoderContainer.contains(.maxAllocateNum)
        {
            self.maxAllocateNum = try decoderContainer.decode(Int?.self, forKey: .maxAllocateNum)
        }
    }
}
public extension DescribeIpSetUsageResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIpSetUsageResultCodingKeys.self)
        try encoderContainer.encode(allocatedNum, forKey: .allocatedNum)
        try encoderContainer.encode(surplusAllocateNum, forKey: .surplusAllocateNum)
        try encoderContainer.encode(maxAllocateNum, forKey: .maxAllocateNum)
    }
}
