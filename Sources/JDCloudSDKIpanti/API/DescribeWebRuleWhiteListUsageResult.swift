/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Anti DDos Pro Web Rule Configuration APIs
   Anti DDos Pro Web Rule Configuration APIs

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询网站类防护规则的白名单用量信息
@objc(DescribeWebRuleWhiteListUsageResult)
public class DescribeWebRuleWhiteListUsageResult:NSObject,JdCloudResult
{
    /// 已配置的白名单规则数量
    var allocatedNum:Int?

    /// 开启的白名单规则数量
    var activeNum:Int?

    /// 还可添加的白名单规则数量
    var surplusAllocateNum:Int?

    /// 最多可添加的白名单规则数量
    var maxAllocateNum:Int?



    public override init(){
        super.init()
    }

    enum DescribeWebRuleWhiteListUsageResultCodingKeys: String, CodingKey {
        case allocatedNum
        case activeNum
        case surplusAllocateNum
        case maxAllocateNum
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWebRuleWhiteListUsageResultCodingKeys.self)
        if decoderContainer.contains(.allocatedNum)
        {
            self.allocatedNum = try decoderContainer.decode(Int?.self, forKey: .allocatedNum)
        }
        if decoderContainer.contains(.activeNum)
        {
            self.activeNum = try decoderContainer.decode(Int?.self, forKey: .activeNum)
        }
        if decoderContainer.contains(.surplusAllocateNum)
        {
            self.surplusAllocateNum = try decoderContainer.decode(Int?.self, forKey: .surplusAllocateNum)
        }
        if decoderContainer.contains(.maxAllocateNum)
        {
            self.maxAllocateNum = try decoderContainer.decode(Int?.self, forKey: .maxAllocateNum)
        }
    }
}
public extension DescribeWebRuleWhiteListUsageResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWebRuleWhiteListUsageResultCodingKeys.self)
        try encoderContainer.encode(allocatedNum, forKey: .allocatedNum)
        try encoderContainer.encode(activeNum, forKey: .activeNum)
        try encoderContainer.encode(surplusAllocateNum, forKey: .surplusAllocateNum)
        try encoderContainer.encode(maxAllocateNum, forKey: .maxAllocateNum)
    }
}
