/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Anti DDoS Pro Attack Log APIs
   Anti DDoS Pro Attack Log APIs

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询攻击次数及流量峰值
@objc(DescribeAttackStatisticsResult)
public class DescribeAttackStatisticsResult:NSObject,JdCloudResult
{
    /// 攻击流量峰值
    var flow:Double?

    /// 攻击次数
    var count:Int?

    /// 流量单位, bps、Kbps、Mbps、Gbps
    var unit:String?



    public override init(){
        super.init()
    }

    enum DescribeAttackStatisticsResultCodingKeys: String, CodingKey {
        case flow
        case count
        case unit
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAttackStatisticsResultCodingKeys.self)
        if decoderContainer.contains(.flow)
        {
            self.flow = try decoderContainer.decode(Double?.self, forKey: .flow)
        }
        if decoderContainer.contains(.count)
        {
            self.count = try decoderContainer.decode(Int?.self, forKey: .count)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
    }
}
public extension DescribeAttackStatisticsResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAttackStatisticsResultCodingKeys.self)
        try encoderContainer.encode(flow, forKey: .flow)
        try encoderContainer.encode(count, forKey: .count)
        try encoderContainer.encode(unit, forKey: .unit)
    }
}
