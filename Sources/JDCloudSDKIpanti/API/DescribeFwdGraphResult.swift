/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Anti DDoS Pro Flow APIs
   Anti DDoS Pro Flow APIs

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 转发流量报表
@objc(DescribeFwdGraphResult)
public class DescribeFwdGraphResult:NSObject,JdCloudResult
{
    /// 转发流量列表
    var forwardRecord:[Double?]?

    /// 时间, 格式: yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var time:[String?]?

    /// 流量单位, bps, Kbps, Mbps, Gbps
    var unit:String?



    public override init(){
        super.init()
    }

    enum DescribeFwdGraphResultCodingKeys: String, CodingKey {
        case forwardRecord
        case time
        case unit
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeFwdGraphResultCodingKeys.self)
        if decoderContainer.contains(.forwardRecord)
        {
            self.forwardRecord = try decoderContainer.decode([Double?]?.self, forKey: .forwardRecord)
        }
        if decoderContainer.contains(.time)
        {
            self.time = try decoderContainer.decode([String?]?.self, forKey: .time)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
    }
}
public extension DescribeFwdGraphResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeFwdGraphResultCodingKeys.self)
        try encoderContainer.encode(forwardRecord, forKey: .forwardRecord)
        try encoderContainer.encode(time, forKey: .time)
        try encoderContainer.encode(unit, forKey: .unit)
    }
}
