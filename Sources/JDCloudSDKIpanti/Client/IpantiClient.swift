/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   京东云IP高防相关接口
   京东云IP高防相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class IpantiJDCloudClient:NSObject,JDCloudClient{
    
    private final var ipantiJDCloudClient:IpantiJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        ipantiJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "ipanti.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        ipantiJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "ipanti/" + "v1"
    
    public let serviceName: String = "ipanti"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func enableBlackListRuleOfForwardRuleAsync(request:EnableBlackListRuleOfForwardRuleRequest,requestComplation:@escaping ExecuteResult<EnableBlackListRuleOfForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try EnableBlackListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAlarmConfigAsync(request:DescribeAlarmConfigRequest,requestComplation:@escaping ExecuteResult<DescribeAlarmConfigResult>) throws {
        ipantiJDCloudClient = self
        try DescribeAlarmConfigExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createIpSetAsync(request:CreateIpSetRequest,requestComplation:@escaping ExecuteResult<CreateIpSetResult>) throws {
        ipantiJDCloudClient = self
        try CreateIpSetExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeWebRuleBlackListUsageAsync(request:DescribeWebRuleBlackListUsageRequest,requestComplation:@escaping ExecuteResult<DescribeWebRuleBlackListUsageResult>) throws {
        ipantiJDCloudClient = self
        try DescribeWebRuleBlackListUsageExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeProtectionRuleOfForwardRuleAsync(request:DescribeProtectionRuleOfForwardRuleRequest,requestComplation:@escaping ExecuteResult<DescribeProtectionRuleOfForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeProtectionRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createCCProtectionRuleOfWebRuleAsync(request:CreateCCProtectionRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<CreateCCProtectionRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try CreateCCProtectionRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyEPBAsync(request:ModifyEPBRequest,requestComplation:@escaping ExecuteResult<ModifyEPBResult>) throws {
        ipantiJDCloudClient = self
        try ModifyEPBExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCCProtectionDefaultConfigOfWebRuleAsync(request:DescribeCCProtectionDefaultConfigOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DescribeCCProtectionDefaultConfigOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeCCProtectionDefaultConfigOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyWhiteListRuleOfWebRuleAsync(request:ModifyWhiteListRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<ModifyWhiteListRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try ModifyWhiteListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyWebRuleAsync(request:ModifyWebRuleRequest,requestComplation:@escaping ExecuteResult<ModifyWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try ModifyWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableWebRuleBlackListAsync(request:EnableWebRuleBlackListRequest,requestComplation:@escaping ExecuteResult<EnableWebRuleBlackListResult>) throws {
        ipantiJDCloudClient = self
        try EnableWebRuleBlackListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableBlackListRuleOfWebRuleAsync(request:EnableBlackListRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<EnableBlackListRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try EnableBlackListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeIpSetsAsync(request:DescribeIpSetsRequest,requestComplation:@escaping ExecuteResult<DescribeIpSetsResult>) throws {
        ipantiJDCloudClient = self
        try DescribeIpSetsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableWhiteListRuleOfWebRuleAsync(request:EnableWhiteListRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<EnableWhiteListRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try EnableWhiteListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteWhiteListRuleOfWebRuleAsync(request:DeleteWhiteListRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DeleteWhiteListRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DeleteWhiteListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableWebRuleWhiteListAsync(request:DisableWebRuleWhiteListRequest,requestComplation:@escaping ExecuteResult<DisableWebRuleWhiteListResult>) throws {
        ipantiJDCloudClient = self
        try DisableWebRuleWhiteListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeIpSetAsync(request:DescribeIpSetRequest,requestComplation:@escaping ExecuteResult<DescribeIpSetResult>) throws {
        ipantiJDCloudClient = self
        try DescribeIpSetExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteForwardRuleAsync(request:DeleteForwardRuleRequest,requestComplation:@escaping ExecuteResult<DeleteForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try DeleteForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func switchWebRuleProtectAsync(request:SwitchWebRuleProtectRequest,requestComplation:@escaping ExecuteResult<SwitchWebRuleProtectResult>) throws {
        ipantiJDCloudClient = self
        try SwitchWebRuleProtectExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstancesAsync(request:DescribeInstancesRequest,requestComplation:@escaping ExecuteResult<DescribeInstancesResult>) throws {
        ipantiJDCloudClient = self
        try DescribeInstancesExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createInstanceAsync(request:CreateInstanceRequest,requestComplation:@escaping ExecuteResult<CreateInstanceResult>) throws {
        ipantiJDCloudClient = self
        try CreateInstanceExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCpsIpListAsync(request:DescribeCpsIpListRequest,requestComplation:@escaping ExecuteResult<DescribeCpsIpListResult>) throws {
        ipantiJDCloudClient = self
        try DescribeCpsIpListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCCAttackLogDetailsAsync(request:DescribeCCAttackLogDetailsRequest,requestComplation:@escaping ExecuteResult<DescribeCCAttackLogDetailsResult>) throws {
        ipantiJDCloudClient = self
        try DescribeCCAttackLogDetailsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func switchForwardRuleOriginAsync(request:SwitchForwardRuleOriginRequest,requestComplation:@escaping ExecuteResult<SwitchForwardRuleOriginResult>) throws {
        ipantiJDCloudClient = self
        try SwitchForwardRuleOriginExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeBlackListRuleOfForwardRuleAsync(request:DescribeBlackListRuleOfForwardRuleRequest,requestComplation:@escaping ExecuteResult<DescribeBlackListRuleOfForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeBlackListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAttackTypeCountAsync(request:DescribeAttackTypeCountRequest,requestComplation:@escaping ExecuteResult<DescribeAttackTypeCountResult>) throws {
        ipantiJDCloudClient = self
        try DescribeAttackTypeCountExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableCCProtectionRuleOfWebRuleAsync(request:DisableCCProtectionRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DisableCCProtectionRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DisableCCProtectionRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableWebRuleCCAsync(request:EnableWebRuleCCRequest,requestComplation:@escaping ExecuteResult<EnableWebRuleCCResult>) throws {
        ipantiJDCloudClient = self
        try EnableWebRuleCCExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeGeoAreasAsync(request:DescribeGeoAreasRequest,requestComplation:@escaping ExecuteResult<DescribeGeoAreasResult>) throws {
        ipantiJDCloudClient = self
        try DescribeGeoAreasExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCCAttackLogsAsync(request:DescribeCCAttackLogsRequest,requestComplation:@escaping ExecuteResult<DescribeCCAttackLogsResult>) throws {
        ipantiJDCloudClient = self
        try DescribeCCAttackLogsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteCCProtectionRuleOfWebRuleAsync(request:DeleteCCProtectionRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DeleteCCProtectionRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DeleteCCProtectionRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableWebRuleCCObserverModeAsync(request:DisableWebRuleCCObserverModeRequest,requestComplation:@escaping ExecuteResult<DisableWebRuleCCObserverModeResult>) throws {
        ipantiJDCloudClient = self
        try DisableWebRuleCCObserverModeExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyForwardRuleAsync(request:ModifyForwardRuleRequest,requestComplation:@escaping ExecuteResult<ModifyForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try ModifyForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeNameListAsync(request:DescribeNameListRequest,requestComplation:@escaping ExecuteResult<DescribeNameListResult>) throws {
        ipantiJDCloudClient = self
        try DescribeNameListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeFwdGraphAsync(request:DescribeFwdGraphRequest,requestComplation:@escaping ExecuteResult<DescribeFwdGraphResult>) throws {
        ipantiJDCloudClient = self
        try DescribeFwdGraphExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeWebRulesAsync(request:DescribeWebRulesRequest,requestComplation:@escaping ExecuteResult<DescribeWebRulesResult>) throws {
        ipantiJDCloudClient = self
        try DescribeWebRulesExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeForwardRulesAsync(request:DescribeForwardRulesRequest,requestComplation:@escaping ExecuteResult<DescribeForwardRulesResult>) throws {
        ipantiJDCloudClient = self
        try DescribeForwardRulesExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyBlackListRuleOfWebRuleAsync(request:ModifyBlackListRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<ModifyBlackListRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try ModifyBlackListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteIpSetAsync(request:DeleteIpSetRequest,requestComplation:@escaping ExecuteResult<DeleteIpSetResult>) throws {
        ipantiJDCloudClient = self
        try DeleteIpSetExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableWebRuleWhiteListAsync(request:EnableWebRuleWhiteListRequest,requestComplation:@escaping ExecuteResult<EnableWebRuleWhiteListResult>) throws {
        ipantiJDCloudClient = self
        try EnableWebRuleWhiteListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeWebRuleWhiteListUsageAsync(request:DescribeWebRuleWhiteListUsageRequest,requestComplation:@escaping ExecuteResult<DescribeWebRuleWhiteListUsageResult>) throws {
        ipantiJDCloudClient = self
        try DescribeWebRuleWhiteListUsageExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeProtectionStatisticsAsync(request:DescribeProtectionStatisticsRequest,requestComplation:@escaping ExecuteResult<DescribeProtectionStatisticsResult>) throws {
        ipantiJDCloudClient = self
        try DescribeProtectionStatisticsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyCertInfoAsync(request:ModifyCertInfoRequest,requestComplation:@escaping ExecuteResult<ModifyCertInfoResult>) throws {
        ipantiJDCloudClient = self
        try ModifyCertInfoExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyAlarmConfigAsync(request:ModifyAlarmConfigRequest,requestComplation:@escaping ExecuteResult<ModifyAlarmConfigResult>) throws {
        ipantiJDCloudClient = self
        try ModifyAlarmConfigExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeWebRuleWhiteListGeoAreasAsync(request:DescribeWebRuleWhiteListGeoAreasRequest,requestComplation:@escaping ExecuteResult<DescribeWebRuleWhiteListGeoAreasResult>) throws {
        ipantiJDCloudClient = self
        try DescribeWebRuleWhiteListGeoAreasExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyBlackListRuleOfForwardRuleAsync(request:ModifyBlackListRuleOfForwardRuleRequest,requestComplation:@escaping ExecuteResult<ModifyBlackListRuleOfForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try ModifyBlackListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableWebRuleBlackListAsync(request:DisableWebRuleBlackListRequest,requestComplation:@escaping ExecuteResult<DisableWebRuleBlackListResult>) throws {
        ipantiJDCloudClient = self
        try DisableWebRuleBlackListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func switchForwardRuleProtectAsync(request:SwitchForwardRuleProtectRequest,requestComplation:@escaping ExecuteResult<SwitchForwardRuleProtectResult>) throws {
        ipantiJDCloudClient = self
        try SwitchForwardRuleProtectExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteBlackListRuleOfWebRuleAsync(request:DeleteBlackListRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DeleteBlackListRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DeleteBlackListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCCProtectionRuleOfWebRuleAsync(request:DescribeCCProtectionRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DescribeCCProtectionRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeCCProtectionRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableBlackListRuleOfWebRuleAsync(request:DisableBlackListRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DisableBlackListRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DisableBlackListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func switchWebRuleOriginAsync(request:SwitchWebRuleOriginRequest,requestComplation:@escaping ExecuteResult<SwitchWebRuleOriginResult>) throws {
        ipantiJDCloudClient = self
        try SwitchWebRuleOriginExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeWhiteListRuleOfWebRuleAsync(request:DescribeWhiteListRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DescribeWhiteListRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeWhiteListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeBlackListRuleOfWebRuleAsync(request:DescribeBlackListRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DescribeBlackListRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeBlackListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAttackStatisticsAsync(request:DescribeAttackStatisticsRequest,requestComplation:@escaping ExecuteResult<DescribeAttackStatisticsResult>) throws {
        ipantiJDCloudClient = self
        try DescribeAttackStatisticsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeBlackListRulesOfWebRuleAsync(request:DescribeBlackListRulesOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DescribeBlackListRulesOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeBlackListRulesOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeDDoSAttackLogsAsync(request:DescribeDDoSAttackLogsRequest,requestComplation:@escaping ExecuteResult<DescribeDDoSAttackLogsResult>) throws {
        ipantiJDCloudClient = self
        try DescribeDDoSAttackLogsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableWhiteListRuleOfForwardRuleAsync(request:EnableWhiteListRuleOfForwardRuleRequest,requestComplation:@escaping ExecuteResult<EnableWhiteListRuleOfForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try EnableWhiteListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableWhiteListRuleOfWebRuleAsync(request:DisableWhiteListRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DisableWhiteListRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DisableWhiteListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyWhiteListRuleOfForwardRuleAsync(request:ModifyWhiteListRuleOfForwardRuleRequest,requestComplation:@escaping ExecuteResult<ModifyWhiteListRuleOfForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try ModifyWhiteListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createWebRuleAsync(request:CreateWebRuleRequest,requestComplation:@escaping ExecuteResult<CreateWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try CreateWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyCCProtectionRuleOfWebRuleAsync(request:ModifyCCProtectionRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<ModifyCCProtectionRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try ModifyCCProtectionRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCCProtectionConfigOfWebRuleAsync(request:DescribeCCProtectionConfigOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DescribeCCProtectionConfigOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeCCProtectionConfigOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCCProtectionRulesOfWebRuleAsync(request:DescribeCCProtectionRulesOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DescribeCCProtectionRulesOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeCCProtectionRulesOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableWebRuleCCAsync(request:DisableWebRuleCCRequest,requestComplation:@escaping ExecuteResult<DisableWebRuleCCResult>) throws {
        ipantiJDCloudClient = self
        try DisableWebRuleCCExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createWhiteListRuleOfWebRuleAsync(request:CreateWhiteListRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<CreateWhiteListRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try CreateWhiteListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createBlackListRuleOfWebRuleAsync(request:CreateBlackListRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<CreateBlackListRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try CreateBlackListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func checkNameAsync(request:CheckNameRequest,requestComplation:@escaping ExecuteResult<CheckNameResult>) throws {
        ipantiJDCloudClient = self
        try CheckNameExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeDDoSGraphAsync(request:DescribeDDoSGraphRequest,requestComplation:@escaping ExecuteResult<DescribeDDoSGraphResult>) throws {
        ipantiJDCloudClient = self
        try DescribeDDoSGraphExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableBlackListRuleOfForwardRuleAsync(request:DisableBlackListRuleOfForwardRuleRequest,requestComplation:@escaping ExecuteResult<DisableBlackListRuleOfForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try DisableBlackListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeIpSetUsageAsync(request:DescribeIpSetUsageRequest,requestComplation:@escaping ExecuteResult<DescribeIpSetUsageResult>) throws {
        ipantiJDCloudClient = self
        try DescribeIpSetUsageExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyCCProtectionConfigOfWebRuleAsync(request:ModifyCCProtectionConfigOfWebRuleRequest,requestComplation:@escaping ExecuteResult<ModifyCCProtectionConfigOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try ModifyCCProtectionConfigOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableWhiteListRuleOfForwardRuleAsync(request:DisableWhiteListRuleOfForwardRuleRequest,requestComplation:@escaping ExecuteResult<DisableWhiteListRuleOfForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try DisableWhiteListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableCCProtectionRuleOfWebRuleAsync(request:EnableCCProtectionRuleOfWebRuleRequest,requestComplation:@escaping ExecuteResult<EnableCCProtectionRuleOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try EnableCCProtectionRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeWhiteListRulesOfWebRuleAsync(request:DescribeWhiteListRulesOfWebRuleRequest,requestComplation:@escaping ExecuteResult<DescribeWhiteListRulesOfWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeWhiteListRulesOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeWebRuleAsync(request:DescribeWebRuleRequest,requestComplation:@escaping ExecuteResult<DescribeWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeWebRuleBlackListGeoAreasAsync(request:DescribeWebRuleBlackListGeoAreasRequest,requestComplation:@escaping ExecuteResult<DescribeWebRuleBlackListGeoAreasResult>) throws {
        ipantiJDCloudClient = self
        try DescribeWebRuleBlackListGeoAreasExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createForwardRuleAsync(request:CreateForwardRuleRequest,requestComplation:@escaping ExecuteResult<CreateForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try CreateForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeVpcIpListAsync(request:DescribeVpcIpListRequest,requestComplation:@escaping ExecuteResult<DescribeVpcIpListResult>) throws {
        ipantiJDCloudClient = self
        try DescribeVpcIpListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyProtectionRuleOfForwardRuleAsync(request:ModifyProtectionRuleOfForwardRuleRequest,requestComplation:@escaping ExecuteResult<ModifyProtectionRuleOfForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try ModifyProtectionRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteWebRuleAsync(request:DeleteWebRuleRequest,requestComplation:@escaping ExecuteResult<DeleteWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DeleteWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyInstanceNameAsync(request:ModifyInstanceNameRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceNameResult>) throws {
        ipantiJDCloudClient = self
        try ModifyInstanceNameExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeForwardRuleAsync(request:DescribeForwardRuleRequest,requestComplation:@escaping ExecuteResult<DescribeForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeWhiteListRuleOfForwardRuleAsync(request:DescribeWhiteListRuleOfForwardRuleRequest,requestComplation:@escaping ExecuteResult<DescribeWhiteListRuleOfForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeWhiteListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCCGraphAsync(request:DescribeCCGraphRequest,requestComplation:@escaping ExecuteResult<DescribeCCGraphResult>) throws {
        ipantiJDCloudClient = self
        try DescribeCCGraphExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceAsync(request:DescribeInstanceRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceResult>) throws {
        ipantiJDCloudClient = self
        try DescribeInstanceExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableWebRuleCCObserverModeAsync(request:EnableWebRuleCCObserverModeRequest,requestComplation:@escaping ExecuteResult<EnableWebRuleCCObserverModeResult>) throws {
        ipantiJDCloudClient = self
        try EnableWebRuleCCObserverModeExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension IpantiJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "ipanti.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
