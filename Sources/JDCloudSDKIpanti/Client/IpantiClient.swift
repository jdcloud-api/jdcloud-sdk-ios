/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   京东云IP高防相关接口
   京东云IP高防相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore
@objc(IpantiJDCloudClient)
public class IpantiJDCloudClient:NSObject,JDCloudClient{
    
    private final var ipantiJDCloudClient:IpantiJDCloudClient!


    @objc public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        ipantiJDCloudClient = self
    }


    @objc public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "ipanti.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        ipantiJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "ipanti" + "v1"
    
    public let serviceName: String = "ipanti"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    @objc public var httpRequestProtocol: String = "https"

    @objc public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    @objc
    public func enableBlackListRuleOfForwardRuleAsync(request:EnableBlackListRuleOfForwardRuleRequest,requestComplation:@escaping (NSNumber?,EnableBlackListRuleOfForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try EnableBlackListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(EnableBlackListRuleOfForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeAlarmConfigAsync(request:DescribeAlarmConfigRequest,requestComplation:@escaping (NSNumber?,DescribeAlarmConfigResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeAlarmConfigExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeAlarmConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createIpSetAsync(request:CreateIpSetRequest,requestComplation:@escaping (NSNumber?,CreateIpSetResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try CreateIpSetExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateIpSetResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeWebRuleBlackListUsageAsync(request:DescribeWebRuleBlackListUsageRequest,requestComplation:@escaping (NSNumber?,DescribeWebRuleBlackListUsageResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeWebRuleBlackListUsageExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeWebRuleBlackListUsageResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeProtectionRuleOfForwardRuleAsync(request:DescribeProtectionRuleOfForwardRuleRequest,requestComplation:@escaping (NSNumber?,DescribeProtectionRuleOfForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeProtectionRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeProtectionRuleOfForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createCCProtectionRuleOfWebRuleAsync(request:CreateCCProtectionRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,CreateCCProtectionRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try CreateCCProtectionRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateCCProtectionRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func modifyEPBAsync(request:ModifyEPBRequest,requestComplation:@escaping (NSNumber?,ModifyEPBResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try ModifyEPBExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ModifyEPBResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCCProtectionDefaultConfigOfWebRuleAsync(request:DescribeCCProtectionDefaultConfigOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DescribeCCProtectionDefaultConfigOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeCCProtectionDefaultConfigOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCCProtectionDefaultConfigOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func modifyWhiteListRuleOfWebRuleAsync(request:ModifyWhiteListRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,ModifyWhiteListRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try ModifyWhiteListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ModifyWhiteListRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func modifyWebRuleAsync(request:ModifyWebRuleRequest,requestComplation:@escaping (NSNumber?,ModifyWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try ModifyWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ModifyWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func enableWebRuleBlackListAsync(request:EnableWebRuleBlackListRequest,requestComplation:@escaping (NSNumber?,EnableWebRuleBlackListResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try EnableWebRuleBlackListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(EnableWebRuleBlackListResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func enableBlackListRuleOfWebRuleAsync(request:EnableBlackListRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,EnableBlackListRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try EnableBlackListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(EnableBlackListRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeIpSetsAsync(request:DescribeIpSetsRequest,requestComplation:@escaping (NSNumber?,DescribeIpSetsResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeIpSetsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeIpSetsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func enableWhiteListRuleOfWebRuleAsync(request:EnableWhiteListRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,EnableWhiteListRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try EnableWhiteListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(EnableWhiteListRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteWhiteListRuleOfWebRuleAsync(request:DeleteWhiteListRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DeleteWhiteListRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DeleteWhiteListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteWhiteListRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func disableWebRuleWhiteListAsync(request:DisableWebRuleWhiteListRequest,requestComplation:@escaping (NSNumber?,DisableWebRuleWhiteListResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DisableWebRuleWhiteListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DisableWebRuleWhiteListResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeIpSetAsync(request:DescribeIpSetRequest,requestComplation:@escaping (NSNumber?,DescribeIpSetResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeIpSetExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeIpSetResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteForwardRuleAsync(request:DeleteForwardRuleRequest,requestComplation:@escaping (NSNumber?,DeleteForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DeleteForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func switchWebRuleProtectAsync(request:SwitchWebRuleProtectRequest,requestComplation:@escaping (NSNumber?,SwitchWebRuleProtectResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try SwitchWebRuleProtectExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(SwitchWebRuleProtectResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeInstancesAsync(request:DescribeInstancesRequest,requestComplation:@escaping (NSNumber?,DescribeInstancesResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeInstancesExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeInstancesResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createInstanceAsync(request:CreateInstanceRequest,requestComplation:@escaping (NSNumber?,CreateInstanceResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try CreateInstanceExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateInstanceResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCpsIpListAsync(request:DescribeCpsIpListRequest,requestComplation:@escaping (NSNumber?,DescribeCpsIpListResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeCpsIpListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCpsIpListResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCCAttackLogDetailsAsync(request:DescribeCCAttackLogDetailsRequest,requestComplation:@escaping (NSNumber?,DescribeCCAttackLogDetailsResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeCCAttackLogDetailsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCCAttackLogDetailsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func switchForwardRuleOriginAsync(request:SwitchForwardRuleOriginRequest,requestComplation:@escaping (NSNumber?,SwitchForwardRuleOriginResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try SwitchForwardRuleOriginExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(SwitchForwardRuleOriginResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeBlackListRuleOfForwardRuleAsync(request:DescribeBlackListRuleOfForwardRuleRequest,requestComplation:@escaping (NSNumber?,DescribeBlackListRuleOfForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeBlackListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeBlackListRuleOfForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeAttackTypeCountAsync(request:DescribeAttackTypeCountRequest,requestComplation:@escaping (NSNumber?,DescribeAttackTypeCountResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeAttackTypeCountExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeAttackTypeCountResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func disableCCProtectionRuleOfWebRuleAsync(request:DisableCCProtectionRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DisableCCProtectionRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DisableCCProtectionRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DisableCCProtectionRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func enableWebRuleCCAsync(request:EnableWebRuleCCRequest,requestComplation:@escaping (NSNumber?,EnableWebRuleCCResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try EnableWebRuleCCExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(EnableWebRuleCCResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeGeoAreasAsync(request:DescribeGeoAreasRequest,requestComplation:@escaping (NSNumber?,DescribeGeoAreasResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeGeoAreasExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeGeoAreasResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCCAttackLogsAsync(request:DescribeCCAttackLogsRequest,requestComplation:@escaping (NSNumber?,DescribeCCAttackLogsResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeCCAttackLogsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCCAttackLogsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteCCProtectionRuleOfWebRuleAsync(request:DeleteCCProtectionRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DeleteCCProtectionRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DeleteCCProtectionRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteCCProtectionRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func disableWebRuleCCObserverModeAsync(request:DisableWebRuleCCObserverModeRequest,requestComplation:@escaping (NSNumber?,DisableWebRuleCCObserverModeResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DisableWebRuleCCObserverModeExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DisableWebRuleCCObserverModeResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func modifyForwardRuleAsync(request:ModifyForwardRuleRequest,requestComplation:@escaping (NSNumber?,ModifyForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try ModifyForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ModifyForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeNameListAsync(request:DescribeNameListRequest,requestComplation:@escaping (NSNumber?,DescribeNameListResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeNameListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeNameListResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeFwdGraphAsync(request:DescribeFwdGraphRequest,requestComplation:@escaping (NSNumber?,DescribeFwdGraphResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeFwdGraphExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeFwdGraphResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeWebRulesAsync(request:DescribeWebRulesRequest,requestComplation:@escaping (NSNumber?,DescribeWebRulesResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeWebRulesExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeWebRulesResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeForwardRulesAsync(request:DescribeForwardRulesRequest,requestComplation:@escaping (NSNumber?,DescribeForwardRulesResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeForwardRulesExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeForwardRulesResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func modifyBlackListRuleOfWebRuleAsync(request:ModifyBlackListRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,ModifyBlackListRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try ModifyBlackListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ModifyBlackListRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteIpSetAsync(request:DeleteIpSetRequest,requestComplation:@escaping (NSNumber?,DeleteIpSetResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DeleteIpSetExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteIpSetResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func enableWebRuleWhiteListAsync(request:EnableWebRuleWhiteListRequest,requestComplation:@escaping (NSNumber?,EnableWebRuleWhiteListResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try EnableWebRuleWhiteListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(EnableWebRuleWhiteListResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeWebRuleWhiteListUsageAsync(request:DescribeWebRuleWhiteListUsageRequest,requestComplation:@escaping (NSNumber?,DescribeWebRuleWhiteListUsageResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeWebRuleWhiteListUsageExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeWebRuleWhiteListUsageResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeProtectionStatisticsAsync(request:DescribeProtectionStatisticsRequest,requestComplation:@escaping (NSNumber?,DescribeProtectionStatisticsResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeProtectionStatisticsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeProtectionStatisticsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func modifyCertInfoAsync(request:ModifyCertInfoRequest,requestComplation:@escaping (NSNumber?,ModifyCertInfoResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try ModifyCertInfoExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ModifyCertInfoResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func modifyAlarmConfigAsync(request:ModifyAlarmConfigRequest,requestComplation:@escaping (NSNumber?,ModifyAlarmConfigResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try ModifyAlarmConfigExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ModifyAlarmConfigResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeWebRuleWhiteListGeoAreasAsync(request:DescribeWebRuleWhiteListGeoAreasRequest,requestComplation:@escaping (NSNumber?,DescribeWebRuleWhiteListGeoAreasResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeWebRuleWhiteListGeoAreasExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeWebRuleWhiteListGeoAreasResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func modifyBlackListRuleOfForwardRuleAsync(request:ModifyBlackListRuleOfForwardRuleRequest,requestComplation:@escaping (NSNumber?,ModifyBlackListRuleOfForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try ModifyBlackListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ModifyBlackListRuleOfForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func disableWebRuleBlackListAsync(request:DisableWebRuleBlackListRequest,requestComplation:@escaping (NSNumber?,DisableWebRuleBlackListResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DisableWebRuleBlackListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DisableWebRuleBlackListResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func switchForwardRuleProtectAsync(request:SwitchForwardRuleProtectRequest,requestComplation:@escaping (NSNumber?,SwitchForwardRuleProtectResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try SwitchForwardRuleProtectExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(SwitchForwardRuleProtectResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteBlackListRuleOfWebRuleAsync(request:DeleteBlackListRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DeleteBlackListRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DeleteBlackListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteBlackListRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCCProtectionRuleOfWebRuleAsync(request:DescribeCCProtectionRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DescribeCCProtectionRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeCCProtectionRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCCProtectionRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func disableBlackListRuleOfWebRuleAsync(request:DisableBlackListRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DisableBlackListRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DisableBlackListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DisableBlackListRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func switchWebRuleOriginAsync(request:SwitchWebRuleOriginRequest,requestComplation:@escaping (NSNumber?,SwitchWebRuleOriginResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try SwitchWebRuleOriginExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(SwitchWebRuleOriginResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeWhiteListRuleOfWebRuleAsync(request:DescribeWhiteListRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DescribeWhiteListRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeWhiteListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeWhiteListRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeBlackListRuleOfWebRuleAsync(request:DescribeBlackListRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DescribeBlackListRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeBlackListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeBlackListRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeAttackStatisticsAsync(request:DescribeAttackStatisticsRequest,requestComplation:@escaping (NSNumber?,DescribeAttackStatisticsResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeAttackStatisticsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeAttackStatisticsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeBlackListRulesOfWebRuleAsync(request:DescribeBlackListRulesOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DescribeBlackListRulesOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeBlackListRulesOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeBlackListRulesOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeDDoSAttackLogsAsync(request:DescribeDDoSAttackLogsRequest,requestComplation:@escaping (NSNumber?,DescribeDDoSAttackLogsResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeDDoSAttackLogsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeDDoSAttackLogsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func enableWhiteListRuleOfForwardRuleAsync(request:EnableWhiteListRuleOfForwardRuleRequest,requestComplation:@escaping (NSNumber?,EnableWhiteListRuleOfForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try EnableWhiteListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(EnableWhiteListRuleOfForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func disableWhiteListRuleOfWebRuleAsync(request:DisableWhiteListRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DisableWhiteListRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DisableWhiteListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DisableWhiteListRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func modifyWhiteListRuleOfForwardRuleAsync(request:ModifyWhiteListRuleOfForwardRuleRequest,requestComplation:@escaping (NSNumber?,ModifyWhiteListRuleOfForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try ModifyWhiteListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ModifyWhiteListRuleOfForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createWebRuleAsync(request:CreateWebRuleRequest,requestComplation:@escaping (NSNumber?,CreateWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try CreateWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func modifyCCProtectionRuleOfWebRuleAsync(request:ModifyCCProtectionRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,ModifyCCProtectionRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try ModifyCCProtectionRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ModifyCCProtectionRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCCProtectionConfigOfWebRuleAsync(request:DescribeCCProtectionConfigOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DescribeCCProtectionConfigOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeCCProtectionConfigOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCCProtectionConfigOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCCProtectionRulesOfWebRuleAsync(request:DescribeCCProtectionRulesOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DescribeCCProtectionRulesOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeCCProtectionRulesOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCCProtectionRulesOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func disableWebRuleCCAsync(request:DisableWebRuleCCRequest,requestComplation:@escaping (NSNumber?,DisableWebRuleCCResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DisableWebRuleCCExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DisableWebRuleCCResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createWhiteListRuleOfWebRuleAsync(request:CreateWhiteListRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,CreateWhiteListRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try CreateWhiteListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateWhiteListRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createBlackListRuleOfWebRuleAsync(request:CreateBlackListRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,CreateBlackListRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try CreateBlackListRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateBlackListRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func checkNameAsync(request:CheckNameRequest,requestComplation:@escaping (NSNumber?,CheckNameResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try CheckNameExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CheckNameResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeDDoSGraphAsync(request:DescribeDDoSGraphRequest,requestComplation:@escaping (NSNumber?,DescribeDDoSGraphResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeDDoSGraphExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeDDoSGraphResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func disableBlackListRuleOfForwardRuleAsync(request:DisableBlackListRuleOfForwardRuleRequest,requestComplation:@escaping (NSNumber?,DisableBlackListRuleOfForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DisableBlackListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DisableBlackListRuleOfForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeIpSetUsageAsync(request:DescribeIpSetUsageRequest,requestComplation:@escaping (NSNumber?,DescribeIpSetUsageResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeIpSetUsageExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeIpSetUsageResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func modifyCCProtectionConfigOfWebRuleAsync(request:ModifyCCProtectionConfigOfWebRuleRequest,requestComplation:@escaping (NSNumber?,ModifyCCProtectionConfigOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try ModifyCCProtectionConfigOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ModifyCCProtectionConfigOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func disableWhiteListRuleOfForwardRuleAsync(request:DisableWhiteListRuleOfForwardRuleRequest,requestComplation:@escaping (NSNumber?,DisableWhiteListRuleOfForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DisableWhiteListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DisableWhiteListRuleOfForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func enableCCProtectionRuleOfWebRuleAsync(request:EnableCCProtectionRuleOfWebRuleRequest,requestComplation:@escaping (NSNumber?,EnableCCProtectionRuleOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try EnableCCProtectionRuleOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(EnableCCProtectionRuleOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeWhiteListRulesOfWebRuleAsync(request:DescribeWhiteListRulesOfWebRuleRequest,requestComplation:@escaping (NSNumber?,DescribeWhiteListRulesOfWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeWhiteListRulesOfWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeWhiteListRulesOfWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeWebRuleAsync(request:DescribeWebRuleRequest,requestComplation:@escaping (NSNumber?,DescribeWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeWebRuleBlackListGeoAreasAsync(request:DescribeWebRuleBlackListGeoAreasRequest,requestComplation:@escaping (NSNumber?,DescribeWebRuleBlackListGeoAreasResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeWebRuleBlackListGeoAreasExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeWebRuleBlackListGeoAreasResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createForwardRuleAsync(request:CreateForwardRuleRequest,requestComplation:@escaping (NSNumber?,CreateForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try CreateForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeVpcIpListAsync(request:DescribeVpcIpListRequest,requestComplation:@escaping (NSNumber?,DescribeVpcIpListResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeVpcIpListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeVpcIpListResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func modifyProtectionRuleOfForwardRuleAsync(request:ModifyProtectionRuleOfForwardRuleRequest,requestComplation:@escaping (NSNumber?,ModifyProtectionRuleOfForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try ModifyProtectionRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ModifyProtectionRuleOfForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteWebRuleAsync(request:DeleteWebRuleRequest,requestComplation:@escaping (NSNumber?,DeleteWebRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DeleteWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteWebRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func modifyInstanceNameAsync(request:ModifyInstanceNameRequest,requestComplation:@escaping (NSNumber?,ModifyInstanceNameResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try ModifyInstanceNameExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(ModifyInstanceNameResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeForwardRuleAsync(request:DescribeForwardRuleRequest,requestComplation:@escaping (NSNumber?,DescribeForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeWhiteListRuleOfForwardRuleAsync(request:DescribeWhiteListRuleOfForwardRuleRequest,requestComplation:@escaping (NSNumber?,DescribeWhiteListRuleOfForwardRuleResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeWhiteListRuleOfForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeWhiteListRuleOfForwardRuleResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeCCGraphAsync(request:DescribeCCGraphRequest,requestComplation:@escaping (NSNumber?,DescribeCCGraphResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeCCGraphExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeCCGraphResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func describeInstanceAsync(request:DescribeInstanceRequest,requestComplation:@escaping (NSNumber?,DescribeInstanceResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try DescribeInstanceExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DescribeInstanceResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func enableWebRuleCCObserverModeAsync(request:EnableWebRuleCCObserverModeRequest,requestComplation:@escaping (NSNumber?,EnableWebRuleCCObserverModeResponse?,NSError?,NSString?)->()) throws {
        ipantiJDCloudClient = self
        try EnableWebRuleCCObserverModeExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(EnableWebRuleCCObserverModeResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }

    
}


public extension IpantiJDCloudClient{

    @objc convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "ipanti.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
