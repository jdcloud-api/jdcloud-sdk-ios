/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   File-System
   文件系统相关接口。

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
///  描述一个文件系统
public class MountTarget:NSObject,Codable{
    /// 文件系统ID
    var fileSystemId:String?
    /// ipv4地址
    var ipAddress:String?
    /// 挂载目标状态
    var status:String?
    /// 挂载目标ID
    var mountTargetId:String?
    /// 子网ID
    var subnetId:String?
    /// vpcID
    var vpcId:String?
    /// 创建时间
    var createTime:String?
    /// dns名称
    var dnsName:String?



    public override init(){
            super.init()
    }

    enum MountTargetCodingKeys: String, CodingKey {
        case fileSystemId
        case ipAddress
        case status
        case mountTargetId
        case subnetId
        case vpcId
        case createTime
        case dnsName
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: MountTargetCodingKeys.self)
        if decoderContainer.contains(.fileSystemId)
        {
            self.fileSystemId = try decoderContainer.decode(String?.self, forKey: .fileSystemId)
        }
        if decoderContainer.contains(.ipAddress)
        {
            self.ipAddress = try decoderContainer.decode(String?.self, forKey: .ipAddress)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.mountTargetId)
        {
            self.mountTargetId = try decoderContainer.decode(String?.self, forKey: .mountTargetId)
        }
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.dnsName)
        {
            self.dnsName = try decoderContainer.decode(String?.self, forKey: .dnsName)
        }
    }
}
public extension MountTarget{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: MountTargetCodingKeys.self)
         try encoderContainer.encode(fileSystemId, forKey: .fileSystemId)
         try encoderContainer.encode(ipAddress, forKey: .ipAddress)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(mountTargetId, forKey: .mountTargetId)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(dnsName, forKey: .dnsName)
    }
}
///  tagFilter
public class TagFilter:NSObject,Codable{
    /// Tag键
    /// Required:true
    var key:String
    /// Tag值
    /// Required:true
    var values:[String?]?



    public  init(key:String,values:[String?]?){
             self.key = key
             self.values = values
    }

    enum TagFilterCodingKeys: String, CodingKey {
        case key
        case values
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagFilterCodingKeys.self)
        self.key = try decoderContainer.decode(String.self, forKey: .key)
        self.values = try decoderContainer.decode([String?]?.self, forKey: .values)
    }
}
public extension TagFilter{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagFilterCodingKeys.self)
         try encoderContainer.encode(key, forKey: .key)
         try encoderContainer.encode(values, forKey: .values)
    }
}
///  tag
public class Tag:NSObject,Codable{
    /// Tag键
    var key:String?
    /// Tag值
    var value:String?



    public override init(){
            super.init()
    }

    enum TagCodingKeys: String, CodingKey {
        case key
        case value
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TagCodingKeys.self)
        if decoderContainer.contains(.key)
        {
            self.key = try decoderContainer.decode(String?.self, forKey: .key)
        }
        if decoderContainer.contains(.value)
        {
            self.value = try decoderContainer.decode(String?.self, forKey: .value)
        }
    }
}
public extension Tag{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TagCodingKeys.self)
         try encoderContainer.encode(key, forKey: .key)
         try encoderContainer.encode(value, forKey: .value)
    }
}
///  描述一个文件系统
public class FileSystem:NSObject,Codable{
    /// 文件系统ID
    var fileSystemId:String?
    /// 文件系统名称(参数规则：不可为空，只支持中文、数字、大小写字母、英文下划线“_”及中划线“-”，且不能超过32字符)
    var name:String?
    /// 文件系统描述(参数规则：不能超过256字符)
    var descriptionValue:String?
    /// 挂载目标个数
    var numberOfMountTargets:Int?
    /// 最近一次统计的文件系统的使用量单位为:Byte
    var sizeByte:SizeByte?
    /// 文件系统状态(创建中:creating、可用:available、使用中:in-use、删除中:deleting)
    var status:String?
    /// 文件系统类型(通用型:gp1,容量型:std1)
    var fileSystemType:String?
    /// 创建时间
    var createTime:String?
    /// dns名称
    var dnsName:String?
    /// Tag信息
    var tags:[Tag?]?



    public override init(){
            super.init()
    }

    enum FileSystemCodingKeys: String, CodingKey {
        case fileSystemId
        case name
        case descriptionValue = "description"
        case numberOfMountTargets
        case sizeByte
        case status
        case fileSystemType
        case createTime
        case dnsName
        case tags
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: FileSystemCodingKeys.self)
        if decoderContainer.contains(.fileSystemId)
        {
            self.fileSystemId = try decoderContainer.decode(String?.self, forKey: .fileSystemId)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.numberOfMountTargets)
        {
            self.numberOfMountTargets = try decoderContainer.decode(Int?.self, forKey: .numberOfMountTargets)
        }
        if decoderContainer.contains(.sizeByte)
        {
            self.sizeByte = try decoderContainer.decode(SizeByte?.self, forKey: .sizeByte)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.fileSystemType)
        {
            self.fileSystemType = try decoderContainer.decode(String?.self, forKey: .fileSystemType)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.dnsName)
        {
            self.dnsName = try decoderContainer.decode(String?.self, forKey: .dnsName)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([Tag?]?.self, forKey: .tags)
        }
    }
}
public extension FileSystem{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: FileSystemCodingKeys.self)
         try encoderContainer.encode(fileSystemId, forKey: .fileSystemId)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(numberOfMountTargets, forKey: .numberOfMountTargets)
         try encoderContainer.encode(sizeByte, forKey: .sizeByte)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(fileSystemType, forKey: .fileSystemType)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(dnsName, forKey: .dnsName)
         try encoderContainer.encode(tags, forKey: .tags)
    }
}
///  描述文件系统某一时刻的使用量
public class SizeByte:NSObject,Codable{
    /// 时间戳
    var timestamp:String?
    /// 文件系统使用量，单位为:Byte
    var value:Int?



    public override init(){
            super.init()
    }

    enum SizeByteCodingKeys: String, CodingKey {
        case timestamp
        case value
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SizeByteCodingKeys.self)
        if decoderContainer.contains(.timestamp)
        {
            self.timestamp = try decoderContainer.decode(String?.self, forKey: .timestamp)
        }
        if decoderContainer.contains(.value)
        {
            self.value = try decoderContainer.decode(Int?.self, forKey: .value)
        }
    }
}
public extension SizeByte{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SizeByteCodingKeys.self)
         try encoderContainer.encode(timestamp, forKey: .timestamp)
         try encoderContainer.encode(value, forKey: .value)
    }
}
