/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  描述一个文件系统
@objc(FileSystem)
public class FileSystem:NSObject,Codable{
    /// 文件系统ID
    var fileSystemId:String?
    /// 文件系统名称(参数规则：不可为空，只支持中文、数字、大小写字母、英文下划线“_”及中划线“-”，且不能超过32字符)
    var name:String?
    /// 文件系统描述(参数规则：不能超过256字符)
    var descriptionValue:String?
    /// 挂载目标个数
    var numberOfMountTargets:Int?
    /// 最近一次统计的文件系统的使用量单位为:Byte
    var sizeByte:SizeByte?
    /// 文件系统状态(创建中:creating、可用:available、使用中:in-use、删除中:deleting)
    var status:String?
    /// 创建时间
    var createTime:String?
    /// dns名称
    var dnsName:String?



    public override init(){
            super.init()
    }

    enum FileSystemCodingKeys: String, CodingKey {
        case fileSystemId
        case name
        case descriptionValue = "description"
        case numberOfMountTargets
        case sizeByte
        case status
        case createTime
        case dnsName
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: FileSystemCodingKeys.self)
        if decoderContainer.contains(.fileSystemId)
        {
            self.fileSystemId = try decoderContainer.decode(String?.self, forKey: .fileSystemId)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.numberOfMountTargets)
        {
            self.numberOfMountTargets = try decoderContainer.decode(Int?.self, forKey: .numberOfMountTargets)
        }
        if decoderContainer.contains(.sizeByte)
        {
            self.sizeByte = try decoderContainer.decode(SizeByte?.self, forKey: .sizeByte)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.dnsName)
        {
            self.dnsName = try decoderContainer.decode(String?.self, forKey: .dnsName)
        }
    }
}
public extension FileSystem{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: FileSystemCodingKeys.self)
         try encoderContainer.encode(fileSystemId, forKey: .fileSystemId)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(numberOfMountTargets, forKey: .numberOfMountTargets)
         try encoderContainer.encode(sizeByte, forKey: .sizeByte)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(dnsName, forKey: .dnsName)
    }
}
