/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  描述一个文件系统
@objc(MountTarget)
public class MountTarget:NSObject,Codable{
    /// 文件系统ID
    var fileSystemId:String?
    /// ipv4地址
    var ipAddress:String?
    /// 挂载目标状态
    var status:String?
    /// 挂载目标ID
    var mountTargetId:String?
    /// 子网ID
    var subnetId:String?
    /// vpcID
    var vpcId:String?
    /// 创建时间
    var createTime:String?
    /// dns名称
    var dnsName:String?



    public override init(){
            super.init()
    }

    enum MountTargetCodingKeys: String, CodingKey {
        case fileSystemId
        case ipAddress
        case status
        case mountTargetId
        case subnetId
        case vpcId
        case createTime
        case dnsName
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: MountTargetCodingKeys.self)
        if decoderContainer.contains(.fileSystemId)
        {
            self.fileSystemId = try decoderContainer.decode(String?.self, forKey: .fileSystemId)
        }
        if decoderContainer.contains(.ipAddress)
        {
            self.ipAddress = try decoderContainer.decode(String?.self, forKey: .ipAddress)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.mountTargetId)
        {
            self.mountTargetId = try decoderContainer.decode(String?.self, forKey: .mountTargetId)
        }
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.dnsName)
        {
            self.dnsName = try decoderContainer.decode(String?.self, forKey: .dnsName)
        }
    }
}
public extension MountTarget{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: MountTargetCodingKeys.self)
         try encoderContainer.encode(fileSystemId, forKey: .fileSystemId)
         try encoderContainer.encode(ipAddress, forKey: .ipAddress)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(mountTargetId, forKey: .mountTargetId)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(dnsName, forKey: .dnsName)
    }
}
