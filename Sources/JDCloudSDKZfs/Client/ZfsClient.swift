/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   CFS的API
   CFS(Cloud-File-Service)的API包含CFS相关接口。

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class ZfsJDCloudClient:NSObject,JDCloudClient{
    
    private final var zfsJDCloudClient:ZfsJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        zfsJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "cfs.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        zfsJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "zfs/" + "v1"
    
    public let serviceName: String = "zfs"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func createMountTargetAsync(request:CreateMountTargetRequest,requestComplation:@escaping ExecuteResult<CreateMountTargetResult>) throws {
        zfsJDCloudClient = self
        try CreateMountTargetExecutor(jdCloudClient: zfsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createFileSystemAsync(request:CreateFileSystemRequest,requestComplation:@escaping ExecuteResult<CreateFileSystemResult>) throws {
        zfsJDCloudClient = self
        try CreateFileSystemExecutor(jdCloudClient: zfsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeFileSystemAsync(request:DescribeFileSystemRequest,requestComplation:@escaping ExecuteResult<DescribeFileSystemResult>) throws {
        zfsJDCloudClient = self
        try DescribeFileSystemExecutor(jdCloudClient: zfsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteMountTargetAsync(request:DeleteMountTargetRequest,requestComplation:@escaping ExecuteResult<DeleteMountTargetResult>) throws {
        zfsJDCloudClient = self
        try DeleteMountTargetExecutor(jdCloudClient: zfsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeFileSystemsAsync(request:DescribeFileSystemsRequest,requestComplation:@escaping ExecuteResult<DescribeFileSystemsResult>) throws {
        zfsJDCloudClient = self
        try DescribeFileSystemsExecutor(jdCloudClient: zfsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteFileSystemAsync(request:DeleteFileSystemRequest,requestComplation:@escaping ExecuteResult<DeleteFileSystemResult>) throws {
        zfsJDCloudClient = self
        try DeleteFileSystemExecutor(jdCloudClient: zfsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyFileSystemAttributeAsync(request:ModifyFileSystemAttributeRequest,requestComplation:@escaping ExecuteResult<ModifyFileSystemAttributeResult>) throws {
        zfsJDCloudClient = self
        try ModifyFileSystemAttributeExecutor(jdCloudClient: zfsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeMountTargetsAsync(request:DescribeMountTargetsRequest,requestComplation:@escaping ExecuteResult<DescribeMountTargetsResult>) throws {
        zfsJDCloudClient = self
        try DescribeMountTargetsExecutor(jdCloudClient: zfsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeMountTargetAsync(request:DescribeMountTargetRequest,requestComplation:@escaping ExecuteResult<DescribeMountTargetResult>) throws {
        zfsJDCloudClient = self
        try DescribeMountTargetExecutor(jdCloudClient: zfsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension ZfsJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "cfs.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
