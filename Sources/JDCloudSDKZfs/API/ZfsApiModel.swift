/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   File-System
   文件系统相关接口。

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon


///  - 为一个文件系统创建一个挂载目标。通过这个挂载目标,你可以挂载将一个文件系统挂载到主机实例上。
      ///       /// - 创建一个挂载目标，为这个挂载目标分配一个Id
      ///       /// 
public class CreateMountTargetRequest:JdCloudRequest
{
    /// 创建挂载目标的文件系统
    var fileSystemId:String

    /// 子网id
    var subnetId:String

    /// vpcId
    var vpcId:String

    /// 安全组id
    var securityGroupId:String?

    /// 幂等性参数(只支持数字、大小写字母，且不能超过64字符)
    var clientToken:String


    public init(regionId: String,fileSystemId:String,subnetId:String,vpcId:String,clientToken:String){
        self.fileSystemId = fileSystemId
        self.subnetId = subnetId
        self.vpcId = vpcId
        self.clientToken = clientToken
        super.init(regionId: regionId)
    }


    enum CreateMountTargetRequestRequestCodingKeys: String, CodingKey {
        case fileSystemId
        case subnetId
        case vpcId
        case securityGroupId
        case clientToken
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateMountTargetRequestRequestCodingKeys.self)
        try encoderContainer.encode(fileSystemId, forKey: .fileSystemId)
        try encoderContainer.encode(subnetId, forKey: .subnetId)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(securityGroupId, forKey: .securityGroupId)
        try encoderContainer.encode(clientToken, forKey: .clientToken)

    }
}

public class DeleteMountTargetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteMountTargetResult?;

    enum DeleteMountTargetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteMountTargetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteMountTargetResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteMountTargetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteMountTargetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateMountTargetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateMountTargetResult?;

    enum CreateMountTargetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateMountTargetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateMountTargetResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateMountTargetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateMountTargetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  -   删除挂载目标的同时会删除相关的网络接口。
      ///       /// 
public class DeleteMountTargetRequest:JdCloudRequest
{
    /// 挂载目标ID
    var mountTargetId:String


    public init(regionId: String,mountTargetId:String){
        self.mountTargetId = mountTargetId
        super.init(regionId: regionId)
    }


    enum DeleteMountTargetRequestRequestCodingKeys: String, CodingKey {
        case mountTargetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteMountTargetRequestRequestCodingKeys.self)
        try encoderContainer.encode(mountTargetId, forKey: .mountTargetId)

    }
}

public class DescribeMountTargetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMountTargetResult?;

    enum DescribeMountTargetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMountTargetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMountTargetResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMountTargetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMountTargetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// -   查询挂载目标列表。
      ///       ///  
public class DescribeMountTargetsResult:NSObject,JdCloudResult
{
    /// 挂载目标信息列表
    var mountTargets:[MountTarget?]?

    /// 查询的挂载目标数目
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeMountTargetsResultCodingKeys: String, CodingKey {
        case mountTargets
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMountTargetsResultCodingKeys.self)
        if decoderContainer.contains(.mountTargets)
        {
            self.mountTargets = try decoderContainer.decode([MountTarget?]?.self, forKey: .mountTargets)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeMountTargetsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMountTargetsResultCodingKeys.self)
        try encoderContainer.encode(mountTargets, forKey: .mountTargets)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  查询挂载目标详情
public class DescribeMountTargetRequest:JdCloudRequest
{
    /// 挂载目标ID
    var mountTargetId:String


    public init(regionId: String,mountTargetId:String){
        self.mountTargetId = mountTargetId
        super.init(regionId: regionId)
    }


    enum DescribeMountTargetRequestRequestCodingKeys: String, CodingKey {
        case mountTargetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMountTargetRequestRequestCodingKeys.self)
        try encoderContainer.encode(mountTargetId, forKey: .mountTargetId)

    }
}

/// - 为一个文件系统创建一个挂载目标。通过这个挂载目标,你可以挂载将一个文件系统挂载到主机实例上。
      ///       /// - 创建一个挂载目标，为这个挂载目标分配一个Id
      ///       ///  
public class CreateMountTargetResult:NSObject,JdCloudResult
{
    /// 挂载目标 ID
    var mountTargetId:String?



    public override init(){
        super.init()
    }

    enum CreateMountTargetResultCodingKeys: String, CodingKey {
        case mountTargetId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateMountTargetResultCodingKeys.self)
        if decoderContainer.contains(.mountTargetId)
        {
            self.mountTargetId = try decoderContainer.decode(String?.self, forKey: .mountTargetId)
        }
    }
}
public extension CreateMountTargetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateMountTargetResultCodingKeys.self)
        try encoderContainer.encode(mountTargetId, forKey: .mountTargetId)
    }
}
public class DescribeMountTargetsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMountTargetsResult?;

    enum DescribeMountTargetsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMountTargetsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMountTargetsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMountTargetsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMountTargetsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  -   查询挂载目标列表。
      ///       /// 
public class DescribeMountTargetsRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// fileSystemId - 文件系统ID，精确匹配，支持多个
      /// mountTargetId - 挂载目标ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeMountTargetsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMountTargetsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// -   删除挂载目标的同时会删除相关的网络接口。
      ///       ///  
public class DeleteMountTargetResult:NSObject,JdCloudResult
{
}
/// 查询挂载目标详情 
public class DescribeMountTargetResult:NSObject,JdCloudResult
{
    /// MountTarget
    var mountTarget:MountTarget?



    public override init(){
        super.init()
    }

    enum DescribeMountTargetResultCodingKeys: String, CodingKey {
        case mountTarget
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMountTargetResultCodingKeys.self)
        if decoderContainer.contains(.mountTarget)
        {
            self.mountTarget = try decoderContainer.decode(MountTarget?.self, forKey: .mountTarget)
        }
    }
}
public extension DescribeMountTargetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMountTargetResultCodingKeys.self)
        try encoderContainer.encode(mountTarget, forKey: .mountTarget)
    }
}
public class DescribeFileSystemResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeFileSystemResult?;

    enum DescribeFileSystemResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeFileSystemResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeFileSystemResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeFileSystemResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeFileSystemResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  -   查询文件系统列表。
      ///       /// -   filters多个过滤条件之间是逻辑与(AND)，每个条件内部的多个取值是逻辑或(OR)
      ///       /// 
public class DescribeFileSystemsRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// Tag筛选条件
    var tags:[TagFilter?]?

    /// fileSystemId - 文件系统ID，精确匹配，支持多个
      /// name - 文件系统名称，模糊匹配，支持单个
      /// status - 文件系统状态，精确匹配，支持多个 FileSystem Status/creating、available、in-use
      /// 
    var filters:[Filter?]?




    enum DescribeFileSystemsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case tags
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeFileSystemsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(tags, forKey: .tags)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 修改文件系统属性(name 和 description 必须要指定一个) 
public class ModifyFileSystemAttributeResult:NSObject,JdCloudResult
{
}
public class CreateFileSystemResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateFileSystemResult?;

    enum CreateFileSystemResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateFileSystemResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateFileSystemResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateFileSystemResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateFileSystemResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// - 创建一个新的文件系统，为这个文件系统分配一个Id
      ///       ///  
public class CreateFileSystemResult:NSObject,JdCloudResult
{
    /// 文件系统 ID
    var fileSystemId:String?



    public override init(){
        super.init()
    }

    enum CreateFileSystemResultCodingKeys: String, CodingKey {
        case fileSystemId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateFileSystemResultCodingKeys.self)
        if decoderContainer.contains(.fileSystemId)
        {
            self.fileSystemId = try decoderContainer.decode(String?.self, forKey: .fileSystemId)
        }
    }
}
public extension CreateFileSystemResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateFileSystemResultCodingKeys.self)
        try encoderContainer.encode(fileSystemId, forKey: .fileSystemId)
    }
}
public class DescribeFileSystemsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeFileSystemsResult?;

    enum DescribeFileSystemsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeFileSystemsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeFileSystemsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeFileSystemsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeFileSystemsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteFileSystemResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteFileSystemResult?;

    enum DeleteFileSystemResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteFileSystemResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteFileSystemResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteFileSystemResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteFileSystemResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询文件系统详情 
public class DescribeFileSystemResult:NSObject,JdCloudResult
{
    /// FileSystem
    var fileSystem:FileSystem?



    public override init(){
        super.init()
    }

    enum DescribeFileSystemResultCodingKeys: String, CodingKey {
        case fileSystem
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeFileSystemResultCodingKeys.self)
        if decoderContainer.contains(.fileSystem)
        {
            self.fileSystem = try decoderContainer.decode(FileSystem?.self, forKey: .fileSystem)
        }
    }
}
public extension DescribeFileSystemResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeFileSystemResultCodingKeys.self)
        try encoderContainer.encode(fileSystem, forKey: .fileSystem)
    }
}

///  - 创建一个新的文件系统，为这个文件系统分配一个Id
      ///       /// 
public class CreateFileSystemRequest:JdCloudRequest
{
    /// 文件系统名称
    var name:String

    /// 文件系统描述
    var descriptionValue:String

    /// 幂等性参数(只支持数字、大小写字母，且不能超过64字符)
    var clientToken:String

    /// 文件系统类型(通用型:gp1,容量型:std1),默认为通用型
    var fileSystemType:String?


    public init(regionId: String,name:String,descriptionValue:String,clientToken:String){
        self.name = name
        self.descriptionValue = descriptionValue
        self.clientToken = clientToken
        super.init(regionId: regionId)
    }


    enum CreateFileSystemRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case clientToken
        case fileSystemType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateFileSystemRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(fileSystemType, forKey: .fileSystemType)

    }
}

/// -   查询文件系统列表。
      ///       /// -   filters多个过滤条件之间是逻辑与(AND)，每个条件内部的多个取值是逻辑或(OR)
      ///       ///  
public class DescribeFileSystemsResult:NSObject,JdCloudResult
{
    /// 文件系统信息列表
    var fileSystems:[FileSystem?]?

    /// 查询的文件系统数目
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeFileSystemsResultCodingKeys: String, CodingKey {
        case fileSystems
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeFileSystemsResultCodingKeys.self)
        if decoderContainer.contains(.fileSystems)
        {
            self.fileSystems = try decoderContainer.decode([FileSystem?]?.self, forKey: .fileSystems)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeFileSystemsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeFileSystemsResultCodingKeys.self)
        try encoderContainer.encode(fileSystems, forKey: .fileSystems)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class ModifyFileSystemAttributeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyFileSystemAttributeResult?;

    enum ModifyFileSystemAttributeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyFileSystemAttributeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyFileSystemAttributeResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyFileSystemAttributeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyFileSystemAttributeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询文件系统详情
public class DescribeFileSystemRequest:JdCloudRequest
{
    /// 文件系统ID
    var fileSystemId:String


    public init(regionId: String,fileSystemId:String){
        self.fileSystemId = fileSystemId
        super.init(regionId: regionId)
    }


    enum DescribeFileSystemRequestRequestCodingKeys: String, CodingKey {
        case fileSystemId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeFileSystemRequestRequestCodingKeys.self)
        try encoderContainer.encode(fileSystemId, forKey: .fileSystemId)

    }
}


///  -   删除一个文件系统，一旦删除，该文件系统将不存在，也无法访问已删除的文件系统里的任何内容。
      ///       ///  [MFA enabled]
public class DeleteFileSystemRequest:JdCloudRequest
{
    /// 文件系统ID
    var fileSystemId:String


    public init(regionId: String,fileSystemId:String){
        self.fileSystemId = fileSystemId
        super.init(regionId: regionId)
    }


    enum DeleteFileSystemRequestRequestCodingKeys: String, CodingKey {
        case fileSystemId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteFileSystemRequestRequestCodingKeys.self)
        try encoderContainer.encode(fileSystemId, forKey: .fileSystemId)

    }
}

/// -   删除一个文件系统，一旦删除，该文件系统将不存在，也无法访问已删除的文件系统里的任何内容。
      ///       ///  [MFA enabled] 
public class DeleteFileSystemResult:NSObject,JdCloudResult
{
}

///  修改文件系统属性(name 和 description 必须要指定一个)
public class ModifyFileSystemAttributeRequest:JdCloudRequest
{
    /// 文件系统名称(参数规则：不可为空，只支持中文、数字、大小写字母、英文下划线“_”及中划线“-”，且不能超过32字符)
    var name:String?

    /// 文件系统描述(参数规则：不能超过256字符)
    var descriptionValue:String?

    /// 文件系统ID
    var fileSystemId:String


    public init(regionId: String,fileSystemId:String){
        self.fileSystemId = fileSystemId
        super.init(regionId: regionId)
    }


    enum ModifyFileSystemAttributeRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case fileSystemId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyFileSystemAttributeRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(fileSystemId, forKey: .fileSystemId)

    }
}

