/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云物理服务器
   云物理服务器相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class CpsJDCloudClient:NSObject,JDCloudClient{
    
    private final var cpsJDCloudClient:CpsJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        cpsJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "cps.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        cpsJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "cps/" + "v1"
    
    public let serviceName: String = "cps"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func describeSubnetAsync(request:DescribeSubnetRequest,requestComplation:@escaping ExecuteResult<DescribeSubnetResult>) throws {
        cpsJDCloudClient = self
        try DescribeSubnetExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyListenerAsync(request:ModifyListenerRequest,requestComplation:@escaping ExecuteResult<ModifyListenerResult>) throws {
        cpsJDCloudClient = self
        try ModifyListenerExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func associateElasticIpLBAsync(request:AssociateElasticIpLBRequest,requestComplation:@escaping ExecuteResult<AssociateElasticIpLBResult>) throws {
        cpsJDCloudClient = self
        try AssociateElasticIpLBExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryListenerAsync(request:QueryListenerRequest,requestComplation:@escaping ExecuteResult<QueryListenerResult>) throws {
        cpsJDCloudClient = self
        try QueryListenerExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVpcAsync(request:DeleteVpcRequest,requestComplation:@escaping ExecuteResult<DeleteVpcResult>) throws {
        cpsJDCloudClient = self
        try DeleteVpcExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceStatusAsync(request:DescribeInstanceStatusRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceStatusResult>) throws {
        cpsJDCloudClient = self
        try DescribeInstanceStatusExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addServersAsync(request:AddServersRequest,requestComplation:@escaping ExecuteResult<AddServersResult>) throws {
        cpsJDCloudClient = self
        try AddServersExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func reinstallInstanceAsync(request:ReinstallInstanceRequest,requestComplation:@escaping ExecuteResult<ReinstallInstanceResult>) throws {
        cpsJDCloudClient = self
        try ReinstallInstanceExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteServerGroupAsync(request:DeleteServerGroupRequest,requestComplation:@escaping ExecuteResult<DeleteServerGroupResult>) throws {
        cpsJDCloudClient = self
        try DeleteServerGroupExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeDeviceRaidsAsync(request:DescribeDeviceRaidsRequest,requestComplation:@escaping ExecuteResult<DescribeDeviceRaidsResult>) throws {
        cpsJDCloudClient = self
        try DescribeDeviceRaidsExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disassociateElasticIpLBAsync(request:DisassociateElasticIpLBRequest,requestComplation:@escaping ExecuteResult<DisassociateElasticIpLBResult>) throws {
        cpsJDCloudClient = self
        try DisassociateElasticIpLBExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyVpcAsync(request:ModifyVpcRequest,requestComplation:@escaping ExecuteResult<ModifyVpcResult>) throws {
        cpsJDCloudClient = self
        try ModifyVpcExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryLoadBalancerAsync(request:QueryLoadBalancerRequest,requestComplation:@escaping ExecuteResult<QueryLoadBalancerResult>) throws {
        cpsJDCloudClient = self
        try QueryLoadBalancerExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryServersAsync(request:QueryServersRequest,requestComplation:@escaping ExecuteResult<QueryServersResult>) throws {
        cpsJDCloudClient = self
        try QueryServersExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceNameAsync(request:DescribeInstanceNameRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceNameResult>) throws {
        cpsJDCloudClient = self
        try DescribeInstanceNameExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifySubnetAsync(request:ModifySubnetRequest,requestComplation:@escaping ExecuteResult<ModifySubnetResult>) throws {
        cpsJDCloudClient = self
        try ModifySubnetExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeVpcsAsync(request:DescribeVpcsRequest,requestComplation:@escaping ExecuteResult<DescribeVpcsResult>) throws {
        cpsJDCloudClient = self
        try DescribeVpcsExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryKeypairAsync(request:QueryKeypairRequest,requestComplation:@escaping ExecuteResult<QueryKeypairResult>) throws {
        cpsJDCloudClient = self
        try QueryKeypairExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceRaidAsync(request:DescribeInstanceRaidRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceRaidResult>) throws {
        cpsJDCloudClient = self
        try DescribeInstanceRaidExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeRegionesAsync(request:DescribeRegionesRequest,requestComplation:@escaping ExecuteResult<DescribeRegionesResult>) throws {
        cpsJDCloudClient = self
        try DescribeRegionesExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryLoadBalancersAsync(request:QueryLoadBalancersRequest,requestComplation:@escaping ExecuteResult<QueryLoadBalancersResult>) throws {
        cpsJDCloudClient = self
        try QueryLoadBalancersExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyServerGroupAsync(request:ModifyServerGroupRequest,requestComplation:@escaping ExecuteResult<ModifyServerGroupResult>) throws {
        cpsJDCloudClient = self
        try ModifyServerGroupExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyInstanceAsync(request:ModifyInstanceRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceResult>) throws {
        cpsJDCloudClient = self
        try ModifyInstanceExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryKeypairsAsync(request:QueryKeypairsRequest,requestComplation:@escaping ExecuteResult<QueryKeypairsResult>) throws {
        cpsJDCloudClient = self
        try QueryKeypairsExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeDeviceTypesAsync(request:DescribeDeviceTypesRequest,requestComplation:@escaping ExecuteResult<DescribeDeviceTypesResult>) throws {
        cpsJDCloudClient = self
        try DescribeDeviceTypesExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disassociateElasticIpAsync(request:DisassociateElasticIpRequest,requestComplation:@escaping ExecuteResult<DisassociateElasticIpResult>) throws {
        cpsJDCloudClient = self
        try DisassociateElasticIpExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeElasticIpAsync(request:DescribeElasticIpRequest,requestComplation:@escaping ExecuteResult<DescribeElasticIpResult>) throws {
        cpsJDCloudClient = self
        try DescribeElasticIpExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryRouteTablesAsync(request:QueryRouteTablesRequest,requestComplation:@escaping ExecuteResult<QueryRouteTablesResult>) throws {
        cpsJDCloudClient = self
        try QueryRouteTablesExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyLoadBalancerAsync(request:ModifyLoadBalancerRequest,requestComplation:@escaping ExecuteResult<ModifyLoadBalancerResult>) throws {
        cpsJDCloudClient = self
        try ModifyLoadBalancerExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startLoadBalancerAsync(request:StartLoadBalancerRequest,requestComplation:@escaping ExecuteResult<StartLoadBalancerResult>) throws {
        cpsJDCloudClient = self
        try StartLoadBalancerExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopLoadBalancerAsync(request:StopLoadBalancerRequest,requestComplation:@escaping ExecuteResult<StopLoadBalancerResult>) throws {
        cpsJDCloudClient = self
        try StopLoadBalancerExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceAsync(request:DescribeInstanceRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceResult>) throws {
        cpsJDCloudClient = self
        try DescribeInstanceExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyBandwidthAsync(request:ModifyBandwidthRequest,requestComplation:@escaping ExecuteResult<ModifyBandwidthResult>) throws {
        cpsJDCloudClient = self
        try ModifyBandwidthExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryServerGroupsAsync(request:QueryServerGroupsRequest,requestComplation:@escaping ExecuteResult<QueryServerGroupsResult>) throws {
        cpsJDCloudClient = self
        try QueryServerGroupsExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceMonitorInfoAsync(request:DescribeInstanceMonitorInfoRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceMonitorInfoResult>) throws {
        cpsJDCloudClient = self
        try DescribeInstanceMonitorInfoExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createInstancesAsync(request:CreateInstancesRequest,requestComplation:@escaping ExecuteResult<CreateInstancesResult>) throws {
        cpsJDCloudClient = self
        try CreateInstancesExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func resetPasswordAsync(request:ResetPasswordRequest,requestComplation:@escaping ExecuteResult<ResetPasswordResult>) throws {
        cpsJDCloudClient = self
        try ResetPasswordExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func associateElasticIpAsync(request:AssociateElasticIpRequest,requestComplation:@escaping ExecuteResult<AssociateElasticIpResult>) throws {
        cpsJDCloudClient = self
        try AssociateElasticIpExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopInstanceAsync(request:StopInstanceRequest,requestComplation:@escaping ExecuteResult<StopInstanceResult>) throws {
        cpsJDCloudClient = self
        try StopInstanceExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeVpcAsync(request:DescribeVpcRequest,requestComplation:@escaping ExecuteResult<DescribeVpcResult>) throws {
        cpsJDCloudClient = self
        try DescribeVpcExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSubnetsAsync(request:DescribeSubnetsRequest,requestComplation:@escaping ExecuteResult<DescribeSubnetsResult>) throws {
        cpsJDCloudClient = self
        try DescribeSubnetsExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryRouteTableAsync(request:QueryRouteTableRequest,requestComplation:@escaping ExecuteResult<QueryRouteTableResult>) throws {
        cpsJDCloudClient = self
        try QueryRouteTableExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteListenerAsync(request:DeleteListenerRequest,requestComplation:@escaping ExecuteResult<DeleteListenerResult>) throws {
        cpsJDCloudClient = self
        try DeleteListenerExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func applyElasticIpsAsync(request:ApplyElasticIpsRequest,requestComplation:@escaping ExecuteResult<ApplyElasticIpsResult>) throws {
        cpsJDCloudClient = self
        try ApplyElasticIpsExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createKeypairsAsync(request:CreateKeypairsRequest,requestComplation:@escaping ExecuteResult<CreateKeypairsResult>) throws {
        cpsJDCloudClient = self
        try CreateKeypairsExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func removeServerAsync(request:RemoveServerRequest,requestComplation:@escaping ExecuteResult<RemoveServerResult>) throws {
        cpsJDCloudClient = self
        try RemoveServerExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func importKeypairsAsync(request:ImportKeypairsRequest,requestComplation:@escaping ExecuteResult<ImportKeypairsResult>) throws {
        cpsJDCloudClient = self
        try ImportKeypairsExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createServerGroupAsync(request:CreateServerGroupRequest,requestComplation:@escaping ExecuteResult<CreateServerGroupResult>) throws {
        cpsJDCloudClient = self
        try CreateServerGroupExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startListenerAsync(request:StartListenerRequest,requestComplation:@escaping ExecuteResult<StartListenerResult>) throws {
        cpsJDCloudClient = self
        try StartListenerExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryCPSLBRegionsAsync(request:QueryCPSLBRegionsRequest,requestComplation:@escaping ExecuteResult<QueryCPSLBRegionsResult>) throws {
        cpsJDCloudClient = self
        try QueryCPSLBRegionsExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryServerGroupAsync(request:QueryServerGroupRequest,requestComplation:@escaping ExecuteResult<QueryServerGroupResult>) throws {
        cpsJDCloudClient = self
        try QueryServerGroupExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startInstanceAsync(request:StartInstanceRequest,requestComplation:@escaping ExecuteResult<StartInstanceResult>) throws {
        cpsJDCloudClient = self
        try StartInstanceExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createSubnetAsync(request:CreateSubnetRequest,requestComplation:@escaping ExecuteResult<CreateSubnetResult>) throws {
        cpsJDCloudClient = self
        try CreateSubnetExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func restartInstanceAsync(request:RestartInstanceRequest,requestComplation:@escaping ExecuteResult<RestartInstanceResult>) throws {
        cpsJDCloudClient = self
        try RestartInstanceExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeElasticIpsAsync(request:DescribeElasticIpsRequest,requestComplation:@escaping ExecuteResult<DescribeElasticIpsResult>) throws {
        cpsJDCloudClient = self
        try DescribeElasticIpsExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeOSAsync(request:DescribeOSRequest,requestComplation:@escaping ExecuteResult<DescribeOSResult>) throws {
        cpsJDCloudClient = self
        try DescribeOSExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createListenerAsync(request:CreateListenerRequest,requestComplation:@escaping ExecuteResult<CreateListenerResult>) throws {
        cpsJDCloudClient = self
        try CreateListenerExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyElasticIpBandwidthAsync(request:ModifyElasticIpBandwidthRequest,requestComplation:@escaping ExecuteResult<ModifyElasticIpBandwidthResult>) throws {
        cpsJDCloudClient = self
        try ModifyElasticIpBandwidthExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryListenersAsync(request:QueryListenersRequest,requestComplation:@escaping ExecuteResult<QueryListenersResult>) throws {
        cpsJDCloudClient = self
        try QueryListenersExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyServerAsync(request:ModifyServerRequest,requestComplation:@escaping ExecuteResult<ModifyServerResult>) throws {
        cpsJDCloudClient = self
        try ModifyServerExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstancesAsync(request:DescribeInstancesRequest,requestComplation:@escaping ExecuteResult<DescribeInstancesResult>) throws {
        cpsJDCloudClient = self
        try DescribeInstancesExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createLoadBalancerAsync(request:CreateLoadBalancerRequest,requestComplation:@escaping ExecuteResult<CreateLoadBalancerResult>) throws {
        cpsJDCloudClient = self
        try CreateLoadBalancerExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVpcAsync(request:CreateVpcRequest,requestComplation:@escaping ExecuteResult<CreateVpcResult>) throws {
        cpsJDCloudClient = self
        try CreateVpcExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteKeypairsAsync(request:DeleteKeypairsRequest,requestComplation:@escaping ExecuteResult<DeleteKeypairsResult>) throws {
        cpsJDCloudClient = self
        try DeleteKeypairsExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopListenerAsync(request:StopListenerRequest,requestComplation:@escaping ExecuteResult<StopListenerResult>) throws {
        cpsJDCloudClient = self
        try StopListenerExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteSubnetAsync(request:DeleteSubnetRequest,requestComplation:@escaping ExecuteResult<DeleteSubnetResult>) throws {
        cpsJDCloudClient = self
        try DeleteSubnetExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeBasicSubnetAsync(request:DescribeBasicSubnetRequest,requestComplation:@escaping ExecuteResult<DescribeBasicSubnetResult>) throws {
        cpsJDCloudClient = self
        try DescribeBasicSubnetExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension CpsJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "cps.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
