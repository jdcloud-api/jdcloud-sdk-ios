/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  raid
@objc(Raid)
public class Raid:NSObject,Codable{
    /// 磁盘类型, 如 system/data
    var volumeType:String?
    /// 设备详情
    var volumeDetail:String?
    /// RAID类型ID
    var raidTypeId:String?
    /// RAID类型, 如 NORAID, RAID0, RAID1
    var raidType:String?
    /// 云物理服务器类型, 如 cps.c.normal
    var deviceType:String?
    /// RAID类型描述
    var descriptionValue:String?



    public override init(){
            super.init()
    }

    enum RaidCodingKeys: String, CodingKey {
        case volumeType
        case volumeDetail
        case raidTypeId
        case raidType
        case deviceType
        case descriptionValue = "description"
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RaidCodingKeys.self)
        if decoderContainer.contains(.volumeType)
        {
            self.volumeType = try decoderContainer.decode(String?.self, forKey: .volumeType)
        }
        if decoderContainer.contains(.volumeDetail)
        {
            self.volumeDetail = try decoderContainer.decode(String?.self, forKey: .volumeDetail)
        }
        if decoderContainer.contains(.raidTypeId)
        {
            self.raidTypeId = try decoderContainer.decode(String?.self, forKey: .raidTypeId)
        }
        if decoderContainer.contains(.raidType)
        {
            self.raidType = try decoderContainer.decode(String?.self, forKey: .raidType)
        }
        if decoderContainer.contains(.deviceType)
        {
            self.deviceType = try decoderContainer.decode(String?.self, forKey: .deviceType)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
    }
}
public extension Raid{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RaidCodingKeys.self)
         try encoderContainer.encode(volumeType, forKey: .volumeType)
         try encoderContainer.encode(volumeDetail, forKey: .volumeDetail)
         try encoderContainer.encode(raidTypeId, forKey: .raidTypeId)
         try encoderContainer.encode(raidType, forKey: .raidType)
         try encoderContainer.encode(deviceType, forKey: .deviceType)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
    }
}
