/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  reinstallInstanceSpec
@objc(ReinstallInstanceSpec)
public class ReinstallInstanceSpec:NSObject,Codable{
    /// 可用区, 如cn-east-1a
    /// Required:true
    var az:String
    /// 镜像类型, 取值范围：standard、standard_app
    /// Required:true
    var imageType:String
    /// 操作系统类型ID
    /// Required:true
    var osTypeId:String
    /// 系统盘RAID类型ID
    /// Required:true
    var sysRaidTypeId:String
    /// 是否保留数据盘数据, 取值为：yes、no
    /// Required:true
    var keepData:String
    /// 数据盘RAID类型ID
    /// Required:true
    var dataRaidTypeId:String
    /// 密码
    /// Required:true
    var password:String
    /// 主机名
    var hostname:String?
    /// Softwares
    var softwares:[Software?]?



    public  init(az:String,imageType:String,osTypeId:String,sysRaidTypeId:String,keepData:String,dataRaidTypeId:String,password:String){
             self.az = az
             self.imageType = imageType
             self.osTypeId = osTypeId
             self.sysRaidTypeId = sysRaidTypeId
             self.keepData = keepData
             self.dataRaidTypeId = dataRaidTypeId
             self.password = password
    }

    enum ReinstallInstanceSpecCodingKeys: String, CodingKey {
        case az
        case imageType
        case osTypeId
        case sysRaidTypeId
        case keepData
        case dataRaidTypeId
        case password
        case hostname
        case softwares
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReinstallInstanceSpecCodingKeys.self)
        self.az = try decoderContainer.decode(String.self, forKey: .az)
        self.imageType = try decoderContainer.decode(String.self, forKey: .imageType)
        self.osTypeId = try decoderContainer.decode(String.self, forKey: .osTypeId)
        self.sysRaidTypeId = try decoderContainer.decode(String.self, forKey: .sysRaidTypeId)
        self.keepData = try decoderContainer.decode(String.self, forKey: .keepData)
        self.dataRaidTypeId = try decoderContainer.decode(String.self, forKey: .dataRaidTypeId)
        self.password = try decoderContainer.decode(String.self, forKey: .password)
        if decoderContainer.contains(.hostname)
        {
            self.hostname = try decoderContainer.decode(String?.self, forKey: .hostname)
        }
        if decoderContainer.contains(.softwares)
        {
            self.softwares = try decoderContainer.decode([Software?]?.self, forKey: .softwares)
        }
    }
}
public extension ReinstallInstanceSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReinstallInstanceSpecCodingKeys.self)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(imageType, forKey: .imageType)
         try encoderContainer.encode(osTypeId, forKey: .osTypeId)
         try encoderContainer.encode(sysRaidTypeId, forKey: .sysRaidTypeId)
         try encoderContainer.encode(keepData, forKey: .keepData)
         try encoderContainer.encode(dataRaidTypeId, forKey: .dataRaidTypeId)
         try encoderContainer.encode(password, forKey: .password)
         try encoderContainer.encode(hostname, forKey: .hostname)
         try encoderContainer.encode(softwares, forKey: .softwares)
    }
}
