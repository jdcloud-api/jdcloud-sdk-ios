/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  os
@objc(Os)
public class Os:NSObject,Codable{
    /// 操作系统系统类型ID
    var osTypeId:String?
    /// 操作系统系统名称, 如 Ubuntu 16.04(x86_64)
    var osName:String?
    /// 操作系统类型, 如 ubuntu/centos
    var osType:String?
    /// 操作系统版本, 如 14.04/16.04
    var osVersion:String?
    /// 实例类型, 如 cps.c.normal,
    var deviceType:String?



    public override init(){
            super.init()
    }

    enum OsCodingKeys: String, CodingKey {
        case osTypeId
        case osName
        case osType
        case osVersion
        case deviceType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OsCodingKeys.self)
        if decoderContainer.contains(.osTypeId)
        {
            self.osTypeId = try decoderContainer.decode(String?.self, forKey: .osTypeId)
        }
        if decoderContainer.contains(.osName)
        {
            self.osName = try decoderContainer.decode(String?.self, forKey: .osName)
        }
        if decoderContainer.contains(.osType)
        {
            self.osType = try decoderContainer.decode(String?.self, forKey: .osType)
        }
        if decoderContainer.contains(.osVersion)
        {
            self.osVersion = try decoderContainer.decode(String?.self, forKey: .osVersion)
        }
        if decoderContainer.contains(.deviceType)
        {
            self.deviceType = try decoderContainer.decode(String?.self, forKey: .deviceType)
        }
    }
}
public extension Os{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OsCodingKeys.self)
         try encoderContainer.encode(osTypeId, forKey: .osTypeId)
         try encoderContainer.encode(osName, forKey: .osName)
         try encoderContainer.encode(osType, forKey: .osType)
         try encoderContainer.encode(osVersion, forKey: .osVersion)
         try encoderContainer.encode(deviceType, forKey: .deviceType)
    }
}
