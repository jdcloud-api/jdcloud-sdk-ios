/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  deviceType
@objc(DeviceType)
public class DeviceType:NSObject,Codable{
    /// 实例类型英文名称, 如 cps.c.normal
    var nameEN:String?
    /// 实例类型中文名称, 如 计算型
    var nameZH:String?
    /// 镜像类型英文描述, 如 standard
    var useTypeEN:String?
    /// 镜像类型中文描述, 如 标准型
    var useTypeZH:String?
    /// 区域代码, 如 cn-east-1
    var region:String?
    /// CPU概要描述
    var cpuConcise:String?
    /// CPU详细信息
    var cpuDetail:String?
    /// 内存概要信息
    var memConcise:String?
    /// 内存详细信息
    var memDetail:String?
    /// 网口概要信息
    var ifConcise:String?
    /// 网口详细信息
    var ifDetail:String?
    /// 系统磁盘概要信息
    var systemDiskConcise:String?
    /// 系统磁盘详细信息
    var systemDiskDetail:String?
    /// 数据磁盘概要信息
    var dataDiskConcise:String?
    /// 数据磁盘详细信息
    var dataDiskDetail:String?
    /// GPU概要信息
    var gpuConcise:String?
    /// GPU详细信息
    var gpuDetail:String?



    public override init(){
            super.init()
    }

    enum DeviceTypeCodingKeys: String, CodingKey {
        case nameEN
        case nameZH
        case useTypeEN
        case useTypeZH
        case region
        case cpuConcise
        case cpuDetail
        case memConcise
        case memDetail
        case ifConcise
        case ifDetail
        case systemDiskConcise
        case systemDiskDetail
        case dataDiskConcise
        case dataDiskDetail
        case gpuConcise
        case gpuDetail
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeviceTypeCodingKeys.self)
        if decoderContainer.contains(.nameEN)
        {
            self.nameEN = try decoderContainer.decode(String?.self, forKey: .nameEN)
        }
        if decoderContainer.contains(.nameZH)
        {
            self.nameZH = try decoderContainer.decode(String?.self, forKey: .nameZH)
        }
        if decoderContainer.contains(.useTypeEN)
        {
            self.useTypeEN = try decoderContainer.decode(String?.self, forKey: .useTypeEN)
        }
        if decoderContainer.contains(.useTypeZH)
        {
            self.useTypeZH = try decoderContainer.decode(String?.self, forKey: .useTypeZH)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.cpuConcise)
        {
            self.cpuConcise = try decoderContainer.decode(String?.self, forKey: .cpuConcise)
        }
        if decoderContainer.contains(.cpuDetail)
        {
            self.cpuDetail = try decoderContainer.decode(String?.self, forKey: .cpuDetail)
        }
        if decoderContainer.contains(.memConcise)
        {
            self.memConcise = try decoderContainer.decode(String?.self, forKey: .memConcise)
        }
        if decoderContainer.contains(.memDetail)
        {
            self.memDetail = try decoderContainer.decode(String?.self, forKey: .memDetail)
        }
        if decoderContainer.contains(.ifConcise)
        {
            self.ifConcise = try decoderContainer.decode(String?.self, forKey: .ifConcise)
        }
        if decoderContainer.contains(.ifDetail)
        {
            self.ifDetail = try decoderContainer.decode(String?.self, forKey: .ifDetail)
        }
        if decoderContainer.contains(.systemDiskConcise)
        {
            self.systemDiskConcise = try decoderContainer.decode(String?.self, forKey: .systemDiskConcise)
        }
        if decoderContainer.contains(.systemDiskDetail)
        {
            self.systemDiskDetail = try decoderContainer.decode(String?.self, forKey: .systemDiskDetail)
        }
        if decoderContainer.contains(.dataDiskConcise)
        {
            self.dataDiskConcise = try decoderContainer.decode(String?.self, forKey: .dataDiskConcise)
        }
        if decoderContainer.contains(.dataDiskDetail)
        {
            self.dataDiskDetail = try decoderContainer.decode(String?.self, forKey: .dataDiskDetail)
        }
        if decoderContainer.contains(.gpuConcise)
        {
            self.gpuConcise = try decoderContainer.decode(String?.self, forKey: .gpuConcise)
        }
        if decoderContainer.contains(.gpuDetail)
        {
            self.gpuDetail = try decoderContainer.decode(String?.self, forKey: .gpuDetail)
        }
    }
}
public extension DeviceType{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeviceTypeCodingKeys.self)
         try encoderContainer.encode(nameEN, forKey: .nameEN)
         try encoderContainer.encode(nameZH, forKey: .nameZH)
         try encoderContainer.encode(useTypeEN, forKey: .useTypeEN)
         try encoderContainer.encode(useTypeZH, forKey: .useTypeZH)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(cpuConcise, forKey: .cpuConcise)
         try encoderContainer.encode(cpuDetail, forKey: .cpuDetail)
         try encoderContainer.encode(memConcise, forKey: .memConcise)
         try encoderContainer.encode(memDetail, forKey: .memDetail)
         try encoderContainer.encode(ifConcise, forKey: .ifConcise)
         try encoderContainer.encode(ifDetail, forKey: .ifDetail)
         try encoderContainer.encode(systemDiskConcise, forKey: .systemDiskConcise)
         try encoderContainer.encode(systemDiskDetail, forKey: .systemDiskDetail)
         try encoderContainer.encode(dataDiskConcise, forKey: .dataDiskConcise)
         try encoderContainer.encode(dataDiskDetail, forKey: .dataDiskDetail)
         try encoderContainer.encode(gpuConcise, forKey: .gpuConcise)
         try encoderContainer.encode(gpuDetail, forKey: .gpuDetail)
    }
}
