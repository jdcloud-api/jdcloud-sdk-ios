/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  deviceType
@objc(DeviceType)
public class DeviceType:NSObject,Codable{
    /// 实例类型, 如 cps.c.normal
    var deviceTypeValue:String?
    /// 实例类型名称, 如 标准计算型
    var name:String?
    /// 实例所属规格系列，如 计算、存储、GPU
    var family:String?
    /// 区域代码, 如 cn-east-1
    var region:String?
    /// CPU概要描述
    var cpuConcise:String?
    /// CPU详细信息
    var cpuDetail:String?
    /// 内存概要信息
    var memConcise:String?
    /// 内存详细信息
    var memDetail:String?
    /// 网口概要信息
    var ifConcise:String?
    /// 网口详细信息
    var ifDetail:String?
    /// GPU概要信息
    var gpuConcise:String?
    /// GPU详细信息
    var gpuDetail:String?
    /// 系统盘数量
    var systemDiskAmount:Int?
    /// 系统盘单盘大小（GB）
    var systemDiskSize:Int?
    /// 系统盘规格
    var systemDiskModel:String?
    /// 数据盘数量
    var dataDiskAmount:Int?
    /// 数据盘单盘大小（GB）
    var dataDiskSize:Int?
    /// 数据盘规格
    var dataDiskModel:String?
    /// 售罄状态
    var isSoldOut:Bool?



    public override init(){
            super.init()
    }

    enum DeviceTypeCodingKeys: String, CodingKey {
        case deviceTypeValue = "deviceType"
        case name
        case family
        case region
        case cpuConcise
        case cpuDetail
        case memConcise
        case memDetail
        case ifConcise
        case ifDetail
        case gpuConcise
        case gpuDetail
        case systemDiskAmount
        case systemDiskSize
        case systemDiskModel
        case dataDiskAmount
        case dataDiskSize
        case dataDiskModel
        case isSoldOut
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeviceTypeCodingKeys.self)
        if decoderContainer.contains(.deviceTypeValue)
        {
            self.deviceTypeValue = try decoderContainer.decode(String?.self, forKey: .deviceTypeValue)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.family)
        {
            self.family = try decoderContainer.decode(String?.self, forKey: .family)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.cpuConcise)
        {
            self.cpuConcise = try decoderContainer.decode(String?.self, forKey: .cpuConcise)
        }
        if decoderContainer.contains(.cpuDetail)
        {
            self.cpuDetail = try decoderContainer.decode(String?.self, forKey: .cpuDetail)
        }
        if decoderContainer.contains(.memConcise)
        {
            self.memConcise = try decoderContainer.decode(String?.self, forKey: .memConcise)
        }
        if decoderContainer.contains(.memDetail)
        {
            self.memDetail = try decoderContainer.decode(String?.self, forKey: .memDetail)
        }
        if decoderContainer.contains(.ifConcise)
        {
            self.ifConcise = try decoderContainer.decode(String?.self, forKey: .ifConcise)
        }
        if decoderContainer.contains(.ifDetail)
        {
            self.ifDetail = try decoderContainer.decode(String?.self, forKey: .ifDetail)
        }
        if decoderContainer.contains(.gpuConcise)
        {
            self.gpuConcise = try decoderContainer.decode(String?.self, forKey: .gpuConcise)
        }
        if decoderContainer.contains(.gpuDetail)
        {
            self.gpuDetail = try decoderContainer.decode(String?.self, forKey: .gpuDetail)
        }
        if decoderContainer.contains(.systemDiskAmount)
        {
            self.systemDiskAmount = try decoderContainer.decode(Int?.self, forKey: .systemDiskAmount)
        }
        if decoderContainer.contains(.systemDiskSize)
        {
            self.systemDiskSize = try decoderContainer.decode(Int?.self, forKey: .systemDiskSize)
        }
        if decoderContainer.contains(.systemDiskModel)
        {
            self.systemDiskModel = try decoderContainer.decode(String?.self, forKey: .systemDiskModel)
        }
        if decoderContainer.contains(.dataDiskAmount)
        {
            self.dataDiskAmount = try decoderContainer.decode(Int?.self, forKey: .dataDiskAmount)
        }
        if decoderContainer.contains(.dataDiskSize)
        {
            self.dataDiskSize = try decoderContainer.decode(Int?.self, forKey: .dataDiskSize)
        }
        if decoderContainer.contains(.dataDiskModel)
        {
            self.dataDiskModel = try decoderContainer.decode(String?.self, forKey: .dataDiskModel)
        }
        if decoderContainer.contains(.isSoldOut)
        {
            self.isSoldOut = try decoderContainer.decode(Bool?.self, forKey: .isSoldOut)
        }
    }
}
public extension DeviceType{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeviceTypeCodingKeys.self)
         try encoderContainer.encode(deviceTypeValue, forKey: .deviceTypeValue)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(family, forKey: .family)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(cpuConcise, forKey: .cpuConcise)
         try encoderContainer.encode(cpuDetail, forKey: .cpuDetail)
         try encoderContainer.encode(memConcise, forKey: .memConcise)
         try encoderContainer.encode(memDetail, forKey: .memDetail)
         try encoderContainer.encode(ifConcise, forKey: .ifConcise)
         try encoderContainer.encode(ifDetail, forKey: .ifDetail)
         try encoderContainer.encode(gpuConcise, forKey: .gpuConcise)
         try encoderContainer.encode(gpuDetail, forKey: .gpuDetail)
         try encoderContainer.encode(systemDiskAmount, forKey: .systemDiskAmount)
         try encoderContainer.encode(systemDiskSize, forKey: .systemDiskSize)
         try encoderContainer.encode(systemDiskModel, forKey: .systemDiskModel)
         try encoderContainer.encode(dataDiskAmount, forKey: .dataDiskAmount)
         try encoderContainer.encode(dataDiskSize, forKey: .dataDiskSize)
         try encoderContainer.encode(dataDiskModel, forKey: .dataDiskModel)
         try encoderContainer.encode(isSoldOut, forKey: .isSoldOut)
    }
}
