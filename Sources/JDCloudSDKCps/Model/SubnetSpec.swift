/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  subnetSpec
@objc(SubnetSpec)
public class SubnetSpec:NSObject,Codable{
    /// 可用区, 如 cn-north-1a
    /// Required:true
    var az:String
    /// 私有网络ID
    /// Required:true
    var vpcId:String
    /// 子网的网络范围
    /// Required:true
    var cidr:String
    /// 名称
    /// Required:true
    var name:String
    /// 描述
    /// Required:true
    var descriptionValue:String



    public  init(az:String,vpcId:String,cidr:String,name:String,descriptionValue:String){
             self.az = az
             self.vpcId = vpcId
             self.cidr = cidr
             self.name = name
             self.descriptionValue = descriptionValue
    }

    enum SubnetSpecCodingKeys: String, CodingKey {
        case az
        case vpcId
        case cidr
        case name
        case descriptionValue = "description"
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SubnetSpecCodingKeys.self)
        self.az = try decoderContainer.decode(String.self, forKey: .az)
        self.vpcId = try decoderContainer.decode(String.self, forKey: .vpcId)
        self.cidr = try decoderContainer.decode(String.self, forKey: .cidr)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        self.descriptionValue = try decoderContainer.decode(String.self, forKey: .descriptionValue)
    }
}
public extension SubnetSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SubnetSpecCodingKeys.self)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(cidr, forKey: .cidr)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
    }
}
