/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  subnet
@objc(Subnet)
public class Subnet:NSObject,Codable{
    /// 地域代码, 如cn-east-1
    var region:String?
    /// 可用区, 如cn-east-1a
    var az:String?
    /// 子网CIDR
    var cidr:String?
    /// 子网ID
    var subnetId:String?
    /// 网络类型
    var networkType:String?



    public override init(){
            super.init()
    }

    enum SubnetCodingKeys: String, CodingKey {
        case region
        case az
        case cidr
        case subnetId
        case networkType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SubnetCodingKeys.self)
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.az)
        {
            self.az = try decoderContainer.decode(String?.self, forKey: .az)
        }
        if decoderContainer.contains(.cidr)
        {
            self.cidr = try decoderContainer.decode(String?.self, forKey: .cidr)
        }
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
        if decoderContainer.contains(.networkType)
        {
            self.networkType = try decoderContainer.decode(String?.self, forKey: .networkType)
        }
    }
}
public extension Subnet{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SubnetCodingKeys.self)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(cidr, forKey: .cidr)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(networkType, forKey: .networkType)
    }
}
