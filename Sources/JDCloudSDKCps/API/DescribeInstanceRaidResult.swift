/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云物理服务器
   云物理服务器操作相关的接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询单个云物理服务器已安装的RAID信息，包括系统盘RAID信息和数据盘RAID信息
@objc(DescribeInstanceRaidResult)
public class DescribeInstanceRaidResult:NSObject,JdCloudResult
{
    /// 系统盘RAID类型ID
    var sysRaidTypeId:String?

    /// 系统盘RAID类型
    var sysRaidType:String?

    /// 数据盘RAID类型ID
    var dataRaidTypeId:String?

    /// 数据盘RAID类型
    var dataRaidType:String?



    public override init(){
        super.init()
    }

    enum DescribeInstanceRaidResultCodingKeys: String, CodingKey {
        case sysRaidTypeId
        case sysRaidType
        case dataRaidTypeId
        case dataRaidType
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceRaidResultCodingKeys.self)
        if decoderContainer.contains(.sysRaidTypeId)
        {
            self.sysRaidTypeId = try decoderContainer.decode(String?.self, forKey: .sysRaidTypeId)
        }
        if decoderContainer.contains(.sysRaidType)
        {
            self.sysRaidType = try decoderContainer.decode(String?.self, forKey: .sysRaidType)
        }
        if decoderContainer.contains(.dataRaidTypeId)
        {
            self.dataRaidTypeId = try decoderContainer.decode(String?.self, forKey: .dataRaidTypeId)
        }
        if decoderContainer.contains(.dataRaidType)
        {
            self.dataRaidType = try decoderContainer.decode(String?.self, forKey: .dataRaidType)
        }
    }
}
public extension DescribeInstanceRaidResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceRaidResultCodingKeys.self)
        try encoderContainer.encode(sysRaidTypeId, forKey: .sysRaidTypeId)
        try encoderContainer.encode(sysRaidType, forKey: .sysRaidType)
        try encoderContainer.encode(dataRaidTypeId, forKey: .dataRaidTypeId)
        try encoderContainer.encode(dataRaidType, forKey: .dataRaidType)
    }
}
