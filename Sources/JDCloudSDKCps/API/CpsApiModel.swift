/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云物理服务器
   云物理服务器地域操作相关的接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon

/// 查询路由表列表 
public class QueryRouteTablesResult:NSObject,JdCloudResult
{
    /// RouteTables
    var routeTables:[RouteTable?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QueryRouteTablesResultCodingKeys: String, CodingKey {
        case routeTables
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryRouteTablesResultCodingKeys.self)
        if decoderContainer.contains(.routeTables)
        {
            self.routeTables = try decoderContainer.decode([RouteTable?]?.self, forKey: .routeTables)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QueryRouteTablesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRouteTablesResultCodingKeys.self)
        try encoderContainer.encode(routeTables, forKey: .routeTables)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 查询路由表详情 
public class QueryRouteTableResult:NSObject,JdCloudResult
{
    /// 路由表详细信息
    var routeTable:RouteTable?



    public override init(){
        super.init()
    }

    enum QueryRouteTableResultCodingKeys: String, CodingKey {
        case routeTable
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryRouteTableResultCodingKeys.self)
        if decoderContainer.contains(.routeTable)
        {
            self.routeTable = try decoderContainer.decode(RouteTable?.self, forKey: .routeTable)
        }
    }
}
public extension QueryRouteTableResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRouteTableResultCodingKeys.self)
        try encoderContainer.encode(routeTable, forKey: .routeTable)
    }
}

///  查询路由表详情
public class QueryRouteTableRequest:JdCloudRequest
{
    /// 路由表ID
    var routeTableId:String


    public init(regionId: String,routeTableId:String){
        self.routeTableId = routeTableId
        super.init(regionId: regionId)
    }


    enum QueryRouteTableRequestRequestCodingKeys: String, CodingKey {
        case routeTableId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRouteTableRequestRequestCodingKeys.self)
        try encoderContainer.encode(routeTableId, forKey: .routeTableId)

    }
}

public class QueryRouteTablesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryRouteTablesResult?;

    enum QueryRouteTablesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryRouteTablesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryRouteTablesResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryRouteTablesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRouteTablesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QueryRouteTableResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryRouteTableResult?;

    enum QueryRouteTableResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryRouteTableResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryRouteTableResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryRouteTableResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRouteTableResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询路由表列表
public class QueryRouteTablesRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 名称
    var name:String?

    /// 私有网络ID，精确匹配
    var vpcId:String?

    /// routeTableId - 路由表ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum QueryRouteTablesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case name
        case vpcId
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRouteTablesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class DeleteListenerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteListenerResult?;

    enum DeleteListenerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteListenerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteListenerResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteListenerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteListenerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建监听器
public class CreateListenerRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 监听器配置
    var loadBalancerSpec:ListenerSpec


    public init(regionId: String,loadBalancerSpec:ListenerSpec){
        self.loadBalancerSpec = loadBalancerSpec
        super.init(regionId: regionId)
    }


    enum CreateListenerRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case loadBalancerSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateListenerRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(loadBalancerSpec, forKey: .loadBalancerSpec)

    }
}

/// 修改监听器 
public class ModifyListenerResult:NSObject,JdCloudResult
{
    /// 监听器详细信息
    var loadBalancer:Listener?



    public override init(){
        super.init()
    }

    enum ModifyListenerResultCodingKeys: String, CodingKey {
        case loadBalancer
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyListenerResultCodingKeys.self)
        if decoderContainer.contains(.loadBalancer)
        {
            self.loadBalancer = try decoderContainer.decode(Listener?.self, forKey: .loadBalancer)
        }
    }
}
public extension ModifyListenerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyListenerResultCodingKeys.self)
        try encoderContainer.encode(loadBalancer, forKey: .loadBalancer)
    }
}

///  查询监听器详情
public class QueryListenerRequest:JdCloudRequest
{
    /// 监听器ID
    var listenerId:String


    public init(regionId: String,listenerId:String){
        self.listenerId = listenerId
        super.init(regionId: regionId)
    }


    enum QueryListenerRequestRequestCodingKeys: String, CodingKey {
        case listenerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryListenerRequestRequestCodingKeys.self)
        try encoderContainer.encode(listenerId, forKey: .listenerId)

    }
}

public class CreateListenerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateListenerResult?;

    enum CreateListenerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateListenerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateListenerResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateListenerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateListenerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyListenerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyListenerResult?;

    enum ModifyListenerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyListenerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyListenerResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyListenerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyListenerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建监听器 
public class CreateListenerResult:NSObject,JdCloudResult
{
    /// 监听器ID
    var listenerId:String?



    public override init(){
        super.init()
    }

    enum CreateListenerResultCodingKeys: String, CodingKey {
        case listenerId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateListenerResultCodingKeys.self)
        if decoderContainer.contains(.listenerId)
        {
            self.listenerId = try decoderContainer.decode(String?.self, forKey: .listenerId)
        }
    }
}
public extension CreateListenerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateListenerResultCodingKeys.self)
        try encoderContainer.encode(listenerId, forKey: .listenerId)
    }
}
/// 查询监听器详情 
public class QueryListenerResult:NSObject,JdCloudResult
{
    /// 监听器详细信息
    var listener:Listener?



    public override init(){
        super.init()
    }

    enum QueryListenerResultCodingKeys: String, CodingKey {
        case listener
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryListenerResultCodingKeys.self)
        if decoderContainer.contains(.listener)
        {
            self.listener = try decoderContainer.decode(Listener?.self, forKey: .listener)
        }
    }
}
public extension QueryListenerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryListenerResultCodingKeys.self)
        try encoderContainer.encode(listener, forKey: .listener)
    }
}

///  删除监听器
public class DeleteListenerRequest:JdCloudRequest
{
    /// 监听器ID
    var listenerId:String


    public init(regionId: String,listenerId:String){
        self.listenerId = listenerId
        super.init(regionId: regionId)
    }


    enum DeleteListenerRequestRequestCodingKeys: String, CodingKey {
        case listenerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteListenerRequestRequestCodingKeys.self)
        try encoderContainer.encode(listenerId, forKey: .listenerId)

    }
}

public class StartListenerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartListenerResult?;

    enum StartListenerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartListenerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartListenerResult?.self, forKey: .result) ?? nil
    }
}

public extension StartListenerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartListenerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询监听器 
public class QueryListenersResult:NSObject,JdCloudResult
{
    /// Listeners
    var listeners:[Listener?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QueryListenersResultCodingKeys: String, CodingKey {
        case listeners
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryListenersResultCodingKeys.self)
        if decoderContainer.contains(.listeners)
        {
            self.listeners = try decoderContainer.decode([Listener?]?.self, forKey: .listeners)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QueryListenersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryListenersResultCodingKeys.self)
        try encoderContainer.encode(listeners, forKey: .listeners)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  修改监听器
public class ModifyListenerRequest:JdCloudRequest
{
    /// 调度算法
    var algorithm:String?

    /// 会话保持
    var stickySession:String?

    /// 是否获取真实ip，取值范围on|off
    var realIp:String?

    /// 名称
    var name:String?

    /// 描述
    var descriptionValue:String?

    /// 健康检查
    var healthCheck:String?

    /// 健康检查响应的最大超时时间
    var healthCheckTimeout:Int?

    /// 健康检查响应的最大间隔时间
    var healthCheckInterval:Int?

    /// 健康检查结果为success的阈值
    var healthyThreshold:Int?

    /// 健康检查结果为fail的阈值
    var unhealthyThreshold:Int?

    /// 服务器组id
    var serverGroupId:String?

    /// 监听器ID
    var listenerId:String


    public init(regionId: String,listenerId:String){
        self.listenerId = listenerId
        super.init(regionId: regionId)
    }


    enum ModifyListenerRequestRequestCodingKeys: String, CodingKey {
        case algorithm
        case stickySession
        case realIp
        case name
        case descriptionValue = "description"
        case healthCheck
        case healthCheckTimeout
        case healthCheckInterval
        case healthyThreshold
        case unhealthyThreshold
        case serverGroupId
        case listenerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyListenerRequestRequestCodingKeys.self)
        try encoderContainer.encode(algorithm, forKey: .algorithm)
        try encoderContainer.encode(stickySession, forKey: .stickySession)
        try encoderContainer.encode(realIp, forKey: .realIp)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(healthCheck, forKey: .healthCheck)
        try encoderContainer.encode(healthCheckTimeout, forKey: .healthCheckTimeout)
        try encoderContainer.encode(healthCheckInterval, forKey: .healthCheckInterval)
        try encoderContainer.encode(healthyThreshold, forKey: .healthyThreshold)
        try encoderContainer.encode(unhealthyThreshold, forKey: .unhealthyThreshold)
        try encoderContainer.encode(serverGroupId, forKey: .serverGroupId)
        try encoderContainer.encode(listenerId, forKey: .listenerId)

    }
}


///  关闭监听器
public class StopListenerRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 监听器ID
    var listenerId:String


    public init(regionId: String,listenerId:String){
        self.listenerId = listenerId
        super.init(regionId: regionId)
    }


    enum StopListenerRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case listenerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopListenerRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(listenerId, forKey: .listenerId)

    }
}


///  开启监听器
public class StartListenerRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 监听器ID
    var listenerId:String


    public init(regionId: String,listenerId:String){
        self.listenerId = listenerId
        super.init(regionId: regionId)
    }


    enum StartListenerRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case listenerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartListenerRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(listenerId, forKey: .listenerId)

    }
}


///  查询监听器
public class QueryListenersRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 名称
    var name:String?

    /// 负载均衡实例ID，精确匹配
    var loadBalancerId:String?

    /// listenerId - 监听器ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum QueryListenersRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case name
        case loadBalancerId
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryListenersRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(loadBalancerId, forKey: .loadBalancerId)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class QueryListenerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryListenerResult?;

    enum QueryListenerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryListenerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryListenerResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryListenerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryListenerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 开启监听器 
public class StartListenerResult:NSObject,JdCloudResult
{
    /// 开启监听器是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum StartListenerResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartListenerResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension StartListenerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartListenerResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class QueryListenersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryListenersResult?;

    enum QueryListenersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryListenersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryListenersResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryListenersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryListenersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 关闭监听器 
public class StopListenerResult:NSObject,JdCloudResult
{
    /// 关闭监听器是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum StopListenerResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopListenerResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension StopListenerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopListenerResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class StopListenerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopListenerResult?;

    enum StopListenerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopListenerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopListenerResult?.self, forKey: .result) ?? nil
    }
}

public extension StopListenerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopListenerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除监听器 
public class DeleteListenerResult:NSObject,JdCloudResult
{
    /// 删除操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DeleteListenerResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteListenerResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DeleteListenerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteListenerResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
/// 添加后端服务器 
public class AddServersResult:NSObject,JdCloudResult
{
    /// 后端服务器ID
    var serverIds:[String?]?



    public override init(){
        super.init()
    }

    enum AddServersResultCodingKeys: String, CodingKey {
        case serverIds
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddServersResultCodingKeys.self)
        if decoderContainer.contains(.serverIds)
        {
            self.serverIds = try decoderContainer.decode([String?]?.self, forKey: .serverIds)
        }
    }
}
public extension AddServersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddServersResultCodingKeys.self)
        try encoderContainer.encode(serverIds, forKey: .serverIds)
    }
}
/// 修改后端服务器 
public class ModifyServerResult:NSObject,JdCloudResult
{
    /// 后端服务器ID
    var serverId:String?

    /// 后端云物理服务器ID
    var instanceId:String?

    /// 内网Ip
    var privateIp:String?

    /// 端口
    var port:Int?

    /// 后端云物理服务器权重
    var weight:Int?



    public override init(){
        super.init()
    }

    enum ModifyServerResultCodingKeys: String, CodingKey {
        case serverId
        case instanceId
        case privateIp
        case port
        case weight
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyServerResultCodingKeys.self)
        if decoderContainer.contains(.serverId)
        {
            self.serverId = try decoderContainer.decode(String?.self, forKey: .serverId)
        }
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.privateIp)
        {
            self.privateIp = try decoderContainer.decode(String?.self, forKey: .privateIp)
        }
        if decoderContainer.contains(.port)
        {
            self.port = try decoderContainer.decode(Int?.self, forKey: .port)
        }
        if decoderContainer.contains(.weight)
        {
            self.weight = try decoderContainer.decode(Int?.self, forKey: .weight)
        }
    }
}
public extension ModifyServerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyServerResultCodingKeys.self)
        try encoderContainer.encode(serverId, forKey: .serverId)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(privateIp, forKey: .privateIp)
        try encoderContainer.encode(port, forKey: .port)
        try encoderContainer.encode(weight, forKey: .weight)
    }
}
public class ModifyServerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyServerResult?;

    enum ModifyServerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyServerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyServerResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyServerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyServerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class RemoveServerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RemoveServerResult?;

    enum RemoveServerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RemoveServerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RemoveServerResult?.self, forKey: .result) ?? nil
    }
}

public extension RemoveServerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveServerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改后端服务器
public class ModifyServerRequest:JdCloudRequest
{
    /// 权重
    var weight:Int?

    /// 服务器组ID
    var serverGroupId:String

    /// 后端服务器ID
    var serverId:String


    public init(regionId: String,serverGroupId:String,serverId:String){
        self.serverGroupId = serverGroupId
        self.serverId = serverId
        super.init(regionId: regionId)
    }


    enum ModifyServerRequestRequestCodingKeys: String, CodingKey {
        case weight
        case serverGroupId
        case serverId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyServerRequestRequestCodingKeys.self)
        try encoderContainer.encode(weight, forKey: .weight)
        try encoderContainer.encode(serverGroupId, forKey: .serverGroupId)
        try encoderContainer.encode(serverId, forKey: .serverId)

    }
}


///  移除后端服务器
public class RemoveServerRequest:JdCloudRequest
{
    /// 服务器组ID
    var serverGroupId:String

    /// 后端服务器ID
    var serverId:String


    public init(regionId: String,serverGroupId:String,serverId:String){
        self.serverGroupId = serverGroupId
        self.serverId = serverId
        super.init(regionId: regionId)
    }


    enum RemoveServerRequestRequestCodingKeys: String, CodingKey {
        case serverGroupId
        case serverId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveServerRequestRequestCodingKeys.self)
        try encoderContainer.encode(serverGroupId, forKey: .serverGroupId)
        try encoderContainer.encode(serverId, forKey: .serverId)

    }
}

/// 移除后端服务器 
public class RemoveServerResult:NSObject,JdCloudResult
{
    /// 删除操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum RemoveServerResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RemoveServerResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension RemoveServerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveServerResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  查询后端服务器列表
public class QueryServersRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 监听器Id
    var listenerId:String?

    /// serverId - 后端服务器ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?

    /// 服务器组ID
    var serverGroupId:String


    public init(regionId: String,serverGroupId:String){
        self.serverGroupId = serverGroupId
        super.init(regionId: regionId)
    }


    enum QueryServersRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case listenerId
        case filters
        case serverGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryServersRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(listenerId, forKey: .listenerId)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(serverGroupId, forKey: .serverGroupId)

    }
}

/// 查询后端服务器列表 
public class QueryServersResult:NSObject,JdCloudResult
{
    /// Servers
    var servers:[Server?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QueryServersResultCodingKeys: String, CodingKey {
        case servers
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryServersResultCodingKeys.self)
        if decoderContainer.contains(.servers)
        {
            self.servers = try decoderContainer.decode([Server?]?.self, forKey: .servers)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QueryServersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryServersResultCodingKeys.self)
        try encoderContainer.encode(servers, forKey: .servers)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class AddServersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddServersResult?;

    enum AddServersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddServersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddServersResult?.self, forKey: .result) ?? nil
    }
}

public extension AddServersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddServersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加后端服务器
public class AddServersRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 后端服务器配置
    var serverSpec:[ServerSpec?]?

    /// 服务器组ID
    var serverGroupId:String


    public init(regionId: String,serverSpec:[ServerSpec?]?,serverGroupId:String){
        self.serverSpec = serverSpec
        self.serverGroupId = serverGroupId
        super.init(regionId: regionId)
    }


    enum AddServersRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case serverSpec
        case serverGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddServersRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(serverSpec, forKey: .serverSpec)
        try encoderContainer.encode(serverGroupId, forKey: .serverGroupId)

    }
}

public class QueryServersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryServersResult?;

    enum QueryServersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryServersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryServersResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryServersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryServersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateKeypairsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateKeypairsResult?;

    enum CreateKeypairsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateKeypairsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateKeypairsResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateKeypairsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeypairsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QueryKeypairResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryKeypairResult?;

    enum QueryKeypairResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryKeypairResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryKeypairResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryKeypairResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeypairResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除密钥对 
public class DeleteKeypairsResult:NSObject,JdCloudResult
{
    /// 删除操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DeleteKeypairsResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteKeypairsResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DeleteKeypairsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteKeypairsResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class QueryKeypairsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryKeypairsResult?;

    enum QueryKeypairsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryKeypairsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryKeypairsResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryKeypairsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeypairsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  导入密钥对
public class ImportKeypairsRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 密钥对名称
    var name:String

    /// 公钥
    var publicKey:String


    public init(regionId: String,name:String,publicKey:String){
        self.name = name
        self.publicKey = publicKey
        super.init(regionId: regionId)
    }


    enum ImportKeypairsRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case name
        case publicKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportKeypairsRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(publicKey, forKey: .publicKey)

    }
}

/// 查询密钥对详情 
public class QueryKeypairResult:NSObject,JdCloudResult
{
    /// 密钥对详细信息
    var server:Keypair?



    public override init(){
        super.init()
    }

    enum QueryKeypairResultCodingKeys: String, CodingKey {
        case server
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryKeypairResultCodingKeys.self)
        if decoderContainer.contains(.server)
        {
            self.server = try decoderContainer.decode(Keypair?.self, forKey: .server)
        }
    }
}
public extension QueryKeypairResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeypairResultCodingKeys.self)
        try encoderContainer.encode(server, forKey: .server)
    }
}
/// 查询密钥对列表 
public class QueryKeypairsResult:NSObject,JdCloudResult
{
    /// Servers
    var servers:[Keypair?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QueryKeypairsResultCodingKeys: String, CodingKey {
        case servers
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryKeypairsResultCodingKeys.self)
        if decoderContainer.contains(.servers)
        {
            self.servers = try decoderContainer.decode([Keypair?]?.self, forKey: .servers)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QueryKeypairsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeypairsResultCodingKeys.self)
        try encoderContainer.encode(servers, forKey: .servers)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  创建密钥对
public class CreateKeypairsRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 密钥对名称
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum CreateKeypairsRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeypairsRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(name, forKey: .name)

    }
}


///  查询密钥对列表
public class QueryKeypairsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 密钥对名称
    var name:String?

    /// keypairId  - 密钥对ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum QueryKeypairsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case name
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeypairsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  查询密钥对详情
public class QueryKeypairRequest:JdCloudRequest
{
    /// 密钥对ID
    var keypairId:String


    public init(regionId: String,keypairId:String){
        self.keypairId = keypairId
        super.init(regionId: regionId)
    }


    enum QueryKeypairRequestRequestCodingKeys: String, CodingKey {
        case keypairId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeypairRequestRequestCodingKeys.self)
        try encoderContainer.encode(keypairId, forKey: .keypairId)

    }
}

/// 创建密钥对 
public class CreateKeypairsResult:NSObject,JdCloudResult
{
    /// 密钥对id
    var keypairId:String?

    /// 地域
    var region:String?

    /// 密钥对名称
    var name:String?

    /// 公钥
    var publicKey:String?

    /// 指纹
    var fingerPrint:String?

    /// 创建时间
    var createTime:String?

    /// 更新时间
    var updateTime:String?

    /// 私钥
    var privateKey:String?



    public override init(){
        super.init()
    }

    enum CreateKeypairsResultCodingKeys: String, CodingKey {
        case keypairId
        case region
        case name
        case publicKey
        case fingerPrint
        case createTime
        case updateTime
        case privateKey
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateKeypairsResultCodingKeys.self)
        if decoderContainer.contains(.keypairId)
        {
            self.keypairId = try decoderContainer.decode(String?.self, forKey: .keypairId)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.publicKey)
        {
            self.publicKey = try decoderContainer.decode(String?.self, forKey: .publicKey)
        }
        if decoderContainer.contains(.fingerPrint)
        {
            self.fingerPrint = try decoderContainer.decode(String?.self, forKey: .fingerPrint)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
        if decoderContainer.contains(.privateKey)
        {
            self.privateKey = try decoderContainer.decode(String?.self, forKey: .privateKey)
        }
    }
}
public extension CreateKeypairsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeypairsResultCodingKeys.self)
        try encoderContainer.encode(keypairId, forKey: .keypairId)
        try encoderContainer.encode(region, forKey: .region)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(publicKey, forKey: .publicKey)
        try encoderContainer.encode(fingerPrint, forKey: .fingerPrint)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(updateTime, forKey: .updateTime)
        try encoderContainer.encode(privateKey, forKey: .privateKey)
    }
}

///  删除密钥对
public class DeleteKeypairsRequest:JdCloudRequest
{
    /// 密钥对ID
    var keypairId:String


    public init(regionId: String,keypairId:String){
        self.keypairId = keypairId
        super.init(regionId: regionId)
    }


    enum DeleteKeypairsRequestRequestCodingKeys: String, CodingKey {
        case keypairId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteKeypairsRequestRequestCodingKeys.self)
        try encoderContainer.encode(keypairId, forKey: .keypairId)

    }
}

/// 导入密钥对 
public class ImportKeypairsResult:NSObject,JdCloudResult
{
    /// 密钥对id
    var keypairId:String?

    /// 地域
    var region:String?

    /// 密钥对名称
    var name:String?

    /// 公钥
    var publicKey:String?

    /// 指纹
    var fingerPrint:String?

    /// 创建时间
    var createTime:String?

    /// 更新时间
    var updateTime:String?



    public override init(){
        super.init()
    }

    enum ImportKeypairsResultCodingKeys: String, CodingKey {
        case keypairId
        case region
        case name
        case publicKey
        case fingerPrint
        case createTime
        case updateTime
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImportKeypairsResultCodingKeys.self)
        if decoderContainer.contains(.keypairId)
        {
            self.keypairId = try decoderContainer.decode(String?.self, forKey: .keypairId)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.publicKey)
        {
            self.publicKey = try decoderContainer.decode(String?.self, forKey: .publicKey)
        }
        if decoderContainer.contains(.fingerPrint)
        {
            self.fingerPrint = try decoderContainer.decode(String?.self, forKey: .fingerPrint)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension ImportKeypairsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportKeypairsResultCodingKeys.self)
        try encoderContainer.encode(keypairId, forKey: .keypairId)
        try encoderContainer.encode(region, forKey: .region)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(publicKey, forKey: .publicKey)
        try encoderContainer.encode(fingerPrint, forKey: .fingerPrint)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
public class DeleteKeypairsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteKeypairsResult?;

    enum DeleteKeypairsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteKeypairsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteKeypairsResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteKeypairsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteKeypairsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ImportKeypairsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ImportKeypairsResult?;

    enum ImportKeypairsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImportKeypairsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ImportKeypairsResult?.self, forKey: .result) ?? nil
    }
}

public extension ImportKeypairsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportKeypairsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询基础网络子网
public class DescribeBasicSubnetRequest:JdCloudRequest
{
    /// 可用区, 如cn-east-1a；可调用接口（describeRegiones）获取云物理服务器在该地域支持的可用区
    var az:String


    public init(regionId: String,az:String){
        self.az = az
        super.init(regionId: regionId)
    }


    enum DescribeBasicSubnetRequestRequestCodingKeys: String, CodingKey {
        case az
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBasicSubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(az, forKey: .az)

    }
}

/// 查询基础网络子网 
public class DescribeBasicSubnetResult:NSObject,JdCloudResult
{
    /// 子网详细信息
    var subnet:Subnet?



    public override init(){
        super.init()
    }

    enum DescribeBasicSubnetResultCodingKeys: String, CodingKey {
        case subnet
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBasicSubnetResultCodingKeys.self)
        if decoderContainer.contains(.subnet)
        {
            self.subnet = try decoderContainer.decode(Subnet?.self, forKey: .subnet)
        }
    }
}
public extension DescribeBasicSubnetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBasicSubnetResultCodingKeys.self)
        try encoderContainer.encode(subnet, forKey: .subnet)
    }
}
/// 修改子网 
public class ModifySubnetResult:NSObject,JdCloudResult
{
    /// 子网详细信息
    var subnet:Subnet?



    public override init(){
        super.init()
    }

    enum ModifySubnetResultCodingKeys: String, CodingKey {
        case subnet
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifySubnetResultCodingKeys.self)
        if decoderContainer.contains(.subnet)
        {
            self.subnet = try decoderContainer.decode(Subnet?.self, forKey: .subnet)
        }
    }
}
public extension ModifySubnetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifySubnetResultCodingKeys.self)
        try encoderContainer.encode(subnet, forKey: .subnet)
    }
}
public class CreateSubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSubnetResult?;

    enum CreateSubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeBasicSubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBasicSubnetResult?;

    enum DescribeBasicSubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBasicSubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBasicSubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBasicSubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBasicSubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeSubnetsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSubnetsResult?;

    enum DescribeSubnetsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubnetsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSubnetsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSubnetsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建子网
public class CreateSubnetRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 子网配置
    var subnetSpec:SubnetSpec


    public init(regionId: String,subnetSpec:SubnetSpec){
        self.subnetSpec = subnetSpec
        super.init(regionId: regionId)
    }


    enum CreateSubnetRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case subnetSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(subnetSpec, forKey: .subnetSpec)

    }
}

public class DescribeSubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSubnetResult?;

    enum DescribeSubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除子网
public class DeleteSubnetRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 子网ID
    var subnetId:String


    public init(regionId: String,subnetId:String){
        self.subnetId = subnetId
        super.init(regionId: regionId)
    }


    enum DeleteSubnetRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case subnetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(subnetId, forKey: .subnetId)

    }
}


///  查询子网列表
public class DescribeSubnetsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 可用区，精确匹配
    var az:String?

    /// 子网名称
    var name:String?

    /// 私有网络ID，精确匹配
    var vpcId:String?

    /// subnetId - 子网ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeSubnetsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case az
        case name
        case vpcId
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(az, forKey: .az)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 删除子网 
public class DeleteSubnetResult:NSObject,JdCloudResult
{
    /// 删除操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DeleteSubnetResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSubnetResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DeleteSubnetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubnetResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class DeleteSubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSubnetResult?;

    enum DeleteSubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询子网详情
public class DescribeSubnetRequest:JdCloudRequest
{
    /// 子网ID
    var subnetId:String


    public init(regionId: String,subnetId:String){
        self.subnetId = subnetId
        super.init(regionId: regionId)
    }


    enum DescribeSubnetRequestRequestCodingKeys: String, CodingKey {
        case subnetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(subnetId, forKey: .subnetId)

    }
}

/// 查询子网详情 
public class DescribeSubnetResult:NSObject,JdCloudResult
{
    /// 子网详细信息
    var subnet:Subnet?



    public override init(){
        super.init()
    }

    enum DescribeSubnetResultCodingKeys: String, CodingKey {
        case subnet
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubnetResultCodingKeys.self)
        if decoderContainer.contains(.subnet)
        {
            self.subnet = try decoderContainer.decode(Subnet?.self, forKey: .subnet)
        }
    }
}
public extension DescribeSubnetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetResultCodingKeys.self)
        try encoderContainer.encode(subnet, forKey: .subnet)
    }
}
/// 创建子网 
public class CreateSubnetResult:NSObject,JdCloudResult
{
    /// 子网ID
    var subnetId:String?



    public override init(){
        super.init()
    }

    enum CreateSubnetResultCodingKeys: String, CodingKey {
        case subnetId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubnetResultCodingKeys.self)
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
    }
}
public extension CreateSubnetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubnetResultCodingKeys.self)
        try encoderContainer.encode(subnetId, forKey: .subnetId)
    }
}

///  修改子网
public class ModifySubnetRequest:JdCloudRequest
{
    /// 名称
    var name:String?

    /// 描述
    var descriptionValue:String?

    /// 子网ID
    var subnetId:String


    public init(regionId: String,subnetId:String){
        self.subnetId = subnetId
        super.init(regionId: regionId)
    }


    enum ModifySubnetRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case subnetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifySubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(subnetId, forKey: .subnetId)

    }
}

public class ModifySubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifySubnetResult?;

    enum ModifySubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifySubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifySubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifySubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifySubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询子网列表 
public class DescribeSubnetsResult:NSObject,JdCloudResult
{
    /// Subnets
    var subnets:[Subnet?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeSubnetsResultCodingKeys: String, CodingKey {
        case subnets
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubnetsResultCodingKeys.self)
        if decoderContainer.contains(.subnets)
        {
            self.subnets = try decoderContainer.decode([Subnet?]?.self, forKey: .subnets)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeSubnetsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetsResultCodingKeys.self)
        try encoderContainer.encode(subnets, forKey: .subnets)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  查询弹性公网IP列表&lt;br/&gt;
      ///       /// 支持分页查询，默认每页20条&lt;br/&gt;
      ///       /// 
public class DescribeElasticIpsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 弹性公网IP状态，取值范围：associate、disassociate
    var status:String?

    /// elasticIpId - 弹性公网IPID，精确匹配，支持多个&lt;br/&gt;
      /// elasticIp - 弹性公网IP，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeElasticIpsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case status
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class ModifyElasticIpBandwidthResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyElasticIpBandwidthResult?;

    enum ModifyElasticIpBandwidthResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyElasticIpBandwidthResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyElasticIpBandwidthResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyElasticIpBandwidthResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyElasticIpBandwidthResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ApplyElasticIpsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ApplyElasticIpsResult?;

    enum ApplyElasticIpsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ApplyElasticIpsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ApplyElasticIpsResult?.self, forKey: .result) ?? nil
    }
}

public extension ApplyElasticIpsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ApplyElasticIpsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询弹性公网IP详情 
public class DescribeElasticIpResult:NSObject,JdCloudResult
{
    /// 弹性公网IP详细信息
    var elasticIp:ElasticIp?



    public override init(){
        super.init()
    }

    enum DescribeElasticIpResultCodingKeys: String, CodingKey {
        case elasticIp
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpResultCodingKeys.self)
        if decoderContainer.contains(.elasticIp)
        {
            self.elasticIp = try decoderContainer.decode(ElasticIp?.self, forKey: .elasticIp)
        }
    }
}
public extension DescribeElasticIpResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpResultCodingKeys.self)
        try encoderContainer.encode(elasticIp, forKey: .elasticIp)
    }
}
/// 修改弹性公网IP带宽
      ///       ///  
public class ModifyElasticIpBandwidthResult:NSObject,JdCloudResult
{
    /// 修改带宽是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum ModifyElasticIpBandwidthResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyElasticIpBandwidthResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension ModifyElasticIpBandwidthResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyElasticIpBandwidthResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  申请弹性公网IP
      ///       /// 
public class ApplyElasticIpsRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 弹性公网IP配置
    var elasticIpSpec:ElasticIpSpec


    public init(regionId: String,elasticIpSpec:ElasticIpSpec){
        self.elasticIpSpec = elasticIpSpec
        super.init(regionId: regionId)
    }


    enum ApplyElasticIpsRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case elasticIpSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ApplyElasticIpsRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(elasticIpSpec, forKey: .elasticIpSpec)

    }
}

public class DescribeElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeElasticIpResult?;

    enum DescribeElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeElasticIpsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeElasticIpsResult?;

    enum DescribeElasticIpsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeElasticIpsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeElasticIpsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改弹性公网IP带宽
      ///       /// 
public class ModifyElasticIpBandwidthRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 带宽，单位Mbps，取值范围[1,200]
    var bandwidth:Int

    /// 弹性公网IPID
    var elasticIpId:String


    public init(regionId: String,bandwidth:Int,elasticIpId:String){
        self.bandwidth = bandwidth
        self.elasticIpId = elasticIpId
        super.init(regionId: regionId)
    }


    enum ModifyElasticIpBandwidthRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case bandwidth
        case elasticIpId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyElasticIpBandwidthRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(bandwidth, forKey: .bandwidth)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)

    }
}

/// 查询弹性公网IP列表&lt;br/&gt;
      ///       /// 支持分页查询，默认每页20条&lt;br/&gt;
      ///       ///  
public class DescribeElasticIpsResult:NSObject,JdCloudResult
{
    /// ElasticIps
    var elasticIps:[ElasticIp?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeElasticIpsResultCodingKeys: String, CodingKey {
        case elasticIps
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpsResultCodingKeys.self)
        if decoderContainer.contains(.elasticIps)
        {
            self.elasticIps = try decoderContainer.decode([ElasticIp?]?.self, forKey: .elasticIps)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeElasticIpsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpsResultCodingKeys.self)
        try encoderContainer.encode(elasticIps, forKey: .elasticIps)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 申请弹性公网IP
      ///       ///  
public class ApplyElasticIpsResult:NSObject,JdCloudResult
{
    /// 弹性公网IPID
    var elasticIpIds:[String?]?



    public override init(){
        super.init()
    }

    enum ApplyElasticIpsResultCodingKeys: String, CodingKey {
        case elasticIpIds
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ApplyElasticIpsResultCodingKeys.self)
        if decoderContainer.contains(.elasticIpIds)
        {
            self.elasticIpIds = try decoderContainer.decode([String?]?.self, forKey: .elasticIpIds)
        }
    }
}
public extension ApplyElasticIpsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ApplyElasticIpsResultCodingKeys.self)
        try encoderContainer.encode(elasticIpIds, forKey: .elasticIpIds)
    }
}

///  查询弹性公网IP详情
public class DescribeElasticIpRequest:JdCloudRequest
{
    /// 弹性公网IPID
    var elasticIpId:String


    public init(regionId: String,elasticIpId:String){
        self.elasticIpId = elasticIpId
        super.init(regionId: regionId)
    }


    enum DescribeElasticIpRequestRequestCodingKeys: String, CodingKey {
        case elasticIpId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)

    }
}


///  删除虚拟服务器组
public class DeleteServerGroupRequest:JdCloudRequest
{
    /// 服务器组ID
    var serverGroupId:String


    public init(regionId: String,serverGroupId:String){
        self.serverGroupId = serverGroupId
        super.init(regionId: regionId)
    }


    enum DeleteServerGroupRequestRequestCodingKeys: String, CodingKey {
        case serverGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteServerGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(serverGroupId, forKey: .serverGroupId)

    }
}

/// 创建虚拟服务器组 
public class CreateServerGroupResult:NSObject,JdCloudResult
{
    /// 服务器组ID
    var serverGroupId:String?



    public override init(){
        super.init()
    }

    enum CreateServerGroupResultCodingKeys: String, CodingKey {
        case serverGroupId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateServerGroupResultCodingKeys.self)
        if decoderContainer.contains(.serverGroupId)
        {
            self.serverGroupId = try decoderContainer.decode(String?.self, forKey: .serverGroupId)
        }
    }
}
public extension CreateServerGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateServerGroupResultCodingKeys.self)
        try encoderContainer.encode(serverGroupId, forKey: .serverGroupId)
    }
}
/// 查询虚拟服务器组列表 
public class QueryServerGroupsResult:NSObject,JdCloudResult
{
    /// Servers
    var servers:[ServerGroup?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QueryServerGroupsResultCodingKeys: String, CodingKey {
        case servers
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryServerGroupsResultCodingKeys.self)
        if decoderContainer.contains(.servers)
        {
            self.servers = try decoderContainer.decode([ServerGroup?]?.self, forKey: .servers)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QueryServerGroupsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryServerGroupsResultCodingKeys.self)
        try encoderContainer.encode(servers, forKey: .servers)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class QueryServerGroupsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryServerGroupsResult?;

    enum QueryServerGroupsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryServerGroupsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryServerGroupsResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryServerGroupsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryServerGroupsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除虚拟服务器组 
public class DeleteServerGroupResult:NSObject,JdCloudResult
{
    /// 删除操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DeleteServerGroupResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteServerGroupResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DeleteServerGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteServerGroupResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
/// 修改虚拟服务器组 
public class ModifyServerGroupResult:NSObject,JdCloudResult
{
    /// 负载均衡ID
    var loadBalancerId:String?

    /// 服务器组ID
    var serverGroupId:String?

    /// 名称
    var name:String?



    public override init(){
        super.init()
    }

    enum ModifyServerGroupResultCodingKeys: String, CodingKey {
        case loadBalancerId
        case serverGroupId
        case name
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyServerGroupResultCodingKeys.self)
        if decoderContainer.contains(.loadBalancerId)
        {
            self.loadBalancerId = try decoderContainer.decode(String?.self, forKey: .loadBalancerId)
        }
        if decoderContainer.contains(.serverGroupId)
        {
            self.serverGroupId = try decoderContainer.decode(String?.self, forKey: .serverGroupId)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
    }
}
public extension ModifyServerGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyServerGroupResultCodingKeys.self)
        try encoderContainer.encode(loadBalancerId, forKey: .loadBalancerId)
        try encoderContainer.encode(serverGroupId, forKey: .serverGroupId)
        try encoderContainer.encode(name, forKey: .name)
    }
}

///  创建虚拟服务器组
public class CreateServerGroupRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 虚拟服务器组配置
    var serverGroupSpec:ServerGroupSpec


    public init(regionId: String,serverGroupSpec:ServerGroupSpec){
        self.serverGroupSpec = serverGroupSpec
        super.init(regionId: regionId)
    }


    enum CreateServerGroupRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case serverGroupSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateServerGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(serverGroupSpec, forKey: .serverGroupSpec)

    }
}


///  查询虚拟服务器组
public class QueryServerGroupRequest:JdCloudRequest
{
    /// 服务器组ID
    var serverGroupId:String


    public init(regionId: String,serverGroupId:String){
        self.serverGroupId = serverGroupId
        super.init(regionId: regionId)
    }


    enum QueryServerGroupRequestRequestCodingKeys: String, CodingKey {
        case serverGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryServerGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(serverGroupId, forKey: .serverGroupId)

    }
}

public class QueryServerGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryServerGroupResult?;

    enum QueryServerGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryServerGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryServerGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryServerGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryServerGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改虚拟服务器组
public class ModifyServerGroupRequest:JdCloudRequest
{
    /// 名称
    var name:String?

    /// 服务器组ID
    var serverGroupId:String


    public init(regionId: String,serverGroupId:String){
        self.serverGroupId = serverGroupId
        super.init(regionId: regionId)
    }


    enum ModifyServerGroupRequestRequestCodingKeys: String, CodingKey {
        case name
        case serverGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyServerGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(serverGroupId, forKey: .serverGroupId)

    }
}


///  查询虚拟服务器组列表
public class QueryServerGroupsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 名称
    var name:String?

    /// 负载均衡ID
    var loadBalancerId:String?

    /// serverGroupId   - 虚拟服务器组ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum QueryServerGroupsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case name
        case loadBalancerId
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryServerGroupsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(loadBalancerId, forKey: .loadBalancerId)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class CreateServerGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateServerGroupResult?;

    enum CreateServerGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateServerGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateServerGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateServerGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateServerGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyServerGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyServerGroupResult?;

    enum ModifyServerGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyServerGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyServerGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyServerGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyServerGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询虚拟服务器组 
public class QueryServerGroupResult:NSObject,JdCloudResult
{
    /// 服务器组详细信息
    var serverGroup:ServerGroup?



    public override init(){
        super.init()
    }

    enum QueryServerGroupResultCodingKeys: String, CodingKey {
        case serverGroup
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryServerGroupResultCodingKeys.self)
        if decoderContainer.contains(.serverGroup)
        {
            self.serverGroup = try decoderContainer.decode(ServerGroup?.self, forKey: .serverGroup)
        }
    }
}
public extension QueryServerGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryServerGroupResultCodingKeys.self)
        try encoderContainer.encode(serverGroup, forKey: .serverGroup)
    }
}
public class DeleteServerGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteServerGroupResult?;

    enum DeleteServerGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteServerGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteServerGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteServerGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteServerGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ResetPasswordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResetPasswordResult?;

    enum ResetPasswordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResetPasswordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResetPasswordResult?.self, forKey: .result) ?? nil
    }
}

public extension ResetPasswordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetPasswordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询某种实例类型的云物理服务器支持的RAID类型，可查询系统盘RAID类型和数据盘RAID类型
public class DescribeDeviceRaidsRequest:JdCloudRequest
{
    /// 实例类型，可调用（describeDeviceTypes）接口获取指定地域的实例类型，例如：cps.c.normal
    var deviceType:String

    /// 磁盘类型，取值范围：system、data
    var volumeType:String?


    public init(regionId: String,deviceType:String){
        self.deviceType = deviceType
        super.init(regionId: regionId)
    }


    enum DescribeDeviceRaidsRequestRequestCodingKeys: String, CodingKey {
        case deviceType
        case volumeType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceRaidsRequestRequestCodingKeys.self)
        try encoderContainer.encode(deviceType, forKey: .deviceType)
        try encoderContainer.encode(volumeType, forKey: .volumeType)

    }
}

public class ModifyBandwidthResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyBandwidthResult?;

    enum ModifyBandwidthResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyBandwidthResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyBandwidthResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyBandwidthResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBandwidthResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeInstanceStatusResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceStatusResult?;

    enum DescribeInstanceStatusResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceStatusResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceStatusResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceStatusResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceStatusResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 重装云物理服务器，只能重装stopped状态的服务器&lt;br/&gt;
      ///       /// - 可调用接口（describeOS）获取云物理服务器支持的操作系统列表
      ///       ///  [MFA enabled] 
public class ReinstallInstanceResult:NSObject,JdCloudResult
{
    /// 重装操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum ReinstallInstanceResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReinstallInstanceResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension ReinstallInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReinstallInstanceResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class CreateInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateInstancesResult?;

    enum CreateInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询云物理服务器支持的操作系统
public class DescribeOSRequest:JdCloudRequest
{
    /// 实例类型，可调用接口（describeDeviceTypes）获取指定地域的实例类型，例如：cps.c.normal
    var deviceType:String

    /// 操作系统类型，取值范围：CentOS、Ubuntu
    var osType:String?


    public init(regionId: String,deviceType:String){
        self.deviceType = deviceType
        super.init(regionId: regionId)
    }


    enum DescribeOSRequestRequestCodingKeys: String, CodingKey {
        case deviceType
        case osType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeOSRequestRequestCodingKeys.self)
        try encoderContainer.encode(deviceType, forKey: .deviceType)
        try encoderContainer.encode(osType, forKey: .osType)

    }
}

public class StartInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartInstanceResult?;

    enum StartInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension StartInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建一台或多台指定配置的云物理服务器&lt;br/&gt;
      ///       /// - 地域与可用区&lt;br/&gt;
      ///       ///   - 调用接口（describeRegiones）获取云物理服务器支持的地域与可用区&lt;br/&gt;
      ///       /// - 实例类型&lt;br/&gt;
      ///       ///   - 调用接口（describeDeviceTypes）获取物理实例类型列表&lt;br/&gt;
      ///       ///   - 不能使用已下线、或已售馨的实例类型&lt;br/&gt;
      ///       /// - 操作系统&lt;br/&gt;
      ///       ///   - 可调用接口（describeOS）获取云物理服务器支持的操作系统列表&lt;br/&gt;
      ///       /// - 存储&lt;br/&gt;
      ///       ///   - 数据盘多种RAID可选，可调用接口（describeDeviceRaids）获取服务器支持的RAID列表&lt;br/&gt;
      ///       /// - 网络&lt;br/&gt;
      ///       ///   - 网络类型目前支持basic、vpc&lt;br/&gt;
      ///       ///   - 线路目前只支持bgp&lt;br/&gt;
      ///       ///   - 支持不启用外网，如果启用外网，带宽范围[1,200] 单位Mbps&lt;br/&gt;
      ///       /// - 其他&lt;br/&gt;
      ///       ///   - 购买时长，可按年或月购买：月取值范围[1,9], 年取值范围[1,3]&lt;br/&gt;
      ///       ///   - 密码设置参考公共参数规范&lt;br/&gt;
      ///       ///  
public class CreateInstancesResult:NSObject,JdCloudResult
{
    /// InstanceIds
    var instanceIds:[String?]?



    public override init(){
        super.init()
    }

    enum CreateInstancesResultCodingKeys: String, CodingKey {
        case instanceIds
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstancesResultCodingKeys.self)
        if decoderContainer.contains(.instanceIds)
        {
            self.instanceIds = try decoderContainer.decode([String?]?.self, forKey: .instanceIds)
        }
    }
}
public extension CreateInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstancesResultCodingKeys.self)
        try encoderContainer.encode(instanceIds, forKey: .instanceIds)
    }
}
/// 查询单个云物理服务器已安装的RAID信息，包括系统盘RAID信息和数据盘RAID信息 
public class DescribeInstanceRaidResult:NSObject,JdCloudResult
{
    /// 系统盘RAID类型ID
    var sysRaidTypeId:String?

    /// 系统盘RAID类型
    var sysRaidType:String?

    /// 数据盘RAID类型ID
    var dataRaidTypeId:String?

    /// 数据盘RAID类型
    var dataRaidType:String?



    public override init(){
        super.init()
    }

    enum DescribeInstanceRaidResultCodingKeys: String, CodingKey {
        case sysRaidTypeId
        case sysRaidType
        case dataRaidTypeId
        case dataRaidType
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceRaidResultCodingKeys.self)
        if decoderContainer.contains(.sysRaidTypeId)
        {
            self.sysRaidTypeId = try decoderContainer.decode(String?.self, forKey: .sysRaidTypeId)
        }
        if decoderContainer.contains(.sysRaidType)
        {
            self.sysRaidType = try decoderContainer.decode(String?.self, forKey: .sysRaidType)
        }
        if decoderContainer.contains(.dataRaidTypeId)
        {
            self.dataRaidTypeId = try decoderContainer.decode(String?.self, forKey: .dataRaidTypeId)
        }
        if decoderContainer.contains(.dataRaidType)
        {
            self.dataRaidType = try decoderContainer.decode(String?.self, forKey: .dataRaidType)
        }
    }
}
public extension DescribeInstanceRaidResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceRaidResultCodingKeys.self)
        try encoderContainer.encode(sysRaidTypeId, forKey: .sysRaidTypeId)
        try encoderContainer.encode(sysRaidType, forKey: .sysRaidType)
        try encoderContainer.encode(dataRaidTypeId, forKey: .dataRaidTypeId)
        try encoderContainer.encode(dataRaidType, forKey: .dataRaidType)
    }
}

///  修改云物理服务器部分信息，包括名称、描述
public class ModifyInstanceRequest:JdCloudRequest
{
    /// 云物理服务器名称
    var name:String?

    /// 云物理服务器描述
    var descriptionValue:String?

    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstanceRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询云物理服务器实例类型
public class DescribeDeviceTypesRequest:JdCloudRequest
{
    /// 可用区，精确匹配
    var az:String?




    enum DescribeDeviceTypesRequestRequestCodingKeys: String, CodingKey {
        case az
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceTypesRequestRequestCodingKeys.self)
        try encoderContainer.encode(az, forKey: .az)

    }
}

/// 重置云物理服务器密码
      ///       ///  
public class ResetPasswordResult:NSObject,JdCloudResult
{
    /// 重置结果
    var success:Bool?



    public override init(){
        super.init()
    }

    enum ResetPasswordResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResetPasswordResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension ResetPasswordResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetPasswordResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class DescribeInstanceRaidResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceRaidResult?;

    enum DescribeInstanceRaidResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceRaidResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceRaidResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceRaidResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceRaidResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  升级云物理服务器外网带宽，只能操作running或者stopped状态的服务器&lt;br/&gt;
      ///       /// - 不支持未启用外网的服务器升级带宽
      ///       /// - 外网带宽不支持降级
      ///       /// 
public class ModifyBandwidthRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 外网带宽，单位Mbps，取值范围[1,200]
    var bandwidth:Int

    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,bandwidth:Int,instanceId:String){
        self.bandwidth = bandwidth
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyBandwidthRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case bandwidth
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBandwidthRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(bandwidth, forKey: .bandwidth)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class StopInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopInstanceResult?;

    enum StopInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension StopInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询云物理服务器监控信息
public class DescribeInstanceMonitorInfoRequest:JdCloudRequest
{
    /// 开始时间的时间戳，格式：1562915166551
    var startTime:Int64?

    /// 结束时间的时间戳，格式：1562915166551
    var endTime:Int64?

    /// cps.cpu.util - CPU使用率&lt;br/&gt;
      /// cps.memory.util - 内存使用率&lt;br/&gt;
      /// cps.memory.used - 内存使用量&lt;br/&gt;
      /// cps.disk.used - 磁盘使用量&lt;br/&gt;
      /// cps.disk.util - 磁盘使用率&lt;br/&gt;
      /// cps.disk.bytes.read - 磁盘读流量&lt;br/&gt;
      /// cps.disk.bytes.write - 磁盘写流量&lt;br/&gt;
      /// cps.disk.counts.read - 磁盘读IOPS&lt;br/&gt;
      /// cps.disk.counts.write - 磁盘写IOPS&lt;br/&gt;
      /// cps.network.bytes.ingress - 网卡进流量&lt;br/&gt;
      /// cps.network.bytes.egress - 网卡出流量&lt;br/&gt;
      /// cps.network.packets.ingress - 网络进包量&lt;br/&gt;
      /// cps.network.packets.egress - 网络出包量&lt;br/&gt;
      /// cps.avg.load1 - CPU平均负载1min&lt;br/&gt;
      /// cps.avg.load5 - CPU平均负载5min&lt;br/&gt;
      /// cps.avg.load15 - CPU平均负载15min&lt;br/&gt;
      /// cps.tcp.connect.total - TCP总连接数&lt;br/&gt;
      /// cps.tcp.connect.established - TCP正常连接数&lt;br/&gt;
      /// cps.process.total - 总进程数
      /// 
    var metrics:[String?]?

    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceMonitorInfoRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case metrics
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceMonitorInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(metrics, forKey: .metrics)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询单个云物理服务器已安装的RAID信息，包括系统盘RAID信息和数据盘RAID信息
public class DescribeInstanceRaidRequest:JdCloudRequest
{
    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceRaidRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceRaidRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  重启单台云物理服务器，只能重启running状态的服务器 [MFA enabled]
public class RestartInstanceRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum RestartInstanceRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestartInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class ReinstallInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ReinstallInstanceResult?;

    enum ReinstallInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReinstallInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ReinstallInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension ReinstallInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReinstallInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询云物理服务器实例类型 
public class DescribeDeviceTypesResult:NSObject,JdCloudResult
{
    /// DeviceTypes
    var deviceTypes:[DeviceType?]?



    public override init(){
        super.init()
    }

    enum DescribeDeviceTypesResultCodingKeys: String, CodingKey {
        case deviceTypes
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeviceTypesResultCodingKeys.self)
        if decoderContainer.contains(.deviceTypes)
        {
            self.deviceTypes = try decoderContainer.decode([DeviceType?]?.self, forKey: .deviceTypes)
        }
    }
}
public extension DescribeDeviceTypesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceTypesResultCodingKeys.self)
        try encoderContainer.encode(deviceTypes, forKey: .deviceTypes)
    }
}
public class DescribeDeviceRaidsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDeviceRaidsResult?;

    enum DescribeDeviceRaidsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeviceRaidsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDeviceRaidsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDeviceRaidsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceRaidsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeDeviceTypesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDeviceTypesResult?;

    enum DescribeDeviceTypesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeviceTypesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDeviceTypesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDeviceTypesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceTypesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AssociateElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AssociateElasticIpResult?;

    enum AssociateElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AssociateElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension AssociateElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  批量查询云物理服务器详细信息&lt;br/&gt;
      ///       /// 支持分页查询，默认每页20条&lt;br/&gt;
      ///       /// 
public class DescribeInstancesRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 可用区，精确匹配
    var az:String?

    /// 云物理服务器名称，支持模糊匹配
    var name:String?

    /// 网络类型，精确匹配，支持basic，vpc
    var networkType:String?

    /// 实例类型，精确匹配，调用接口（describeDeviceTypes）获取实例类型
    var deviceType:String?

    /// 子网ID
    var subnetId:String?

    /// 密钥对ID
    var keypairId:String?

    /// 是否启用外网, yes/no
    var enableInternet:String?

    /// instanceId - 云物理服务器ID，精确匹配，支持多个&lt;br/&gt;
      /// privateIp - 云物理服务器内网IP，精确匹配，支持多个&lt;br/&gt;
      /// status - 云物理服务器状态，参考云物理服务器状态，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeInstancesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case az
        case name
        case networkType
        case deviceType
        case subnetId
        case keypairId
        case enableInternet
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(az, forKey: .az)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(networkType, forKey: .networkType)
        try encoderContainer.encode(deviceType, forKey: .deviceType)
        try encoderContainer.encode(subnetId, forKey: .subnetId)
        try encoderContainer.encode(keypairId, forKey: .keypairId)
        try encoderContainer.encode(enableInternet, forKey: .enableInternet)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  创建一台或多台指定配置的云物理服务器&lt;br/&gt;
      ///       /// - 地域与可用区&lt;br/&gt;
      ///       ///   - 调用接口（describeRegiones）获取云物理服务器支持的地域与可用区&lt;br/&gt;
      ///       /// - 实例类型&lt;br/&gt;
      ///       ///   - 调用接口（describeDeviceTypes）获取物理实例类型列表&lt;br/&gt;
      ///       ///   - 不能使用已下线、或已售馨的实例类型&lt;br/&gt;
      ///       /// - 操作系统&lt;br/&gt;
      ///       ///   - 可调用接口（describeOS）获取云物理服务器支持的操作系统列表&lt;br/&gt;
      ///       /// - 存储&lt;br/&gt;
      ///       ///   - 数据盘多种RAID可选，可调用接口（describeDeviceRaids）获取服务器支持的RAID列表&lt;br/&gt;
      ///       /// - 网络&lt;br/&gt;
      ///       ///   - 网络类型目前支持basic、vpc&lt;br/&gt;
      ///       ///   - 线路目前只支持bgp&lt;br/&gt;
      ///       ///   - 支持不启用外网，如果启用外网，带宽范围[1,200] 单位Mbps&lt;br/&gt;
      ///       /// - 其他&lt;br/&gt;
      ///       ///   - 购买时长，可按年或月购买：月取值范围[1,9], 年取值范围[1,3]&lt;br/&gt;
      ///       ///   - 密码设置参考公共参数规范&lt;br/&gt;
      ///       /// 
public class CreateInstancesRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 描述云物理服务器配置
    var instanceSpec:InstanceSpec


    public init(regionId: String,instanceSpec:InstanceSpec){
        self.instanceSpec = instanceSpec
        super.init(regionId: regionId)
    }


    enum CreateInstancesRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case instanceSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(instanceSpec, forKey: .instanceSpec)

    }
}

public class DescribeInstanceNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceNameResult?;

    enum DescribeInstanceNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceNameResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  解绑弹性公网IP
      ///       /// 
public class DisassociateElasticIpRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 弹性公网IPId
    var elasticIpId:String

    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,elasticIpId:String,instanceId:String){
        self.elasticIpId = elasticIpId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DisassociateElasticIpRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case elasticIpId
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  重置云物理服务器密码
      ///       /// 
public class ResetPasswordRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 密码
    var password:String

    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,password:String,instanceId:String){
        self.password = password
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ResetPasswordRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case password
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetPasswordRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(password, forKey: .password)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询单台云物理服务器详细信息
public class DescribeInstanceRequest:JdCloudRequest
{
    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 修改云物理服务器部分信息，包括名称、描述 
public class ModifyInstanceResult:NSObject,JdCloudResult
{
    /// 云物理服务器名称
    var name:String?

    /// 云物理服务器描述
    var descriptionValue:String?



    public override init(){
        super.init()
    }

    enum ModifyInstanceResultCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceResultCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
    }
}
public extension ModifyInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceResultCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
    }
}
/// 绑定弹性公网IP
      ///       ///  
public class AssociateElasticIpResult:NSObject,JdCloudResult
{
    /// 绑定结果
    var success:Bool?



    public override init(){
        super.init()
    }

    enum AssociateElasticIpResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateElasticIpResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension AssociateElasticIpResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  对单台云物理服务器执行关机操作，只能停止running状态的服务器 [MFA enabled]
public class StopInstanceRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum StopInstanceRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeInstanceMonitorInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceMonitorInfoResult?;

    enum DescribeInstanceMonitorInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceMonitorInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceMonitorInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceMonitorInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceMonitorInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  对单台云物理服务器执行开机操作，只能启动stopped状态的服务器
public class StartInstanceRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum StartInstanceRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  重装云物理服务器，只能重装stopped状态的服务器&lt;br/&gt;
      ///       /// - 可调用接口（describeOS）获取云物理服务器支持的操作系统列表
      ///       ///  [MFA enabled]
public class ReinstallInstanceRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 云物理服务器配置
    var instanceSpec:ReinstallInstanceSpec

    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceSpec:ReinstallInstanceSpec,instanceId:String){
        self.instanceSpec = instanceSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ReinstallInstanceRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case instanceSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReinstallInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(instanceSpec, forKey: .instanceSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 查询某种实例类型的云物理服务器支持的RAID类型，可查询系统盘RAID类型和数据盘RAID类型 
public class DescribeDeviceRaidsResult:NSObject,JdCloudResult
{
    /// Raids
    var raids:[Raid?]?



    public override init(){
        super.init()
    }

    enum DescribeDeviceRaidsResultCodingKeys: String, CodingKey {
        case raids
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeviceRaidsResultCodingKeys.self)
        if decoderContainer.contains(.raids)
        {
            self.raids = try decoderContainer.decode([Raid?]?.self, forKey: .raids)
        }
    }
}
public extension DescribeDeviceRaidsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeviceRaidsResultCodingKeys.self)
        try encoderContainer.encode(raids, forKey: .raids)
    }
}
/// 批量查询云物理服务器详细信息&lt;br/&gt;
      ///       /// 支持分页查询，默认每页20条&lt;br/&gt;
      ///       ///  
public class DescribeInstancesResult:NSObject,JdCloudResult
{
    /// Instances
    var instances:[Instance?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeInstancesResultCodingKeys: String, CodingKey {
        case instances
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        if decoderContainer.contains(.instances)
        {
            self.instances = try decoderContainer.decode([Instance?]?.self, forKey: .instances)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        try encoderContainer.encode(instances, forKey: .instances)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 查询云物理服务器支持的操作系统 
public class DescribeOSResult:NSObject,JdCloudResult
{
    /// Oss
    var oss:[Os?]?



    public override init(){
        super.init()
    }

    enum DescribeOSResultCodingKeys: String, CodingKey {
        case oss
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeOSResultCodingKeys.self)
        if decoderContainer.contains(.oss)
        {
            self.oss = try decoderContainer.decode([Os?]?.self, forKey: .oss)
        }
    }
}
public extension DescribeOSResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeOSResultCodingKeys.self)
        try encoderContainer.encode(oss, forKey: .oss)
    }
}
/// 查询单台云物理服务器详细信息 
public class DescribeInstanceResult:NSObject,JdCloudResult
{
    /// Instance
    var instance:Instance?



    public override init(){
        super.init()
    }

    enum DescribeInstanceResultCodingKeys: String, CodingKey {
        case instance
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceResultCodingKeys.self)
        if decoderContainer.contains(.instance)
        {
            self.instance = try decoderContainer.decode(Instance?.self, forKey: .instance)
        }
    }
}
public extension DescribeInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceResultCodingKeys.self)
        try encoderContainer.encode(instance, forKey: .instance)
    }
}

///  绑定弹性公网IP
      ///       /// 
public class AssociateElasticIpRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 弹性公网IPID
    var elasticIpId:String

    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,elasticIpId:String,instanceId:String){
        self.elasticIpId = elasticIpId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum AssociateElasticIpRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case elasticIpId
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 对单台云物理服务器执行开机操作，只能启动stopped状态的服务器 
public class StartInstanceResult:NSObject,JdCloudResult
{
    /// 开机操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum StartInstanceResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartInstanceResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension StartInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartInstanceResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class DescribeOSResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeOSResult?;

    enum DescribeOSResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeOSResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeOSResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeOSResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeOSResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstanceResult?;

    enum ModifyInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceResult?;

    enum DescribeInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class RestartInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RestartInstanceResult?;

    enum RestartInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RestartInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RestartInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension RestartInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestartInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询云物理服务器名称
public class DescribeInstanceNameRequest:JdCloudRequest
{
    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceNameRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 解绑弹性公网IP
      ///       ///  
public class DisassociateElasticIpResult:NSObject,JdCloudResult
{
    /// 解绑结果
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DisassociateElasticIpResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisassociateElasticIpResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DisassociateElasticIpResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  查询单个云物理服务器硬件监控信息
public class DescribeInstanceStatusRequest:JdCloudRequest
{
    /// 云物理服务器ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceStatusRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceStatusRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 重启单台云物理服务器，只能重启running状态的服务器 [MFA enabled] 
public class RestartInstanceResult:NSObject,JdCloudResult
{
    /// 重启操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum RestartInstanceResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RestartInstanceResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension RestartInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestartInstanceResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
/// 查询云物理服务器名称 
public class DescribeInstanceNameResult:NSObject,JdCloudResult
{
    /// 云物理服务器名称
    var name:String?



    public override init(){
        super.init()
    }

    enum DescribeInstanceNameResultCodingKeys: String, CodingKey {
        case name
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceNameResultCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
    }
}
public extension DescribeInstanceNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceNameResultCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
    }
}
/// 查询云物理服务器监控信息 
public class DescribeInstanceMonitorInfoResult:NSObject,JdCloudResult
{
    /// 云物理服务器监控信息
    var metricDatas:MetricData?



    public override init(){
        super.init()
    }

    enum DescribeInstanceMonitorInfoResultCodingKeys: String, CodingKey {
        case metricDatas
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceMonitorInfoResultCodingKeys.self)
        if decoderContainer.contains(.metricDatas)
        {
            self.metricDatas = try decoderContainer.decode(MetricData?.self, forKey: .metricDatas)
        }
    }
}
public extension DescribeInstanceMonitorInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceMonitorInfoResultCodingKeys.self)
        try encoderContainer.encode(metricDatas, forKey: .metricDatas)
    }
}
/// 升级云物理服务器外网带宽，只能操作running或者stopped状态的服务器&lt;br/&gt;
      ///       /// - 不支持未启用外网的服务器升级带宽
      ///       /// - 外网带宽不支持降级
      ///       ///  
public class ModifyBandwidthResult:NSObject,JdCloudResult
{
    /// 升级带宽是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum ModifyBandwidthResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyBandwidthResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension ModifyBandwidthResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBandwidthResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class DisassociateElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisassociateElasticIpResult?;

    enum DisassociateElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisassociateElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisassociateElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DisassociateElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询单个云物理服务器硬件监控信息 
public class DescribeInstanceStatusResult:NSObject,JdCloudResult
{
    /// CPU状态是否正常
    var cpus:Bool?

    /// 内存状态是否正常
    var mems:Bool?

    /// 硬盘状态是否正常
    var disks:Bool?

    /// 网卡状态是否正常
    var nics:Bool?



    public override init(){
        super.init()
    }

    enum DescribeInstanceStatusResultCodingKeys: String, CodingKey {
        case cpus
        case mems
        case disks
        case nics
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceStatusResultCodingKeys.self)
        if decoderContainer.contains(.cpus)
        {
            self.cpus = try decoderContainer.decode(Bool?.self, forKey: .cpus)
        }
        if decoderContainer.contains(.mems)
        {
            self.mems = try decoderContainer.decode(Bool?.self, forKey: .mems)
        }
        if decoderContainer.contains(.disks)
        {
            self.disks = try decoderContainer.decode(Bool?.self, forKey: .disks)
        }
        if decoderContainer.contains(.nics)
        {
            self.nics = try decoderContainer.decode(Bool?.self, forKey: .nics)
        }
    }
}
public extension DescribeInstanceStatusResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceStatusResultCodingKeys.self)
        try encoderContainer.encode(cpus, forKey: .cpus)
        try encoderContainer.encode(mems, forKey: .mems)
        try encoderContainer.encode(disks, forKey: .disks)
        try encoderContainer.encode(nics, forKey: .nics)
    }
}
public class DescribeInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstancesResult?;

    enum DescribeInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 对单台云物理服务器执行关机操作，只能停止running状态的服务器 [MFA enabled] 
public class StopInstanceResult:NSObject,JdCloudResult
{
    /// 关机操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum StopInstanceResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopInstanceResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension StopInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopInstanceResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  创建负载均衡实例
public class CreateLoadBalancerRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 负载均衡配置
    var loadBalancerSpec:LoadBalancerSpec


    public init(regionId: String,loadBalancerSpec:LoadBalancerSpec){
        self.loadBalancerSpec = loadBalancerSpec
        super.init(regionId: regionId)
    }


    enum CreateLoadBalancerRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case loadBalancerSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateLoadBalancerRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(loadBalancerSpec, forKey: .loadBalancerSpec)

    }
}

/// 解绑弹性公网IP 
public class DisassociateElasticIpLBResult:NSObject,JdCloudResult
{
    /// 解绑结果
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DisassociateElasticIpLBResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisassociateElasticIpLBResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DisassociateElasticIpLBResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpLBResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class CreateLoadBalancerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateLoadBalancerResult?;

    enum CreateLoadBalancerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateLoadBalancerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateLoadBalancerResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateLoadBalancerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateLoadBalancerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改负载均衡实例 
public class ModifyLoadBalancerResult:NSObject,JdCloudResult
{
    /// 负载均衡实例详细信息
    var loadBalancer:LoadBalancer?



    public override init(){
        super.init()
    }

    enum ModifyLoadBalancerResultCodingKeys: String, CodingKey {
        case loadBalancer
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyLoadBalancerResultCodingKeys.self)
        if decoderContainer.contains(.loadBalancer)
        {
            self.loadBalancer = try decoderContainer.decode(LoadBalancer?.self, forKey: .loadBalancer)
        }
    }
}
public extension ModifyLoadBalancerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyLoadBalancerResultCodingKeys.self)
        try encoderContainer.encode(loadBalancer, forKey: .loadBalancer)
    }
}
public class QueryLoadBalancerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryLoadBalancerResult?;

    enum QueryLoadBalancerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryLoadBalancerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryLoadBalancerResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryLoadBalancerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryLoadBalancerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 关闭负载均衡实例 
public class StopLoadBalancerResult:NSObject,JdCloudResult
{
    /// 关闭负载均衡实例是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum StopLoadBalancerResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopLoadBalancerResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension StopLoadBalancerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopLoadBalancerResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  绑定弹性公网IP
public class AssociateElasticIpLBRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 弹性公网IPId
    var elasticIpId:String

    /// 负载均衡实例ID
    var loadBalancerId:String


    public init(regionId: String,elasticIpId:String,loadBalancerId:String){
        self.elasticIpId = elasticIpId
        self.loadBalancerId = loadBalancerId
        super.init(regionId: regionId)
    }


    enum AssociateElasticIpLBRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case elasticIpId
        case loadBalancerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpLBRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(loadBalancerId, forKey: .loadBalancerId)

    }
}

public class StopLoadBalancerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopLoadBalancerResult?;

    enum StopLoadBalancerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopLoadBalancerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopLoadBalancerResult?.self, forKey: .result) ?? nil
    }
}

public extension StopLoadBalancerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopLoadBalancerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class StartLoadBalancerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartLoadBalancerResult?;

    enum StartLoadBalancerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartLoadBalancerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartLoadBalancerResult?.self, forKey: .result) ?? nil
    }
}

public extension StartLoadBalancerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartLoadBalancerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 绑定弹性公网IP 
public class AssociateElasticIpLBResult:NSObject,JdCloudResult
{
    /// 绑定结果
    var success:Bool?



    public override init(){
        super.init()
    }

    enum AssociateElasticIpLBResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateElasticIpLBResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension AssociateElasticIpLBResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpLBResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  解绑弹性公网IP
public class DisassociateElasticIpLBRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 弹性公网IPId
    var elasticIpId:String

    /// 负载均衡实例ID
    var loadBalancerId:String


    public init(regionId: String,elasticIpId:String,loadBalancerId:String){
        self.elasticIpId = elasticIpId
        self.loadBalancerId = loadBalancerId
        super.init(regionId: regionId)
    }


    enum DisassociateElasticIpLBRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case elasticIpId
        case loadBalancerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpLBRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(loadBalancerId, forKey: .loadBalancerId)

    }
}

public class ModifyLoadBalancerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyLoadBalancerResult?;

    enum ModifyLoadBalancerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyLoadBalancerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyLoadBalancerResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyLoadBalancerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyLoadBalancerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询负载均衡实例详情
public class QueryLoadBalancerRequest:JdCloudRequest
{
    /// 负载均衡实例ID
    var loadBalancerId:String


    public init(regionId: String,loadBalancerId:String){
        self.loadBalancerId = loadBalancerId
        super.init(regionId: regionId)
    }


    enum QueryLoadBalancerRequestRequestCodingKeys: String, CodingKey {
        case loadBalancerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryLoadBalancerRequestRequestCodingKeys.self)
        try encoderContainer.encode(loadBalancerId, forKey: .loadBalancerId)

    }
}

/// 开启负载均衡实例 
public class StartLoadBalancerResult:NSObject,JdCloudResult
{
    /// 开启负载均衡实例是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum StartLoadBalancerResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartLoadBalancerResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension StartLoadBalancerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartLoadBalancerResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  开启负载均衡实例
public class StartLoadBalancerRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 负载均衡实例ID
    var loadBalancerId:String


    public init(regionId: String,loadBalancerId:String){
        self.loadBalancerId = loadBalancerId
        super.init(regionId: regionId)
    }


    enum StartLoadBalancerRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case loadBalancerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartLoadBalancerRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(loadBalancerId, forKey: .loadBalancerId)

    }
}

/// 查询负载均衡实例详情 
public class QueryLoadBalancerResult:NSObject,JdCloudResult
{
    /// 负载均衡实例详细信息
    var loadBalancer:LoadBalancer?



    public override init(){
        super.init()
    }

    enum QueryLoadBalancerResultCodingKeys: String, CodingKey {
        case loadBalancer
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryLoadBalancerResultCodingKeys.self)
        if decoderContainer.contains(.loadBalancer)
        {
            self.loadBalancer = try decoderContainer.decode(LoadBalancer?.self, forKey: .loadBalancer)
        }
    }
}
public extension QueryLoadBalancerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryLoadBalancerResultCodingKeys.self)
        try encoderContainer.encode(loadBalancer, forKey: .loadBalancer)
    }
}

///  关闭负载均衡实例
public class StopLoadBalancerRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 负载均衡实例ID
    var loadBalancerId:String


    public init(regionId: String,loadBalancerId:String){
        self.loadBalancerId = loadBalancerId
        super.init(regionId: regionId)
    }


    enum StopLoadBalancerRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case loadBalancerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopLoadBalancerRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(loadBalancerId, forKey: .loadBalancerId)

    }
}

/// 查询负载均衡实例列表 
public class QueryLoadBalancersResult:NSObject,JdCloudResult
{
    /// LoadBalancers
    var loadBalancers:[LoadBalancer?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QueryLoadBalancersResultCodingKeys: String, CodingKey {
        case loadBalancers
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryLoadBalancersResultCodingKeys.self)
        if decoderContainer.contains(.loadBalancers)
        {
            self.loadBalancers = try decoderContainer.decode([LoadBalancer?]?.self, forKey: .loadBalancers)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QueryLoadBalancersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryLoadBalancersResultCodingKeys.self)
        try encoderContainer.encode(loadBalancers, forKey: .loadBalancers)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  查询负载均衡实例列表
public class QueryLoadBalancersRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 状态
    var status:String?

    /// 名称
    var name:String?

    /// 私有网络ID，精确匹配
    var vpcId:String?

    /// 是否绑定eip
    var bindEip:Bool?

    /// loadBalancerId - 负载均衡实例ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum QueryLoadBalancersRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case status
        case name
        case vpcId
        case bindEip
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryLoadBalancersRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(bindEip, forKey: .bindEip)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class AssociateElasticIpLBResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AssociateElasticIpLBResult?;

    enum AssociateElasticIpLBResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateElasticIpLBResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AssociateElasticIpLBResult?.self, forKey: .result) ?? nil
    }
}

public extension AssociateElasticIpLBResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpLBResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DisassociateElasticIpLBResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisassociateElasticIpLBResult?;

    enum DisassociateElasticIpLBResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisassociateElasticIpLBResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisassociateElasticIpLBResult?.self, forKey: .result) ?? nil
    }
}

public extension DisassociateElasticIpLBResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpLBResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建负载均衡实例 
public class CreateLoadBalancerResult:NSObject,JdCloudResult
{
    /// 负载均衡实例ID
    var loadBalancerId:String?



    public override init(){
        super.init()
    }

    enum CreateLoadBalancerResultCodingKeys: String, CodingKey {
        case loadBalancerId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateLoadBalancerResultCodingKeys.self)
        if decoderContainer.contains(.loadBalancerId)
        {
            self.loadBalancerId = try decoderContainer.decode(String?.self, forKey: .loadBalancerId)
        }
    }
}
public extension CreateLoadBalancerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateLoadBalancerResultCodingKeys.self)
        try encoderContainer.encode(loadBalancerId, forKey: .loadBalancerId)
    }
}
public class QueryLoadBalancersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryLoadBalancersResult?;

    enum QueryLoadBalancersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryLoadBalancersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryLoadBalancersResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryLoadBalancersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryLoadBalancersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改负载均衡实例
public class ModifyLoadBalancerRequest:JdCloudRequest
{
    /// 名称
    var name:String?

    /// 描述
    var descriptionValue:String?

    /// 负载均衡实例ID
    var loadBalancerId:String


    public init(regionId: String,loadBalancerId:String){
        self.loadBalancerId = loadBalancerId
        super.init(regionId: regionId)
    }


    enum ModifyLoadBalancerRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case loadBalancerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyLoadBalancerRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(loadBalancerId, forKey: .loadBalancerId)

    }
}


///  查询私有网络列表
public class DescribeVpcsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 私有网络名称
    var name:String?

    /// vpcId - 私有网络ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeVpcsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case name
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 修改私有网络
      ///       ///  
public class ModifyVpcResult:NSObject,JdCloudResult
{
    /// 私有网络详细信息
    var vpc:Vpc?



    public override init(){
        super.init()
    }

    enum ModifyVpcResultCodingKeys: String, CodingKey {
        case vpc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyVpcResultCodingKeys.self)
        if decoderContainer.contains(.vpc)
        {
            self.vpc = try decoderContainer.decode(Vpc?.self, forKey: .vpc)
        }
    }
}
public extension ModifyVpcResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyVpcResultCodingKeys.self)
        try encoderContainer.encode(vpc, forKey: .vpc)
    }
}

///  修改私有网络
      ///       /// 
public class ModifyVpcRequest:JdCloudRequest
{
    /// 名称
    var name:String?

    /// 描述
    var descriptionValue:String?

    /// 私有网络ID
    var vpcId:String


    public init(regionId: String,vpcId:String){
        self.vpcId = vpcId
        super.init(regionId: regionId)
    }


    enum ModifyVpcRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case vpcId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyVpcRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(vpcId, forKey: .vpcId)

    }
}

public class CreateVpcResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVpcResult?;

    enum CreateVpcResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVpcResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVpcResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeVpcResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeVpcResult?;

    enum DescribeVpcResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeVpcResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeVpcResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建私有网络
public class CreateVpcRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 子网配置
    var vpcSpec:VpcSpec


    public init(regionId: String,vpcSpec:VpcSpec){
        self.vpcSpec = vpcSpec
        super.init(regionId: regionId)
    }


    enum CreateVpcRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case vpcSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(vpcSpec, forKey: .vpcSpec)

    }
}


///  查询私有网络详情
public class DescribeVpcRequest:JdCloudRequest
{
    /// 私有网络ID
    var vpcId:String


    public init(regionId: String,vpcId:String){
        self.vpcId = vpcId
        super.init(regionId: regionId)
    }


    enum DescribeVpcRequestRequestCodingKeys: String, CodingKey {
        case vpcId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcId, forKey: .vpcId)

    }
}

/// 创建私有网络 
public class CreateVpcResult:NSObject,JdCloudResult
{
    /// 私有网络ID
    var vpcId:String?



    public override init(){
        super.init()
    }

    enum CreateVpcResultCodingKeys: String, CodingKey {
        case vpcId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcResultCodingKeys.self)
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
    }
}
public extension CreateVpcResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcResultCodingKeys.self)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
    }
}
public class ModifyVpcResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyVpcResult?;

    enum ModifyVpcResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyVpcResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyVpcResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyVpcResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyVpcResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除私有网络
      ///       /// 
public class DeleteVpcRequest:JdCloudRequest
{
    /// 由客户端生成，用于保证请求的幂等性，长度不能超过36个字符；&lt;br/&gt;
      /// 如果多个请求使用了相同的clientToken，只会执行第一个请求，之后的请求直接返回第一个请求的结果&lt;br/&gt;
      /// 
    var clientToken:String?

    /// 私有网络ID
    var vpcId:String


    public init(regionId: String,vpcId:String){
        self.vpcId = vpcId
        super.init(regionId: regionId)
    }


    enum DeleteVpcRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case vpcId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcRequestRequestCodingKeys.self)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(vpcId, forKey: .vpcId)

    }
}

/// 删除私有网络
      ///       ///  
public class DeleteVpcResult:NSObject,JdCloudResult
{
    /// 删除操作是否成功
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DeleteVpcResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVpcResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DeleteVpcResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class DeleteVpcResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVpcResult?;

    enum DeleteVpcResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVpcResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVpcResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVpcResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询私有网络列表 
public class DescribeVpcsResult:NSObject,JdCloudResult
{
    /// Vpcs
    var vpcs:[Vpc?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeVpcsResultCodingKeys: String, CodingKey {
        case vpcs
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcsResultCodingKeys.self)
        if decoderContainer.contains(.vpcs)
        {
            self.vpcs = try decoderContainer.decode([Vpc?]?.self, forKey: .vpcs)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeVpcsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcsResultCodingKeys.self)
        try encoderContainer.encode(vpcs, forKey: .vpcs)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 查询私有网络详情 
public class DescribeVpcResult:NSObject,JdCloudResult
{
    /// 私有网络详细信息
    var vpc:Vpc?



    public override init(){
        super.init()
    }

    enum DescribeVpcResultCodingKeys: String, CodingKey {
        case vpc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcResultCodingKeys.self)
        if decoderContainer.contains(.vpc)
        {
            self.vpc = try decoderContainer.decode(Vpc?.self, forKey: .vpc)
        }
    }
}
public extension DescribeVpcResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcResultCodingKeys.self)
        try encoderContainer.encode(vpc, forKey: .vpc)
    }
}
public class DescribeVpcsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeVpcsResult?;

    enum DescribeVpcsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeVpcsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeVpcsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QueryCPSLBRegionsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryCPSLBRegionsResult?;

    enum QueryCPSLBRegionsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryCPSLBRegionsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryCPSLBRegionsResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryCPSLBRegionsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryCPSLBRegionsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询云物理服务器地域列表
public class DescribeRegionesRequest:JdCloudRequest
{
    /// 网络类型basic/vpc, 默认basic
    var networkType:String?




    enum DescribeRegionesRequestRequestCodingKeys: String, CodingKey {
        case networkType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRegionesRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkType, forKey: .networkType)

    }
}


///  查询负载均衡地域列表
public class QueryCPSLBRegionsRequest:JdCloudRequest
{
}

/// 查询云物理服务器地域列表 
public class DescribeRegionesResult:NSObject,JdCloudResult
{
    /// Regions
    var regions:[Region?]?



    public override init(){
        super.init()
    }

    enum DescribeRegionesResultCodingKeys: String, CodingKey {
        case regions
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRegionesResultCodingKeys.self)
        if decoderContainer.contains(.regions)
        {
            self.regions = try decoderContainer.decode([Region?]?.self, forKey: .regions)
        }
    }
}
public extension DescribeRegionesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRegionesResultCodingKeys.self)
        try encoderContainer.encode(regions, forKey: .regions)
    }
}
/// 查询负载均衡地域列表 
public class QueryCPSLBRegionsResult:NSObject,JdCloudResult
{
    /// Regions
    var regions:[Region?]?



    public override init(){
        super.init()
    }

    enum QueryCPSLBRegionsResultCodingKeys: String, CodingKey {
        case regions
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryCPSLBRegionsResultCodingKeys.self)
        if decoderContainer.contains(.regions)
        {
            self.regions = try decoderContainer.decode([Region?]?.self, forKey: .regions)
        }
    }
}
public extension QueryCPSLBRegionsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryCPSLBRegionsResultCodingKeys.self)
        try encoderContainer.encode(regions, forKey: .regions)
    }
}
public class DescribeRegionesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeRegionesResult?;

    enum DescribeRegionesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRegionesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeRegionesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeRegionesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRegionesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
