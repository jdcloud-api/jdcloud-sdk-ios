/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云物理服务器
   云物理服务器弹性公网IP操作相关的接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询弹性公网IP列表&lt;br/&gt;
      ///       /// 支持分页查询，默认每页20条&lt;br/&gt;
      ///       /// 
@objc(DescribeElasticIpsResult)
public class DescribeElasticIpsResult:NSObject,JdCloudResult
{
    /// ElasticIps
    var elasticIps:[ElasticIp?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[20, 100]
    var pageSize:Int?

    /// 查询结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeElasticIpsResultCodingKeys: String, CodingKey {
        case elasticIps
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpsResultCodingKeys.self)
        if decoderContainer.contains(.elasticIps)
        {
            self.elasticIps = try decoderContainer.decode([ElasticIp?]?.self, forKey: .elasticIps)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeElasticIpsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpsResultCodingKeys.self)
        try encoderContainer.encode(elasticIps, forKey: .elasticIps)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
