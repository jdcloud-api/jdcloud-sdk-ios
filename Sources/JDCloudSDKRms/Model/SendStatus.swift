/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  sendStatus
@objc(SendStatus)
public class SendStatus:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 应用ID
    var appId:String?
    /// 任务序列号
    var sequenceNumber:String?
    /// 短信ID
    var templateId:String?
    /// 手机号
    var mobileNum:String?
    /// 发送状态 -1：初始状态；0：成功发送到网关；1：下载成功；2：发送失败；3：未发送至网关，过期失败；4：发送到网关，过期失败
    var stateFlag:Int?
    /// 发送时间 yyyy-MM-dd HH:mm:ss
    var sendTime:String?



    public override init(){
            super.init()
    }

    enum SendStatusCodingKeys: String, CodingKey {
        case pin
        case appId
        case sequenceNumber
        case templateId
        case mobileNum
        case stateFlag
        case sendTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SendStatusCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.appId)
        {
            self.appId = try decoderContainer.decode(String?.self, forKey: .appId)
        }
        if decoderContainer.contains(.sequenceNumber)
        {
            self.sequenceNumber = try decoderContainer.decode(String?.self, forKey: .sequenceNumber)
        }
        if decoderContainer.contains(.templateId)
        {
            self.templateId = try decoderContainer.decode(String?.self, forKey: .templateId)
        }
        if decoderContainer.contains(.mobileNum)
        {
            self.mobileNum = try decoderContainer.decode(String?.self, forKey: .mobileNum)
        }
        if decoderContainer.contains(.stateFlag)
        {
            self.stateFlag = try decoderContainer.decode(Int?.self, forKey: .stateFlag)
        }
        if decoderContainer.contains(.sendTime)
        {
            self.sendTime = try decoderContainer.decode(String?.self, forKey: .sendTime)
        }
    }
}
public extension SendStatus{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SendStatusCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(appId, forKey: .appId)
         try encoderContainer.encode(sequenceNumber, forKey: .sequenceNumber)
         try encoderContainer.encode(templateId, forKey: .templateId)
         try encoderContainer.encode(mobileNum, forKey: .mobileNum)
         try encoderContainer.encode(stateFlag, forKey: .stateFlag)
         try encoderContainer.encode(sendTime, forKey: .sendTime)
    }
}
