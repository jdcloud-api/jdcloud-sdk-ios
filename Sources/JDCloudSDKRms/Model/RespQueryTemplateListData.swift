/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  respQueryTemplateListData
@objc(RespQueryTemplateListData)
public class RespQueryTemplateListData:NSObject,Codable{
    /// 短信ID
    var templateId:String?
    /// 短信标题
    var title:String?
    /// 审核状态 0: 审核中 1: 通过 2: 未通过 4:待提交
    var status:String?
    /// 审核未通过原因
    var reason:String?
    /// 短信创建时间 yyyy-MM-dd HH:mm:ss
    var createTime:String?
    /// 短信内容大小
    var contentSize:String?
    /// 资质Id
    var aptitudesId:String?
    /// 短信描述
    var descriptionValue:String?



    public override init(){
            super.init()
    }

    enum RespQueryTemplateListDataCodingKeys: String, CodingKey {
        case templateId
        case title
        case status
        case reason
        case createTime
        case contentSize
        case aptitudesId
        case descriptionValue = "description"
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RespQueryTemplateListDataCodingKeys.self)
        if decoderContainer.contains(.templateId)
        {
            self.templateId = try decoderContainer.decode(String?.self, forKey: .templateId)
        }
        if decoderContainer.contains(.title)
        {
            self.title = try decoderContainer.decode(String?.self, forKey: .title)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.reason)
        {
            self.reason = try decoderContainer.decode(String?.self, forKey: .reason)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.contentSize)
        {
            self.contentSize = try decoderContainer.decode(String?.self, forKey: .contentSize)
        }
        if decoderContainer.contains(.aptitudesId)
        {
            self.aptitudesId = try decoderContainer.decode(String?.self, forKey: .aptitudesId)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
    }
}
public extension RespQueryTemplateListData{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RespQueryTemplateListDataCodingKeys.self)
         try encoderContainer.encode(templateId, forKey: .templateId)
         try encoderContainer.encode(title, forKey: .title)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(reason, forKey: .reason)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(contentSize, forKey: .contentSize)
         try encoderContainer.encode(aptitudesId, forKey: .aptitudesId)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
    }
}
