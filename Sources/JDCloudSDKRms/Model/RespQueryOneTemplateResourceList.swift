/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  respQueryOneTemplateResourceList
@objc(RespQueryOneTemplateResourceList)
public class RespQueryOneTemplateResourceList:NSObject,Codable{
    /// size参数
    var size:String?
    /// name参数
    var name:String?
    /// type参数
    var type:String?
    /// url参数
    var url:String?
    /// content参数
    var content:String?



    public override init(){
            super.init()
    }

    enum RespQueryOneTemplateResourceListCodingKeys: String, CodingKey {
        case size
        case name
        case type
        case url
        case content
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RespQueryOneTemplateResourceListCodingKeys.self)
        if decoderContainer.contains(.size)
        {
            self.size = try decoderContainer.decode(String?.self, forKey: .size)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(String?.self, forKey: .type)
        }
        if decoderContainer.contains(.url)
        {
            self.url = try decoderContainer.decode(String?.self, forKey: .url)
        }
        if decoderContainer.contains(.content)
        {
            self.content = try decoderContainer.decode(String?.self, forKey: .content)
        }
    }
}
public extension RespQueryOneTemplateResourceList{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RespQueryOneTemplateResourceListCodingKeys.self)
         try encoderContainer.encode(size, forKey: .size)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(url, forKey: .url)
         try encoderContainer.encode(content, forKey: .content)
    }
}
