/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   短信内容接口
   API related to  Template

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  增加富媒体短信内容接口
@objc(AddTemplateRequest)
public class AddTemplateRequest:JdCloudRequest
{
    /// appId参数
    var appId:String?

    /// signType参数
    var signType:String?

    /// purpose参数
    var purpose:String?

    /// signCardType参数
    var signCardType:String?

    /// aptitudes参数
    var aptitudes:String?

    /// title参数
    var title:String?

    /// description参数
    var descriptionValue:String?

    /// isTuiding参数
    var isTuiding:String?

    /// content参数
    var content:[QueryAddTemplateContent?]?




    enum AddTemplateRequestRequestCodingKeys: String, CodingKey {
        case appId
        case signType
        case purpose
        case signCardType
        case aptitudes
        case title
        case descriptionValue = "description"
        case isTuiding
        case content
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(appId, forKey: .appId)
        try encoderContainer.encode(signType, forKey: .signType)
        try encoderContainer.encode(purpose, forKey: .purpose)
        try encoderContainer.encode(signCardType, forKey: .signCardType)
        try encoderContainer.encode(aptitudes, forKey: .aptitudes)
        try encoderContainer.encode(title, forKey: .title)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(isTuiding, forKey: .isTuiding)
        try encoderContainer.encode(content, forKey: .content)

    }
}
