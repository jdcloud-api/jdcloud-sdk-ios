/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Message-Content-APIs
   富媒体模板内容创建、查询相关接口

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  增加富媒体短信内容接口
@objc(AddTemplateRequest)
public class AddTemplateRequest:JdCloudRequest
{
    /// 应用ID
    var appId:String

    /// 签名类型 0:公司 1:app 2:网站 3:公众号 4:商标 5:政府机关
    var signType:String

    /// 用途 0:自用 1:他用
    var purpose:String

    /// 资质证明类型 0:三证合一 1:企业营业执照 2:组织机构代码证书 3:社会信用代码证书
    var signCardType:String

    /// 资质证明图片必须是jpg图片的base64编码，只支持jpg图片
    var aptitudes:String

    /// 多媒体内容的标题
    var title:String

    /// 多媒体内容的描述
    var descriptionValue:String

    /// 是否支持退订 0:不支持退订 1:支持退订
    var unsubscribe:String

    /// 短信内容
    var content:[TemplateContent?]?


    public init(regionId: String,appId:String,signType:String,purpose:String,signCardType:String,aptitudes:String,title:String,descriptionValue:String,unsubscribe:String,content:[TemplateContent?]?){
        self.appId = appId
        self.signType = signType
        self.purpose = purpose
        self.signCardType = signCardType
        self.aptitudes = aptitudes
        self.title = title
        self.descriptionValue = descriptionValue
        self.unsubscribe = unsubscribe
        self.content = content
        super.init(regionId: regionId)
    }


    enum AddTemplateRequestRequestCodingKeys: String, CodingKey {
        case appId
        case signType
        case purpose
        case signCardType
        case aptitudes
        case title
        case descriptionValue = "description"
        case unsubscribe
        case content
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(appId, forKey: .appId)
        try encoderContainer.encode(signType, forKey: .signType)
        try encoderContainer.encode(purpose, forKey: .purpose)
        try encoderContainer.encode(signCardType, forKey: .signCardType)
        try encoderContainer.encode(aptitudes, forKey: .aptitudes)
        try encoderContainer.encode(title, forKey: .title)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(unsubscribe, forKey: .unsubscribe)
        try encoderContainer.encode(content, forKey: .content)

    }
}
