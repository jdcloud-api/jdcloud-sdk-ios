/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Send-Message-Related-APIs
   富媒体短信发送相关接口

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  增加富媒体短信内容接口
public class AddTemplateRequest:JdCloudRequest
{
    /// 应用ID
    var appId:String

    /// 签名类型 0:公司 1:app 2:网站 3:公众号 4:商标 5:政府机关
    var signType:String

    /// 用途 0:自用 1:他用
    var purpose:String

    /// 资质证明类型 0:三证合一 1:企业营业执照 2:组织机构代码证书 3:社会信用代码证书
    var signCardType:String

    /// 资质证明图片必须是jpg图片的base64编码，只支持jpg图片
    var aptitudes:String

    /// 多媒体内容的标题
    var title:String

    /// 多媒体内容的描述
    var descriptionValue:String

    /// 是否支持退订 0:不支持退订 1:支持退订
    var unsubscribe:String

    /// 短信内容
    var content:[TemplateContent?]?


    public init(regionId: String,appId:String,signType:String,purpose:String,signCardType:String,aptitudes:String,title:String,descriptionValue:String,unsubscribe:String,content:[TemplateContent?]?){
        self.appId = appId
        self.signType = signType
        self.purpose = purpose
        self.signCardType = signCardType
        self.aptitudes = aptitudes
        self.title = title
        self.descriptionValue = descriptionValue
        self.unsubscribe = unsubscribe
        self.content = content
        super.init(regionId: regionId)
    }


    enum AddTemplateRequestRequestCodingKeys: String, CodingKey {
        case appId
        case signType
        case purpose
        case signCardType
        case aptitudes
        case title
        case descriptionValue = "description"
        case unsubscribe
        case content
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(appId, forKey: .appId)
        try encoderContainer.encode(signType, forKey: .signType)
        try encoderContainer.encode(purpose, forKey: .purpose)
        try encoderContainer.encode(signCardType, forKey: .signCardType)
        try encoderContainer.encode(aptitudes, forKey: .aptitudes)
        try encoderContainer.encode(title, forKey: .title)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(unsubscribe, forKey: .unsubscribe)
        try encoderContainer.encode(content, forKey: .content)

    }
}

/// 查询一个富媒体短信内容接口 
public class QueryTemplateByIdResult:NSObject,JdCloudResult
{
    /// 响应数据
    var data:RespQueryTemplateListData?

    /// 请求状态
    var status:Bool?

    /// 错误码
    var code:String?

    /// 错误消息
    var message:String?



    public override init(){
        super.init()
    }

    enum QueryTemplateByIdResultCodingKeys: String, CodingKey {
        case data
        case status
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryTemplateByIdResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(RespQueryTemplateListData?.self, forKey: .data)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(String?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension QueryTemplateByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryTemplateByIdResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  查询一个富媒体短信内容接口
public class QueryTemplateByIdRequest:JdCloudRequest
{
    /// 短信ID
    var templateId:String


    public init(regionId: String,templateId:String){
        self.templateId = templateId
        super.init(regionId: regionId)
    }


    enum QueryTemplateByIdRequestRequestCodingKeys: String, CodingKey {
        case templateId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryTemplateByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(templateId, forKey: .templateId)

    }
}

/// 查询富媒体短信内容列表接口 
public class QueryTemplateListResult:NSObject,JdCloudResult
{
    /// Data
    var data:RespTemplatePageResult?

    /// 请求状态
    var status:Bool?

    /// 错误码
    var code:String?

    /// 错误消息
    var message:String?



    public override init(){
        super.init()
    }

    enum QueryTemplateListResultCodingKeys: String, CodingKey {
        case data
        case status
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryTemplateListResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(RespTemplatePageResult?.self, forKey: .data)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(String?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension QueryTemplateListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryTemplateListResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class QueryTemplateListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryTemplateListResult?;

    enum QueryTemplateListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryTemplateListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryTemplateListResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryTemplateListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryTemplateListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 增加富媒体短信内容接口 
public class AddTemplateResult:NSObject,JdCloudResult
{
    /// 短信ID
    var data:RespTemplateData?

    /// 请求状态
    var status:Bool?

    /// 错误码
    var code:String?

    /// 错误消息
    var message:String?



    public override init(){
        super.init()
    }

    enum AddTemplateResultCodingKeys: String, CodingKey {
        case data
        case status
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddTemplateResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(RespTemplateData?.self, forKey: .data)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(String?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension AddTemplateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddTemplateResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  查询富媒体短信内容列表接口
public class QueryTemplateListRequest:JdCloudRequest
{
    /// 应用ID
    var appId:String

    /// 查询标题关键词
    var title:String?

    /// 第几页
    var pageNum:Int

    /// 每页多少条记录
    var pageLimit:Int

    /// 审核状态：0: 审核中 1: 通过 2: 未通过 4:待提交
    var status:String?

    /// 开始时间,格式YYYY-MM-DD
    var startTime:String?

    /// 结束时间,格式YYYY-MM-DD
    var endTime:String?


    public init(regionId: String,appId:String,pageNum:Int,pageLimit:Int){
        self.appId = appId
        self.pageNum = pageNum
        self.pageLimit = pageLimit
        super.init(regionId: regionId)
    }


    enum QueryTemplateListRequestRequestCodingKeys: String, CodingKey {
        case appId
        case title
        case pageNum
        case pageLimit
        case status
        case startTime
        case endTime
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryTemplateListRequestRequestCodingKeys.self)
        try encoderContainer.encode(appId, forKey: .appId)
        try encoderContainer.encode(title, forKey: .title)
        try encoderContainer.encode(pageNum, forKey: .pageNum)
        try encoderContainer.encode(pageLimit, forKey: .pageLimit)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)

    }
}

public class AddTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddTemplateResult?;

    enum AddTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension AddTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QueryTemplateByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryTemplateByIdResult?;

    enum QueryTemplateByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryTemplateByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryTemplateByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryTemplateByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryTemplateByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 套餐包余量，仅预付费用户使用 
public class QueryPackageRemainderResult:NSObject,JdCloudResult
{
    /// 响应数据
    var data:RespPackageResult?

    /// 请求状态
    var status:Bool?

    /// 错误码
    var code:String?

    /// 错误消息
    var message:String?



    public override init(){
        super.init()
    }

    enum QueryPackageRemainderResultCodingKeys: String, CodingKey {
        case data
        case status
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryPackageRemainderResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(RespPackageResult?.self, forKey: .data)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(String?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension QueryPackageRemainderResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryPackageRemainderResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  套餐包余量，仅预付费用户使用
public class QueryPackageRemainderRequest:JdCloudRequest
{
}

public class QueryPackageRemainderResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryPackageRemainderResult?;

    enum QueryPackageRemainderResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryPackageRemainderResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryPackageRemainderResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryPackageRemainderResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryPackageRemainderResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QuerySendStatusResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QuerySendStatusResult?;

    enum QuerySendStatusResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QuerySendStatusResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QuerySendStatusResult?.self, forKey: .result) ?? nil
    }
}

public extension QuerySendStatusResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QuerySendStatusResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  指定短信Id群发短信
public class SendBatchMsgRequest:JdCloudRequest
{
    /// 应用ID
    var appId:String

    /// 短信ID
    var templateId:String

    /// 群发的国内电话号码，群发时一次最多不要超过100个手机号
    var phone:[String?]?

    /// 短信模板变量对应的数据值，Array格式
    var params:[String?]?


    public init(regionId: String,appId:String,templateId:String){
        self.appId = appId
        self.templateId = templateId
        super.init(regionId: regionId)
    }


    enum SendBatchMsgRequestRequestCodingKeys: String, CodingKey {
        case appId
        case templateId
        case phone
        case params
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SendBatchMsgRequestRequestCodingKeys.self)
        try encoderContainer.encode(appId, forKey: .appId)
        try encoderContainer.encode(templateId, forKey: .templateId)
        try encoderContainer.encode(phone, forKey: .phone)
        try encoderContainer.encode(params, forKey: .params)

    }
}

/// 获取发送状态 
public class QuerySendStatusResult:NSObject,JdCloudResult
{
    /// 发送状态响应参数
    var data:[QuerySendStatus?]?

    /// 请求状态
    var status:Bool?

    /// 错误码
    var code:String?

    /// 错误消息
    var message:String?



    public override init(){
        super.init()
    }

    enum QuerySendStatusResultCodingKeys: String, CodingKey {
        case data
        case status
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QuerySendStatusResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([QuerySendStatus?]?.self, forKey: .data)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(String?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension QuerySendStatusResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QuerySendStatusResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  获取发送状态
public class QuerySendStatusRequest:JdCloudRequest
{
    /// 应用ID
    var appId:String

    /// 序列号
    var sequenceNumber:String

    /// 手机号
    var phone:String?


    public init(regionId: String,appId:String,sequenceNumber:String){
        self.appId = appId
        self.sequenceNumber = sequenceNumber
        super.init(regionId: regionId)
    }


    enum QuerySendStatusRequestRequestCodingKeys: String, CodingKey {
        case appId
        case sequenceNumber
        case phone
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QuerySendStatusRequestRequestCodingKeys.self)
        try encoderContainer.encode(appId, forKey: .appId)
        try encoderContainer.encode(sequenceNumber, forKey: .sequenceNumber)
        try encoderContainer.encode(phone, forKey: .phone)

    }
}

/// 指定短信Id群发短信 
public class SendBatchMsgResult:NSObject,JdCloudResult
{
    /// 指定短信Id群发短信响应参数
    var data:SendBatchMsg?

    /// 请求状态
    var status:Bool?

    /// 错误码
    var code:String?

    /// 错误消息
    var message:String?



    public override init(){
        super.init()
    }

    enum SendBatchMsgResultCodingKeys: String, CodingKey {
        case data
        case status
        case code
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SendBatchMsgResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(SendBatchMsg?.self, forKey: .data)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(String?.self, forKey: .code)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension SendBatchMsgResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SendBatchMsgResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(code, forKey: .code)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class SendBatchMsgResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SendBatchMsgResult?;

    enum SendBatchMsgResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SendBatchMsgResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SendBatchMsgResult?.self, forKey: .result) ?? nil
    }
}

public extension SendBatchMsgResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SendBatchMsgResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
