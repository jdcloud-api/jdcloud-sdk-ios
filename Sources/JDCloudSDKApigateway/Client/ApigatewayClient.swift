/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   API网关
   API网关相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class ApigatewayJDCloudClient:NSObject,JDCloudClient{
    
    private final var apigatewayJDCloudClient:ApigatewayJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        apigatewayJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "apigateway.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        apigatewayJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "apigateway/" + "v1"
    
    public let serviceName: String = "apigateway"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func createUserDomainAsync(request:CreateUserDomainRequest,requestComplation:@escaping ExecuteResult<CreateUserDomainResult>) throws {
        apigatewayJDCloudClient = self
        try CreateUserDomainExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func checkGroupNameExistAsync(request:CheckGroupNameExistRequest,requestComplation:@escaping ExecuteResult<CheckGroupNameExistResult>) throws {
        apigatewayJDCloudClient = self
        try CheckGroupNameExistExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteApiByNameAsync(request:DeleteApiByNameRequest,requestComplation:@escaping ExecuteResult<DeleteApiByNameResult>) throws {
        apigatewayJDCloudClient = self
        try DeleteApiByNameExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeIsDeployApiGroupsAsync(request:DescribeIsDeployApiGroupsRequest,requestComplation:@escaping ExecuteResult<DescribeIsDeployApiGroupsResult>) throws {
        apigatewayJDCloudClient = self
        try DescribeIsDeployApiGroupsExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteAccessKeyAsync(request:DeleteAccessKeyRequest,requestComplation:@escaping ExecuteResult<DeleteAccessKeyResult>) throws {
        apigatewayJDCloudClient = self
        try DeleteAccessKeyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteSubscriptionKeyAsync(request:DeleteSubscriptionKeyRequest,requestComplation:@escaping ExecuteResult<DeleteSubscriptionKeyResult>) throws {
        apigatewayJDCloudClient = self
        try DeleteSubscriptionKeyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createApisAsync(request:CreateApisRequest,requestComplation:@escaping ExecuteResult<CreateApisResult>) throws {
        apigatewayJDCloudClient = self
        try CreateApisExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateRateLimitPolicyAsync(request:UpdateRateLimitPolicyRequest,requestComplation:@escaping ExecuteResult<UpdateRateLimitPolicyResult>) throws {
        apigatewayJDCloudClient = self
        try UpdateRateLimitPolicyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func bindGroupKeyAsync(request:BindGroupKeyRequest,requestComplation:@escaping ExecuteResult<BindGroupKeyResult>) throws {
        apigatewayJDCloudClient = self
        try BindGroupKeyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func checkAuthExistAsync(request:CheckAuthExistRequest,requestComplation:@escaping ExecuteResult<CheckAuthExistResult>) throws {
        apigatewayJDCloudClient = self
        try CheckAuthExistExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func offlineAsync(request:OfflineRequest,requestComplation:@escaping ExecuteResult<OfflineResult>) throws {
        apigatewayJDCloudClient = self
        try OfflineExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryAccessKeyAsync(request:QueryAccessKeyRequest,requestComplation:@escaping ExecuteResult<QueryAccessKeyResult>) throws {
        apigatewayJDCloudClient = self
        try QueryAccessKeyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func bindGroupAuthAsync(request:BindGroupAuthRequest,requestComplation:@escaping ExecuteResult<BindGroupAuthResult>) throws {
        apigatewayJDCloudClient = self
        try BindGroupAuthExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRevisionIdsAsync(request:GetRevisionIdsRequest,requestComplation:@escaping ExecuteResult<GetRevisionIdsResult>) throws {
        apigatewayJDCloudClient = self
        try GetRevisionIdsExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func checkKeyExistAsync(request:CheckKeyExistRequest,requestComplation:@escaping ExecuteResult<CheckKeyExistResult>) throws {
        apigatewayJDCloudClient = self
        try CheckKeyExistExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryAccessAuthsAsync(request:QueryAccessAuthsRequest,requestComplation:@escaping ExecuteResult<QueryAccessAuthsResult>) throws {
        apigatewayJDCloudClient = self
        try QueryAccessAuthsExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryRevisionAsync(request:QueryRevisionRequest,requestComplation:@escaping ExecuteResult<QueryRevisionResult>) throws {
        apigatewayJDCloudClient = self
        try QueryRevisionExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createBackendConfigAsync(request:CreateBackendConfigRequest,requestComplation:@escaping ExecuteResult<CreateBackendConfigResult>) throws {
        apigatewayJDCloudClient = self
        try CreateBackendConfigExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func querySubscriptionKeyAsync(request:QuerySubscriptionKeyRequest,requestComplation:@escaping ExecuteResult<QuerySubscriptionKeyResult>) throws {
        apigatewayJDCloudClient = self
        try QuerySubscriptionKeyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyApiGroupAttributeAsync(request:ModifyApiGroupAttributeRequest,requestComplation:@escaping ExecuteResult<ModifyApiGroupAttributeResult>) throws {
        apigatewayJDCloudClient = self
        try ModifyApiGroupAttributeExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func checkPinAsync(request:CheckPinRequest,requestComplation:@escaping ExecuteResult<CheckPinResult>) throws {
        apigatewayJDCloudClient = self
        try CheckPinExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func checkPolicyNameAsync(request:CheckPolicyNameRequest,requestComplation:@escaping ExecuteResult<CheckPolicyNameResult>) throws {
        apigatewayJDCloudClient = self
        try CheckPolicyNameExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryRateLimitPolicyAsync(request:QueryRateLimitPolicyRequest,requestComplation:@escaping ExecuteResult<QueryRateLimitPolicyResult>) throws {
        apigatewayJDCloudClient = self
        try QueryRateLimitPolicyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateApiAsync(request:UpdateApiRequest,requestComplation:@escaping ExecuteResult<UpdateApiResult>) throws {
        apigatewayJDCloudClient = self
        try UpdateApiExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeRevisionsAsync(request:DescribeRevisionsRequest,requestComplation:@escaping ExecuteResult<DescribeRevisionsResult>) throws {
        apigatewayJDCloudClient = self
        try DescribeRevisionsExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createApiGroupAsync(request:CreateApiGroupRequest,requestComplation:@escaping ExecuteResult<CreateApiGroupResult>) throws {
        apigatewayJDCloudClient = self
        try CreateApiGroupExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateAccessKeyAsync(request:UpdateAccessKeyRequest,requestComplation:@escaping ExecuteResult<UpdateAccessKeyResult>) throws {
        apigatewayJDCloudClient = self
        try UpdateAccessKeyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryAccessAuthAsync(request:QueryAccessAuthRequest,requestComplation:@escaping ExecuteResult<QueryAccessAuthResult>) throws {
        apigatewayJDCloudClient = self
        try QueryAccessAuthExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryKeyGroupListAsync(request:QueryKeyGroupListRequest,requestComplation:@escaping ExecuteResult<QueryKeyGroupListResult>) throws {
        apigatewayJDCloudClient = self
        try QueryKeyGroupListExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryUserDomainsAsync(request:QueryUserDomainsRequest,requestComplation:@escaping ExecuteResult<QueryUserDomainsResult>) throws {
        apigatewayJDCloudClient = self
        try QueryUserDomainsExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func authorizedApiGroupListAsync(request:AuthorizedApiGroupListRequest,requestComplation:@escaping ExecuteResult<AuthorizedApiGroupListResult>) throws {
        apigatewayJDCloudClient = self
        try AuthorizedApiGroupListExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func querySubscriptionKeysAsync(request:QuerySubscriptionKeysRequest,requestComplation:@escaping ExecuteResult<QuerySubscriptionKeysResult>) throws {
        apigatewayJDCloudClient = self
        try QuerySubscriptionKeysExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateSubscriptionKeyAsync(request:UpdateSubscriptionKeyRequest,requestComplation:@escaping ExecuteResult<UpdateSubscriptionKeyResult>) throws {
        apigatewayJDCloudClient = self
        try UpdateSubscriptionKeyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryBindGroupKeyAsync(request:QueryBindGroupKeyRequest,requestComplation:@escaping ExecuteResult<QueryBindGroupKeyResult>) throws {
        apigatewayJDCloudClient = self
        try QueryBindGroupKeyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyRevisionAsync(request:ModifyRevisionRequest,requestComplation:@escaping ExecuteResult<ModifyRevisionResult>) throws {
        apigatewayJDCloudClient = self
        try ModifyRevisionExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryBindGroupPolicyAsync(request:QueryBindGroupPolicyRequest,requestComplation:@escaping ExecuteResult<QueryBindGroupPolicyResult>) throws {
        apigatewayJDCloudClient = self
        try QueryBindGroupPolicyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteApiAsync(request:DeleteApiRequest,requestComplation:@escaping ExecuteResult<DeleteApiResult>) throws {
        apigatewayJDCloudClient = self
        try DeleteApiExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeDeploymentAsync(request:DescribeDeploymentRequest,requestComplation:@escaping ExecuteResult<DescribeDeploymentResult>) throws {
        apigatewayJDCloudClient = self
        try DescribeDeploymentExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeBackendConfigAsync(request:DescribeBackendConfigRequest,requestComplation:@escaping ExecuteResult<DescribeBackendConfigResult>) throws {
        apigatewayJDCloudClient = self
        try DescribeBackendConfigExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func batchOfflineAsync(request:BatchOfflineRequest,requestComplation:@escaping ExecuteResult<BatchOfflineResult>) throws {
        apigatewayJDCloudClient = self
        try BatchOfflineExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createAccessAuthAsync(request:CreateAccessAuthRequest,requestComplation:@escaping ExecuteResult<CreateAccessAuthResult>) throws {
        apigatewayJDCloudClient = self
        try CreateAccessAuthExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeBackendConfigsAsync(request:DescribeBackendConfigsRequest,requestComplation:@escaping ExecuteResult<DescribeBackendConfigsResult>) throws {
        apigatewayJDCloudClient = self
        try DescribeBackendConfigsExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeApiGroupAsync(request:DescribeApiGroupRequest,requestComplation:@escaping ExecuteResult<DescribeApiGroupResult>) throws {
        apigatewayJDCloudClient = self
        try DescribeApiGroupExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createAccessKeyAsync(request:CreateAccessKeyRequest,requestComplation:@escaping ExecuteResult<CreateAccessKeyResult>) throws {
        apigatewayJDCloudClient = self
        try CreateAccessKeyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteAccessAuthAsync(request:DeleteAccessAuthRequest,requestComplation:@escaping ExecuteResult<DeleteAccessAuthResult>) throws {
        apigatewayJDCloudClient = self
        try DeleteAccessAuthExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateKeyAsync(request:UpdateKeyRequest,requestComplation:@escaping ExecuteResult<UpdateKeyResult>) throws {
        apigatewayJDCloudClient = self
        try UpdateKeyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func checkRevisionExistAsync(request:CheckRevisionExistRequest,requestComplation:@escaping ExecuteResult<CheckRevisionExistResult>) throws {
        apigatewayJDCloudClient = self
        try CheckRevisionExistExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateAccessAuthAsync(request:UpdateAccessAuthRequest,requestComplation:@escaping ExecuteResult<UpdateAccessAuthResult>) throws {
        apigatewayJDCloudClient = self
        try UpdateAccessAuthExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryUcAccessKeysAsync(request:QueryUcAccessKeysRequest,requestComplation:@escaping ExecuteResult<QueryUcAccessKeysResult>) throws {
        apigatewayJDCloudClient = self
        try QueryUcAccessKeysExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryKeyInfoAsync(request:QueryKeyInfoRequest,requestComplation:@escaping ExecuteResult<QueryKeyInfoResult>) throws {
        apigatewayJDCloudClient = self
        try QueryKeyInfoExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryKeysAsync(request:QueryKeysRequest,requestComplation:@escaping ExecuteResult<QueryKeysResult>) throws {
        apigatewayJDCloudClient = self
        try QueryKeysExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryPolicyGroupListAsync(request:QueryPolicyGroupListRequest,requestComplation:@escaping ExecuteResult<QueryPolicyGroupListResult>) throws {
        apigatewayJDCloudClient = self
        try QueryPolicyGroupListExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateBackendConfigAsync(request:UpdateBackendConfigRequest,requestComplation:@escaping ExecuteResult<UpdateBackendConfigResult>) throws {
        apigatewayJDCloudClient = self
        try UpdateBackendConfigExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryBindGroupAuthAsync(request:QueryBindGroupAuthRequest,requestComplation:@escaping ExecuteResult<QueryBindGroupAuthResult>) throws {
        apigatewayJDCloudClient = self
        try QueryBindGroupAuthExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createKeyAsync(request:CreateKeyRequest,requestComplation:@escaping ExecuteResult<CreateKeyResult>) throws {
        apigatewayJDCloudClient = self
        try CreateKeyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeApiGroupsAsync(request:DescribeApiGroupsRequest,requestComplation:@escaping ExecuteResult<DescribeApiGroupsResult>) throws {
        apigatewayJDCloudClient = self
        try DescribeApiGroupsExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createRateLimitPolicyAsync(request:CreateRateLimitPolicyRequest,requestComplation:@escaping ExecuteResult<CreateRateLimitPolicyResult>) throws {
        apigatewayJDCloudClient = self
        try CreateRateLimitPolicyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createRevisionAsync(request:CreateRevisionRequest,requestComplation:@escaping ExecuteResult<CreateRevisionResult>) throws {
        apigatewayJDCloudClient = self
        try CreateRevisionExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteRateLimitPolicyAsync(request:DeleteRateLimitPolicyRequest,requestComplation:@escaping ExecuteResult<DeleteRateLimitPolicyResult>) throws {
        apigatewayJDCloudClient = self
        try DeleteRateLimitPolicyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryAuthGroupListAsync(request:QueryAuthGroupListRequest,requestComplation:@escaping ExecuteResult<QueryAuthGroupListResult>) throws {
        apigatewayJDCloudClient = self
        try QueryAuthGroupListExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func bindGroupPolicyAsync(request:BindGroupPolicyRequest,requestComplation:@escaping ExecuteResult<BindGroupPolicyResult>) throws {
        apigatewayJDCloudClient = self
        try BindGroupPolicyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deployAsync(request:DeployRequest,requestComplation:@escaping ExecuteResult<DeployResult>) throws {
        apigatewayJDCloudClient = self
        try DeployExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryAccessKeysAsync(request:QueryAccessKeysRequest,requestComplation:@escaping ExecuteResult<QueryAccessKeysResult>) throws {
        apigatewayJDCloudClient = self
        try QueryAccessKeysExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateApiByNameAsync(request:UpdateApiByNameRequest,requestComplation:@escaping ExecuteResult<UpdateApiByNameResult>) throws {
        apigatewayJDCloudClient = self
        try UpdateApiByNameExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteUserDomainAsync(request:DeleteUserDomainRequest,requestComplation:@escaping ExecuteResult<DeleteUserDomainResult>) throws {
        apigatewayJDCloudClient = self
        try DeleteUserDomainExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createSubscriptionKeyAsync(request:CreateSubscriptionKeyRequest,requestComplation:@escaping ExecuteResult<CreateSubscriptionKeyResult>) throws {
        apigatewayJDCloudClient = self
        try CreateSubscriptionKeyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryRateLimitPoliciesAsync(request:QueryRateLimitPoliciesRequest,requestComplation:@escaping ExecuteResult<QueryRateLimitPoliciesResult>) throws {
        apigatewayJDCloudClient = self
        try QueryRateLimitPoliciesExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeDeploymentsAsync(request:DescribeDeploymentsRequest,requestComplation:@escaping ExecuteResult<DescribeDeploymentsResult>) throws {
        apigatewayJDCloudClient = self
        try DescribeDeploymentsExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteRevisionAsync(request:DeleteRevisionRequest,requestComplation:@escaping ExecuteResult<DeleteRevisionResult>) throws {
        apigatewayJDCloudClient = self
        try DeleteRevisionExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryApiAsync(request:QueryApiRequest,requestComplation:@escaping ExecuteResult<QueryApiResult>) throws {
        apigatewayJDCloudClient = self
        try QueryApiExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func checkApiNameExistAsync(request:CheckApiNameExistRequest,requestComplation:@escaping ExecuteResult<CheckApiNameExistResult>) throws {
        apigatewayJDCloudClient = self
        try CheckApiNameExistExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func queryApisAsync(request:QueryApisRequest,requestComplation:@escaping ExecuteResult<QueryApisResult>) throws {
        apigatewayJDCloudClient = self
        try QueryApisExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func resetKeyAsync(request:ResetKeyRequest,requestComplation:@escaping ExecuteResult<ResetKeyResult>) throws {
        apigatewayJDCloudClient = self
        try ResetKeyExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteBackendConfigAsync(request:DeleteBackendConfigRequest,requestComplation:@escaping ExecuteResult<DeleteBackendConfigResult>) throws {
        apigatewayJDCloudClient = self
        try DeleteBackendConfigExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteApiGroupAsync(request:DeleteApiGroupRequest,requestComplation:@escaping ExecuteResult<DeleteApiGroupResult>) throws {
        apigatewayJDCloudClient = self
        try DeleteApiGroupExecutor(jdCloudClient: apigatewayJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension ApigatewayJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "apigateway.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
