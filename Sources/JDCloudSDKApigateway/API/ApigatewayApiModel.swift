/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Hu-Fu
   关于虎符的相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon

/// 修改api 
public class UpdateApiByNameResult:NSObject,JdCloudResult
{
}
/// 修改api 
public class UpdateApiResult:NSObject,JdCloudResult
{
    /// apiId
    var apiId:String?



    public override init(){
        super.init()
    }

    enum UpdateApiResultCodingKeys: String, CodingKey {
        case apiId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateApiResultCodingKeys.self)
        if decoderContainer.contains(.apiId)
        {
            self.apiId = try decoderContainer.decode(String?.self, forKey: .apiId)
        }
    }
}
public extension UpdateApiResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateApiResultCodingKeys.self)
        try encoderContainer.encode(apiId, forKey: .apiId)
    }
}

///  查询单个api
public class QueryApiRequest:JdCloudRequest
{
    /// isApiProduct - 是否API产品，精确匹配，1为是
      /// 
    var filters:[Filter?]?

    /// 分组ID
    var apiGroupId:String

    /// 版本号
    var revision:String

    /// 接口ID
    var apiId:String


    public init(regionId: String,apiGroupId:String,revision:String,apiId:String){
        self.apiGroupId = apiGroupId
        self.revision = revision
        self.apiId = apiId
        super.init(regionId: regionId)
    }


    enum QueryApiRequestRequestCodingKeys: String, CodingKey {
        case filters
        case apiGroupId
        case revision
        case apiId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryApiRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(revision, forKey: .revision)
        try encoderContainer.encode(apiId, forKey: .apiId)

    }
}


///  修改api
public class UpdateApiByNameRequest:JdCloudRequest
{
    /// api
    var api:CreateApi?

    /// 分组ID
    var apiGroupId:String

    /// 版本号
    var revision:String

    /// ApiName
    var apiName:String


    public init(regionId: String,apiGroupId:String,revision:String,apiName:String){
        self.apiGroupId = apiGroupId
        self.revision = revision
        self.apiName = apiName
        super.init(regionId: regionId)
    }


    enum UpdateApiByNameRequestRequestCodingKeys: String, CodingKey {
        case api
        case apiGroupId
        case revision
        case apiName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateApiByNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(api, forKey: .api)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(revision, forKey: .revision)
        try encoderContainer.encode(apiName, forKey: .apiName)

    }
}

/// 查询单个api 
public class QueryApiResult:NSObject,JdCloudResult
{
    /// Api
    var api:Api?



    public override init(){
        super.init()
    }

    enum QueryApiResultCodingKeys: String, CodingKey {
        case api
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryApiResultCodingKeys.self)
        if decoderContainer.contains(.api)
        {
            self.api = try decoderContainer.decode(Api?.self, forKey: .api)
        }
    }
}
public extension QueryApiResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryApiResultCodingKeys.self)
        try encoderContainer.encode(api, forKey: .api)
    }
}
/// 创建API时，检查API名称是否重复,返回重复的apiId,如果没有返回空 
public class CheckApiNameExistResult:NSObject,JdCloudResult
{
    /// API名称
    var apiId:String?



    public override init(){
        super.init()
    }

    enum CheckApiNameExistResultCodingKeys: String, CodingKey {
        case apiId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckApiNameExistResultCodingKeys.self)
        if decoderContainer.contains(.apiId)
        {
            self.apiId = try decoderContainer.decode(String?.self, forKey: .apiId)
        }
    }
}
public extension CheckApiNameExistResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckApiNameExistResultCodingKeys.self)
        try encoderContainer.encode(apiId, forKey: .apiId)
    }
}
public class UpdateApiResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateApiResult?;

    enum UpdateApiResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateApiResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateApiResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateApiResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateApiResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateApiByNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateApiByNameResult?;

    enum UpdateApiByNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateApiByNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateApiByNameResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateApiByNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateApiByNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除api
public class DeleteApiRequest:JdCloudRequest
{
    /// 分组ID
    var apiGroupId:String

    /// 版本号
    var revision:String

    /// 接口ID
    var apiId:String


    public init(regionId: String,apiGroupId:String,revision:String,apiId:String){
        self.apiGroupId = apiGroupId
        self.revision = revision
        self.apiId = apiId
        super.init(regionId: regionId)
    }


    enum DeleteApiRequestRequestCodingKeys: String, CodingKey {
        case apiGroupId
        case revision
        case apiId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteApiRequestRequestCodingKeys.self)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(revision, forKey: .revision)
        try encoderContainer.encode(apiId, forKey: .apiId)

    }
}

public class QueryApiResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryApiResult?;

    enum QueryApiResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryApiResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryApiResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryApiResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryApiResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改api
public class UpdateApiRequest:JdCloudRequest
{
    /// api
    var api:CreateApi?

    /// 分组ID
    var apiGroupId:String

    /// 版本号
    var revision:String

    /// 接口ID
    var apiId:String


    public init(regionId: String,apiGroupId:String,revision:String,apiId:String){
        self.apiGroupId = apiGroupId
        self.revision = revision
        self.apiId = apiId
        super.init(regionId: regionId)
    }


    enum UpdateApiRequestRequestCodingKeys: String, CodingKey {
        case api
        case apiGroupId
        case revision
        case apiId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateApiRequestRequestCodingKeys.self)
        try encoderContainer.encode(api, forKey: .api)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(revision, forKey: .revision)
        try encoderContainer.encode(apiId, forKey: .apiId)

    }
}

public class QueryApisResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryApisResult?;

    enum QueryApisResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryApisResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryApisResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryApisResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryApisResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateApisResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateApisResult?;

    enum CreateApisResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateApisResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateApisResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateApisResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateApisResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteApiByNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteApiByNameResult?;

    enum DeleteApiByNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteApiByNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteApiByNameResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteApiByNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteApiByNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除api 
public class DeleteApiByNameResult:NSObject,JdCloudResult
{
}

///  创建API时，检查API名称是否重复,返回重复的apiId,如果没有返回空
public class CheckApiNameExistRequest:JdCloudRequest
{
    /// API名称
    var apiName:String

    /// 分组ID
    var apiGroupId:String

    /// 版本号
    var revision:String


    public init(regionId: String,apiName:String,apiGroupId:String,revision:String){
        self.apiName = apiName
        self.apiGroupId = apiGroupId
        self.revision = revision
        super.init(regionId: regionId)
    }


    enum CheckApiNameExistRequestRequestCodingKeys: String, CodingKey {
        case apiName
        case apiGroupId
        case revision
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckApiNameExistRequestRequestCodingKeys.self)
        try encoderContainer.encode(apiName, forKey: .apiName)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(revision, forKey: .revision)

    }
}

public class CheckApiNameExistResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CheckApiNameExistResult?;

    enum CheckApiNameExistResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckApiNameExistResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CheckApiNameExistResult?.self, forKey: .result) ?? nil
    }
}

public extension CheckApiNameExistResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckApiNameExistResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteApiResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteApiResult?;

    enum DeleteApiResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteApiResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteApiResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteApiResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteApiResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询api列表 
public class QueryApisResult:NSObject,JdCloudResult
{
    /// api详情
    var apis:[Api?]?

    /// 查询的数目
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QueryApisResultCodingKeys: String, CodingKey {
        case apis
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryApisResultCodingKeys.self)
        if decoderContainer.contains(.apis)
        {
            self.apis = try decoderContainer.decode([Api?]?.self, forKey: .apis)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QueryApisResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryApisResultCodingKeys.self)
        try encoderContainer.encode(apis, forKey: .apis)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  创建api
public class CreateApisRequest:JdCloudRequest
{
    /// api
    var api:CreateApi?

    /// 分组ID
    var apiGroupId:String

    /// 版本号
    var revision:String


    public init(regionId: String,apiGroupId:String,revision:String){
        self.apiGroupId = apiGroupId
        self.revision = revision
        super.init(regionId: regionId)
    }


    enum CreateApisRequestRequestCodingKeys: String, CodingKey {
        case api
        case apiGroupId
        case revision
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateApisRequestRequestCodingKeys.self)
        try encoderContainer.encode(api, forKey: .api)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(revision, forKey: .revision)

    }
}


///  删除api
public class DeleteApiByNameRequest:JdCloudRequest
{
    /// 分组ID
    var apiGroupId:String

    /// 版本号
    var revision:String

    /// ApiName
    var apiName:String


    public init(regionId: String,apiGroupId:String,revision:String,apiName:String){
        self.apiGroupId = apiGroupId
        self.revision = revision
        self.apiName = apiName
        super.init(regionId: regionId)
    }


    enum DeleteApiByNameRequestRequestCodingKeys: String, CodingKey {
        case apiGroupId
        case revision
        case apiName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteApiByNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(revision, forKey: .revision)
        try encoderContainer.encode(apiName, forKey: .apiName)

    }
}


///  查询api列表
public class QueryApisRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// apiName - API名称，模糊匹配，支持单个
      /// action - 动作，精确匹配，支持多个
      /// backServiceType- 后端服务类型，精确匹配，支持多个
      /// path - 路径，模糊匹配，支持单个
      /// description - 描述，模糊匹配，支持单个
      /// isApiProduct - 是否API产品，精确匹配，1为是
      /// 
    var filters:[Filter?]?

    /// 分组ID
    var apiGroupId:String

    /// 版本号
    var revision:String


    public init(regionId: String,apiGroupId:String,revision:String){
        self.apiGroupId = apiGroupId
        self.revision = revision
        super.init(regionId: regionId)
    }


    enum QueryApisRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case apiGroupId
        case revision
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryApisRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(revision, forKey: .revision)

    }
}

/// 删除api 
public class DeleteApiResult:NSObject,JdCloudResult
{
}
/// 创建api 
public class CreateApisResult:NSObject,JdCloudResult
{
    /// apiId
    var apiId:String?



    public override init(){
        super.init()
    }

    enum CreateApisResultCodingKeys: String, CodingKey {
        case apiId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateApisResultCodingKeys.self)
        if decoderContainer.contains(.apiId)
        {
            self.apiId = try decoderContainer.decode(String?.self, forKey: .apiId)
        }
    }
}
public extension CreateApisResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateApisResultCodingKeys.self)
        try encoderContainer.encode(apiId, forKey: .apiId)
    }
}
/// 查询部署列表 
public class DescribeDeploymentsResult:NSObject,JdCloudResult
{
    /// 部署列表
    var deployments:[Deployment?]?



    public override init(){
        super.init()
    }

    enum DescribeDeploymentsResultCodingKeys: String, CodingKey {
        case deployments
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeploymentsResultCodingKeys.self)
        if decoderContainer.contains(.deployments)
        {
            self.deployments = try decoderContainer.decode([Deployment?]?.self, forKey: .deployments)
        }
    }
}
public extension DescribeDeploymentsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeploymentsResultCodingKeys.self)
        try encoderContainer.encode(deployments, forKey: .deployments)
    }
}

///  批量下线
public class BatchOfflineRequest:JdCloudRequest
{
    /// 要删除的部署ID集合，以,分隔
    var deploymentIds:String?

    /// 分组ID
    var apiGroupId:String


    public init(regionId: String,apiGroupId:String){
        self.apiGroupId = apiGroupId
        super.init(regionId: regionId)
    }


    enum BatchOfflineRequestRequestCodingKeys: String, CodingKey {
        case deploymentIds
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchOfflineRequestRequestCodingKeys.self)
        try encoderContainer.encode(deploymentIds, forKey: .deploymentIds)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}

/// 发布版本 
public class DeployResult:NSObject,JdCloudResult
{
}
public class DescribeDeploymentResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDeploymentResult?;

    enum DescribeDeploymentResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeploymentResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDeploymentResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDeploymentResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeploymentResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class BatchOfflineResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:BatchOfflineResult?;

    enum BatchOfflineResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BatchOfflineResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(BatchOfflineResult?.self, forKey: .result) ?? nil
    }
}

public extension BatchOfflineResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchOfflineResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 下线 
public class OfflineResult:NSObject,JdCloudResult
{
}

///  下线
public class OfflineRequest:JdCloudRequest
{
    /// 分组ID
    var apiGroupId:String

    /// 部署ID
    var deploymentId:String


    public init(regionId: String,apiGroupId:String,deploymentId:String){
        self.apiGroupId = apiGroupId
        self.deploymentId = deploymentId
        super.init(regionId: regionId)
    }


    enum OfflineRequestRequestCodingKeys: String, CodingKey {
        case apiGroupId
        case deploymentId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OfflineRequestRequestCodingKeys.self)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(deploymentId, forKey: .deploymentId)

    }
}

/// 批量下线 
public class BatchOfflineResult:NSObject,JdCloudResult
{
    /// 操作成功的资源个数
    var successCount:Int?

    /// 操作失败的资源及原因
    var failed:[ErrorItem?]?



    public override init(){
        super.init()
    }

    enum BatchOfflineResultCodingKeys: String, CodingKey {
        case successCount
        case failed
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BatchOfflineResultCodingKeys.self)
        if decoderContainer.contains(.successCount)
        {
            self.successCount = try decoderContainer.decode(Int?.self, forKey: .successCount)
        }
        if decoderContainer.contains(.failed)
        {
            self.failed = try decoderContainer.decode([ErrorItem?]?.self, forKey: .failed)
        }
    }
}
public extension BatchOfflineResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchOfflineResultCodingKeys.self)
        try encoderContainer.encode(successCount, forKey: .successCount)
        try encoderContainer.encode(failed, forKey: .failed)
    }
}
public class DescribeDeploymentsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDeploymentsResult?;

    enum DescribeDeploymentsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeploymentsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDeploymentsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDeploymentsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeploymentsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class OfflineResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:OfflineResult?;

    enum OfflineResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OfflineResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(OfflineResult?.self, forKey: .result) ?? nil
    }
}

public extension OfflineResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OfflineResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeployResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeployResult?;

    enum DeployResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeployResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeployResult?.self, forKey: .result) ?? nil
    }
}

public extension DeployResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeployResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  发布版本
public class DeployRequest:JdCloudRequest
{
    /// 发布的修订版本号
    var revision:String

    /// 环境：test、preview、online
    var environment:String

    /// 后端服务类型：mock、unique、vpc
    var backendServiceType:String?

    /// 后端地址
    var backendUrl:String?

    /// 描述
    var descriptionValue:String?

    /// 微服务网关名称
    var jdsfName:String?

    /// 微服务注册中心ID
    var jdsfRegistryName:String?

    /// 微服务ID
    var jdsfId:String?

    /// 分组ID
    var apiGroupId:String


    public init(regionId: String,revision:String,environment:String,apiGroupId:String){
        self.revision = revision
        self.environment = environment
        self.apiGroupId = apiGroupId
        super.init(regionId: regionId)
    }


    enum DeployRequestRequestCodingKeys: String, CodingKey {
        case revision
        case environment
        case backendServiceType
        case backendUrl
        case descriptionValue = "description"
        case jdsfName
        case jdsfRegistryName
        case jdsfId
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeployRequestRequestCodingKeys.self)
        try encoderContainer.encode(revision, forKey: .revision)
        try encoderContainer.encode(environment, forKey: .environment)
        try encoderContainer.encode(backendServiceType, forKey: .backendServiceType)
        try encoderContainer.encode(backendUrl, forKey: .backendUrl)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(jdsfName, forKey: .jdsfName)
        try encoderContainer.encode(jdsfRegistryName, forKey: .jdsfRegistryName)
        try encoderContainer.encode(jdsfId, forKey: .jdsfId)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}


///  查询该版本的部署详情
public class DescribeDeploymentRequest:JdCloudRequest
{
    /// 分组ID
    var apiGroupId:String

    /// 部署ID
    var deploymentId:String


    public init(regionId: String,apiGroupId:String,deploymentId:String){
        self.apiGroupId = apiGroupId
        self.deploymentId = deploymentId
        super.init(regionId: regionId)
    }


    enum DescribeDeploymentRequestRequestCodingKeys: String, CodingKey {
        case apiGroupId
        case deploymentId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeploymentRequestRequestCodingKeys.self)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(deploymentId, forKey: .deploymentId)

    }
}

/// 查询该版本的部署详情 
public class DescribeDeploymentResult:NSObject,JdCloudResult
{
    /// 部署ID
    var deploymentId:String?

    /// 发布的修订版本号
    var revision:String?

    /// 路径
    var path:String?

    /// 环境：test、preview、online
    var environment:String?

    /// 后端服务类型：mock、unique、vpc
    var backendServiceType:String?

    /// 后端地址
    var backendUrl:String?

    /// 描述
    var descriptionValue:String?

    /// 发布日期，格式为毫秒级时间戳
    var createTime:Int64?

    /// 微服务网关名称
    var jdsfName:String?

    /// 微服务注册中心ID
    var jdsfRegistryName:String?

    /// 微服务ID
    var jdsfId:String?



    public override init(){
        super.init()
    }

    enum DescribeDeploymentResultCodingKeys: String, CodingKey {
        case deploymentId
        case revision
        case path
        case environment
        case backendServiceType
        case backendUrl
        case descriptionValue = "description"
        case createTime
        case jdsfName
        case jdsfRegistryName
        case jdsfId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDeploymentResultCodingKeys.self)
        if decoderContainer.contains(.deploymentId)
        {
            self.deploymentId = try decoderContainer.decode(String?.self, forKey: .deploymentId)
        }
        if decoderContainer.contains(.revision)
        {
            self.revision = try decoderContainer.decode(String?.self, forKey: .revision)
        }
        if decoderContainer.contains(.path)
        {
            self.path = try decoderContainer.decode(String?.self, forKey: .path)
        }
        if decoderContainer.contains(.environment)
        {
            self.environment = try decoderContainer.decode(String?.self, forKey: .environment)
        }
        if decoderContainer.contains(.backendServiceType)
        {
            self.backendServiceType = try decoderContainer.decode(String?.self, forKey: .backendServiceType)
        }
        if decoderContainer.contains(.backendUrl)
        {
            self.backendUrl = try decoderContainer.decode(String?.self, forKey: .backendUrl)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(Int64?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.jdsfName)
        {
            self.jdsfName = try decoderContainer.decode(String?.self, forKey: .jdsfName)
        }
        if decoderContainer.contains(.jdsfRegistryName)
        {
            self.jdsfRegistryName = try decoderContainer.decode(String?.self, forKey: .jdsfRegistryName)
        }
        if decoderContainer.contains(.jdsfId)
        {
            self.jdsfId = try decoderContainer.decode(String?.self, forKey: .jdsfId)
        }
    }
}
public extension DescribeDeploymentResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeploymentResultCodingKeys.self)
        try encoderContainer.encode(deploymentId, forKey: .deploymentId)
        try encoderContainer.encode(revision, forKey: .revision)
        try encoderContainer.encode(path, forKey: .path)
        try encoderContainer.encode(environment, forKey: .environment)
        try encoderContainer.encode(backendServiceType, forKey: .backendServiceType)
        try encoderContainer.encode(backendUrl, forKey: .backendUrl)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(jdsfName, forKey: .jdsfName)
        try encoderContainer.encode(jdsfRegistryName, forKey: .jdsfRegistryName)
        try encoderContainer.encode(jdsfId, forKey: .jdsfId)
    }
}

///  查询部署列表
public class DescribeDeploymentsRequest:JdCloudRequest
{
    /// isApiProduct - 是否API产品，精确匹配，1为是
      /// 
    var filters:[Filter?]?

    /// 分组ID
    var apiGroupId:String


    public init(regionId: String,apiGroupId:String){
        self.apiGroupId = apiGroupId
        super.init(regionId: regionId)
    }


    enum DescribeDeploymentsRequestRequestCodingKeys: String, CodingKey {
        case filters
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDeploymentsRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}


///  查询流控策略列表
public class QueryRateLimitPoliciesRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// policyName - 策略名称，模糊匹配
      /// 
    var filters:[Filter?]?




    enum QueryRateLimitPoliciesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRateLimitPoliciesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  删除单个流控策略
public class DeleteRateLimitPolicyRequest:JdCloudRequest
{
    /// 限流策略ID
    var policyId:String


    public init(regionId: String,policyId:String){
        self.policyId = policyId
        super.init(regionId: regionId)
    }


    enum DeleteRateLimitPolicyRequestRequestCodingKeys: String, CodingKey {
        case policyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRateLimitPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(policyId, forKey: .policyId)

    }
}

/// 查询绑定部署详情 
public class QueryBindGroupPolicyResult:NSObject,JdCloudResult
{
    /// 绑定部署ID和名称
    var bindGroups:[BindGroups?]?



    public override init(){
        super.init()
    }

    enum QueryBindGroupPolicyResultCodingKeys: String, CodingKey {
        case bindGroups
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryBindGroupPolicyResultCodingKeys.self)
        if decoderContainer.contains(.bindGroups)
        {
            self.bindGroups = try decoderContainer.decode([BindGroups?]?.self, forKey: .bindGroups)
        }
    }
}
public extension QueryBindGroupPolicyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryBindGroupPolicyResultCodingKeys.self)
        try encoderContainer.encode(bindGroups, forKey: .bindGroups)
    }
}

///  修改流控策略
public class UpdateRateLimitPolicyRequest:JdCloudRequest
{
    /// 流控策略详情
    var rateLimitPolicyView:RateLimitPolicyView?

    /// 限流策略ID
    var policyId:String


    public init(regionId: String,policyId:String){
        self.policyId = policyId
        super.init(regionId: regionId)
    }


    enum UpdateRateLimitPolicyRequestRequestCodingKeys: String, CodingKey {
        case rateLimitPolicyView
        case policyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateRateLimitPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(rateLimitPolicyView, forKey: .rateLimitPolicyView)
        try encoderContainer.encode(policyId, forKey: .policyId)

    }
}

public class QueryBindGroupPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryBindGroupPolicyResult?;

    enum QueryBindGroupPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryBindGroupPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryBindGroupPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryBindGroupPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryBindGroupPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建流控策略
public class CreateRateLimitPolicyRequest:JdCloudRequest
{
    /// 流控策略详情
    var rateLimitPolicyView:RateLimitPolicyView?




    enum CreateRateLimitPolicyRequestRequestCodingKeys: String, CodingKey {
        case rateLimitPolicyView
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRateLimitPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(rateLimitPolicyView, forKey: .rateLimitPolicyView)

    }
}


///  查询绑定部署详情
public class QueryBindGroupPolicyRequest:JdCloudRequest
{
    /// 限流策略ID
    var policyId:String


    public init(regionId: String,policyId:String){
        self.policyId = policyId
        super.init(regionId: regionId)
    }


    enum QueryBindGroupPolicyRequestRequestCodingKeys: String, CodingKey {
        case policyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryBindGroupPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(policyId, forKey: .policyId)

    }
}

/// 查询流控策略列表 
public class QueryRateLimitPoliciesResult:NSObject,JdCloudResult
{
    /// 查询的所有流控策略详情
    var rateLimitPolicys:[RateLimitPolicy?]?

    /// 查询的流控策略数目
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QueryRateLimitPoliciesResultCodingKeys: String, CodingKey {
        case rateLimitPolicys
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryRateLimitPoliciesResultCodingKeys.self)
        if decoderContainer.contains(.rateLimitPolicys)
        {
            self.rateLimitPolicys = try decoderContainer.decode([RateLimitPolicy?]?.self, forKey: .rateLimitPolicys)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QueryRateLimitPoliciesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRateLimitPoliciesResultCodingKeys.self)
        try encoderContainer.encode(rateLimitPolicys, forKey: .rateLimitPolicys)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  检查策略名是否重复
public class CheckPolicyNameRequest:JdCloudRequest
{
    /// PolicyName
    var policyName:String


    public init(regionId: String,policyName:String){
        self.policyName = policyName
        super.init(regionId: regionId)
    }


    enum CheckPolicyNameRequestRequestCodingKeys: String, CodingKey {
        case policyName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckPolicyNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(policyName, forKey: .policyName)

    }
}

/// 修改流控策略 
public class UpdateRateLimitPolicyResult:NSObject,JdCloudResult
{
    /// 流控策略Id
    var policyId:String?



    public override init(){
        super.init()
    }

    enum UpdateRateLimitPolicyResultCodingKeys: String, CodingKey {
        case policyId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateRateLimitPolicyResultCodingKeys.self)
        if decoderContainer.contains(.policyId)
        {
            self.policyId = try decoderContainer.decode(String?.self, forKey: .policyId)
        }
    }
}
public extension UpdateRateLimitPolicyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateRateLimitPolicyResultCodingKeys.self)
        try encoderContainer.encode(policyId, forKey: .policyId)
    }
}
/// 检查策略名是否重复 
public class CheckPolicyNameResult:NSObject,JdCloudResult
{
    /// 返回policyID
    var policyId:String?



    public override init(){
        super.init()
    }

    enum CheckPolicyNameResultCodingKeys: String, CodingKey {
        case policyId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckPolicyNameResultCodingKeys.self)
        if decoderContainer.contains(.policyId)
        {
            self.policyId = try decoderContainer.decode(String?.self, forKey: .policyId)
        }
    }
}
public extension CheckPolicyNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckPolicyNameResultCodingKeys.self)
        try encoderContainer.encode(policyId, forKey: .policyId)
    }
}

///  查询可绑定部署列表
public class QueryPolicyGroupListRequest:JdCloudRequest
{
    /// 限流策略ID
    var policyId:String


    public init(regionId: String,policyId:String){
        self.policyId = policyId
        super.init(regionId: regionId)
    }


    enum QueryPolicyGroupListRequestRequestCodingKeys: String, CodingKey {
        case policyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryPolicyGroupListRequestRequestCodingKeys.self)
        try encoderContainer.encode(policyId, forKey: .policyId)

    }
}

public class QueryPolicyGroupListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryPolicyGroupListResult?;

    enum QueryPolicyGroupListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryPolicyGroupListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryPolicyGroupListResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryPolicyGroupListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryPolicyGroupListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除单个流控策略 
public class DeleteRateLimitPolicyResult:NSObject,JdCloudResult
{
    /// 已删除流控策略Id
    var policyId:String?



    public override init(){
        super.init()
    }

    enum DeleteRateLimitPolicyResultCodingKeys: String, CodingKey {
        case policyId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteRateLimitPolicyResultCodingKeys.self)
        if decoderContainer.contains(.policyId)
        {
            self.policyId = try decoderContainer.decode(String?.self, forKey: .policyId)
        }
    }
}
public extension DeleteRateLimitPolicyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRateLimitPolicyResultCodingKeys.self)
        try encoderContainer.encode(policyId, forKey: .policyId)
    }
}
public class BindGroupPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:BindGroupPolicyResult?;

    enum BindGroupPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BindGroupPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(BindGroupPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension BindGroupPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BindGroupPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 绑定 
public class BindGroupPolicyResult:NSObject,JdCloudResult
{
    /// 绑定部署ID和名称
    var bindGroups:[BindGroups?]?



    public override init(){
        super.init()
    }

    enum BindGroupPolicyResultCodingKeys: String, CodingKey {
        case bindGroups
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BindGroupPolicyResultCodingKeys.self)
        if decoderContainer.contains(.bindGroups)
        {
            self.bindGroups = try decoderContainer.decode([BindGroups?]?.self, forKey: .bindGroups)
        }
    }
}
public extension BindGroupPolicyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BindGroupPolicyResultCodingKeys.self)
        try encoderContainer.encode(bindGroups, forKey: .bindGroups)
    }
}

///  绑定
public class BindGroupPolicyRequest:JdCloudRequest
{
    /// 待绑定的部署ids逗号隔开
    var deploymentIds:String

    /// 限流策略ID
    var policyId:String


    public init(regionId: String,deploymentIds:String,policyId:String){
        self.deploymentIds = deploymentIds
        self.policyId = policyId
        super.init(regionId: regionId)
    }


    enum BindGroupPolicyRequestRequestCodingKeys: String, CodingKey {
        case deploymentIds
        case policyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BindGroupPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(deploymentIds, forKey: .deploymentIds)
        try encoderContainer.encode(policyId, forKey: .policyId)

    }
}

/// 查询可绑定部署列表 
public class QueryPolicyGroupListResult:NSObject,JdCloudResult
{
    /// 查询可绑定的部署列表
    var bindGroups:[BindGroups?]?



    public override init(){
        super.init()
    }

    enum QueryPolicyGroupListResultCodingKeys: String, CodingKey {
        case bindGroups
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryPolicyGroupListResultCodingKeys.self)
        if decoderContainer.contains(.bindGroups)
        {
            self.bindGroups = try decoderContainer.decode([BindGroups?]?.self, forKey: .bindGroups)
        }
    }
}
public extension QueryPolicyGroupListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryPolicyGroupListResultCodingKeys.self)
        try encoderContainer.encode(bindGroups, forKey: .bindGroups)
    }
}
/// 创建流控策略 
public class CreateRateLimitPolicyResult:NSObject,JdCloudResult
{
    /// 流控策略Id
    var policyId:String?



    public override init(){
        super.init()
    }

    enum CreateRateLimitPolicyResultCodingKeys: String, CodingKey {
        case policyId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRateLimitPolicyResultCodingKeys.self)
        if decoderContainer.contains(.policyId)
        {
            self.policyId = try decoderContainer.decode(String?.self, forKey: .policyId)
        }
    }
}
public extension CreateRateLimitPolicyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRateLimitPolicyResultCodingKeys.self)
        try encoderContainer.encode(policyId, forKey: .policyId)
    }
}

///  查询单个流控策略
public class QueryRateLimitPolicyRequest:JdCloudRequest
{
    /// 限流策略ID
    var policyId:String


    public init(regionId: String,policyId:String){
        self.policyId = policyId
        super.init(regionId: regionId)
    }


    enum QueryRateLimitPolicyRequestRequestCodingKeys: String, CodingKey {
        case policyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRateLimitPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(policyId, forKey: .policyId)

    }
}

/// 查询单个流控策略 
public class QueryRateLimitPolicyResult:NSObject,JdCloudResult
{
    /// RateLimitPolicy
    var rateLimitPolicy:RateLimitPolicy?



    public override init(){
        super.init()
    }

    enum QueryRateLimitPolicyResultCodingKeys: String, CodingKey {
        case rateLimitPolicy
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryRateLimitPolicyResultCodingKeys.self)
        if decoderContainer.contains(.rateLimitPolicy)
        {
            self.rateLimitPolicy = try decoderContainer.decode(RateLimitPolicy?.self, forKey: .rateLimitPolicy)
        }
    }
}
public extension QueryRateLimitPolicyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRateLimitPolicyResultCodingKeys.self)
        try encoderContainer.encode(rateLimitPolicy, forKey: .rateLimitPolicy)
    }
}
public class CheckPolicyNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CheckPolicyNameResult?;

    enum CheckPolicyNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckPolicyNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CheckPolicyNameResult?.self, forKey: .result) ?? nil
    }
}

public extension CheckPolicyNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckPolicyNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateRateLimitPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateRateLimitPolicyResult?;

    enum CreateRateLimitPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRateLimitPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateRateLimitPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateRateLimitPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRateLimitPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QueryRateLimitPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryRateLimitPolicyResult?;

    enum QueryRateLimitPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryRateLimitPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryRateLimitPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryRateLimitPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRateLimitPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateRateLimitPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateRateLimitPolicyResult?;

    enum UpdateRateLimitPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateRateLimitPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateRateLimitPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateRateLimitPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateRateLimitPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QueryRateLimitPoliciesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryRateLimitPoliciesResult?;

    enum QueryRateLimitPoliciesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryRateLimitPoliciesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryRateLimitPoliciesResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryRateLimitPoliciesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRateLimitPoliciesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteRateLimitPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteRateLimitPolicyResult?;

    enum DeleteRateLimitPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteRateLimitPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteRateLimitPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteRateLimitPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRateLimitPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateBackendConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateBackendConfigResult?;

    enum CreateBackendConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBackendConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateBackendConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateBackendConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackendConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询backendConfig 
public class DescribeBackendConfigResult:NSObject,JdCloudResult
{
    /// BackendConfig
    var backendConfig:BackendConfig?



    public override init(){
        super.init()
    }

    enum DescribeBackendConfigResultCodingKeys: String, CodingKey {
        case backendConfig
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackendConfigResultCodingKeys.self)
        if decoderContainer.contains(.backendConfig)
        {
            self.backendConfig = try decoderContainer.decode(BackendConfig?.self, forKey: .backendConfig)
        }
    }
}
public extension DescribeBackendConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackendConfigResultCodingKeys.self)
        try encoderContainer.encode(backendConfig, forKey: .backendConfig)
    }
}
public class DescribeBackendConfigsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBackendConfigsResult?;

    enum DescribeBackendConfigsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackendConfigsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBackendConfigsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBackendConfigsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackendConfigsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateBackendConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateBackendConfigResult?;

    enum UpdateBackendConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateBackendConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateBackendConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateBackendConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateBackendConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改后端配置
public class UpdateBackendConfigRequest:JdCloudRequest
{
    /// 分组ID
    var baseGroupId:String?

    /// 环境：test、preview、online
    var environment:String

    /// 后端地址
    var backendUrl:String?

    /// 后端服务类型：mock、HTTP/HTTPS
    var backendServiceType:String

    /// header参数列表
    var headerParams:[SimpleParameter?]?

    /// query参数列表
    var queryParams:[SimpleParameter?]?

    /// 描述
    var descriptionValue:String?

    /// 发布日期，格式为毫秒级时间戳
    var createTime:Int64?

    /// 排序，赋值0时为默认的后端配置
    var sort:Int32

    /// 排序，用于展示使用
    var userSort:Int32?

    /// vpc网关id
    var jdsfId:String?

    /// vpc后端地址
    var jdsfParam:String?

    /// vpc网关所属region
    var jdsfRegion:String?

    /// vpc网关创建者的pin
    var jdsfPin:String?

    /// 分组ID
    var apiGroupId:String

    /// backendConfigId
    var backendConfigId:String


    public init(regionId: String,environment:String,backendServiceType:String,sort:Int32,apiGroupId:String,backendConfigId:String){
        self.environment = environment
        self.backendServiceType = backendServiceType
        self.sort = sort
        self.apiGroupId = apiGroupId
        self.backendConfigId = backendConfigId
        super.init(regionId: regionId)
    }


    enum UpdateBackendConfigRequestRequestCodingKeys: String, CodingKey {
        case baseGroupId
        case environment
        case backendUrl
        case backendServiceType
        case headerParams
        case queryParams
        case descriptionValue = "description"
        case createTime
        case sort
        case userSort
        case jdsfId
        case jdsfParam
        case jdsfRegion
        case jdsfPin
        case apiGroupId
        case backendConfigId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateBackendConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(baseGroupId, forKey: .baseGroupId)
        try encoderContainer.encode(environment, forKey: .environment)
        try encoderContainer.encode(backendUrl, forKey: .backendUrl)
        try encoderContainer.encode(backendServiceType, forKey: .backendServiceType)
        try encoderContainer.encode(headerParams, forKey: .headerParams)
        try encoderContainer.encode(queryParams, forKey: .queryParams)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(sort, forKey: .sort)
        try encoderContainer.encode(userSort, forKey: .userSort)
        try encoderContainer.encode(jdsfId, forKey: .jdsfId)
        try encoderContainer.encode(jdsfParam, forKey: .jdsfParam)
        try encoderContainer.encode(jdsfRegion, forKey: .jdsfRegion)
        try encoderContainer.encode(jdsfPin, forKey: .jdsfPin)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(backendConfigId, forKey: .backendConfigId)

    }
}


///  查询指定环境下的所有后端配置
public class DescribeBackendConfigsRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// sort - 路由排序，赋值0时为默认的后端配置
      /// 
    var filters:[Filter?]?

    /// 分组ID
    var apiGroupId:String

    /// 环境：test、preview、online
    var environment:String


    public init(regionId: String,apiGroupId:String,environment:String){
        self.apiGroupId = apiGroupId
        self.environment = environment
        super.init(regionId: regionId)
    }


    enum DescribeBackendConfigsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case apiGroupId
        case environment
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackendConfigsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(environment, forKey: .environment)

    }
}


///  删除后端配置
public class DeleteBackendConfigRequest:JdCloudRequest
{
    /// 分组ID
    var apiGroupId:String

    /// backendConfigId
    var backendConfigId:String


    public init(regionId: String,apiGroupId:String,backendConfigId:String){
        self.apiGroupId = apiGroupId
        self.backendConfigId = backendConfigId
        super.init(regionId: regionId)
    }


    enum DeleteBackendConfigRequestRequestCodingKeys: String, CodingKey {
        case apiGroupId
        case backendConfigId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBackendConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(backendConfigId, forKey: .backendConfigId)

    }
}


///  查询backendConfig
public class DescribeBackendConfigRequest:JdCloudRequest
{
    /// 分组ID
    var apiGroupId:String

    /// backendConfigId
    var backendConfigId:String


    public init(regionId: String,apiGroupId:String,backendConfigId:String){
        self.apiGroupId = apiGroupId
        self.backendConfigId = backendConfigId
        super.init(regionId: regionId)
    }


    enum DescribeBackendConfigRequestRequestCodingKeys: String, CodingKey {
        case apiGroupId
        case backendConfigId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackendConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(backendConfigId, forKey: .backendConfigId)

    }
}


///  开通后端配置
public class CreateBackendConfigRequest:JdCloudRequest
{
    /// 接口ID
    var backendConfigId:String?

    /// 分组ID
    var baseGroupId:String?

    /// 环境：test、preview、online
    var environment:String

    /// 后端地址
    var backendUrl:String?

    /// 后端服务类型：mock、HTTP/HTTPS
    var backendServiceType:String

    /// header参数列表
    var headerParams:[SimpleParameter?]?

    /// query参数列表
    var queryParams:[SimpleParameter?]?

    /// 描述
    var descriptionValue:String?

    /// 发布日期，格式为毫秒级时间戳
    var createTime:Int64?

    /// 排序，赋值0时为默认的后端配置
    var sort:Int32

    /// 排序，用于展示使用
    var userSort:Int32?

    /// vpc网关id
    var jdsfId:String?

    /// vpc后端地址
    var jdsfParam:String?

    /// vpc网关所属region
    var jdsfRegion:String?

    /// vpc网关创建者的pin
    var jdsfPin:String?

    /// 分组ID
    var apiGroupId:String


    public init(regionId: String,environment:String,backendServiceType:String,sort:Int32,apiGroupId:String){
        self.environment = environment
        self.backendServiceType = backendServiceType
        self.sort = sort
        self.apiGroupId = apiGroupId
        super.init(regionId: regionId)
    }


    enum CreateBackendConfigRequestRequestCodingKeys: String, CodingKey {
        case backendConfigId
        case baseGroupId
        case environment
        case backendUrl
        case backendServiceType
        case headerParams
        case queryParams
        case descriptionValue = "description"
        case createTime
        case sort
        case userSort
        case jdsfId
        case jdsfParam
        case jdsfRegion
        case jdsfPin
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackendConfigRequestRequestCodingKeys.self)
        try encoderContainer.encode(backendConfigId, forKey: .backendConfigId)
        try encoderContainer.encode(baseGroupId, forKey: .baseGroupId)
        try encoderContainer.encode(environment, forKey: .environment)
        try encoderContainer.encode(backendUrl, forKey: .backendUrl)
        try encoderContainer.encode(backendServiceType, forKey: .backendServiceType)
        try encoderContainer.encode(headerParams, forKey: .headerParams)
        try encoderContainer.encode(queryParams, forKey: .queryParams)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(sort, forKey: .sort)
        try encoderContainer.encode(userSort, forKey: .userSort)
        try encoderContainer.encode(jdsfId, forKey: .jdsfId)
        try encoderContainer.encode(jdsfParam, forKey: .jdsfParam)
        try encoderContainer.encode(jdsfRegion, forKey: .jdsfRegion)
        try encoderContainer.encode(jdsfPin, forKey: .jdsfPin)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}

/// 修改后端配置 
public class UpdateBackendConfigResult:NSObject,JdCloudResult
{
}
/// 查询指定环境下的所有后端配置 
public class DescribeBackendConfigsResult:NSObject,JdCloudResult
{
    /// 查询修订版本详情列表
    var backendConfigs:[BackendConfig?]?

    /// 结果总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeBackendConfigsResultCodingKeys: String, CodingKey {
        case backendConfigs
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackendConfigsResultCodingKeys.self)
        if decoderContainer.contains(.backendConfigs)
        {
            self.backendConfigs = try decoderContainer.decode([BackendConfig?]?.self, forKey: .backendConfigs)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeBackendConfigsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackendConfigsResultCodingKeys.self)
        try encoderContainer.encode(backendConfigs, forKey: .backendConfigs)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeBackendConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBackendConfigResult?;

    enum DescribeBackendConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackendConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBackendConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBackendConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackendConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除后端配置 
public class DeleteBackendConfigResult:NSObject,JdCloudResult
{
}
/// 开通后端配置 
public class CreateBackendConfigResult:NSObject,JdCloudResult
{
    /// 主键Id
    var backendConfigId:String?



    public override init(){
        super.init()
    }

    enum CreateBackendConfigResultCodingKeys: String, CodingKey {
        case backendConfigId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBackendConfigResultCodingKeys.self)
        if decoderContainer.contains(.backendConfigId)
        {
            self.backendConfigId = try decoderContainer.decode(String?.self, forKey: .backendConfigId)
        }
    }
}
public extension CreateBackendConfigResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackendConfigResultCodingKeys.self)
        try encoderContainer.encode(backendConfigId, forKey: .backendConfigId)
    }
}
public class DeleteBackendConfigResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteBackendConfigResult?;

    enum DeleteBackendConfigResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteBackendConfigResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteBackendConfigResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteBackendConfigResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBackendConfigResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询分组内全部修订版本号
public class GetRevisionIdsRequest:JdCloudRequest
{
    /// 分组ID
    var apiGroupId:String


    public init(regionId: String,apiGroupId:String){
        self.apiGroupId = apiGroupId
        super.init(regionId: regionId)
    }


    enum GetRevisionIdsRequestRequestCodingKeys: String, CodingKey {
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRevisionIdsRequestRequestCodingKeys.self)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}


///  检查版本号是否重复,返回重复的版本号,如果没有返回空
public class CheckRevisionExistRequest:JdCloudRequest
{
    /// 版本号
    var revision:String

    /// 分组ID
    var apiGroupId:String


    public init(regionId: String,revision:String,apiGroupId:String){
        self.revision = revision
        self.apiGroupId = apiGroupId
        super.init(regionId: regionId)
    }


    enum CheckRevisionExistRequestRequestCodingKeys: String, CodingKey {
        case revision
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckRevisionExistRequestRequestCodingKeys.self)
        try encoderContainer.encode(revision, forKey: .revision)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}

/// 查询某版本对应的api 
public class QueryRevisionResult:NSObject,JdCloudResult
{
    /// api详情
    var apis:[Api?]?

    /// 查询的版本数目
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QueryRevisionResultCodingKeys: String, CodingKey {
        case apis
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryRevisionResultCodingKeys.self)
        if decoderContainer.contains(.apis)
        {
            self.apis = try decoderContainer.decode([Api?]?.self, forKey: .apis)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QueryRevisionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRevisionResultCodingKeys.self)
        try encoderContainer.encode(apis, forKey: .apis)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  查询修订版本列表
public class DescribeRevisionsRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// revision - 修订版本号，精确匹配
      /// environment - 发布环境，模糊匹配
      /// revisionNote - 修订备注，精确匹配
      /// 
    var filters:[Filter?]?

    /// 分组ID
    var apiGroupId:String


    public init(regionId: String,apiGroupId:String){
        self.apiGroupId = apiGroupId
        super.init(regionId: regionId)
    }


    enum DescribeRevisionsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRevisionsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}

public class QueryRevisionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryRevisionResult?;

    enum QueryRevisionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryRevisionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryRevisionResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryRevisionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRevisionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 检查版本号是否重复,返回重复的版本号,如果没有返回空 
public class CheckRevisionExistResult:NSObject,JdCloudResult
{
    /// 新建修订版本号重复否
    var isRepeate:Bool?



    public override init(){
        super.init()
    }

    enum CheckRevisionExistResultCodingKeys: String, CodingKey {
        case isRepeate
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckRevisionExistResultCodingKeys.self)
        if decoderContainer.contains(.isRepeate)
        {
            self.isRepeate = try decoderContainer.decode(Bool?.self, forKey: .isRepeate)
        }
    }
}
public extension CheckRevisionExistResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckRevisionExistResultCodingKeys.self)
        try encoderContainer.encode(isRepeate, forKey: .isRepeate)
    }
}
public class DescribeRevisionsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeRevisionsResult?;

    enum DescribeRevisionsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRevisionsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeRevisionsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeRevisionsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRevisionsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateRevisionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateRevisionResult?;

    enum CreateRevisionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRevisionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateRevisionResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateRevisionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRevisionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除单个修订版本 
public class DeleteRevisionResult:NSObject,JdCloudResult
{
    /// 删除修订版本成功否
    var deleteRevision:Bool?



    public override init(){
        super.init()
    }

    enum DeleteRevisionResultCodingKeys: String, CodingKey {
        case deleteRevision
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteRevisionResultCodingKeys.self)
        if decoderContainer.contains(.deleteRevision)
        {
            self.deleteRevision = try decoderContainer.decode(Bool?.self, forKey: .deleteRevision)
        }
    }
}
public extension DeleteRevisionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRevisionResultCodingKeys.self)
        try encoderContainer.encode(deleteRevision, forKey: .deleteRevision)
    }
}
/// 查询修订版本列表 
public class DescribeRevisionsResult:NSObject,JdCloudResult
{
    /// 查询修订版本详情列表
    var revisions:[RevisionList?]?

    /// 查询的版本数目
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeRevisionsResultCodingKeys: String, CodingKey {
        case revisions
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRevisionsResultCodingKeys.self)
        if decoderContainer.contains(.revisions)
        {
            self.revisions = try decoderContainer.decode([RevisionList?]?.self, forKey: .revisions)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeRevisionsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRevisionsResultCodingKeys.self)
        try encoderContainer.encode(revisions, forKey: .revisions)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 创建修订版本 
public class CreateRevisionResult:NSObject,JdCloudResult
{
    /// 新建的修订版本号
    var revision:String?



    public override init(){
        super.init()
    }

    enum CreateRevisionResultCodingKeys: String, CodingKey {
        case revision
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRevisionResultCodingKeys.self)
        if decoderContainer.contains(.revision)
        {
            self.revision = try decoderContainer.decode(String?.self, forKey: .revision)
        }
    }
}
public extension CreateRevisionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRevisionResultCodingKeys.self)
        try encoderContainer.encode(revision, forKey: .revision)
    }
}

///  修改单个修订版本
public class ModifyRevisionRequest:JdCloudRequest
{
    /// 修订备注
    var revisionNote:String?

    /// 分组ID
    var apiGroupId:String

    /// 版本ID
    var revisionId:String


    public init(regionId: String,apiGroupId:String,revisionId:String){
        self.apiGroupId = apiGroupId
        self.revisionId = revisionId
        super.init(regionId: regionId)
    }


    enum ModifyRevisionRequestRequestCodingKeys: String, CodingKey {
        case revisionNote
        case apiGroupId
        case revisionId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyRevisionRequestRequestCodingKeys.self)
        try encoderContainer.encode(revisionNote, forKey: .revisionNote)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(revisionId, forKey: .revisionId)

    }
}

/// 修改单个修订版本 
public class ModifyRevisionResult:NSObject,JdCloudResult
{
    /// 修改修订版本成功否
    var updateRevision:Bool?



    public override init(){
        super.init()
    }

    enum ModifyRevisionResultCodingKeys: String, CodingKey {
        case updateRevision
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyRevisionResultCodingKeys.self)
        if decoderContainer.contains(.updateRevision)
        {
            self.updateRevision = try decoderContainer.decode(Bool?.self, forKey: .updateRevision)
        }
    }
}
public extension ModifyRevisionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyRevisionResultCodingKeys.self)
        try encoderContainer.encode(updateRevision, forKey: .updateRevision)
    }
}
public class ModifyRevisionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyRevisionResult?;

    enum ModifyRevisionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyRevisionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyRevisionResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyRevisionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyRevisionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteRevisionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteRevisionResult?;

    enum DeleteRevisionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteRevisionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteRevisionResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteRevisionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRevisionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetRevisionIdsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRevisionIdsResult?;

    enum GetRevisionIdsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRevisionIdsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRevisionIdsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRevisionIdsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRevisionIdsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询某版本对应的api
public class QueryRevisionRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// revision - 修订版本号，模糊匹配
      /// environment - 发布环境，模糊匹配
      /// revisionNote - 修订备注，模糊匹配
      /// 
    var filters:[Filter?]?

    /// 分组ID
    var apiGroupId:String

    /// 版本ID
    var revisionId:String


    public init(regionId: String,apiGroupId:String,revisionId:String){
        self.apiGroupId = apiGroupId
        self.revisionId = revisionId
        super.init(regionId: regionId)
    }


    enum QueryRevisionRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case apiGroupId
        case revisionId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryRevisionRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(revisionId, forKey: .revisionId)

    }
}


///  创建修订版本
public class CreateRevisionRequest:JdCloudRequest
{
    /// 修订版本号，如果创建版本时传回修订版本，此为必填项
    var revision:String?

    /// 基于此版本，如果创建版本时传回修订版本，此为必填项
    var baseRevision:String?

    /// 修订备注
    var revisionNote:String?

    /// 分组ID
    var apiGroupId:String


    public init(regionId: String,apiGroupId:String){
        self.apiGroupId = apiGroupId
        super.init(regionId: regionId)
    }


    enum CreateRevisionRequestRequestCodingKeys: String, CodingKey {
        case revision
        case baseRevision
        case revisionNote
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRevisionRequestRequestCodingKeys.self)
        try encoderContainer.encode(revision, forKey: .revision)
        try encoderContainer.encode(baseRevision, forKey: .baseRevision)
        try encoderContainer.encode(revisionNote, forKey: .revisionNote)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}

/// 查询分组内全部修订版本号 
public class GetRevisionIdsResult:NSObject,JdCloudResult
{
    /// 查询修订版本详情列表
    var revisions:[RevisionList?]?



    public override init(){
        super.init()
    }

    enum GetRevisionIdsResultCodingKeys: String, CodingKey {
        case revisions
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRevisionIdsResultCodingKeys.self)
        if decoderContainer.contains(.revisions)
        {
            self.revisions = try decoderContainer.decode([RevisionList?]?.self, forKey: .revisions)
        }
    }
}
public extension GetRevisionIdsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRevisionIdsResultCodingKeys.self)
        try encoderContainer.encode(revisions, forKey: .revisions)
    }
}

///  删除单个修订版本
public class DeleteRevisionRequest:JdCloudRequest
{
    /// 分组ID
    var apiGroupId:String

    /// 版本ID
    var revisionId:String


    public init(regionId: String,apiGroupId:String,revisionId:String){
        self.apiGroupId = apiGroupId
        self.revisionId = revisionId
        super.init(regionId: regionId)
    }


    enum DeleteRevisionRequestRequestCodingKeys: String, CodingKey {
        case apiGroupId
        case revisionId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRevisionRequestRequestCodingKeys.self)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(revisionId, forKey: .revisionId)

    }
}

public class CheckRevisionExistResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CheckRevisionExistResult?;

    enum CheckRevisionExistResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckRevisionExistResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CheckRevisionExistResult?.self, forKey: .result) ?? nil
    }
}

public extension CheckRevisionExistResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckRevisionExistResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询密钥列表 
public class QueryUcAccessKeysResult:NSObject,JdCloudResult
{
    /// 密钥信息
    var accessKeys:[UcAccessKey?]?

    /// 查询的密钥数目
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QueryUcAccessKeysResultCodingKeys: String, CodingKey {
        case accessKeys
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryUcAccessKeysResultCodingKeys.self)
        if decoderContainer.contains(.accessKeys)
        {
            self.accessKeys = try decoderContainer.decode([UcAccessKey?]?.self, forKey: .accessKeys)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QueryUcAccessKeysResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryUcAccessKeysResultCodingKeys.self)
        try encoderContainer.encode(accessKeys, forKey: .accessKeys)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  查询密钥列表
public class QueryUcAccessKeysRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// accessKey - accesskey，精确匹配
      /// 
    var filters:[Filter?]?




    enum QueryUcAccessKeysRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryUcAccessKeysRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class QueryUcAccessKeysResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryUcAccessKeysResult?;

    enum QueryUcAccessKeysResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryUcAccessKeysResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryUcAccessKeysResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryUcAccessKeysResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryUcAccessKeysResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询key列表
public class QueryKeysRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// 排序类型
    var orderBy:String?

    /// 用户类型
    var userType:String?

    /// 密钥Id
    var keyId:String?




    enum QueryKeysRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case orderBy
        case userType
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeysRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(orderBy, forKey: .orderBy)
        try encoderContainer.encode(userType, forKey: .userType)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

public class QueryKeyInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryKeyInfoResult?;

    enum QueryKeyInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryKeyInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryKeyInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryKeyInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeyInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建key
public class CreateKeyRequest:JdCloudRequest
{
    /// key 名称
    var keyName:String?

    /// key 描述
    var keyDesc:String?




    enum CreateKeyRequestRequestCodingKeys: String, CodingKey {
        case keyName
        case keyDesc
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyName, forKey: .keyName)
        try encoderContainer.encode(keyDesc, forKey: .keyDesc)

    }
}

public class ResetKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResetKeyResult?;

    enum ResetKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResetKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResetKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension ResetKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改key信息
public class UpdateKeyRequest:JdCloudRequest
{
    /// keyid
    var keyId:String

    /// key 名称
    var keyName:String?

    /// KeyDesc
    var keyDesc:String?


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum UpdateKeyRequestRequestCodingKeys: String, CodingKey {
        case keyId
        case keyName
        case keyDesc
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)
        try encoderContainer.encode(keyName, forKey: .keyName)
        try encoderContainer.encode(keyDesc, forKey: .keyDesc)

    }
}

/// 重置key的acesskey和secretkey 
public class ResetKeyResult:NSObject,JdCloudResult
{
    /// KeyInfo
    var keyInfo:KeyInfo?



    public override init(){
        super.init()
    }

    enum ResetKeyResultCodingKeys: String, CodingKey {
        case keyInfo
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResetKeyResultCodingKeys.self)
        if decoderContainer.contains(.keyInfo)
        {
            self.keyInfo = try decoderContainer.decode(KeyInfo?.self, forKey: .keyInfo)
        }
    }
}
public extension ResetKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetKeyResultCodingKeys.self)
        try encoderContainer.encode(keyInfo, forKey: .keyInfo)
    }
}

///  查询key详情
public class QueryKeyInfoRequest:JdCloudRequest
{
    /// keyId
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum QueryKeyInfoRequestRequestCodingKeys: String, CodingKey {
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeyInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

public class CreateKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateKeyResult?;

    enum CreateKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateKeyResult?;

    enum UpdateKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QueryKeysResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryKeysResult?;

    enum QueryKeysResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryKeysResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryKeysResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryKeysResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeysResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  重置key的acesskey和secretkey
public class ResetKeyRequest:JdCloudRequest
{
    /// keyId
    var keyId:String


    public init(regionId: String,keyId:String){
        self.keyId = keyId
        super.init(regionId: regionId)
    }


    enum ResetKeyRequestRequestCodingKeys: String, CodingKey {
        case keyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyId, forKey: .keyId)

    }
}

/// 查询key列表 
public class QueryKeysResult:NSObject,JdCloudResult
{
    /// total count
    var total:Int?

    /// key详情
    var data:[KeyInfo?]?



    public override init(){
        super.init()
    }

    enum QueryKeysResultCodingKeys: String, CodingKey {
        case total
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryKeysResultCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([KeyInfo?]?.self, forKey: .data)
        }
    }
}
public extension QueryKeysResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeysResultCodingKeys.self)
        try encoderContainer.encode(total, forKey: .total)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 查询key详情 
public class QueryKeyInfoResult:NSObject,JdCloudResult
{
    /// KeyInfo
    var keyInfo:KeyInfo?



    public override init(){
        super.init()
    }

    enum QueryKeyInfoResultCodingKeys: String, CodingKey {
        case keyInfo
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryKeyInfoResultCodingKeys.self)
        if decoderContainer.contains(.keyInfo)
        {
            self.keyInfo = try decoderContainer.decode(KeyInfo?.self, forKey: .keyInfo)
        }
    }
}
public extension QueryKeyInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeyInfoResultCodingKeys.self)
        try encoderContainer.encode(keyInfo, forKey: .keyInfo)
    }
}
/// 创建key 
public class CreateKeyResult:NSObject,JdCloudResult
{
    /// 生成的accessKey
    var accessKey:String?

    /// 生成的secretKey
    var secretKey:String?



    public override init(){
        super.init()
    }

    enum CreateKeyResultCodingKeys: String, CodingKey {
        case accessKey
        case secretKey
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateKeyResultCodingKeys.self)
        if decoderContainer.contains(.accessKey)
        {
            self.accessKey = try decoderContainer.decode(String?.self, forKey: .accessKey)
        }
        if decoderContainer.contains(.secretKey)
        {
            self.secretKey = try decoderContainer.decode(String?.self, forKey: .secretKey)
        }
    }
}
public extension CreateKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeyResultCodingKeys.self)
        try encoderContainer.encode(accessKey, forKey: .accessKey)
        try encoderContainer.encode(secretKey, forKey: .secretKey)
    }
}
/// 修改key信息 
public class UpdateKeyResult:NSObject,JdCloudResult
{
}

///  删除单个API分组
public class DeleteApiGroupRequest:JdCloudRequest
{
    /// 分组ID
    var apiGroupId:String


    public init(regionId: String,apiGroupId:String){
        self.apiGroupId = apiGroupId
        super.init(regionId: regionId)
    }


    enum DeleteApiGroupRequestRequestCodingKeys: String, CodingKey {
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteApiGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}

public class DescribeApiGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeApiGroupResult?;

    enum DescribeApiGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeApiGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeApiGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeApiGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeApiGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 检查分组名称是否重复,返回重复的apiGroupId,如果没有返回空 
public class CheckGroupNameExistResult:NSObject,JdCloudResult
{
    /// 分组id
    var apiGroupId:String?



    public override init(){
        super.init()
    }

    enum CheckGroupNameExistResultCodingKeys: String, CodingKey {
        case apiGroupId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckGroupNameExistResultCodingKeys.self)
        if decoderContainer.contains(.apiGroupId)
        {
            self.apiGroupId = try decoderContainer.decode(String?.self, forKey: .apiGroupId)
        }
    }
}
public extension CheckGroupNameExistResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckGroupNameExistResultCodingKeys.self)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
    }
}

///  检查分组名称是否重复,返回重复的apiGroupId,如果没有返回空
public class CheckGroupNameExistRequest:JdCloudRequest
{
    /// 分组名称
    var groupName:String


    public init(regionId: String,groupName:String){
        self.groupName = groupName
        super.init(regionId: regionId)
    }


    enum CheckGroupNameExistRequestRequestCodingKeys: String, CodingKey {
        case groupName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckGroupNameExistRequestRequestCodingKeys.self)
        try encoderContainer.encode(groupName, forKey: .groupName)

    }
}

public class CreateApiGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateApiGroupResult?;

    enum CreateApiGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateApiGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateApiGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateApiGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateApiGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CheckGroupNameExistResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CheckGroupNameExistResult?;

    enum CheckGroupNameExistResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckGroupNameExistResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CheckGroupNameExistResult?.self, forKey: .result) ?? nil
    }
}

public extension CheckGroupNameExistResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckGroupNameExistResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteApiGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteApiGroupResult?;

    enum DeleteApiGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteApiGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteApiGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteApiGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteApiGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询分组
public class DescribeIsDeployApiGroupsRequest:JdCloudRequest
{
    /// deployStatus - 发布状态，已发布：1，未发布：0
      /// 
    var filters:[Filter?]?




    enum DescribeIsDeployApiGroupsRequestRequestCodingKeys: String, CodingKey {
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIsDeployApiGroupsRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 查询分组 
public class DescribeApiGroupsResult:NSObject,JdCloudResult
{
    /// 查询的API分组详情列表
    var apiGroups:[ApiGroup?]?

    /// 查询的分组数目
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeApiGroupsResultCodingKeys: String, CodingKey {
        case apiGroups
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeApiGroupsResultCodingKeys.self)
        if decoderContainer.contains(.apiGroups)
        {
            self.apiGroups = try decoderContainer.decode([ApiGroup?]?.self, forKey: .apiGroups)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeApiGroupsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeApiGroupsResultCodingKeys.self)
        try encoderContainer.encode(apiGroups, forKey: .apiGroups)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  修改API分组信息
public class ModifyApiGroupAttributeRequest:JdCloudRequest
{
    /// 名称
    var groupName:String?

    /// 描述
    var descriptionValue:String?

    /// 分组路径前缀
    var prefix:String?

    /// 密钥验证方式：check_exist（密钥必须在访问授权中已配置）、no_check_exist（无需事先配置）
    var keyCheck:String?

    /// 访问授权方式：None（免鉴权）、jd_cloud（开启访问授权，且必须使用京东云的AK、SK验签）、hufu（虎符用户）
    var authType:String?

    /// 是否转发分组路径到后端服务：0（不转发）、1（转发）默认为1
    var prefixStrip:Int?

    /// 分组类型：api_group（api分组）、jdsf_group（微服务分组）默认为 api_group
    var groupType:String?

    /// 微服务网关名称
    var jdsfName:String?

    /// 微服务注册中心ID
    var jdsfRegistryName:String?

    /// 微服务网关ID
    var jdsfId:String?

    /// 分组ID
    var apiGroupId:String


    public init(regionId: String,apiGroupId:String){
        self.apiGroupId = apiGroupId
        super.init(regionId: regionId)
    }


    enum ModifyApiGroupAttributeRequestRequestCodingKeys: String, CodingKey {
        case groupName
        case descriptionValue = "description"
        case prefix
        case keyCheck
        case authType
        case prefixStrip
        case groupType
        case jdsfName
        case jdsfRegistryName
        case jdsfId
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyApiGroupAttributeRequestRequestCodingKeys.self)
        try encoderContainer.encode(groupName, forKey: .groupName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(prefix, forKey: .prefix)
        try encoderContainer.encode(keyCheck, forKey: .keyCheck)
        try encoderContainer.encode(authType, forKey: .authType)
        try encoderContainer.encode(prefixStrip, forKey: .prefixStrip)
        try encoderContainer.encode(groupType, forKey: .groupType)
        try encoderContainer.encode(jdsfName, forKey: .jdsfName)
        try encoderContainer.encode(jdsfRegistryName, forKey: .jdsfRegistryName)
        try encoderContainer.encode(jdsfId, forKey: .jdsfId)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}

/// 修改API分组信息 
public class ModifyApiGroupAttributeResult:NSObject,JdCloudResult
{
}
public class DescribeApiGroupsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeApiGroupsResult?;

    enum DescribeApiGroupsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeApiGroupsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeApiGroupsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeApiGroupsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeApiGroupsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询分组 
public class DescribeIsDeployApiGroupsResult:NSObject,JdCloudResult
{
    /// 查询的API分组详情列表
    var apiGroups:[ApiGroup?]?

    /// 查询的分组数目
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeIsDeployApiGroupsResultCodingKeys: String, CodingKey {
        case apiGroups
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIsDeployApiGroupsResultCodingKeys.self)
        if decoderContainer.contains(.apiGroups)
        {
            self.apiGroups = try decoderContainer.decode([ApiGroup?]?.self, forKey: .apiGroups)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeIsDeployApiGroupsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIsDeployApiGroupsResultCodingKeys.self)
        try encoderContainer.encode(apiGroups, forKey: .apiGroups)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 创建API分组 
public class CreateApiGroupResult:NSObject,JdCloudResult
{
    /// 创建的API分组ID
    var apiGroupId:String?

    /// 修订版本号
    var revision:String?



    public override init(){
        super.init()
    }

    enum CreateApiGroupResultCodingKeys: String, CodingKey {
        case apiGroupId
        case revision
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateApiGroupResultCodingKeys.self)
        if decoderContainer.contains(.apiGroupId)
        {
            self.apiGroupId = try decoderContainer.decode(String?.self, forKey: .apiGroupId)
        }
        if decoderContainer.contains(.revision)
        {
            self.revision = try decoderContainer.decode(String?.self, forKey: .revision)
        }
    }
}
public extension CreateApiGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateApiGroupResultCodingKeys.self)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)
        try encoderContainer.encode(revision, forKey: .revision)
    }
}

///  查询API分组详情
public class DescribeApiGroupRequest:JdCloudRequest
{
    /// 分组ID
    var apiGroupId:String


    public init(regionId: String,apiGroupId:String){
        self.apiGroupId = apiGroupId
        super.init(regionId: regionId)
    }


    enum DescribeApiGroupRequestRequestCodingKeys: String, CodingKey {
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeApiGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}

/// 查询API分组详情 
public class DescribeApiGroupResult:NSObject,JdCloudResult
{
    /// ApiGroup
    var apiGroup:ApiGroup?



    public override init(){
        super.init()
    }

    enum DescribeApiGroupResultCodingKeys: String, CodingKey {
        case apiGroup
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeApiGroupResultCodingKeys.self)
        if decoderContainer.contains(.apiGroup)
        {
            self.apiGroup = try decoderContainer.decode(ApiGroup?.self, forKey: .apiGroup)
        }
    }
}
public extension DescribeApiGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeApiGroupResultCodingKeys.self)
        try encoderContainer.encode(apiGroup, forKey: .apiGroup)
    }
}

///  创建API分组
public class CreateApiGroupRequest:JdCloudRequest
{
    /// 名称
    var groupName:String

    /// 描述
    var descriptionValue:String?

    /// 分组路径前缀，无需添加/
    var prefix:String?

    /// 密钥验证方式：check_exist（密钥必须在访问授权中已配置）、no_check_exist（无需事先配置）
    var keyCheck:String?

    /// 访问授权方式：None（免鉴权）、jd_cloud（开启访问授权，且必须使用京东云的AK、SK验签）、hufu（虎符用户）
    var authType:String

    /// 是否转发分组路径到后端服务：0（不转发）、1（转发）默认为1
    var prefixStrip:Int?

    /// 分组类型：api_group（api分组）、jdsf_group（微服务分组）默认为 api_group
    var groupType:String?

    /// 微服务网关名称
    var jdsfName:String?

    /// 微服务注册中心ID
    var jdsfRegistryName:String?

    /// 微服务网关ID
    var jdsfId:String?


    public init(regionId: String,groupName:String,authType:String){
        self.groupName = groupName
        self.authType = authType
        super.init(regionId: regionId)
    }


    enum CreateApiGroupRequestRequestCodingKeys: String, CodingKey {
        case groupName
        case descriptionValue = "description"
        case prefix
        case keyCheck
        case authType
        case prefixStrip
        case groupType
        case jdsfName
        case jdsfRegistryName
        case jdsfId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateApiGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(groupName, forKey: .groupName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(prefix, forKey: .prefix)
        try encoderContainer.encode(keyCheck, forKey: .keyCheck)
        try encoderContainer.encode(authType, forKey: .authType)
        try encoderContainer.encode(prefixStrip, forKey: .prefixStrip)
        try encoderContainer.encode(groupType, forKey: .groupType)
        try encoderContainer.encode(jdsfName, forKey: .jdsfName)
        try encoderContainer.encode(jdsfRegistryName, forKey: .jdsfRegistryName)
        try encoderContainer.encode(jdsfId, forKey: .jdsfId)

    }
}

/// 删除单个API分组 
public class DeleteApiGroupResult:NSObject,JdCloudResult
{
}
public class DescribeIsDeployApiGroupsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeIsDeployApiGroupsResult?;

    enum DescribeIsDeployApiGroupsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIsDeployApiGroupsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeIsDeployApiGroupsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeIsDeployApiGroupsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIsDeployApiGroupsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyApiGroupAttributeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyApiGroupAttributeResult?;

    enum ModifyApiGroupAttributeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyApiGroupAttributeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyApiGroupAttributeResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyApiGroupAttributeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyApiGroupAttributeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询分组
public class DescribeApiGroupsRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// groupName - 分组名称，模糊匹配，支持单个
      /// description - 描述信息，模糊匹配，支持单个
      /// groupId - 分组ID，精确匹配
      /// domain - 域名，模糊匹配
      /// jdsfId - 微服务网关ID，精确匹配
      /// 
    var filters:[Filter?]?

    /// 标签查询条件
    var tagFilters:[TagFilter?]?




    enum DescribeApiGroupsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case tagFilters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeApiGroupsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(tagFilters, forKey: .tagFilters)

    }
}

/// 添加用户域名 
public class CreateUserDomainResult:NSObject,JdCloudResult
{
    /// 生成的domainId
    var domainId:String?



    public override init(){
        super.init()
    }

    enum CreateUserDomainResultCodingKeys: String, CodingKey {
        case domainId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateUserDomainResultCodingKeys.self)
        if decoderContainer.contains(.domainId)
        {
            self.domainId = try decoderContainer.decode(String?.self, forKey: .domainId)
        }
    }
}
public extension CreateUserDomainResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateUserDomainResultCodingKeys.self)
        try encoderContainer.encode(domainId, forKey: .domainId)
    }
}
public class QueryUserDomainsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryUserDomainsResult?;

    enum QueryUserDomainsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryUserDomainsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryUserDomainsResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryUserDomainsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryUserDomainsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除用户域名接口
public class DeleteUserDomainRequest:JdCloudRequest
{
    /// 要删除domain的id集合，以,分隔
    var domainIds:String

    /// api分组id
    var apiGroupId:String?


    public init(regionId: String,domainIds:String){
        self.domainIds = domainIds
        super.init(regionId: regionId)
    }


    enum DeleteUserDomainRequestRequestCodingKeys: String, CodingKey {
        case domainIds
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteUserDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainIds, forKey: .domainIds)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}


///  查询domian列表
public class QueryUserDomainsRequest:JdCloudRequest
{
    /// 页码
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// 排序类型
    var orderBy:String?

    /// api分组id
    var apiGroupId:String


    public init(regionId: String,apiGroupId:String){
        self.apiGroupId = apiGroupId
        super.init(regionId: regionId)
    }


    enum QueryUserDomainsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case orderBy
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryUserDomainsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(orderBy, forKey: .orderBy)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}


///  添加用户域名
public class CreateUserDomainRequest:JdCloudRequest
{
    /// 域名
    var domain:String

    /// 协议
    var protocolValue:String?

    /// api分组id
    var apiGroupId:String


    public init(regionId: String,domain:String,apiGroupId:String){
        self.domain = domain
        self.apiGroupId = apiGroupId
        super.init(regionId: regionId)
    }


    enum CreateUserDomainRequestRequestCodingKeys: String, CodingKey {
        case domain
        case protocolValue = "protocol"
        case apiGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateUserDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(domain, forKey: .domain)
        try encoderContainer.encode(protocolValue, forKey: .protocolValue)
        try encoderContainer.encode(apiGroupId, forKey: .apiGroupId)

    }
}

/// 删除用户域名接口 
public class DeleteUserDomainResult:NSObject,JdCloudResult
{
}
public class DeleteUserDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteUserDomainResult?;

    enum DeleteUserDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteUserDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteUserDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteUserDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteUserDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询domian列表 
public class QueryUserDomainsResult:NSObject,JdCloudResult
{
    /// total count
    var total:Int?

    /// key详情
    var data:[DomainInfo?]?



    public override init(){
        super.init()
    }

    enum QueryUserDomainsResultCodingKeys: String, CodingKey {
        case total
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryUserDomainsResultCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int?.self, forKey: .total)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([DomainInfo?]?.self, forKey: .data)
        }
    }
}
public extension QueryUserDomainsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryUserDomainsResultCodingKeys.self)
        try encoderContainer.encode(total, forKey: .total)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class CreateUserDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateUserDomainResult?;

    enum CreateUserDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateUserDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateUserDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateUserDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateUserDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询单个密钥
public class QueryAccessKeyRequest:JdCloudRequest
{
    /// access key id
    var accessKeyId:String


    public init(regionId: String,accessKeyId:String){
        self.accessKeyId = accessKeyId
        super.init(regionId: regionId)
    }


    enum QueryAccessKeyRequestRequestCodingKeys: String, CodingKey {
        case accessKeyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAccessKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessKeyId, forKey: .accessKeyId)

    }
}

/// 查询可绑定部署列表 
public class QueryKeyGroupListResult:NSObject,JdCloudResult
{
    /// 查询可绑定的部署列表
    var bindGroups:[BindGroups?]?



    public override init(){
        super.init()
    }

    enum QueryKeyGroupListResultCodingKeys: String, CodingKey {
        case bindGroups
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryKeyGroupListResultCodingKeys.self)
        if decoderContainer.contains(.bindGroups)
        {
            self.bindGroups = try decoderContainer.decode([BindGroups?]?.self, forKey: .bindGroups)
        }
    }
}
public extension QueryKeyGroupListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeyGroupListResultCodingKeys.self)
        try encoderContainer.encode(bindGroups, forKey: .bindGroups)
    }
}

///  查询可绑定部署列表
public class QueryKeyGroupListRequest:JdCloudRequest
{
    /// access key id
    var accessKeyId:String


    public init(regionId: String,accessKeyId:String){
        self.accessKeyId = accessKeyId
        super.init(regionId: regionId)
    }


    enum QueryKeyGroupListRequestRequestCodingKeys: String, CodingKey {
        case accessKeyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeyGroupListRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessKeyId, forKey: .accessKeyId)

    }
}


///  删除密钥
public class DeleteAccessKeyRequest:JdCloudRequest
{
    /// access key id
    var accessKeyId:String


    public init(regionId: String,accessKeyId:String){
        self.accessKeyId = accessKeyId
        super.init(regionId: regionId)
    }


    enum DeleteAccessKeyRequestRequestCodingKeys: String, CodingKey {
        case accessKeyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAccessKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessKeyId, forKey: .accessKeyId)

    }
}

/// 查询单个密钥 
public class QueryAccessKeyResult:NSObject,JdCloudResult
{
    /// AccessKey
    var accessKey:AccessKey?



    public override init(){
        super.init()
    }

    enum QueryAccessKeyResultCodingKeys: String, CodingKey {
        case accessKey
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryAccessKeyResultCodingKeys.self)
        if decoderContainer.contains(.accessKey)
        {
            self.accessKey = try decoderContainer.decode(AccessKey?.self, forKey: .accessKey)
        }
    }
}
public extension QueryAccessKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAccessKeyResultCodingKeys.self)
        try encoderContainer.encode(accessKey, forKey: .accessKey)
    }
}
/// 检查AccessKey是否重复 
public class CheckKeyExistResult:NSObject,JdCloudResult
{
}
public class QueryAccessKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryAccessKeyResult?;

    enum QueryAccessKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryAccessKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryAccessKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryAccessKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAccessKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  绑定分组
public class BindGroupKeyRequest:JdCloudRequest
{
    /// 待绑定的部署ids用逗号隔开
    var deploymentIds:String

    /// access key id
    var accessKeyId:String


    public init(regionId: String,deploymentIds:String,accessKeyId:String){
        self.deploymentIds = deploymentIds
        self.accessKeyId = accessKeyId
        super.init(regionId: regionId)
    }


    enum BindGroupKeyRequestRequestCodingKeys: String, CodingKey {
        case deploymentIds
        case accessKeyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BindGroupKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(deploymentIds, forKey: .deploymentIds)
        try encoderContainer.encode(accessKeyId, forKey: .accessKeyId)

    }
}

/// 创建密钥 
public class CreateAccessKeyResult:NSObject,JdCloudResult
{
    /// 已创建密钥ID
    var accessKeyId:String?



    public override init(){
        super.init()
    }

    enum CreateAccessKeyResultCodingKeys: String, CodingKey {
        case accessKeyId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAccessKeyResultCodingKeys.self)
        if decoderContainer.contains(.accessKeyId)
        {
            self.accessKeyId = try decoderContainer.decode(String?.self, forKey: .accessKeyId)
        }
    }
}
public extension CreateAccessKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAccessKeyResultCodingKeys.self)
        try encoderContainer.encode(accessKeyId, forKey: .accessKeyId)
    }
}
/// 删除密钥 
public class DeleteAccessKeyResult:NSObject,JdCloudResult
{
    /// 已删除密钥Id
    var accessKeyId:String?



    public override init(){
        super.init()
    }

    enum DeleteAccessKeyResultCodingKeys: String, CodingKey {
        case accessKeyId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteAccessKeyResultCodingKeys.self)
        if decoderContainer.contains(.accessKeyId)
        {
            self.accessKeyId = try decoderContainer.decode(String?.self, forKey: .accessKeyId)
        }
    }
}
public extension DeleteAccessKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAccessKeyResultCodingKeys.self)
        try encoderContainer.encode(accessKeyId, forKey: .accessKeyId)
    }
}
public class QueryBindGroupKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryBindGroupKeyResult?;

    enum QueryBindGroupKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryBindGroupKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryBindGroupKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryBindGroupKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryBindGroupKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QueryKeyGroupListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryKeyGroupListResult?;

    enum QueryKeyGroupListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryKeyGroupListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryKeyGroupListResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryKeyGroupListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryKeyGroupListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteAccessKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteAccessKeyResult?;

    enum DeleteAccessKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteAccessKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteAccessKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteAccessKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAccessKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateAccessKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateAccessKeyResult?;

    enum UpdateAccessKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateAccessKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateAccessKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateAccessKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAccessKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  检查AccessKey是否重复
public class CheckKeyExistRequest:JdCloudRequest
{
    /// AccessKey
    var accessKey:String

    /// AccessKeyType
    var accessKeyType:String


    public init(regionId: String,accessKey:String,accessKeyType:String){
        self.accessKey = accessKey
        self.accessKeyType = accessKeyType
        super.init(regionId: regionId)
    }


    enum CheckKeyExistRequestRequestCodingKeys: String, CodingKey {
        case accessKey
        case accessKeyType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckKeyExistRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessKey, forKey: .accessKey)
        try encoderContainer.encode(accessKeyType, forKey: .accessKeyType)

    }
}

public class BindGroupKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:BindGroupKeyResult?;

    enum BindGroupKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BindGroupKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(BindGroupKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension BindGroupKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BindGroupKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询密钥列表 
public class QueryAccessKeysResult:NSObject,JdCloudResult
{
    /// 密钥详情
    var accessKeys:[AccessKey?]?

    /// 查询的密钥数目
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QueryAccessKeysResultCodingKeys: String, CodingKey {
        case accessKeys
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryAccessKeysResultCodingKeys.self)
        if decoderContainer.contains(.accessKeys)
        {
            self.accessKeys = try decoderContainer.decode([AccessKey?]?.self, forKey: .accessKeys)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QueryAccessKeysResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAccessKeysResultCodingKeys.self)
        try encoderContainer.encode(accessKeys, forKey: .accessKeys)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class CreateAccessKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateAccessKeyResult?;

    enum CreateAccessKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAccessKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateAccessKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateAccessKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAccessKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  更新密钥
public class UpdateAccessKeyRequest:JdCloudRequest
{
    /// 描述
    var descriptionValue:String?

    /// 密钥类型
    var accessKeyType:String?

    /// Access Key
    var accessKey:String?

    /// access key id
    var accessKeyId:String


    public init(regionId: String,accessKeyId:String){
        self.accessKeyId = accessKeyId
        super.init(regionId: regionId)
    }


    enum UpdateAccessKeyRequestRequestCodingKeys: String, CodingKey {
        case descriptionValue = "description"
        case accessKeyType
        case accessKey
        case accessKeyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAccessKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(accessKeyType, forKey: .accessKeyType)
        try encoderContainer.encode(accessKey, forKey: .accessKey)
        try encoderContainer.encode(accessKeyId, forKey: .accessKeyId)

    }
}


///  查询绑定分组详情
public class QueryBindGroupKeyRequest:JdCloudRequest
{
    /// access key id
    var accessKeyId:String


    public init(regionId: String,accessKeyId:String){
        self.accessKeyId = accessKeyId
        super.init(regionId: regionId)
    }


    enum QueryBindGroupKeyRequestRequestCodingKeys: String, CodingKey {
        case accessKeyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryBindGroupKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessKeyId, forKey: .accessKeyId)

    }
}


///  创建密钥
public class CreateAccessKeyRequest:JdCloudRequest
{
    /// 描述
    var descriptionValue:String?

    /// 密钥类型
    var accessKeyType:String?

    /// Access Key
    var accessKey:String?




    enum CreateAccessKeyRequestRequestCodingKeys: String, CodingKey {
        case descriptionValue = "description"
        case accessKeyType
        case accessKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAccessKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(accessKeyType, forKey: .accessKeyType)
        try encoderContainer.encode(accessKey, forKey: .accessKey)

    }
}

/// 绑定分组 
public class BindGroupKeyResult:NSObject,JdCloudResult
{
    /// 绑定部署ID和名称
    var bindGroups:[BindGroups?]?



    public override init(){
        super.init()
    }

    enum BindGroupKeyResultCodingKeys: String, CodingKey {
        case bindGroups
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BindGroupKeyResultCodingKeys.self)
        if decoderContainer.contains(.bindGroups)
        {
            self.bindGroups = try decoderContainer.decode([BindGroups?]?.self, forKey: .bindGroups)
        }
    }
}
public extension BindGroupKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BindGroupKeyResultCodingKeys.self)
        try encoderContainer.encode(bindGroups, forKey: .bindGroups)
    }
}
public class QueryAccessKeysResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryAccessKeysResult?;

    enum QueryAccessKeysResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryAccessKeysResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryAccessKeysResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryAccessKeysResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAccessKeysResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询绑定分组详情 
public class QueryBindGroupKeyResult:NSObject,JdCloudResult
{
    /// 绑定部署ID和名称
    var bindGroups:[BindGroups?]?



    public override init(){
        super.init()
    }

    enum QueryBindGroupKeyResultCodingKeys: String, CodingKey {
        case bindGroups
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryBindGroupKeyResultCodingKeys.self)
        if decoderContainer.contains(.bindGroups)
        {
            self.bindGroups = try decoderContainer.decode([BindGroups?]?.self, forKey: .bindGroups)
        }
    }
}
public extension QueryBindGroupKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryBindGroupKeyResultCodingKeys.self)
        try encoderContainer.encode(bindGroups, forKey: .bindGroups)
    }
}

///  查询密钥列表
public class QueryAccessKeysRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// description - 名称，模糊匹配
      /// accessKey - accesskey，模糊匹配
      /// 
    var filters:[Filter?]?




    enum QueryAccessKeysRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAccessKeysRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class CheckKeyExistResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CheckKeyExistResult?;

    enum CheckKeyExistResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckKeyExistResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CheckKeyExistResult?.self, forKey: .result) ?? nil
    }
}

public extension CheckKeyExistResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckKeyExistResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 更新密钥 
public class UpdateAccessKeyResult:NSObject,JdCloudResult
{
    /// 已更新密钥Id
    var accessKeyId:String?



    public override init(){
        super.init()
    }

    enum UpdateAccessKeyResultCodingKeys: String, CodingKey {
        case accessKeyId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateAccessKeyResultCodingKeys.self)
        if decoderContainer.contains(.accessKeyId)
        {
            self.accessKeyId = try decoderContainer.decode(String?.self, forKey: .accessKeyId)
        }
    }
}
public extension UpdateAccessKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAccessKeyResultCodingKeys.self)
        try encoderContainer.encode(accessKeyId, forKey: .accessKeyId)
    }
}

///  删除访问授权
public class DeleteAccessAuthRequest:JdCloudRequest
{
    /// 访问授权ID
    var accessAuthId:String


    public init(regionId: String,accessAuthId:String){
        self.accessAuthId = accessAuthId
        super.init(regionId: regionId)
    }


    enum DeleteAccessAuthRequestRequestCodingKeys: String, CodingKey {
        case accessAuthId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAccessAuthRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessAuthId, forKey: .accessAuthId)

    }
}

/// 查询单个访问授权 
public class QueryAccessAuthResult:NSObject,JdCloudResult
{
    /// AccessAuth
    var accessAuth:AccessAuth?



    public override init(){
        super.init()
    }

    enum QueryAccessAuthResultCodingKeys: String, CodingKey {
        case accessAuth
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryAccessAuthResultCodingKeys.self)
        if decoderContainer.contains(.accessAuth)
        {
            self.accessAuth = try decoderContainer.decode(AccessAuth?.self, forKey: .accessAuth)
        }
    }
}
public extension QueryAccessAuthResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAccessAuthResultCodingKeys.self)
        try encoderContainer.encode(accessAuth, forKey: .accessAuth)
    }
}

///  查询可绑定部署列表
public class QueryAuthGroupListRequest:JdCloudRequest
{
    /// 待绑定的用户类型
    var authUserType:String


    public init(regionId: String,authUserType:String){
        self.authUserType = authUserType
        super.init(regionId: regionId)
    }


    enum QueryAuthGroupListRequestRequestCodingKeys: String, CodingKey {
        case authUserType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAuthGroupListRequestRequestCodingKeys.self)
        try encoderContainer.encode(authUserType, forKey: .authUserType)

    }
}

public class QueryAuthGroupListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryAuthGroupListResult?;

    enum QueryAuthGroupListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryAuthGroupListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryAuthGroupListResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryAuthGroupListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAuthGroupListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AuthorizedApiGroupListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AuthorizedApiGroupListResult?;

    enum AuthorizedApiGroupListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AuthorizedApiGroupListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AuthorizedApiGroupListResult?.self, forKey: .result) ?? nil
    }
}

public extension AuthorizedApiGroupListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AuthorizedApiGroupListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询访问授权列表 
public class QueryAccessAuthsResult:NSObject,JdCloudResult
{
    /// 访问授权详情
    var accessAuths:[AccessAuth?]?

    /// 查询的访问授权数目
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QueryAccessAuthsResultCodingKeys: String, CodingKey {
        case accessAuths
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryAccessAuthsResultCodingKeys.self)
        if decoderContainer.contains(.accessAuths)
        {
            self.accessAuths = try decoderContainer.decode([AccessAuth?]?.self, forKey: .accessAuths)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QueryAccessAuthsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAccessAuthsResultCodingKeys.self)
        try encoderContainer.encode(accessAuths, forKey: .accessAuths)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 查询可绑定部署列表 
public class QueryAuthGroupListResult:NSObject,JdCloudResult
{
    /// 查询可绑定的部署列表
    var bindGroups:[BindGroups?]?



    public override init(){
        super.init()
    }

    enum QueryAuthGroupListResultCodingKeys: String, CodingKey {
        case bindGroups
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryAuthGroupListResultCodingKeys.self)
        if decoderContainer.contains(.bindGroups)
        {
            self.bindGroups = try decoderContainer.decode([BindGroups?]?.self, forKey: .bindGroups)
        }
    }
}
public extension QueryAuthGroupListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAuthGroupListResultCodingKeys.self)
        try encoderContainer.encode(bindGroups, forKey: .bindGroups)
    }
}

///  查询访问授权列表
public class QueryAccessAuthsRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// auth_user_type - 授权类型，默认为 全部类型
      /// auth_user_id - 用户标识，精确匹配，jd_cloud（京东云用户）, jd_apikms（api网关签名密钥）, jd_subscription_key（订阅密钥）,jd_cloud_pin（激活用户）
      /// 
    var filters:[Filter?]?




    enum QueryAccessAuthsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAccessAuthsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 检查accessAuth是否重复 
public class CheckAuthExistResult:NSObject,JdCloudResult
{
    /// 返回accessAuthId
    var accessAuthId:String?



    public override init(){
        super.init()
    }

    enum CheckAuthExistResultCodingKeys: String, CodingKey {
        case accessAuthId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckAuthExistResultCodingKeys.self)
        if decoderContainer.contains(.accessAuthId)
        {
            self.accessAuthId = try decoderContainer.decode(String?.self, forKey: .accessAuthId)
        }
    }
}
public extension CheckAuthExistResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckAuthExistResultCodingKeys.self)
        try encoderContainer.encode(accessAuthId, forKey: .accessAuthId)
    }
}

///  查询单个访问授权
public class QueryAccessAuthRequest:JdCloudRequest
{
    /// 访问授权ID
    var accessAuthId:String


    public init(regionId: String,accessAuthId:String){
        self.accessAuthId = accessAuthId
        super.init(regionId: regionId)
    }


    enum QueryAccessAuthRequestRequestCodingKeys: String, CodingKey {
        case accessAuthId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAccessAuthRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessAuthId, forKey: .accessAuthId)

    }
}

/// 查询所有已授权api分组列表 
public class AuthorizedApiGroupListResult:NSObject,JdCloudResult
{
    /// 查询的API分组信息
    var apiGroups:[UserBindedGroups?]?



    public override init(){
        super.init()
    }

    enum AuthorizedApiGroupListResultCodingKeys: String, CodingKey {
        case apiGroups
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AuthorizedApiGroupListResultCodingKeys.self)
        if decoderContainer.contains(.apiGroups)
        {
            self.apiGroups = try decoderContainer.decode([UserBindedGroups?]?.self, forKey: .apiGroups)
        }
    }
}
public extension AuthorizedApiGroupListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AuthorizedApiGroupListResultCodingKeys.self)
        try encoderContainer.encode(apiGroups, forKey: .apiGroups)
    }
}
/// 绑定分组 
public class BindGroupAuthResult:NSObject,JdCloudResult
{
    /// 绑定部署ID和名称
    var bindGroups:[BindGroups?]?



    public override init(){
        super.init()
    }

    enum BindGroupAuthResultCodingKeys: String, CodingKey {
        case bindGroups
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BindGroupAuthResultCodingKeys.self)
        if decoderContainer.contains(.bindGroups)
        {
            self.bindGroups = try decoderContainer.decode([BindGroups?]?.self, forKey: .bindGroups)
        }
    }
}
public extension BindGroupAuthResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BindGroupAuthResultCodingKeys.self)
        try encoderContainer.encode(bindGroups, forKey: .bindGroups)
    }
}

///  创建访问授权
public class CreateAccessAuthRequest:JdCloudRequest
{
    /// api分组
    var accessAuthView:AccessAuthView?




    enum CreateAccessAuthRequestRequestCodingKeys: String, CodingKey {
        case accessAuthView
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAccessAuthRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessAuthView, forKey: .accessAuthView)

    }
}

/// 更新访问授权 
public class UpdateAccessAuthResult:NSObject,JdCloudResult
{
    /// 已更新访问授权ID
    var accessAuthId:String?



    public override init(){
        super.init()
    }

    enum UpdateAccessAuthResultCodingKeys: String, CodingKey {
        case accessAuthId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateAccessAuthResultCodingKeys.self)
        if decoderContainer.contains(.accessAuthId)
        {
            self.accessAuthId = try decoderContainer.decode(String?.self, forKey: .accessAuthId)
        }
    }
}
public extension UpdateAccessAuthResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAccessAuthResultCodingKeys.self)
        try encoderContainer.encode(accessAuthId, forKey: .accessAuthId)
    }
}
/// 查询已绑定详情 
public class QueryBindGroupAuthResult:NSObject,JdCloudResult
{
    /// 绑定部署ID和名称
    var bindGroups:[BindGroups?]?



    public override init(){
        super.init()
    }

    enum QueryBindGroupAuthResultCodingKeys: String, CodingKey {
        case bindGroups
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryBindGroupAuthResultCodingKeys.self)
        if decoderContainer.contains(.bindGroups)
        {
            self.bindGroups = try decoderContainer.decode([BindGroups?]?.self, forKey: .bindGroups)
        }
    }
}
public extension QueryBindGroupAuthResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryBindGroupAuthResultCodingKeys.self)
        try encoderContainer.encode(bindGroups, forKey: .bindGroups)
    }
}
public class QueryBindGroupAuthResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryBindGroupAuthResult?;

    enum QueryBindGroupAuthResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryBindGroupAuthResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryBindGroupAuthResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryBindGroupAuthResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryBindGroupAuthResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  检查accessAuth是否重复
public class CheckAuthExistRequest:JdCloudRequest
{
    /// AccessKey
    var accessKey:String

    /// AuthUserType
    var authUserType:String


    public init(regionId: String,accessKey:String,authUserType:String){
        self.accessKey = accessKey
        self.authUserType = authUserType
        super.init(regionId: regionId)
    }


    enum CheckAuthExistRequestRequestCodingKeys: String, CodingKey {
        case accessKey
        case authUserType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckAuthExistRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessKey, forKey: .accessKey)
        try encoderContainer.encode(authUserType, forKey: .authUserType)

    }
}

/// 创建访问授权 
public class CreateAccessAuthResult:NSObject,JdCloudResult
{
    /// 已创建访问授权ID
    var accessAuthId:String?



    public override init(){
        super.init()
    }

    enum CreateAccessAuthResultCodingKeys: String, CodingKey {
        case accessAuthId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAccessAuthResultCodingKeys.self)
        if decoderContainer.contains(.accessAuthId)
        {
            self.accessAuthId = try decoderContainer.decode(String?.self, forKey: .accessAuthId)
        }
    }
}
public extension CreateAccessAuthResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAccessAuthResultCodingKeys.self)
        try encoderContainer.encode(accessAuthId, forKey: .accessAuthId)
    }
}

///  查询已绑定详情
public class QueryBindGroupAuthRequest:JdCloudRequest
{
    /// 访问授权ID
    var accessAuthId:String


    public init(regionId: String,accessAuthId:String){
        self.accessAuthId = accessAuthId
        super.init(regionId: regionId)
    }


    enum QueryBindGroupAuthRequestRequestCodingKeys: String, CodingKey {
        case accessAuthId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryBindGroupAuthRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessAuthId, forKey: .accessAuthId)

    }
}


///  绑定分组
public class BindGroupAuthRequest:JdCloudRequest
{
    /// 待绑定的部署ids逗号隔开
    var deploymentIds:String

    /// 访问授权ID
    var accessAuthId:String


    public init(regionId: String,deploymentIds:String,accessAuthId:String){
        self.deploymentIds = deploymentIds
        self.accessAuthId = accessAuthId
        super.init(regionId: regionId)
    }


    enum BindGroupAuthRequestRequestCodingKeys: String, CodingKey {
        case deploymentIds
        case accessAuthId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BindGroupAuthRequestRequestCodingKeys.self)
        try encoderContainer.encode(deploymentIds, forKey: .deploymentIds)
        try encoderContainer.encode(accessAuthId, forKey: .accessAuthId)

    }
}

public class BindGroupAuthResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:BindGroupAuthResult?;

    enum BindGroupAuthResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BindGroupAuthResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(BindGroupAuthResult?.self, forKey: .result) ?? nil
    }
}

public extension BindGroupAuthResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BindGroupAuthResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateAccessAuthResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateAccessAuthResult?;

    enum CreateAccessAuthResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAccessAuthResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateAccessAuthResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateAccessAuthResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAccessAuthResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateAccessAuthResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateAccessAuthResult?;

    enum UpdateAccessAuthResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateAccessAuthResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateAccessAuthResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateAccessAuthResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAccessAuthResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询所有已授权api分组列表
public class AuthorizedApiGroupListRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// apiGroupName - 名称，模糊匹配
      /// 
    var filters:[Filter?]?




    enum AuthorizedApiGroupListRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AuthorizedApiGroupListRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class QueryAccessAuthsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryAccessAuthsResult?;

    enum QueryAccessAuthsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryAccessAuthsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryAccessAuthsResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryAccessAuthsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAccessAuthsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QueryAccessAuthResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryAccessAuthResult?;

    enum QueryAccessAuthResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryAccessAuthResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryAccessAuthResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryAccessAuthResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryAccessAuthResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  更新访问授权
public class UpdateAccessAuthRequest:JdCloudRequest
{
    /// 访问授权详情
    var accessAuthView:AccessAuthView?

    /// 访问授权ID
    var accessAuthId:String


    public init(regionId: String,accessAuthId:String){
        self.accessAuthId = accessAuthId
        super.init(regionId: regionId)
    }


    enum UpdateAccessAuthRequestRequestCodingKeys: String, CodingKey {
        case accessAuthView
        case accessAuthId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAccessAuthRequestRequestCodingKeys.self)
        try encoderContainer.encode(accessAuthView, forKey: .accessAuthView)
        try encoderContainer.encode(accessAuthId, forKey: .accessAuthId)

    }
}

public class CheckAuthExistResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CheckAuthExistResult?;

    enum CheckAuthExistResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckAuthExistResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CheckAuthExistResult?.self, forKey: .result) ?? nil
    }
}

public extension CheckAuthExistResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckAuthExistResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除访问授权 
public class DeleteAccessAuthResult:NSObject,JdCloudResult
{
    /// 已删除授权ID
    var accessAuthId:String?



    public override init(){
        super.init()
    }

    enum DeleteAccessAuthResultCodingKeys: String, CodingKey {
        case accessAuthId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteAccessAuthResultCodingKeys.self)
        if decoderContainer.contains(.accessAuthId)
        {
            self.accessAuthId = try decoderContainer.decode(String?.self, forKey: .accessAuthId)
        }
    }
}
public extension DeleteAccessAuthResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAccessAuthResultCodingKeys.self)
        try encoderContainer.encode(accessAuthId, forKey: .accessAuthId)
    }
}
public class DeleteAccessAuthResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteAccessAuthResult?;

    enum DeleteAccessAuthResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteAccessAuthResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteAccessAuthResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteAccessAuthResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAccessAuthResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  校验pin是否存在
public class CheckPinRequest:JdCloudRequest
{
    /// 京东云pin
    var pin:String


    public init(regionId: String,pin:String){
        self.pin = pin
        super.init(regionId: regionId)
    }


    enum CheckPinRequestRequestCodingKeys: String, CodingKey {
        case pin
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckPinRequestRequestCodingKeys.self)
        try encoderContainer.encode(pin, forKey: .pin)

    }
}

/// 校验pin是否存在 
public class CheckPinResult:NSObject,JdCloudResult
{
}
public class CheckPinResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CheckPinResult?;

    enum CheckPinResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CheckPinResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CheckPinResult?.self, forKey: .result) ?? nil
    }
}

public extension CheckPinResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CheckPinResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteSubscriptionKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSubscriptionKeyResult?;

    enum DeleteSubscriptionKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSubscriptionKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSubscriptionKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSubscriptionKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubscriptionKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 更新密钥 
public class UpdateSubscriptionKeyResult:NSObject,JdCloudResult
{
    /// 已更新密钥Id
    var subscriptionKeyId:String?



    public override init(){
        super.init()
    }

    enum UpdateSubscriptionKeyResultCodingKeys: String, CodingKey {
        case subscriptionKeyId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateSubscriptionKeyResultCodingKeys.self)
        if decoderContainer.contains(.subscriptionKeyId)
        {
            self.subscriptionKeyId = try decoderContainer.decode(String?.self, forKey: .subscriptionKeyId)
        }
    }
}
public extension UpdateSubscriptionKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateSubscriptionKeyResultCodingKeys.self)
        try encoderContainer.encode(subscriptionKeyId, forKey: .subscriptionKeyId)
    }
}
public class CreateSubscriptionKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSubscriptionKeyResult?;

    enum CreateSubscriptionKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubscriptionKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSubscriptionKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSubscriptionKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubscriptionKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询单个密钥
public class QuerySubscriptionKeyRequest:JdCloudRequest
{
    /// subscription key id
    var subscriptionKeyId:String


    public init(regionId: String,subscriptionKeyId:String){
        self.subscriptionKeyId = subscriptionKeyId
        super.init(regionId: regionId)
    }


    enum QuerySubscriptionKeyRequestRequestCodingKeys: String, CodingKey {
        case subscriptionKeyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QuerySubscriptionKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(subscriptionKeyId, forKey: .subscriptionKeyId)

    }
}

public class UpdateSubscriptionKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateSubscriptionKeyResult?;

    enum UpdateSubscriptionKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateSubscriptionKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateSubscriptionKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateSubscriptionKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateSubscriptionKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建密钥
public class CreateSubscriptionKeyRequest:JdCloudRequest
{
    /// 描述
    var descriptionValue:String?

    /// 密钥名称
    var name:String?




    enum CreateSubscriptionKeyRequestRequestCodingKeys: String, CodingKey {
        case descriptionValue = "description"
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubscriptionKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(name, forKey: .name)

    }
}

/// 删除密钥 
public class DeleteSubscriptionKeyResult:NSObject,JdCloudResult
{
    /// 已删除密钥Id
    var subscriptionKeyId:String?



    public override init(){
        super.init()
    }

    enum DeleteSubscriptionKeyResultCodingKeys: String, CodingKey {
        case subscriptionKeyId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSubscriptionKeyResultCodingKeys.self)
        if decoderContainer.contains(.subscriptionKeyId)
        {
            self.subscriptionKeyId = try decoderContainer.decode(String?.self, forKey: .subscriptionKeyId)
        }
    }
}
public extension DeleteSubscriptionKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubscriptionKeyResultCodingKeys.self)
        try encoderContainer.encode(subscriptionKeyId, forKey: .subscriptionKeyId)
    }
}
/// 查询单个密钥 
public class QuerySubscriptionKeyResult:NSObject,JdCloudResult
{
    /// SubscriptionKey
    var subscriptionKey:SubscriptionKey?



    public override init(){
        super.init()
    }

    enum QuerySubscriptionKeyResultCodingKeys: String, CodingKey {
        case subscriptionKey
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QuerySubscriptionKeyResultCodingKeys.self)
        if decoderContainer.contains(.subscriptionKey)
        {
            self.subscriptionKey = try decoderContainer.decode(SubscriptionKey?.self, forKey: .subscriptionKey)
        }
    }
}
public extension QuerySubscriptionKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QuerySubscriptionKeyResultCodingKeys.self)
        try encoderContainer.encode(subscriptionKey, forKey: .subscriptionKey)
    }
}

///  删除密钥
public class DeleteSubscriptionKeyRequest:JdCloudRequest
{
    /// subscription key id
    var subscriptionKeyId:String


    public init(regionId: String,subscriptionKeyId:String){
        self.subscriptionKeyId = subscriptionKeyId
        super.init(regionId: regionId)
    }


    enum DeleteSubscriptionKeyRequestRequestCodingKeys: String, CodingKey {
        case subscriptionKeyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubscriptionKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(subscriptionKeyId, forKey: .subscriptionKeyId)

    }
}

public class QuerySubscriptionKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QuerySubscriptionKeyResult?;

    enum QuerySubscriptionKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QuerySubscriptionKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QuerySubscriptionKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension QuerySubscriptionKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QuerySubscriptionKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QuerySubscriptionKeysResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QuerySubscriptionKeysResult?;

    enum QuerySubscriptionKeysResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QuerySubscriptionKeysResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QuerySubscriptionKeysResult?.self, forKey: .result) ?? nil
    }
}

public extension QuerySubscriptionKeysResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QuerySubscriptionKeysResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  更新密钥
public class UpdateSubscriptionKeyRequest:JdCloudRequest
{
    /// 描述
    var descriptionValue:String?

    /// 密钥名称
    var name:String?

    /// subscription key id
    var subscriptionKeyId:String


    public init(regionId: String,subscriptionKeyId:String){
        self.subscriptionKeyId = subscriptionKeyId
        super.init(regionId: regionId)
    }


    enum UpdateSubscriptionKeyRequestRequestCodingKeys: String, CodingKey {
        case descriptionValue = "description"
        case name
        case subscriptionKeyId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateSubscriptionKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(subscriptionKeyId, forKey: .subscriptionKeyId)

    }
}


///  查询密钥列表
public class QuerySubscriptionKeysRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// description - 名称，模糊匹配
      /// subscriptionKeyId - subscriptionKeyId，精确匹配
      /// orderBy - 排序类型 desc asc
      /// 
    var filters:[Filter?]?




    enum QuerySubscriptionKeysRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QuerySubscriptionKeysRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 查询密钥列表 
public class QuerySubscriptionKeysResult:NSObject,JdCloudResult
{
    /// 密钥详情
    var subscriptionKeys:[SubscriptionKey?]?

    /// 查询的密钥数目
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QuerySubscriptionKeysResultCodingKeys: String, CodingKey {
        case subscriptionKeys
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QuerySubscriptionKeysResultCodingKeys.self)
        if decoderContainer.contains(.subscriptionKeys)
        {
            self.subscriptionKeys = try decoderContainer.decode([SubscriptionKey?]?.self, forKey: .subscriptionKeys)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QuerySubscriptionKeysResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QuerySubscriptionKeysResultCodingKeys.self)
        try encoderContainer.encode(subscriptionKeys, forKey: .subscriptionKeys)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 创建密钥 
public class CreateSubscriptionKeyResult:NSObject,JdCloudResult
{
    /// 已创建密钥ID
    var subscriptionKeyId:String?



    public override init(){
        super.init()
    }

    enum CreateSubscriptionKeyResultCodingKeys: String, CodingKey {
        case subscriptionKeyId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubscriptionKeyResultCodingKeys.self)
        if decoderContainer.contains(.subscriptionKeyId)
        {
            self.subscriptionKeyId = try decoderContainer.decode(String?.self, forKey: .subscriptionKeyId)
        }
    }
}
public extension CreateSubscriptionKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubscriptionKeyResultCodingKeys.self)
        try encoderContainer.encode(subscriptionKeyId, forKey: .subscriptionKeyId)
    }
}
