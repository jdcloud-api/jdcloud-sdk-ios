/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  rRInfo
@objc(RRInfo)
public class RRInfo:NSObject,Codable{
    /// 创建者
    var creator:String?
    /// 线路名称
    var viewName:String?
    /// 域名解析的唯一ID
    var id:Int?
    /// 主机记录
    var hostRecord:String?
    /// 解析记录的值
    var hostValue:String?
    /// 是否是京东云资源
    var jcloudRes:Bool?
    /// 优先级，只存在于MX, SRV解析记录类型
    var mxPriority:Int?
    /// 端口，只存在于SRV解析记录类型
    var port:Int?
    /// 解析记录的生存时间
    var ttl:Int?
    /// 解析记录的类型
    var type:String?
    /// 解析记录的权重
    var weight:Int?
    /// 解析线路的ID
    var viewValue:[Int?]?
    /// 解析记录的状态
    var resolvingStatus:String?
    /// 解析记录更新的时间
    var updateTime:Int64?



    public override init(){
            super.init()
    }

    enum RRInfoCodingKeys: String, CodingKey {
        case creator
        case viewName
        case id
        case hostRecord
        case hostValue
        case jcloudRes
        case mxPriority
        case port
        case ttl
        case type
        case weight
        case viewValue
        case resolvingStatus
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RRInfoCodingKeys.self)
        if decoderContainer.contains(.creator)
        {
            self.creator = try decoderContainer.decode(String?.self, forKey: .creator)
        }
        if decoderContainer.contains(.viewName)
        {
            self.viewName = try decoderContainer.decode(String?.self, forKey: .viewName)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.hostRecord)
        {
            self.hostRecord = try decoderContainer.decode(String?.self, forKey: .hostRecord)
        }
        if decoderContainer.contains(.hostValue)
        {
            self.hostValue = try decoderContainer.decode(String?.self, forKey: .hostValue)
        }
        if decoderContainer.contains(.jcloudRes)
        {
            self.jcloudRes = try decoderContainer.decode(Bool?.self, forKey: .jcloudRes)
        }
        if decoderContainer.contains(.mxPriority)
        {
            self.mxPriority = try decoderContainer.decode(Int?.self, forKey: .mxPriority)
        }
        if decoderContainer.contains(.port)
        {
            self.port = try decoderContainer.decode(Int?.self, forKey: .port)
        }
        if decoderContainer.contains(.ttl)
        {
            self.ttl = try decoderContainer.decode(Int?.self, forKey: .ttl)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(String?.self, forKey: .type)
        }
        if decoderContainer.contains(.weight)
        {
            self.weight = try decoderContainer.decode(Int?.self, forKey: .weight)
        }
        if decoderContainer.contains(.viewValue)
        {
            self.viewValue = try decoderContainer.decode([Int?]?.self, forKey: .viewValue)
        }
        if decoderContainer.contains(.resolvingStatus)
        {
            self.resolvingStatus = try decoderContainer.decode(String?.self, forKey: .resolvingStatus)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(Int64?.self, forKey: .updateTime)
        }
    }
}
public extension RRInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RRInfoCodingKeys.self)
         try encoderContainer.encode(creator, forKey: .creator)
         try encoderContainer.encode(viewName, forKey: .viewName)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(hostRecord, forKey: .hostRecord)
         try encoderContainer.encode(hostValue, forKey: .hostValue)
         try encoderContainer.encode(jcloudRes, forKey: .jcloudRes)
         try encoderContainer.encode(mxPriority, forKey: .mxPriority)
         try encoderContainer.encode(port, forKey: .port)
         try encoderContainer.encode(ttl, forKey: .ttl)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(weight, forKey: .weight)
         try encoderContainer.encode(viewValue, forKey: .viewValue)
         try encoderContainer.encode(resolvingStatus, forKey: .resolvingStatus)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
