/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  getalb
@objc(Getalb)
public class Getalb:NSObject,Codable{
    /// 负载均衡的解析记录的列表中解析记录是否是相同的权重&lt;br&gt;
      /// true: 均等负载&lt;br&gt;
      /// false: 按权重分配负载
      /// 
    var balance:Bool?
    /// 主机记录
    var record:String?
    /// 解析的类型
    var type:String?
    /// 解析线路的名称
    var viewName:String?
    /// 解析线路的ID
    var viewValue:Int?
    /// 负载均衡的解析记录的列表
    var items:[HostRRlb?]?



    public override init(){
            super.init()
    }

    enum GetalbCodingKeys: String, CodingKey {
        case balance
        case record
        case type
        case viewName
        case viewValue
        case items
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetalbCodingKeys.self)
        if decoderContainer.contains(.balance)
        {
            self.balance = try decoderContainer.decode(Bool?.self, forKey: .balance)
        }
        if decoderContainer.contains(.record)
        {
            self.record = try decoderContainer.decode(String?.self, forKey: .record)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(String?.self, forKey: .type)
        }
        if decoderContainer.contains(.viewName)
        {
            self.viewName = try decoderContainer.decode(String?.self, forKey: .viewName)
        }
        if decoderContainer.contains(.viewValue)
        {
            self.viewValue = try decoderContainer.decode(Int?.self, forKey: .viewValue)
        }
        if decoderContainer.contains(.items)
        {
            self.items = try decoderContainer.decode([HostRRlb?]?.self, forKey: .items)
        }
    }
}
public extension Getalb{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetalbCodingKeys.self)
         try encoderContainer.encode(balance, forKey: .balance)
         try encoderContainer.encode(record, forKey: .record)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(viewName, forKey: .viewName)
         try encoderContainer.encode(viewValue, forKey: .viewValue)
         try encoderContainer.encode(items, forKey: .items)
    }
}
