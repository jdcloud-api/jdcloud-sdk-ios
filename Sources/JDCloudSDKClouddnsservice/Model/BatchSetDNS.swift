/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  batchSetDNS
@objc(BatchSetDNS)
public class BatchSetDNS:NSObject,Codable{
    /// 解析记录对应的域名的ID。一次请求里面应该是相同的domainId。
    /// Required:true
    var domainId:Int
    /// 主机记录
    /// Required:true
    var hostRecord:String
    /// 解析记录的值
    /// Required:true
    var hostValue:String
    /// 解析记录的ID, 如果是新增请填0，如果是更新，请使用searchRR接口查询解析记录ID。
    /// Required:true
    var id:Int
    /// 是否是京东云资源
    var jcloudRes:Bool?
    /// 优先级，只存在于MX, SRV解析记录类型
    var mxPriority:Int?
    /// 端口，只存在于SRV解析记录类型
    var port:Int?
    /// 解析记录的生存时间
    /// Required:true
    var ttl:Int
    /// 解析的类型
    /// Required:true
    var type:String
    /// 解析记录的权重
    var weight:Int?
    /// 解析线路的ID
    /// Required:true
    var viewValue:Int



    public  init(domainId:Int,hostRecord:String,hostValue:String,id:Int,ttl:Int,type:String,viewValue:Int){
             self.domainId = domainId
             self.hostRecord = hostRecord
             self.hostValue = hostValue
             self.id = id
             self.ttl = ttl
             self.type = type
             self.viewValue = viewValue
    }

    enum BatchSetDNSCodingKeys: String, CodingKey {
        case domainId
        case hostRecord
        case hostValue
        case id
        case jcloudRes
        case mxPriority
        case port
        case ttl
        case type
        case weight
        case viewValue
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BatchSetDNSCodingKeys.self)
        self.domainId = try decoderContainer.decode(Int.self, forKey: .domainId)
        self.hostRecord = try decoderContainer.decode(String.self, forKey: .hostRecord)
        self.hostValue = try decoderContainer.decode(String.self, forKey: .hostValue)
        self.id = try decoderContainer.decode(Int.self, forKey: .id)
        if decoderContainer.contains(.jcloudRes)
        {
            self.jcloudRes = try decoderContainer.decode(Bool?.self, forKey: .jcloudRes)
        }
        if decoderContainer.contains(.mxPriority)
        {
            self.mxPriority = try decoderContainer.decode(Int?.self, forKey: .mxPriority)
        }
        if decoderContainer.contains(.port)
        {
            self.port = try decoderContainer.decode(Int?.self, forKey: .port)
        }
        self.ttl = try decoderContainer.decode(Int.self, forKey: .ttl)
        self.type = try decoderContainer.decode(String.self, forKey: .type)
        if decoderContainer.contains(.weight)
        {
            self.weight = try decoderContainer.decode(Int?.self, forKey: .weight)
        }
        self.viewValue = try decoderContainer.decode(Int.self, forKey: .viewValue)
    }
}
public extension BatchSetDNS{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchSetDNSCodingKeys.self)
         try encoderContainer.encode(domainId, forKey: .domainId)
         try encoderContainer.encode(hostRecord, forKey: .hostRecord)
         try encoderContainer.encode(hostValue, forKey: .hostValue)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(jcloudRes, forKey: .jcloudRes)
         try encoderContainer.encode(mxPriority, forKey: .mxPriority)
         try encoderContainer.encode(port, forKey: .port)
         try encoderContainer.encode(ttl, forKey: .ttl)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(weight, forKey: .weight)
         try encoderContainer.encode(viewValue, forKey: .viewValue)
    }
}
