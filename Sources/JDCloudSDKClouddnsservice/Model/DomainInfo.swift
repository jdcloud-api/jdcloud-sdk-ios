/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  domainInfo
@objc(DomainInfo)
public class DomainInfo:NSObject,Codable{
    /// 域名的唯一ID
    var id:Int?
    /// 域名字符串
    var domainName:String?
    /// 创建时间，格式Unix timestamp，时间单位：毫秒
    var createTime:Int64?
    /// 过期时间，格式Unix timestamp，时间单位：毫秒
    var expirationDate:Int64?
    /// 套餐类型，0-&gt;免费 1-&gt;企业版 2-&gt;企业高级版
    var packId:Int?
    /// 套餐的名字
    var packName:String?
    /// 解析的状态
    var resolvingStatus:String?
    /// 创建者
    var creator:String?
    /// 是否是京东云资源
    var jcloudNs:Bool?
    /// 域名的锁定状态，0:未锁定， 1:已锁定
    var lockStatus:Int?



    public override init(){
            super.init()
    }

    enum DomainInfoCodingKeys: String, CodingKey {
        case id
        case domainName
        case createTime
        case expirationDate
        case packId
        case packName
        case resolvingStatus
        case creator
        case jcloudNs
        case lockStatus
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DomainInfoCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.domainName)
        {
            self.domainName = try decoderContainer.decode(String?.self, forKey: .domainName)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(Int64?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.expirationDate)
        {
            self.expirationDate = try decoderContainer.decode(Int64?.self, forKey: .expirationDate)
        }
        if decoderContainer.contains(.packId)
        {
            self.packId = try decoderContainer.decode(Int?.self, forKey: .packId)
        }
        if decoderContainer.contains(.packName)
        {
            self.packName = try decoderContainer.decode(String?.self, forKey: .packName)
        }
        if decoderContainer.contains(.resolvingStatus)
        {
            self.resolvingStatus = try decoderContainer.decode(String?.self, forKey: .resolvingStatus)
        }
        if decoderContainer.contains(.creator)
        {
            self.creator = try decoderContainer.decode(String?.self, forKey: .creator)
        }
        if decoderContainer.contains(.jcloudNs)
        {
            self.jcloudNs = try decoderContainer.decode(Bool?.self, forKey: .jcloudNs)
        }
        if decoderContainer.contains(.lockStatus)
        {
            self.lockStatus = try decoderContainer.decode(Int?.self, forKey: .lockStatus)
        }
    }
}
public extension DomainInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DomainInfoCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(domainName, forKey: .domainName)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(expirationDate, forKey: .expirationDate)
         try encoderContainer.encode(packId, forKey: .packId)
         try encoderContainer.encode(packName, forKey: .packName)
         try encoderContainer.encode(resolvingStatus, forKey: .resolvingStatus)
         try encoderContainer.encode(creator, forKey: .creator)
         try encoderContainer.encode(jcloudNs, forKey: .jcloudNs)
         try encoderContainer.encode(lockStatus, forKey: .lockStatus)
    }
}
