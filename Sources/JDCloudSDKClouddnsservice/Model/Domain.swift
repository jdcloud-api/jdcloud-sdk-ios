/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  domain
@objc(Domain)
public class Domain:NSObject,Codable{
    /// 域名在云解析里唯一的ID
    var id:Int?
    /// 域名字符串
    var domainName:String?
    /// 域名的创建时间，Unix timestamp格式，时间单位：毫秒
    var createTime:Int64?
    /// 域名的过期时间，Unix timestamp格式，时间单位：毫秒
    var expirationDate:Int64?
    /// 域名的套餐类型，0-&gt;免费 1-&gt;企业版 2-&gt;企业高级版  
      /// 不同套餐的描述，请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/price-overview&quot;&gt;文档&lt;/a&gt;
      /// 
    var packId:Int?
    /// 域名的锁定状态，0:未锁定， 1:已锁定
      /// 锁定的含义，请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/lock-domain&quot;&gt;文档&lt;/a&gt;
      /// 
    var lockStatus:Int?



    public override init(){
            super.init()
    }

    enum DomainCodingKeys: String, CodingKey {
        case id
        case domainName
        case createTime
        case expirationDate
        case packId
        case lockStatus
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DomainCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.domainName)
        {
            self.domainName = try decoderContainer.decode(String?.self, forKey: .domainName)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(Int64?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.expirationDate)
        {
            self.expirationDate = try decoderContainer.decode(Int64?.self, forKey: .expirationDate)
        }
        if decoderContainer.contains(.packId)
        {
            self.packId = try decoderContainer.decode(Int?.self, forKey: .packId)
        }
        if decoderContainer.contains(.lockStatus)
        {
            self.lockStatus = try decoderContainer.decode(Int?.self, forKey: .lockStatus)
        }
    }
}
public extension Domain{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DomainCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(domainName, forKey: .domainName)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(expirationDate, forKey: .expirationDate)
         try encoderContainer.encode(packId, forKey: .packId)
         try encoderContainer.encode(lockStatus, forKey: .lockStatus)
    }
}
