/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  hostRRlb
@objc(HostRRlb)
public class HostRRlb:NSObject,Codable{
    /// 解析记录的值
    var hostValue:String?
    /// 解析记录的ID
    var id:Int?
    /// 解析记录的权重
    var weight:Int?
    /// 此条记录在总均衡中的比率的100倍
    var rate:Double?



    public override init(){
            super.init()
    }

    enum HostRRlbCodingKeys: String, CodingKey {
        case hostValue
        case id
        case weight
        case rate
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: HostRRlbCodingKeys.self)
        if decoderContainer.contains(.hostValue)
        {
            self.hostValue = try decoderContainer.decode(String?.self, forKey: .hostValue)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.weight)
        {
            self.weight = try decoderContainer.decode(Int?.self, forKey: .weight)
        }
        if decoderContainer.contains(.rate)
        {
            self.rate = try decoderContainer.decode(Double?.self, forKey: .rate)
        }
    }
}
public extension HostRRlb{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: HostRRlbCodingKeys.self)
         try encoderContainer.encode(hostValue, forKey: .hostValue)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(weight, forKey: .weight)
         try encoderContainer.encode(rate, forKey: .rate)
    }
}
