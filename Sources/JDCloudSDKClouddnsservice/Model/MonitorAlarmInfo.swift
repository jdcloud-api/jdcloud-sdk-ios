/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  monitorAlarmInfo
@objc(MonitorAlarmInfo)
public class MonitorAlarmInfo:NSObject,Codable{
    /// 域名ID
    var domainId:Int?
    /// 子域名
    var subDomainName:String?
    /// 故障IP/域名
    var host:String?
    /// null
    var id:Int?
    /// 故障开始时间，格式Unix timestamp，时间单位：毫秒
    var startTime:Int64?
    /// 故障结束时间，格式Unix timestamp，时间单位：毫秒
    var endTime:Int64?



    public override init(){
            super.init()
    }

    enum MonitorAlarmInfoCodingKeys: String, CodingKey {
        case domainId
        case subDomainName
        case host
        case id
        case startTime
        case endTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: MonitorAlarmInfoCodingKeys.self)
        if decoderContainer.contains(.domainId)
        {
            self.domainId = try decoderContainer.decode(Int?.self, forKey: .domainId)
        }
        if decoderContainer.contains(.subDomainName)
        {
            self.subDomainName = try decoderContainer.decode(String?.self, forKey: .subDomainName)
        }
        if decoderContainer.contains(.host)
        {
            self.host = try decoderContainer.decode(String?.self, forKey: .host)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(Int64?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(Int64?.self, forKey: .endTime)
        }
    }
}
public extension MonitorAlarmInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: MonitorAlarmInfoCodingKeys.self)
         try encoderContainer.encode(domainId, forKey: .domainId)
         try encoderContainer.encode(subDomainName, forKey: .subDomainName)
         try encoderContainer.encode(host, forKey: .host)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
    }
}
