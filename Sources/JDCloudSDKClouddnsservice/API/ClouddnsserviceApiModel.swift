/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   操作列表
   云解析OpenAPI操作列表接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  删除主域名
public class DelDomainRequest:JdCloudRequest
{
    /// 需要删除的主域名ID，请使用getDomains接口获取
    var domainId:Int


    public init(regionId: String,domainId:Int){
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum DelDomainRequestRequestCodingKeys: String, CodingKey {
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DelDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}


///  获取用户所属的主域名列表。   
      ///       /// 请在调用域名相关的接口之前，调用此接口获取相关的domainId和domainName。  
      ///       /// 主域名的相关概念，请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/product-overview&quot;&gt;云解析文档&lt;/a&gt;
      ///       /// 
public class GetDomainsRequest:JdCloudRequest
{
    /// 分页查询时查询的每页的序号，起始值为1，默认为1
    var pageNumber:Int

    /// 分页查询时设置的每页行数，默认为10
    var pageSize:Int

    /// 关键字，按照”%domainName%”模式匹配主域名
    var domainName:String?


    public init(regionId: String,pageNumber:Int,pageSize:Int){
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        super.init(regionId: regionId)
    }


    enum GetDomainsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case domainName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDomainsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(domainName, forKey: .domainName)

    }
}

public class GetDomainQueryCountResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetDomainQueryCountResult?;

    enum GetDomainQueryCountResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDomainQueryCountResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetDomainQueryCountResult?.self, forKey: .result) ?? nil
    }
}

public extension GetDomainQueryCountResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDomainQueryCountResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看域名的查询流量 
public class GetDomainQueryTrafficResult:NSObject,JdCloudResult
{
    /// 时间序列
    var time:[Int64?]?

    /// 数据序列的单位
    var unit:String?

    /// 与时间序列对应的数据序列
    var traffic:[Double?]?



    public override init(){
        super.init()
    }

    enum GetDomainQueryTrafficResultCodingKeys: String, CodingKey {
        case time
        case unit
        case traffic
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDomainQueryTrafficResultCodingKeys.self)
        if decoderContainer.contains(.time)
        {
            self.time = try decoderContainer.decode([Int64?]?.self, forKey: .time)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
        if decoderContainer.contains(.traffic)
        {
            self.traffic = try decoderContainer.decode([Double?]?.self, forKey: .traffic)
        }
    }
}
public extension GetDomainQueryTrafficResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDomainQueryTrafficResultCodingKeys.self)
        try encoderContainer.encode(time, forKey: .time)
        try encoderContainer.encode(unit, forKey: .unit)
        try encoderContainer.encode(traffic, forKey: .traffic)
    }
}
/// 添加主域名  
      ///       /// 如何添加免费域名，详细情况请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/domainadd&quot;&gt;文档&lt;/a&gt;
      ///       /// 添加收费域名，请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/purchase-process&quot;&gt;文档&lt;/a&gt;，
      ///       /// 添加收费域名前，请确保用户的京东云账户有足够的资金支付，Openapi接口回返回订单号，可以用此订单号向计费系统查阅详情。
      ///       ///  
public class AddDomainResult:NSObject,JdCloudResult
{
    /// 新添加的的域名结构
    var data:DomainAdded?

    /// 添加收费版域名的订单号
    var order:String?



    public override init(){
        super.init()
    }

    enum AddDomainResultCodingKeys: String, CodingKey {
        case data
        case order
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddDomainResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(DomainAdded?.self, forKey: .data)
        }
        if decoderContainer.contains(.order)
        {
            self.order = try decoderContainer.decode(String?.self, forKey: .order)
        }
    }
}
public extension AddDomainResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddDomainResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(order, forKey: .order)
    }
}
/// 删除主域名 
public class DelDomainResult:NSObject,JdCloudResult
{
}
public class UpdateDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateDomainResult?;

    enum UpdateDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加主域名  
      ///       /// 如何添加免费域名，详细情况请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/domainadd&quot;&gt;文档&lt;/a&gt;
      ///       /// 添加收费域名，请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/purchase-process&quot;&gt;文档&lt;/a&gt;，
      ///       /// 添加收费域名前，请确保用户的京东云账户有足够的资金支付，Openapi接口回返回订单号，可以用此订单号向计费系统查阅详情。
      ///       /// 
public class AddDomainRequest:JdCloudRequest
{
    /// 主域名的套餐类型, 0-&gt;免费 ,1-&gt;企业版, 2-&gt;高级版
    var packId:Int

    /// 要添加的主域名
    var domainName:String

    /// 主域名的ID，升级套餐必填，请使用getDomains获取
    var domainId:Int?

    /// 1-&gt;新购买、3-&gt;升级，收费套餐的域名必填
    var buyType:Int?

    /// 取值1，2，3 ，含义：时长，收费套餐的域名必填
    var timeSpan:Int?

    /// 时间单位，收费套餐的域名必填，1：小时，2：天，3：月，4：年
    var timeUnit:Int?

    /// 计费类型，可以不传此参数。
    var billingType:Int?


    public init(regionId: String,packId:Int,domainName:String){
        self.packId = packId
        self.domainName = domainName
        super.init(regionId: regionId)
    }


    enum AddDomainRequestRequestCodingKeys: String, CodingKey {
        case packId
        case domainName
        case domainId
        case buyType
        case timeSpan
        case timeUnit
        case billingType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(packId, forKey: .packId)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(domainId, forKey: .domainId)
        try encoderContainer.encode(buyType, forKey: .buyType)
        try encoderContainer.encode(timeSpan, forKey: .timeSpan)
        try encoderContainer.encode(timeUnit, forKey: .timeUnit)
        try encoderContainer.encode(billingType, forKey: .billingType)

    }
}

/// 获取用户所属的主域名列表。   
      ///       /// 请在调用域名相关的接口之前，调用此接口获取相关的domainId和domainName。  
      ///       /// 主域名的相关概念，请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/product-overview&quot;&gt;云解析文档&lt;/a&gt;
      ///       ///  
public class GetDomainsResult:NSObject,JdCloudResult
{
    /// 域名列表
    var dataList:[Domain?]?

    /// 当前页的域名列表里域名的个数
    var currentCount:Int?

    /// 所有匹配的域名列表的个数
    var totalCount:Int?

    /// 所有匹配的域名列表按照分页参数一共的页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum GetDomainsResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDomainsResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([Domain?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension GetDomainsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDomainsResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}

///  查看域名的查询流量
public class GetDomainQueryTrafficRequest:JdCloudRequest
{
    /// 主域名，请使用getDomains接口获取
    var domainName:String

    /// 时间段的起始时间, UTC时间，例如2017-11-10T23:00:00Z
    var start:String

    /// 时间段的终止时间, UTC时间，例如2017-11-10T23:00:00Z
    var end:String

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,domainName:String,start:String,end:String,domainId:String){
        self.domainName = domainName
        self.start = start
        self.end = end
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum GetDomainQueryTrafficRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case start
        case end
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDomainQueryTrafficRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(start, forKey: .start)
        try encoderContainer.encode(end, forKey: .end)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

public class GetDomainQueryTrafficResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetDomainQueryTrafficResult?;

    enum GetDomainQueryTrafficResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDomainQueryTrafficResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetDomainQueryTrafficResult?.self, forKey: .result) ?? nil
    }
}

public extension GetDomainQueryTrafficResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDomainQueryTrafficResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AddDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddDomainResult?;

    enum AddDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension AddDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看主域名的解析次数 
public class GetDomainQueryCountResult:NSObject,JdCloudResult
{
    /// 时间序列
    var time:[Int64?]?

    /// 与时间序列对应的数据序列，单位：次数
    var traffic:[Int64?]?



    public override init(){
        super.init()
    }

    enum GetDomainQueryCountResultCodingKeys: String, CodingKey {
        case time
        case traffic
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDomainQueryCountResultCodingKeys.self)
        if decoderContainer.contains(.time)
        {
            self.time = try decoderContainer.decode([Int64?]?.self, forKey: .time)
        }
        if decoderContainer.contains(.traffic)
        {
            self.traffic = try decoderContainer.decode([Int64?]?.self, forKey: .traffic)
        }
    }
}
public extension GetDomainQueryCountResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDomainQueryCountResultCodingKeys.self)
        try encoderContainer.encode(time, forKey: .time)
        try encoderContainer.encode(traffic, forKey: .traffic)
    }
}
public class DelDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DelDomainResult?;

    enum DelDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DelDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DelDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension DelDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DelDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改主域名
public class UpdateDomainRequest:JdCloudRequest
{
    /// 需要修改的主域名，请使用getDomains接口获取
    var domainName:String

    /// 需要修改的主域名ID，请使用getDomains接口获取
    var id:Int


    public init(regionId: String,domainName:String,id:Int){
        self.domainName = domainName
        self.id = id
        super.init(regionId: regionId)
    }


    enum UpdateDomainRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class GetDomainsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetDomainsResult?;

    enum GetDomainsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDomainsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetDomainsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetDomainsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDomainsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查看主域名的解析次数
public class GetDomainQueryCountRequest:JdCloudRequest
{
    /// 查询的主域名，，请使用getDomains接口获取
    var domainName:String

    /// 查询时间段的起始时间, UTC时间，例如2017-11-10T23:00:00Z
    var start:String

    /// 查询时间段的终止时间, UTC时间，例如2017-11-10T23:00:00Z
    var end:String

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,domainName:String,start:String,end:String,domainId:String){
        self.domainName = domainName
        self.start = start
        self.end = end
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum GetDomainQueryCountRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case start
        case end
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDomainQueryCountRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(start, forKey: .start)
        try encoderContainer.encode(end, forKey: .end)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 修改主域名 
public class UpdateDomainResult:NSObject,JdCloudResult
{
}
public class AddMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddMonitorResult?;

    enum AddMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension AddMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  域名的监控项修改
public class UpdateMonitorRequest:JdCloudRequest
{
    /// 监控项设置信息
    var updateMonitor:UpdateMonitor

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,updateMonitor:UpdateMonitor,domainId:String){
        self.updateMonitor = updateMonitor
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum UpdateMonitorRequestRequestCodingKeys: String, CodingKey {
        case updateMonitor
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(updateMonitor, forKey: .updateMonitor)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

public class AddMonitorTargetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddMonitorTargetResult?;

    enum AddMonitorTargetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddMonitorTargetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddMonitorTargetResult?.self, forKey: .result) ?? nil
    }
}

public extension AddMonitorTargetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddMonitorTargetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  监控项的操作集合，包括：删除，暂停，启动, 手动恢复, 手动切换
public class OperateMonitorRequest:JdCloudRequest
{
    /// 删除del, 暂停stop, 开启start, 手动恢复recover，手动切换switch
    var action:String

    /// 监控项ID
    var ids:[Int?]?

    /// 监控项的主机值, 手动切换时必填
    var switchTarget:String?

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,action:String,ids:[Int?]?,domainId:String){
        self.action = action
        self.ids = ids
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum OperateMonitorRequestRequestCodingKeys: String, CodingKey {
        case action
        case ids
        case switchTarget
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OperateMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(action, forKey: .action)
        try encoderContainer.encode(ids, forKey: .ids)
        try encoderContainer.encode(switchTarget, forKey: .switchTarget)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}


///  查看主域名的监控项的配置以及状态
public class GetMonitorRequest:JdCloudRequest
{
    /// 当前页数，起始值为1，默认为1
    var pageIndex:Int?

    /// 分页查询时设置的每页行数
    var pageSize:Int?

    /// 查询的值
    var searchValue:String?

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,domainId:String){
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum GetMonitorRequestRequestCodingKeys: String, CodingKey {
        case pageIndex
        case pageSize
        case searchValue
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageIndex, forKey: .pageIndex)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(searchValue, forKey: .searchValue)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

public class GetMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetMonitorResult?;

    enum GetMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension GetMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 监控项的操作集合，包括：删除，暂停，启动, 手动恢复, 手动切换 
public class OperateMonitorResult:NSObject,JdCloudResult
{
}
/// 查看主域名的监控项的配置以及状态 
public class GetMonitorResult:NSObject,JdCloudResult
{
    /// 当前页面网站监控项的个数
    var currentCount:Int?

    /// 所有网站监控项的个数
    var totalCount:Int?

    /// 所有网站监控项的页数
    var totalPage:Int?

    /// 当前页面的网站监控项的列表
    var dataList:[Monitor?]?



    public override init(){
        super.init()
    }

    enum GetMonitorResultCodingKeys: String, CodingKey {
        case currentCount
        case totalCount
        case totalPage
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetMonitorResultCodingKeys.self)
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([Monitor?]?.self, forKey: .dataList)
        }
    }
}
public extension GetMonitorResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetMonitorResultCodingKeys.self)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}

///  主域名的监控项的报警信息
public class GetMonitorAlarmInfoRequest:JdCloudRequest
{
    /// 当前页数，起始值为1，默认为1
    var pageIndex:Int?

    /// 分页查询时设置的每页行数
    var pageSize:Int?

    /// 关键字
    var searchValue:String?

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,domainId:String){
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum GetMonitorAlarmInfoRequestRequestCodingKeys: String, CodingKey {
        case pageIndex
        case pageSize
        case searchValue
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetMonitorAlarmInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageIndex, forKey: .pageIndex)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(searchValue, forKey: .searchValue)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}


///  查询子域名的可用监控对象
public class GetTargetsRequest:JdCloudRequest
{
    /// 子域名
    var subDomainName:String

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,subDomainName:String,domainId:String){
        self.subDomainName = subDomainName
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum GetTargetsRequestRequestCodingKeys: String, CodingKey {
        case subDomainName
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTargetsRequestRequestCodingKeys.self)
        try encoderContainer.encode(subDomainName, forKey: .subDomainName)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 添加子域名的某些特定监控对象为监控项 
public class AddMonitorTargetResult:NSObject,JdCloudResult
{
}
public class GetTargetsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetTargetsResult?;

    enum GetTargetsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTargetsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetTargetsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetTargetsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTargetsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateMonitorResult?;

    enum UpdateMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 域名的监控项修改 
public class UpdateMonitorResult:NSObject,JdCloudResult
{
}
public class GetMonitorAlarmInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetMonitorAlarmInfoResult?;

    enum GetMonitorAlarmInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetMonitorAlarmInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetMonitorAlarmInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension GetMonitorAlarmInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetMonitorAlarmInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 主域名的监控项的报警信息 
public class GetMonitorAlarmInfoResult:NSObject,JdCloudResult
{
    /// 当前页面报警信息的个数
    var currentCount:Int?

    /// 所有报警信息的个数
    var totalCount:Int?

    /// 所有报警信息的页数
    var totalPage:Int?

    /// 当前页面的报警信息的数组
    var dataList:[MonitorAlarmInfo?]?



    public override init(){
        super.init()
    }

    enum GetMonitorAlarmInfoResultCodingKeys: String, CodingKey {
        case currentCount
        case totalCount
        case totalPage
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetMonitorAlarmInfoResultCodingKeys.self)
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([MonitorAlarmInfo?]?.self, forKey: .dataList)
        }
    }
}
public extension GetMonitorAlarmInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetMonitorAlarmInfoResultCodingKeys.self)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}

///  添加子域名的监控项，默认把子域名的所有监控项都添加上监控
public class AddMonitorRequest:JdCloudRequest
{
    /// 子域名
    var subDomainName:String

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,subDomainName:String,domainId:String){
        self.subDomainName = subDomainName
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum AddMonitorRequestRequestCodingKeys: String, CodingKey {
        case subDomainName
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(subDomainName, forKey: .subDomainName)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 添加子域名的监控项，默认把子域名的所有监控项都添加上监控 
public class AddMonitorResult:NSObject,JdCloudResult
{
}
/// 查询子域名的可用监控对象 
public class GetTargetsResult:NSObject,JdCloudResult
{
    /// 返回的可用监控对象的数组
    var data:[String?]?



    public override init(){
        super.init()
    }

    enum GetTargetsResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTargetsResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([String?]?.self, forKey: .data)
        }
    }
}
public extension GetTargetsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTargetsResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class OperateMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:OperateMonitorResult?;

    enum OperateMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OperateMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(OperateMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension OperateMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OperateMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加子域名的某些特定监控对象为监控项
public class AddMonitorTargetRequest:JdCloudRequest
{
    /// 子域名
    var subDomainName:String

    /// 子域名可用监控对象的数组
    var targets:[String?]?

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,subDomainName:String,domainId:String){
        self.subDomainName = subDomainName
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum AddMonitorTargetRequestRequestCodingKeys: String, CodingKey {
        case subDomainName
        case targets
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddMonitorTargetRequestRequestCodingKeys.self)
        try encoderContainer.encode(subDomainName, forKey: .subDomainName)
        try encoderContainer.encode(targets, forKey: .targets)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 修改主域名的某个解析记录 
public class UpdateRRResult:NSObject,JdCloudResult
{
}

///  添加主域名的解析记录
public class AddRRRequest:JdCloudRequest
{
    /// RR参数
    var req:AddRR

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,req:AddRR,domainId:String){
        self.req = req
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum AddRRRequestRequestCodingKeys: String, CodingKey {
        case req
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddRRRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

public class AddRRResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddRRResult?;

    enum AddRRResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddRRResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddRRResult?.self, forKey: .result) ?? nil
    }
}

public extension AddRRResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddRRResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 同一个主域名下，批量新增或者批量更新导入解析记录。
      ///       /// 如果解析记录的ID为0，是新增解析记录，如果不为0，则是更新解析记录。
      ///       ///  
public class BatchSetDnsResolveResult:NSObject,JdCloudResult
{
    /// 对应每条设置的解析列表的结果
    var data:[String?]?



    public override init(){
        super.init()
    }

    enum BatchSetDnsResolveResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BatchSetDnsResolveResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([String?]?.self, forKey: .data)
        }
    }
}
public extension BatchSetDnsResolveResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchSetDnsResolveResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class GetViewTreeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetViewTreeResult?;

    enum GetViewTreeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetViewTreeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetViewTreeResult?.self, forKey: .result) ?? nil
    }
}

public extension GetViewTreeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetViewTreeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class SearchRRResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SearchRRResult?;

    enum SearchRRResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SearchRRResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SearchRRResult?.self, forKey: .result) ?? nil
    }
}

public extension SearchRRResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SearchRRResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class BatchSetDnsResolveResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:BatchSetDnsResolveResult?;

    enum BatchSetDnsResolveResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BatchSetDnsResolveResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(BatchSetDnsResolveResult?.self, forKey: .result) ?? nil
    }
}

public extension BatchSetDnsResolveResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchSetDnsResolveResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加主域名的解析记录 
public class AddRRResult:NSObject,JdCloudResult
{
    /// 添加成功后的解析记录结果
    var dataList:RR?



    public override init(){
        super.init()
    }

    enum AddRRResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddRRResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode(RR?.self, forKey: .dataList)
        }
    }
}
public extension AddRRResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddRRResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}

///  修改主域名的某个解析记录
public class UpdateRRRequest:JdCloudRequest
{
    /// updateRR参数
    var req:UpdateRR

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,req:UpdateRR,domainId:String){
        self.req = req
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum UpdateRRRequestRequestCodingKeys: String, CodingKey {
        case req
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateRRRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

public class UpdateRRResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateRRResult?;

    enum UpdateRRResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateRRResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateRRResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateRRResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateRRResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询云解析所有的基础解析线路。  
      ///       /// 在使用解析线路的参数之前，请调用此接口获取解析线路的ID。
      ///       ///  
public class GetViewTreeResult:NSObject,JdCloudResult
{
    /// 解析线路的树
    var data:[ViewTree?]?



    public override init(){
        super.init()
    }

    enum GetViewTreeResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetViewTreeResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([ViewTree?]?.self, forKey: .data)
        }
    }
}
public extension GetViewTreeResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetViewTreeResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  查询云解析所有的基础解析线路。  
      ///       /// 在使用解析线路的参数之前，请调用此接口获取解析线路的ID。
      ///       /// 
public class GetViewTreeRequest:JdCloudRequest
{
    /// 展示方式，暂时不使用
    var loadMode:Int?

    /// 套餐ID，0-&gt;免费版 1-&gt;企业版 2-&gt;企业高级版
    var packId:Int

    /// view ID，默认为-1
    var viewId:Int

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,packId:Int,viewId:Int,domainId:String){
        self.packId = packId
        self.viewId = viewId
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum GetViewTreeRequestRequestCodingKeys: String, CodingKey {
        case loadMode
        case packId
        case viewId
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetViewTreeRequestRequestCodingKeys.self)
        try encoderContainer.encode(loadMode, forKey: .loadMode)
        try encoderContainer.encode(packId, forKey: .packId)
        try encoderContainer.encode(viewId, forKey: .viewId)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}


///  同一个主域名下，批量新增或者批量更新导入解析记录。
      ///       /// 如果解析记录的ID为0，是新增解析记录，如果不为0，则是更新解析记录。
      ///       /// 
public class BatchSetDnsResolveRequest:JdCloudRequest
{
    /// 需要设置的解析记录列表
    var req:[BatchSetDNS?]?


    public init(regionId: String,req:[BatchSetDNS?]?){
        self.req = req
        super.init(regionId: regionId)
    }


    enum BatchSetDnsResolveRequestRequestCodingKeys: String, CodingKey {
        case req
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchSetDnsResolveRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)

    }
}

/// 查询主域名的解析记录。  
      ///       /// 在使用解析记录相关的接口之前，请调用此接口获取解析记录的列表。
      ///       ///  
public class SearchRRResult:NSObject,JdCloudResult
{
    /// 解析记录列表
    var dataList:[RR?]?

    /// 所有解析记录的个数
    var totalCount:Int?

    /// 所有解析记录的页数
    var totalPage:Int?

    /// 当前页解析记录的个数
    var currentCount:Int?



    public override init(){
        super.init()
    }

    enum SearchRRResultCodingKeys: String, CodingKey {
        case dataList
        case totalCount
        case totalPage
        case currentCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SearchRRResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([RR?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
    }
}
public extension SearchRRResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SearchRRResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
    }
}
public class OperateRRResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:OperateRRResult?;

    enum OperateRRResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OperateRRResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(OperateRRResult?.self, forKey: .result) ?? nil
    }
}

public extension OperateRRResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OperateRRResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询主域名的解析记录。  
      ///       /// 在使用解析记录相关的接口之前，请调用此接口获取解析记录的列表。
      ///       /// 
public class SearchRRRequest:JdCloudRequest
{
    /// 当前页数，起始值为1，默认为1
    var pageNumber:Int?

    /// 分页查询时设置的每页行数, 默认为10
    var pageSize:Int?

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,domainId:String){
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum SearchRRRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SearchRRRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 启用、停用、删除主域名下的解析记录 
public class OperateRRResult:NSObject,JdCloudResult
{
}

///  启用、停用、删除主域名下的解析记录
public class OperateRRRequest:JdCloudRequest
{
    /// 需要操作的解析记录ID，请使用searchRR接口获取。
    var ids:[Int?]?

    /// 操作类型，on-&gt;启用 off-&gt;停用 del-&gt;删除
    var action:String

    /// 域名ID，请使用getDomains接口获取。
    var domainId:String


    public init(regionId: String,ids:[Int?]?,action:String,domainId:String){
        self.ids = ids
        self.action = action
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum OperateRRRequestRequestCodingKeys: String, CodingKey {
        case ids
        case action
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OperateRRRequestRequestCodingKeys.self)
        try encoderContainer.encode(ids, forKey: .ids)
        try encoderContainer.encode(action, forKey: .action)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 添加主域名的自定义解析线路的IP段 
public class AddUserViewIPResult:NSObject,JdCloudResult
{
}

///  查询主域名的自定义解析线路
public class GetUserViewRequest:JdCloudRequest
{
    /// 主域名ID
    var domainId:Int

    /// 自定义线路ID
    var viewId:Int

    /// 自定义线路名称, 最多64个字符
    var viewName:String?

    /// 分页参数，页的序号
    var pageNumber:Int

    /// 分页参数，每页含有的结果的数目
    var pageSize:Int


    public init(regionId: String,domainId:Int,viewId:Int,pageNumber:Int,pageSize:Int){
        self.domainId = domainId
        self.viewId = viewId
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        super.init(regionId: regionId)
    }


    enum GetUserViewRequestRequestCodingKeys: String, CodingKey {
        case domainId
        case viewId
        case viewName
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetUserViewRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainId, forKey: .domainId)
        try encoderContainer.encode(viewId, forKey: .viewId)
        try encoderContainer.encode(viewName, forKey: .viewName)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

/// 添加主域名的自定义解析线路 
public class AddUserViewResult:NSObject,JdCloudResult
{
    /// 添加成功后返回的自定义线路的结构
    var data:Userview?



    public override init(){
        super.init()
    }

    enum AddUserViewResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddUserViewResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Userview?.self, forKey: .data)
        }
    }
}
public extension AddUserViewResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddUserViewResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  添加主域名的自定义解析线路的IP段
public class AddUserViewIPRequest:JdCloudRequest
{
    /// 添加域名的自定义解析线路的IP段的参数
    var req:AddViewIP


    public init(regionId: String,req:AddViewIP){
        self.req = req
        super.init(regionId: regionId)
    }


    enum AddUserViewIPRequestRequestCodingKeys: String, CodingKey {
        case req
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddUserViewIPRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)

    }
}

public class DelUserViewIPResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DelUserViewIPResult?;

    enum DelUserViewIPResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DelUserViewIPResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DelUserViewIPResult?.self, forKey: .result) ?? nil
    }
}

public extension DelUserViewIPResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DelUserViewIPResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询主域名的自定义解析线路的IP段 
public class GetUserViewIPResult:NSObject,JdCloudResult
{
    /// 自定义线路包含的IP段列表
    var dataList:[String?]?

    /// 当前页的IP列表里的个数
    var currentCount:Int?

    /// IP列表里的IP段的个数
    var totalCount:Int?

    /// IP列表按照分页参数一共的页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum GetUserViewIPResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetUserViewIPResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([String?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension GetUserViewIPResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetUserViewIPResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
public class GetUserViewIPResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetUserViewIPResult?;

    enum GetUserViewIPResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetUserViewIPResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetUserViewIPResult?.self, forKey: .result) ?? nil
    }
}

public extension GetUserViewIPResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetUserViewIPResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除主域名的自定义解析线路
public class DelUserViewRequest:JdCloudRequest
{
    /// 删除自定义线路的参数
    var req:DelView


    public init(regionId: String,req:DelView){
        self.req = req
        super.init(regionId: regionId)
    }


    enum DelUserViewRequestRequestCodingKeys: String, CodingKey {
        case req
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DelUserViewRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)

    }
}

public class DelUserViewResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DelUserViewResult?;

    enum DelUserViewResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DelUserViewResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DelUserViewResult?.self, forKey: .result) ?? nil
    }
}

public extension DelUserViewResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DelUserViewResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加主域名的自定义解析线路
public class AddUserViewRequest:JdCloudRequest
{
    /// 添加自定义线路的参数
    var req:AddView


    public init(regionId: String,req:AddView){
        self.req = req
        super.init(regionId: regionId)
    }


    enum AddUserViewRequestRequestCodingKeys: String, CodingKey {
        case req
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddUserViewRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)

    }
}

public class GetUserViewResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetUserViewResult?;

    enum GetUserViewResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetUserViewResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetUserViewResult?.self, forKey: .result) ?? nil
    }
}

public extension GetUserViewResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetUserViewResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除主域名的自定义解析线路的IP段
public class DelUserViewIPRequest:JdCloudRequest
{
    /// 删除域名的自定义解析线路的IP段的参数
    var req:DelViewIP


    public init(regionId: String,req:DelViewIP){
        self.req = req
        super.init(regionId: regionId)
    }


    enum DelUserViewIPRequestRequestCodingKeys: String, CodingKey {
        case req
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DelUserViewIPRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)

    }
}


///  查询主域名的自定义解析线路的IP段
public class GetUserViewIPRequest:JdCloudRequest
{
    /// 主域名ID
    var domainId:Int

    /// 自定义线路ID
    var viewId:Int

    /// 自定义线路名称, 最多64个字符
    var viewName:String?

    /// 分页参数，页的序号, 默认为1
    var pageNumber:Int

    /// 分页参数，每页含有的结果的数目，默认为10
    var pageSize:Int


    public init(regionId: String,domainId:Int,viewId:Int,pageNumber:Int,pageSize:Int){
        self.domainId = domainId
        self.viewId = viewId
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        super.init(regionId: regionId)
    }


    enum GetUserViewIPRequestRequestCodingKeys: String, CodingKey {
        case domainId
        case viewId
        case viewName
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetUserViewIPRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainId, forKey: .domainId)
        try encoderContainer.encode(viewId, forKey: .viewId)
        try encoderContainer.encode(viewName, forKey: .viewName)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

public class AddUserViewResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddUserViewResult?;

    enum AddUserViewResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddUserViewResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddUserViewResult?.self, forKey: .result) ?? nil
    }
}

public extension AddUserViewResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddUserViewResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除主域名的自定义解析线路 
public class DelUserViewResult:NSObject,JdCloudResult
{
}
/// 删除主域名的自定义解析线路的IP段 
public class DelUserViewIPResult:NSObject,JdCloudResult
{
}
/// 查询主域名的自定义解析线路 
public class GetUserViewResult:NSObject,JdCloudResult
{
    /// 自定义线路列表
    var dataList:[UserViewInput?]?

    /// 当前页的自定义线路列表里的个数
    var currentCount:Int?

    /// 所有自定义线路列表的个数
    var totalCount:Int?

    /// 所有自定义线路列表按照分页参数一共的页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum GetUserViewResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetUserViewResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([UserViewInput?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension GetUserViewResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetUserViewResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
public class AddUserViewIPResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddUserViewIPResult?;

    enum AddUserViewIPResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddUserViewIPResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddUserViewIPResult?.self, forKey: .result) ?? nil
    }
}

public extension AddUserViewIPResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddUserViewIPResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetActionLogResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetActionLogResult?;

    enum GetActionLogResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetActionLogResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetActionLogResult?.self, forKey: .result) ?? nil
    }
}

public extension GetActionLogResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetActionLogResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看用户在云解析服务下的操作记录 
public class GetActionLogResult:NSObject,JdCloudResult
{
    /// 操作记录列表
    var dataList:[Actionlog?]?

    /// 当前页的操作记录列表里的个数
    var currentCount:Int?

    /// 所有操作记录的个数
    var totalCount:Int?

    /// 操作记录列表按照分页参数一共的页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum GetActionLogResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetActionLogResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([Actionlog?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension GetActionLogResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetActionLogResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}

///  查看用户在云解析服务下的操作记录
public class GetActionLogRequest:JdCloudRequest
{
    /// 分页参数，页的序号，默认是1
    var pageNumber:Int

    /// 分页参数，每页含有的结果的数目，默认是10
    var pageSize:Int

    /// 记录的起始时间，格式：UTC时间例如2017-11-10T23:00:00Z
    var startTime:String

    /// 记录的终止时间，格式：UTC时间例如2017-11-10T23:00:00Z
    var endTime:String

    /// 日志需要匹配的关键词
    var keyWord:String?

    /// 日志里面的结果是成功还是失败
    var success:Bool?

    /// 日志的类型
    var type:Int?


    public init(regionId: String,pageNumber:Int,pageSize:Int,startTime:String,endTime:String){
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum GetActionLogRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case keyWord
        case success
        case type
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetActionLogRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(keyWord, forKey: .keyWord)
        try encoderContainer.encode(success, forKey: .success)
        try encoderContainer.encode(type, forKey: .type)

    }
}

