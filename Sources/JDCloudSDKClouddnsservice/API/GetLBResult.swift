/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   解析记录
   云解析OpenAPI解析记录接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查看当前域名所有的有负载均衡的解析记录&lt;br&gt;
      ///       /// 这些解析记录分页展示的列表
      ///       /// 
@objc(GetLBResult)
public class GetLBResult:NSObject,JdCloudResult
{
    /// 解析记录的负载均衡列表
    var dataList:[Getlb?]?

    /// 所有负载均衡记录的个数
    var totalCount:Int?

    /// 所有负载均衡记录的页数
    var totalPage:Int?

    /// 当前页负载均衡记录的个数
    var currentCount:Int?



    public override init(){
        super.init()
    }

    enum GetLBResultCodingKeys: String, CodingKey {
        case dataList
        case totalCount
        case totalPage
        case currentCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetLBResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([Getlb?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
    }
}
public extension GetLBResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetLBResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
    }
}
