/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  productTxt
@objc(ProductTxt)
public class ProductTxt:NSObject,Codable{
    /// 主键id
    var id:Int?
    /// 产品id
    var productId:Int?
    /// 模板类型
    var templet:String?
    /// 内容(JSON字符串)
    var txt:String?
    /// 排序
    var sort:Int?
    /// 修改时间
    var createTime:String?
    /// 修改时间
    var updateTime:String?
    /// 语言：中文cn；英文en
    var lang:String?



    public override init(){
            super.init()
    }

    enum ProductTxtCodingKeys: String, CodingKey {
        case id
        case productId
        case templet
        case txt
        case sort
        case createTime
        case updateTime
        case lang
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ProductTxtCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.productId)
        {
            self.productId = try decoderContainer.decode(Int?.self, forKey: .productId)
        }
        if decoderContainer.contains(.templet)
        {
            self.templet = try decoderContainer.decode(String?.self, forKey: .templet)
        }
        if decoderContainer.contains(.txt)
        {
            self.txt = try decoderContainer.decode(String?.self, forKey: .txt)
        }
        if decoderContainer.contains(.sort)
        {
            self.sort = try decoderContainer.decode(Int?.self, forKey: .sort)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
        if decoderContainer.contains(.lang)
        {
            self.lang = try decoderContainer.decode(String?.self, forKey: .lang)
        }
    }
}
public extension ProductTxt{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ProductTxtCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(productId, forKey: .productId)
         try encoderContainer.encode(templet, forKey: .templet)
         try encoderContainer.encode(txt, forKey: .txt)
         try encoderContainer.encode(sort, forKey: .sort)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
         try encoderContainer.encode(lang, forKey: .lang)
    }
}
