/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  product
@objc(Product)
public class Product:NSObject,Codable{
    /// 主键id
    var id:Int?
    /// 名称
    var name:String?
    /// url
    var url:String?
    /// 父导航id
    var parentNavigationId:Int?
    /// 导航id
    var navigationId:Int?
    /// 修改时间
    var createTime:String?
    /// 修改时间
    var updateTime:String?
    /// 语言：中文cn；英文en
    var lang:String?
    /// 产品数据
    var txtVoList:[ProductTxt?]?



    public override init(){
            super.init()
    }

    enum ProductCodingKeys: String, CodingKey {
        case id
        case name
        case url
        case parentNavigationId
        case navigationId
        case createTime
        case updateTime
        case lang
        case txtVoList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ProductCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.url)
        {
            self.url = try decoderContainer.decode(String?.self, forKey: .url)
        }
        if decoderContainer.contains(.parentNavigationId)
        {
            self.parentNavigationId = try decoderContainer.decode(Int?.self, forKey: .parentNavigationId)
        }
        if decoderContainer.contains(.navigationId)
        {
            self.navigationId = try decoderContainer.decode(Int?.self, forKey: .navigationId)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
        if decoderContainer.contains(.lang)
        {
            self.lang = try decoderContainer.decode(String?.self, forKey: .lang)
        }
        if decoderContainer.contains(.txtVoList)
        {
            self.txtVoList = try decoderContainer.decode([ProductTxt?]?.self, forKey: .txtVoList)
        }
    }
}
public extension Product{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ProductCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(url, forKey: .url)
         try encoderContainer.encode(parentNavigationId, forKey: .parentNavigationId)
         try encoderContainer.encode(navigationId, forKey: .navigationId)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
         try encoderContainer.encode(lang, forKey: .lang)
         try encoderContainer.encode(txtVoList, forKey: .txtVoList)
    }
}
