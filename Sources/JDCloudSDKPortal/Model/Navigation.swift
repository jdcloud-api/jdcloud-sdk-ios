/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  navigation
@objc(Navigation)
public class Navigation:NSObject,Codable{
    /// 主键id
    var id:Int?
    /// 名称
    var name:String?
    /// 描述
    var descriptionValue:String?
    /// 图标地址
    var iconUrl:String?
    /// ICON 样式
    var iconClass:String?
    /// 链接地址
    var webUrl:String?
    /// url：用于查询产品详情
    var url:String?
    /// 是否为京东云产品；0:是京东云产品；1:不是京东云产品
    var productStatus:Int?
    /// 排序
    var sort:Int?
    /// 修改时间
    var createTime:String?
    /// 父ID
    var parentId:Int?
    /// 修改时间
    var updateTime:String?
    /// 导航层级
    var level:Int?
    /// 标签
    var label:String?
    /// 帮助文档地址
    var helpUrl:String?
    /// 自营标签
    var selfRun:String?
    /// 语言：中文cn；英文en
    var lang:String?
    /// 子结构
    var extChildren:[Navigation?]?



    public override init(){
            super.init()
    }

    enum NavigationCodingKeys: String, CodingKey {
        case id
        case name
        case descriptionValue = "description"
        case iconUrl
        case iconClass
        case webUrl
        case url
        case productStatus
        case sort
        case createTime
        case parentId
        case updateTime
        case level
        case label
        case helpUrl
        case selfRun
        case lang
        case extChildren
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NavigationCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.iconUrl)
        {
            self.iconUrl = try decoderContainer.decode(String?.self, forKey: .iconUrl)
        }
        if decoderContainer.contains(.iconClass)
        {
            self.iconClass = try decoderContainer.decode(String?.self, forKey: .iconClass)
        }
        if decoderContainer.contains(.webUrl)
        {
            self.webUrl = try decoderContainer.decode(String?.self, forKey: .webUrl)
        }
        if decoderContainer.contains(.url)
        {
            self.url = try decoderContainer.decode(String?.self, forKey: .url)
        }
        if decoderContainer.contains(.productStatus)
        {
            self.productStatus = try decoderContainer.decode(Int?.self, forKey: .productStatus)
        }
        if decoderContainer.contains(.sort)
        {
            self.sort = try decoderContainer.decode(Int?.self, forKey: .sort)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.parentId)
        {
            self.parentId = try decoderContainer.decode(Int?.self, forKey: .parentId)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
        if decoderContainer.contains(.level)
        {
            self.level = try decoderContainer.decode(Int?.self, forKey: .level)
        }
        if decoderContainer.contains(.label)
        {
            self.label = try decoderContainer.decode(String?.self, forKey: .label)
        }
        if decoderContainer.contains(.helpUrl)
        {
            self.helpUrl = try decoderContainer.decode(String?.self, forKey: .helpUrl)
        }
        if decoderContainer.contains(.selfRun)
        {
            self.selfRun = try decoderContainer.decode(String?.self, forKey: .selfRun)
        }
        if decoderContainer.contains(.lang)
        {
            self.lang = try decoderContainer.decode(String?.self, forKey: .lang)
        }
        if decoderContainer.contains(.extChildren)
        {
            self.extChildren = try decoderContainer.decode([Navigation?]?.self, forKey: .extChildren)
        }
    }
}
public extension Navigation{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NavigationCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(iconUrl, forKey: .iconUrl)
         try encoderContainer.encode(iconClass, forKey: .iconClass)
         try encoderContainer.encode(webUrl, forKey: .webUrl)
         try encoderContainer.encode(url, forKey: .url)
         try encoderContainer.encode(productStatus, forKey: .productStatus)
         try encoderContainer.encode(sort, forKey: .sort)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(parentId, forKey: .parentId)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
         try encoderContainer.encode(level, forKey: .level)
         try encoderContainer.encode(label, forKey: .label)
         try encoderContainer.encode(helpUrl, forKey: .helpUrl)
         try encoderContainer.encode(selfRun, forKey: .selfRun)
         try encoderContainer.encode(lang, forKey: .lang)
         try encoderContainer.encode(extChildren, forKey: .extChildren)
    }
}
