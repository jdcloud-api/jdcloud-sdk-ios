/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  noticeVo
@objc(NoticeVo)
public class NoticeVo:NSObject,Codable{
    /// uuid
    var uuid:Int?
    /// 主键id
    var id:Int?
    /// 标题
    var title:String?
    /// 公告类型; 1:产品公告; 2:域名公告; 3:活动公告; 4:其他公告
    var type:UInt8?
    /// 置顶; 100:不置顶; 1;2;3;4;5:置顶位置(数字不能重复)
    var goTop:UInt8?
    /// 位置; 0:不显示; 1:左边; 2:左中; 3:中; 4:右中; 5:右
    var inlet:UInt8?
    /// 创建时间
    var createTime:String?
    /// 修改时间
    var updateTime:String?
    /// 创建人
    var createPin:String?
    /// 是否失效; 0:生效; 1:失效
    var yn:UInt8?
    /// 公告内容
    var content:String?
    /// 发送开始时间
    var startTime:String?
    /// 发送结束时间
    var endTime:String?
    /// 位置; 1:置顶; 2:入口
    var site:Int?
    /// 页码数
    var pageNum:Int?
    /// 页显示数量
    var pageSize:Int?
    /// 语言
    var lang:String?
    /// 中英文关联id
    var langId:Int?
    /// 查询时间
    var ts:String?



    public override init(){
            super.init()
    }

    enum NoticeVoCodingKeys: String, CodingKey {
        case uuid
        case id
        case title
        case type
        case goTop
        case inlet
        case createTime
        case updateTime
        case createPin
        case yn
        case content
        case startTime
        case endTime
        case site
        case pageNum
        case pageSize
        case lang
        case langId
        case ts
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NoticeVoCodingKeys.self)
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(Int?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.title)
        {
            self.title = try decoderContainer.decode(String?.self, forKey: .title)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(UInt8?.self, forKey: .type)
        }
        if decoderContainer.contains(.goTop)
        {
            self.goTop = try decoderContainer.decode(UInt8?.self, forKey: .goTop)
        }
        if decoderContainer.contains(.inlet)
        {
            self.inlet = try decoderContainer.decode(UInt8?.self, forKey: .inlet)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
        if decoderContainer.contains(.createPin)
        {
            self.createPin = try decoderContainer.decode(String?.self, forKey: .createPin)
        }
        if decoderContainer.contains(.yn)
        {
            self.yn = try decoderContainer.decode(UInt8?.self, forKey: .yn)
        }
        if decoderContainer.contains(.content)
        {
            self.content = try decoderContainer.decode(String?.self, forKey: .content)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.site)
        {
            self.site = try decoderContainer.decode(Int?.self, forKey: .site)
        }
        if decoderContainer.contains(.pageNum)
        {
            self.pageNum = try decoderContainer.decode(Int?.self, forKey: .pageNum)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.lang)
        {
            self.lang = try decoderContainer.decode(String?.self, forKey: .lang)
        }
        if decoderContainer.contains(.langId)
        {
            self.langId = try decoderContainer.decode(Int?.self, forKey: .langId)
        }
        if decoderContainer.contains(.ts)
        {
            self.ts = try decoderContainer.decode(String?.self, forKey: .ts)
        }
    }
}
public extension NoticeVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NoticeVoCodingKeys.self)
         try encoderContainer.encode(uuid, forKey: .uuid)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(title, forKey: .title)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(goTop, forKey: .goTop)
         try encoderContainer.encode(inlet, forKey: .inlet)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
         try encoderContainer.encode(createPin, forKey: .createPin)
         try encoderContainer.encode(yn, forKey: .yn)
         try encoderContainer.encode(content, forKey: .content)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
         try encoderContainer.encode(site, forKey: .site)
         try encoderContainer.encode(pageNum, forKey: .pageNum)
         try encoderContainer.encode(pageSize, forKey: .pageSize)
         try encoderContainer.encode(lang, forKey: .lang)
         try encoderContainer.encode(langId, forKey: .langId)
         try encoderContainer.encode(ts, forKey: .ts)
    }
}
