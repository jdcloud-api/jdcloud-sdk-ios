/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  flavor
@objc(Flavor)
public class Flavor:NSObject,Codable{
    /// CPU核数
    var cpu:Int?
    /// 内存 ,单位GB
    var memory:Int?
    /// iops
    var iops:Int?
    /// 最大连接数
    var maxLink:Int?
    /// 最大磁盘数,单位GB
    var maxDisk:Int?
    /// 最下磁盘数,单位GB
    var minDisk:Int?
    /// 磁盘步长
    var diskStep:Int?



    public override init(){
            super.init()
    }

    enum FlavorCodingKeys: String, CodingKey {
        case cpu
        case memory
        case iops
        case maxLink
        case maxDisk
        case minDisk
        case diskStep
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: FlavorCodingKeys.self)
        if decoderContainer.contains(.cpu)
        {
            self.cpu = try decoderContainer.decode(Int?.self, forKey: .cpu)
        }
        if decoderContainer.contains(.memory)
        {
            self.memory = try decoderContainer.decode(Int?.self, forKey: .memory)
        }
        if decoderContainer.contains(.iops)
        {
            self.iops = try decoderContainer.decode(Int?.self, forKey: .iops)
        }
        if decoderContainer.contains(.maxLink)
        {
            self.maxLink = try decoderContainer.decode(Int?.self, forKey: .maxLink)
        }
        if decoderContainer.contains(.maxDisk)
        {
            self.maxDisk = try decoderContainer.decode(Int?.self, forKey: .maxDisk)
        }
        if decoderContainer.contains(.minDisk)
        {
            self.minDisk = try decoderContainer.decode(Int?.self, forKey: .minDisk)
        }
        if decoderContainer.contains(.diskStep)
        {
            self.diskStep = try decoderContainer.decode(Int?.self, forKey: .diskStep)
        }
    }
}
public extension Flavor{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: FlavorCodingKeys.self)
         try encoderContainer.encode(cpu, forKey: .cpu)
         try encoderContainer.encode(memory, forKey: .memory)
         try encoderContainer.encode(iops, forKey: .iops)
         try encoderContainer.encode(maxLink, forKey: .maxLink)
         try encoderContainer.encode(maxDisk, forKey: .maxDisk)
         try encoderContainer.encode(minDisk, forKey: .minDisk)
         try encoderContainer.encode(diskStep, forKey: .diskStep)
    }
}
