/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   实例管理
   API related to MONGODB instances

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon
    import JDCloudSDKCharge

/// 查看备份 
public class DescribeBackupsResult:NSObject,JdCloudResult
{
    /// Backups
    var backups:[Backup?]?

    /// TotalCount
    var totalCount:Int?

    /// PageNumber
    var pageNumber:Int?



    public override init(){
        super.init()
    }

    enum DescribeBackupsResultCodingKeys: String, CodingKey {
        case backups
        case totalCount
        case pageNumber
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupsResultCodingKeys.self)
        if decoderContainer.contains(.backups)
        {
            self.backups = try decoderContainer.decode([Backup?]?.self, forKey: .backups)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
    }
}
public extension DescribeBackupsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupsResultCodingKeys.self)
        try encoderContainer.encode(backups, forKey: .backups)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
    }
}
public class DeleteBackupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteBackupResult?;

    enum DeleteBackupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteBackupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteBackupResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteBackupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBackupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeBackupsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBackupsResult?;

    enum DescribeBackupsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBackupsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBackupsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建备份
public class CreateBackupRequest:JdCloudRequest
{
    /// 实例ID
    var instanceId:String

    /// 备份名称
    var backupName:String?


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum CreateBackupRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case backupName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackupRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(backupName, forKey: .backupName)

    }
}


///  删除备份
public class DeleteBackupRequest:JdCloudRequest
{
    /// backup ID
    var backupId:String


    public init(regionId: String,backupId:String){
        self.backupId = backupId
        super.init(regionId: regionId)
    }


    enum DeleteBackupRequestRequestCodingKeys: String, CodingKey {
        case backupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBackupRequestRequestCodingKeys.self)
        try encoderContainer.encode(backupId, forKey: .backupId)

    }
}

public class BackupDownloadURLResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:BackupDownloadURLResult?;

    enum BackupDownloadURLResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BackupDownloadURLResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(BackupDownloadURLResult?.self, forKey: .result) ?? nil
    }
}

public extension BackupDownloadURLResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BackupDownloadURLResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateBackupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateBackupResult?;

    enum CreateBackupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBackupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateBackupResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateBackupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查看备份
public class DescribeBackupsRequest:JdCloudRequest
{
    /// 页码；默认为1，取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[1, 100]
    var pageSize:Int?

    /// instanceId - 实例ID, 精确匹配
      /// backupId - 备份ID, 精确匹配
      /// 
    var filters:[Filter?]?




    enum DescribeBackupsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 创建备份 
public class CreateBackupResult:NSObject,JdCloudResult
{
    /// BackupId
    var backupId:String?



    public override init(){
        super.init()
    }

    enum CreateBackupResultCodingKeys: String, CodingKey {
        case backupId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBackupResultCodingKeys.self)
        if decoderContainer.contains(.backupId)
        {
            self.backupId = try decoderContainer.decode(String?.self, forKey: .backupId)
        }
    }
}
public extension CreateBackupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackupResultCodingKeys.self)
        try encoderContainer.encode(backupId, forKey: .backupId)
    }
}
/// 获取备份下载链接 
public class BackupDownloadURLResult:NSObject,JdCloudResult
{
    /// BackupDownloadURL
    var backupDownloadURL:BackupDownloadURL?



    public override init(){
        super.init()
    }

    enum BackupDownloadURLResultCodingKeys: String, CodingKey {
        case backupDownloadURL
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BackupDownloadURLResultCodingKeys.self)
        if decoderContainer.contains(.backupDownloadURL)
        {
            self.backupDownloadURL = try decoderContainer.decode(BackupDownloadURL?.self, forKey: .backupDownloadURL)
        }
    }
}
public extension BackupDownloadURLResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BackupDownloadURLResultCodingKeys.self)
        try encoderContainer.encode(backupDownloadURL, forKey: .backupDownloadURL)
    }
}
/// 删除备份 
public class DeleteBackupResult:NSObject,JdCloudResult
{
}

///  获取备份下载链接
public class BackupDownloadURLRequest:JdCloudRequest
{
    /// backup ID
    var backupId:String


    public init(regionId: String,backupId:String){
        self.backupId = backupId
        super.init(regionId: regionId)
    }


    enum BackupDownloadURLRequestRequestCodingKeys: String, CodingKey {
        case backupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BackupDownloadURLRequestRequestCodingKeys.self)
        try encoderContainer.encode(backupId, forKey: .backupId)

    }
}

/// 查询实例访问白名单 
public class DescribeSecurityIpsResult:NSObject,JdCloudResult
{
    /// SecurityIps
    var securityIps:String?



    public override init(){
        super.init()
    }

    enum DescribeSecurityIpsResultCodingKeys: String, CodingKey {
        case securityIps
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecurityIpsResultCodingKeys.self)
        if decoderContainer.contains(.securityIps)
        {
            self.securityIps = try decoderContainer.decode(String?.self, forKey: .securityIps)
        }
    }
}
public extension DescribeSecurityIpsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecurityIpsResultCodingKeys.self)
        try encoderContainer.encode(securityIps, forKey: .securityIps)
    }
}
/// 修改实例访问白名单 
public class ModifySecurityIpsResult:NSObject,JdCloudResult
{
}
public class DescribeSecurityIpsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSecurityIpsResult?;

    enum DescribeSecurityIpsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecurityIpsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSecurityIpsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSecurityIpsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecurityIpsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifySecurityIpsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifySecurityIpsResult?;

    enum ModifySecurityIpsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifySecurityIpsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifySecurityIpsResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifySecurityIpsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifySecurityIpsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询实例访问白名单
public class DescribeSecurityIpsRequest:JdCloudRequest
{
    /// Instance ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeSecurityIpsRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecurityIpsRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  修改实例访问白名单
public class ModifySecurityIpsRequest:JdCloudRequest
{
    /// 修改方式,Add 增加白名单,Delete 删除白名单.
    var modifyMode:String

    /// IP白名单分组下的IP列表，最多45个以逗号隔开，格式如下：0.0.0.0/0，10.23.12.24（IP），或者10.23.12.24/24（CIDR模式，无类域间路由，/24表示了地址中前缀的长度，范围[1，32]）。
    var securityIps:String

    /// Instance ID
    var instanceId:String


    public init(regionId: String,modifyMode:String,securityIps:String,instanceId:String){
        self.modifyMode = modifyMode
        self.securityIps = securityIps
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifySecurityIpsRequestRequestCodingKeys: String, CodingKey {
        case modifyMode
        case securityIps
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifySecurityIpsRequestRequestCodingKeys.self)
        try encoderContainer.encode(modifyMode, forKey: .modifyMode)
        try encoderContainer.encode(securityIps, forKey: .securityIps)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 变更实例规格 
public class ModifyInstanceSpecResult:NSObject,JdCloudResult
{
    /// InstanceId
    var instanceId:String?

    /// OrderId
    var orderId:String?



    public override init(){
        super.init()
    }

    enum ModifyInstanceSpecResultCodingKeys: String, CodingKey {
        case instanceId
        case orderId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceSpecResultCodingKeys.self)
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.orderId)
        {
            self.orderId = try decoderContainer.decode(String?.self, forKey: .orderId)
        }
    }
}
public extension ModifyInstanceSpecResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceSpecResultCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(orderId, forKey: .orderId)
    }
}
public class DescribeAvailableZonesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAvailableZonesResult?;

    enum DescribeAvailableZonesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAvailableZonesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAvailableZonesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAvailableZonesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAvailableZonesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyInstanceSpecResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstanceSpecResult?;

    enum ModifyInstanceSpecResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceSpecResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstanceSpecResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstanceSpecResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceSpecResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class RestoreInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RestoreInstanceResult?;

    enum RestoreInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RestoreInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RestoreInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension RestoreInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstancesResult?;

    enum DescribeInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 数据恢复 
public class RestoreInstanceResult:NSObject,JdCloudResult
{
}
public class ResetPasswordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResetPasswordResult?;

    enum ResetPasswordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResetPasswordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResetPasswordResult?.self, forKey: .result) ?? nil
    }
}

public extension ResetPasswordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetPasswordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取规格 
public class DescribeFlavorsResult:NSObject,JdCloudResult
{
    /// Flavors
    var flavors:[Flavor?]?



    public override init(){
        super.init()
    }

    enum DescribeFlavorsResultCodingKeys: String, CodingKey {
        case flavors
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeFlavorsResultCodingKeys.self)
        if decoderContainer.contains(.flavors)
        {
            self.flavors = try decoderContainer.decode([Flavor?]?.self, forKey: .flavors)
        }
    }
}
public extension DescribeFlavorsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeFlavorsResultCodingKeys.self)
        try encoderContainer.encode(flavors, forKey: .flavors)
    }
}
public class DescribeFlavorsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeFlavorsResult?;

    enum DescribeFlavorsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeFlavorsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeFlavorsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeFlavorsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeFlavorsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建实例
public class CreateInstanceRequest:JdCloudRequest
{
    /// 实例规格
    var instanceSpec:DBInstanceSpec

    /// 付费方式
    var chargeSpec:ChargeSpec?


    public init(regionId: String,instanceSpec:DBInstanceSpec){
        self.instanceSpec = instanceSpec
        super.init(regionId: regionId)
    }


    enum CreateInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceSpec
        case chargeSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceSpec, forKey: .instanceSpec)
        try encoderContainer.encode(chargeSpec, forKey: .chargeSpec)

    }
}


///  删除实例
public class DeleteInstanceRequest:JdCloudRequest
{
    /// Instance ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DeleteInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  获取可用区
public class DescribeAvailableZonesRequest:JdCloudRequest
{
}

public class ModifyBackupPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyBackupPolicyResult?;

    enum ModifyBackupPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyBackupPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyBackupPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyBackupPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBackupPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  重置密码
public class ResetPasswordRequest:JdCloudRequest
{
    /// 新密码，必须包含且只支持字母及数字，不少于8字符不超过16字符。
    var accountPassword:String

    /// Instance ID
    var instanceId:String


    public init(regionId: String,accountPassword:String,instanceId:String){
        self.accountPassword = accountPassword
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ResetPasswordRequestRequestCodingKeys: String, CodingKey {
        case accountPassword
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetPasswordRequestRequestCodingKeys.self)
        try encoderContainer.encode(accountPassword, forKey: .accountPassword)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询实例信息
public class DescribeInstancesRequest:JdCloudRequest
{
    /// 页码；默认为1，取值范围：[1,∞)
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[1, 100]
    var pageSize:Int?

    /// instanceId - 实例ID, 精确匹配
      /// instanceName - 实例名称, 模糊匹配
      /// instanceStatus - mongodb状态，精确匹配，支持多个.RUNNING：运行, ERROR：错误 ,BUILDING：创建中, DELETING：删除中, RESTORING：恢复中, RESIZING：变配中
      /// chargeMode - 计费类型，精确匹配
      /// 
    var filters:[Filter?]?

    /// Tag筛选条件
    var tagFilters:[TagFilter?]?

    /// createTime - 创建时间,asc（正序），desc（倒序）
      /// 
    var sorts:[Sort?]?




    enum DescribeInstancesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case tagFilters
        case sorts
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(tagFilters, forKey: .tagFilters)
        try encoderContainer.encode(sorts, forKey: .sorts)

    }
}

/// 创建实例 
public class CreateInstanceResult:NSObject,JdCloudResult
{
    /// InstanceId
    var instanceId:String?

    /// OrderId
    var orderId:String?



    public override init(){
        super.init()
    }

    enum CreateInstanceResultCodingKeys: String, CodingKey {
        case instanceId
        case orderId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceResultCodingKeys.self)
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.orderId)
        {
            self.orderId = try decoderContainer.decode(String?.self, forKey: .orderId)
        }
    }
}
public extension CreateInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceResultCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(orderId, forKey: .orderId)
    }
}
/// 重置密码 
public class ResetPasswordResult:NSObject,JdCloudResult
{
}

///  变更实例规格
public class ModifyInstanceSpecRequest:JdCloudRequest
{
    /// 实例规格，包年包月不允许小于当前规格。
    var instanceClass:String

    /// 存储空间，包年包月不允许小于当前规格。
    var instanceStorageGB:Int

    /// Instance ID
    var instanceId:String


    public init(regionId: String,instanceClass:String,instanceStorageGB:Int,instanceId:String){
        self.instanceClass = instanceClass
        self.instanceStorageGB = instanceStorageGB
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstanceSpecRequestRequestCodingKeys: String, CodingKey {
        case instanceClass
        case instanceStorageGB
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceSpecRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceClass, forKey: .instanceClass)
        try encoderContainer.encode(instanceStorageGB, forKey: .instanceStorageGB)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 修改备份策略 
public class ModifyBackupPolicyResult:NSObject,JdCloudResult
{
    /// PreferredBackupPeriod
    var preferredBackupPeriod:String?

    /// PreferredBackupWindow
    var preferredBackupWindow:String?

    /// BackupRetentionPeriod
    var backupRetentionPeriod:String?



    public override init(){
        super.init()
    }

    enum ModifyBackupPolicyResultCodingKeys: String, CodingKey {
        case preferredBackupPeriod
        case preferredBackupWindow
        case backupRetentionPeriod
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyBackupPolicyResultCodingKeys.self)
        if decoderContainer.contains(.preferredBackupPeriod)
        {
            self.preferredBackupPeriod = try decoderContainer.decode(String?.self, forKey: .preferredBackupPeriod)
        }
        if decoderContainer.contains(.preferredBackupWindow)
        {
            self.preferredBackupWindow = try decoderContainer.decode(String?.self, forKey: .preferredBackupWindow)
        }
        if decoderContainer.contains(.backupRetentionPeriod)
        {
            self.backupRetentionPeriod = try decoderContainer.decode(String?.self, forKey: .backupRetentionPeriod)
        }
    }
}
public extension ModifyBackupPolicyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBackupPolicyResultCodingKeys.self)
        try encoderContainer.encode(preferredBackupPeriod, forKey: .preferredBackupPeriod)
        try encoderContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        try encoderContainer.encode(backupRetentionPeriod, forKey: .backupRetentionPeriod)
    }
}
public class ModifyInstanceNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstanceNameResult?;

    enum ModifyInstanceNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstanceNameResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstanceNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteInstanceResult?;

    enum DeleteInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeBackupPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBackupPolicyResult?;

    enum DescribeBackupPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBackupPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBackupPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取可用区 
public class DescribeAvailableZonesResult:NSObject,JdCloudResult
{
    /// AvailableZones
    var availableZones:[AvailableZones?]?



    public override init(){
        super.init()
    }

    enum DescribeAvailableZonesResultCodingKeys: String, CodingKey {
        case availableZones
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAvailableZonesResultCodingKeys.self)
        if decoderContainer.contains(.availableZones)
        {
            self.availableZones = try decoderContainer.decode([AvailableZones?]?.self, forKey: .availableZones)
        }
    }
}
public extension DescribeAvailableZonesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAvailableZonesResultCodingKeys.self)
        try encoderContainer.encode(availableZones, forKey: .availableZones)
    }
}

///  获取规格
public class DescribeFlavorsRequest:JdCloudRequest
{
}

public class CreateInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateInstanceResult?;

    enum CreateInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除实例 
public class DeleteInstanceResult:NSObject,JdCloudResult
{
}

///  修改实例名称
public class ModifyInstanceNameRequest:JdCloudRequest
{
    /// 新的实例名称，只支持数字、字母、英文下划线、中文，且不少于2字符不超过32字符。
    var instanceName:String

    /// Instance ID
    var instanceId:String


    public init(regionId: String,instanceName:String,instanceId:String){
        self.instanceName = instanceName
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstanceNameRequestRequestCodingKeys: String, CodingKey {
        case instanceName
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceName, forKey: .instanceName)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 查询实例信息 
public class DescribeInstancesResult:NSObject,JdCloudResult
{
    /// DbInstances
    var dbInstances:[DBInstance?]?

    /// TotalCount
    var totalCount:Int?

    /// PageNumber
    var pageNumber:Int?



    public override init(){
        super.init()
    }

    enum DescribeInstancesResultCodingKeys: String, CodingKey {
        case dbInstances
        case totalCount
        case pageNumber
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        if decoderContainer.contains(.dbInstances)
        {
            self.dbInstances = try decoderContainer.decode([DBInstance?]?.self, forKey: .dbInstances)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
    }
}
public extension DescribeInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        try encoderContainer.encode(dbInstances, forKey: .dbInstances)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
    }
}
/// 修改实例名称 
public class ModifyInstanceNameResult:NSObject,JdCloudResult
{
}
/// 获取备份策略 
public class DescribeBackupPolicyResult:NSObject,JdCloudResult
{
    /// PreferredBackupPeriod
    var preferredBackupPeriod:String?

    /// PreferredBackupWindow
    var preferredBackupWindow:String?

    /// BackupRetentionPeriod
    var backupRetentionPeriod:String?



    public override init(){
        super.init()
    }

    enum DescribeBackupPolicyResultCodingKeys: String, CodingKey {
        case preferredBackupPeriod
        case preferredBackupWindow
        case backupRetentionPeriod
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupPolicyResultCodingKeys.self)
        if decoderContainer.contains(.preferredBackupPeriod)
        {
            self.preferredBackupPeriod = try decoderContainer.decode(String?.self, forKey: .preferredBackupPeriod)
        }
        if decoderContainer.contains(.preferredBackupWindow)
        {
            self.preferredBackupWindow = try decoderContainer.decode(String?.self, forKey: .preferredBackupWindow)
        }
        if decoderContainer.contains(.backupRetentionPeriod)
        {
            self.backupRetentionPeriod = try decoderContainer.decode(String?.self, forKey: .backupRetentionPeriod)
        }
    }
}
public extension DescribeBackupPolicyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupPolicyResultCodingKeys.self)
        try encoderContainer.encode(preferredBackupPeriod, forKey: .preferredBackupPeriod)
        try encoderContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        try encoderContainer.encode(backupRetentionPeriod, forKey: .backupRetentionPeriod)
    }
}

///  修改备份策略
public class ModifyBackupPolicyRequest:JdCloudRequest
{
    /// 备份时间，格式：HH:mmZ- HH:mmZ，只允许间隔时间为1小时的整点.
    var preferredBackupTime:String

    /// Instance ID
    var instanceId:String


    public init(regionId: String,preferredBackupTime:String,instanceId:String){
        self.preferredBackupTime = preferredBackupTime
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyBackupPolicyRequestRequestCodingKeys: String, CodingKey {
        case preferredBackupTime
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBackupPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(preferredBackupTime, forKey: .preferredBackupTime)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  获取备份策略
public class DescribeBackupPolicyRequest:JdCloudRequest
{
    /// Instance ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeBackupPolicyRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  数据恢复
public class RestoreInstanceRequest:JdCloudRequest
{
    /// 备份ID
    var backupId:String

    /// Instance ID
    var instanceId:String


    public init(regionId: String,backupId:String,instanceId:String){
        self.backupId = backupId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum RestoreInstanceRequestRequestCodingKeys: String, CodingKey {
        case backupId
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(backupId, forKey: .backupId)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

