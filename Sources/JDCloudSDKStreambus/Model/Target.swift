/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  target
@objc(Target)
public class Target:NSObject,Codable{
    /// 需要归档的目的地
    var name:String?
    /// 当达到这个数据量时开始归档
    var recordSize:Int?
    /// 进行归档任务的时间周期
    var cycle:Int?



    public override init(){
            super.init()
    }

    enum TargetCodingKeys: String, CodingKey {
        case name
        case recordSize
        case cycle
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TargetCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.recordSize)
        {
            self.recordSize = try decoderContainer.decode(Int?.self, forKey: .recordSize)
        }
        if decoderContainer.contains(.cycle)
        {
            self.cycle = try decoderContainer.decode(Int?.self, forKey: .cycle)
        }
    }
}
public extension Target{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TargetCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(recordSize, forKey: .recordSize)
         try encoderContainer.encode(cycle, forKey: .cycle)
    }
}
