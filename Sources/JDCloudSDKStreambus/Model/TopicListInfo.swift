/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  topicListInfo
@objc(TopicListInfo)
public class TopicListInfo:NSObject,Codable{
    /// 是否归档（0：未归档，1：已归档）
    var archived:Int?
    /// 创建topic的时间戳
    var createdTime:String?
    /// topic是否已删除（0：未删除，1：删除）
    var deleted:Int?
    /// topic的id值
    var id:Int?
    /// 数据写入后的保留时间
    var lifecycle:Int?
    /// 流数据总线中topic的名字
    var name:String?
    /// 对应kafka中的分区数
    var partitionNum:String?
    /// 备注
    var remark:String?
    /// 流数据总线shard的数量
    var shardNum:String?
    /// 0: 已创建, 1: 创建中
    var status:Int?
    /// 对应kafka中的topic名字
    var topicName:String?
    /// 对应kafka中的uid
    var uid:String?
    /// 更新topic的时间戳
    var updatedTime:String?
    /// 用户的userPin
    var userPin:String?
    /// DataSize
    var dataSize:String?



    public override init(){
            super.init()
    }

    enum TopicListInfoCodingKeys: String, CodingKey {
        case archived
        case createdTime
        case deleted
        case id
        case lifecycle
        case name
        case partitionNum
        case remark
        case shardNum
        case status
        case topicName
        case uid
        case updatedTime
        case userPin
        case dataSize
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TopicListInfoCodingKeys.self)
        if decoderContainer.contains(.archived)
        {
            self.archived = try decoderContainer.decode(Int?.self, forKey: .archived)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.deleted)
        {
            self.deleted = try decoderContainer.decode(Int?.self, forKey: .deleted)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.lifecycle)
        {
            self.lifecycle = try decoderContainer.decode(Int?.self, forKey: .lifecycle)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.partitionNum)
        {
            self.partitionNum = try decoderContainer.decode(String?.self, forKey: .partitionNum)
        }
        if decoderContainer.contains(.remark)
        {
            self.remark = try decoderContainer.decode(String?.self, forKey: .remark)
        }
        if decoderContainer.contains(.shardNum)
        {
            self.shardNum = try decoderContainer.decode(String?.self, forKey: .shardNum)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.topicName)
        {
            self.topicName = try decoderContainer.decode(String?.self, forKey: .topicName)
        }
        if decoderContainer.contains(.uid)
        {
            self.uid = try decoderContainer.decode(String?.self, forKey: .uid)
        }
        if decoderContainer.contains(.updatedTime)
        {
            self.updatedTime = try decoderContainer.decode(String?.self, forKey: .updatedTime)
        }
        if decoderContainer.contains(.userPin)
        {
            self.userPin = try decoderContainer.decode(String?.self, forKey: .userPin)
        }
        if decoderContainer.contains(.dataSize)
        {
            self.dataSize = try decoderContainer.decode(String?.self, forKey: .dataSize)
        }
    }
}
public extension TopicListInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TopicListInfoCodingKeys.self)
         try encoderContainer.encode(archived, forKey: .archived)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(deleted, forKey: .deleted)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(lifecycle, forKey: .lifecycle)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(partitionNum, forKey: .partitionNum)
         try encoderContainer.encode(remark, forKey: .remark)
         try encoderContainer.encode(shardNum, forKey: .shardNum)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(topicName, forKey: .topicName)
         try encoderContainer.encode(uid, forKey: .uid)
         try encoderContainer.encode(updatedTime, forKey: .updatedTime)
         try encoderContainer.encode(userPin, forKey: .userPin)
         try encoderContainer.encode(dataSize, forKey: .dataSize)
    }
}
