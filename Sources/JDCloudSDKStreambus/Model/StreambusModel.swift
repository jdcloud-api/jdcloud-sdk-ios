/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   TOPIC相关 API
   流数据总线topic相关信息接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
///  consumerGroup
public class ConsumerGroup:NSObject,Codable{
    /// Id
    var id:Int?
    /// Name
    var name:String?
    /// CreatedTime
    var createdTime:String?
    /// Delete
    var delete:UInt8?
    /// TopicId
    var topicId:Int64?



    public override init(){
            super.init()
    }

    enum ConsumerGroupCodingKeys: String, CodingKey {
        case id
        case name
        case createdTime
        case delete
        case topicId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ConsumerGroupCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.delete)
        {
            self.delete = try decoderContainer.decode(UInt8?.self, forKey: .delete)
        }
        if decoderContainer.contains(.topicId)
        {
            self.topicId = try decoderContainer.decode(Int64?.self, forKey: .topicId)
        }
    }
}
public extension ConsumerGroup{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ConsumerGroupCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(delete, forKey: .delete)
         try encoderContainer.encode(topicId, forKey: .topicId)
    }
}
///  topicModel
public class TopicModel:NSObject,Codable{
    /// Topic
    var topic:Topic?
    /// Target
    var target:Target?
    /// 归档相关的具体参数，需要对归档进行新建，更新，删除，修改对应参数值即可。&lt;br&gt;ossFlag，bucketName，directory，objectName 这四个参数值与ossFlag有关，若ossFlag为false，后面三个可为空，若为true，后面三个为异常数据保存位置，按需要填写即可。&lt;br&gt; 1）如果归档到数据计算服务需要传database，table，type，example，delimiter，targetColumn，analysisColumn，partsTargetColumn，partsAnalysisColumn。&lt;br&gt;2）如果归档到JFS需要传bucket，prefix，infix。&lt;br&gt;3）如果归档到京东云 Elasticsearch需要传host，port，indexType，idType，indexName，indexReferField，timestampFieldFormat，timestampIndexFormat，typeName，idReferField，noResolve，username，password。&lt;br&gt; 4）如果归档到mysql，则需要传host，database，table，username，password，type，example，delimiter。 &lt;br&gt;5)如果要归档到京东云数据库则需要传rdsId，database，table，username，password，type，example，delimiter。
    var parameterList:[ParameterList?]?



    public override init(){
            super.init()
    }

    enum TopicModelCodingKeys: String, CodingKey {
        case topic
        case target
        case parameterList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TopicModelCodingKeys.self)
        if decoderContainer.contains(.topic)
        {
            self.topic = try decoderContainer.decode(Topic?.self, forKey: .topic)
        }
        if decoderContainer.contains(.target)
        {
            self.target = try decoderContainer.decode(Target?.self, forKey: .target)
        }
        if decoderContainer.contains(.parameterList)
        {
            self.parameterList = try decoderContainer.decode([ParameterList?]?.self, forKey: .parameterList)
        }
    }
}
public extension TopicModel{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TopicModelCodingKeys.self)
         try encoderContainer.encode(topic, forKey: .topic)
         try encoderContainer.encode(target, forKey: .target)
         try encoderContainer.encode(parameterList, forKey: .parameterList)
    }
}
///  parameterList
public class ParameterList:NSObject,Codable{
    /// PKey
    var pKey:String?
    /// PValue
    var pValue:String?



    public override init(){
            super.init()
    }

    enum ParameterListCodingKeys: String, CodingKey {
        case pKey
        case pValue
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ParameterListCodingKeys.self)
        if decoderContainer.contains(.pKey)
        {
            self.pKey = try decoderContainer.decode(String?.self, forKey: .pKey)
        }
        if decoderContainer.contains(.pValue)
        {
            self.pValue = try decoderContainer.decode(String?.self, forKey: .pValue)
        }
    }
}
public extension ParameterList{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ParameterListCodingKeys.self)
         try encoderContainer.encode(pKey, forKey: .pKey)
         try encoderContainer.encode(pValue, forKey: .pValue)
    }
}
///  topic
public class Topic:NSObject,Codable{
    /// 主题id
    var id:Int?
    /// 是否归档（0：未归档，1：已归档）
    var archived:Int?
    /// 数据写入后的保留时间
    var lifecycle:Int?
    /// 分区
    var partitionNum:Int?
    /// 流数据总线中topic的名字
    var name:String?
    /// 流数据总线shard的数量
    var shardNum:Int?
    /// 备注
    var remark:String?



    public override init(){
            super.init()
    }

    enum TopicCodingKeys: String, CodingKey {
        case id
        case archived
        case lifecycle
        case partitionNum
        case name
        case shardNum
        case remark
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TopicCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.archived)
        {
            self.archived = try decoderContainer.decode(Int?.self, forKey: .archived)
        }
        if decoderContainer.contains(.lifecycle)
        {
            self.lifecycle = try decoderContainer.decode(Int?.self, forKey: .lifecycle)
        }
        if decoderContainer.contains(.partitionNum)
        {
            self.partitionNum = try decoderContainer.decode(Int?.self, forKey: .partitionNum)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.shardNum)
        {
            self.shardNum = try decoderContainer.decode(Int?.self, forKey: .shardNum)
        }
        if decoderContainer.contains(.remark)
        {
            self.remark = try decoderContainer.decode(String?.self, forKey: .remark)
        }
    }
}
public extension Topic{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TopicCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(archived, forKey: .archived)
         try encoderContainer.encode(lifecycle, forKey: .lifecycle)
         try encoderContainer.encode(partitionNum, forKey: .partitionNum)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(shardNum, forKey: .shardNum)
         try encoderContainer.encode(remark, forKey: .remark)
    }
}
///  topicListInfo
public class TopicListInfo:NSObject,Codable{
    /// 是否归档（0：未归档，1：已归档）
    var archived:Int?
    /// 创建topic的时间戳
    var createdTime:String?
    /// topic是否已删除（0：未删除，1：删除）
    var deleted:Int?
    /// topic的id值
    var id:Int?
    /// 数据写入后的保留时间
    var lifecycle:Int?
    /// 流数据总线中topic的名字
    var name:String?
    /// 对应kafka中的分区数
    var partitionNum:String?
    /// 备注
    var remark:String?
    /// 流数据总线shard的数量
    var shardNum:String?
    /// 0: 已创建, 1: 创建中
    var status:Int?
    /// 对应kafka中的topic名字
    var topicName:String?
    /// 对应kafka中的uid
    var uid:String?
    /// 更新topic的时间戳
    var updatedTime:String?
    /// 用户的userPin
    var userPin:String?
    /// DataSize
    var dataSize:String?



    public override init(){
            super.init()
    }

    enum TopicListInfoCodingKeys: String, CodingKey {
        case archived
        case createdTime
        case deleted
        case id
        case lifecycle
        case name
        case partitionNum
        case remark
        case shardNum
        case status
        case topicName
        case uid
        case updatedTime
        case userPin
        case dataSize
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TopicListInfoCodingKeys.self)
        if decoderContainer.contains(.archived)
        {
            self.archived = try decoderContainer.decode(Int?.self, forKey: .archived)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.deleted)
        {
            self.deleted = try decoderContainer.decode(Int?.self, forKey: .deleted)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.lifecycle)
        {
            self.lifecycle = try decoderContainer.decode(Int?.self, forKey: .lifecycle)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.partitionNum)
        {
            self.partitionNum = try decoderContainer.decode(String?.self, forKey: .partitionNum)
        }
        if decoderContainer.contains(.remark)
        {
            self.remark = try decoderContainer.decode(String?.self, forKey: .remark)
        }
        if decoderContainer.contains(.shardNum)
        {
            self.shardNum = try decoderContainer.decode(String?.self, forKey: .shardNum)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.topicName)
        {
            self.topicName = try decoderContainer.decode(String?.self, forKey: .topicName)
        }
        if decoderContainer.contains(.uid)
        {
            self.uid = try decoderContainer.decode(String?.self, forKey: .uid)
        }
        if decoderContainer.contains(.updatedTime)
        {
            self.updatedTime = try decoderContainer.decode(String?.self, forKey: .updatedTime)
        }
        if decoderContainer.contains(.userPin)
        {
            self.userPin = try decoderContainer.decode(String?.self, forKey: .userPin)
        }
        if decoderContainer.contains(.dataSize)
        {
            self.dataSize = try decoderContainer.decode(String?.self, forKey: .dataSize)
        }
    }
}
public extension TopicListInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TopicListInfoCodingKeys.self)
         try encoderContainer.encode(archived, forKey: .archived)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(deleted, forKey: .deleted)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(lifecycle, forKey: .lifecycle)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(partitionNum, forKey: .partitionNum)
         try encoderContainer.encode(remark, forKey: .remark)
         try encoderContainer.encode(shardNum, forKey: .shardNum)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(topicName, forKey: .topicName)
         try encoderContainer.encode(uid, forKey: .uid)
         try encoderContainer.encode(updatedTime, forKey: .updatedTime)
         try encoderContainer.encode(userPin, forKey: .userPin)
         try encoderContainer.encode(dataSize, forKey: .dataSize)
    }
}
///  target
public class Target:NSObject,Codable{
    /// 需要归档的目的地
    var name:String?
    /// 当达到这个数据量时开始归档
    var recordSize:Int?
    /// 进行归档任务的时间周期
    var cycle:Int?



    public override init(){
            super.init()
    }

    enum TargetCodingKeys: String, CodingKey {
        case name
        case recordSize
        case cycle
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TargetCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.recordSize)
        {
            self.recordSize = try decoderContainer.decode(Int?.self, forKey: .recordSize)
        }
        if decoderContainer.contains(.cycle)
        {
            self.cycle = try decoderContainer.decode(Int?.self, forKey: .cycle)
        }
    }
}
public extension Target{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TargetCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(recordSize, forKey: .recordSize)
         try encoderContainer.encode(cycle, forKey: .cycle)
    }
}
