/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD 流数据总线 API
   提供流数据总线topic操作的相关接口。

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class StreambusJDCloudClient:NSObject,JDCloudClient{
    
    private final var streambusJDCloudClient:StreambusJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        streambusJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "streambus.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        streambusJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "streambus/" + "v1"
    
    public let serviceName: String = "streambus"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func updateTopicAsync(request:UpdateTopicRequest,requestComplation:@escaping ExecuteResult<UpdateTopicResult>) throws {
        streambusJDCloudClient = self
        try UpdateTopicExecutor(jdCloudClient: streambusJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getConsumerGroupListAsync(request:GetConsumerGroupListRequest,requestComplation:@escaping ExecuteResult<GetConsumerGroupListResult>) throws {
        streambusJDCloudClient = self
        try GetConsumerGroupListExecutor(jdCloudClient: streambusJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getTopicListAsync(request:GetTopicListRequest,requestComplation:@escaping ExecuteResult<GetTopicListResult>) throws {
        streambusJDCloudClient = self
        try GetTopicListExecutor(jdCloudClient: streambusJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteConsumerGroupAsync(request:DeleteConsumerGroupRequest,requestComplation:@escaping ExecuteResult<DeleteConsumerGroupResult>) throws {
        streambusJDCloudClient = self
        try DeleteConsumerGroupExecutor(jdCloudClient: streambusJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addTopicAsync(request:AddTopicRequest,requestComplation:@escaping ExecuteResult<AddTopicResult>) throws {
        streambusJDCloudClient = self
        try AddTopicExecutor(jdCloudClient: streambusJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createConsumerGroupAsync(request:CreateConsumerGroupRequest,requestComplation:@escaping ExecuteResult<CreateConsumerGroupResult>) throws {
        streambusJDCloudClient = self
        try CreateConsumerGroupExecutor(jdCloudClient: streambusJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeTopicAsync(request:DescribeTopicRequest,requestComplation:@escaping ExecuteResult<DescribeTopicResult>) throws {
        streambusJDCloudClient = self
        try DescribeTopicExecutor(jdCloudClient: streambusJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteTopicAsync(request:DeleteTopicRequest,requestComplation:@escaping ExecuteResult<DeleteTopicResult>) throws {
        streambusJDCloudClient = self
        try DeleteTopicExecutor(jdCloudClient: streambusJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension StreambusJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "streambus.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
