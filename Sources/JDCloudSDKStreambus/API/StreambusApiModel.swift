/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   TOPIC相关 API
   流数据总线topic相关信息接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  创建consumerGroupName
public class CreateConsumerGroupRequest:JdCloudRequest
{
    /// 消费组对象
    var consumerGroupStr:ConsumerGroup?




    enum CreateConsumerGroupRequestRequestCodingKeys: String, CodingKey {
        case consumerGroupStr
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateConsumerGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(consumerGroupStr, forKey: .consumerGroupStr)

    }
}

public class DeleteConsumerGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteConsumerGroupResult?;

    enum DeleteConsumerGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteConsumerGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteConsumerGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteConsumerGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteConsumerGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateConsumerGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateConsumerGroupResult?;

    enum CreateConsumerGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateConsumerGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateConsumerGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateConsumerGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateConsumerGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetConsumerGroupListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetConsumerGroupListResult?;

    enum GetConsumerGroupListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetConsumerGroupListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetConsumerGroupListResult?.self, forKey: .result) ?? nil
    }
}

public extension GetConsumerGroupListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetConsumerGroupListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看指定主题的所有消费组 
public class GetConsumerGroupListResult:NSObject,JdCloudResult
{
    /// ConsumerGroup
    var consumerGroup:[ConsumerGroup?]?



    public override init(){
        super.init()
    }

    enum GetConsumerGroupListResultCodingKeys: String, CodingKey {
        case consumerGroup
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetConsumerGroupListResultCodingKeys.self)
        if decoderContainer.contains(.consumerGroup)
        {
            self.consumerGroup = try decoderContainer.decode([ConsumerGroup?]?.self, forKey: .consumerGroup)
        }
    }
}
public extension GetConsumerGroupListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetConsumerGroupListResultCodingKeys.self)
        try encoderContainer.encode(consumerGroup, forKey: .consumerGroup)
    }
}

///  查看指定主题的所有消费组
public class GetConsumerGroupListRequest:JdCloudRequest
{
    /// 主题id
    var topicId:Int


    public init(regionId: String,topicId:Int){
        self.topicId = topicId
        super.init(regionId: regionId)
    }


    enum GetConsumerGroupListRequestRequestCodingKeys: String, CodingKey {
        case topicId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetConsumerGroupListRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicId, forKey: .topicId)

    }
}


///  删除consumerGroupName
public class DeleteConsumerGroupRequest:JdCloudRequest
{
    /// 主题ID
    var topicId:Int64

    /// 消费组ID
    var consumerGroupId:Int64


    public init(regionId: String,topicId:Int64,consumerGroupId:Int64){
        self.topicId = topicId
        self.consumerGroupId = consumerGroupId
        super.init(regionId: regionId)
    }


    enum DeleteConsumerGroupRequestRequestCodingKeys: String, CodingKey {
        case topicId
        case consumerGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteConsumerGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicId, forKey: .topicId)
        try encoderContainer.encode(consumerGroupId, forKey: .consumerGroupId)

    }
}

/// 删除consumerGroupName 
public class DeleteConsumerGroupResult:NSObject,JdCloudResult
{
    /// Message
    var message:String?

    /// Status
    var status:Bool?



    public override init(){
        super.init()
    }

    enum DeleteConsumerGroupResultCodingKeys: String, CodingKey {
        case message
        case status
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteConsumerGroupResultCodingKeys.self)
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
    }
}
public extension DeleteConsumerGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteConsumerGroupResultCodingKeys.self)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(status, forKey: .status)
    }
}
/// 创建consumerGroupName 
public class CreateConsumerGroupResult:NSObject,JdCloudResult
{
    /// Message
    var message:String?

    /// Status
    var status:Bool?



    public override init(){
        super.init()
    }

    enum CreateConsumerGroupResultCodingKeys: String, CodingKey {
        case message
        case status
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateConsumerGroupResultCodingKeys.self)
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
    }
}
public extension CreateConsumerGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateConsumerGroupResultCodingKeys.self)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(status, forKey: .status)
    }
}
/// 此接口可以用来更新主题，创建归档，修改归档，删除归档，传入不同的参数可以实现不同的功能。修改归档只需要修改相应归档的参数，删除归档只需要把归档参数置为空即可 
public class UpdateTopicResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// 状态信息
    var message:String?



    public override init(){
        super.init()
    }

    enum UpdateTopicResultCodingKeys: String, CodingKey {
        case status
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateTopicResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension UpdateTopicResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateTopicResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  查询topic列表，返回topic的集合
public class GetTopicListRequest:JdCloudRequest
{
    /// Keyword
    var keyword:String?




    enum GetTopicListRequestRequestCodingKeys: String, CodingKey {
        case keyword
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTopicListRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyword, forKey: .keyword)

    }
}

public class DescribeTopicResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeTopicResult?;

    enum DescribeTopicResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeTopicResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeTopicResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeTopicResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTopicResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询指定主题,如果已归档会返回归档信息 
public class DescribeTopicResult:NSObject,JdCloudResult
{
    /// Topic
    var topic:TopicModel?



    public override init(){
        super.init()
    }

    enum DescribeTopicResultCodingKeys: String, CodingKey {
        case topic
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeTopicResultCodingKeys.self)
        if decoderContainer.contains(.topic)
        {
            self.topic = try decoderContainer.decode(TopicModel?.self, forKey: .topic)
        }
    }
}
public extension DescribeTopicResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTopicResultCodingKeys.self)
        try encoderContainer.encode(topic, forKey: .topic)
    }
}

///  创建topic时，topicModel中只需要传topic参数，另外两个参数可为空
public class AddTopicRequest:JdCloudRequest
{
    /// 示例：{&quot;topicModel&quot;:{&quot;topic&quot;:{&quot;archived&quot;:0,&quot;id&quot;:&quot;&quot;,&quot;name&quot;:&quot;create&quot;,&quot;remark&quot;:&quot;备注&quot;,&quot;shardNum&quot;:1,&quot;partitionNum&quot;:2,&quot;lifecycle&quot;:3}}}
    var topicModel:TopicModel


    public init(regionId: String,topicModel:TopicModel){
        self.topicModel = topicModel
        super.init(regionId: regionId)
    }


    enum AddTopicRequestRequestCodingKeys: String, CodingKey {
        case topicModel
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddTopicRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicModel, forKey: .topicModel)

    }
}

/// 删除topic 
public class DeleteTopicResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// 状态信息
    var message:String?



    public override init(){
        super.init()
    }

    enum DeleteTopicResultCodingKeys: String, CodingKey {
        case status
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteTopicResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DeleteTopicResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteTopicResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  此接口可以用来更新主题，创建归档，修改归档，删除归档，传入不同的参数可以实现不同的功能。修改归档只需要修改相应归档的参数，删除归档只需要把归档参数置为空即可
public class UpdateTopicRequest:JdCloudRequest
{
    /// 当更新主题时只需要修改topicModel中的topic中的属性即可；创建归档需要指定target以及归档的目的地(mysql,京东云 Elasticsearch,对象存储,数据计算服务)参数
    var topicModel:TopicModel


    public init(regionId: String,topicModel:TopicModel){
        self.topicModel = topicModel
        super.init(regionId: regionId)
    }


    enum UpdateTopicRequestRequestCodingKeys: String, CodingKey {
        case topicModel
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateTopicRequestRequestCodingKeys.self)
        try encoderContainer.encode(topicModel, forKey: .topicModel)

    }
}


///  查询指定主题,如果已归档会返回归档信息
public class DescribeTopicRequest:JdCloudRequest
{
    /// Name
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum DescribeTopicRequestRequestCodingKeys: String, CodingKey {
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTopicRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)

    }
}

public class AddTopicResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddTopicResult?;

    enum AddTopicResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddTopicResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddTopicResult?.self, forKey: .result) ?? nil
    }
}

public extension AddTopicResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddTopicResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetTopicListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetTopicListResult?;

    enum GetTopicListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTopicListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetTopicListResult?.self, forKey: .result) ?? nil
    }
}

public extension GetTopicListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTopicListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询topic列表，返回topic的集合 
public class GetTopicListResult:NSObject,JdCloudResult
{
    /// Topic
    var topic:[TopicListInfo?]?



    public override init(){
        super.init()
    }

    enum GetTopicListResultCodingKeys: String, CodingKey {
        case topic
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTopicListResultCodingKeys.self)
        if decoderContainer.contains(.topic)
        {
            self.topic = try decoderContainer.decode([TopicListInfo?]?.self, forKey: .topic)
        }
    }
}
public extension GetTopicListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTopicListResultCodingKeys.self)
        try encoderContainer.encode(topic, forKey: .topic)
    }
}
public class UpdateTopicResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateTopicResult?;

    enum UpdateTopicResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateTopicResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateTopicResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateTopicResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateTopicResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteTopicResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteTopicResult?;

    enum DeleteTopicResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteTopicResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteTopicResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteTopicResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteTopicResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建topic时，topicModel中只需要传topic参数，另外两个参数可为空 
public class AddTopicResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// 状态信息
    var message:String?



    public override init(){
        super.init()
    }

    enum AddTopicResultCodingKeys: String, CodingKey {
        case status
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddTopicResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension AddTopicResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddTopicResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}

///  删除topic
public class DeleteTopicRequest:JdCloudRequest
{
    /// Name
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum DeleteTopicRequestRequestCodingKeys: String, CodingKey {
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteTopicRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)

    }
}

