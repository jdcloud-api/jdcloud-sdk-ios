/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   操作列表
   云解析OpenAPI操作列表接口

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 获取用户所属的主域名列表。   
      ///       /// 请在调用域名相关的接口之前，调用此接口获取相关的domainId和domainName。  
      ///       /// 主域名的相关概念，请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/product-overview&quot;&gt;云解析文档&lt;/a&gt;
      ///       ///  
public class DescribeDomainsResult:NSObject,JdCloudResult
{
    /// 域名列表
    var dataList:[DomainInfo?]?

    /// 当前页的域名列表里域名的个数
    var currentCount:Int?

    /// 所有匹配的域名列表的个数
    var totalCount:Int?

    /// 所有匹配的域名列表按照分页参数一共的页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeDomainsResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDomainsResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([DomainInfo?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeDomainsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainsResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
public class DescribeDomainQueryCountResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDomainQueryCountResult?;

    enum DescribeDomainQueryCountResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDomainQueryCountResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDomainQueryCountResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDomainQueryCountResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainQueryCountResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeDomainQueryTrafficResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDomainQueryTrafficResult?;

    enum DescribeDomainQueryTrafficResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDomainQueryTrafficResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDomainQueryTrafficResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDomainQueryTrafficResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainQueryTrafficResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateDomainResult?;

    enum CreateDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除主域名 
public class DeleteDomainResult:NSObject,JdCloudResult
{
}

///  查看主域名的解析次数
public class DescribeDomainQueryCountRequest:JdCloudRequest
{
    /// 查询的主域名，请使用describeDomains接口获取
    var domainName:String

    /// 查询时间段的起始时间, UTC时间格式，例如2017-11-10T23:00:00Z
    var start:String

    /// 查询时间段的终止时间, UTC时间格式，例如2017-11-10T23:00:00Z
    var end:String

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,domainName:String,start:String,end:String,domainId:String){
        self.domainName = domainName
        self.start = start
        self.end = end
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum DescribeDomainQueryCountRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case start
        case end
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainQueryCountRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(start, forKey: .start)
        try encoderContainer.encode(end, forKey: .end)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 查看域名的查询流量 
public class DescribeDomainQueryTrafficResult:NSObject,JdCloudResult
{
    /// 时间序列
    var time:[Int64?]?

    /// 数据序列的单位
    var unit:String?

    /// 与时间序列对应的数据序列
    var traffic:[Double?]?



    public override init(){
        super.init()
    }

    enum DescribeDomainQueryTrafficResultCodingKeys: String, CodingKey {
        case time
        case unit
        case traffic
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDomainQueryTrafficResultCodingKeys.self)
        if decoderContainer.contains(.time)
        {
            self.time = try decoderContainer.decode([Int64?]?.self, forKey: .time)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
        if decoderContainer.contains(.traffic)
        {
            self.traffic = try decoderContainer.decode([Double?]?.self, forKey: .traffic)
        }
    }
}
public extension DescribeDomainQueryTrafficResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainQueryTrafficResultCodingKeys.self)
        try encoderContainer.encode(time, forKey: .time)
        try encoderContainer.encode(unit, forKey: .unit)
        try encoderContainer.encode(traffic, forKey: .traffic)
    }
}
/// 添加主域名  
      ///       /// 如何添加免费域名，详细情况请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/domainadd&quot;&gt;文档&lt;/a&gt;
      ///       /// 添加收费域名，请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/purchase-process&quot;&gt;文档&lt;/a&gt;，
      ///       /// 添加收费域名前，请确保用户的京东云账户有足够的资金支付，Openapi接口回返回订单号，可以用此订单号向计费系统查阅详情。
      ///       ///  
public class CreateDomainResult:NSObject,JdCloudResult
{
    /// 新添加的的域名结构
    var data:DomainAdded?

    /// 添加收费版域名的订单号
    var order:String?



    public override init(){
        super.init()
    }

    enum CreateDomainResultCodingKeys: String, CodingKey {
        case data
        case order
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDomainResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(DomainAdded?.self, forKey: .data)
        }
        if decoderContainer.contains(.order)
        {
            self.order = try decoderContainer.decode(String?.self, forKey: .order)
        }
    }
}
public extension CreateDomainResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDomainResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(order, forKey: .order)
    }
}
public class ModifyDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyDomainResult?;

    enum ModifyDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加主域名  
      ///       /// 如何添加免费域名，详细情况请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/domainadd&quot;&gt;文档&lt;/a&gt;
      ///       /// 添加收费域名，请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/purchase-process&quot;&gt;文档&lt;/a&gt;，
      ///       /// 添加收费域名前，请确保用户的京东云账户有足够的资金支付，Openapi接口回返回订单号，可以用此订单号向计费系统查阅详情。
      ///       /// 
public class CreateDomainRequest:JdCloudRequest
{
    /// 主域名的套餐类型, 免费:0 企业版:1 企业高级版:2
    var packId:Int

    /// 要添加的主域名
    var domainName:String

    /// 主域名的ID，升级套餐必填，请使用describeDomains获取
    var domainId:Int?

    /// 新购买:1、升级:3，收费套餐的域名必填
    var buyType:Int?

    /// 取值1，2，3 ，含义：时长，收费套餐的域名必填
    var timeSpan:Int?

    /// 时间单位，收费套餐的域名必填，1：小时，2：天，3：月，4：年
    var timeUnit:Int?

    /// 计费类型，可以不传此参数。
    var billingType:Int?


    public init(regionId: String,packId:Int,domainName:String){
        self.packId = packId
        self.domainName = domainName
        super.init(regionId: regionId)
    }


    enum CreateDomainRequestRequestCodingKeys: String, CodingKey {
        case packId
        case domainName
        case domainId
        case buyType
        case timeSpan
        case timeUnit
        case billingType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(packId, forKey: .packId)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(domainId, forKey: .domainId)
        try encoderContainer.encode(buyType, forKey: .buyType)
        try encoderContainer.encode(timeSpan, forKey: .timeSpan)
        try encoderContainer.encode(timeUnit, forKey: .timeUnit)
        try encoderContainer.encode(billingType, forKey: .billingType)

    }
}


///  删除主域名
public class DeleteDomainRequest:JdCloudRequest
{
    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,domainId:String){
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum DeleteDomainRequestRequestCodingKeys: String, CodingKey {
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

public class DeleteDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteDomainResult?;

    enum DeleteDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看主域名的解析次数 
public class DescribeDomainQueryCountResult:NSObject,JdCloudResult
{
    /// 时间序列
    var time:[Int64?]?

    /// 与时间序列对应的数据序列，单位：次数
    var traffic:[Int64?]?



    public override init(){
        super.init()
    }

    enum DescribeDomainQueryCountResultCodingKeys: String, CodingKey {
        case time
        case traffic
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDomainQueryCountResultCodingKeys.self)
        if decoderContainer.contains(.time)
        {
            self.time = try decoderContainer.decode([Int64?]?.self, forKey: .time)
        }
        if decoderContainer.contains(.traffic)
        {
            self.traffic = try decoderContainer.decode([Int64?]?.self, forKey: .traffic)
        }
    }
}
public extension DescribeDomainQueryCountResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainQueryCountResultCodingKeys.self)
        try encoderContainer.encode(time, forKey: .time)
        try encoderContainer.encode(traffic, forKey: .traffic)
    }
}

///  查看域名的查询流量
public class DescribeDomainQueryTrafficRequest:JdCloudRequest
{
    /// 主域名，请使用describeDomains接口获取
    var domainName:String

    /// 时间段的起始时间, UTC时间格式，例如2017-11-10T23:00:00Z
    var start:String

    /// 时间段的终止时间, UTC时间格式，例如2017-11-10T23:00:00Z
    var end:String

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,domainName:String,start:String,end:String,domainId:String){
        self.domainName = domainName
        self.start = start
        self.end = end
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum DescribeDomainQueryTrafficRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case start
        case end
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainQueryTrafficRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(start, forKey: .start)
        try encoderContainer.encode(end, forKey: .end)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 修改主域名 
public class ModifyDomainResult:NSObject,JdCloudResult
{
}
public class DescribeDomainsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDomainsResult?;

    enum DescribeDomainsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDomainsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDomainsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDomainsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改主域名
public class ModifyDomainRequest:JdCloudRequest
{
    /// 需要修改的主域名，请使用describeDomains接口获取
    var domainName:String

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,domainName:String,domainId:String){
        self.domainName = domainName
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum ModifyDomainRequestRequestCodingKeys: String, CodingKey {
        case domainName
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}


///  获取用户所属的主域名列表。   
      ///       /// 请在调用域名相关的接口之前，调用此接口获取相关的domainId和domainName。  
      ///       /// 主域名的相关概念，请查阅&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/jd-cloud-dns/product-overview&quot;&gt;云解析文档&lt;/a&gt;
      ///       /// 
public class DescribeDomainsRequest:JdCloudRequest
{
    /// 分页查询时查询的每页的序号，起始值为1，默认为1
    var pageNumber:Int

    /// 分页查询时设置的每页行数，默认为10
    var pageSize:Int

    /// 关键字，按照”%domainName%”模式匹配主域名
    var domainName:String?

    /// 域名ID。不为0时，只查此domainId的域名
    var domainId:Int?


    public init(regionId: String,pageNumber:Int,pageSize:Int){
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        super.init(regionId: regionId)
    }


    enum DescribeDomainsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case domainName
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDomainsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}


///  添加子域名的监控项，默认把子域名的所有监控项都添加上监控
public class CreateMonitorRequest:JdCloudRequest
{
    /// 子域名
    var subDomainName:String

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,subDomainName:String,domainId:String){
        self.subDomainName = subDomainName
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum CreateMonitorRequestRequestCodingKeys: String, CodingKey {
        case subDomainName
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(subDomainName, forKey: .subDomainName)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 添加子域名的监控项，默认把子域名的所有监控项都添加上监控 
public class CreateMonitorResult:NSObject,JdCloudResult
{
}
public class DescribeMonitorTargetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMonitorTargetResult?;

    enum DescribeMonitorTargetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMonitorTargetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMonitorTargetResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMonitorTargetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMonitorTargetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 监控项的删除 
public class DeleteMonitorResult:NSObject,JdCloudResult
{
}

///  域名的监控项修改
public class ModifyMonitorRequest:JdCloudRequest
{
    /// 监控项设置信息
    var updateMonitor:UpdateMonitor

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,updateMonitor:UpdateMonitor,domainId:String){
        self.updateMonitor = updateMonitor
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum ModifyMonitorRequestRequestCodingKeys: String, CodingKey {
        case updateMonitor
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(updateMonitor, forKey: .updateMonitor)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 监控项的操作集合，包括：暂停，启动, 手动恢复, 手动切换 
public class ModifyMonitorStatusResult:NSObject,JdCloudResult
{
}

///  添加子域名的某些特定监控对象为监控项
public class CreateMonitorTargetRequest:JdCloudRequest
{
    /// 子域名
    var subDomainName:String

    /// 子域名可用监控对象的数组
    var targets:[String?]?

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,subDomainName:String,domainId:String){
        self.subDomainName = subDomainName
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum CreateMonitorTargetRequestRequestCodingKeys: String, CodingKey {
        case subDomainName
        case targets
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateMonitorTargetRequestRequestCodingKeys.self)
        try encoderContainer.encode(subDomainName, forKey: .subDomainName)
        try encoderContainer.encode(targets, forKey: .targets)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 查看主域名的监控项的配置以及状态 
public class DescribeMonitorResult:NSObject,JdCloudResult
{
    /// 当前页面网站监控项的个数
    var currentCount:Int?

    /// 所有网站监控项的个数
    var totalCount:Int?

    /// 所有网站监控项的页数
    var totalPage:Int?

    /// 当前页面的网站监控项的列表
    var dataList:[Monitor?]?



    public override init(){
        super.init()
    }

    enum DescribeMonitorResultCodingKeys: String, CodingKey {
        case currentCount
        case totalCount
        case totalPage
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMonitorResultCodingKeys.self)
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([Monitor?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeMonitorResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMonitorResultCodingKeys.self)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class CreateMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateMonitorResult?;

    enum CreateMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  监控项的删除
public class DeleteMonitorRequest:JdCloudRequest
{
    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String

    /// 监控项ID，请使用describeMonitor接口获取。
    var monitorId:String


    public init(regionId: String,domainId:String,monitorId:String){
        self.domainId = domainId
        self.monitorId = monitorId
        super.init(regionId: regionId)
    }


    enum DeleteMonitorRequestRequestCodingKeys: String, CodingKey {
        case domainId
        case monitorId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainId, forKey: .domainId)
        try encoderContainer.encode(monitorId, forKey: .monitorId)

    }
}


///  主域名的监控项的报警信息
public class DescribeMonitorAlarmRequest:JdCloudRequest
{
    /// 当前页数，起始值为1，默认为1
    var pageIndex:Int?

    /// 分页查询时设置的每页行数
    var pageSize:Int?

    /// 关键字
    var searchValue:String?

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,domainId:String){
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum DescribeMonitorAlarmRequestRequestCodingKeys: String, CodingKey {
        case pageIndex
        case pageSize
        case searchValue
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMonitorAlarmRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageIndex, forKey: .pageIndex)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(searchValue, forKey: .searchValue)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

public class DescribeMonitorAlarmResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMonitorAlarmResult?;

    enum DescribeMonitorAlarmResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMonitorAlarmResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMonitorAlarmResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMonitorAlarmResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMonitorAlarmResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteMonitorResult?;

    enum DeleteMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询子域名的可用监控对象
public class DescribeMonitorTargetRequest:JdCloudRequest
{
    /// 子域名
    var subDomainName:String

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,subDomainName:String,domainId:String){
        self.subDomainName = subDomainName
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum DescribeMonitorTargetRequestRequestCodingKeys: String, CodingKey {
        case subDomainName
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMonitorTargetRequestRequestCodingKeys.self)
        try encoderContainer.encode(subDomainName, forKey: .subDomainName)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}


///  监控项的操作集合，包括：暂停，启动, 手动恢复, 手动切换
public class ModifyMonitorStatusRequest:JdCloudRequest
{
    /// 暂停stop, 开启start, 手动恢复recover，手动切换switch，手动恢复和手动切换时候不支持批量操作
    var action:String

    /// 监控项的主机值, 手动切换时必填
    var switchTarget:String?

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String

    /// 监控项ID，请使用describeMonitor接口获取。
    var monitorId:String


    public init(regionId: String,action:String,domainId:String,monitorId:String){
        self.action = action
        self.domainId = domainId
        self.monitorId = monitorId
        super.init(regionId: regionId)
    }


    enum ModifyMonitorStatusRequestRequestCodingKeys: String, CodingKey {
        case action
        case switchTarget
        case domainId
        case monitorId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyMonitorStatusRequestRequestCodingKeys.self)
        try encoderContainer.encode(action, forKey: .action)
        try encoderContainer.encode(switchTarget, forKey: .switchTarget)
        try encoderContainer.encode(domainId, forKey: .domainId)
        try encoderContainer.encode(monitorId, forKey: .monitorId)

    }
}

/// 域名的监控项修改 
public class ModifyMonitorResult:NSObject,JdCloudResult
{
}
public class CreateMonitorTargetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateMonitorTargetResult?;

    enum CreateMonitorTargetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateMonitorTargetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateMonitorTargetResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateMonitorTargetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateMonitorTargetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查看主域名的监控项的配置以及状态
public class DescribeMonitorRequest:JdCloudRequest
{
    /// 当前页数，起始值为1，默认为1
    var pageIndex:Int?

    /// 分页查询时设置的每页行数
    var pageSize:Int?

    /// 查询的值
    var searchValue:String?

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,domainId:String){
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum DescribeMonitorRequestRequestCodingKeys: String, CodingKey {
        case pageIndex
        case pageSize
        case searchValue
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMonitorRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageIndex, forKey: .pageIndex)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(searchValue, forKey: .searchValue)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 主域名的监控项的报警信息 
public class DescribeMonitorAlarmResult:NSObject,JdCloudResult
{
    /// 当前页面报警信息的个数
    var currentCount:Int?

    /// 所有报警信息的个数
    var totalCount:Int?

    /// 所有报警信息的页数
    var totalPage:Int?

    /// 当前页面的报警信息的数组
    var dataList:[MonitorAlarmInfo?]?



    public override init(){
        super.init()
    }

    enum DescribeMonitorAlarmResultCodingKeys: String, CodingKey {
        case currentCount
        case totalCount
        case totalPage
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMonitorAlarmResultCodingKeys.self)
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([MonitorAlarmInfo?]?.self, forKey: .dataList)
        }
    }
}
public extension DescribeMonitorAlarmResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMonitorAlarmResultCodingKeys.self)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}
public class DescribeMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMonitorResult?;

    enum DescribeMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询子域名的可用监控对象 
public class DescribeMonitorTargetResult:NSObject,JdCloudResult
{
    /// 返回的可用监控对象的数组
    var data:[String?]?



    public override init(){
        super.init()
    }

    enum DescribeMonitorTargetResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMonitorTargetResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([String?]?.self, forKey: .data)
        }
    }
}
public extension DescribeMonitorTargetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMonitorTargetResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class ModifyMonitorResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyMonitorResult?;

    enum ModifyMonitorResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyMonitorResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyMonitorResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyMonitorResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyMonitorResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyMonitorStatusResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyMonitorStatusResult?;

    enum ModifyMonitorStatusResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyMonitorStatusResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyMonitorStatusResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyMonitorStatusResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyMonitorStatusResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加子域名的某些特定监控对象为监控项 
public class CreateMonitorTargetResult:NSObject,JdCloudResult
{
}
/// 添加主域名的解析记录 
public class CreateResourceRecordResult:NSObject,JdCloudResult
{
    /// 添加成功后的解析记录结果
    var dataList:RR?



    public override init(){
        super.init()
    }

    enum CreateResourceRecordResultCodingKeys: String, CodingKey {
        case dataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateResourceRecordResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode(RR?.self, forKey: .dataList)
        }
    }
}
public extension CreateResourceRecordResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateResourceRecordResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
    }
}

///  同一个主域名下，批量新增或者批量更新导入解析记录。
      ///       /// 如果解析记录的ID为0，是新增解析记录，如果不为0，则是更新解析记录。
      ///       /// 
public class BatchSetResourceRecordsRequest:JdCloudRequest
{
    /// 需要设置的解析记录列表
    var req:[BatchSetDNS?]?

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,req:[BatchSetDNS?]?,domainId:String){
        self.req = req
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum BatchSetResourceRecordsRequestRequestCodingKeys: String, CodingKey {
        case req
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchSetResourceRecordsRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}


///  查询主域名的解析记录。  
      ///       /// 在使用解析记录相关的接口之前，请调用此接口获取解析记录的列表。
      ///       /// 
public class DescribeResourceRecordRequest:JdCloudRequest
{
    /// 当前页数，起始值为1，默认为1
    var pageNumber:Int?

    /// 分页查询时设置的每页行数, 默认为10
    var pageSize:Int?

    /// 关键字，按照”%search%”模式匹配解析记录的主机记录
    var search:String?

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,domainId:String){
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum DescribeResourceRecordRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case search
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeResourceRecordRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(search, forKey: .search)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}


///  添加主域名的解析记录
public class CreateResourceRecordRequest:JdCloudRequest
{
    /// RR参数
    var req:AddRR

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,req:AddRR,domainId:String){
        self.req = req
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum CreateResourceRecordRequestRequestCodingKeys: String, CodingKey {
        case req
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateResourceRecordRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 启用、停用主域名下的解析记录 
public class ModifyResourceRecordStatusResult:NSObject,JdCloudResult
{
}
/// 删除主域名下的解析记录 
public class DeleteResourceRecordResult:NSObject,JdCloudResult
{
}
public class BatchSetResourceRecordsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:BatchSetResourceRecordsResult?;

    enum BatchSetResourceRecordsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BatchSetResourceRecordsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(BatchSetResourceRecordsResult?.self, forKey: .result) ?? nil
    }
}

public extension BatchSetResourceRecordsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchSetResourceRecordsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  启用、停用主域名下的解析记录
public class ModifyResourceRecordStatusRequest:JdCloudRequest
{
    /// 要修改的状态，enable:启用 disable:停用
    var action:String

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String

    /// 解析记录ID，请使用describeResourceRecord接口获取。
    var resourceRecordId:String


    public init(regionId: String,action:String,domainId:String,resourceRecordId:String){
        self.action = action
        self.domainId = domainId
        self.resourceRecordId = resourceRecordId
        super.init(regionId: regionId)
    }


    enum ModifyResourceRecordStatusRequestRequestCodingKeys: String, CodingKey {
        case action
        case domainId
        case resourceRecordId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyResourceRecordStatusRequestRequestCodingKeys.self)
        try encoderContainer.encode(action, forKey: .action)
        try encoderContainer.encode(domainId, forKey: .domainId)
        try encoderContainer.encode(resourceRecordId, forKey: .resourceRecordId)

    }
}

public class CreateResourceRecordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateResourceRecordResult?;

    enum CreateResourceRecordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateResourceRecordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateResourceRecordResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateResourceRecordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateResourceRecordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改主域名的某个解析记录
public class ModifyResourceRecordRequest:JdCloudRequest
{
    /// updateRR参数
    var req:UpdateRR

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String

    /// 解析记录ID，请使用describeResourceRecord接口获取。
    var resourceRecordId:String


    public init(regionId: String,req:UpdateRR,domainId:String,resourceRecordId:String){
        self.req = req
        self.domainId = domainId
        self.resourceRecordId = resourceRecordId
        super.init(regionId: regionId)
    }


    enum ModifyResourceRecordRequestRequestCodingKeys: String, CodingKey {
        case req
        case domainId
        case resourceRecordId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyResourceRecordRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)
        try encoderContainer.encode(domainId, forKey: .domainId)
        try encoderContainer.encode(resourceRecordId, forKey: .resourceRecordId)

    }
}

public class DescribeViewTreeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeViewTreeResult?;

    enum DescribeViewTreeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeViewTreeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeViewTreeResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeViewTreeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeViewTreeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询云解析所有的基础解析线路。  
      ///       /// 在使用解析线路的参数之前，请调用此接口获取解析线路的ID。
      ///       ///  
public class DescribeViewTreeResult:NSObject,JdCloudResult
{
    /// 解析线路的树
    var data:[ViewTree?]?



    public override init(){
        super.init()
    }

    enum DescribeViewTreeResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeViewTreeResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([ViewTree?]?.self, forKey: .data)
        }
    }
}
public extension DescribeViewTreeResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeViewTreeResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 同一个主域名下，批量新增或者批量更新导入解析记录。
      ///       /// 如果解析记录的ID为0，是新增解析记录，如果不为0，则是更新解析记录。
      ///       ///  
public class BatchSetResourceRecordsResult:NSObject,JdCloudResult
{
    /// 对应每条设置的解析列表的结果
    var data:[String?]?



    public override init(){
        super.init()
    }

    enum BatchSetResourceRecordsResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BatchSetResourceRecordsResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([String?]?.self, forKey: .data)
        }
    }
}
public extension BatchSetResourceRecordsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchSetResourceRecordsResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 查询主域名的解析记录。  
      ///       /// 在使用解析记录相关的接口之前，请调用此接口获取解析记录的列表。
      ///       ///  
public class DescribeResourceRecordResult:NSObject,JdCloudResult
{
    /// 解析记录列表
    var dataList:[RRInfo?]?

    /// 所有解析记录的个数
    var totalCount:Int?

    /// 所有解析记录的页数
    var totalPage:Int?

    /// 当前页解析记录的个数
    var currentCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeResourceRecordResultCodingKeys: String, CodingKey {
        case dataList
        case totalCount
        case totalPage
        case currentCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeResourceRecordResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([RRInfo?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
    }
}
public extension DescribeResourceRecordResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeResourceRecordResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
    }
}
/// 修改主域名的某个解析记录 
public class ModifyResourceRecordResult:NSObject,JdCloudResult
{
}
public class ModifyResourceRecordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyResourceRecordResult?;

    enum ModifyResourceRecordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyResourceRecordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyResourceRecordResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyResourceRecordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyResourceRecordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteResourceRecordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteResourceRecordResult?;

    enum DeleteResourceRecordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteResourceRecordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteResourceRecordResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteResourceRecordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteResourceRecordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询云解析所有的基础解析线路。  
      ///       /// 在使用解析线路的参数之前，请调用此接口获取解析线路的ID。
      ///       /// 
public class DescribeViewTreeRequest:JdCloudRequest
{
    /// 展示方式，暂时不使用
    var loadMode:Int?

    /// 套餐ID，0-&gt;免费版 1-&gt;企业版 2-&gt;企业高级版
    var packId:Int

    /// view ID，默认为-1
    var viewId:Int

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,packId:Int,viewId:Int,domainId:String){
        self.packId = packId
        self.viewId = viewId
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum DescribeViewTreeRequestRequestCodingKeys: String, CodingKey {
        case loadMode
        case packId
        case viewId
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeViewTreeRequestRequestCodingKeys.self)
        try encoderContainer.encode(loadMode, forKey: .loadMode)
        try encoderContainer.encode(packId, forKey: .packId)
        try encoderContainer.encode(viewId, forKey: .viewId)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

public class DescribeResourceRecordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeResourceRecordResult?;

    enum DescribeResourceRecordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeResourceRecordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeResourceRecordResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeResourceRecordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeResourceRecordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除主域名下的解析记录
public class DeleteResourceRecordRequest:JdCloudRequest
{
    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String

    /// 解析记录ID，请使用describeResourceRecord接口获取。
    var resourceRecordId:String


    public init(regionId: String,domainId:String,resourceRecordId:String){
        self.domainId = domainId
        self.resourceRecordId = resourceRecordId
        super.init(regionId: regionId)
    }


    enum DeleteResourceRecordRequestRequestCodingKeys: String, CodingKey {
        case domainId
        case resourceRecordId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteResourceRecordRequestRequestCodingKeys.self)
        try encoderContainer.encode(domainId, forKey: .domainId)
        try encoderContainer.encode(resourceRecordId, forKey: .resourceRecordId)

    }
}

public class ModifyResourceRecordStatusResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyResourceRecordStatusResult?;

    enum ModifyResourceRecordStatusResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyResourceRecordStatusResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyResourceRecordStatusResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyResourceRecordStatusResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyResourceRecordStatusResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询主域名的自定义解析线路的IP段 
public class DescribeUserViewIPResult:NSObject,JdCloudResult
{
    /// 自定义线路包含的IP段列表
    var dataList:[String?]?

    /// 当前页的IP列表里的个数
    var currentCount:Int?

    /// IP列表里的IP段的个数
    var totalCount:Int?

    /// IP列表按照分页参数一共的页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeUserViewIPResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUserViewIPResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([String?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeUserViewIPResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUserViewIPResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
/// 查询主域名的自定义解析线路 
public class DescribeUserViewResult:NSObject,JdCloudResult
{
    /// 自定义线路列表
    var dataList:[UserViewInput?]?

    /// 当前页的自定义线路列表里的个数
    var currentCount:Int?

    /// 所有自定义线路列表的个数
    var totalCount:Int?

    /// 所有自定义线路列表按照分页参数一共的页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeUserViewResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUserViewResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([UserViewInput?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeUserViewResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUserViewResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}

///  删除主域名的自定义解析线路的IP段
public class DeleteUserViewIPRequest:JdCloudRequest
{
    /// 删除域名的自定义解析线路的IP段的参数
    var req:DelViewIP

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,req:DelViewIP,domainId:String){
        self.req = req
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum DeleteUserViewIPRequestRequestCodingKeys: String, CodingKey {
        case req
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteUserViewIPRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

public class CreateUserViewResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateUserViewResult?;

    enum CreateUserViewResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateUserViewResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateUserViewResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateUserViewResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateUserViewResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加主域名的自定义解析线路的IP段
public class CreateUserViewIPRequest:JdCloudRequest
{
    /// 添加域名的自定义解析线路的IP段的参数
    var req:AddViewIP

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,req:AddViewIP,domainId:String){
        self.req = req
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum CreateUserViewIPRequestRequestCodingKeys: String, CodingKey {
        case req
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateUserViewIPRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

public class DescribeUserViewResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeUserViewResult?;

    enum DescribeUserViewResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUserViewResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeUserViewResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeUserViewResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUserViewResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除主域名的自定义解析线路 
public class DeleteUserViewResult:NSObject,JdCloudResult
{
}
public class DescribeUserViewIPResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeUserViewIPResult?;

    enum DescribeUserViewIPResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeUserViewIPResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeUserViewIPResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeUserViewIPResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUserViewIPResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除主域名的自定义解析线路的IP段 
public class DeleteUserViewIPResult:NSObject,JdCloudResult
{
}
public class DeleteUserViewIPResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteUserViewIPResult?;

    enum DeleteUserViewIPResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteUserViewIPResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteUserViewIPResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteUserViewIPResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteUserViewIPResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加主域名的自定义解析线路
public class CreateUserViewRequest:JdCloudRequest
{
    /// 添加自定义线路的参数
    var req:AddView

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,req:AddView,domainId:String){
        self.req = req
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum CreateUserViewRequestRequestCodingKeys: String, CodingKey {
        case req
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateUserViewRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}


///  删除主域名的自定义解析线路
public class DeleteUserViewRequest:JdCloudRequest
{
    /// 删除自定义线路的参数
    var req:DelView

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,req:DelView,domainId:String){
        self.req = req
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum DeleteUserViewRequestRequestCodingKeys: String, CodingKey {
        case req
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteUserViewRequestRequestCodingKeys.self)
        try encoderContainer.encode(req, forKey: .req)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}


///  查询主域名的自定义解析线路的IP段
public class DescribeUserViewIPRequest:JdCloudRequest
{
    /// 自定义线路ID
    var viewId:Int

    /// 自定义线路名称, 最多64个字节，允许：数字、字母、下划线，-，中文
    var viewName:String?

    /// 分页参数，页的序号, 默认为1
    var pageNumber:Int

    /// 分页参数，每页含有的结果的数目，默认为10
    var pageSize:Int

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,viewId:Int,pageNumber:Int,pageSize:Int,domainId:String){
        self.viewId = viewId
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum DescribeUserViewIPRequestRequestCodingKeys: String, CodingKey {
        case viewId
        case viewName
        case pageNumber
        case pageSize
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUserViewIPRequestRequestCodingKeys.self)
        try encoderContainer.encode(viewId, forKey: .viewId)
        try encoderContainer.encode(viewName, forKey: .viewName)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}

/// 添加主域名的自定义解析线路的IP段 
public class CreateUserViewIPResult:NSObject,JdCloudResult
{
}
/// 添加主域名的自定义解析线路 
public class CreateUserViewResult:NSObject,JdCloudResult
{
    /// 添加成功后返回的自定义线路的结构
    var data:Userview?



    public override init(){
        super.init()
    }

    enum CreateUserViewResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateUserViewResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Userview?.self, forKey: .data)
        }
    }
}
public extension CreateUserViewResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateUserViewResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class DeleteUserViewResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteUserViewResult?;

    enum DeleteUserViewResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteUserViewResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteUserViewResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteUserViewResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteUserViewResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateUserViewIPResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateUserViewIPResult?;

    enum CreateUserViewIPResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateUserViewIPResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateUserViewIPResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateUserViewIPResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateUserViewIPResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询主域名的自定义解析线路
public class DescribeUserViewRequest:JdCloudRequest
{
    /// 自定义线路ID
    var viewId:Int

    /// 自定义线路名称, 最多64个字节，允许：数字、字母、下划线，-，中文
    var viewName:String?

    /// 分页参数，页的序号
    var pageNumber:Int

    /// 分页参数，每页含有的结果的数目
    var pageSize:Int

    /// 域名ID，请使用describeDomains接口获取。
    var domainId:String


    public init(regionId: String,viewId:Int,pageNumber:Int,pageSize:Int,domainId:String){
        self.viewId = viewId
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.domainId = domainId
        super.init(regionId: regionId)
    }


    enum DescribeUserViewRequestRequestCodingKeys: String, CodingKey {
        case viewId
        case viewName
        case pageNumber
        case pageSize
        case domainId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeUserViewRequestRequestCodingKeys.self)
        try encoderContainer.encode(viewId, forKey: .viewId)
        try encoderContainer.encode(viewName, forKey: .viewName)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(domainId, forKey: .domainId)

    }
}


///  查看用户在云解析服务下的操作记录
public class DescribeActionLogRequest:JdCloudRequest
{
    /// 分页参数，页的序号，默认是1
    var pageNumber:Int

    /// 分页参数，每页含有的结果的数目，默认是10
    var pageSize:Int

    /// 记录的起始时间，格式：UTC时间例如2017-11-10T23:00:00Z
    var startTime:String

    /// 记录的终止时间，格式：UTC时间例如2017-11-10T23:00:00Z
    var endTime:String

    /// 日志需要匹配的关键词
    var keyWord:String?

    /// 日志里面的结果是成功还是失败
    var success:Bool?

    /// 日志的类型
    var type:Int?


    public init(regionId: String,pageNumber:Int,pageSize:Int,startTime:String,endTime:String){
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.startTime = startTime
        self.endTime = endTime
        super.init(regionId: regionId)
    }


    enum DescribeActionLogRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case keyWord
        case success
        case type
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeActionLogRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(keyWord, forKey: .keyWord)
        try encoderContainer.encode(success, forKey: .success)
        try encoderContainer.encode(type, forKey: .type)

    }
}

/// 查看用户在云解析服务下的操作记录 
public class DescribeActionLogResult:NSObject,JdCloudResult
{
    /// 操作记录列表
    var dataList:[Actionlog?]?

    /// 当前页的操作记录列表里的个数
    var currentCount:Int?

    /// 所有操作记录的个数
    var totalCount:Int?

    /// 操作记录列表按照分页参数一共的页数
    var totalPage:Int?



    public override init(){
        super.init()
    }

    enum DescribeActionLogResultCodingKeys: String, CodingKey {
        case dataList
        case currentCount
        case totalCount
        case totalPage
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeActionLogResultCodingKeys.self)
        if decoderContainer.contains(.dataList)
        {
            self.dataList = try decoderContainer.decode([Actionlog?]?.self, forKey: .dataList)
        }
        if decoderContainer.contains(.currentCount)
        {
            self.currentCount = try decoderContainer.decode(Int?.self, forKey: .currentCount)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.totalPage)
        {
            self.totalPage = try decoderContainer.decode(Int?.self, forKey: .totalPage)
        }
    }
}
public extension DescribeActionLogResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeActionLogResultCodingKeys.self)
        try encoderContainer.encode(dataList, forKey: .dataList)
        try encoderContainer.encode(currentCount, forKey: .currentCount)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(totalPage, forKey: .totalPage)
    }
}
public class DescribeActionLogResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeActionLogResult?;

    enum DescribeActionLogResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeActionLogResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeActionLogResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeActionLogResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeActionLogResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
