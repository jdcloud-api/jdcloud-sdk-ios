/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   参数组管理
   参数组管理相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon


///  获取整个备份或备份中单个文件的下载链接。&lt;br&gt;- 当输入参数中有文件名时，获取该文件的下载链接。&lt;br&gt;- 输入参数中无文件名时，获取整个备份的下载链接。&lt;br&gt;由于备份机制的差异，使用该接口下载备份时，SQL Server必须输入文件名，每个文件逐一下载，不支持下载整个备份。SQL Server备份中的文件名（不包括后缀）即为备份的数据库名。例如文件名为my_test_db.bak，表示该文件是my_test_db数据库的备份。&lt;br&gt;MySQL可下载整个备份集，但不支持单个文件的下载。
public class DescribeBackupDownloadURLRequest:JdCloudRequest
{
    /// 文件名称&lt;br&gt;- MySQL：不支持该参数&lt;br&gt;- SQL Server：必须输入该参数，指定该备份中需要获取下载链接的文件名称。备份中的文件名（不包括后缀）即为备份的数据库名。例如文件名为my_test_db.bak，表示该文件是my_test_db数据库的备份
    var fileName:String?

    /// 指定下载链接的过期时间，单位秒, 取值范围为 1 ~ 86400 秒；支持 SQL Server：缺省为 86400 秒。支持 MySQL, Percona, MariaDB：缺省为 300 秒。
    var urlExpirationSecond:String?

    /// 备份ID
    var backupId:String


    public init(regionId: String,backupId:String){
        self.backupId = backupId
        super.init(regionId: regionId)
    }


    enum DescribeBackupDownloadURLRequestRequestCodingKeys: String, CodingKey {
        case fileName
        case urlExpirationSecond
        case backupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupDownloadURLRequestRequestCodingKeys.self)
        try encoderContainer.encode(fileName, forKey: .fileName)
        try encoderContainer.encode(urlExpirationSecond, forKey: .urlExpirationSecond)
        try encoderContainer.encode(backupId, forKey: .backupId)

    }
}

/// 查看该RDS实例下所有备份的详细信息，返回的备份列表按照备份开始时间（backupStartTime）降序排列。 
public class DescribeBackupsResult:NSObject,JdCloudResult
{
    /// 备份集合
    var backup:[Backup?]?

    /// 总记录数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeBackupsResultCodingKeys: String, CodingKey {
        case backup
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupsResultCodingKeys.self)
        if decoderContainer.contains(.backup)
        {
            self.backup = try decoderContainer.decode([Backup?]?.self, forKey: .backup)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeBackupsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupsResultCodingKeys.self)
        try encoderContainer.encode(backup, forKey: .backup)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DeleteBackupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteBackupResult?;

    enum DeleteBackupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteBackupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteBackupResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteBackupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBackupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除RDS实例备份，仅允许删除用户生成的备份，系统自动备份不允许删除。 
public class DeleteBackupResult:NSObject,JdCloudResult
{
}
/// 获取整个备份或备份中单个文件的下载链接。&lt;br&gt;- 当输入参数中有文件名时，获取该文件的下载链接。&lt;br&gt;- 输入参数中无文件名时，获取整个备份的下载链接。&lt;br&gt;由于备份机制的差异，使用该接口下载备份时，SQL Server必须输入文件名，每个文件逐一下载，不支持下载整个备份。SQL Server备份中的文件名（不包括后缀）即为备份的数据库名。例如文件名为my_test_db.bak，表示该文件是my_test_db数据库的备份。&lt;br&gt;MySQL可下载整个备份集，但不支持单个文件的下载。 
public class DescribeBackupDownloadURLResult:NSObject,JdCloudResult
{
    /// 公网下载链接，若当前不可下载，则为空串
    var publicURL:String?

    /// 内网下载链接，若当前不可下载，则为空串
    var internalURL:String?



    public override init(){
        super.init()
    }

    enum DescribeBackupDownloadURLResultCodingKeys: String, CodingKey {
        case publicURL
        case internalURL
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupDownloadURLResultCodingKeys.self)
        if decoderContainer.contains(.publicURL)
        {
            self.publicURL = try decoderContainer.decode(String?.self, forKey: .publicURL)
        }
        if decoderContainer.contains(.internalURL)
        {
            self.internalURL = try decoderContainer.decode(String?.self, forKey: .internalURL)
        }
    }
}
public extension DescribeBackupDownloadURLResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupDownloadURLResultCodingKeys.self)
        try encoderContainer.encode(publicURL, forKey: .publicURL)
        try encoderContainer.encode(internalURL, forKey: .internalURL)
    }
}

///  查看该RDS实例下所有备份的详细信息，返回的备份列表按照备份开始时间（backupStartTime）降序排列。
public class DescribeBackupsRequest:JdCloudRequest
{
    /// RDS实例ID，唯一标识一个实例
    var instanceId:String

    /// 查询备份类型，0为手动备份，1为自动备份，不传表示全部. &lt;br&gt;**- 测试参数，仅支持SQL Server，后续可能被其他参数取代**
    var auto:Int?

    /// 返回backupType等于指定值的备份列表。full为全量备份，diff为增量备份&lt;br&gt;**- 测试参数，仅支持SQL Server，后续可能被其他参数取代**
    var backupTypeFilter:String?

    /// 返回dbName等于指定值的备份列表，不传或为空返回全部&lt;br&gt;**- 测试参数，仅支持SQL Server，后续可能被其他参数取代**
    var dbNameFilter:String?

    /// 返回备份开始时间大于该时间的备份列表&lt;br&gt;**- 测试参数，仅支持SQL Server，后续可能被其他参数取代**
    var backupTimeRangeStartFilter:String?

    /// 返回备份开始时间小于等于该时间的备份列表&lt;br&gt;**- 测试参数，仅支持SQL Server，后续可能被其他参数取代**
    var backupTimeRangeEndFilter:String?

    /// 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。
    var pageNumber:Int

    /// 每页显示的数据条数，默认为10，取值范围：10、20、30、50、100
    var pageSize:Int


    public init(regionId: String,instanceId:String,pageNumber:Int,pageSize:Int){
        self.instanceId = instanceId
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        super.init(regionId: regionId)
    }


    enum DescribeBackupsRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case auto
        case backupTypeFilter
        case dbNameFilter
        case backupTimeRangeStartFilter
        case backupTimeRangeEndFilter
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupsRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(auto, forKey: .auto)
        try encoderContainer.encode(backupTypeFilter, forKey: .backupTypeFilter)
        try encoderContainer.encode(dbNameFilter, forKey: .dbNameFilter)
        try encoderContainer.encode(backupTimeRangeStartFilter, forKey: .backupTimeRangeStartFilter)
        try encoderContainer.encode(backupTimeRangeEndFilter, forKey: .backupTimeRangeEndFilter)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

/// 创建一个RDS实例全量备份，可以对整个实例或者部分数据库（仅SQL Server支持）进行全量备份。同一时间点，只能有一个正在运行的备份任务 
public class CreateBackupResult:NSObject,JdCloudResult
{
    /// 备份Id
    var backupId:String?



    public override init(){
        super.init()
    }

    enum CreateBackupResultCodingKeys: String, CodingKey {
        case backupId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBackupResultCodingKeys.self)
        if decoderContainer.contains(.backupId)
        {
            self.backupId = try decoderContainer.decode(String?.self, forKey: .backupId)
        }
    }
}
public extension CreateBackupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackupResultCodingKeys.self)
        try encoderContainer.encode(backupId, forKey: .backupId)
    }
}
public class DescribeBackupsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBackupsResult?;

    enum DescribeBackupsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBackupsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBackupsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateBackupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateBackupResult?;

    enum CreateBackupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBackupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateBackupResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateBackupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeBackupDownloadURLResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBackupDownloadURLResult?;

    enum DescribeBackupDownloadURLResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupDownloadURLResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBackupDownloadURLResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBackupDownloadURLResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupDownloadURLResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除RDS实例备份，仅允许删除用户生成的备份，系统自动备份不允许删除。
public class DeleteBackupRequest:JdCloudRequest
{
    /// 备份ID
    var backupId:String


    public init(regionId: String,backupId:String){
        self.backupId = backupId
        super.init(regionId: regionId)
    }


    enum DeleteBackupRequestRequestCodingKeys: String, CodingKey {
        case backupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBackupRequestRequestCodingKeys.self)
        try encoderContainer.encode(backupId, forKey: .backupId)

    }
}


///  创建一个RDS实例全量备份，可以对整个实例或者部分数据库（仅SQL Server支持）进行全量备份。同一时间点，只能有一个正在运行的备份任务
public class CreateBackupRequest:JdCloudRequest
{
    /// RDS实例ID，唯一标识一个实例
    var instanceId:String?

    /// 备份规格
    var backupSpec:BackupSpec?




    enum CreateBackupRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case backupSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackupRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(backupSpec, forKey: .backupSpec)

    }
}

public class DescribeErrorLogsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeErrorLogsResult?;

    enum DescribeErrorLogsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeErrorLogsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeErrorLogsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeErrorLogsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeErrorLogsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取SQL Server 错误日志及下载信息&lt;br&gt;- 仅支持SQL Server 
public class DescribeErrorLogsResult:NSObject,JdCloudResult
{
    /// 错误日志文件的集合
    var errorLogs:[ErrorLog?]?



    public override init(){
        super.init()
    }

    enum DescribeErrorLogsResultCodingKeys: String, CodingKey {
        case errorLogs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeErrorLogsResultCodingKeys.self)
        if decoderContainer.contains(.errorLogs)
        {
            self.errorLogs = try decoderContainer.decode([ErrorLog?]?.self, forKey: .errorLogs)
        }
    }
}
public extension DescribeErrorLogsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeErrorLogsResultCodingKeys.self)
        try encoderContainer.encode(errorLogs, forKey: .errorLogs)
    }
}

///  获取SQL Server 错误日志及下载信息&lt;br&gt;- 仅支持SQL Server
public class DescribeErrorLogsRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeErrorLogsRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeErrorLogsRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查看开启高安全模式后，当前实例的 SQL 拦截记录&lt;br&gt;- 仅支持MySQL
public class DescribeInterceptResultRequest:JdCloudRequest
{
    /// 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页;
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为10，取值范围：[10,100]，且为10的整数倍
    var pageSize:Int?

    /// Instance ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInterceptResultRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInterceptResultRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 关闭数据库的高安全模式&lt;br&gt;- 仅支持MySQL 
public class DisableInterceptResult:NSObject,JdCloudResult
{
}
/// 查看开启高安全模式后，当前实例的 SQL 拦截记录&lt;br&gt;- 仅支持MySQL 
public class DescribeInterceptResultResult:NSObject,JdCloudResult
{
    /// InterceptResult
    var interceptResult:[InterceptResult?]?

    /// TotalCount
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeInterceptResultResultCodingKeys: String, CodingKey {
        case interceptResult
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInterceptResultResultCodingKeys.self)
        if decoderContainer.contains(.interceptResult)
        {
            self.interceptResult = try decoderContainer.decode([InterceptResult?]?.self, forKey: .interceptResult)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInterceptResultResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInterceptResultResultCodingKeys.self)
        try encoderContainer.encode(interceptResult, forKey: .interceptResult)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 开启数据库的高安全模式&lt;br&gt;- 仅支持MySQL 
public class EnableInterceptResult:NSObject,JdCloudResult
{
}
public class DescribeInterceptResultResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInterceptResultResult?;

    enum DescribeInterceptResultResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInterceptResultResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInterceptResultResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInterceptResultResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInterceptResultResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  开启数据库的高安全模式&lt;br&gt;- 仅支持MySQL
public class EnableInterceptRequest:JdCloudRequest
{
    /// Instance ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum EnableInterceptRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableInterceptRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class EnableInterceptResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableInterceptResult?;

    enum EnableInterceptResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableInterceptResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableInterceptResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableInterceptResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableInterceptResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看当前实例已开启的安全模式。如果开启数据库的高安全模式，会返回配置信息&lt;br&gt;- 仅支持MySQL 
public class DescribeInterceptResult:NSObject,JdCloudResult
{
    /// Available
    var available:Bool?



    public override init(){
        super.init()
    }

    enum DescribeInterceptResultCodingKeys: String, CodingKey {
        case available
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInterceptResultCodingKeys.self)
        if decoderContainer.contains(.available)
        {
            self.available = try decoderContainer.decode(Bool?.self, forKey: .available)
        }
    }
}
public extension DescribeInterceptResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInterceptResultCodingKeys.self)
        try encoderContainer.encode(available, forKey: .available)
    }
}

///  关闭数据库的高安全模式&lt;br&gt;- 仅支持MySQL
public class DisableInterceptRequest:JdCloudRequest
{
    /// Instance ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DisableInterceptRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableInterceptRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeInterceptResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInterceptResult?;

    enum DescribeInterceptResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInterceptResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInterceptResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInterceptResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInterceptResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查看当前实例已开启的安全模式。如果开启数据库的高安全模式，会返回配置信息&lt;br&gt;- 仅支持MySQL
public class DescribeInterceptRequest:JdCloudRequest
{
    /// Instance ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInterceptRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInterceptRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DisableInterceptResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableInterceptResult?;

    enum DisableInterceptResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableInterceptResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableInterceptResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableInterceptResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableInterceptResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeTdeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeTdeResult?;

    enum DescribeTdeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeTdeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeTdeResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeTdeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTdeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  开启数据库的TDE功能
public class EnableTdeRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum EnableTdeRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableTdeRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 开启数据库的TDE功能 
public class EnableTdeResult:NSObject,JdCloudResult
{
}
/// 查看当前实例是否开启TDE 
public class DescribeTdeResult:NSObject,JdCloudResult
{
    /// 当前实例是否已经开启TDE功能，如已开启，返回true；如未开启，返回false；开启中，返回pending
    var status:String?



    public override init(){
        super.init()
    }

    enum DescribeTdeResultCodingKeys: String, CodingKey {
        case status
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeTdeResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
    }
}
public extension DescribeTdeResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTdeResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
    }
}

///  查看当前实例是否开启TDE
public class DescribeTdeRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeTdeRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeTdeRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class EnableTdeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableTdeResult?;

    enum EnableTdeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableTdeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableTdeResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableTdeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableTdeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 关闭数据库审计。关闭数据库审计后，以前生成的审计结果文件并不会被立即删除。审计结果文件会过期后由系统自动删除，过期时间缺省为6个月&lt;br&gt;- 仅支持SQL Server 
public class DeleteAuditResult:NSObject,JdCloudResult
{
}

///  修改当前的审计选项。当前已有审计选项可以通过describeAudit获得，支持的全部选项可以通过getAuditOptions获得。&lt;br&gt;- 仅支持SQL Server
public class ModifyAuditRequest:JdCloudRequest
{
    /// 在原有审计项基础上，增加新的审计项，多个审计项之间用英文逗号，分号或空格分隔，例如DATABASE_OBJECT_ACCESS_GROUP,ACKUP_RESTORE_GROUP
    var add:String?

    /// 删除审计项，多个审计项之间用英文逗号，分号或空格分隔，例如DATABASE_OBJECT_ACCESS_GROUP,ACKUP_RESTORE_GROUP&lt;br&gt;如删除了所有审计项，则审计自动关闭
    var drop:String?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyAuditRequestRequestCodingKeys: String, CodingKey {
        case add
        case drop
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyAuditRequestRequestCodingKeys.self)
        try encoderContainer.encode(add, forKey: .add)
        try encoderContainer.encode(drop, forKey: .drop)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeAuditFilesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAuditFilesResult?;

    enum DescribeAuditFilesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuditFilesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAuditFilesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAuditFilesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditFilesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  仅支持查看MySQL实例的审计内容&lt;br&gt;- 仅支持 MySQL 5.6, MySQL 5.7, Percona, MariaDB
public class DescribeAuditResultRequest:JdCloudRequest
{
    /// 查询开始时间，格式为：YYYY-MM-DD HH:mm:ss，开始时间不能早于当前时间30天
    var startTime:String

    /// 查询截止时间，格式为：YYYY-MM-DD HH:mm:ss，开始时间到结束时间不能超过3天
    var endTime:String

    /// 数据库名
    var dbName:String?

    /// 账号名
    var accountName:String?

    /// 显示数据的页码，默认为1，取值范围：[-1,∞)
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为10，取值范围：10、20、50
    var pageSize:Int?

    /// 过滤参数，多个过滤参数之间的关系为“与”(and)
      /// 支持以下属性的过滤：
      /// operation
      /// 
    var filters:[Filter?]?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,startTime:String,endTime:String,instanceId:String){
        self.startTime = startTime
        self.endTime = endTime
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeAuditResultRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case dbName
        case accountName
        case pageNumber
        case pageSize
        case filters
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditResultRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(dbName, forKey: .dbName)
        try encoderContainer.encode(accountName, forKey: .accountName)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 仅支持MySQL实例开启数据库审计&lt;br&gt;- 仅支持 MySQL 5.6, MySQL 5.7, Percona, MariaDB 
public class EnableAuditResult:NSObject,JdCloudResult
{
}
public class EnableAuditResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableAuditResult?;

    enum EnableAuditResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableAuditResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableAuditResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableAuditResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableAuditResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeAuditResultResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAuditResultResult?;

    enum DescribeAuditResultResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuditResultResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAuditResultResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAuditResultResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditResultResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 开启SQL Server的数据库审计功能，目前支持实例级的数据库审计。用户可以根据需要开启、关闭审计、自定义审计策略，并下载审计文件。审计文件为原生的SQL Server审计文件，缺省保存6个月。&lt;br&gt;- 仅支持SQL Server 
public class CreateAuditResult:NSObject,JdCloudResult
{
}

///  仅支持MySQL实例开启数据库审计&lt;br&gt;- 仅支持 MySQL 5.6, MySQL 5.7, Percona, MariaDB
public class EnableAuditRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum EnableAuditRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableAuditRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  仅支持MySQL实例关闭数据库审计&lt;br&gt;- 仅支持 MySQL 5.6, MySQL 5.7, Percona, MariaDB
public class DisableAuditRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DisableAuditRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableAuditRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DisableAuditResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableAuditResult?;

    enum DisableAuditResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableAuditResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableAuditResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableAuditResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableAuditResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取某个审计文件的下载链接，同时支持内链和外链，链接的有效时间为24小时&lt;br&gt;- 仅支持SQL Server 
public class DescribeAuditDownloadURLResult:NSObject,JdCloudResult
{
    /// 公网下载链接，若当前不可下载，则为空串
    var publicURL:String?

    /// 内网下载链接，若当前不可下载，则为空串
    var internalURL:String?



    public override init(){
        super.init()
    }

    enum DescribeAuditDownloadURLResultCodingKeys: String, CodingKey {
        case publicURL
        case internalURL
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuditDownloadURLResultCodingKeys.self)
        if decoderContainer.contains(.publicURL)
        {
            self.publicURL = try decoderContainer.decode(String?.self, forKey: .publicURL)
        }
        if decoderContainer.contains(.internalURL)
        {
            self.internalURL = try decoderContainer.decode(String?.self, forKey: .internalURL)
        }
    }
}
public extension DescribeAuditDownloadURLResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditDownloadURLResultCodingKeys.self)
        try encoderContainer.encode(publicURL, forKey: .publicURL)
        try encoderContainer.encode(internalURL, forKey: .internalURL)
    }
}
/// 获取当前系统所支持的各种数据库版本的审计选项及相应的推荐选项&lt;br&gt;- 仅支持SQL Server 
public class DescribeAuditOptionsResult:NSObject,JdCloudResult
{
    /// Enabled
    var enabled:[String?]?

    /// Disabled
    var disabled:[String?]?



    public override init(){
        super.init()
    }

    enum DescribeAuditOptionsResultCodingKeys: String, CodingKey {
        case enabled
        case disabled
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuditOptionsResultCodingKeys.self)
        if decoderContainer.contains(.enabled)
        {
            self.enabled = try decoderContainer.decode([String?]?.self, forKey: .enabled)
        }
        if decoderContainer.contains(.disabled)
        {
            self.disabled = try decoderContainer.decode([String?]?.self, forKey: .disabled)
        }
    }
}
public extension DescribeAuditOptionsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditOptionsResultCodingKeys.self)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(disabled, forKey: .disabled)
    }
}

///  获取当前实例下的所有审计结果文件的列表&lt;br&gt;- 仅支持SQL Server
public class DescribeAuditFilesRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeAuditFilesRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditFilesRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeAuditOptionsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAuditOptionsResult?;

    enum DescribeAuditOptionsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuditOptionsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAuditOptionsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAuditOptionsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditOptionsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  关闭数据库审计。关闭数据库审计后，以前生成的审计结果文件并不会被立即删除。审计结果文件会过期后由系统自动删除，过期时间缺省为6个月&lt;br&gt;- 仅支持SQL Server
public class DeleteAuditRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DeleteAuditRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAuditRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  获取某个审计文件的下载链接，同时支持内链和外链，链接的有效时间为24小时&lt;br&gt;- 仅支持SQL Server
public class DescribeAuditDownloadURLRequest:JdCloudRequest
{
    /// 审计文件名
    var fileName:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,fileName:String,instanceId:String){
        self.fileName = fileName
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeAuditDownloadURLRequestRequestCodingKeys: String, CodingKey {
        case fileName
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditDownloadURLRequestRequestCodingKeys.self)
        try encoderContainer.encode(fileName, forKey: .fileName)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  开启SQL Server的数据库审计功能，目前支持实例级的数据库审计。用户可以根据需要开启、关闭审计、自定义审计策略，并下载审计文件。审计文件为原生的SQL Server审计文件，缺省保存6个月。&lt;br&gt;- 仅支持SQL Server
public class CreateAuditRequest:JdCloudRequest
{
    /// 要开启的审计选项，各个选项之间用英文逗号或空格进行分割，例如：DATABASE_OBJECT_ACCESS_GROUP,ACKUP_RESTORE_GROU等&lt;br&gt;各个数据库版本支持的审计选项可以通过接口[describeAuditOptions](./describeAuditOptions.md)获得，各个审计项的具体含义可以参看微软的官方文档
    var enabled:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,enabled:String,instanceId:String){
        self.enabled = enabled
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum CreateAuditRequestRequestCodingKeys: String, CodingKey {
        case enabled
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAuditRequestRequestCodingKeys.self)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class CreateAuditResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateAuditResult?;

    enum CreateAuditResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAuditResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateAuditResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateAuditResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAuditResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取当前实例下的所有审计结果文件的列表&lt;br&gt;- 仅支持SQL Server 
public class DescribeAuditFilesResult:NSObject,JdCloudResult
{
    /// AuditFiles
    var auditFiles:[AuditFile?]?



    public override init(){
        super.init()
    }

    enum DescribeAuditFilesResultCodingKeys: String, CodingKey {
        case auditFiles
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuditFilesResultCodingKeys.self)
        if decoderContainer.contains(.auditFiles)
        {
            self.auditFiles = try decoderContainer.decode([AuditFile?]?.self, forKey: .auditFiles)
        }
    }
}
public extension DescribeAuditFilesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditFilesResultCodingKeys.self)
        try encoderContainer.encode(auditFiles, forKey: .auditFiles)
    }
}

///  查看当前实例已开启的审计选项。如当前实例未开启审计，则返回空&lt;br&gt;- 仅支持SQL Server
public class DescribeAuditRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeAuditRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 仅支持查看MySQL实例的审计内容&lt;br&gt;- 仅支持 MySQL 5.6, MySQL 5.7, Percona, MariaDB 
public class DescribeAuditResultResult:NSObject,JdCloudResult
{
    /// AuditResult
    var auditResult:[AuditResult?]?

    /// TotalCount
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeAuditResultResultCodingKeys: String, CodingKey {
        case auditResult
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuditResultResultCodingKeys.self)
        if decoderContainer.contains(.auditResult)
        {
            self.auditResult = try decoderContainer.decode([AuditResult?]?.self, forKey: .auditResult)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeAuditResultResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditResultResultCodingKeys.self)
        try encoderContainer.encode(auditResult, forKey: .auditResult)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class ModifyAuditResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyAuditResult?;

    enum ModifyAuditResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyAuditResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyAuditResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyAuditResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyAuditResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改当前的审计选项。当前已有审计选项可以通过describeAudit获得，支持的全部选项可以通过getAuditOptions获得。&lt;br&gt;- 仅支持SQL Server 
public class ModifyAuditResult:NSObject,JdCloudResult
{
}
/// 仅支持MySQL实例关闭数据库审计&lt;br&gt;- 仅支持 MySQL 5.6, MySQL 5.7, Percona, MariaDB 
public class DisableAuditResult:NSObject,JdCloudResult
{
}

///  获取当前系统所支持的各种数据库版本的审计选项及相应的推荐选项&lt;br&gt;- 仅支持SQL Server
public class DescribeAuditOptionsRequest:JdCloudRequest
{
    /// 审计选项类别，**大小写敏感**，目前支持两种类型：&lt;br&gt;（1）AuditOptions开头：在disalbed参数中返回SQL Server各个版本支持的所有选项，支持的名称为&lt;br&gt;AuditOptions2008R2&lt;br&gt;AuditOptions2012&lt;br&gt;AuditOptions2014&lt;br&gt;AuditOptions2016&lt;br&gt;例如输入参数为&quot;AuditOptions2016&quot;，则在disabled字段中返回SQL Server 2016 版本所支持的所有的审计选项&lt;br&gt;（2）AuditDefault开头：京东云建议的默认选项,在enabled参数中返回建议开启的选项，在disabled参数中返回不开启的选项，支持的名称为：&lt;br&gt;AuditDefault2008R2&lt;br&gt;AuditDefault2012&lt;br&gt;AuditDefault2014&lt;br&gt;AuditDefault2016&lt;br&gt;例如输入参数为&quot;AuditDefault2016&quot;，则在enabled字段返回SQL Server 2016 版本中京东云建议开启的审计选项，在disabled字段中返回建议不开启的选项
    var name:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,name:String,instanceId:String){
        self.name = name
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeAuditOptionsRequestRequestCodingKeys: String, CodingKey {
        case name
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditOptionsRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeAuditResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAuditResult?;

    enum DescribeAuditResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuditResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAuditResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAuditResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看当前实例已开启的审计选项。如当前实例未开启审计，则返回空&lt;br&gt;- 仅支持SQL Server 
public class DescribeAuditResult:NSObject,JdCloudResult
{
    /// Enabled
    var enabled:[String?]?



    public override init(){
        super.init()
    }

    enum DescribeAuditResultCodingKeys: String, CodingKey {
        case enabled
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuditResultCodingKeys.self)
        if decoderContainer.contains(.enabled)
        {
            self.enabled = try decoderContainer.decode([String?]?.self, forKey: .enabled)
        }
    }
}
public extension DescribeAuditResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditResultCodingKeys.self)
        try encoderContainer.encode(enabled, forKey: .enabled)
    }
}
public class DescribeAuditDownloadURLResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAuditDownloadURLResult?;

    enum DescribeAuditDownloadURLResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAuditDownloadURLResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAuditDownloadURLResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAuditDownloadURLResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAuditDownloadURLResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteAuditResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteAuditResult?;

    enum DeleteAuditResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteAuditResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteAuditResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteAuditResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAuditResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeBinlogsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBinlogsResult?;

    enum DescribeBinlogsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBinlogsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBinlogsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBinlogsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBinlogsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取MySQL实例的binlog的下载链接&lt;br&gt;- 仅支持 MySQL, Percona, MariaDB
public class DescribeBinlogDownloadURLRequest:JdCloudRequest
{
    /// 设置链接地址的过期时间，单位是秒，默认值是 300 秒，最长不能超过取值范围为 1 ~ 86400 秒
    var seconds:Int?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// binlog的备份ID，可以通过describeBinlogs获得
    var binlogBackupId:String


    public init(regionId: String,instanceId:String,binlogBackupId:String){
        self.instanceId = instanceId
        self.binlogBackupId = binlogBackupId
        super.init(regionId: regionId)
    }


    enum DescribeBinlogDownloadURLRequestRequestCodingKeys: String, CodingKey {
        case seconds
        case instanceId
        case binlogBackupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBinlogDownloadURLRequestRequestCodingKeys.self)
        try encoderContainer.encode(seconds, forKey: .seconds)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(binlogBackupId, forKey: .binlogBackupId)

    }
}

public class ClearBinlogsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ClearBinlogsResult?;

    enum ClearBinlogsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ClearBinlogsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ClearBinlogsResult?.self, forKey: .result) ?? nil
    }
}

public extension ClearBinlogsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ClearBinlogsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取MySQL实例的binlog的下载链接&lt;br&gt;- 仅支持 MySQL, Percona, MariaDB 
public class DescribeBinlogDownloadURLResult:NSObject,JdCloudResult
{
    /// 公网下载链接
    var publicURL:String?

    /// 内网下载链接
    var internalURL:String?



    public override init(){
        super.init()
    }

    enum DescribeBinlogDownloadURLResultCodingKeys: String, CodingKey {
        case publicURL
        case internalURL
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBinlogDownloadURLResultCodingKeys.self)
        if decoderContainer.contains(.publicURL)
        {
            self.publicURL = try decoderContainer.decode(String?.self, forKey: .publicURL)
        }
        if decoderContainer.contains(.internalURL)
        {
            self.internalURL = try decoderContainer.decode(String?.self, forKey: .internalURL)
        }
    }
}
public extension DescribeBinlogDownloadURLResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBinlogDownloadURLResultCodingKeys.self)
        try encoderContainer.encode(publicURL, forKey: .publicURL)
        try encoderContainer.encode(internalURL, forKey: .internalURL)
    }
}

///  获取MySQL实例中binlog的详细信息&lt;br&gt;- 仅支持 MySQL, Percona, MariaDB
public class DescribeBinlogsRequest:JdCloudRequest
{
    /// 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为10，取值范围：10、20、30、50、100
    var pageSize:Int?

    /// 查询开始时间，格式为：YYYY-MM-DD HH:mm:ss，开始时间到结束时间不超过三天
    var startTime:String?

    /// 查询结束时间，格式为：YYYY-MM-DD HH:mm:ss，开始时间到结束时间不超过三天
    var endTime:String?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeBinlogsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBinlogsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 获取MySQL实例中binlog的详细信息&lt;br&gt;- 仅支持 MySQL, Percona, MariaDB 
public class DescribeBinlogsResult:NSObject,JdCloudResult
{
    /// 总记录数
    var totalCount:Int?

    /// 备份集合
    var binlogs:[Binlog?]?



    public override init(){
        super.init()
    }

    enum DescribeBinlogsResultCodingKeys: String, CodingKey {
        case totalCount
        case binlogs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBinlogsResultCodingKeys.self)
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.binlogs)
        {
            self.binlogs = try decoderContainer.decode([Binlog?]?.self, forKey: .binlogs)
        }
    }
}
public extension DescribeBinlogsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBinlogsResultCodingKeys.self)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(binlogs, forKey: .binlogs)
    }
}
public class DescribeBinlogDownloadURLResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBinlogDownloadURLResult?;

    enum DescribeBinlogDownloadURLResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBinlogDownloadURLResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBinlogDownloadURLResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBinlogDownloadURLResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBinlogDownloadURLResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 清理本地的binlog并释放空间。 系统只会清理已经备份到存储的binlog，不会影响MySQL实例的备份恢复&lt;br&gt;- 仅支持MySQL 
public class ClearBinlogsResult:NSObject,JdCloudResult
{
}

///  清理本地的binlog并释放空间。 系统只会清理已经备份到存储的binlog，不会影响MySQL实例的备份恢复&lt;br&gt;- 仅支持MySQL
public class ClearBinlogsRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ClearBinlogsRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ClearBinlogsRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 查看指定地域下各种RDS数据库支持的可用区，不同类型的RDS支持的可用区不一样 
public class DescribeAzsResult:NSObject,JdCloudResult
{
    /// 可用区的ID的列表
    var azs:[String?]?



    public override init(){
        super.init()
    }

    enum DescribeAzsResultCodingKeys: String, CodingKey {
        case azs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAzsResultCodingKeys.self)
        if decoderContainer.contains(.azs)
        {
            self.azs = try decoderContainer.decode([String?]?.self, forKey: .azs)
        }
    }
}
public extension DescribeAzsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAzsResultCodingKeys.self)
        try encoderContainer.encode(azs, forKey: .azs)
    }
}

///  查看指定地域下各种RDS数据库支持的可用区，不同类型的RDS支持的可用区不一样
public class DescribeAzsRequest:JdCloudRequest
{
    /// RDS引擎类型，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
    var engine:String


    public init(regionId: String,engine:String){
        self.engine = engine
        super.init(regionId: regionId)
    }


    enum DescribeAzsRequestRequestCodingKeys: String, CodingKey {
        case engine
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAzsRequestRequestCodingKeys.self)
        try encoderContainer.encode(engine, forKey: .engine)

    }
}

public class DescribeAzsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAzsResult?;

    enum DescribeAzsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAzsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAzsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAzsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAzsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class SetImportFileSharedResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetImportFileSharedResult?;

    enum SetImportFileSharedResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetImportFileSharedResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetImportFileSharedResult?.self, forKey: .result) ?? nil
    }
}

public extension SetImportFileSharedResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetImportFileSharedResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取单库上云工具上传文件的需要的Key。单库上云工具需要正确的key值方能连接到京东云&lt;br&gt;- 仅支持SQL Server
public class GetUploadKeyRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum GetUploadKeyRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetUploadKeyRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  设置或取消上传文件是否共享给同一账号下的其他实例。缺省情况下，文件仅在上传的实例上可见并可导入，其他实例不可见不可导入。如果需要该文件在其他实例上也可导入，可将此文件设置为共享&lt;br&gt;- 仅支持SQL Server
public class SetImportFileSharedRequest:JdCloudRequest
{
    /// 文件是否共享&lt;br&gt;true:共享&lt;br&gt;false:不共享
    var shared:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 单库上云文件名
    var fileName:String


    public init(regionId: String,shared:String,instanceId:String,fileName:String){
        self.shared = shared
        self.instanceId = instanceId
        self.fileName = fileName
        super.init(regionId: regionId)
    }


    enum SetImportFileSharedRequestRequestCodingKeys: String, CodingKey {
        case shared
        case instanceId
        case fileName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetImportFileSharedRequestRequestCodingKeys.self)
        try encoderContainer.encode(shared, forKey: .shared)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(fileName, forKey: .fileName)

    }
}


///  删除用户通过单库上云工具上传的数据库备份文件&lt;br&gt;- 仅支持SQL Server
public class DeleteImportFileRequest:JdCloudRequest
{
    /// 共享文件的全局ID，可从上传文件查询接口describeImportFiles中获取；如果该文件不是共享文件，则无须输入该字段
    var sharedFileGid:String?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 单库上云文件名
    var fileName:String


    public init(regionId: String,instanceId:String,fileName:String){
        self.instanceId = instanceId
        self.fileName = fileName
        super.init(regionId: regionId)
    }


    enum DeleteImportFileRequestRequestCodingKeys: String, CodingKey {
        case sharedFileGid
        case instanceId
        case fileName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteImportFileRequestRequestCodingKeys.self)
        try encoderContainer.encode(sharedFileGid, forKey: .sharedFileGid)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(fileName, forKey: .fileName)

    }
}

public class GetUploadKeyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetUploadKeyResult?;

    enum GetUploadKeyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetUploadKeyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetUploadKeyResult?.self, forKey: .result) ?? nil
    }
}

public extension GetUploadKeyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetUploadKeyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteImportFileResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteImportFileResult?;

    enum DeleteImportFileResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteImportFileResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteImportFileResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteImportFileResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteImportFileResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除用户通过单库上云工具上传的数据库备份文件&lt;br&gt;- 仅支持SQL Server 
public class DeleteImportFileResult:NSObject,JdCloudResult
{
}
/// 获取用户通过单库上云工具上传到该实例上的文件列表&lt;br&gt;- 仅支持SQL Server 
public class DescribeImportFilesResult:NSObject,JdCloudResult
{
    /// 导入文件的集合
    var importFiles:[ImportFile?]?



    public override init(){
        super.init()
    }

    enum DescribeImportFilesResultCodingKeys: String, CodingKey {
        case importFiles
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImportFilesResultCodingKeys.self)
        if decoderContainer.contains(.importFiles)
        {
            self.importFiles = try decoderContainer.decode([ImportFile?]?.self, forKey: .importFiles)
        }
    }
}
public extension DescribeImportFilesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImportFilesResultCodingKeys.self)
        try encoderContainer.encode(importFiles, forKey: .importFiles)
    }
}
/// 获取单库上云工具上传文件的需要的Key。单库上云工具需要正确的key值方能连接到京东云&lt;br&gt;- 仅支持SQL Server 
public class GetUploadKeyResult:NSObject,JdCloudResult
{
    /// 上传文件需要用到的Key
    var key:String?



    public override init(){
        super.init()
    }

    enum GetUploadKeyResultCodingKeys: String, CodingKey {
        case key
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetUploadKeyResultCodingKeys.self)
        if decoderContainer.contains(.key)
        {
            self.key = try decoderContainer.decode(String?.self, forKey: .key)
        }
    }
}
public extension GetUploadKeyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetUploadKeyResultCodingKeys.self)
        try encoderContainer.encode(key, forKey: .key)
    }
}
public class DescribeImportFilesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeImportFilesResult?;

    enum DescribeImportFilesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImportFilesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeImportFilesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeImportFilesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImportFilesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 设置或取消上传文件是否共享给同一账号下的其他实例。缺省情况下，文件仅在上传的实例上可见并可导入，其他实例不可见不可导入。如果需要该文件在其他实例上也可导入，可将此文件设置为共享&lt;br&gt;- 仅支持SQL Server 
public class SetImportFileSharedResult:NSObject,JdCloudResult
{
}

///  获取用户通过单库上云工具上传到该实例上的文件列表&lt;br&gt;- 仅支持SQL Server
public class DescribeImportFilesRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeImportFilesRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImportFilesRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 查看RDS实例当前白名单。白名单是允许访问当前实例的IP/IP段列表，缺省情况下，白名单对本VPC开放。如果用户开启了外网访问的功能，还需要对外网的IP配置白名单。 
public class DescribeWhiteListResult:NSObject,JdCloudResult
{
    /// 白名单列表
    var whiteLists:[WhiteList?]?



    public override init(){
        super.init()
    }

    enum DescribeWhiteListResultCodingKeys: String, CodingKey {
        case whiteLists
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWhiteListResultCodingKeys.self)
        if decoderContainer.contains(.whiteLists)
        {
            self.whiteLists = try decoderContainer.decode([WhiteList?]?.self, forKey: .whiteLists)
        }
    }
}
public extension DescribeWhiteListResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWhiteListResultCodingKeys.self)
        try encoderContainer.encode(whiteLists, forKey: .whiteLists)
    }
}
/// 修改允许访问实例的IP白名单。白名单是允许访问当前实例的IP/IP段列表，缺省情况下，白名单对本VPC开放。如果用户开启了外网访问的功能，还需要对外网的IP配置白名单。 
public class ModifyWhiteListResult:NSObject,JdCloudResult
{
}

///  修改允许访问实例的IP白名单。白名单是允许访问当前实例的IP/IP段列表，缺省情况下，白名单对本VPC开放。如果用户开启了外网访问的功能，还需要对外网的IP配置白名单。
public class ModifyWhiteListRequest:JdCloudRequest
{
    /// IP或IP段，不同的IP/IP段之间用英文逗号分隔，例如0.0.0.0/0,192.168.0.10
    var ips:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,ips:String,instanceId:String){
        self.ips = ips
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyWhiteListRequestRequestCodingKeys: String, CodingKey {
        case ips
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyWhiteListRequestRequestCodingKeys.self)
        try encoderContainer.encode(ips, forKey: .ips)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class ModifyWhiteListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyWhiteListResult?;

    enum ModifyWhiteListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyWhiteListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyWhiteListResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyWhiteListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyWhiteListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查看RDS实例当前白名单。白名单是允许访问当前实例的IP/IP段列表，缺省情况下，白名单对本VPC开放。如果用户开启了外网访问的功能，还需要对外网的IP配置白名单。
public class DescribeWhiteListRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeWhiteListRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWhiteListRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeWhiteListResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeWhiteListResult?;

    enum DescribeWhiteListResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeWhiteListResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeWhiteListResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeWhiteListResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeWhiteListResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLogsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLogsResult?;

    enum DescribeLogsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLogsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLogsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateLogDownloadURLInternalResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateLogDownloadURLInternalResult?;

    enum UpdateLogDownloadURLInternalResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateLogDownloadURLInternalResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateLogDownloadURLInternalResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateLogDownloadURLInternalResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateLogDownloadURLInternalResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据日志文件的下载链接过期时间，生成日志文件下载地址 仅支持 PostgreSQL, MySQL, Percona, MariaDB
public class DescribeLogDownloadURLRequest:JdCloudRequest
{
    /// 设置链接地址的过期时间，单位是秒，默认值是 300 秒，最长不能超过取值范围为 1 ~ 86400 秒
    var seconds:Int?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 日志文件ID
    var logId:String


    public init(regionId: String,instanceId:String,logId:String){
        self.instanceId = instanceId
        self.logId = logId
        super.init(regionId: regionId)
    }


    enum DescribeLogDownloadURLRequestRequestCodingKeys: String, CodingKey {
        case seconds
        case instanceId
        case logId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogDownloadURLRequestRequestCodingKeys.self)
        try encoderContainer.encode(seconds, forKey: .seconds)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(logId, forKey: .logId)

    }
}

/// 根据日志文件的下载链接过期时间，生成日志文件下载地址 仅支持 PostgreSQL, MySQL, Percona, MariaDB 
public class DescribeLogDownloadURLResult:NSObject,JdCloudResult
{
    /// 公网下载链接
    var publicURL:String?

    /// 内网下载链接
    var internalURL:String?



    public override init(){
        super.init()
    }

    enum DescribeLogDownloadURLResultCodingKeys: String, CodingKey {
        case publicURL
        case internalURL
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogDownloadURLResultCodingKeys.self)
        if decoderContainer.contains(.publicURL)
        {
            self.publicURL = try decoderContainer.decode(String?.self, forKey: .publicURL)
        }
        if decoderContainer.contains(.internalURL)
        {
            self.internalURL = try decoderContainer.decode(String?.self, forKey: .internalURL)
        }
    }
}
public extension DescribeLogDownloadURLResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogDownloadURLResultCodingKeys.self)
        try encoderContainer.encode(publicURL, forKey: .publicURL)
        try encoderContainer.encode(internalURL, forKey: .internalURL)
    }
}

///  设置日志文件的下载链接过期时间，重新生成 PostgreSQL 的日志文件下载地址
public class UpdateLogDownloadURLInternalRequest:JdCloudRequest
{
    /// 设置链接地址的过期时间，单位是秒，最长不能超过取值范围为 1 ~ 86400 秒
    var seconds:Int

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 日志文件ID
    var logId:String


    public init(regionId: String,seconds:Int,instanceId:String,logId:String){
        self.seconds = seconds
        self.instanceId = instanceId
        self.logId = logId
        super.init(regionId: regionId)
    }


    enum UpdateLogDownloadURLInternalRequestRequestCodingKeys: String, CodingKey {
        case seconds
        case instanceId
        case logId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateLogDownloadURLInternalRequestRequestCodingKeys.self)
        try encoderContainer.encode(seconds, forKey: .seconds)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(logId, forKey: .logId)

    }
}

public class DescribeLogDownloadURLResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLogDownloadURLResult?;

    enum DescribeLogDownloadURLResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogDownloadURLResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLogDownloadURLResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLogDownloadURLResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogDownloadURLResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 设置日志文件的下载链接过期时间，重新生成 PostgreSQL 的日志文件下载地址 
public class UpdateLogDownloadURLInternalResult:NSObject,JdCloudResult
{
    /// 公网下载链接
    var publicURL:String?

    /// 内网下载链接
    var internalURL:String?



    public override init(){
        super.init()
    }

    enum UpdateLogDownloadURLInternalResultCodingKeys: String, CodingKey {
        case publicURL
        case internalURL
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateLogDownloadURLInternalResultCodingKeys.self)
        if decoderContainer.contains(.publicURL)
        {
            self.publicURL = try decoderContainer.decode(String?.self, forKey: .publicURL)
        }
        if decoderContainer.contains(.internalURL)
        {
            self.internalURL = try decoderContainer.decode(String?.self, forKey: .internalURL)
        }
    }
}
public extension UpdateLogDownloadURLInternalResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateLogDownloadURLInternalResultCodingKeys.self)
        try encoderContainer.encode(publicURL, forKey: .publicURL)
        try encoderContainer.encode(internalURL, forKey: .internalURL)
    }
}

///  获取日志文件列表&lt;br&gt;- 仅支持PostgreSQL, MySQL, Percona, MariaDB
public class DescribeLogsRequest:JdCloudRequest
{
    /// 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页;
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为100，取值范围：[10,100]，用于查询列表的接口
    var pageSize:Int?

    /// 过滤参数，多个过滤参数之间的关系为“与”(and)
      /// 支持以下属性的过滤：logType, 支持operator选项：eq, 仅支持 MySQL，Percona，MariaDB
      /// 
    var filters:[Filter?]?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeLogsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 获取日志文件列表&lt;br&gt;- 仅支持PostgreSQL, MySQL, Percona, MariaDB 
public class DescribeLogsResult:NSObject,JdCloudResult
{
    /// Logs
    var logs:[Log?]?

    /// TotalCount
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeLogsResultCodingKeys: String, CodingKey {
        case logs
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogsResultCodingKeys.self)
        if decoderContainer.contains(.logs)
        {
            self.logs = try decoderContainer.decode([Log?]?.self, forKey: .logs)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeLogsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogsResultCodingKeys.self)
        try encoderContainer.encode(logs, forKey: .logs)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  关闭RDS实例的外网访问功能。关闭后，用户无法通过Internet访问RDS，但可以在京东云内网通过内网域名访问
public class DisableInternetAccessRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DisableInternetAccessRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableInternetAccessRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class ModifyParameterGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyParameterGroupResult?;

    enum ModifyParameterGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyParameterGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyParameterGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyParameterGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyParameterGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 实例扩容，支持升级实例的CPU，内存及磁盘。 
public class ModifyInstanceSpecResult:NSObject,JdCloudResult
{
    /// 生成的订单号
    var orderId:String?



    public override init(){
        super.init()
    }

    enum ModifyInstanceSpecResultCodingKeys: String, CodingKey {
        case orderId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceSpecResultCodingKeys.self)
        if decoderContainer.contains(.orderId)
        {
            self.orderId = try decoderContainer.decode(String?.self, forKey: .orderId)
        }
    }
}
public extension ModifyInstanceSpecResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceSpecResultCodingKeys.self)
        try encoderContainer.encode(orderId, forKey: .orderId)
    }
}
/// 重启RDS实例，例如修改了一些配置参数后，需要重启实例才能生效。可以结合主备切换的功能，轮流重启备机，降低对业务的影响&lt;br&gt;**注意：如果实例正在进行备份，那么重启主实例将会终止备份操作。** 可以查看备份策略中的备份开始时间确认是否有备份正在运行。如果确实需要在实例备份时重启主实例，建议重启后，手工进行一次实例的全备。 
public class RebootInstanceResult:NSObject,JdCloudResult
{
}
/// 开启RDS实例的外网访问功能。开启后，用户可以通过internet访问RDS实例 
public class EnableInternetAccessResult:NSObject,JdCloudResult
{
}

///  创建MySQL的只读实例&lt;br&gt; - 仅支持MySQL&lt;br&gt; - 创建的只读实例跟主实例在同一个VPC同一个子网中&lt;br&gt; * 只读实例只支持按配置计费
public class CreateROInstanceRequest:JdCloudRequest
{
    /// 实例名称，具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
    var instanceName:String

    /// 只读实例规格FlavorId
    var instanceClass:String

    /// 存储类型，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)，缺省值为：LOCAL_SSD
    var instanceStorageType:String?

    /// 磁盘空间
    var instanceStorageGB:Int

    /// 可用区ID
    var azId:String

    /// VPC的ID，如果没有填写就保持和常规实例一样的VPC
    var vpcId:String?

    /// 子网ID，如果没有填写就保持和常规实例一样的subnet
    var subnetId:String?

    /// 参数组ID，缺省采用和常规实例一样的参数组
    var parameterGroup:String?

    /// 实例数据加密(存储类型为云硬盘才支持数据加密)。false：不加密；true：加密。缺省为false。
    var storageEncrypted:Bool?

    /// 创建只读实例的数目,缺省为1
    var count:Int?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceName:String,instanceClass:String,instanceStorageGB:Int,azId:String,instanceId:String){
        self.instanceName = instanceName
        self.instanceClass = instanceClass
        self.instanceStorageGB = instanceStorageGB
        self.azId = azId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum CreateROInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceName
        case instanceClass
        case instanceStorageType
        case instanceStorageGB
        case azId
        case vpcId
        case subnetId
        case parameterGroup
        case storageEncrypted
        case count
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateROInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceName, forKey: .instanceName)
        try encoderContainer.encode(instanceClass, forKey: .instanceClass)
        try encoderContainer.encode(instanceStorageType, forKey: .instanceStorageType)
        try encoderContainer.encode(instanceStorageGB, forKey: .instanceStorageGB)
        try encoderContainer.encode(azId, forKey: .azId)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(subnetId, forKey: .subnetId)
        try encoderContainer.encode(parameterGroup, forKey: .parameterGroup)
        try encoderContainer.encode(storageEncrypted, forKey: .storageEncrypted)
        try encoderContainer.encode(count, forKey: .count)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 创建一个RDS实例，用户可以使用相应的数据库客户端或者应用程序通过域名和端口链接到该RDS实例上，进行操作。 
public class CreateInstanceResult:NSObject,JdCloudResult
{
    /// InstanceId
    var instanceId:String?



    public override init(){
        super.init()
    }

    enum CreateInstanceResultCodingKeys: String, CodingKey {
        case instanceId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceResultCodingKeys.self)
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
    }
}
public extension CreateInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceResultCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
    }
}

///  开启RDS实例的外网访问功能。开启后，用户可以通过internet访问RDS实例
public class EnableInternetAccessRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum EnableInternetAccessRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableInternetAccessRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 获取当前账号下所有RDS实例及MySQL/PostgreSQL只读实例的概要信息，例如实例类型，版本，计费信息等 
public class DescribeInstancesResult:NSObject,JdCloudResult
{
    /// DbInstances
    var dbInstances:[DBInstance?]?

    /// TotalCount
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeInstancesResultCodingKeys: String, CodingKey {
        case dbInstances
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        if decoderContainer.contains(.dbInstances)
        {
            self.dbInstances = try decoderContainer.decode([DBInstance?]?.self, forKey: .dbInstances)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        try encoderContainer.encode(dbInstances, forKey: .dbInstances)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class CreateInstanceFromBackupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateInstanceFromBackupResult?;

    enum CreateInstanceFromBackupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceFromBackupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateInstanceFromBackupResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateInstanceFromBackupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceFromBackupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateROInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateROInstanceResult?;

    enum CreateROInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateROInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateROInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateROInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateROInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据源实例备份创建一个新实例，并通过追加日志的方式，将新实例的数据恢复到跟源实例指定时间点的数据状态一样。&lt;br&gt;例如根据实例A在“2018-06-18 23:00:00”时间点创建一个实例B，就是新建一个实例B，该实例B的数据跟实例A在“2018-06-18 23:00:00”这个时间点的数据完全一致。&lt;br&gt;对于SQL Server，主备切换后30分钟内，不支持按时间点恢复/创建，例如在10:05分用户进行了主备切换，那么10:05 ~ 10:35这个时间段不能进行按时间点恢复/创建。 
public class CreateInstanceByTimeResult:NSObject,JdCloudResult
{
    /// 新创建的实例ID
    var instanceId:String?



    public override init(){
        super.init()
    }

    enum CreateInstanceByTimeResultCodingKeys: String, CodingKey {
        case instanceId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceByTimeResultCodingKeys.self)
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
    }
}
public extension CreateInstanceByTimeResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceByTimeResultCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
    }
}
public class RestoreInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RestoreInstanceResult?;

    enum RestoreInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RestoreInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RestoreInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension RestoreInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改实例名称，可支持中文，实例名的具体规则可参见帮助中心文档:[名称及密码限制](../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
public class ModifyInstanceNameRequest:JdCloudRequest
{
    /// 实例名称，名称支持中文，实例名的具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
    var instanceName:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceName:String,instanceId:String){
        self.instanceName = instanceName
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstanceNameRequestRequestCodingKeys: String, CodingKey {
        case instanceName
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceName, forKey: .instanceName)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 使用实例的全量备份覆盖恢复当前实例 
public class RestoreInstanceResult:NSObject,JdCloudResult
{
}
public class CreateInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateInstanceResult?;

    enum CreateInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyInstanceNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstanceNameResult?;

    enum ModifyInstanceNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstanceNameResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstanceNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取SQL Server实例按时间点恢复/创建时，可恢复到的最后的一个时间点&lt;br&gt;- 仅支持SQL Server
public class DescribeLatestRestoreTimeRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeLatestRestoreTimeRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLatestRestoreTimeRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 修改实例名称，可支持中文，实例名的具体规则可参见帮助中心文档:[名称及密码限制](../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md) 
public class ModifyInstanceNameResult:NSObject,JdCloudResult
{
}
public class DescribeLatestRestoreTimeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLatestRestoreTimeResult?;

    enum DescribeLatestRestoreTimeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLatestRestoreTimeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLatestRestoreTimeResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLatestRestoreTimeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLatestRestoreTimeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建一个RDS实例，用户可以使用相应的数据库客户端或者应用程序通过域名和端口链接到该RDS实例上，进行操作。
public class CreateInstanceRequest:JdCloudRequest
{
    /// 新建实例规格
    var instanceSpec:DBInstanceSpec


    public init(regionId: String,instanceSpec:DBInstanceSpec){
        self.instanceSpec = instanceSpec
        super.init(regionId: regionId)
    }


    enum CreateInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceSpec, forKey: .instanceSpec)

    }
}


///  使用实例的全量备份覆盖恢复当前实例
public class RestoreInstanceRequest:JdCloudRequest
{
    /// 用于恢复的备份Id，仅限于本实例生成的备份
    var backupId:String?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum RestoreInstanceRequestRequestCodingKeys: String, CodingKey {
        case backupId
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(backupId, forKey: .backupId)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  根据源实例备份创建一个新实例，并通过追加日志的方式，将新实例的数据恢复到跟源实例指定时间点的数据状态一样。&lt;br&gt;例如根据实例A在“2018-06-18 23:00:00”时间点创建一个实例B，就是新建一个实例B，该实例B的数据跟实例A在“2018-06-18 23:00:00”这个时间点的数据完全一致。&lt;br&gt;对于SQL Server，主备切换后30分钟内，不支持按时间点恢复/创建，例如在10:05分用户进行了主备切换，那么10:05 ~ 10:35这个时间段不能进行按时间点恢复/创建。
public class CreateInstanceByTimeRequest:JdCloudRequest
{
    /// 根据源实例的哪个时间点创建新实例
    var restoreTime:String

    /// 新建实例规格
    var instanceSpec:RestoredNewDBInstanceSpec

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,restoreTime:String,instanceSpec:RestoredNewDBInstanceSpec,instanceId:String){
        self.restoreTime = restoreTime
        self.instanceSpec = instanceSpec
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum CreateInstanceByTimeRequestRequestCodingKeys: String, CodingKey {
        case restoreTime
        case instanceSpec
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceByTimeRequestRequestCodingKeys.self)
        try encoderContainer.encode(restoreTime, forKey: .restoreTime)
        try encoderContainer.encode(instanceSpec, forKey: .instanceSpec)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class CreateInstanceByTimeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateInstanceByTimeResult?;

    enum CreateInstanceByTimeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceByTimeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateInstanceByTimeResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateInstanceByTimeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceByTimeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyInstanceSpecResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstanceSpecResult?;

    enum ModifyInstanceSpecResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceSpecResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstanceSpecResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstanceSpecResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceSpecResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取当前账号下所有RDS实例及MySQL/PostgreSQL只读实例的概要信息，例如实例类型，版本，计费信息等
public class DescribeInstancesRequest:JdCloudRequest
{
    /// 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页;
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为10，取值范围：[10,100]，且为10的整数倍
    var pageSize:Int?

    /// 过滤参数，多个过滤参数之间的关系为“与”(and)
      /// 支持以下属性的过滤：
      /// instanceId, 支持operator选项：eq
      /// instanceName, 支持operator选项：eq, like
      /// engine, 支持operator选项：eq
      /// engineVersion, 支持operator选项：eq
      /// instanceStatus, 支持operator选项：eq
      /// vpcId, 支持operator选项：eq
      /// instanceType, 支持operator选项：eq
      /// internalDomainName, 支持operator选项：eq
      /// publicDomainName, 支持operator选项：eq
      /// 
    var filters:[Filter?]?

    /// 资源标签
    var tagFilters:[TagFilter?]?




    enum DescribeInstancesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case tagFilters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(tagFilters, forKey: .tagFilters)

    }
}

/// 修改RDS实例备份策略，目前仅支持用户修改“自动备份开始时间窗口”这个参数，其他参数暂不开放修改 
public class ModifyBackupPolicyResult:NSObject,JdCloudResult
{
}
/// 关闭RDS实例的外网访问功能。关闭后，用户无法通过Internet访问RDS，但可以在京东云内网通过内网域名访问 
public class DisableInternetAccessResult:NSObject,JdCloudResult
{
}

///  修改RDS实例的参数组&lt;br&gt;- 仅支持MySQL
public class ModifyParameterGroupRequest:JdCloudRequest
{
    /// 参数组ID
    var parameterGroupId:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,parameterGroupId:String,instanceId:String){
        self.parameterGroupId = parameterGroupId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyParameterGroupRequestRequestCodingKeys: String, CodingKey {
        case parameterGroupId
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyParameterGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(parameterGroupId, forKey: .parameterGroupId)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DeleteInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteInstanceResult?;

    enum DeleteInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据源实例全量备份创建一个新实例，新实例的数据跟源实例在创建备份时的数据状态一样。&lt;br&gt;例如根据源实例A的一个全量备份“mybak”新建一个实例B，该备份是在“‘2018-8-18 03:23:54”创建的。那么新建实例B的数据状态跟实例A‘2018-8-18 03:23:54’的状态一致
public class CreateInstanceFromBackupRequest:JdCloudRequest
{
    /// 备份ID
    var backupId:String

    /// 标识是创建什么类型的实例，例如MySQL，SQL Server等,具体可参见文档[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)&lt;br&gt;**注意：备份来源实例的engine和要创建的实例的engine必须一致**
    var engine:String

    /// 新建实例规格
    var instanceSpec:RestoredNewDBInstanceSpec


    public init(regionId: String,backupId:String,engine:String,instanceSpec:RestoredNewDBInstanceSpec){
        self.backupId = backupId
        self.engine = engine
        self.instanceSpec = instanceSpec
        super.init(regionId: regionId)
    }


    enum CreateInstanceFromBackupRequestRequestCodingKeys: String, CodingKey {
        case backupId
        case engine
        case instanceSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceFromBackupRequestRequestCodingKeys.self)
        try encoderContainer.encode(backupId, forKey: .backupId)
        try encoderContainer.encode(engine, forKey: .engine)
        try encoderContainer.encode(instanceSpec, forKey: .instanceSpec)

    }
}

/// 修改MySQL实例的连接模式：标准模式(standard) 和高安全模式(security).&lt;br&gt;- **标准模式**：响应时间短，但没有 SQL 审计和拦截的能力。&lt;br&gt;- **高安全模式**：具备一定的 SQL注入拦截能力（通过分析表达式、关键系统函数等来实现防御 SQL 注入攻击），并可开启 SQL 审计，但会增加一定的响应时间。&lt;br&gt;- 仅支持MySQL 
public class ModifyConnectionModeResult:NSObject,JdCloudResult
{
}
/// 查询RDS实例（MySQL、SQL Server等）的详细信息以及MySQL/PostgreSQL只读实例详细信息 
public class DescribeInstanceAttributesResult:NSObject,JdCloudResult
{
    /// DbInstanceAttributes
    var dbInstanceAttributes:DBInstanceAttribute?



    public override init(){
        super.init()
    }

    enum DescribeInstanceAttributesResultCodingKeys: String, CodingKey {
        case dbInstanceAttributes
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceAttributesResultCodingKeys.self)
        if decoderContainer.contains(.dbInstanceAttributes)
        {
            self.dbInstanceAttributes = try decoderContainer.decode(DBInstanceAttribute?.self, forKey: .dbInstanceAttributes)
        }
    }
}
public extension DescribeInstanceAttributesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceAttributesResultCodingKeys.self)
        try encoderContainer.encode(dbInstanceAttributes, forKey: .dbInstanceAttributes)
    }
}

///  修改MySQL实例的连接模式：标准模式(standard) 和高安全模式(security).&lt;br&gt;- **标准模式**：响应时间短，但没有 SQL 审计和拦截的能力。&lt;br&gt;- **高安全模式**：具备一定的 SQL注入拦截能力（通过分析表达式、关键系统函数等来实现防御 SQL 注入攻击），并可开启 SQL 审计，但会增加一定的响应时间。&lt;br&gt;- 仅支持MySQL
public class ModifyConnectionModeRequest:JdCloudRequest
{
    /// 连接模式&lt;br&gt; - standard：标准模式(缺省)，响应时间短，但没有 SQL 审计和拦截的能力 &lt;br&gt;- security：高安全模式，具备一定的 SQL注入拦截能力，并可开启 SQL 审计，但会增加一定的响应时间
    var connectionMode:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,connectionMode:String,instanceId:String){
        self.connectionMode = connectionMode
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyConnectionModeRequestRequestCodingKeys: String, CodingKey {
        case connectionMode
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyConnectionModeRequestRequestCodingKeys.self)
        try encoderContainer.encode(connectionMode, forKey: .connectionMode)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 交换两个实例的域名，包括内网域名和外网域名。如果一个实例有外网域名，一个没有，则不允许交换。&lt;br&gt;- 仅支持SQL Server 
public class ExchangeInstanceDnsResult:NSObject,JdCloudResult
{
}
public class DisableInternetAccessResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisableInternetAccessResult?;

    enum DisableInternetAccessResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisableInternetAccessResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisableInternetAccessResult?.self, forKey: .result) ?? nil
    }
}

public extension DisableInternetAccessResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisableInternetAccessResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  对RDS实例进行主备切换。&lt;br&gt;注意：如果实例正在进行备份，那么主备切换将会终止备份操作。可以查看备份策略中的备份开始时间确认是否有备份正在运行。如果确实需要在实例备份时进行主备切换，建议切换完成 后，手工进行一次实例的全备&lt;br&gt;对于SQL Server，主备切换后30分钟内，不支持按时间点恢复/创建，例如在10:05分用户进行了主备切换，那么10:05 ~ 10:35这个时间段不能进行按时间点恢复/创建。&lt;br&gt;- 仅支持SQL Server
public class FailoverInstanceRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum FailoverInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: FailoverInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class ModifyBackupPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyBackupPolicyResult?;

    enum ModifyBackupPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyBackupPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyBackupPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyBackupPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBackupPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeBackupPolicyResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBackupPolicyResult?;

    enum DescribeBackupPolicyResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupPolicyResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBackupPolicyResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBackupPolicyResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupPolicyResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据源实例全量备份创建一个新实例，新实例的数据跟源实例在创建备份时的数据状态一样。&lt;br&gt;例如根据源实例A的一个全量备份“mybak”新建一个实例B，该备份是在“‘2018-8-18 03:23:54”创建的。那么新建实例B的数据状态跟实例A‘2018-8-18 03:23:54’的状态一致 
public class CreateInstanceFromBackupResult:NSObject,JdCloudResult
{
    /// InstanceId
    var instanceId:String?



    public override init(){
        super.init()
    }

    enum CreateInstanceFromBackupResultCodingKeys: String, CodingKey {
        case instanceId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceFromBackupResultCodingKeys.self)
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
    }
}
public extension CreateInstanceFromBackupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceFromBackupResultCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
    }
}

///  重启RDS实例，例如修改了一些配置参数后，需要重启实例才能生效。可以结合主备切换的功能，轮流重启备机，降低对业务的影响&lt;br&gt;**注意：如果实例正在进行备份，那么重启主实例将会终止备份操作。** 可以查看备份策略中的备份开始时间确认是否有备份正在运行。如果确实需要在实例备份时重启主实例，建议重启后，手工进行一次实例的全备。
public class RebootInstanceRequest:JdCloudRequest
{
    /// 是否重启主节点。&lt;br&gt; - 仅SQL Server 支持该参数
    var rebootMaster:Bool?

    /// 是否重启备节点。&lt;br&gt; - 仅SQL Server 支持该参数
    var rebootSlave:Bool?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum RebootInstanceRequestRequestCodingKeys: String, CodingKey {
        case rebootMaster
        case rebootSlave
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RebootInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(rebootMaster, forKey: .rebootMaster)
        try encoderContainer.encode(rebootSlave, forKey: .rebootSlave)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询RDS实例（MySQL、SQL Server等）的详细信息以及MySQL/PostgreSQL只读实例详细信息
public class DescribeInstanceAttributesRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceAttributesRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceAttributesRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  修改RDS实例备份策略，目前仅支持用户修改“自动备份开始时间窗口”这个参数，其他参数暂不开放修改
public class ModifyBackupPolicyRequest:JdCloudRequest
{
    /// 自动备份开始时间窗口,例如：00:00-01:00，表示0点到1点开始进行数据库自动备份，备份完成时间则跟实例大小有关，不一定在这个时间范围中&lt;br&gt;SQL Server:范围00:00-23:59，时间范围差不得小于30分钟。&lt;br&gt;MySQL,只能是以下取值:&lt;br&gt;00:00-01:00&lt;br&gt;01:00-02:00&lt;br&gt;......&lt;br&gt;23:00-24:00
    var startWindow:String?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyBackupPolicyRequestRequestCodingKeys: String, CodingKey {
        case startWindow
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyBackupPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(startWindow, forKey: .startWindow)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class ModifyConnectionModeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyConnectionModeResult?;

    enum ModifyConnectionModeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyConnectionModeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyConnectionModeResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyConnectionModeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyConnectionModeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 对RDS实例进行主备切换。&lt;br&gt;注意：如果实例正在进行备份，那么主备切换将会终止备份操作。可以查看备份策略中的备份开始时间确认是否有备份正在运行。如果确实需要在实例备份时进行主备切换，建议切换完成 后，手工进行一次实例的全备&lt;br&gt;对于SQL Server，主备切换后30分钟内，不支持按时间点恢复/创建，例如在10:05分用户进行了主备切换，那么10:05 ~ 10:35这个时间段不能进行按时间点恢复/创建。&lt;br&gt;- 仅支持SQL Server 
public class FailoverInstanceResult:NSObject,JdCloudResult
{
}
public class EnableInternetAccessResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableInternetAccessResult?;

    enum EnableInternetAccessResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableInternetAccessResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableInternetAccessResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableInternetAccessResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableInternetAccessResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeInstanceAttributesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceAttributesResult?;

    enum DescribeInstanceAttributesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceAttributesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceAttributesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceAttributesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceAttributesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除一个RDS实例或者MySQL/PostgreSQL的只读实例。删除MySQL/PostgreSQL主实例时，会同时将对应的MySQL/PostgreSQL只读实例也删除 [MFA enabled]
public class DeleteInstanceRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DeleteInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 修改RDS实例的参数组&lt;br&gt;- 仅支持MySQL 
public class ModifyParameterGroupResult:NSObject,JdCloudResult
{
}

///  实例扩容，支持升级实例的CPU，内存及磁盘。
public class ModifyInstanceSpecRequest:JdCloudRequest
{
    /// 扩容后实例规格
    var newInstanceClass:String

    /// 扩容后实例磁盘大小
    var newInstanceStorageGB:Int

    /// 存储类型，如果不指定，默认会采用实例原存储类型.
    var newInstanceStorageType:String?

    /// 实例数据加密(存储类型为云硬盘才支持数据加密). false：不加密; true：加密. 如果实例从本地盘变为云硬盘，缺省为false. 如果实例本来就是使用云硬盘的，缺省和源实例保持一致
    var storageEncrypted:Bool?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,newInstanceClass:String,newInstanceStorageGB:Int,instanceId:String){
        self.newInstanceClass = newInstanceClass
        self.newInstanceStorageGB = newInstanceStorageGB
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstanceSpecRequestRequestCodingKeys: String, CodingKey {
        case newInstanceClass
        case newInstanceStorageGB
        case newInstanceStorageType
        case storageEncrypted
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceSpecRequestRequestCodingKeys.self)
        try encoderContainer.encode(newInstanceClass, forKey: .newInstanceClass)
        try encoderContainer.encode(newInstanceStorageGB, forKey: .newInstanceStorageGB)
        try encoderContainer.encode(newInstanceStorageType, forKey: .newInstanceStorageType)
        try encoderContainer.encode(storageEncrypted, forKey: .storageEncrypted)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 创建MySQL的只读实例&lt;br&gt; - 仅支持MySQL&lt;br&gt; - 创建的只读实例跟主实例在同一个VPC同一个子网中&lt;br&gt; * 只读实例只支持按配置计费 
public class CreateROInstanceResult:NSObject,JdCloudResult
{
    /// 新创建的只读实例ID的列表
    var roInstanceId:[String?]?

    /// 订单ID
    var orderId:String?



    public override init(){
        super.init()
    }

    enum CreateROInstanceResultCodingKeys: String, CodingKey {
        case roInstanceId
        case orderId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateROInstanceResultCodingKeys.self)
        if decoderContainer.contains(.roInstanceId)
        {
            self.roInstanceId = try decoderContainer.decode([String?]?.self, forKey: .roInstanceId)
        }
        if decoderContainer.contains(.orderId)
        {
            self.orderId = try decoderContainer.decode(String?.self, forKey: .orderId)
        }
    }
}
public extension CreateROInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateROInstanceResultCodingKeys.self)
        try encoderContainer.encode(roInstanceId, forKey: .roInstanceId)
        try encoderContainer.encode(orderId, forKey: .orderId)
    }
}
public class RebootInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RebootInstanceResult?;

    enum RebootInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RebootInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RebootInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension RebootInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RebootInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查看RDS实例备份策略。根据数据库类型的不同，支持的备份策略也略有差异，具体请看返回参数中的详细说明
public class DescribeBackupPolicyRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeBackupPolicyRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupPolicyRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 获取SQL Server实例按时间点恢复/创建时，可恢复到的最后的一个时间点&lt;br&gt;- 仅支持SQL Server 
public class DescribeLatestRestoreTimeResult:NSObject,JdCloudResult
{
    /// 实例按时间点恢复时,可恢复到的最后的一个时间点
    var latestRestoreTime:String?



    public override init(){
        super.init()
    }

    enum DescribeLatestRestoreTimeResultCodingKeys: String, CodingKey {
        case latestRestoreTime
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLatestRestoreTimeResultCodingKeys.self)
        if decoderContainer.contains(.latestRestoreTime)
        {
            self.latestRestoreTime = try decoderContainer.decode(String?.self, forKey: .latestRestoreTime)
        }
    }
}
public extension DescribeLatestRestoreTimeResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLatestRestoreTimeResultCodingKeys.self)
        try encoderContainer.encode(latestRestoreTime, forKey: .latestRestoreTime)
    }
}
/// 删除一个RDS实例或者MySQL/PostgreSQL的只读实例。删除MySQL/PostgreSQL主实例时，会同时将对应的MySQL/PostgreSQL只读实例也删除 [MFA enabled] 
public class DeleteInstanceResult:NSObject,JdCloudResult
{
}
public class DescribeInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstancesResult?;

    enum DescribeInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class FailoverInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:FailoverInstanceResult?;

    enum FailoverInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: FailoverInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(FailoverInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension FailoverInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: FailoverInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看RDS实例备份策略。根据数据库类型的不同，支持的备份策略也略有差异，具体请看返回参数中的详细说明 
public class DescribeBackupPolicyResult:NSObject,JdCloudResult
{
    /// 自动备份开始时间窗口，范围00:00-23:59，时间范围差不得小于30分钟。&lt;br&gt;例如：00:00-01:00，表示0点到1点开始进行数据库自动备份，备份完成时间则跟实例大小有关，不一定在这个时间范围中
    var startWindow:String?

    /// 自动备份保留周期，单位天,缺省为7天，范围7-730
    var retentionPeriod:Int?

    /// 自动备份循环模式&lt;br&gt;1:表示每天都是全量备份&lt;br&gt;2:表示自动备份按照全量、增量、增量这样的方式进行，例如第1天是全量备份，第2、3天是增量备份；第4天又是全量备份，以此类推.&lt;br&gt; - 仅支持 SQL Server
    var cycleMode:Int?

    /// 是否备份binlog&lt;br&gt;true:表示备份&lt;br&gt;false:表示不备份&lt;br&gt; - **仅支持 MySQL，Percona，MariaDB
    var backupBinlog:String?



    public override init(){
        super.init()
    }

    enum DescribeBackupPolicyResultCodingKeys: String, CodingKey {
        case startWindow
        case retentionPeriod
        case cycleMode
        case backupBinlog
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupPolicyResultCodingKeys.self)
        if decoderContainer.contains(.startWindow)
        {
            self.startWindow = try decoderContainer.decode(String?.self, forKey: .startWindow)
        }
        if decoderContainer.contains(.retentionPeriod)
        {
            self.retentionPeriod = try decoderContainer.decode(Int?.self, forKey: .retentionPeriod)
        }
        if decoderContainer.contains(.cycleMode)
        {
            self.cycleMode = try decoderContainer.decode(Int?.self, forKey: .cycleMode)
        }
        if decoderContainer.contains(.backupBinlog)
        {
            self.backupBinlog = try decoderContainer.decode(String?.self, forKey: .backupBinlog)
        }
    }
}
public extension DescribeBackupPolicyResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupPolicyResultCodingKeys.self)
        try encoderContainer.encode(startWindow, forKey: .startWindow)
        try encoderContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        try encoderContainer.encode(cycleMode, forKey: .cycleMode)
        try encoderContainer.encode(backupBinlog, forKey: .backupBinlog)
    }
}

///  交换两个实例的域名，包括内网域名和外网域名。如果一个实例有外网域名，一个没有，则不允许交换。&lt;br&gt;- 仅支持SQL Server
public class ExchangeInstanceDnsRequest:JdCloudRequest
{
    /// 要交换的实例ID
    var targetInstanceId:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,targetInstanceId:String,instanceId:String){
        self.targetInstanceId = targetInstanceId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ExchangeInstanceDnsRequestRequestCodingKeys: String, CodingKey {
        case targetInstanceId
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExchangeInstanceDnsRequestRequestCodingKeys.self)
        try encoderContainer.encode(targetInstanceId, forKey: .targetInstanceId)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class ExchangeInstanceDnsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ExchangeInstanceDnsResult?;

    enum ExchangeInstanceDnsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExchangeInstanceDnsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ExchangeInstanceDnsResult?.self, forKey: .result) ?? nil
    }
}

public extension ExchangeInstanceDnsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExchangeInstanceDnsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteDatabaseResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteDatabaseResult?;

    enum DeleteDatabaseResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteDatabaseResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteDatabaseResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteDatabaseResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDatabaseResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  从RDS实例中删除数据库。为便于管理和数据恢复，RDS对用户权限进行了控制，用户仅能通过控制台或本接口删除数据库 [MFA enabled]
public class DeleteDatabaseRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 库名称
    var dbName:String


    public init(regionId: String,instanceId:String,dbName:String){
        self.instanceId = instanceId
        self.dbName = dbName
        super.init(regionId: regionId)
    }


    enum DeleteDatabaseRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case dbName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDatabaseRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(dbName, forKey: .dbName)

    }
}

public class DescribeDatabasesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDatabasesResult?;

    enum DescribeDatabasesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDatabasesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDatabasesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDatabasesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDatabasesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 从备份中恢复单个数据库，支持从其他实例（但必须是同一个账号下的实例）备份中恢复。例如可以从生产环境的数据库实例的备份恢复到测试环境的数据库中。&lt;br&gt;- 仅支持SQL Server 
public class RestoreDatabaseFromBackupResult:NSObject,JdCloudResult
{
}
/// 从RDS实例中删除数据库。为便于管理和数据恢复，RDS对用户权限进行了控制，用户仅能通过控制台或本接口删除数据库 [MFA enabled] 
public class DeleteDatabaseResult:NSObject,JdCloudResult
{
}
public class RestoreDatabaseFromOSSResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RestoreDatabaseFromOSSResult?;

    enum RestoreDatabaseFromOSSResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RestoreDatabaseFromOSSResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RestoreDatabaseFromOSSResult?.self, forKey: .result) ?? nil
    }
}

public extension RestoreDatabaseFromOSSResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreDatabaseFromOSSResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class RestoreDatabaseFromFileResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RestoreDatabaseFromFileResult?;

    enum RestoreDatabaseFromFileResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RestoreDatabaseFromFileResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RestoreDatabaseFromFileResult?.self, forKey: .result) ?? nil
    }
}

public extension RestoreDatabaseFromFileResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreDatabaseFromFileResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取当前实例的所有数据库详细信息的列表
public class DescribeDatabasesRequest:JdCloudRequest
{
    /// 数据库名。如果不指定数据库名，则返回所有数据库列表&lt;br&gt;- **MySQL：不支持该字段**&lt;br&gt;- **SQL Server：支持该字段**
    var dbName:String?

    /// 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页;
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为100，取值范围：[10,100]，用于查询列表的接口
    var pageSize:Int?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeDatabasesRequestRequestCodingKeys: String, CodingKey {
        case dbName
        case pageNumber
        case pageSize
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDatabasesRequestRequestCodingKeys.self)
        try encoderContainer.encode(dbName, forKey: .dbName)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  创建一个数据库。 为了实例的管理和数据恢复，RDS对用户权限进行了限制，用户仅能通过控制台或本接口创建数据库
public class CreateDatabaseRequest:JdCloudRequest
{
    /// 数据库名，数据库名称的限制请参考[帮助中心文档](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
    var dbName:String

    /// 数据库的字符集名，当前支持的字符集请查看[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
    var characterSetName:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,dbName:String,characterSetName:String,instanceId:String){
        self.dbName = dbName
        self.characterSetName = characterSetName
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum CreateDatabaseRequestRequestCodingKeys: String, CodingKey {
        case dbName
        case characterSetName
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDatabaseRequestRequestCodingKeys.self)
        try encoderContainer.encode(dbName, forKey: .dbName)
        try encoderContainer.encode(characterSetName, forKey: .characterSetName)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  从用户通过单库上云工具上传到云上的备份文件中恢复单个数据库&lt;br&gt;- 仅支持SQL Server
public class RestoreDatabaseFromFileRequest:JdCloudRequest
{
    /// 共享文件的全局ID，可从上传文件查询接口[describeImportFiles](../Cloud-on-Single-Database/describeImportFiles.md)获取；如果该文件不是共享文件，则不用输入该参数
    var sharedFileGid:String?

    /// 用户上传的备份文件名称（包括文件后缀名），例如mydb1.bak
    var fileName:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 库名称
    var dbName:String


    public init(regionId: String,fileName:String,instanceId:String,dbName:String){
        self.fileName = fileName
        self.instanceId = instanceId
        self.dbName = dbName
        super.init(regionId: regionId)
    }


    enum RestoreDatabaseFromFileRequestRequestCodingKeys: String, CodingKey {
        case sharedFileGid
        case fileName
        case instanceId
        case dbName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreDatabaseFromFileRequestRequestCodingKeys.self)
        try encoderContainer.encode(sharedFileGid, forKey: .sharedFileGid)
        try encoderContainer.encode(fileName, forKey: .fileName)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(dbName, forKey: .dbName)

    }
}

/// 从上传到OSS的备份文件中恢复单个数据库&lt;br&gt;- 仅支持SQL Server 
public class RestoreDatabaseFromOSSResult:NSObject,JdCloudResult
{
}
public class RestoreDatabaseFromBackupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RestoreDatabaseFromBackupResult?;

    enum RestoreDatabaseFromBackupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RestoreDatabaseFromBackupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RestoreDatabaseFromBackupResult?.self, forKey: .result) ?? nil
    }
}

public extension RestoreDatabaseFromBackupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreDatabaseFromBackupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateDatabaseResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateDatabaseResult?;

    enum CreateDatabaseResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDatabaseResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateDatabaseResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateDatabaseResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDatabaseResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取当前实例的所有数据库详细信息的列表 
public class DescribeDatabasesResult:NSObject,JdCloudResult
{
    /// Databases
    var databases:[Database?]?

    /// TotalCount
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeDatabasesResultCodingKeys: String, CodingKey {
        case databases
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDatabasesResultCodingKeys.self)
        if decoderContainer.contains(.databases)
        {
            self.databases = try decoderContainer.decode([Database?]?.self, forKey: .databases)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeDatabasesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDatabasesResultCodingKeys.self)
        try encoderContainer.encode(databases, forKey: .databases)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 从用户通过单库上云工具上传到云上的备份文件中恢复单个数据库&lt;br&gt;- 仅支持SQL Server 
public class RestoreDatabaseFromFileResult:NSObject,JdCloudResult
{
}
/// 创建一个数据库。 为了实例的管理和数据恢复，RDS对用户权限进行了限制，用户仅能通过控制台或本接口创建数据库 
public class CreateDatabaseResult:NSObject,JdCloudResult
{
}

///  从备份中恢复单个数据库，支持从其他实例（但必须是同一个账号下的实例）备份中恢复。例如可以从生产环境的数据库实例的备份恢复到测试环境的数据库中。&lt;br&gt;- 仅支持SQL Server
public class RestoreDatabaseFromBackupRequest:JdCloudRequest
{
    /// 备份ID，可从备份查询接口describeBackups获取
    var backupId:String

    /// 指定该备份中用于恢复数据库的文件名称。通常情况下文件名（不包括后缀）即为备份的数据库名。例如文件名为my_test_db.bak，表示该文件是my_test_db数据库的备份
    var backupFileName:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 库名称
    var dbName:String


    public init(regionId: String,backupId:String,backupFileName:String,instanceId:String,dbName:String){
        self.backupId = backupId
        self.backupFileName = backupFileName
        self.instanceId = instanceId
        self.dbName = dbName
        super.init(regionId: regionId)
    }


    enum RestoreDatabaseFromBackupRequestRequestCodingKeys: String, CodingKey {
        case backupId
        case backupFileName
        case instanceId
        case dbName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreDatabaseFromBackupRequestRequestCodingKeys.self)
        try encoderContainer.encode(backupId, forKey: .backupId)
        try encoderContainer.encode(backupFileName, forKey: .backupFileName)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(dbName, forKey: .dbName)

    }
}


///  从上传到OSS的备份文件中恢复单个数据库&lt;br&gt;- 仅支持SQL Server
public class RestoreDatabaseFromOSSRequest:JdCloudRequest
{
    /// 用户上传到对象存储OSS上的备份文件的路径。&lt;br&gt;例如用户备份上传的bucket为db_backup，文件为test_server/db1.bak，那么ossULR为db_backup/test_server/db1.bak。&lt;br&gt;**授权说明**：需要授予账户ID：785455908940，对这个bucket的读取权限，具体步骤可以查看[文档](https://docs.jdcloud.com/cn/object-storage-service/set-bucket-policy-2)。
    var ossURL:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 库名称
    var dbName:String


    public init(regionId: String,ossURL:String,instanceId:String,dbName:String){
        self.ossURL = ossURL
        self.instanceId = instanceId
        self.dbName = dbName
        super.init(regionId: regionId)
    }


    enum RestoreDatabaseFromOSSRequestRequestCodingKeys: String, CodingKey {
        case ossURL
        case instanceId
        case dbName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreDatabaseFromOSSRequestRequestCodingKeys.self)
        try encoderContainer.encode(ossURL, forKey: .ossURL)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(dbName, forKey: .dbName)

    }
}

public class CreateBackupSynchronicityResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateBackupSynchronicityResult?;

    enum CreateBackupSynchronicityResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBackupSynchronicityResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateBackupSynchronicityResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateBackupSynchronicityResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackupSynchronicityResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建一个跨地域备份同步服务。
public class CreateBackupSynchronicityRequest:JdCloudRequest
{
    /// 源实例ID
    var instanceId:String

    /// 备份同步的目标地域
    var destRegion:String


    public init(regionId: String,instanceId:String,destRegion:String){
        self.instanceId = instanceId
        self.destRegion = destRegion
        super.init(regionId: regionId)
    }


    enum CreateBackupSynchronicityRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case destRegion
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackupSynchronicityRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(destRegion, forKey: .destRegion)

    }
}

/// 根据跨地域备份同步服务时间点创建实例。 
public class CreateInstanceByTimeInCrossRegionResult:NSObject,JdCloudResult
{
    /// 新创建的实例ID
    var instanceId:String?



    public override init(){
        super.init()
    }

    enum CreateInstanceByTimeInCrossRegionResultCodingKeys: String, CodingKey {
        case instanceId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceByTimeInCrossRegionResultCodingKeys.self)
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
    }
}
public extension CreateInstanceByTimeInCrossRegionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceByTimeInCrossRegionResultCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
    }
}
/// 创建一个跨地域备份同步服务。 
public class CreateBackupSynchronicityResult:NSObject,JdCloudResult
{
    /// 跨地域备份同步服务ID
    var serviceId:String?



    public override init(){
        super.init()
    }

    enum CreateBackupSynchronicityResultCodingKeys: String, CodingKey {
        case serviceId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBackupSynchronicityResultCodingKeys.self)
        if decoderContainer.contains(.serviceId)
        {
            self.serviceId = try decoderContainer.decode(String?.self, forKey: .serviceId)
        }
    }
}
public extension CreateBackupSynchronicityResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackupSynchronicityResultCodingKeys.self)
        try encoderContainer.encode(serviceId, forKey: .serviceId)
    }
}
public class DeleteBackupSynchronicityResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteBackupSynchronicityResult?;

    enum DeleteBackupSynchronicityResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteBackupSynchronicityResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteBackupSynchronicityResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteBackupSynchronicityResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBackupSynchronicityResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeBackupSynchronicitiesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBackupSynchronicitiesResult?;

    enum DescribeBackupSynchronicitiesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupSynchronicitiesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBackupSynchronicitiesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBackupSynchronicitiesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupSynchronicitiesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据跨地域备份同步服务时间点创建实例。
public class CreateInstanceByTimeInCrossRegionRequest:JdCloudRequest
{
    /// 根据源实例的哪个时间点创建新实例
    var restoreTime:String

    /// 跨地域备份同步服务ID
    var serviceId:String

    /// 新建实例规格
    var instanceSpec:RestoredNewDBInstanceSpec


    public init(regionId: String,restoreTime:String,serviceId:String,instanceSpec:RestoredNewDBInstanceSpec){
        self.restoreTime = restoreTime
        self.serviceId = serviceId
        self.instanceSpec = instanceSpec
        super.init(regionId: regionId)
    }


    enum CreateInstanceByTimeInCrossRegionRequestRequestCodingKeys: String, CodingKey {
        case restoreTime
        case serviceId
        case instanceSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceByTimeInCrossRegionRequestRequestCodingKeys.self)
        try encoderContainer.encode(restoreTime, forKey: .restoreTime)
        try encoderContainer.encode(serviceId, forKey: .serviceId)
        try encoderContainer.encode(instanceSpec, forKey: .instanceSpec)

    }
}

/// 删除一个跨地域备份同步服务。 
public class DeleteBackupSynchronicityResult:NSObject,JdCloudResult
{
}

///  查询跨地域备份同步服务列表。
public class DescribeBackupSynchronicitiesRequest:JdCloudRequest
{
    /// 显示数据的页码，默认为1，取值范围：[1,∞)，页码超过总页数时，显示最后一页，用于查询列表的接口
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为10，取值范围：10、20、30、50、100
    var pageSize:Int?




    enum DescribeBackupSynchronicitiesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupSynchronicitiesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

public class CreateInstanceByTimeInCrossRegionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateInstanceByTimeInCrossRegionResult?;

    enum CreateInstanceByTimeInCrossRegionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceByTimeInCrossRegionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateInstanceByTimeInCrossRegionResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateInstanceByTimeInCrossRegionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceByTimeInCrossRegionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询跨地域备份同步服务列表。 
public class DescribeBackupSynchronicitiesResult:NSObject,JdCloudResult
{
    /// BackupSynchronicities
    var backupSynchronicities:[BackupSynchronicity?]?

    /// TotalCount
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeBackupSynchronicitiesResultCodingKeys: String, CodingKey {
        case backupSynchronicities
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBackupSynchronicitiesResultCodingKeys.self)
        if decoderContainer.contains(.backupSynchronicities)
        {
            self.backupSynchronicities = try decoderContainer.decode([BackupSynchronicity?]?.self, forKey: .backupSynchronicities)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeBackupSynchronicitiesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBackupSynchronicitiesResultCodingKeys.self)
        try encoderContainer.encode(backupSynchronicities, forKey: .backupSynchronicities)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  删除一个跨地域备份同步服务。
public class DeleteBackupSynchronicityRequest:JdCloudRequest
{
    /// 跨地域备份同步服务ID
    var serviceId:String


    public init(regionId: String,serviceId:String){
        self.serviceId = serviceId
        super.init(regionId: regionId)
    }


    enum DeleteBackupSynchronicityRequestRequestCodingKeys: String, CodingKey {
        case serviceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBackupSynchronicityRequestRequestCodingKeys.self)
        try encoderContainer.encode(serviceId, forKey: .serviceId)

    }
}


///  创建数据库账号，用户可以使用客户端，应用程序等通过该账号和密码登录RDS数据库实例。&lt;br&gt;为便于管理和恢复，RDS对账号进行了限制，数据库账号只能通过控制台或者OpenAPI进行创建、删除账号以及对账号授权等，用户不能通过SQL语句对账号进行相关操作。
public class CreateAccountRequest:JdCloudRequest
{
    /// 账号名，在同一个RDS实例中，账号名不能重复。账号名的具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
    var accountName:String

    /// 密码,密码的具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
    var accountPassword:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,accountName:String,accountPassword:String,instanceId:String){
        self.accountName = accountName
        self.accountPassword = accountPassword
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum CreateAccountRequestRequestCodingKeys: String, CodingKey {
        case accountName
        case accountPassword
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAccountRequestRequestCodingKeys.self)
        try encoderContainer.encode(accountName, forKey: .accountName)
        try encoderContainer.encode(accountPassword, forKey: .accountPassword)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  创建数据库账号，用户可以使用客户端，应用程序等通过该账号和密码登录RDS数据库实例。&lt;br&gt;为便于管理和恢复，RDS对账号进行了限制，数据库账号只能通过控制台或者OpenAPI进行创建、删除账号以及对账号授权等，用户不能通过SQL语句对账号进行相关操作。
public class CreateSuperAccountRequest:JdCloudRequest
{
    /// 账号名，在同一个RDS实例中，账号名不能重复。账号名的具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
    var accountName:String

    /// 密码,密码的具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
    var accountPassword:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,accountName:String,accountPassword:String,instanceId:String){
        self.accountName = accountName
        self.accountPassword = accountPassword
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum CreateSuperAccountRequestRequestCodingKeys: String, CodingKey {
        case accountName
        case accountPassword
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSuperAccountRequestRequestCodingKeys.self)
        try encoderContainer.encode(accountName, forKey: .accountName)
        try encoderContainer.encode(accountPassword, forKey: .accountPassword)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 取消该账号对某个数据库的所有权限。权限取消后，该账号将不能访问此数据库。取消账号对某个数据库的访问权限，不影响该账号对其他数据库的访问权限 
public class RevokePrivilegeResult:NSObject,JdCloudResult
{
}

///  重置数据库账号密码。如果用户忘记账号的密码，可以使用该接口重置指定账号密码。密码重置后，以前的密码将无法使用，必须使用重置后的新密码登录或连接数据库实例。
public class ResetPasswordRequest:JdCloudRequest
{
    /// 新密码，密码的具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
    var accountPassword:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 账号名，在同一个实例中账号名不能重复
    var accountName:String


    public init(regionId: String,accountPassword:String,instanceId:String,accountName:String){
        self.accountPassword = accountPassword
        self.instanceId = instanceId
        self.accountName = accountName
        super.init(regionId: regionId)
    }


    enum ResetPasswordRequestRequestCodingKeys: String, CodingKey {
        case accountPassword
        case instanceId
        case accountName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetPasswordRequestRequestCodingKeys.self)
        try encoderContainer.encode(accountPassword, forKey: .accountPassword)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(accountName, forKey: .accountName)

    }
}

public class DeleteAccountResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteAccountResult?;

    enum DeleteAccountResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteAccountResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteAccountResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteAccountResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAccountResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 授予账号的数据库访问权限，即该账号对数据库拥有什么权限。一个账号可以对多个数据库具有访问权限。&lt;br&gt;为便于管理，RDS对权限进行了归类，目前提供以下两种权限&lt;br&gt;- ro：只读权限，用户只能读取数据库中的数据，不能进行创建、插入、删除、更改等操作。&lt;br&gt;- rw：读写权限，用户可以对数据库进行增删改查等操作 
public class GrantPrivilegeResult:NSObject,JdCloudResult
{
}
/// 查看某个RDS实例下所有账号信息，包括账号名称、对各个数据库的访问权限信息等 
public class DescribeAccountsResult:NSObject,JdCloudResult
{
    /// Accounts
    var accounts:[Account?]?

    /// TotalCount
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeAccountsResultCodingKeys: String, CodingKey {
        case accounts
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAccountsResultCodingKeys.self)
        if decoderContainer.contains(.accounts)
        {
            self.accounts = try decoderContainer.decode([Account?]?.self, forKey: .accounts)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeAccountsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAccountsResultCodingKeys.self)
        try encoderContainer.encode(accounts, forKey: .accounts)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  授予账号的数据库访问权限，即该账号对数据库拥有什么权限。一个账号可以对多个数据库具有访问权限。&lt;br&gt;为便于管理，RDS对权限进行了归类，目前提供以下两种权限&lt;br&gt;- ro：只读权限，用户只能读取数据库中的数据，不能进行创建、插入、删除、更改等操作。&lt;br&gt;- rw：读写权限，用户可以对数据库进行增删改查等操作
public class GrantPrivilegeRequest:JdCloudRequest
{
    /// 账号的访问权限
    var accountPrivileges:[AccountPrivilege?]?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 账号名，在同一个实例中账号名不能重复
    var accountName:String


    public init(regionId: String,accountPrivileges:[AccountPrivilege?]?,instanceId:String,accountName:String){
        self.accountPrivileges = accountPrivileges
        self.instanceId = instanceId
        self.accountName = accountName
        super.init(regionId: regionId)
    }


    enum GrantPrivilegeRequestRequestCodingKeys: String, CodingKey {
        case accountPrivileges
        case instanceId
        case accountName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GrantPrivilegeRequestRequestCodingKeys.self)
        try encoderContainer.encode(accountPrivileges, forKey: .accountPrivileges)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(accountName, forKey: .accountName)

    }
}

public class CreateSuperAccountResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSuperAccountResult?;

    enum CreateSuperAccountResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSuperAccountResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSuperAccountResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSuperAccountResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSuperAccountResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  取消该账号对某个数据库的所有权限。权限取消后，该账号将不能访问此数据库。取消账号对某个数据库的访问权限，不影响该账号对其他数据库的访问权限
public class RevokePrivilegeRequest:JdCloudRequest
{
    /// 需要取消授权的数据库的名称。权限取消后，该账号将不能访问此数据库
    var dbNames:[String?]?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 账号名，在同一个实例中账号名不能重复
    var accountName:String


    public init(regionId: String,instanceId:String,accountName:String){
        self.instanceId = instanceId
        self.accountName = accountName
        super.init(regionId: regionId)
    }


    enum RevokePrivilegeRequestRequestCodingKeys: String, CodingKey {
        case dbNames
        case instanceId
        case accountName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RevokePrivilegeRequestRequestCodingKeys.self)
        try encoderContainer.encode(dbNames, forKey: .dbNames)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(accountName, forKey: .accountName)

    }
}


///  删除数据库账号，账号删除后不可恢复，用户无法再使用该账号登录RDS实例
public class DeleteAccountRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 账号名，在同一个实例中账号名不能重复
    var accountName:String


    public init(regionId: String,instanceId:String,accountName:String){
        self.instanceId = instanceId
        self.accountName = accountName
        super.init(regionId: regionId)
    }


    enum DeleteAccountRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case accountName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAccountRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(accountName, forKey: .accountName)

    }
}

public class RevokePrivilegeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RevokePrivilegeResult?;

    enum RevokePrivilegeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RevokePrivilegeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RevokePrivilegeResult?.self, forKey: .result) ?? nil
    }
}

public extension RevokePrivilegeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RevokePrivilegeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 重置数据库账号密码。如果用户忘记账号的密码，可以使用该接口重置指定账号密码。密码重置后，以前的密码将无法使用，必须使用重置后的新密码登录或连接数据库实例。 
public class ResetPasswordResult:NSObject,JdCloudResult
{
}

///  查看某个RDS实例下所有账号信息，包括账号名称、对各个数据库的访问权限信息等
public class DescribeAccountsRequest:JdCloudRequest
{
    /// 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页;
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为100，取值范围：[10,100]，用于查询列表的接口
    var pageSize:Int?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeAccountsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAccountsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeAccountsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAccountsResult?;

    enum DescribeAccountsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAccountsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAccountsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAccountsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAccountsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ResetPasswordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResetPasswordResult?;

    enum ResetPasswordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResetPasswordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResetPasswordResult?.self, forKey: .result) ?? nil
    }
}

public extension ResetPasswordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResetPasswordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GrantPrivilegeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GrantPrivilegeResult?;

    enum GrantPrivilegeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GrantPrivilegeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GrantPrivilegeResult?.self, forKey: .result) ?? nil
    }
}

public extension GrantPrivilegeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GrantPrivilegeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除数据库账号，账号删除后不可恢复，用户无法再使用该账号登录RDS实例 
public class DeleteAccountResult:NSObject,JdCloudResult
{
}
public class CreateAccountResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateAccountResult?;

    enum CreateAccountResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAccountResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateAccountResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateAccountResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAccountResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建数据库账号，用户可以使用客户端，应用程序等通过该账号和密码登录RDS数据库实例。&lt;br&gt;为便于管理和恢复，RDS对账号进行了限制，数据库账号只能通过控制台或者OpenAPI进行创建、删除账号以及对账号授权等，用户不能通过SQL语句对账号进行相关操作。 
public class CreateAccountResult:NSObject,JdCloudResult
{
}
/// 创建数据库账号，用户可以使用客户端，应用程序等通过该账号和密码登录RDS数据库实例。&lt;br&gt;为便于管理和恢复，RDS对账号进行了限制，数据库账号只能通过控制台或者OpenAPI进行创建、删除账号以及对账号授权等，用户不能通过SQL语句对账号进行相关操作。 
public class CreateSuperAccountResult:NSObject,JdCloudResult
{
}
/// 通过 PT-OSC 服务来处理 DDL 命令, 避免锁表。此接口暂是对部分用户开放 
public class AlterTableWithOnlineDDLResult:NSObject,JdCloudResult
{
}
public class AlterTableWithOnlineDDLResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AlterTableWithOnlineDDLResult?;

    enum AlterTableWithOnlineDDLResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AlterTableWithOnlineDDLResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AlterTableWithOnlineDDLResult?.self, forKey: .result) ?? nil
    }
}

public extension AlterTableWithOnlineDDLResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AlterTableWithOnlineDDLResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  通过 PT-OSC 服务来处理 DDL 命令, 避免锁表。此接口暂是对部分用户开放
public class AlterTableWithOnlineDDLRequest:JdCloudRequest
{
    /// DDL命令修改的库名
    var database:String

    /// DDL命令修改的表名
    var table:String

    /// 需要执行的的DDL命令
    var command:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,database:String,table:String,command:String,instanceId:String){
        self.database = database
        self.table = table
        self.command = command
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum AlterTableWithOnlineDDLRequestRequestCodingKeys: String, CodingKey {
        case database
        case table
        case command
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AlterTableWithOnlineDDLRequestRequestCodingKeys.self)
        try encoderContainer.encode(database, forKey: .database)
        try encoderContainer.encode(table, forKey: .table)
        try encoderContainer.encode(command, forKey: .command)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeIndexPerformanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeIndexPerformanceResult?;

    enum DescribeIndexPerformanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIndexPerformanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeIndexPerformanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeIndexPerformanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIndexPerformanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询MySQL实例的慢日志的详细信息。&lt;br&gt;- 仅支持MySQL 
public class DescribeSlowLogAttributesResult:NSObject,JdCloudResult
{
    /// 慢日志信息
    var slowLogsAttributes:[SlowLogAttributes?]?

    /// 总记录条数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeSlowLogAttributesResultCodingKeys: String, CodingKey {
        case slowLogsAttributes
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSlowLogAttributesResultCodingKeys.self)
        if decoderContainer.contains(.slowLogsAttributes)
        {
            self.slowLogsAttributes = try decoderContainer.decode([SlowLogAttributes?]?.self, forKey: .slowLogsAttributes)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeSlowLogAttributesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSlowLogAttributesResultCodingKeys.self)
        try encoderContainer.encode(slowLogsAttributes, forKey: .slowLogsAttributes)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeQueryPerformanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeQueryPerformanceResult?;

    enum DescribeQueryPerformanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQueryPerformanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeQueryPerformanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeQueryPerformanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQueryPerformanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeSlowLogAttributesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSlowLogAttributesResult?;

    enum DescribeSlowLogAttributesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSlowLogAttributesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSlowLogAttributesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSlowLogAttributesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSlowLogAttributesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeActiveQueryPerformanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeActiveQueryPerformanceResult?;

    enum DescribeActiveQueryPerformanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeActiveQueryPerformanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeActiveQueryPerformanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeActiveQueryPerformanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeActiveQueryPerformanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询MySQL实例的慢日志的详细信息。&lt;br&gt;- 仅支持MySQL
public class DescribeSlowLogAttributesRequest:JdCloudRequest
{
    /// 慢日志开始时间，格式为：YYYY-MM-DD HH:mm:ss，开始时间到当前时间不能大于 7 天, 开始时间不能大于结束时间，结束时间不能大于当前时间
    var startTime:String

    /// 慢日志结束时间，格式为：YYYY-MM-DD HH:mm:ss，开始时间到当前时间不能大于 7 天, 开始时间不能大于结束时间，结束时间不能大于当前时间
    var endTime:String

    /// 查询哪个数据库的慢日志，不填表示返回所有数据库的慢日志
    var dbName:String?

    /// 显示数据的页码，默认为1，取值范围：[-1,1000)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为10，取值范围：10、20、30、50、100
    var pageSize:Int?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,startTime:String,endTime:String,instanceId:String){
        self.startTime = startTime
        self.endTime = endTime
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeSlowLogAttributesRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case dbName
        case pageNumber
        case pageSize
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSlowLogAttributesRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(dbName, forKey: .dbName)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  根据用户定义的查询条件，获取正在执行中的SQL执行的性能信息。用户可以根据这些信息查找与SQL执行相关的性能瓶颈，并进行优化。&lt;br&gt;- 仅支持SQL Server
public class DescribeActiveQueryPerformanceRequest:JdCloudRequest
{
    /// 需要查询的数据库名，多个数据库名之间用英文逗号分隔，默认所有数据库
    var db:String?

    /// 返回执行时间大于等于threshold的记录，默认10，单位秒
    var threshold:Int?

    /// 显示数据的页码，默认为1，取值范围：[-1,1000)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为50，取值范围：[1,100]，只能为10的倍数
    var pageSize:Int?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeActiveQueryPerformanceRequestRequestCodingKeys: String, CodingKey {
        case db
        case threshold
        case pageNumber
        case pageSize
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeActiveQueryPerformanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(db, forKey: .db)
        try encoderContainer.encode(threshold, forKey: .threshold)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 查询MySQL实例的慢日志的概要信息。&lt;br&gt;- 仅支持MySQL 
public class DescribeSlowLogsResult:NSObject,JdCloudResult
{
    /// 慢日志信息
    var slowLogs:[SlowLogDigest?]?

    /// 总记录条数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeSlowLogsResultCodingKeys: String, CodingKey {
        case slowLogs
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSlowLogsResultCodingKeys.self)
        if decoderContainer.contains(.slowLogs)
        {
            self.slowLogs = try decoderContainer.decode([SlowLogDigest?]?.self, forKey: .slowLogs)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeSlowLogsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSlowLogsResultCodingKeys.self)
        try encoderContainer.encode(slowLogs, forKey: .slowLogs)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 根据用户定义的查询条件，获取正在执行中的SQL执行的性能信息。用户可以根据这些信息查找与SQL执行相关的性能瓶颈，并进行优化。&lt;br&gt;- 仅支持SQL Server 
public class DescribeActiveQueryPerformanceResult:NSObject,JdCloudResult
{
    /// 查询性能统计结果集
    var activeQueryPerformanceResult:[ActiveQueryPerformanceResult?]?

    /// 总记录条数
    var totalCount:Int?

    /// 当前数据的页码
    var pageNumber:Int?

    /// 每页显示的数据条数
    var pageSize:Int?



    public override init(){
        super.init()
    }

    enum DescribeActiveQueryPerformanceResultCodingKeys: String, CodingKey {
        case activeQueryPerformanceResult
        case totalCount
        case pageNumber
        case pageSize
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeActiveQueryPerformanceResultCodingKeys.self)
        if decoderContainer.contains(.activeQueryPerformanceResult)
        {
            self.activeQueryPerformanceResult = try decoderContainer.decode([ActiveQueryPerformanceResult?]?.self, forKey: .activeQueryPerformanceResult)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
    }
}
public extension DescribeActiveQueryPerformanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeActiveQueryPerformanceResultCodingKeys.self)
        try encoderContainer.encode(activeQueryPerformanceResult, forKey: .activeQueryPerformanceResult)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
    }
}
/// 根据用户定义的查询条件，获取索引性能的统计信息，并提供缺失索引及索引创建建议。用户可以根据这些信息查找与索引相关的性能瓶颈，并进行优化。&lt;br&gt;- 仅支持SQL Server 
public class DescribeIndexPerformanceResult:NSObject,JdCloudResult
{
    /// 当queryType为Missing时，返回结果集为MissingIndexResult&lt;br&gt;当queryType为其他值时，该字段为空
    var missingIndexResult:[MissingIndexResult?]?

    /// 当queryType为Missing时，该字段为空&lt;br&gt;当queryType为其他值时，返回IndexPerformanceResult
    var indexPerformanceResult:[IndexPerformanceResult?]?

    /// 总记录条数
    var totalCount:Int?

    /// 当前数据的页码
    var pageNumber:Int?

    /// 每页显示的数据条数
    var pageSize:Int?



    public override init(){
        super.init()
    }

    enum DescribeIndexPerformanceResultCodingKeys: String, CodingKey {
        case missingIndexResult
        case indexPerformanceResult
        case totalCount
        case pageNumber
        case pageSize
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIndexPerformanceResultCodingKeys.self)
        if decoderContainer.contains(.missingIndexResult)
        {
            self.missingIndexResult = try decoderContainer.decode([MissingIndexResult?]?.self, forKey: .missingIndexResult)
        }
        if decoderContainer.contains(.indexPerformanceResult)
        {
            self.indexPerformanceResult = try decoderContainer.decode([IndexPerformanceResult?]?.self, forKey: .indexPerformanceResult)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
    }
}
public extension DescribeIndexPerformanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIndexPerformanceResultCodingKeys.self)
        try encoderContainer.encode(missingIndexResult, forKey: .missingIndexResult)
        try encoderContainer.encode(indexPerformanceResult, forKey: .indexPerformanceResult)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
    }
}

///  根据用户定义的查询条件，获取索引性能的统计信息，并提供缺失索引及索引创建建议。用户可以根据这些信息查找与索引相关的性能瓶颈，并进行优化。&lt;br&gt;- 仅支持SQL Server
public class DescribeIndexPerformanceRequest:JdCloudRequest
{
    /// 查询类型，不同的查询类型按照相应的字段从高到低返回结果。&lt;br&gt;支持如下类型：&lt;br&gt;Missing：缺失索引&lt;br&gt;Size：索引大小，单位KB&lt;br&gt;Updates：索引更新次数&lt;br&gt;Scans：表扫描次数&lt;br&gt;Used：最少使用&lt;br&gt;
    var queryType:String

    /// 需要查询的数据库名，多个数据库名之间用英文逗号分隔，默认所有数据库
    var db:String?

    /// 显示数据的页码，默认为1，取值范围：[-1,1000)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为50，取值范围：[1,100]，只能为10的倍数，用于查询列表的接口
    var pageSize:Int?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,queryType:String,instanceId:String){
        self.queryType = queryType
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeIndexPerformanceRequestRequestCodingKeys: String, CodingKey {
        case queryType
        case db
        case pageNumber
        case pageSize
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIndexPerformanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(queryType, forKey: .queryType)
        try encoderContainer.encode(db, forKey: .db)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询MySQL实例的慢日志的概要信息。&lt;br&gt;- 仅支持MySQL
public class DescribeSlowLogsRequest:JdCloudRequest
{
    /// 慢日志开始时间，格式为：YYYY-MM-DD HH:mm:ss，开始时间到当前时间不能大于 7 天，开始时间不能大于结束时间，结束时间不能大于当前时间
    var startTime:String

    /// 慢日志结束时间，格式为：YYYY-MM-DD HH:mm:ss，开始时间到当前时间不能大于 7 天，开始时间不能大于结束时间，结束时间不能大于当前时间
    var endTime:String

    /// 查询哪个数据库的慢日志，不填表示返回所有数据库的慢日志
    var dbName:String?

    /// 显示数据的页码，默认为1，取值范围：[-1,1000)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为10，取值范围：10、20、30、50、100
    var pageSize:Int?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,startTime:String,endTime:String,instanceId:String){
        self.startTime = startTime
        self.endTime = endTime
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeSlowLogsRequestRequestCodingKeys: String, CodingKey {
        case startTime
        case endTime
        case dbName
        case pageNumber
        case pageSize
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSlowLogsRequestRequestCodingKeys.self)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(dbName, forKey: .dbName)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  根据用户定义的查询条件，获取SQL执行的性能统计信息，例如慢SQL等。用户可以根据这些信息查找与SQL执行相关的性能瓶颈，并进行优化。&lt;br&gt;- 仅支持SQL Server
public class DescribeQueryPerformanceRequest:JdCloudRequest
{
    /// 查询类型，不同的查询类型按照相应的字段从高到低返回结果。&lt;br&gt;支持如下类型：&lt;br&gt;ExecutionCount：执行次数&lt;br&gt;LastRows：上次返回行数&lt;br&gt;ElapsedTime：平均执行时间&lt;br&gt;CPUTime：平均CPU时间&lt;br&gt;LogicalReads：平均逻辑读&lt;br&gt;LogicalWrites：平均逻辑写&lt;br&gt;PhysicalReads：平均物理读&lt;br&gt;
    var queryType:String

    /// 只返回查询条件大于等于threshold的记录，默认为0
    var threshold:Int?

    /// 显示数据的页码，默认为1，取值范围：[-1,1000]。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为50，取值范围：[1,100]，只能为10的倍数，用于查询列表的接口
    var pageSize:Int?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,queryType:String,instanceId:String){
        self.queryType = queryType
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeQueryPerformanceRequestRequestCodingKeys: String, CodingKey {
        case queryType
        case threshold
        case pageNumber
        case pageSize
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQueryPerformanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(queryType, forKey: .queryType)
        try encoderContainer.encode(threshold, forKey: .threshold)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 根据用户定义的查询条件，获取SQL执行的性能统计信息，例如慢SQL等。用户可以根据这些信息查找与SQL执行相关的性能瓶颈，并进行优化。&lt;br&gt;- 仅支持SQL Server 
public class DescribeQueryPerformanceResult:NSObject,JdCloudResult
{
    /// 查询性能统计结果集
    var queryPerformanceResult:[QueryPerformanceResult?]?

    /// 总记录条数
    var totalCount:Int?

    /// 当前数据的页码
    var pageNumber:Int?

    /// 每页显示的数据条数
    var pageSize:Int?



    public override init(){
        super.init()
    }

    enum DescribeQueryPerformanceResultCodingKeys: String, CodingKey {
        case queryPerformanceResult
        case totalCount
        case pageNumber
        case pageSize
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQueryPerformanceResultCodingKeys.self)
        if decoderContainer.contains(.queryPerformanceResult)
        {
            self.queryPerformanceResult = try decoderContainer.decode([QueryPerformanceResult?]?.self, forKey: .queryPerformanceResult)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
    }
}
public extension DescribeQueryPerformanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQueryPerformanceResultCodingKeys.self)
        try encoderContainer.encode(queryPerformanceResult, forKey: .queryPerformanceResult)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
    }
}
public class DescribeSlowLogsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSlowLogsResult?;

    enum DescribeSlowLogsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSlowLogsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSlowLogsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSlowLogsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSlowLogsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查看SQL Server实例的配置参数&lt;br&gt;- 仅支持SQL Server
public class DescribeParametersRequest:JdCloudRequest
{
    /// Instance ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeParametersRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParametersRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeParametersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeParametersResult?;

    enum DescribeParametersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeParametersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeParametersResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeParametersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParametersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改SQL Server实例的配置参数，目前支持以下参数:max_worker_threads,max_degree_of_parallelism,max_server_memory_(MB)。 部分参数修改后，需要重启才能生效，具体可以参考微软的相关文档。&lt;br&gt;- 仅支持SQL Server 
public class ModifyParametersResult:NSObject,JdCloudResult
{
}

///  修改SQL Server实例的配置参数，目前支持以下参数:max_worker_threads,max_degree_of_parallelism,max_server_memory_(MB)。 部分参数修改后，需要重启才能生效，具体可以参考微软的相关文档。&lt;br&gt;- 仅支持SQL Server
public class ModifyParametersRequest:JdCloudRequest
{
    /// 修改的实例参数
    var parameters:[Parameter?]?

    /// Instance ID
    var instanceId:String


    public init(regionId: String,parameters:[Parameter?]?,instanceId:String){
        self.parameters = parameters
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyParametersRequestRequestCodingKeys: String, CodingKey {
        case parameters
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyParametersRequestRequestCodingKeys.self)
        try encoderContainer.encode(parameters, forKey: .parameters)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class ModifyParametersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyParametersResult?;

    enum ModifyParametersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyParametersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyParametersResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyParametersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyParametersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看SQL Server实例的配置参数&lt;br&gt;- 仅支持SQL Server 
public class DescribeParametersResult:NSObject,JdCloudResult
{
    /// 实例配置参数列表
    var parameters:[DBInstanceParameter?]?



    public override init(){
        super.init()
    }

    enum DescribeParametersResultCodingKeys: String, CodingKey {
        case parameters
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeParametersResultCodingKeys.self)
        if decoderContainer.contains(.parameters)
        {
            self.parameters = try decoderContainer.decode([DBInstanceParameter?]?.self, forKey: .parameters)
        }
    }
}
public extension DescribeParametersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParametersResultCodingKeys.self)
        try encoderContainer.encode(parameters, forKey: .parameters)
    }
}

///  查看参数组的参数&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL
public class DescribeParameterGroupParametersRequest:JdCloudRequest
{
    /// Parameter Group ID
    var parameterGroupId:String


    public init(regionId: String,parameterGroupId:String){
        self.parameterGroupId = parameterGroupId
        super.init(regionId: regionId)
    }


    enum DescribeParameterGroupParametersRequestRequestCodingKeys: String, CodingKey {
        case parameterGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParameterGroupParametersRequestRequestCodingKeys.self)
        try encoderContainer.encode(parameterGroupId, forKey: .parameterGroupId)

    }
}

public class ModifyParameterGroupAttributeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyParameterGroupAttributeResult?;

    enum ModifyParameterGroupAttributeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyParameterGroupAttributeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyParameterGroupAttributeResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyParameterGroupAttributeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyParameterGroupAttributeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeParameterModifyRecordsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeParameterModifyRecordsResult?;

    enum DescribeParameterModifyRecordsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeParameterModifyRecordsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeParameterModifyRecordsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeParameterModifyRecordsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParameterModifyRecordsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改参数组名称，描述&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL
public class ModifyParameterGroupAttributeRequest:JdCloudRequest
{
    /// 参数组名称
    var parameterGroupName:String

    /// 参数组描述
    var descriptionValue:String?

    /// Parameter Group ID
    var parameterGroupId:String


    public init(regionId: String,parameterGroupName:String,parameterGroupId:String){
        self.parameterGroupName = parameterGroupName
        self.parameterGroupId = parameterGroupId
        super.init(regionId: regionId)
    }


    enum ModifyParameterGroupAttributeRequestRequestCodingKeys: String, CodingKey {
        case parameterGroupName
        case descriptionValue = "description"
        case parameterGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyParameterGroupAttributeRequestRequestCodingKeys.self)
        try encoderContainer.encode(parameterGroupName, forKey: .parameterGroupName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(parameterGroupId, forKey: .parameterGroupId)

    }
}

public class DescribeParameterGroupParametersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeParameterGroupParametersResult?;

    enum DescribeParameterGroupParametersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeParameterGroupParametersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeParameterGroupParametersResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeParameterGroupParametersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParameterGroupParametersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeParameterGroupAttachedInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeParameterGroupAttachedInstancesResult?;

    enum DescribeParameterGroupAttachedInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeParameterGroupAttachedInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeParameterGroupAttachedInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeParameterGroupAttachedInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParameterGroupAttachedInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查看参数组绑定的云数据库实例&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL
public class DescribeParameterGroupAttachedInstancesRequest:JdCloudRequest
{
    /// 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为10，取值范围：[10,100]，且为10的整数倍
    var pageSize:Int?

    /// Parameter Group ID
    var parameterGroupId:String


    public init(regionId: String,parameterGroupId:String){
        self.parameterGroupId = parameterGroupId
        super.init(regionId: regionId)
    }


    enum DescribeParameterGroupAttachedInstancesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case parameterGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParameterGroupAttachedInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(parameterGroupId, forKey: .parameterGroupId)

    }
}


///  拷贝参数组
public class CopyParameterGroupRequest:JdCloudRequest
{
    /// 参数组ID
    var parameterGroupId:String

    /// 参数组的名字
    var parameterGroupName:String

    /// 参数组的描述
    var descriptionValue:String?


    public init(regionId: String,parameterGroupId:String,parameterGroupName:String){
        self.parameterGroupId = parameterGroupId
        self.parameterGroupName = parameterGroupName
        super.init(regionId: regionId)
    }


    enum CopyParameterGroupRequestRequestCodingKeys: String, CodingKey {
        case parameterGroupId
        case parameterGroupName
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CopyParameterGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(parameterGroupId, forKey: .parameterGroupId)
        try encoderContainer.encode(parameterGroupName, forKey: .parameterGroupName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}


///  创建一个参数组&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL
public class CreateParameterGroupRequest:JdCloudRequest
{
    /// 实例引擎类型，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
    var engine:String

    /// 实例引擎版本，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
    var engineVersion:String

    /// 参数组的名字
    var parameterGroupName:String

    /// 参数组的描述
    var descriptionValue:String?


    public init(regionId: String,engine:String,engineVersion:String,parameterGroupName:String){
        self.engine = engine
        self.engineVersion = engineVersion
        self.parameterGroupName = parameterGroupName
        super.init(regionId: regionId)
    }


    enum CreateParameterGroupRequestRequestCodingKeys: String, CodingKey {
        case engine
        case engineVersion
        case parameterGroupName
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateParameterGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(engine, forKey: .engine)
        try encoderContainer.encode(engineVersion, forKey: .engineVersion)
        try encoderContainer.encode(parameterGroupName, forKey: .parameterGroupName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}

public class CopyParameterGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CopyParameterGroupResult?;

    enum CopyParameterGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CopyParameterGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CopyParameterGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension CopyParameterGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CopyParameterGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateParameterGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateParameterGroupResult?;

    enum CreateParameterGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateParameterGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateParameterGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateParameterGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateParameterGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteParameterGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteParameterGroupResult?;

    enum DeleteParameterGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteParameterGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteParameterGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteParameterGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteParameterGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看参数组绑定的云数据库实例&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL 
public class DescribeParameterGroupAttachedInstancesResult:NSObject,JdCloudResult
{
    /// Instances
    var instances:[AttachedDBInstance?]?

    /// TotalCount
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeParameterGroupAttachedInstancesResultCodingKeys: String, CodingKey {
        case instances
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeParameterGroupAttachedInstancesResultCodingKeys.self)
        if decoderContainer.contains(.instances)
        {
            self.instances = try decoderContainer.decode([AttachedDBInstance?]?.self, forKey: .instances)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeParameterGroupAttachedInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParameterGroupAttachedInstancesResultCodingKeys.self)
        try encoderContainer.encode(instances, forKey: .instances)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 查看参数的修改历史&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL 
public class DescribeParameterModifyRecordsResult:NSObject,JdCloudResult
{
    /// Records
    var records:[ParameterModifyRecords?]?

    /// TotalCount
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeParameterModifyRecordsResultCodingKeys: String, CodingKey {
        case records
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeParameterModifyRecordsResultCodingKeys.self)
        if decoderContainer.contains(.records)
        {
            self.records = try decoderContainer.decode([ParameterModifyRecords?]?.self, forKey: .records)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeParameterModifyRecordsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParameterModifyRecordsResultCodingKeys.self)
        try encoderContainer.encode(records, forKey: .records)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 修改参数组名称，描述&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL 
public class ModifyParameterGroupAttributeResult:NSObject,JdCloudResult
{
}

///  删除参数组&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL
public class DeleteParameterGroupRequest:JdCloudRequest
{
    /// Parameter Group ID
    var parameterGroupId:String


    public init(regionId: String,parameterGroupId:String){
        self.parameterGroupId = parameterGroupId
        super.init(regionId: regionId)
    }


    enum DeleteParameterGroupRequestRequestCodingKeys: String, CodingKey {
        case parameterGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteParameterGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(parameterGroupId, forKey: .parameterGroupId)

    }
}

/// 删除参数组&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL 
public class DeleteParameterGroupResult:NSObject,JdCloudResult
{
}

///  查看参数的修改历史&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL
public class DescribeParameterModifyRecordsRequest:JdCloudRequest
{
    /// 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页;
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为10，取值范围：[10,100]，且为10的整数倍
    var pageSize:Int?

    /// 查询开始时间，格式为：YYYY-MM-DD HH:mm:ss
    var startTime:String?

    /// 查询结束时间，格式为：YYYY-MM-DD HH:mm:ss
    var endTime:String?

    /// Parameter Group ID
    var parameterGroupId:String


    public init(regionId: String,parameterGroupId:String){
        self.parameterGroupId = parameterGroupId
        super.init(regionId: regionId)
    }


    enum DescribeParameterModifyRecordsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case startTime
        case endTime
        case parameterGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParameterModifyRecordsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(parameterGroupId, forKey: .parameterGroupId)

    }
}

public class DescribeParameterGroupsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeParameterGroupsResult?;

    enum DescribeParameterGroupsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeParameterGroupsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeParameterGroupsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeParameterGroupsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParameterGroupsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改参数组的参数&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL
public class ModifyParameterGroupParametersRequest:JdCloudRequest
{
    /// 修改的参数
    var parameters:[Parameter?]?

    /// Parameter Group ID
    var parameterGroupId:String


    public init(regionId: String,parameters:[Parameter?]?,parameterGroupId:String){
        self.parameters = parameters
        self.parameterGroupId = parameterGroupId
        super.init(regionId: regionId)
    }


    enum ModifyParameterGroupParametersRequestRequestCodingKeys: String, CodingKey {
        case parameters
        case parameterGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyParameterGroupParametersRequestRequestCodingKeys.self)
        try encoderContainer.encode(parameters, forKey: .parameters)
        try encoderContainer.encode(parameterGroupId, forKey: .parameterGroupId)

    }
}


///  获取当前账号下所有的参数组列表&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL
public class DescribeParameterGroupsRequest:JdCloudRequest
{
    /// 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页;
    var pageNumber:Int?

    /// 每页显示的数据条数，默认为10，取值范围：[10,100]，且为10的整数倍
    var pageSize:Int?




    enum DescribeParameterGroupsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParameterGroupsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

/// 查看参数组的参数&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL 
public class DescribeParameterGroupParametersResult:NSObject,JdCloudResult
{
    /// Parameters
    var parameters:[ParameterGroupParameter?]?



    public override init(){
        super.init()
    }

    enum DescribeParameterGroupParametersResultCodingKeys: String, CodingKey {
        case parameters
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeParameterGroupParametersResultCodingKeys.self)
        if decoderContainer.contains(.parameters)
        {
            self.parameters = try decoderContainer.decode([ParameterGroupParameter?]?.self, forKey: .parameters)
        }
    }
}
public extension DescribeParameterGroupParametersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParameterGroupParametersResultCodingKeys.self)
        try encoderContainer.encode(parameters, forKey: .parameters)
    }
}
/// 获取当前账号下所有的参数组列表&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL 
public class DescribeParameterGroupsResult:NSObject,JdCloudResult
{
    /// ParameterGroups
    var parameterGroups:[ParameterGroup?]?

    /// TotalCount
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeParameterGroupsResultCodingKeys: String, CodingKey {
        case parameterGroups
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeParameterGroupsResultCodingKeys.self)
        if decoderContainer.contains(.parameterGroups)
        {
            self.parameterGroups = try decoderContainer.decode([ParameterGroup?]?.self, forKey: .parameterGroups)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeParameterGroupsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeParameterGroupsResultCodingKeys.self)
        try encoderContainer.encode(parameterGroups, forKey: .parameterGroups)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 创建一个参数组&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL 
public class CreateParameterGroupResult:NSObject,JdCloudResult
{
    /// ParameterGroupId
    var parameterGroupId:String?



    public override init(){
        super.init()
    }

    enum CreateParameterGroupResultCodingKeys: String, CodingKey {
        case parameterGroupId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateParameterGroupResultCodingKeys.self)
        if decoderContainer.contains(.parameterGroupId)
        {
            self.parameterGroupId = try decoderContainer.decode(String?.self, forKey: .parameterGroupId)
        }
    }
}
public extension CreateParameterGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateParameterGroupResultCodingKeys.self)
        try encoderContainer.encode(parameterGroupId, forKey: .parameterGroupId)
    }
}
public class ModifyParameterGroupParametersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyParameterGroupParametersResult?;

    enum ModifyParameterGroupParametersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyParameterGroupParametersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyParameterGroupParametersResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyParameterGroupParametersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyParameterGroupParametersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改参数组的参数&lt;br&gt;- 仅支持MySQL，Percona，MariaDB，PostgreSQL 
public class ModifyParameterGroupParametersResult:NSObject,JdCloudResult
{
}
/// 拷贝参数组 
public class CopyParameterGroupResult:NSObject,JdCloudResult
{
    /// ParameterGroupId
    var parameterGroupId:String?



    public override init(){
        super.init()
    }

    enum CopyParameterGroupResultCodingKeys: String, CodingKey {
        case parameterGroupId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CopyParameterGroupResultCodingKeys.self)
        if decoderContainer.contains(.parameterGroupId)
        {
            self.parameterGroupId = try decoderContainer.decode(String?.self, forKey: .parameterGroupId)
        }
    }
}
public extension CopyParameterGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CopyParameterGroupResultCodingKeys.self)
        try encoderContainer.encode(parameterGroupId, forKey: .parameterGroupId)
    }
}
