/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   性能统计
   性能统计相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 根据用户定义的查询条件，获取索引性能的统计信息，并提供缺失索引及索引创建建议。用户可以根据这些信息查找与索引相关的性能瓶颈，并进行优化。&lt;br&gt;- 仅支持SQL Server
@objc(DescribeIndexPerformanceResult)
public class DescribeIndexPerformanceResult:NSObject,JdCloudResult
{
    /// 当queryType为Missing时，返回结果集为MissingIndexResult&lt;br&gt;当queryType为其他值时，该字段为空
    var missingIndexResult:[MissingIndexResult?]?

    /// 当queryType为Missing时，该字段为空&lt;br&gt;当queryType为其他值时，返回IndexPerformanceResult
    var indexPerformanceResult:[IndexPerformanceResult?]?

    /// 总记录条数
    var totalCount:Int?

    /// 当前数据的页码
    var pageNumber:Int?

    /// 每页显示的数据条数
    var pageSize:Int?



    public override init(){
        super.init()
    }

    enum DescribeIndexPerformanceResultCodingKeys: String, CodingKey {
        case missingIndexResult
        case indexPerformanceResult
        case totalCount
        case pageNumber
        case pageSize
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIndexPerformanceResultCodingKeys.self)
        if decoderContainer.contains(.missingIndexResult)
        {
            self.missingIndexResult = try decoderContainer.decode([MissingIndexResult?]?.self, forKey: .missingIndexResult)
        }
        if decoderContainer.contains(.indexPerformanceResult)
        {
            self.indexPerformanceResult = try decoderContainer.decode([IndexPerformanceResult?]?.self, forKey: .indexPerformanceResult)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
    }
}
public extension DescribeIndexPerformanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIndexPerformanceResultCodingKeys.self)
        try encoderContainer.encode(missingIndexResult, forKey: .missingIndexResult)
        try encoderContainer.encode(indexPerformanceResult, forKey: .indexPerformanceResult)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
    }
}
