/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   实例管理
   实例管理相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  创建MySQL的只读实例&lt;br&gt;- 仅支持MySQL
@objc(CreateROInstanceRequest)
public class CreateROInstanceRequest:JdCloudRequest
{
    /// 实例名称，具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
    var instanceName:String

    /// 只读实例规格FlavorId
    var instanceClass:String

    /// 存储类型，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)，缺省值为：LOCAL_SSD
    var instanceStorageType:String?

    /// 磁盘空间
    var instanceStorageGB:Int

    /// 可用区ID
    var azId:String

    /// VPC的ID，如果没有填写就保持和常规实例一样的VPC
    var vpcId:String?

    /// 子网ID，如果没有填写就保持和常规实例一样的subnet
    var subnetId:String?

    /// 参数组ID，缺省采用和常规实例一样的参数组
    var parameterGroup:String?

    /// 实例数据加密(存储类型为云硬盘才支持数据加密)。false：不加密；true：加密。缺省为false。
    var storageEncrypted:Bool?

    /// 创建只读实例的数目,缺省为1
    var count:Int?

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String


    public init(regionId: String,instanceName:String,instanceClass:String,instanceStorageGB:Int,azId:String,instanceId:String){
        self.instanceName = instanceName
        self.instanceClass = instanceClass
        self.instanceStorageGB = instanceStorageGB
        self.azId = azId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum CreateROInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceName
        case instanceClass
        case instanceStorageType
        case instanceStorageGB
        case azId
        case vpcId
        case subnetId
        case parameterGroup
        case storageEncrypted
        case count
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateROInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceName, forKey: .instanceName)
        try encoderContainer.encode(instanceClass, forKey: .instanceClass)
        try encoderContainer.encode(instanceStorageType, forKey: .instanceStorageType)
        try encoderContainer.encode(instanceStorageGB, forKey: .instanceStorageGB)
        try encoderContainer.encode(azId, forKey: .azId)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(subnetId, forKey: .subnetId)
        try encoderContainer.encode(parameterGroup, forKey: .parameterGroup)
        try encoderContainer.encode(storageEncrypted, forKey: .storageEncrypted)
        try encoderContainer.encode(count, forKey: .count)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}
