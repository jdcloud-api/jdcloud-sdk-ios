/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   跨地域备份同步服务
   API related to Relational Database Service

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 创建一个跨地域备份同步服务。&lt;br&gt;- 仅支持MySQL
@objc(CreateBackupSynchronicityResult)
public class CreateBackupSynchronicityResult:NSObject,JdCloudResult
{
    /// 跨地域备份同步服务ID
    var serviceId:String?



    public override init(){
        super.init()
    }

    enum CreateBackupSynchronicityResultCodingKeys: String, CodingKey {
        case serviceId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBackupSynchronicityResultCodingKeys.self)
        if decoderContainer.contains(.serviceId)
        {
            self.serviceId = try decoderContainer.decode(String?.self, forKey: .serviceId)
        }
    }
}
public extension CreateBackupSynchronicityResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBackupSynchronicityResultCodingKeys.self)
        try encoderContainer.encode(serviceId, forKey: .serviceId)
    }
}
