/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  parameterModifyRecords
@objc(ParameterModifyRecords)
public class ParameterModifyRecords:NSObject,Codable{
    /// 参数名称
    var name:String?
    /// 修改前的参数值
    var preModify:String?
    /// 修改后的参数值
    var postModify:String?
    /// 修改时间
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum ParameterModifyRecordsCodingKeys: String, CodingKey {
        case name
        case preModify
        case postModify
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ParameterModifyRecordsCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.preModify)
        {
            self.preModify = try decoderContainer.decode(String?.self, forKey: .preModify)
        }
        if decoderContainer.contains(.postModify)
        {
            self.postModify = try decoderContainer.decode(String?.self, forKey: .postModify)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension ParameterModifyRecords{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ParameterModifyRecordsCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(preModify, forKey: .preModify)
         try encoderContainer.encode(postModify, forKey: .postModify)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
