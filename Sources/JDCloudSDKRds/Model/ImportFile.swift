/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  importFile
@objc(ImportFile)
public class ImportFile:NSObject,Codable{
    /// 文件名称
    var name:String?
    /// 如果该文件是共享文件，则有全局ID，如不是共享文件，则为空。该全局ID在文件删除时，需要用到
    var sharedFileGid:String?
    /// 文件大小，单位Byte
    var sizeByte:Int?
    /// 文件上传完成时间，格式为：YYYY-MM-DD HH:mm:ss
    var uploadTime:String?
    /// 是否所属当前实例.&lt;br&gt; 1：当前实例；&lt;br&gt;0：不是当前实例，为共享文件
    var isLocal:String?
    /// 文件状态&lt;br&gt;- 仅支持SQL Server
    var status:String?
    /// 导入完成时间,格式为：YYYY-MM-DD HH:mm:ss&lt;br&gt;- 仅支持SQL Server
    var importTime:String?



    public override init(){
            super.init()
    }

    enum ImportFileCodingKeys: String, CodingKey {
        case name
        case sharedFileGid
        case sizeByte
        case uploadTime
        case isLocal
        case status
        case importTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImportFileCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.sharedFileGid)
        {
            self.sharedFileGid = try decoderContainer.decode(String?.self, forKey: .sharedFileGid)
        }
        if decoderContainer.contains(.sizeByte)
        {
            self.sizeByte = try decoderContainer.decode(Int?.self, forKey: .sizeByte)
        }
        if decoderContainer.contains(.uploadTime)
        {
            self.uploadTime = try decoderContainer.decode(String?.self, forKey: .uploadTime)
        }
        if decoderContainer.contains(.isLocal)
        {
            self.isLocal = try decoderContainer.decode(String?.self, forKey: .isLocal)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.importTime)
        {
            self.importTime = try decoderContainer.decode(String?.self, forKey: .importTime)
        }
    }
}
public extension ImportFile{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportFileCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(sharedFileGid, forKey: .sharedFileGid)
         try encoderContainer.encode(sizeByte, forKey: .sizeByte)
         try encoderContainer.encode(uploadTime, forKey: .uploadTime)
         try encoderContainer.encode(isLocal, forKey: .isLocal)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(importTime, forKey: .importTime)
    }
}
