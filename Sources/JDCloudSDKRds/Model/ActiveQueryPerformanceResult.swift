/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   性能统计
   性能统计相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  activeQueryPerformanceResult
@objc(ActiveQueryPerformanceResult)
public class ActiveQueryPerformanceResult:NSObject,Codable{
    /// sql语句
    var sql:String?
    /// 开始执行时间，格式为YYYY-MM-DD hh:mm:ss
    var startTime:String?
    /// 执行时长，单位秒
    var elapsedTime:Int?
    /// 数据库名
    var db:String?
    /// 该SQL执行时的Session ID
    var sessionId:String?
    /// 执行该SQL的用户名
    var user:String?
    /// SQL 的执行状态
    var status:String?



    public override init(){
            super.init()
    }

    enum ActiveQueryPerformanceResultCodingKeys: String, CodingKey {
        case sql
        case startTime
        case elapsedTime
        case db
        case sessionId
        case user
        case status
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ActiveQueryPerformanceResultCodingKeys.self)
        self.sql = try decoderContainer.decode(String?.self, forKey: .sql)
        self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        self.elapsedTime = try decoderContainer.decode(Int?.self, forKey: .elapsedTime)
        self.db = try decoderContainer.decode(String?.self, forKey: .db)
        self.sessionId = try decoderContainer.decode(String?.self, forKey: .sessionId)
        self.user = try decoderContainer.decode(String?.self, forKey: .user)
        self.status = try decoderContainer.decode(String?.self, forKey: .status)
    }
}
public extension ActiveQueryPerformanceResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ActiveQueryPerformanceResultCodingKeys.self)
         try encoderContainer.encode(sql, forKey: .sql)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(elapsedTime, forKey: .elapsedTime)
         try encoderContainer.encode(db, forKey: .db)
         try encoderContainer.encode(sessionId, forKey: .sessionId)
         try encoderContainer.encode(user, forKey: .user)
         try encoderContainer.encode(status, forKey: .status)
    }
}
