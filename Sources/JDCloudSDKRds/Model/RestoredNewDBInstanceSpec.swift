/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCharge

///  restoredNewDBInstanceSpec
@objc(RestoredNewDBInstanceSpec)
public class RestoredNewDBInstanceSpec:NSObject,Codable{
    /// 数据库实例名，名称的限制可参考[帮助中心文档](../../../documentation/Cloud-Database-and-Cache/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
    var instanceName:String?
    /// 实例规格代码，可以通过[describeInstanceClasses](../instance/describeInstanceClasses.md)接口获取
    /// Required:true
    var instanceClass:String
    /// 磁盘大小，单位GB
    /// Required:true
    var instanceStorageGB:Int
    /// 可用区ID， 第一个ID必须为主实例所在的可用区。如两个可用区一样，也需输入两个azId
    /// Required:true
    var azId:[String?]
    /// VPC的ID
    /// Required:true
    var vpcId:String
    /// 子网ID
    /// Required:true
    var subnetId:String
    /// 参数组ID, 缺省系统会创建一个默认参数组&lt;br&gt;- 仅支持MySQL
    var parameterGroup:String?
    /// 计费规格，包括计费类型，计费周期等
    /// Required:true
    var chargeSpec:ChargeSpec



    public  init(instanceClass:String,instanceStorageGB:Int,azId:[String?],vpcId:String,subnetId:String,chargeSpec:ChargeSpec){
             self.instanceClass = instanceClass
             self.instanceStorageGB = instanceStorageGB
             self.azId = azId
             self.vpcId = vpcId
             self.subnetId = subnetId
             self.chargeSpec = chargeSpec
    }

    enum RestoredNewDBInstanceSpecCodingKeys: String, CodingKey {
        case instanceName
        case instanceClass
        case instanceStorageGB
        case azId
        case vpcId
        case subnetId
        case parameterGroup
        case chargeSpec
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RestoredNewDBInstanceSpecCodingKeys.self)
        if decoderContainer.contains(.instanceName)
        {
            self.instanceName = try decoderContainer.decode(String?.self, forKey: .instanceName)
        }
        self.instanceClass = try decoderContainer.decode(String.self, forKey: .instanceClass)
        self.instanceStorageGB = try decoderContainer.decode(Int.self, forKey: .instanceStorageGB)
        self.azId = try decoderContainer.decode([String?].self, forKey: .azId)
        self.vpcId = try decoderContainer.decode(String.self, forKey: .vpcId)
        self.subnetId = try decoderContainer.decode(String.self, forKey: .subnetId)
        if decoderContainer.contains(.parameterGroup)
        {
            self.parameterGroup = try decoderContainer.decode(String?.self, forKey: .parameterGroup)
        }
        self.chargeSpec = try decoderContainer.decode(ChargeSpec.self, forKey: .chargeSpec)
    }
}
public extension RestoredNewDBInstanceSpec{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoredNewDBInstanceSpecCodingKeys.self)
         try encoderContainer.encode(instanceName, forKey: .instanceName)
         try encoderContainer.encode(instanceClass, forKey: .instanceClass)
         try encoderContainer.encode(instanceStorageGB, forKey: .instanceStorageGB)
         try encoderContainer.encode(azId, forKey: .azId)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(parameterGroup, forKey: .parameterGroup)
         try encoderContainer.encode(chargeSpec, forKey: .chargeSpec)
    }
}
