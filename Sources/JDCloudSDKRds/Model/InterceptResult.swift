/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   SQL 拦截
   SQL 拦截相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  interceptResult
@objc(InterceptResult)
public class InterceptResult:NSObject,Codable{
    /// SQL开始执行时间
    var startTime:String?
    /// 源IP
    var ip:String?
    /// 账号名
    var accountName:String?
    /// 线程ID
    var threadId:String?
    /// 数据库名
    var dbName:String?
    /// sql语句
    var sql:String?



    public override init(){
            super.init()
    }

    enum InterceptResultCodingKeys: String, CodingKey {
        case startTime
        case ip
        case accountName
        case threadId
        case dbName
        case sql
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InterceptResultCodingKeys.self)
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.ip)
        {
            self.ip = try decoderContainer.decode(String?.self, forKey: .ip)
        }
        if decoderContainer.contains(.accountName)
        {
            self.accountName = try decoderContainer.decode(String?.self, forKey: .accountName)
        }
        if decoderContainer.contains(.threadId)
        {
            self.threadId = try decoderContainer.decode(String?.self, forKey: .threadId)
        }
        if decoderContainer.contains(.dbName)
        {
            self.dbName = try decoderContainer.decode(String?.self, forKey: .dbName)
        }
        if decoderContainer.contains(.sql)
        {
            self.sql = try decoderContainer.decode(String?.self, forKey: .sql)
        }
    }
}
public extension InterceptResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InterceptResultCodingKeys.self)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(ip, forKey: .ip)
         try encoderContainer.encode(accountName, forKey: .accountName)
         try encoderContainer.encode(threadId, forKey: .threadId)
         try encoderContainer.encode(dbName, forKey: .dbName)
         try encoderContainer.encode(sql, forKey: .sql)
    }
}
