/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   性能统计
   性能统计相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  queryPerformanceResult
@objc(QueryPerformanceResult)
public class QueryPerformanceResult:NSObject,Codable{
    /// sql语句
    var sql:String?
    /// 上次执行时间，格式为YYYY-MM-DD hh:mm:ss
    var lastExecutionTime:String?
    /// 平均执行时长，单位毫秒(ms)
    var elapsedTime:Int?
    /// 执行次数
    var executionCount:Int?
    /// 平均CPU使用时间，单位毫秒(ms)
    var workerTime:Int?
    /// 平均逻辑读次数
    var logicalReads:Int?
    /// 平均逻辑写次数
    var logicalWrites:Int?
    /// 平均物理读次数
    var physicalReads:Int?
    /// 上次返回记录数
    var lastRows:Int?



    public override init(){
            super.init()
    }

    enum QueryPerformanceResultCodingKeys: String, CodingKey {
        case sql
        case lastExecutionTime
        case elapsedTime
        case executionCount
        case workerTime
        case logicalReads
        case logicalWrites
        case physicalReads
        case lastRows
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryPerformanceResultCodingKeys.self)
        if decoderContainer.contains(.sql)
        {
            self.sql = try decoderContainer.decode(String?.self, forKey: .sql)
        }
        if decoderContainer.contains(.lastExecutionTime)
        {
            self.lastExecutionTime = try decoderContainer.decode(String?.self, forKey: .lastExecutionTime)
        }
        if decoderContainer.contains(.elapsedTime)
        {
            self.elapsedTime = try decoderContainer.decode(Int?.self, forKey: .elapsedTime)
        }
        if decoderContainer.contains(.executionCount)
        {
            self.executionCount = try decoderContainer.decode(Int?.self, forKey: .executionCount)
        }
        if decoderContainer.contains(.workerTime)
        {
            self.workerTime = try decoderContainer.decode(Int?.self, forKey: .workerTime)
        }
        if decoderContainer.contains(.logicalReads)
        {
            self.logicalReads = try decoderContainer.decode(Int?.self, forKey: .logicalReads)
        }
        if decoderContainer.contains(.logicalWrites)
        {
            self.logicalWrites = try decoderContainer.decode(Int?.self, forKey: .logicalWrites)
        }
        if decoderContainer.contains(.physicalReads)
        {
            self.physicalReads = try decoderContainer.decode(Int?.self, forKey: .physicalReads)
        }
        if decoderContainer.contains(.lastRows)
        {
            self.lastRows = try decoderContainer.decode(Int?.self, forKey: .lastRows)
        }
    }
}
public extension QueryPerformanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryPerformanceResultCodingKeys.self)
         try encoderContainer.encode(sql, forKey: .sql)
         try encoderContainer.encode(lastExecutionTime, forKey: .lastExecutionTime)
         try encoderContainer.encode(elapsedTime, forKey: .elapsedTime)
         try encoderContainer.encode(executionCount, forKey: .executionCount)
         try encoderContainer.encode(workerTime, forKey: .workerTime)
         try encoderContainer.encode(logicalReads, forKey: .logicalReads)
         try encoderContainer.encode(logicalWrites, forKey: .logicalWrites)
         try encoderContainer.encode(physicalReads, forKey: .physicalReads)
         try encoderContainer.encode(lastRows, forKey: .lastRows)
    }
}
