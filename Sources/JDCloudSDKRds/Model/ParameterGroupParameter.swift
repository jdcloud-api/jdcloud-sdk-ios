/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  parameterGroupParameter
@objc(ParameterGroupParameter)
public class ParameterGroupParameter:NSObject,Codable{
    /// 参数名称
    var name:String?
    /// 参数描述
    var descriptionValue:String?
    /// 参数修改后的数值，但不一定生效，需要视该参数生效是否需要重启
    var configureValue:String?
    /// 参数默认值
    var defaultValue:String?
    /// 该参数数值的允许修改范围
    var range:String?
    /// 参数数值的类型
    var type:String?
    /// 参数修改是否需要重启生效.- true:参数需要重启才能生效- false:参数生效无需重启
    var needRestart:String?



    public override init(){
            super.init()
    }

    enum ParameterGroupParameterCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case configureValue
        case defaultValue
        case range
        case type
        case needRestart
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ParameterGroupParameterCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.configureValue)
        {
            self.configureValue = try decoderContainer.decode(String?.self, forKey: .configureValue)
        }
        if decoderContainer.contains(.defaultValue)
        {
            self.defaultValue = try decoderContainer.decode(String?.self, forKey: .defaultValue)
        }
        if decoderContainer.contains(.range)
        {
            self.range = try decoderContainer.decode(String?.self, forKey: .range)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(String?.self, forKey: .type)
        }
        if decoderContainer.contains(.needRestart)
        {
            self.needRestart = try decoderContainer.decode(String?.self, forKey: .needRestart)
        }
    }
}
public extension ParameterGroupParameter{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ParameterGroupParameterCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(configureValue, forKey: .configureValue)
         try encoderContainer.encode(defaultValue, forKey: .defaultValue)
         try encoderContainer.encode(range, forKey: .range)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(needRestart, forKey: .needRestart)
    }
}
