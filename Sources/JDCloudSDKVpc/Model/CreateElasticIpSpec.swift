/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createElasticIpSpec
@objc(CreateElasticIpSpec)
public class CreateElasticIpSpec:NSObject,Codable{
    /// 购买弹性ip数量；取值范围：[1,100]
    /// Required:true
    var maxCount:Int
    /// 指定弹性ip地址进行创建，当申请创建多个弹性ip时，必须为空
    var elasticIpAddress:String?
    /// 弹性ip规格
    /// Required:true
    var elasticIpSpec:ElasticIpSpec



    public  init(maxCount:Int,elasticIpSpec:ElasticIpSpec){
             self.maxCount = maxCount
             self.elasticIpSpec = elasticIpSpec
    }

    enum CreateElasticIpSpecCodingKeys: String, CodingKey {
        case maxCount
        case elasticIpAddress
        case elasticIpSpec
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateElasticIpSpecCodingKeys.self)
        self.maxCount = try decoderContainer.decode(Int.self, forKey: .maxCount)
        if decoderContainer.contains(.elasticIpAddress)
        {
            self.elasticIpAddress = try decoderContainer.decode(String?.self, forKey: .elasticIpAddress)
        }
        self.elasticIpSpec = try decoderContainer.decode(ElasticIpSpec.self, forKey: .elasticIpSpec)
    }
}
public extension CreateElasticIpSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateElasticIpSpecCodingKeys.self)
         try encoderContainer.encode(maxCount, forKey: .maxCount)
         try encoderContainer.encode(elasticIpAddress, forKey: .elasticIpAddress)
         try encoderContainer.encode(elasticIpSpec, forKey: .elasticIpSpec)
    }
}
