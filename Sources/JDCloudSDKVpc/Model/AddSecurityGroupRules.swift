/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  addSecurityGroupRules
@objc(AddSecurityGroupRules)
public class AddSecurityGroupRules:NSObject,Codable{
    /// 规则限定协议。300:All; 6:TCP; 17:UDP; 1:ICMP
    /// Required:true
    var protocolValue:Double
    /// 安全组规则方向。0：入规则; 1：出规则
    /// Required:true
    var direction:Double
    /// 匹配地址前缀
    /// Required:true
    var addressPrefix:String
    /// 规则限定起始传输层端口, 取值范围:1-65535, 若protocol为传输层协议，默认值为1，若protocol不是传输层协议，恒为0。如果规则只限定一个端口号，fromPort和toPort填写同一个值
    var fromPort:Double?
    /// 规则限定终止传输层端口, 取值范围:1-65535, 若protocol为传输层协议，默认值为65535，若protocol不是传输层协议，恒为0。如果规则只限定一个端口号，fromPort和toPort填写同一个值
    var toPort:Double?
    /// 描述,​ 允许输入UTF-8编码下的全部字符，不超过256字符
    var descriptionValue:String?



    public  init(protocolValue:Double,direction:Double,addressPrefix:String){
             self.protocolValue = protocolValue
             self.direction = direction
             self.addressPrefix = addressPrefix
    }

    enum AddSecurityGroupRulesCodingKeys: String, CodingKey {
        case protocolValue = "protocol"
        case direction
        case addressPrefix
        case fromPort
        case toPort
        case descriptionValue = "description"
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddSecurityGroupRulesCodingKeys.self)
        self.protocolValue = try decoderContainer.decode(Double.self, forKey: .protocolValue)
        self.direction = try decoderContainer.decode(Double.self, forKey: .direction)
        self.addressPrefix = try decoderContainer.decode(String.self, forKey: .addressPrefix)
        if decoderContainer.contains(.fromPort)
        {
            self.fromPort = try decoderContainer.decode(Double?.self, forKey: .fromPort)
        }
        if decoderContainer.contains(.toPort)
        {
            self.toPort = try decoderContainer.decode(Double?.self, forKey: .toPort)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
    }
}
public extension AddSecurityGroupRules{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddSecurityGroupRulesCodingKeys.self)
         try encoderContainer.encode(protocolValue, forKey: .protocolValue)
         try encoderContainer.encode(direction, forKey: .direction)
         try encoderContainer.encode(addressPrefix, forKey: .addressPrefix)
         try encoderContainer.encode(fromPort, forKey: .fromPort)
         try encoderContainer.encode(toPort, forKey: .toPort)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
    }
}
