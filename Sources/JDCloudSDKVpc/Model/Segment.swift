/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  segment
@objc(Segment)
public class Segment:NSObject,Codable{
    /// 网段的Id
    var segmentId:String?
    /// 网段名称，只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符。
    var segmentName:String?
    /// 网段描述，允许输入UTF-8编码下的全部字符，不超过256字符。
    var descriptionValue:String?
    /// 网络地址段
    var addressPrefix:String?
    /// 网段可用ip数量
    var availableIpCount:Int?
    /// IP服务商，取值为bgp或no_bgp，cn-north-1：bgp；cn-south-1：[bgp，no_bgp]；cn-east-1：[bgp，no_bgp]；cn-east-2：bgp
    var provider:String?
    /// 网段的起始地址
    var startIp:String?
    /// 网段的结束地址
    var endIp:String?



    public override init(){
            super.init()
    }

    enum SegmentCodingKeys: String, CodingKey {
        case segmentId
        case segmentName
        case descriptionValue = "description"
        case addressPrefix
        case availableIpCount
        case provider
        case startIp
        case endIp
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SegmentCodingKeys.self)
        if decoderContainer.contains(.segmentId)
        {
            self.segmentId = try decoderContainer.decode(String?.self, forKey: .segmentId)
        }
        if decoderContainer.contains(.segmentName)
        {
            self.segmentName = try decoderContainer.decode(String?.self, forKey: .segmentName)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.addressPrefix)
        {
            self.addressPrefix = try decoderContainer.decode(String?.self, forKey: .addressPrefix)
        }
        if decoderContainer.contains(.availableIpCount)
        {
            self.availableIpCount = try decoderContainer.decode(Int?.self, forKey: .availableIpCount)
        }
        if decoderContainer.contains(.provider)
        {
            self.provider = try decoderContainer.decode(String?.self, forKey: .provider)
        }
        if decoderContainer.contains(.startIp)
        {
            self.startIp = try decoderContainer.decode(String?.self, forKey: .startIp)
        }
        if decoderContainer.contains(.endIp)
        {
            self.endIp = try decoderContainer.decode(String?.self, forKey: .endIp)
        }
    }
}
public extension Segment{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SegmentCodingKeys.self)
         try encoderContainer.encode(segmentId, forKey: .segmentId)
         try encoderContainer.encode(segmentName, forKey: .segmentName)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(addressPrefix, forKey: .addressPrefix)
         try encoderContainer.encode(availableIpCount, forKey: .availableIpCount)
         try encoderContainer.encode(provider, forKey: .provider)
         try encoderContainer.encode(startIp, forKey: .startIp)
         try encoderContainer.encode(endIp, forKey: .endIp)
    }
}
