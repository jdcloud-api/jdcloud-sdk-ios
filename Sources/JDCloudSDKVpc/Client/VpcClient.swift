/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   京东云VPC
   VPC相关API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class VpcJDCloudClient:NSObject,JDCloudClient{
    
    private final var vpcJDCloudClient:VpcJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        vpcJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "vpc.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        vpcJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "vpc/" + "v1"
    
    public let serviceName: String = "vpc"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func deleteElasticIpAsync(request:DeleteElasticIpRequest,requestComplation:@escaping ExecuteResult<DeleteElasticIpResult>) throws {
        vpcJDCloudClient = self
        try DeleteElasticIpExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyVpcPeeringAsync(request:ModifyVpcPeeringRequest,requestComplation:@escaping ExecuteResult<ModifyVpcPeeringResult>) throws {
        vpcJDCloudClient = self
        try ModifyVpcPeeringExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyNetworkAclRulesAsync(request:ModifyNetworkAclRulesRequest,requestComplation:@escaping ExecuteResult<ModifyNetworkAclRulesResult>) throws {
        vpcJDCloudClient = self
        try ModifyNetworkAclRulesExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyElasticIpAsync(request:ModifyElasticIpRequest,requestComplation:@escaping ExecuteResult<ModifyElasticIpResult>) throws {
        vpcJDCloudClient = self
        try ModifyElasticIpExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteNetworkAclAsync(request:DeleteNetworkAclRequest,requestComplation:@escaping ExecuteResult<DeleteNetworkAclResult>) throws {
        vpcJDCloudClient = self
        try DeleteNetworkAclExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteSubnetAsync(request:DeleteSubnetRequest,requestComplation:@escaping ExecuteResult<DeleteSubnetResult>) throws {
        vpcJDCloudClient = self
        try DeleteSubnetExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSubnetsAsync(request:DescribeSubnetsRequest,requestComplation:@escaping ExecuteResult<DescribeSubnetsResult>) throws {
        vpcJDCloudClient = self
        try DescribeSubnetsExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeNetworkInterfacesAsync(request:DescribeNetworkInterfacesRequest,requestComplation:@escaping ExecuteResult<DescribeNetworkInterfacesResult>) throws {
        vpcJDCloudClient = self
        try DescribeNetworkInterfacesExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func removeNetworkSecurityGroupRulesAsync(request:RemoveNetworkSecurityGroupRulesRequest,requestComplation:@escaping ExecuteResult<RemoveNetworkSecurityGroupRulesResult>) throws {
        vpcJDCloudClient = self
        try RemoveNetworkSecurityGroupRulesExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyNetworkSecurityGroupAsync(request:ModifyNetworkSecurityGroupRequest,requestComplation:@escaping ExecuteResult<ModifyNetworkSecurityGroupResult>) throws {
        vpcJDCloudClient = self
        try ModifyNetworkSecurityGroupExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addNetworkSecurityGroupRulesAsync(request:AddNetworkSecurityGroupRulesRequest,requestComplation:@escaping ExecuteResult<AddNetworkSecurityGroupRulesResult>) throws {
        vpcJDCloudClient = self
        try AddNetworkSecurityGroupRulesExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createNetworkAclAsync(request:CreateNetworkAclRequest,requestComplation:@escaping ExecuteResult<CreateNetworkAclResult>) throws {
        vpcJDCloudClient = self
        try CreateNetworkAclExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeQuotaAsync(request:DescribeQuotaRequest,requestComplation:@escaping ExecuteResult<DescribeQuotaResult>) throws {
        vpcJDCloudClient = self
        try DescribeQuotaExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createRouteTableAsync(request:CreateRouteTableRequest,requestComplation:@escaping ExecuteResult<CreateRouteTableResult>) throws {
        vpcJDCloudClient = self
        try CreateRouteTableExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeRouteTableAsync(request:DescribeRouteTableRequest,requestComplation:@escaping ExecuteResult<DescribeRouteTableResult>) throws {
        vpcJDCloudClient = self
        try DescribeRouteTableExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteNetworkSecurityGroupAsync(request:DeleteNetworkSecurityGroupRequest,requestComplation:@escaping ExecuteResult<DeleteNetworkSecurityGroupResult>) throws {
        vpcJDCloudClient = self
        try DeleteNetworkSecurityGroupExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeVpcPeeringsAsync(request:DescribeVpcPeeringsRequest,requestComplation:@escaping ExecuteResult<DescribeVpcPeeringsResult>) throws {
        vpcJDCloudClient = self
        try DescribeVpcPeeringsExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVpcAsync(request:DeleteVpcRequest,requestComplation:@escaping ExecuteResult<DeleteVpcResult>) throws {
        vpcJDCloudClient = self
        try DeleteVpcExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeNetworkAclsAsync(request:DescribeNetworkAclsRequest,requestComplation:@escaping ExecuteResult<DescribeNetworkAclsResult>) throws {
        vpcJDCloudClient = self
        try DescribeNetworkAclsExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeSubnetAsync(request:DescribeSubnetRequest,requestComplation:@escaping ExecuteResult<DescribeSubnetResult>) throws {
        vpcJDCloudClient = self
        try DescribeSubnetExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeNetworkSecurityGroupAsync(request:DescribeNetworkSecurityGroupRequest,requestComplation:@escaping ExecuteResult<DescribeNetworkSecurityGroupResult>) throws {
        vpcJDCloudClient = self
        try DescribeNetworkSecurityGroupExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeNetworkSecurityGroupsAsync(request:DescribeNetworkSecurityGroupsRequest,requestComplation:@escaping ExecuteResult<DescribeNetworkSecurityGroupsResult>) throws {
        vpcJDCloudClient = self
        try DescribeNetworkSecurityGroupsExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeVpcAsync(request:DescribeVpcRequest,requestComplation:@escaping ExecuteResult<DescribeVpcResult>) throws {
        vpcJDCloudClient = self
        try DescribeVpcExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disassociateNetworkAclAsync(request:DisassociateNetworkAclRequest,requestComplation:@escaping ExecuteResult<DisassociateNetworkAclResult>) throws {
        vpcJDCloudClient = self
        try DisassociateNetworkAclExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func removeNetworkAclRulesAsync(request:RemoveNetworkAclRulesRequest,requestComplation:@escaping ExecuteResult<RemoveNetworkAclRulesResult>) throws {
        vpcJDCloudClient = self
        try RemoveNetworkAclRulesExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func associateRouteTableAsync(request:AssociateRouteTableRequest,requestComplation:@escaping ExecuteResult<AssociateRouteTableResult>) throws {
        vpcJDCloudClient = self
        try AssociateRouteTableExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeVpcsAsync(request:DescribeVpcsRequest,requestComplation:@escaping ExecuteResult<DescribeVpcsResult>) throws {
        vpcJDCloudClient = self
        try DescribeVpcsExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createNetworkSecurityGroupAsync(request:CreateNetworkSecurityGroupRequest,requestComplation:@escaping ExecuteResult<CreateNetworkSecurityGroupResult>) throws {
        vpcJDCloudClient = self
        try CreateNetworkSecurityGroupExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createSubnetAsync(request:CreateSubnetRequest,requestComplation:@escaping ExecuteResult<CreateSubnetResult>) throws {
        vpcJDCloudClient = self
        try CreateSubnetExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteRouteTableAsync(request:DeleteRouteTableRequest,requestComplation:@escaping ExecuteResult<DeleteRouteTableResult>) throws {
        vpcJDCloudClient = self
        try DeleteRouteTableExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeVpcPeeringAsync(request:DescribeVpcPeeringRequest,requestComplation:@escaping ExecuteResult<DescribeVpcPeeringResult>) throws {
        vpcJDCloudClient = self
        try DescribeVpcPeeringExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func removeRouteTableRulesAsync(request:RemoveRouteTableRulesRequest,requestComplation:@escaping ExecuteResult<RemoveRouteTableRulesResult>) throws {
        vpcJDCloudClient = self
        try RemoveRouteTableRulesExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVpcPeeringAsync(request:CreateVpcPeeringRequest,requestComplation:@escaping ExecuteResult<CreateVpcPeeringResult>) throws {
        vpcJDCloudClient = self
        try CreateVpcPeeringExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeRouteTablesAsync(request:DescribeRouteTablesRequest,requestComplation:@escaping ExecuteResult<DescribeRouteTablesResult>) throws {
        vpcJDCloudClient = self
        try DescribeRouteTablesExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func assignSecondaryIpsAsync(request:AssignSecondaryIpsRequest,requestComplation:@escaping ExecuteResult<AssignSecondaryIpsResult>) throws {
        vpcJDCloudClient = self
        try AssignSecondaryIpsExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyNetworkInterfaceAsync(request:ModifyNetworkInterfaceRequest,requestComplation:@escaping ExecuteResult<ModifyNetworkInterfaceResult>) throws {
        vpcJDCloudClient = self
        try ModifyNetworkInterfaceExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyNetworkSecurityGroupRulesAsync(request:ModifyNetworkSecurityGroupRulesRequest,requestComplation:@escaping ExecuteResult<ModifyNetworkSecurityGroupRulesResult>) throws {
        vpcJDCloudClient = self
        try ModifyNetworkSecurityGroupRulesExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeElasticIpsAsync(request:DescribeElasticIpsRequest,requestComplation:@escaping ExecuteResult<DescribeElasticIpsResult>) throws {
        vpcJDCloudClient = self
        try DescribeElasticIpsExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeNetworkInterfaceAsync(request:DescribeNetworkInterfaceRequest,requestComplation:@escaping ExecuteResult<DescribeNetworkInterfaceResult>) throws {
        vpcJDCloudClient = self
        try DescribeNetworkInterfaceExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyNetworkAclAsync(request:ModifyNetworkAclRequest,requestComplation:@escaping ExecuteResult<ModifyNetworkAclResult>) throws {
        vpcJDCloudClient = self
        try ModifyNetworkAclExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disassociateElasticIpAsync(request:DisassociateElasticIpRequest,requestComplation:@escaping ExecuteResult<DisassociateElasticIpResult>) throws {
        vpcJDCloudClient = self
        try DisassociateElasticIpExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVpcPeeringAsync(request:DeleteVpcPeeringRequest,requestComplation:@escaping ExecuteResult<DeleteVpcPeeringResult>) throws {
        vpcJDCloudClient = self
        try DeleteVpcPeeringExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createNetworkInterfaceAsync(request:CreateNetworkInterfaceRequest,requestComplation:@escaping ExecuteResult<CreateNetworkInterfaceResult>) throws {
        vpcJDCloudClient = self
        try CreateNetworkInterfaceExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVpcAsync(request:CreateVpcRequest,requestComplation:@escaping ExecuteResult<CreateVpcResult>) throws {
        vpcJDCloudClient = self
        try CreateVpcExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyRouteTableRulesAsync(request:ModifyRouteTableRulesRequest,requestComplation:@escaping ExecuteResult<ModifyRouteTableRulesResult>) throws {
        vpcJDCloudClient = self
        try ModifyRouteTableRulesExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addRouteTableRulesAsync(request:AddRouteTableRulesRequest,requestComplation:@escaping ExecuteResult<AddRouteTableRulesResult>) throws {
        vpcJDCloudClient = self
        try AddRouteTableRulesExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyRouteTableAsync(request:ModifyRouteTableRequest,requestComplation:@escaping ExecuteResult<ModifyRouteTableResult>) throws {
        vpcJDCloudClient = self
        try ModifyRouteTableExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func unassignSecondaryIpsAsync(request:UnassignSecondaryIpsRequest,requestComplation:@escaping ExecuteResult<UnassignSecondaryIpsResult>) throws {
        vpcJDCloudClient = self
        try UnassignSecondaryIpsExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeElasticIpAsync(request:DescribeElasticIpRequest,requestComplation:@escaping ExecuteResult<DescribeElasticIpResult>) throws {
        vpcJDCloudClient = self
        try DescribeElasticIpExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func associateElasticIpAsync(request:AssociateElasticIpRequest,requestComplation:@escaping ExecuteResult<AssociateElasticIpResult>) throws {
        vpcJDCloudClient = self
        try AssociateElasticIpExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disassociateRouteTableAsync(request:DisassociateRouteTableRequest,requestComplation:@escaping ExecuteResult<DisassociateRouteTableResult>) throws {
        vpcJDCloudClient = self
        try DisassociateRouteTableExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyVpcAsync(request:ModifyVpcRequest,requestComplation:@escaping ExecuteResult<ModifyVpcResult>) throws {
        vpcJDCloudClient = self
        try ModifyVpcExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func associateNetworkAclAsync(request:AssociateNetworkAclRequest,requestComplation:@escaping ExecuteResult<AssociateNetworkAclResult>) throws {
        vpcJDCloudClient = self
        try AssociateNetworkAclExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifySubnetAsync(request:ModifySubnetRequest,requestComplation:@escaping ExecuteResult<ModifySubnetResult>) throws {
        vpcJDCloudClient = self
        try ModifySubnetExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createElasticIpsAsync(request:CreateElasticIpsRequest,requestComplation:@escaping ExecuteResult<CreateElasticIpsResult>) throws {
        vpcJDCloudClient = self
        try CreateElasticIpsExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteNetworkInterfaceAsync(request:DeleteNetworkInterfaceRequest,requestComplation:@escaping ExecuteResult<DeleteNetworkInterfaceResult>) throws {
        vpcJDCloudClient = self
        try DeleteNetworkInterfaceExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeNetworkAclAsync(request:DescribeNetworkAclRequest,requestComplation:@escaping ExecuteResult<DescribeNetworkAclResult>) throws {
        vpcJDCloudClient = self
        try DescribeNetworkAclExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func addNetworkAclRulesAsync(request:AddNetworkAclRulesRequest,requestComplation:@escaping ExecuteResult<AddNetworkAclRulesResult>) throws {
        vpcJDCloudClient = self
        try AddNetworkAclRulesExecutor(jdCloudClient: vpcJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension VpcJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "vpc.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
