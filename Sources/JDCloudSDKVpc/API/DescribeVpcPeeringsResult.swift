/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   对等连接
   对等连接相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询VpcPeering资源列表
@objc(DescribeVpcPeeringsResult)
public class DescribeVpcPeeringsResult:NSObject,JdCloudResult
{
    /// VpcPeering资源信息列表
    var vpcPeerings:[VpcPeering?]?

    /// 总数量
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeVpcPeeringsResultCodingKeys: String, CodingKey {
        case vpcPeerings
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcPeeringsResultCodingKeys.self)
        if decoderContainer.contains(.vpcPeerings)
        {
            self.vpcPeerings = try decoderContainer.decode([VpcPeering?]?.self, forKey: .vpcPeerings)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeVpcPeeringsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcPeeringsResultCodingKeys.self)
        try encoderContainer.encode(vpcPeerings, forKey: .vpcPeerings)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
