/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   网段
   网段相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon


///  删除路由表
public class DeleteRouteTableRequest:JdCloudRequest
{
    /// RouteTable ID
    var routeTableId:String


    public init(regionId: String,routeTableId:String){
        self.routeTableId = routeTableId
        super.init(regionId: regionId)
    }


    enum DeleteRouteTableRequestRequestCodingKeys: String, CodingKey {
        case routeTableId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRouteTableRequestRequestCodingKeys.self)
        try encoderContainer.encode(routeTableId, forKey: .routeTableId)

    }
}


///  移除路由表规则
public class RemoveRouteTableRulesRequest:JdCloudRequest
{
    /// 路由表规则Id列表
    var ruleIds:[String?]?

    /// RouteTable ID
    var routeTableId:String


    public init(regionId: String,routeTableId:String){
        self.routeTableId = routeTableId
        super.init(regionId: regionId)
    }


    enum RemoveRouteTableRulesRequestRequestCodingKeys: String, CodingKey {
        case ruleIds
        case routeTableId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveRouteTableRulesRequestRequestCodingKeys.self)
        try encoderContainer.encode(ruleIds, forKey: .ruleIds)
        try encoderContainer.encode(routeTableId, forKey: .routeTableId)

    }
}

public class RemoveRouteTableRulesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RemoveRouteTableRulesResult?;

    enum RemoveRouteTableRulesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RemoveRouteTableRulesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RemoveRouteTableRulesResult?.self, forKey: .result) ?? nil
    }
}

public extension RemoveRouteTableRulesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveRouteTableRulesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询路由表列表
public class DescribeRouteTablesRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// routeTableIds - 路由表ID列表，支持多个
      /// routeTableNames - 路由表名称列表，支持多个
      /// vpcId	- 路由表所属vpc Id，支持单个
      /// 
    var filters:[Filter?]?




    enum DescribeRouteTablesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRouteTablesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  添加路由表规则
public class AddRouteTableRulesRequest:JdCloudRequest
{
    /// 安全组规则信息
    var routeTableRuleSpecs:[AddRouteTableRules?]?

    /// RouteTable ID
    var routeTableId:String


    public init(regionId: String,routeTableRuleSpecs:[AddRouteTableRules?]?,routeTableId:String){
        self.routeTableRuleSpecs = routeTableRuleSpecs
        self.routeTableId = routeTableId
        super.init(regionId: regionId)
    }


    enum AddRouteTableRulesRequestRequestCodingKeys: String, CodingKey {
        case routeTableRuleSpecs
        case routeTableId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddRouteTableRulesRequestRequestCodingKeys.self)
        try encoderContainer.encode(routeTableRuleSpecs, forKey: .routeTableRuleSpecs)
        try encoderContainer.encode(routeTableId, forKey: .routeTableId)

    }
}

/// 修改路由表规则 
public class ModifyRouteTableRulesResult:NSObject,JdCloudResult
{
}
/// 查询路由表列表 
public class DescribeRouteTablesResult:NSObject,JdCloudResult
{
    /// 路由表资源信息列表
    var routeTables:[RouteTable?]?

    /// 总数量
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeRouteTablesResultCodingKeys: String, CodingKey {
        case routeTables
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRouteTablesResultCodingKeys.self)
        if decoderContainer.contains(.routeTables)
        {
            self.routeTables = try decoderContainer.decode([RouteTable?]?.self, forKey: .routeTables)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeRouteTablesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRouteTablesResultCodingKeys.self)
        try encoderContainer.encode(routeTables, forKey: .routeTables)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  修改路由表属性
public class ModifyRouteTableRequest:JdCloudRequest
{
    /// 路由表的名字。名称取值范围：1-32个中文、英文大小写的字母、数字和下划线分隔符
    var routeTableName:String?

    /// 路由表的描述，取值范围：0-256个UTF-8编码下的全部字符
    var descriptionValue:String?

    /// RouteTable ID
    var routeTableId:String


    public init(regionId: String,routeTableId:String){
        self.routeTableId = routeTableId
        super.init(regionId: regionId)
    }


    enum ModifyRouteTableRequestRequestCodingKeys: String, CodingKey {
        case routeTableName
        case descriptionValue = "description"
        case routeTableId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyRouteTableRequestRequestCodingKeys.self)
        try encoderContainer.encode(routeTableName, forKey: .routeTableName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(routeTableId, forKey: .routeTableId)

    }
}


///  创建路由表
public class CreateRouteTableRequest:JdCloudRequest
{
    /// 路由表所属的私有网络ID
    var vpcId:String

    /// 路由表名称，只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符。
    var routeTableName:String

    /// 描述,​ 允许输入UTF-8编码下的全部字符，不超过256字符
    var descriptionValue:String?


    public init(regionId: String,vpcId:String,routeTableName:String){
        self.vpcId = vpcId
        self.routeTableName = routeTableName
        super.init(regionId: regionId)
    }


    enum CreateRouteTableRequestRequestCodingKeys: String, CodingKey {
        case vpcId
        case routeTableName
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRouteTableRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(routeTableName, forKey: .routeTableName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}

/// 查询路由表信息详情 
public class DescribeRouteTableResult:NSObject,JdCloudResult
{
    /// 路由表资源信息
    var routeTable:RouteTable?



    public override init(){
        super.init()
    }

    enum DescribeRouteTableResultCodingKeys: String, CodingKey {
        case routeTable
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRouteTableResultCodingKeys.self)
        if decoderContainer.contains(.routeTable)
        {
            self.routeTable = try decoderContainer.decode(RouteTable?.self, forKey: .routeTable)
        }
    }
}
public extension DescribeRouteTableResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRouteTableResultCodingKeys.self)
        try encoderContainer.encode(routeTable, forKey: .routeTable)
    }
}
/// 移除路由表规则 
public class RemoveRouteTableRulesResult:NSObject,JdCloudResult
{
}

///  路由表绑定子网接口
public class AssociateRouteTableRequest:JdCloudRequest
{
    /// 路由表要绑定的子网ID列表, subnet已被其他路由表绑定时，自动解绑。
    var subnetIds:[String?]?

    /// RouteTable ID
    var routeTableId:String


    public init(regionId: String,routeTableId:String){
        self.routeTableId = routeTableId
        super.init(regionId: regionId)
    }


    enum AssociateRouteTableRequestRequestCodingKeys: String, CodingKey {
        case subnetIds
        case routeTableId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateRouteTableRequestRequestCodingKeys.self)
        try encoderContainer.encode(subnetIds, forKey: .subnetIds)
        try encoderContainer.encode(routeTableId, forKey: .routeTableId)

    }
}

/// 路由表绑定子网接口 
public class AssociateRouteTableResult:NSObject,JdCloudResult
{
}
public class ModifyRouteTableRulesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyRouteTableRulesResult?;

    enum ModifyRouteTableRulesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyRouteTableRulesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyRouteTableRulesResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyRouteTableRulesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyRouteTableRulesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改路由表属性 
public class ModifyRouteTableResult:NSObject,JdCloudResult
{
}

///  查询路由表信息详情
public class DescribeRouteTableRequest:JdCloudRequest
{
    /// RouteTable ID
    var routeTableId:String


    public init(regionId: String,routeTableId:String){
        self.routeTableId = routeTableId
        super.init(regionId: regionId)
    }


    enum DescribeRouteTableRequestRequestCodingKeys: String, CodingKey {
        case routeTableId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRouteTableRequestRequestCodingKeys.self)
        try encoderContainer.encode(routeTableId, forKey: .routeTableId)

    }
}


///  修改路由表规则
public class ModifyRouteTableRulesRequest:JdCloudRequest
{
    /// 路由表规则信息
    var modifyRouteTableRuleSpecs:[ModifyRouteTableRules?]?

    /// RouteTable ID
    var routeTableId:String


    public init(regionId: String,modifyRouteTableRuleSpecs:[ModifyRouteTableRules?]?,routeTableId:String){
        self.modifyRouteTableRuleSpecs = modifyRouteTableRuleSpecs
        self.routeTableId = routeTableId
        super.init(regionId: regionId)
    }


    enum ModifyRouteTableRulesRequestRequestCodingKeys: String, CodingKey {
        case modifyRouteTableRuleSpecs
        case routeTableId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyRouteTableRulesRequestRequestCodingKeys.self)
        try encoderContainer.encode(modifyRouteTableRuleSpecs, forKey: .modifyRouteTableRuleSpecs)
        try encoderContainer.encode(routeTableId, forKey: .routeTableId)

    }
}

/// 添加路由表规则 
public class AddRouteTableRulesResult:NSObject,JdCloudResult
{
}
/// 给路由表解绑子网接口 
public class DisassociateRouteTableResult:NSObject,JdCloudResult
{
}
public class DescribeRouteTableResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeRouteTableResult?;

    enum DescribeRouteTableResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRouteTableResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeRouteTableResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeRouteTableResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRouteTableResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AssociateRouteTableResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AssociateRouteTableResult?;

    enum AssociateRouteTableResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateRouteTableResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AssociateRouteTableResult?.self, forKey: .result) ?? nil
    }
}

public extension AssociateRouteTableResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateRouteTableResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeRouteTablesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeRouteTablesResult?;

    enum DescribeRouteTablesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRouteTablesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeRouteTablesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeRouteTablesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRouteTablesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建路由表 
public class CreateRouteTableResult:NSObject,JdCloudResult
{
    /// 路由表ID
    var routeTableId:String?



    public override init(){
        super.init()
    }

    enum CreateRouteTableResultCodingKeys: String, CodingKey {
        case routeTableId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRouteTableResultCodingKeys.self)
        if decoderContainer.contains(.routeTableId)
        {
            self.routeTableId = try decoderContainer.decode(String?.self, forKey: .routeTableId)
        }
    }
}
public extension CreateRouteTableResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRouteTableResultCodingKeys.self)
        try encoderContainer.encode(routeTableId, forKey: .routeTableId)
    }
}
public class ModifyRouteTableResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyRouteTableResult?;

    enum ModifyRouteTableResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyRouteTableResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyRouteTableResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyRouteTableResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyRouteTableResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateRouteTableResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateRouteTableResult?;

    enum CreateRouteTableResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRouteTableResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateRouteTableResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateRouteTableResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRouteTableResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DisassociateRouteTableResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisassociateRouteTableResult?;

    enum DisassociateRouteTableResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisassociateRouteTableResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisassociateRouteTableResult?.self, forKey: .result) ?? nil
    }
}

public extension DisassociateRouteTableResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateRouteTableResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除路由表 
public class DeleteRouteTableResult:NSObject,JdCloudResult
{
}
public class DeleteRouteTableResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteRouteTableResult?;

    enum DeleteRouteTableResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteRouteTableResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteRouteTableResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteRouteTableResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRouteTableResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AddRouteTableRulesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddRouteTableRulesResult?;

    enum AddRouteTableRulesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddRouteTableRulesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddRouteTableRulesResult?.self, forKey: .result) ?? nil
    }
}

public extension AddRouteTableRulesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddRouteTableRulesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  给路由表解绑子网接口
public class DisassociateRouteTableRequest:JdCloudRequest
{
    /// 路由表要解绑的子网ID，解绑后子网绑定默认路由表
    var subnetId:String

    /// RouteTable ID
    var routeTableId:String


    public init(regionId: String,subnetId:String,routeTableId:String){
        self.subnetId = subnetId
        self.routeTableId = routeTableId
        super.init(regionId: regionId)
    }


    enum DisassociateRouteTableRequestRequestCodingKeys: String, CodingKey {
        case subnetId
        case routeTableId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateRouteTableRequestRequestCodingKeys.self)
        try encoderContainer.encode(subnetId, forKey: .subnetId)
        try encoderContainer.encode(routeTableId, forKey: .routeTableId)

    }
}


///  查询配额信息
public class DescribeQuotaRequest:JdCloudRequest
{
    /// 资源类型，取值范围：vpc、elastic_ip、subnet、security_group、vpcpeering、network_interface（配额只统计辅助网卡）
    var type:String

    /// type为vpc、elastic_ip、network_interface不设置, type为subnet、security_group、vpcpeering设置为vpcId
    var parentResourceId:String?


    public init(regionId: String,type:String){
        self.type = type
        super.init(regionId: regionId)
    }


    enum DescribeQuotaRequestRequestCodingKeys: String, CodingKey {
        case type
        case parentResourceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotaRequestRequestCodingKeys.self)
        try encoderContainer.encode(type, forKey: .type)
        try encoderContainer.encode(parentResourceId, forKey: .parentResourceId)

    }
}

public class DescribeQuotaResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeQuotaResult?;

    enum DescribeQuotaResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQuotaResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeQuotaResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeQuotaResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotaResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询配额信息 
public class DescribeQuotaResult:NSObject,JdCloudResult
{
    /// Quota
    var quota:AnyObject?



    public override init(){
        super.init()
    }

    enum DescribeQuotaResultCodingKeys: String, CodingKey {
        case quota
    }

    required public init(from decoder: Decoder) throws {
    }
}
public extension DescribeQuotaResult{
    func encode(to encoder: Encoder) throws {
    }
}
/// 创建网卡接口，只能创建辅助网卡 
public class CreateNetworkInterfaceResult:NSObject,JdCloudResult
{
    /// 弹性网卡Id
    var networkInterfaceId:String?



    public override init(){
        super.init()
    }

    enum CreateNetworkInterfaceResultCodingKeys: String, CodingKey {
        case networkInterfaceId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateNetworkInterfaceResultCodingKeys.self)
        if decoderContainer.contains(.networkInterfaceId)
        {
            self.networkInterfaceId = try decoderContainer.decode(String?.self, forKey: .networkInterfaceId)
        }
    }
}
public extension CreateNetworkInterfaceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNetworkInterfaceResultCodingKeys.self)
        try encoderContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)
    }
}
/// 给网卡删除secondaryIp接口 
public class UnassignSecondaryIpsResult:NSObject,JdCloudResult
{
}
/// 查询弹性网卡列表 
public class DescribeNetworkInterfacesResult:NSObject,JdCloudResult
{
    /// networkInterface资源信息列表
    var networkInterfaces:[NetworkInterface?]?

    /// 总数量
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeNetworkInterfacesResultCodingKeys: String, CodingKey {
        case networkInterfaces
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNetworkInterfacesResultCodingKeys.self)
        if decoderContainer.contains(.networkInterfaces)
        {
            self.networkInterfaces = try decoderContainer.decode([NetworkInterface?]?.self, forKey: .networkInterfaces)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeNetworkInterfacesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkInterfacesResultCodingKeys.self)
        try encoderContainer.encode(networkInterfaces, forKey: .networkInterfaces)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class ModifyNetworkInterfaceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyNetworkInterfaceResult?;

    enum ModifyNetworkInterfaceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyNetworkInterfaceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyNetworkInterfaceResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyNetworkInterfaceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyNetworkInterfaceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteNetworkInterfaceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteNetworkInterfaceResult?;

    enum DeleteNetworkInterfaceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteNetworkInterfaceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteNetworkInterfaceResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteNetworkInterfaceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteNetworkInterfaceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询弹性网卡信息详情 
public class DescribeNetworkInterfaceResult:NSObject,JdCloudResult
{
    /// networkInterface资源信息
    var networkInterface:NetworkInterface?



    public override init(){
        super.init()
    }

    enum DescribeNetworkInterfaceResultCodingKeys: String, CodingKey {
        case networkInterface
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNetworkInterfaceResultCodingKeys.self)
        if decoderContainer.contains(.networkInterface)
        {
            self.networkInterface = try decoderContainer.decode(NetworkInterface?.self, forKey: .networkInterface)
        }
    }
}
public extension DescribeNetworkInterfaceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkInterfaceResultCodingKeys.self)
        try encoderContainer.encode(networkInterface, forKey: .networkInterface)
    }
}
/// 删除弹性网卡接口 
public class DeleteNetworkInterfaceResult:NSObject,JdCloudResult
{
}
public class DescribeNetworkInterfaceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeNetworkInterfaceResult?;

    enum DescribeNetworkInterfaceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNetworkInterfaceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeNetworkInterfaceResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeNetworkInterfaceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkInterfaceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 给网卡绑定弹性Ip接口 
public class AssociateElasticIpResult:NSObject,JdCloudResult
{
}
public class AssociateElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AssociateElasticIpResult?;

    enum AssociateElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AssociateElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension AssociateElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  给网卡分配secondaryIp接口
public class AssignSecondaryIpsRequest:JdCloudRequest
{
    /// secondary ip被其他接口占用时，是否抢占。false：非抢占重分配，true：抢占重分配，默认抢占重分配。默认值：true
    var force:Bool?

    /// 指定分配的secondaryIp地址
    var secondaryIps:[String?]?

    /// 指定自动分配的secondaryIp个数
    var secondaryIpCount:Double?

    /// networkInterface ID
    var networkInterfaceId:String


    public init(regionId: String,networkInterfaceId:String){
        self.networkInterfaceId = networkInterfaceId
        super.init(regionId: regionId)
    }


    enum AssignSecondaryIpsRequestRequestCodingKeys: String, CodingKey {
        case force
        case secondaryIps
        case secondaryIpCount
        case networkInterfaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssignSecondaryIpsRequestRequestCodingKeys.self)
        try encoderContainer.encode(force, forKey: .force)
        try encoderContainer.encode(secondaryIps, forKey: .secondaryIps)
        try encoderContainer.encode(secondaryIpCount, forKey: .secondaryIpCount)
        try encoderContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)

    }
}


///  删除弹性网卡接口
public class DeleteNetworkInterfaceRequest:JdCloudRequest
{
    /// networkInterface ID
    var networkInterfaceId:String


    public init(regionId: String,networkInterfaceId:String){
        self.networkInterfaceId = networkInterfaceId
        super.init(regionId: regionId)
    }


    enum DeleteNetworkInterfaceRequestRequestCodingKeys: String, CodingKey {
        case networkInterfaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteNetworkInterfaceRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)

    }
}

public class AssignSecondaryIpsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AssignSecondaryIpsResult?;

    enum AssignSecondaryIpsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssignSecondaryIpsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AssignSecondaryIpsResult?.self, forKey: .result) ?? nil
    }
}

public extension AssignSecondaryIpsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssignSecondaryIpsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UnassignSecondaryIpsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UnassignSecondaryIpsResult?;

    enum UnassignSecondaryIpsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UnassignSecondaryIpsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UnassignSecondaryIpsResult?.self, forKey: .result) ?? nil
    }
}

public extension UnassignSecondaryIpsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UnassignSecondaryIpsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建网卡接口，只能创建辅助网卡
public class CreateNetworkInterfaceRequest:JdCloudRequest
{
    /// 子网ID
    var subnetId:String

    /// 可用区，用户的默认可用区
    var az:String?

    /// 网卡名称，只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符。
    var networkInterfaceName:String?

    /// 网卡主IP，如果不指定，会自动从子网中分配
    var primaryIpAddress:String?

    /// SecondaryIp列表
    var secondaryIpAddresses:[String?]?

    /// 自动分配的SecondaryIp数量
    var secondaryIpCount:Int?

    /// 要绑定的安全组ID列表，最多指定5个安全组
    var securityGroups:[String?]?

    /// 源和目标IP地址校验，取值为0或者1,默认为1
    var sanityCheck:Int?

    /// 描述,​ 允许输入UTF-8编码下的全部字符，不超过256字符
    var descriptionValue:String?


    public init(regionId: String,subnetId:String){
        self.subnetId = subnetId
        super.init(regionId: regionId)
    }


    enum CreateNetworkInterfaceRequestRequestCodingKeys: String, CodingKey {
        case subnetId
        case az
        case networkInterfaceName
        case primaryIpAddress
        case secondaryIpAddresses
        case secondaryIpCount
        case securityGroups
        case sanityCheck
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNetworkInterfaceRequestRequestCodingKeys.self)
        try encoderContainer.encode(subnetId, forKey: .subnetId)
        try encoderContainer.encode(az, forKey: .az)
        try encoderContainer.encode(networkInterfaceName, forKey: .networkInterfaceName)
        try encoderContainer.encode(primaryIpAddress, forKey: .primaryIpAddress)
        try encoderContainer.encode(secondaryIpAddresses, forKey: .secondaryIpAddresses)
        try encoderContainer.encode(secondaryIpCount, forKey: .secondaryIpCount)
        try encoderContainer.encode(securityGroups, forKey: .securityGroups)
        try encoderContainer.encode(sanityCheck, forKey: .sanityCheck)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}


///  给网卡绑定弹性Ip接口
public class AssociateElasticIpRequest:JdCloudRequest
{
    /// 绑定的弹性Ip Id
    var elasticIpId:String?

    /// 绑定弹性Ip到指定的privateIp
    var privateIpAddress:String?

    /// 绑定的弹性Ip地址
    var elasticIpAddress:String?

    /// networkInterface ID
    var networkInterfaceId:String


    public init(regionId: String,networkInterfaceId:String){
        self.networkInterfaceId = networkInterfaceId
        super.init(regionId: regionId)
    }


    enum AssociateElasticIpRequestRequestCodingKeys: String, CodingKey {
        case elasticIpId
        case privateIpAddress
        case elasticIpAddress
        case networkInterfaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(privateIpAddress, forKey: .privateIpAddress)
        try encoderContainer.encode(elasticIpAddress, forKey: .elasticIpAddress)
        try encoderContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)

    }
}

public class DescribeNetworkInterfacesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeNetworkInterfacesResult?;

    enum DescribeNetworkInterfacesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNetworkInterfacesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeNetworkInterfacesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeNetworkInterfacesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkInterfacesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  给网卡解绑弹性Ip接口
public class DisassociateElasticIpRequest:JdCloudRequest
{
    /// 指定解绑的弹性Ip Id
    var elasticIpId:String?

    /// 指定解绑的弹性Ip地址
    var elasticIpAddress:String?

    /// networkInterface ID
    var networkInterfaceId:String


    public init(regionId: String,networkInterfaceId:String){
        self.networkInterfaceId = networkInterfaceId
        super.init(regionId: regionId)
    }


    enum DisassociateElasticIpRequestRequestCodingKeys: String, CodingKey {
        case elasticIpId
        case elasticIpAddress
        case networkInterfaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(elasticIpAddress, forKey: .elasticIpAddress)
        try encoderContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)

    }
}


///  给网卡删除secondaryIp接口
public class UnassignSecondaryIpsRequest:JdCloudRequest
{
    /// 指定删除的secondaryIp地址
    var secondaryIps:[String?]?

    /// networkInterface ID
    var networkInterfaceId:String


    public init(regionId: String,networkInterfaceId:String){
        self.networkInterfaceId = networkInterfaceId
        super.init(regionId: regionId)
    }


    enum UnassignSecondaryIpsRequestRequestCodingKeys: String, CodingKey {
        case secondaryIps
        case networkInterfaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UnassignSecondaryIpsRequestRequestCodingKeys.self)
        try encoderContainer.encode(secondaryIps, forKey: .secondaryIps)
        try encoderContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)

    }
}

/// 给网卡分配secondaryIp接口 
public class AssignSecondaryIpsResult:NSObject,JdCloudResult
{
}
public class CreateNetworkInterfaceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateNetworkInterfaceResult?;

    enum CreateNetworkInterfaceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateNetworkInterfaceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateNetworkInterfaceResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateNetworkInterfaceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNetworkInterfaceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询弹性网卡信息详情
public class DescribeNetworkInterfaceRequest:JdCloudRequest
{
    /// networkInterface ID
    var networkInterfaceId:String


    public init(regionId: String,networkInterfaceId:String){
        self.networkInterfaceId = networkInterfaceId
        super.init(regionId: regionId)
    }


    enum DescribeNetworkInterfaceRequestRequestCodingKeys: String, CodingKey {
        case networkInterfaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkInterfaceRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)

    }
}

/// 修改弹性网卡接口 
public class ModifyNetworkInterfaceResult:NSObject,JdCloudResult
{
}
/// 给网卡解绑弹性Ip接口 
public class DisassociateElasticIpResult:NSObject,JdCloudResult
{
}

///  修改弹性网卡接口
public class ModifyNetworkInterfaceRequest:JdCloudRequest
{
    /// 弹性网卡名称,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符
    var networkInterfaceName:String?

    /// 描述,允许输入UTF-8编码下的全部字符，不超过256字符
    var descriptionValue:String?

    /// 以覆盖原有安全组的方式更新的安全组。如果更新安全组ID列表，最多5个安全组
    var securityGroups:[String?]?

    /// networkInterface ID
    var networkInterfaceId:String


    public init(regionId: String,networkInterfaceId:String){
        self.networkInterfaceId = networkInterfaceId
        super.init(regionId: regionId)
    }


    enum ModifyNetworkInterfaceRequestRequestCodingKeys: String, CodingKey {
        case networkInterfaceName
        case descriptionValue = "description"
        case securityGroups
        case networkInterfaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyNetworkInterfaceRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkInterfaceName, forKey: .networkInterfaceName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(securityGroups, forKey: .securityGroups)
        try encoderContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)

    }
}


///  查询弹性网卡列表
public class DescribeNetworkInterfacesRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// networkInterfaceIds - 弹性网卡ID列表，支持多个
      /// networkInterfaceNames - 弹性网卡名称列表，支持多个
      /// vpcId - 弹性网卡所属vpc Id，支持单个
      /// subnetId	- 弹性网卡所属子网Id，支持单个
      /// role - 网卡角色，取值范围：Primary（主网卡）、Secondary（辅助网卡），支持单个
      /// 
    var filters:[Filter?]?




    enum DescribeNetworkInterfacesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkInterfacesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class DisassociateElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisassociateElasticIpResult?;

    enum DisassociateElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisassociateElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisassociateElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DisassociateElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除子网 
public class DeleteSubnetResult:NSObject,JdCloudResult
{
}

///  查询子网信息详情
public class DescribeSubnetRequest:JdCloudRequest
{
    /// Subnet ID
    var subnetId:String


    public init(regionId: String,subnetId:String){
        self.subnetId = subnetId
        super.init(regionId: regionId)
    }


    enum DescribeSubnetRequestRequestCodingKeys: String, CodingKey {
        case subnetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(subnetId, forKey: .subnetId)

    }
}

public class DescribeSubnetsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSubnetsResult?;

    enum DescribeSubnetsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubnetsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSubnetsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSubnetsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建子网 
public class CreateSubnetResult:NSObject,JdCloudResult
{
    /// 子网ID
    var subnetId:String?



    public override init(){
        super.init()
    }

    enum CreateSubnetResultCodingKeys: String, CodingKey {
        case subnetId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubnetResultCodingKeys.self)
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
    }
}
public extension CreateSubnetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubnetResultCodingKeys.self)
        try encoderContainer.encode(subnetId, forKey: .subnetId)
    }
}
public class DescribeSubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSubnetResult?;

    enum DescribeSubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteSubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSubnetResult?;

    enum DeleteSubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询子网列表
public class DescribeSubnetsRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// subnetIds - subnet ID列表，支持多个
      /// subnetNames - subnet名称列表，支持多个
      /// routeTableId	- 子网关联路由表Id，支持单个
      /// aclId - 子网关联acl Id，支持单个
      /// vpcId - 子网所属VPC Id，支持单个
      /// 
    var filters:[Filter?]?




    enum DescribeSubnetsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  删除子网
public class DeleteSubnetRequest:JdCloudRequest
{
    /// Subnet ID
    var subnetId:String


    public init(regionId: String,subnetId:String){
        self.subnetId = subnetId
        super.init(regionId: regionId)
    }


    enum DeleteSubnetRequestRequestCodingKeys: String, CodingKey {
        case subnetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(subnetId, forKey: .subnetId)

    }
}


///  创建子网
public class CreateSubnetRequest:JdCloudRequest
{
    /// 子网所属vpc的Id
    var vpcId:String

    /// 子网名称,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符。
    var subnetName:String

    /// 子网网段，vpc内子网网段不能重叠，cidr的取值范围：10.0.0.0/8、172.16.0.0/12和192.168.0.0/16及它们包含的子网，且子网掩码长度为16-28之间，如果vpc含有cidr，则必须为vpc所在cidr的子网
    var addressPrefix:String

    /// 子网关联的路由表Id, 默认为vpc的默认路由表
    var routeTableId:String?

    /// 子网描述信息,允许输入UTF-8编码下的全部字符，不超过256字符。
    var descriptionValue:String?


    public init(regionId: String,vpcId:String,subnetName:String,addressPrefix:String){
        self.vpcId = vpcId
        self.subnetName = subnetName
        self.addressPrefix = addressPrefix
        super.init(regionId: regionId)
    }


    enum CreateSubnetRequestRequestCodingKeys: String, CodingKey {
        case vpcId
        case subnetName
        case addressPrefix
        case routeTableId
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(subnetName, forKey: .subnetName)
        try encoderContainer.encode(addressPrefix, forKey: .addressPrefix)
        try encoderContainer.encode(routeTableId, forKey: .routeTableId)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}

/// 修改子网接口 
public class ModifySubnetResult:NSObject,JdCloudResult
{
}
/// 查询子网列表 
public class DescribeSubnetsResult:NSObject,JdCloudResult
{
    /// 子网资源信息列表
    var subnets:[Subnet?]?

    /// 总数量
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeSubnetsResultCodingKeys: String, CodingKey {
        case subnets
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubnetsResultCodingKeys.self)
        if decoderContainer.contains(.subnets)
        {
            self.subnets = try decoderContainer.decode([Subnet?]?.self, forKey: .subnets)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeSubnetsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetsResultCodingKeys.self)
        try encoderContainer.encode(subnets, forKey: .subnets)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class CreateSubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSubnetResult?;

    enum CreateSubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询子网信息详情 
public class DescribeSubnetResult:NSObject,JdCloudResult
{
    /// 子网资源信息
    var subnet:Subnet?



    public override init(){
        super.init()
    }

    enum DescribeSubnetResultCodingKeys: String, CodingKey {
        case subnet
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSubnetResultCodingKeys.self)
        if decoderContainer.contains(.subnet)
        {
            self.subnet = try decoderContainer.decode(Subnet?.self, forKey: .subnet)
        }
    }
}
public extension DescribeSubnetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSubnetResultCodingKeys.self)
        try encoderContainer.encode(subnet, forKey: .subnet)
    }
}
public class ModifySubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifySubnetResult?;

    enum ModifySubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifySubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifySubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifySubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifySubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改子网接口
public class ModifySubnetRequest:JdCloudRequest
{
    /// 子网名称,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符。
    var subnetName:String?

    /// 子网描述信息，允许输入UTF-8编码下的全部字符，不超过256字符。
    var descriptionValue:String?

    /// Subnet ID
    var subnetId:String


    public init(regionId: String,subnetId:String){
        self.subnetId = subnetId
        super.init(regionId: regionId)
    }


    enum ModifySubnetRequestRequestCodingKeys: String, CodingKey {
        case subnetName
        case descriptionValue = "description"
        case subnetId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifySubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(subnetName, forKey: .subnetName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(subnetId, forKey: .subnetId)

    }
}

/// 查询安全组列表 
public class DescribeNetworkSecurityGroupsResult:NSObject,JdCloudResult
{
    /// 安全组资源信息列表
    var networkSecurityGroups:[NetworkSecurityGroup?]?

    /// 总数量
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeNetworkSecurityGroupsResultCodingKeys: String, CodingKey {
        case networkSecurityGroups
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNetworkSecurityGroupsResultCodingKeys.self)
        if decoderContainer.contains(.networkSecurityGroups)
        {
            self.networkSecurityGroups = try decoderContainer.decode([NetworkSecurityGroup?]?.self, forKey: .networkSecurityGroups)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeNetworkSecurityGroupsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkSecurityGroupsResultCodingKeys.self)
        try encoderContainer.encode(networkSecurityGroups, forKey: .networkSecurityGroups)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  移除安全组规则
public class RemoveNetworkSecurityGroupRulesRequest:JdCloudRequest
{
    /// 安全组规则Id列表
    var ruleIds:[String?]?

    /// NetworkSecurityGroup ID
    var networkSecurityGroupId:String


    public init(regionId: String,networkSecurityGroupId:String){
        self.networkSecurityGroupId = networkSecurityGroupId
        super.init(regionId: regionId)
    }


    enum RemoveNetworkSecurityGroupRulesRequestRequestCodingKeys: String, CodingKey {
        case ruleIds
        case networkSecurityGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveNetworkSecurityGroupRulesRequestRequestCodingKeys.self)
        try encoderContainer.encode(ruleIds, forKey: .ruleIds)
        try encoderContainer.encode(networkSecurityGroupId, forKey: .networkSecurityGroupId)

    }
}

/// 查询安全组信息详情 
public class DescribeNetworkSecurityGroupResult:NSObject,JdCloudResult
{
    /// 安全组资源信息
    var networkSecurityGroup:NetworkSecurityGroup?



    public override init(){
        super.init()
    }

    enum DescribeNetworkSecurityGroupResultCodingKeys: String, CodingKey {
        case networkSecurityGroup
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNetworkSecurityGroupResultCodingKeys.self)
        if decoderContainer.contains(.networkSecurityGroup)
        {
            self.networkSecurityGroup = try decoderContainer.decode(NetworkSecurityGroup?.self, forKey: .networkSecurityGroup)
        }
    }
}
public extension DescribeNetworkSecurityGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkSecurityGroupResultCodingKeys.self)
        try encoderContainer.encode(networkSecurityGroup, forKey: .networkSecurityGroup)
    }
}

///  删除安全组
public class DeleteNetworkSecurityGroupRequest:JdCloudRequest
{
    /// NetworkSecurityGroup ID
    var networkSecurityGroupId:String


    public init(regionId: String,networkSecurityGroupId:String){
        self.networkSecurityGroupId = networkSecurityGroupId
        super.init(regionId: regionId)
    }


    enum DeleteNetworkSecurityGroupRequestRequestCodingKeys: String, CodingKey {
        case networkSecurityGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteNetworkSecurityGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkSecurityGroupId, forKey: .networkSecurityGroupId)

    }
}


///  创建安全组
public class CreateNetworkSecurityGroupRequest:JdCloudRequest
{
    /// 私有网络ID
    var vpcId:String

    /// 安全组名称，只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符。
    var networkSecurityGroupName:String

    /// 描述,​ 允许输入UTF-8编码下的全部字符，不超过256字符
    var descriptionValue:String?


    public init(regionId: String,vpcId:String,networkSecurityGroupName:String){
        self.vpcId = vpcId
        self.networkSecurityGroupName = networkSecurityGroupName
        super.init(regionId: regionId)
    }


    enum CreateNetworkSecurityGroupRequestRequestCodingKeys: String, CodingKey {
        case vpcId
        case networkSecurityGroupName
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNetworkSecurityGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(networkSecurityGroupName, forKey: .networkSecurityGroupName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}

public class AddNetworkSecurityGroupRulesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddNetworkSecurityGroupRulesResult?;

    enum AddNetworkSecurityGroupRulesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddNetworkSecurityGroupRulesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddNetworkSecurityGroupRulesResult?.self, forKey: .result) ?? nil
    }
}

public extension AddNetworkSecurityGroupRulesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddNetworkSecurityGroupRulesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建安全组 
public class CreateNetworkSecurityGroupResult:NSObject,JdCloudResult
{
    /// 安全组ID
    var networkSecurityGroupId:String?



    public override init(){
        super.init()
    }

    enum CreateNetworkSecurityGroupResultCodingKeys: String, CodingKey {
        case networkSecurityGroupId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateNetworkSecurityGroupResultCodingKeys.self)
        if decoderContainer.contains(.networkSecurityGroupId)
        {
            self.networkSecurityGroupId = try decoderContainer.decode(String?.self, forKey: .networkSecurityGroupId)
        }
    }
}
public extension CreateNetworkSecurityGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNetworkSecurityGroupResultCodingKeys.self)
        try encoderContainer.encode(networkSecurityGroupId, forKey: .networkSecurityGroupId)
    }
}
/// 添加安全组规则 
public class AddNetworkSecurityGroupRulesResult:NSObject,JdCloudResult
{
}
public class DescribeNetworkSecurityGroupsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeNetworkSecurityGroupsResult?;

    enum DescribeNetworkSecurityGroupsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNetworkSecurityGroupsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeNetworkSecurityGroupsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeNetworkSecurityGroupsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkSecurityGroupsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyNetworkSecurityGroupRulesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyNetworkSecurityGroupRulesResult?;

    enum ModifyNetworkSecurityGroupRulesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyNetworkSecurityGroupRulesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyNetworkSecurityGroupRulesResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyNetworkSecurityGroupRulesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyNetworkSecurityGroupRulesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateNetworkSecurityGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateNetworkSecurityGroupResult?;

    enum CreateNetworkSecurityGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateNetworkSecurityGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateNetworkSecurityGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateNetworkSecurityGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNetworkSecurityGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加安全组规则
public class AddNetworkSecurityGroupRulesRequest:JdCloudRequest
{
    /// 安全组规则信息
    var networkSecurityGroupRuleSpecs:[AddSecurityGroupRules?]?

    /// NetworkSecurityGroup ID
    var networkSecurityGroupId:String


    public init(regionId: String,networkSecurityGroupRuleSpecs:[AddSecurityGroupRules?]?,networkSecurityGroupId:String){
        self.networkSecurityGroupRuleSpecs = networkSecurityGroupRuleSpecs
        self.networkSecurityGroupId = networkSecurityGroupId
        super.init(regionId: regionId)
    }


    enum AddNetworkSecurityGroupRulesRequestRequestCodingKeys: String, CodingKey {
        case networkSecurityGroupRuleSpecs
        case networkSecurityGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddNetworkSecurityGroupRulesRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkSecurityGroupRuleSpecs, forKey: .networkSecurityGroupRuleSpecs)
        try encoderContainer.encode(networkSecurityGroupId, forKey: .networkSecurityGroupId)

    }
}


///  修改安全组规则
public class ModifyNetworkSecurityGroupRulesRequest:JdCloudRequest
{
    /// 安全组规则信息
    var modifySecurityGroupRuleSpecs:[ModifySecurityGroupRules?]?

    /// NetworkSecurityGroup ID
    var networkSecurityGroupId:String


    public init(regionId: String,modifySecurityGroupRuleSpecs:[ModifySecurityGroupRules?]?,networkSecurityGroupId:String){
        self.modifySecurityGroupRuleSpecs = modifySecurityGroupRuleSpecs
        self.networkSecurityGroupId = networkSecurityGroupId
        super.init(regionId: regionId)
    }


    enum ModifyNetworkSecurityGroupRulesRequestRequestCodingKeys: String, CodingKey {
        case modifySecurityGroupRuleSpecs
        case networkSecurityGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyNetworkSecurityGroupRulesRequestRequestCodingKeys.self)
        try encoderContainer.encode(modifySecurityGroupRuleSpecs, forKey: .modifySecurityGroupRuleSpecs)
        try encoderContainer.encode(networkSecurityGroupId, forKey: .networkSecurityGroupId)

    }
}

public class RemoveNetworkSecurityGroupRulesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RemoveNetworkSecurityGroupRulesResult?;

    enum RemoveNetworkSecurityGroupRulesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RemoveNetworkSecurityGroupRulesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RemoveNetworkSecurityGroupRulesResult?.self, forKey: .result) ?? nil
    }
}

public extension RemoveNetworkSecurityGroupRulesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveNetworkSecurityGroupRulesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询安全组列表
public class DescribeNetworkSecurityGroupsRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// networkSecurityGroupIds - 安全组ID列表，支持多个
      /// networkSecurityGroupNames - 安全组名称列表，支持多个
      /// vpcId	- 安全组所属vpc Id，支持单个
      /// 
    var filters:[Filter?]?




    enum DescribeNetworkSecurityGroupsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkSecurityGroupsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 修改安全组规则 
public class ModifyNetworkSecurityGroupRulesResult:NSObject,JdCloudResult
{
}
/// 删除安全组 
public class DeleteNetworkSecurityGroupResult:NSObject,JdCloudResult
{
}
/// 修改安全组属性 
public class ModifyNetworkSecurityGroupResult:NSObject,JdCloudResult
{
}
public class DeleteNetworkSecurityGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteNetworkSecurityGroupResult?;

    enum DeleteNetworkSecurityGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteNetworkSecurityGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteNetworkSecurityGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteNetworkSecurityGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteNetworkSecurityGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyNetworkSecurityGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyNetworkSecurityGroupResult?;

    enum ModifyNetworkSecurityGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyNetworkSecurityGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyNetworkSecurityGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyNetworkSecurityGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyNetworkSecurityGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询安全组信息详情
public class DescribeNetworkSecurityGroupRequest:JdCloudRequest
{
    /// NetworkSecurityGroup ID
    var networkSecurityGroupId:String


    public init(regionId: String,networkSecurityGroupId:String){
        self.networkSecurityGroupId = networkSecurityGroupId
        super.init(regionId: regionId)
    }


    enum DescribeNetworkSecurityGroupRequestRequestCodingKeys: String, CodingKey {
        case networkSecurityGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkSecurityGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkSecurityGroupId, forKey: .networkSecurityGroupId)

    }
}

/// 移除安全组规则 
public class RemoveNetworkSecurityGroupRulesResult:NSObject,JdCloudResult
{
}

///  修改安全组属性
public class ModifyNetworkSecurityGroupRequest:JdCloudRequest
{
    /// 安全组的名字。名称取值范围：1-32个中文、英文大小写的字母、数字和下划线分隔符
    var networkSecurityGroupName:String?

    /// 安全组的描述，取值范围：0-256个UTF-8编码下的全部字符
    var descriptionValue:String?

    /// NetworkSecurityGroup ID
    var networkSecurityGroupId:String


    public init(regionId: String,networkSecurityGroupId:String){
        self.networkSecurityGroupId = networkSecurityGroupId
        super.init(regionId: regionId)
    }


    enum ModifyNetworkSecurityGroupRequestRequestCodingKeys: String, CodingKey {
        case networkSecurityGroupName
        case descriptionValue = "description"
        case networkSecurityGroupId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyNetworkSecurityGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkSecurityGroupName, forKey: .networkSecurityGroupName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(networkSecurityGroupId, forKey: .networkSecurityGroupId)

    }
}

public class DescribeNetworkSecurityGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeNetworkSecurityGroupResult?;

    enum DescribeNetworkSecurityGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNetworkSecurityGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeNetworkSecurityGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeNetworkSecurityGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkSecurityGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 添加networkAcl规则接口 
public class AddNetworkAclRulesResult:NSObject,JdCloudResult
{
}

///  修改networkAcl接口
public class ModifyNetworkAclRulesRequest:JdCloudRequest
{
    /// networkAcl规则列表
    var modifyNetworkAclRuleSpecs:[ModifyNetworkAclRuleSpec?]?

    /// networkAclId ID
    var networkAclId:String


    public init(regionId: String,modifyNetworkAclRuleSpecs:[ModifyNetworkAclRuleSpec?]?,networkAclId:String){
        self.modifyNetworkAclRuleSpecs = modifyNetworkAclRuleSpecs
        self.networkAclId = networkAclId
        super.init(regionId: regionId)
    }


    enum ModifyNetworkAclRulesRequestRequestCodingKeys: String, CodingKey {
        case modifyNetworkAclRuleSpecs
        case networkAclId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyNetworkAclRulesRequestRequestCodingKeys.self)
        try encoderContainer.encode(modifyNetworkAclRuleSpecs, forKey: .modifyNetworkAclRuleSpecs)
        try encoderContainer.encode(networkAclId, forKey: .networkAclId)

    }
}


///  查询networkAcl资源详情
public class DescribeNetworkAclRequest:JdCloudRequest
{
    /// networkAclId ID
    var networkAclId:String


    public init(regionId: String,networkAclId:String){
        self.networkAclId = networkAclId
        super.init(regionId: regionId)
    }


    enum DescribeNetworkAclRequestRequestCodingKeys: String, CodingKey {
        case networkAclId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkAclRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkAclId, forKey: .networkAclId)

    }
}

/// 创建networkAcl接口 
public class CreateNetworkAclResult:NSObject,JdCloudResult
{
    /// networkAcl ID
    var networkAclId:String?



    public override init(){
        super.init()
    }

    enum CreateNetworkAclResultCodingKeys: String, CodingKey {
        case networkAclId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateNetworkAclResultCodingKeys.self)
        if decoderContainer.contains(.networkAclId)
        {
            self.networkAclId = try decoderContainer.decode(String?.self, forKey: .networkAclId)
        }
    }
}
public extension CreateNetworkAclResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNetworkAclResultCodingKeys.self)
        try encoderContainer.encode(networkAclId, forKey: .networkAclId)
    }
}

///  给子网解绑NetworkAcl接口
public class DisassociateNetworkAclRequest:JdCloudRequest
{
    /// networkAcl要解绑的子网ID
    var subnetId:String

    /// networkAclId ID
    var networkAclId:String


    public init(regionId: String,subnetId:String,networkAclId:String){
        self.subnetId = subnetId
        self.networkAclId = networkAclId
        super.init(regionId: regionId)
    }


    enum DisassociateNetworkAclRequestRequestCodingKeys: String, CodingKey {
        case subnetId
        case networkAclId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateNetworkAclRequestRequestCodingKeys.self)
        try encoderContainer.encode(subnetId, forKey: .subnetId)
        try encoderContainer.encode(networkAclId, forKey: .networkAclId)

    }
}

/// 查询networkAcl资源详情 
public class DescribeNetworkAclResult:NSObject,JdCloudResult
{
    /// networkAcl资源信息
    var networkAcl:NetworkAcl?



    public override init(){
        super.init()
    }

    enum DescribeNetworkAclResultCodingKeys: String, CodingKey {
        case networkAcl
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNetworkAclResultCodingKeys.self)
        if decoderContainer.contains(.networkAcl)
        {
            self.networkAcl = try decoderContainer.decode(NetworkAcl?.self, forKey: .networkAcl)
        }
    }
}
public extension DescribeNetworkAclResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkAclResultCodingKeys.self)
        try encoderContainer.encode(networkAcl, forKey: .networkAcl)
    }
}
public class DeleteNetworkAclResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteNetworkAclResult?;

    enum DeleteNetworkAclResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteNetworkAclResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteNetworkAclResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteNetworkAclResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteNetworkAclResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeNetworkAclsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeNetworkAclsResult?;

    enum DescribeNetworkAclsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNetworkAclsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeNetworkAclsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeNetworkAclsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkAclsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询Acl列表 
public class DescribeNetworkAclsResult:NSObject,JdCloudResult
{
    /// networkAcl资源信息列表
    var networkAcls:[NetworkAcl?]?

    /// 总数量
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeNetworkAclsResultCodingKeys: String, CodingKey {
        case networkAcls
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNetworkAclsResultCodingKeys.self)
        if decoderContainer.contains(.networkAcls)
        {
            self.networkAcls = try decoderContainer.decode([NetworkAcl?]?.self, forKey: .networkAcls)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeNetworkAclsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkAclsResultCodingKeys.self)
        try encoderContainer.encode(networkAcls, forKey: .networkAcls)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  创建networkAcl接口
public class CreateNetworkAclRequest:JdCloudRequest
{
    /// 私有网络id
    var vpcId:String

    /// networkAcl名称
    var networkAclName:String

    /// 描述,允许输入UTF-8编码下的全部字符，不超过256字符
    var descriptionValue:String?


    public init(regionId: String,vpcId:String,networkAclName:String){
        self.vpcId = vpcId
        self.networkAclName = networkAclName
        super.init(regionId: regionId)
    }


    enum CreateNetworkAclRequestRequestCodingKeys: String, CodingKey {
        case vpcId
        case networkAclName
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNetworkAclRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(networkAclName, forKey: .networkAclName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}

/// 修改networkAcl接口 
public class ModifyNetworkAclRulesResult:NSObject,JdCloudResult
{
}
public class DescribeNetworkAclResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeNetworkAclResult?;

    enum DescribeNetworkAclResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeNetworkAclResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeNetworkAclResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeNetworkAclResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkAclResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 给子网绑定networkAcl接口 
public class AssociateNetworkAclResult:NSObject,JdCloudResult
{
}

///  移除networkAcl规则
public class RemoveNetworkAclRulesRequest:JdCloudRequest
{
    /// networkAcl规则ID列表
    var ruleIds:[String?]?

    /// networkAclId ID
    var networkAclId:String


    public init(regionId: String,networkAclId:String){
        self.networkAclId = networkAclId
        super.init(regionId: regionId)
    }


    enum RemoveNetworkAclRulesRequestRequestCodingKeys: String, CodingKey {
        case ruleIds
        case networkAclId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveNetworkAclRulesRequestRequestCodingKeys.self)
        try encoderContainer.encode(ruleIds, forKey: .ruleIds)
        try encoderContainer.encode(networkAclId, forKey: .networkAclId)

    }
}

public class AssociateNetworkAclResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AssociateNetworkAclResult?;

    enum AssociateNetworkAclResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateNetworkAclResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AssociateNetworkAclResult?.self, forKey: .result) ?? nil
    }
}

public extension AssociateNetworkAclResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateNetworkAclResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除networkAcl接口 
public class DeleteNetworkAclResult:NSObject,JdCloudResult
{
}
/// 修改networkAcl接口 
public class ModifyNetworkAclResult:NSObject,JdCloudResult
{
}

///  修改networkAcl接口
public class ModifyNetworkAclRequest:JdCloudRequest
{
    /// networkAcl名称,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符
    var networkAclName:String?

    /// 描述,允许输入UTF-8编码下的全部字符，不超过256字符
    var descriptionValue:String?

    /// networkAclId ID
    var networkAclId:String


    public init(regionId: String,networkAclId:String){
        self.networkAclId = networkAclId
        super.init(regionId: regionId)
    }


    enum ModifyNetworkAclRequestRequestCodingKeys: String, CodingKey {
        case networkAclName
        case descriptionValue = "description"
        case networkAclId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyNetworkAclRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkAclName, forKey: .networkAclName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(networkAclId, forKey: .networkAclId)

    }
}


///  删除networkAcl接口
public class DeleteNetworkAclRequest:JdCloudRequest
{
    /// networkAclId ID
    var networkAclId:String


    public init(regionId: String,networkAclId:String){
        self.networkAclId = networkAclId
        super.init(regionId: regionId)
    }


    enum DeleteNetworkAclRequestRequestCodingKeys: String, CodingKey {
        case networkAclId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteNetworkAclRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkAclId, forKey: .networkAclId)

    }
}

public class AddNetworkAclRulesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddNetworkAclRulesResult?;

    enum AddNetworkAclRulesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddNetworkAclRulesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddNetworkAclRulesResult?.self, forKey: .result) ?? nil
    }
}

public extension AddNetworkAclRulesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddNetworkAclRulesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateNetworkAclResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateNetworkAclResult?;

    enum CreateNetworkAclResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateNetworkAclResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateNetworkAclResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateNetworkAclResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateNetworkAclResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  给子网绑定networkAcl接口
public class AssociateNetworkAclRequest:JdCloudRequest
{
    /// networkAcl要绑定的子网ID列表, subnet已被其他networkAcl绑定时，自动解绑
    var subnetIds:[String?]?

    /// networkAclId ID
    var networkAclId:String


    public init(regionId: String,networkAclId:String){
        self.networkAclId = networkAclId
        super.init(regionId: regionId)
    }


    enum AssociateNetworkAclRequestRequestCodingKeys: String, CodingKey {
        case subnetIds
        case networkAclId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateNetworkAclRequestRequestCodingKeys.self)
        try encoderContainer.encode(subnetIds, forKey: .subnetIds)
        try encoderContainer.encode(networkAclId, forKey: .networkAclId)

    }
}

public class DisassociateNetworkAclResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisassociateNetworkAclResult?;

    enum DisassociateNetworkAclResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisassociateNetworkAclResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisassociateNetworkAclResult?.self, forKey: .result) ?? nil
    }
}

public extension DisassociateNetworkAclResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateNetworkAclResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyNetworkAclResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyNetworkAclResult?;

    enum ModifyNetworkAclResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyNetworkAclResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyNetworkAclResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyNetworkAclResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyNetworkAclResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 移除networkAcl规则 
public class RemoveNetworkAclRulesResult:NSObject,JdCloudResult
{
}
/// 给子网解绑NetworkAcl接口 
public class DisassociateNetworkAclResult:NSObject,JdCloudResult
{
}
public class ModifyNetworkAclRulesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyNetworkAclRulesResult?;

    enum ModifyNetworkAclRulesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyNetworkAclRulesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyNetworkAclRulesResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyNetworkAclRulesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyNetworkAclRulesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class RemoveNetworkAclRulesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RemoveNetworkAclRulesResult?;

    enum RemoveNetworkAclRulesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RemoveNetworkAclRulesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RemoveNetworkAclRulesResult?.self, forKey: .result) ?? nil
    }
}

public extension RemoveNetworkAclRulesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveNetworkAclRulesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询Acl列表
public class DescribeNetworkAclsRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// networkAclIds - 弹性网卡ID列表，支持多个
      /// networkAclNames - 弹性网卡名称列表，支持多个
      /// vpcId - 弹性网卡所属vpc Id，支持单个
      /// 
    var filters:[Filter?]?




    enum DescribeNetworkAclsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeNetworkAclsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  添加networkAcl规则接口
public class AddNetworkAclRulesRequest:JdCloudRequest
{
    /// networkAcl规则列表
    var networkAclRuleSpecs:[AddNetworkAclRuleSpec?]?

    /// networkAclId ID
    var networkAclId:String


    public init(regionId: String,networkAclRuleSpecs:[AddNetworkAclRuleSpec?]?,networkAclId:String){
        self.networkAclRuleSpecs = networkAclRuleSpecs
        self.networkAclId = networkAclId
        super.init(regionId: regionId)
    }


    enum AddNetworkAclRulesRequestRequestCodingKeys: String, CodingKey {
        case networkAclRuleSpecs
        case networkAclId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddNetworkAclRulesRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkAclRuleSpecs, forKey: .networkAclRuleSpecs)
        try encoderContainer.encode(networkAclId, forKey: .networkAclId)

    }
}

/// 修改弹性IP 
public class ModifyElasticIpResult:NSObject,JdCloudResult
{
}
/// 查询弹性ip列表 
public class DescribeElasticIpsResult:NSObject,JdCloudResult
{
    /// elasticIp资源信息列表
    var elasticIps:[ElasticIp?]?

    /// 总数量
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeElasticIpsResultCodingKeys: String, CodingKey {
        case elasticIps
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpsResultCodingKeys.self)
        if decoderContainer.contains(.elasticIps)
        {
            self.elasticIps = try decoderContainer.decode([ElasticIp?]?.self, forKey: .elasticIps)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeElasticIpsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpsResultCodingKeys.self)
        try encoderContainer.encode(elasticIps, forKey: .elasticIps)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DeleteElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteElasticIpResult?;

    enum DeleteElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  ElasticIp资源信息详情
public class DescribeElasticIpRequest:JdCloudRequest
{
    /// ElasticIp ID
    var elasticIpId:String


    public init(regionId: String,elasticIpId:String){
        self.elasticIpId = elasticIpId
        super.init(regionId: regionId)
    }


    enum DescribeElasticIpRequestRequestCodingKeys: String, CodingKey {
        case elasticIpId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)

    }
}

/// ElasticIp资源信息详情 
public class DescribeElasticIpResult:NSObject,JdCloudResult
{
    /// elasticIp资源信息
    var elasticIp:ElasticIp?



    public override init(){
        super.init()
    }

    enum DescribeElasticIpResultCodingKeys: String, CodingKey {
        case elasticIp
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpResultCodingKeys.self)
        if decoderContainer.contains(.elasticIp)
        {
            self.elasticIp = try decoderContainer.decode(ElasticIp?.self, forKey: .elasticIp)
        }
    }
}
public extension DescribeElasticIpResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpResultCodingKeys.self)
        try encoderContainer.encode(elasticIp, forKey: .elasticIp)
    }
}
public class DescribeElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeElasticIpResult?;

    enum DescribeElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询弹性ip列表
public class DescribeElasticIpsRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// elasticIpIds - elasticip id数组条件，支持多个
      /// elasticIpAddress - eip的IP地址，支持单个
      /// chargeStatus	- eip的费用支付状态,normal(正常状态) or overdue(预付费已到期) or arrear(欠费状态)，支持单个
      /// 
    var filters:[Filter?]?




    enum DescribeElasticIpsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class DescribeElasticIpsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeElasticIpsResult?;

    enum DescribeElasticIpsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeElasticIpsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeElasticIpsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeElasticIpsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeElasticIpsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除弹性Ip
public class DeleteElasticIpRequest:JdCloudRequest
{
    /// ElasticIp ID
    var elasticIpId:String


    public init(regionId: String,elasticIpId:String){
        self.elasticIpId = elasticIpId
        super.init(regionId: regionId)
    }


    enum DeleteElasticIpRequestRequestCodingKeys: String, CodingKey {
        case elasticIpId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)

    }
}

public class ModifyElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyElasticIpResult?;

    enum ModifyElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateElasticIpsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateElasticIpsResult?;

    enum CreateElasticIpsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateElasticIpsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateElasticIpsResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateElasticIpsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateElasticIpsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建一个或者多个弹性Ip
public class CreateElasticIpsRequest:JdCloudRequest
{
    /// 购买弹性ip数量；取值范围：[1,100]
    var maxCount:Int

    /// 指定弹性ip地址进行创建，当申请创建多个弹性ip时，必须为空
    var elasticIpAddress:String?

    /// 弹性ip规格
    var elasticIpSpec:ElasticIpSpec


    public init(regionId: String,maxCount:Int,elasticIpSpec:ElasticIpSpec){
        self.maxCount = maxCount
        self.elasticIpSpec = elasticIpSpec
        super.init(regionId: regionId)
    }


    enum CreateElasticIpsRequestRequestCodingKeys: String, CodingKey {
        case maxCount
        case elasticIpAddress
        case elasticIpSpec
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateElasticIpsRequestRequestCodingKeys.self)
        try encoderContainer.encode(maxCount, forKey: .maxCount)
        try encoderContainer.encode(elasticIpAddress, forKey: .elasticIpAddress)
        try encoderContainer.encode(elasticIpSpec, forKey: .elasticIpSpec)

    }
}


///  修改弹性IP
public class ModifyElasticIpRequest:JdCloudRequest
{
    /// 弹性公网IP的限速（单位：Mbps），取值范围为[1-200]
    var bandwidthMbps:Int

    /// ElasticIp ID
    var elasticIpId:String


    public init(regionId: String,bandwidthMbps:Int,elasticIpId:String){
        self.bandwidthMbps = bandwidthMbps
        self.elasticIpId = elasticIpId
        super.init(regionId: regionId)
    }


    enum ModifyElasticIpRequestRequestCodingKeys: String, CodingKey {
        case bandwidthMbps
        case elasticIpId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(bandwidthMbps, forKey: .bandwidthMbps)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)

    }
}

/// 创建一个或者多个弹性Ip 
public class CreateElasticIpsResult:NSObject,JdCloudResult
{
    /// 弹性IP ID列表
    var elasticIpIds:[String?]?

    /// 请求ID
    var requestId:String?



    public override init(){
        super.init()
    }

    enum CreateElasticIpsResultCodingKeys: String, CodingKey {
        case elasticIpIds
        case requestId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateElasticIpsResultCodingKeys.self)
        if decoderContainer.contains(.elasticIpIds)
        {
            self.elasticIpIds = try decoderContainer.decode([String?]?.self, forKey: .elasticIpIds)
        }
        if decoderContainer.contains(.requestId)
        {
            self.requestId = try decoderContainer.decode(String?.self, forKey: .requestId)
        }
    }
}
public extension CreateElasticIpsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateElasticIpsResultCodingKeys.self)
        try encoderContainer.encode(elasticIpIds, forKey: .elasticIpIds)
        try encoderContainer.encode(requestId, forKey: .requestId)
    }
}
/// 删除弹性Ip 
public class DeleteElasticIpResult:NSObject,JdCloudResult
{
}
/// 创建VpcPeering接口 
public class CreateVpcPeeringResult:NSObject,JdCloudResult
{
    /// VpcPeering资源信息
    var vpcPeering:VpcPeering?



    public override init(){
        super.init()
    }

    enum CreateVpcPeeringResultCodingKeys: String, CodingKey {
        case vpcPeering
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcPeeringResultCodingKeys.self)
        if decoderContainer.contains(.vpcPeering)
        {
            self.vpcPeering = try decoderContainer.decode(VpcPeering?.self, forKey: .vpcPeering)
        }
    }
}
public extension CreateVpcPeeringResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcPeeringResultCodingKeys.self)
        try encoderContainer.encode(vpcPeering, forKey: .vpcPeering)
    }
}
public class DescribeVpcPeeringResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeVpcPeeringResult?;

    enum DescribeVpcPeeringResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcPeeringResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeVpcPeeringResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeVpcPeeringResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcPeeringResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询VpcPeering资源详情 
public class DescribeVpcPeeringResult:NSObject,JdCloudResult
{
    /// VpcPeering资源信息
    var vpcPeering:VpcPeering?



    public override init(){
        super.init()
    }

    enum DescribeVpcPeeringResultCodingKeys: String, CodingKey {
        case vpcPeering
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcPeeringResultCodingKeys.self)
        if decoderContainer.contains(.vpcPeering)
        {
            self.vpcPeering = try decoderContainer.decode(VpcPeering?.self, forKey: .vpcPeering)
        }
    }
}
public extension DescribeVpcPeeringResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcPeeringResultCodingKeys.self)
        try encoderContainer.encode(vpcPeering, forKey: .vpcPeering)
    }
}
/// 修改VpcPeering接口 
public class ModifyVpcPeeringResult:NSObject,JdCloudResult
{
}

///  查询VpcPeering资源列表
public class DescribeVpcPeeringsRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// vpcPeeringIds - vpcPeering ID，支持多个
      /// vpcPeeringNames - vpcPeering名称列表，支持多个
      /// vpcId	- vpcPeering本端Vpc Id，支持单个
      /// remoteVpcId - vpcPeering对端Vpc Id，支持单个
      /// 
    var filters:[Filter?]?




    enum DescribeVpcPeeringsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcPeeringsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class CreateVpcPeeringResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVpcPeeringResult?;

    enum CreateVpcPeeringResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcPeeringResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVpcPeeringResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVpcPeeringResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcPeeringResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除VpcPeering接口 
public class DeleteVpcPeeringResult:NSObject,JdCloudResult
{
}
public class DeleteVpcPeeringResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVpcPeeringResult?;

    enum DeleteVpcPeeringResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVpcPeeringResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVpcPeeringResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVpcPeeringResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcPeeringResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改VpcPeering接口
public class ModifyVpcPeeringRequest:JdCloudRequest
{
    /// VpcPeering的名字,不为空。名称取值范围：1-32个中文、英文大小写的字母、数字和下划线分隔符
    var vpcPeeringName:String?

    /// VpcPeering 描述，取值范围：0-256个中文、英文大小写的字母、数字和下划线分隔符
    var descriptionValue:String?

    /// vpcPeeringId ID
    var vpcPeeringId:String


    public init(regionId: String,vpcPeeringId:String){
        self.vpcPeeringId = vpcPeeringId
        super.init(regionId: regionId)
    }


    enum ModifyVpcPeeringRequestRequestCodingKeys: String, CodingKey {
        case vpcPeeringName
        case descriptionValue = "description"
        case vpcPeeringId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyVpcPeeringRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcPeeringName, forKey: .vpcPeeringName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(vpcPeeringId, forKey: .vpcPeeringId)

    }
}

public class ModifyVpcPeeringResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyVpcPeeringResult?;

    enum ModifyVpcPeeringResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyVpcPeeringResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyVpcPeeringResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyVpcPeeringResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyVpcPeeringResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建VpcPeering接口
public class CreateVpcPeeringRequest:JdCloudRequest
{
    /// VpcPeering的名字,不为空。名称取值范围：1-32个中文、英文大小写的字母、数字和下划线分隔符
    var vpcPeeringName:String

    /// VpcPeering本端Vpc的Id
    var vpcId:String

    /// VpcPeering对端Vpc的Id
    var remoteVpcId:String

    /// VpcPeering 描述，取值范围：0-256个中文、英文大小写的字母、数字和下划线分隔符
    var descriptionValue:String?


    public init(regionId: String,vpcPeeringName:String,vpcId:String,remoteVpcId:String){
        self.vpcPeeringName = vpcPeeringName
        self.vpcId = vpcId
        self.remoteVpcId = remoteVpcId
        super.init(regionId: regionId)
    }


    enum CreateVpcPeeringRequestRequestCodingKeys: String, CodingKey {
        case vpcPeeringName
        case vpcId
        case remoteVpcId
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcPeeringRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcPeeringName, forKey: .vpcPeeringName)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
        try encoderContainer.encode(remoteVpcId, forKey: .remoteVpcId)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}


///  查询VpcPeering资源详情
public class DescribeVpcPeeringRequest:JdCloudRequest
{
    /// vpcPeeringId ID
    var vpcPeeringId:String


    public init(regionId: String,vpcPeeringId:String){
        self.vpcPeeringId = vpcPeeringId
        super.init(regionId: regionId)
    }


    enum DescribeVpcPeeringRequestRequestCodingKeys: String, CodingKey {
        case vpcPeeringId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcPeeringRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcPeeringId, forKey: .vpcPeeringId)

    }
}


///  删除VpcPeering接口
public class DeleteVpcPeeringRequest:JdCloudRequest
{
    /// vpcPeeringId ID
    var vpcPeeringId:String


    public init(regionId: String,vpcPeeringId:String){
        self.vpcPeeringId = vpcPeeringId
        super.init(regionId: regionId)
    }


    enum DeleteVpcPeeringRequestRequestCodingKeys: String, CodingKey {
        case vpcPeeringId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcPeeringRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcPeeringId, forKey: .vpcPeeringId)

    }
}

public class DescribeVpcPeeringsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeVpcPeeringsResult?;

    enum DescribeVpcPeeringsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcPeeringsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeVpcPeeringsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeVpcPeeringsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcPeeringsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询VpcPeering资源列表 
public class DescribeVpcPeeringsResult:NSObject,JdCloudResult
{
    /// VpcPeering资源信息列表
    var vpcPeerings:[VpcPeering?]?

    /// 总数量
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeVpcPeeringsResultCodingKeys: String, CodingKey {
        case vpcPeerings
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcPeeringsResultCodingKeys.self)
        if decoderContainer.contains(.vpcPeerings)
        {
            self.vpcPeerings = try decoderContainer.decode([VpcPeering?]?.self, forKey: .vpcPeerings)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeVpcPeeringsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcPeeringsResultCodingKeys.self)
        try encoderContainer.encode(vpcPeerings, forKey: .vpcPeerings)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  查询私有网络列表
public class DescribeVpcsRequest:JdCloudRequest
{
    /// 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页
    var pageNumber:Int?

    /// 分页大小，默认为20，取值范围：[10,100]
    var pageSize:Int?

    /// vpcIds - vpc ID列表，支持多个
      /// vpcNames - vpc名称列表,支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeVpcsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  删除私有网络
public class DeleteVpcRequest:JdCloudRequest
{
    /// Vpc ID
    var vpcId:String


    public init(regionId: String,vpcId:String){
        self.vpcId = vpcId
        super.init(regionId: regionId)
    }


    enum DeleteVpcRequestRequestCodingKeys: String, CodingKey {
        case vpcId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcId, forKey: .vpcId)

    }
}

/// 查询私有网络列表 
public class DescribeVpcsResult:NSObject,JdCloudResult
{
    /// Vpc资源信息列表
    var vpcs:[Vpc?]?

    /// 总数量
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeVpcsResultCodingKeys: String, CodingKey {
        case vpcs
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcsResultCodingKeys.self)
        if decoderContainer.contains(.vpcs)
        {
            self.vpcs = try decoderContainer.decode([Vpc?]?.self, forKey: .vpcs)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeVpcsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcsResultCodingKeys.self)
        try encoderContainer.encode(vpcs, forKey: .vpcs)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 查询Vpc信息详情 
public class DescribeVpcResult:NSObject,JdCloudResult
{
    /// Vpc资源信息
    var vpc:Vpc?



    public override init(){
        super.init()
    }

    enum DescribeVpcResultCodingKeys: String, CodingKey {
        case vpc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcResultCodingKeys.self)
        if decoderContainer.contains(.vpc)
        {
            self.vpc = try decoderContainer.decode(Vpc?.self, forKey: .vpc)
        }
    }
}
public extension DescribeVpcResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcResultCodingKeys.self)
        try encoderContainer.encode(vpc, forKey: .vpc)
    }
}

///  查询Vpc信息详情
public class DescribeVpcRequest:JdCloudRequest
{
    /// Vpc ID
    var vpcId:String


    public init(regionId: String,vpcId:String){
        self.vpcId = vpcId
        super.init(regionId: regionId)
    }


    enum DescribeVpcRequestRequestCodingKeys: String, CodingKey {
        case vpcId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcId, forKey: .vpcId)

    }
}

public class DescribeVpcResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeVpcResult?;

    enum DescribeVpcResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeVpcResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeVpcResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建私有网络
public class CreateVpcRequest:JdCloudRequest
{
    /// 私有网络名称,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符。
    var vpcName:String

    /// 如果为空，则不限制网段，如果不为空，10.0.0.0/8、172.16.0.0/12和192.168.0.0/16及它们包含的子网，且子网掩码长度为16-28之间
    var addressPrefix:String?

    /// vpc描述，允许输入UTF-8编码下的全部字符，不超过256字符。
    var descriptionValue:String?


    public init(regionId: String,vpcName:String){
        self.vpcName = vpcName
        super.init(regionId: regionId)
    }


    enum CreateVpcRequestRequestCodingKeys: String, CodingKey {
        case vpcName
        case addressPrefix
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcName, forKey: .vpcName)
        try encoderContainer.encode(addressPrefix, forKey: .addressPrefix)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}


///  修改私有网络接口
public class ModifyVpcRequest:JdCloudRequest
{
    /// 私有网络名称,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符。
    var vpcName:String?

    /// vpc描述，允许输入UTF-8编码下的全部字符，不超过256字符。
    var descriptionValue:String?

    /// Vpc ID
    var vpcId:String


    public init(regionId: String,vpcId:String){
        self.vpcId = vpcId
        super.init(regionId: regionId)
    }


    enum ModifyVpcRequestRequestCodingKeys: String, CodingKey {
        case vpcName
        case descriptionValue = "description"
        case vpcId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyVpcRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpcName, forKey: .vpcName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(vpcId, forKey: .vpcId)

    }
}

public class DeleteVpcResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVpcResult?;

    enum DeleteVpcResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVpcResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVpcResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVpcResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改私有网络接口 
public class ModifyVpcResult:NSObject,JdCloudResult
{
}
public class CreateVpcResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVpcResult?;

    enum CreateVpcResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVpcResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVpcResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyVpcResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyVpcResult?;

    enum ModifyVpcResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyVpcResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyVpcResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyVpcResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyVpcResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除私有网络 
public class DeleteVpcResult:NSObject,JdCloudResult
{
}
/// 创建私有网络 
public class CreateVpcResult:NSObject,JdCloudResult
{
    /// 私有网络ID
    var vpcId:String?



    public override init(){
        super.init()
    }

    enum CreateVpcResultCodingKeys: String, CodingKey {
        case vpcId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcResultCodingKeys.self)
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
    }
}
public extension CreateVpcResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcResultCodingKeys.self)
        try encoderContainer.encode(vpcId, forKey: .vpcId)
    }
}
public class DescribeVpcsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeVpcsResult?;

    enum DescribeVpcsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeVpcsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeVpcsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeVpcsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeVpcsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
