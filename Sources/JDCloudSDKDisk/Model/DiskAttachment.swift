/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  diskAttachment
@objc(DiskAttachment)
public class DiskAttachment:NSObject,Codable{
    /// 挂载ID
    var attachmentId:String?
    /// 云硬盘ID
    var diskId:String?
    /// 挂载实例的类型，取值为 vm、nc
    var instanceType:String?
    /// 挂载实例的ID
    var instanceId:String?
    /// 挂载状态，取值为 &quot;attaching&quot;, &quot;attached&quot;, &quot;detaching&quot;, &quot;detached&quot;
    var status:String?
    /// 挂载时间
    var attachTime:String?



    public override init(){
            super.init()
    }

    enum DiskAttachmentCodingKeys: String, CodingKey {
        case attachmentId
        case diskId
        case instanceType
        case instanceId
        case status
        case attachTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DiskAttachmentCodingKeys.self)
        if decoderContainer.contains(.attachmentId)
        {
            self.attachmentId = try decoderContainer.decode(String?.self, forKey: .attachmentId)
        }
        if decoderContainer.contains(.diskId)
        {
            self.diskId = try decoderContainer.decode(String?.self, forKey: .diskId)
        }
        if decoderContainer.contains(.instanceType)
        {
            self.instanceType = try decoderContainer.decode(String?.self, forKey: .instanceType)
        }
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.attachTime)
        {
            self.attachTime = try decoderContainer.decode(String?.self, forKey: .attachTime)
        }
    }
}
public extension DiskAttachment{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DiskAttachmentCodingKeys.self)
         try encoderContainer.encode(attachmentId, forKey: .attachmentId)
         try encoderContainer.encode(diskId, forKey: .diskId)
         try encoderContainer.encode(instanceType, forKey: .instanceType)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(attachTime, forKey: .attachTime)
    }
}
