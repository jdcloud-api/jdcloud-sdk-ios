/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  快照信息详情
@objc(Snapshot)
public class Snapshot:NSObject,Codable{
    /// 云硬盘快照ID
    var snapshotId:String?
    /// 快照来源 可以有self，others两种来源
    var snapshotSource:String?
    /// 创建快照的云硬盘ID(snapshotSource为others时不展示)
    var diskId:String?
    /// 快照大小，单位为GiB
    var snapshotSizeGB:Int?
    /// 快照关联的所有镜像ID(snapshotSource为others时不展示)
    var images:[String?]?
    /// 快照名称
    var name:String?
    /// 快照描述
    var descriptionValue:String?
    /// 快照状态，取值为 creating、available、in-use、deleting、error_create、error_delete 之一
    var status:String?
    /// 创建时间
    var createTime:String?
    /// 共享信息
    var sharInfo:[ShareInfo?]?
    /// 快照是否为加密盘的快照
    var encrypted:Bool?



    public override init(){
            super.init()
    }

    enum SnapshotCodingKeys: String, CodingKey {
        case snapshotId
        case snapshotSource
        case diskId
        case snapshotSizeGB
        case images
        case name
        case descriptionValue = "description"
        case status
        case createTime
        case sharInfo
        case encrypted
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SnapshotCodingKeys.self)
        if decoderContainer.contains(.snapshotId)
        {
            self.snapshotId = try decoderContainer.decode(String?.self, forKey: .snapshotId)
        }
        if decoderContainer.contains(.snapshotSource)
        {
            self.snapshotSource = try decoderContainer.decode(String?.self, forKey: .snapshotSource)
        }
        if decoderContainer.contains(.diskId)
        {
            self.diskId = try decoderContainer.decode(String?.self, forKey: .diskId)
        }
        if decoderContainer.contains(.snapshotSizeGB)
        {
            self.snapshotSizeGB = try decoderContainer.decode(Int?.self, forKey: .snapshotSizeGB)
        }
        if decoderContainer.contains(.images)
        {
            self.images = try decoderContainer.decode([String?]?.self, forKey: .images)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.sharInfo)
        {
            self.sharInfo = try decoderContainer.decode([ShareInfo?]?.self, forKey: .sharInfo)
        }
        if decoderContainer.contains(.encrypted)
        {
            self.encrypted = try decoderContainer.decode(Bool?.self, forKey: .encrypted)
        }
    }
}
public extension Snapshot{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SnapshotCodingKeys.self)
         try encoderContainer.encode(snapshotId, forKey: .snapshotId)
         try encoderContainer.encode(snapshotSource, forKey: .snapshotSource)
         try encoderContainer.encode(diskId, forKey: .diskId)
         try encoderContainer.encode(snapshotSizeGB, forKey: .snapshotSizeGB)
         try encoderContainer.encode(images, forKey: .images)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(sharInfo, forKey: .sharInfo)
         try encoderContainer.encode(encrypted, forKey: .encrypted)
    }
}
