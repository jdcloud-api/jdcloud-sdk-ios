/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCharge

///  diskSpec
@objc(DiskSpec)
public class DiskSpec:NSObject,Codable{
    /// 云硬盘所属的可用区
    /// Required:true
    var az:String
    /// 云硬盘名称
    /// Required:true
    var name:String
    /// 云硬盘描述
    var descriptionValue:String?
    /// 云硬盘类型，取值为ssd、premium-hdd之一
    /// Required:true
    var diskType:String
    /// 云硬盘大小，单位为 GiB，ssd 类型取值范围[20,1000]GB，步长为10G，premium-hdd 类型取值范围[20,3000]GB，步长为10G
    /// Required:true
    var diskSizeGB:Int
    /// 用于创建云硬盘的快照ID
    var snapshotId:String?
    /// 计费配置；如不指定，默认计费类型是后付费-按使用时常付费
    var charge:ChargeSpec?



    public  init(az:String,name:String,diskType:String,diskSizeGB:Int){
             self.az = az
             self.name = name
             self.diskType = diskType
             self.diskSizeGB = diskSizeGB
    }

    enum DiskSpecCodingKeys: String, CodingKey {
        case az
        case name
        case descriptionValue = "description"
        case diskType
        case diskSizeGB
        case snapshotId
        case charge
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DiskSpecCodingKeys.self)
        self.az = try decoderContainer.decode(String.self, forKey: .az)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        self.diskType = try decoderContainer.decode(String.self, forKey: .diskType)
        self.diskSizeGB = try decoderContainer.decode(Int.self, forKey: .diskSizeGB)
        if decoderContainer.contains(.snapshotId)
        {
            self.snapshotId = try decoderContainer.decode(String?.self, forKey: .snapshotId)
        }
        if decoderContainer.contains(.charge)
        {
            self.charge = try decoderContainer.decode(ChargeSpec?.self, forKey: .charge)
        }
    }
}
public extension DiskSpec{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DiskSpecCodingKeys.self)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(diskType, forKey: .diskType)
         try encoderContainer.encode(diskSizeGB, forKey: .diskSizeGB)
         try encoderContainer.encode(snapshotId, forKey: .snapshotId)
         try encoderContainer.encode(charge, forKey: .charge)
    }
}
