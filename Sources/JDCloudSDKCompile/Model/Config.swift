/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  config
@objc(Config)
public class Config:NSObject,Codable{
    /// 运行镜像
    var image:[ImageDefine?]?
    /// 源提供商选项
    var codeType:[CodeTypeDefine?]?
    /// 构建存放
    var oss:[OssDefine?]?
    /// 超时时间
    var timeout:[TimeoutDefine?]?
    /// 计算类型
    var computeType:[ComputeTypeDefine?]?
    /// 邮件类型
    var mailType:[MailTypeDefine?]?
    /// 编译类型
    var compilerType:[CompilerTypeDefine?]?



    public override init(){
            super.init()
    }

    enum ConfigCodingKeys: String, CodingKey {
        case image
        case codeType
        case oss
        case timeout
        case computeType
        case mailType
        case compilerType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ConfigCodingKeys.self)
        if decoderContainer.contains(.image)
        {
            self.image = try decoderContainer.decode([ImageDefine?]?.self, forKey: .image)
        }
        if decoderContainer.contains(.codeType)
        {
            self.codeType = try decoderContainer.decode([CodeTypeDefine?]?.self, forKey: .codeType)
        }
        if decoderContainer.contains(.oss)
        {
            self.oss = try decoderContainer.decode([OssDefine?]?.self, forKey: .oss)
        }
        if decoderContainer.contains(.timeout)
        {
            self.timeout = try decoderContainer.decode([TimeoutDefine?]?.self, forKey: .timeout)
        }
        if decoderContainer.contains(.computeType)
        {
            self.computeType = try decoderContainer.decode([ComputeTypeDefine?]?.self, forKey: .computeType)
        }
        if decoderContainer.contains(.mailType)
        {
            self.mailType = try decoderContainer.decode([MailTypeDefine?]?.self, forKey: .mailType)
        }
        if decoderContainer.contains(.compilerType)
        {
            self.compilerType = try decoderContainer.decode([CompilerTypeDefine?]?.self, forKey: .compilerType)
        }
    }
}
public extension Config{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ConfigCodingKeys.self)
         try encoderContainer.encode(image, forKey: .image)
         try encoderContainer.encode(codeType, forKey: .codeType)
         try encoderContainer.encode(oss, forKey: .oss)
         try encoderContainer.encode(timeout, forKey: .timeout)
         try encoderContainer.encode(computeType, forKey: .computeType)
         try encoderContainer.encode(mailType, forKey: .mailType)
         try encoderContainer.encode(compilerType, forKey: .compilerType)
    }
}
