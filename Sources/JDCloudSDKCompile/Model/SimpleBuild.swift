/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  simpleBuild
@objc(SimpleBuild)
public class SimpleBuild:NSObject,Codable{
    /// 构建任务的uuid
    var uuid:String?
    /// 构建任务所属的job名
    var jobName:String?
    /// 构建任务创建时间
    var createdAt:Int?
    /// 构建类型
    var compilerType:String?
    /// 构建任务的运行状态
    var status:String?
    /// 构建任务运行时间
    var duration:Int?



    public override init(){
            super.init()
    }

    enum SimpleBuildCodingKeys: String, CodingKey {
        case uuid
        case jobName
        case createdAt
        case compilerType
        case status
        case duration
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SimpleBuildCodingKeys.self)
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.jobName)
        {
            self.jobName = try decoderContainer.decode(String?.self, forKey: .jobName)
        }
        if decoderContainer.contains(.createdAt)
        {
            self.createdAt = try decoderContainer.decode(Int?.self, forKey: .createdAt)
        }
        if decoderContainer.contains(.compilerType)
        {
            self.compilerType = try decoderContainer.decode(String?.self, forKey: .compilerType)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.duration)
        {
            self.duration = try decoderContainer.decode(Int?.self, forKey: .duration)
        }
    }
}
public extension SimpleBuild{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SimpleBuildCodingKeys.self)
         try encoderContainer.encode(uuid, forKey: .uuid)
         try encoderContainer.encode(jobName, forKey: .jobName)
         try encoderContainer.encode(createdAt, forKey: .createdAt)
         try encoderContainer.encode(compilerType, forKey: .compilerType)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(duration, forKey: .duration)
    }
}
