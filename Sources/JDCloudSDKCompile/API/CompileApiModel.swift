/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   compiler type api
   API related to job compiler type

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon

/// 创建Demo 
public class CreateDemoResult:NSObject,JdCloudResult
{
    /// Job
    var job:Job?



    public override init(){
        super.init()
    }

    enum CreateDemoResultCodingKeys: String, CodingKey {
        case job
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDemoResultCodingKeys.self)
        if decoderContainer.contains(.job)
        {
            self.job = try decoderContainer.decode(Job?.self, forKey: .job)
        }
    }
}
public extension CreateDemoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDemoResultCodingKeys.self)
        try encoderContainer.encode(job, forKey: .job)
    }
}
public class CreateDemoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateDemoResult?;

    enum CreateDemoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDemoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateDemoResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateDemoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDemoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建Demo
public class CreateDemoRequest:JdCloudRequest
{
}

public class GetBuildStatusResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetBuildStatusResult?;

    enum GetBuildStatusResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetBuildStatusResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetBuildStatusResult?.self, forKey: .result) ?? nil
    }
}

public extension GetBuildStatusResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBuildStatusResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询构建任务执行的状态
public class GetBuildStatusRequest:JdCloudRequest
{
    /// job uuid
    var jobid:String

    /// 构建任务uuid
    var id:String


    public init(regionId: String,jobid:String,id:String){
        self.jobid = jobid
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetBuildStatusRequestRequestCodingKeys: String, CodingKey {
        case jobid
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBuildStatusRequestRequestCodingKeys.self)
        try encoderContainer.encode(jobid, forKey: .jobid)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  查询获取编译任务列表，并显示最后一次编译的一些信息
      ///       /// /v2/regions/cn-south-1/jobs/?sorts.1.name&#x3D;status&amp;sorts.1.direction&#x3D;asc&amp;pageNumber&#x3D;1&amp;pageSize&#x3D;10&amp;filters.1.name&#x3D;name&amp;filters.1.values.1&#x3D;我的job
      ///       /// 
public class GetJobsRequest:JdCloudRequest
{
    /// 对某一列排序
    var sorts:[Sort?]?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// 编译任务名
    var filters:[Filter?]?




    enum GetJobsRequestRequestCodingKeys: String, CodingKey {
        case sorts
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetJobsRequestRequestCodingKeys.self)
        try encoderContainer.encode(sorts, forKey: .sorts)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  根据id启动一个编译任务
public class StartJobRequest:JdCloudRequest
{
    /// 类型branch/commit/tag
    var category:String?

    /// 类型对应的值
    var branch:String?

    /// Job uuid
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum StartJobRequestRequestCodingKeys: String, CodingKey {
        case category
        case branch
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartJobRequestRequestCodingKeys.self)
        try encoderContainer.encode(category, forKey: .category)
        try encoderContainer.encode(branch, forKey: .branch)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 根据id获取构建任务的配置信息 
public class GetJobResult:NSObject,JdCloudResult
{
    /// Job
    var job:Job?



    public override init(){
        super.init()
    }

    enum GetJobResultCodingKeys: String, CodingKey {
        case job
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetJobResultCodingKeys.self)
        if decoderContainer.contains(.job)
        {
            self.job = try decoderContainer.decode(Job?.self, forKey: .job)
        }
    }
}
public extension GetJobResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetJobResultCodingKeys.self)
        try encoderContainer.encode(job, forKey: .job)
    }
}

///  更新编译任务
public class UpdateJobRequest:JdCloudRequest
{
    /// Data
    var data:JobRequest?

    /// job uuid
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum UpdateJobRequestRequestCodingKeys: String, CodingKey {
        case data
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateJobRequestRequestCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  删除一个编译任务
public class DeleteJobRequest:JdCloudRequest
{
    /// 编译任务uuid
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteJobRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteJobRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  查询构建任务执行日志
public class GetBuildLogRequest:JdCloudRequest
{
    /// 查询日志的偏移量, 默认为0
    var offsetNumber:Int?

    /// job uuid
    var jobid:String

    /// 构建任务uuid
    var id:String


    public init(regionId: String,jobid:String,id:String){
        self.jobid = jobid
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetBuildLogRequestRequestCodingKeys: String, CodingKey {
        case offsetNumber
        case jobid
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBuildLogRequestRequestCodingKeys.self)
        try encoderContainer.encode(offsetNumber, forKey: .offsetNumber)
        try encoderContainer.encode(jobid, forKey: .jobid)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 查询构建任务执行的状态 
public class GetBuildStatusResult:NSObject,JdCloudResult
{
    /// 执行任务的job名称
    var name:String?

    /// 开始执行构建的时间
    var createdAt:Int?

    /// 执行构建的状态
    var status:String?

    /// 执行构建完成的百分比
    var completionRate:Double?



    public override init(){
        super.init()
    }

    enum GetBuildStatusResultCodingKeys: String, CodingKey {
        case name
        case createdAt
        case status
        case completionRate
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetBuildStatusResultCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.createdAt)
        {
            self.createdAt = try decoderContainer.decode(Int?.self, forKey: .createdAt)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.completionRate)
        {
            self.completionRate = try decoderContainer.decode(Double?.self, forKey: .completionRate)
        }
    }
}
public extension GetBuildStatusResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBuildStatusResultCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(createdAt, forKey: .createdAt)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(completionRate, forKey: .completionRate)
    }
}
/// 生成带有效期的包地址 
public class GetExternalLinkResult:NSObject,JdCloudResult
{
    /// Url
    var url:String?

    /// Token
    var token:String?



    public override init(){
        super.init()
    }

    enum GetExternalLinkResultCodingKeys: String, CodingKey {
        case url
        case token
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetExternalLinkResultCodingKeys.self)
        if decoderContainer.contains(.url)
        {
            self.url = try decoderContainer.decode(String?.self, forKey: .url)
        }
        if decoderContainer.contains(.token)
        {
            self.token = try decoderContainer.decode(String?.self, forKey: .token)
        }
    }
}
public extension GetExternalLinkResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetExternalLinkResultCodingKeys.self)
        try encoderContainer.encode(url, forKey: .url)
        try encoderContainer.encode(token, forKey: .token)
    }
}
public class GetExternalLinkResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetExternalLinkResult?;

    enum GetExternalLinkResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetExternalLinkResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetExternalLinkResult?.self, forKey: .result) ?? nil
    }
}

public extension GetExternalLinkResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetExternalLinkResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateJobResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateJobResult?;

    enum UpdateJobResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateJobResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateJobResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateJobResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateJobResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 新建构建任务 
public class CreateJobResult:NSObject,JdCloudResult
{
    /// 构建任务的uuid
    var id:String?

    /// 项目所有者/项目名称
    var codeRepoUrlLabel:String?

    /// 构建成功则是true
    var result:Bool?



    public override init(){
        super.init()
    }

    enum CreateJobResultCodingKeys: String, CodingKey {
        case id
        case codeRepoUrlLabel
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateJobResultCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.codeRepoUrlLabel)
        {
            self.codeRepoUrlLabel = try decoderContainer.decode(String?.self, forKey: .codeRepoUrlLabel)
        }
        if decoderContainer.contains(.result)
        {
            self.result = try decoderContainer.decode(Bool?.self, forKey: .result)
        }
    }
}
public extension CreateJobResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateJobResultCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(codeRepoUrlLabel, forKey: .codeRepoUrlLabel)
        try encoderContainer.encode(result, forKey: .result)
    }
}
public class GetJobResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetJobResult?;

    enum GetJobResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetJobResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetJobResult?.self, forKey: .result) ?? nil
    }
}

public extension GetJobResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetJobResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  批量删除编译任务
public class DeleteJobsRequest:JdCloudRequest
{
    /// 待删除job的UUID列表
    var jobIds:[String?]?




    enum DeleteJobsRequestRequestCodingKeys: String, CodingKey {
        case jobIds
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteJobsRequestRequestCodingKeys.self)
        try encoderContainer.encode(jobIds, forKey: .jobIds)

    }
}

public class CreateJobResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateJobResult?;

    enum CreateJobResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateJobResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateJobResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateJobResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateJobResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 更新编译任务 
public class UpdateJobResult:NSObject,JdCloudResult
{
    /// 构建任务uuid
    var id:String?

    /// 项目所有者/项目名称
    var codeRepoUrlLabel:String?

    /// 更新成功则是true
    var result:Bool?



    public override init(){
        super.init()
    }

    enum UpdateJobResultCodingKeys: String, CodingKey {
        case id
        case codeRepoUrlLabel
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateJobResultCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.codeRepoUrlLabel)
        {
            self.codeRepoUrlLabel = try decoderContainer.decode(String?.self, forKey: .codeRepoUrlLabel)
        }
        if decoderContainer.contains(.result)
        {
            self.result = try decoderContainer.decode(Bool?.self, forKey: .result)
        }
    }
}
public extension UpdateJobResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateJobResultCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(codeRepoUrlLabel, forKey: .codeRepoUrlLabel)
        try encoderContainer.encode(result, forKey: .result)
    }
}
/// 停止构建任务 
public class StopBuildResult:NSObject,JdCloudResult
{
    /// Id
    var id:String?

    /// Result
    var result:Bool?



    public override init(){
        super.init()
    }

    enum StopBuildResultCodingKeys: String, CodingKey {
        case id
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopBuildResultCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.result)
        {
            self.result = try decoderContainer.decode(Bool?.self, forKey: .result)
        }
    }
}
public extension StopBuildResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopBuildResultCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(result, forKey: .result)
    }
}
public class GetJobsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetJobsResult?;

    enum GetJobsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetJobsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetJobsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetJobsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetJobsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  新建构建任务
public class CreateJobRequest:JdCloudRequest
{
    /// Data
    var data:JobRequest?




    enum CreateJobRequestRequestCodingKeys: String, CodingKey {
        case data
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateJobRequestRequestCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)

    }
}

public class GetBuildLogResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetBuildLogResult?;

    enum GetBuildLogResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetBuildLogResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetBuildLogResult?.self, forKey: .result) ?? nil
    }
}

public extension GetBuildLogResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBuildLogResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  生成带有效期的包地址
public class GetExternalLinkRequest:JdCloudRequest
{
    /// 过期时间，单位秒， 默认1800秒
    var expires:Int?

    /// job uuid
    var jobid:String

    /// 构建任务uuid
    var id:String


    public init(regionId: String,jobid:String,id:String){
        self.jobid = jobid
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetExternalLinkRequestRequestCodingKeys: String, CodingKey {
        case expires
        case jobid
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetExternalLinkRequestRequestCodingKeys.self)
        try encoderContainer.encode(expires, forKey: .expires)
        try encoderContainer.encode(jobid, forKey: .jobid)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class DeleteJobResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteJobResult?;

    enum DeleteJobResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteJobResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteJobResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteJobResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteJobResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class StartJobResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartJobResult?;

    enum StartJobResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartJobResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartJobResult?.self, forKey: .result) ?? nil
    }
}

public extension StartJobResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartJobResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据id获取构建任务的配置信息
public class GetJobRequest:JdCloudRequest
{
    /// Job uuid
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetJobRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetJobRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class DeleteJobsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteJobsResult?;

    enum DeleteJobsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteJobsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteJobsResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteJobsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteJobsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询构建任务执行日志 
public class GetBuildLogResult:NSObject,JdCloudResult
{
    /// Log
    var log:String?

    /// OffsetNumber
    var offsetNumber:Int?



    public override init(){
        super.init()
    }

    enum GetBuildLogResultCodingKeys: String, CodingKey {
        case log
        case offsetNumber
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetBuildLogResultCodingKeys.self)
        if decoderContainer.contains(.log)
        {
            self.log = try decoderContainer.decode(String?.self, forKey: .log)
        }
        if decoderContainer.contains(.offsetNumber)
        {
            self.offsetNumber = try decoderContainer.decode(Int?.self, forKey: .offsetNumber)
        }
    }
}
public extension GetBuildLogResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBuildLogResultCodingKeys.self)
        try encoderContainer.encode(log, forKey: .log)
        try encoderContainer.encode(offsetNumber, forKey: .offsetNumber)
    }
}
/// 查询获取编译任务列表，并显示最后一次编译的一些信息
      ///       /// /v2/regions/cn-south-1/jobs/?sorts.1.name&#x3D;status&amp;sorts.1.direction&#x3D;asc&amp;pageNumber&#x3D;1&amp;pageSize&#x3D;10&amp;filters.1.name&#x3D;name&amp;filters.1.values.1&#x3D;我的job
      ///       ///  
public class GetJobsResult:NSObject,JdCloudResult
{
    /// TotalCount
    var totalCount:Int?

    /// Jobs
    var jobs:[SimpleJob?]?

    /// RequestId
    var requestId:String?



    public override init(){
        super.init()
    }

    enum GetJobsResultCodingKeys: String, CodingKey {
        case totalCount
        case jobs
        case requestId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetJobsResultCodingKeys.self)
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.jobs)
        {
            self.jobs = try decoderContainer.decode([SimpleJob?]?.self, forKey: .jobs)
        }
        if decoderContainer.contains(.requestId)
        {
            self.requestId = try decoderContainer.decode(String?.self, forKey: .requestId)
        }
    }
}
public extension GetJobsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetJobsResultCodingKeys.self)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(jobs, forKey: .jobs)
        try encoderContainer.encode(requestId, forKey: .requestId)
    }
}

///  停止构建任务
public class StopBuildRequest:JdCloudRequest
{
    /// job uuid
    var jobid:String

    /// 构建任务uuid
    var id:String


    public init(regionId: String,jobid:String,id:String){
        self.jobid = jobid
        self.id = id
        super.init(regionId: regionId)
    }


    enum StopBuildRequestRequestCodingKeys: String, CodingKey {
        case jobid
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopBuildRequestRequestCodingKeys.self)
        try encoderContainer.encode(jobid, forKey: .jobid)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 批量删除编译任务 
public class DeleteJobsResult:NSObject,JdCloudResult
{
    /// true表示删除成功，false表示删除失败
    var result:Bool?

    /// Ids
    var ids:[String?]?



    public override init(){
        super.init()
    }

    enum DeleteJobsResultCodingKeys: String, CodingKey {
        case result
        case ids
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteJobsResultCodingKeys.self)
        if decoderContainer.contains(.result)
        {
            self.result = try decoderContainer.decode(Bool?.self, forKey: .result)
        }
        if decoderContainer.contains(.ids)
        {
            self.ids = try decoderContainer.decode([String?]?.self, forKey: .ids)
        }
    }
}
public extension DeleteJobsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteJobsResultCodingKeys.self)
        try encoderContainer.encode(result, forKey: .result)
        try encoderContainer.encode(ids, forKey: .ids)
    }
}
/// 根据id启动一个编译任务 
public class StartJobResult:NSObject,JdCloudResult
{
    /// 提交任务是否成功
    var commitresult:Bool?

    /// 提交运行的构建任务的uuid
    var buildUuid:String?



    public override init(){
        super.init()
    }

    enum StartJobResultCodingKeys: String, CodingKey {
        case commitresult
        case buildUuid
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartJobResultCodingKeys.self)
        if decoderContainer.contains(.commitresult)
        {
            self.commitresult = try decoderContainer.decode(Bool?.self, forKey: .commitresult)
        }
        if decoderContainer.contains(.buildUuid)
        {
            self.buildUuid = try decoderContainer.decode(String?.self, forKey: .buildUuid)
        }
    }
}
public extension StartJobResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartJobResultCodingKeys.self)
        try encoderContainer.encode(commitresult, forKey: .commitresult)
        try encoderContainer.encode(buildUuid, forKey: .buildUuid)
    }
}
/// 删除一个编译任务 
public class DeleteJobResult:NSObject,JdCloudResult
{
    /// 提交任务是否成功
    var commitresult:Bool?



    public override init(){
        super.init()
    }

    enum DeleteJobResultCodingKeys: String, CodingKey {
        case commitresult
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteJobResultCodingKeys.self)
        if decoderContainer.contains(.commitresult)
        {
            self.commitresult = try decoderContainer.decode(Bool?.self, forKey: .commitresult)
        }
    }
}
public extension DeleteJobResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteJobResultCodingKeys.self)
        try encoderContainer.encode(commitresult, forKey: .commitresult)
    }
}
public class StopBuildResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopBuildResult?;

    enum StopBuildResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopBuildResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopBuildResult?.self, forKey: .result) ?? nil
    }
}

public extension StopBuildResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopBuildResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
