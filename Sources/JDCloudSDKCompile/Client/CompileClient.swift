/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云编译
   云编译相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class CompileJDCloudClient:NSObject,JDCloudClient{
    
    private final var compileJDCloudClient:CompileJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        compileJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "compile.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        compileJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "compile/" + "v1"
    
    public let serviceName: String = "compile"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func getJobAsync(request:GetJobRequest,requestComplation:@escaping ExecuteResult<GetJobResult>) throws {
        compileJDCloudClient = self
        try GetJobExecutor(jdCloudClient: compileJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startJobAsync(request:StartJobRequest,requestComplation:@escaping ExecuteResult<StartJobResult>) throws {
        compileJDCloudClient = self
        try StartJobExecutor(jdCloudClient: compileJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getExternalLinkAsync(request:GetExternalLinkRequest,requestComplation:@escaping ExecuteResult<GetExternalLinkResult>) throws {
        compileJDCloudClient = self
        try GetExternalLinkExecutor(jdCloudClient: compileJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopBuildAsync(request:StopBuildRequest,requestComplation:@escaping ExecuteResult<StopBuildResult>) throws {
        compileJDCloudClient = self
        try StopBuildExecutor(jdCloudClient: compileJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createDemoAsync(request:CreateDemoRequest,requestComplation:@escaping ExecuteResult<CreateDemoResult>) throws {
        compileJDCloudClient = self
        try CreateDemoExecutor(jdCloudClient: compileJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getJobsAsync(request:GetJobsRequest,requestComplation:@escaping ExecuteResult<GetJobsResult>) throws {
        compileJDCloudClient = self
        try GetJobsExecutor(jdCloudClient: compileJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteJobAsync(request:DeleteJobRequest,requestComplation:@escaping ExecuteResult<DeleteJobResult>) throws {
        compileJDCloudClient = self
        try DeleteJobExecutor(jdCloudClient: compileJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateJobAsync(request:UpdateJobRequest,requestComplation:@escaping ExecuteResult<UpdateJobResult>) throws {
        compileJDCloudClient = self
        try UpdateJobExecutor(jdCloudClient: compileJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getBuildLogAsync(request:GetBuildLogRequest,requestComplation:@escaping ExecuteResult<GetBuildLogResult>) throws {
        compileJDCloudClient = self
        try GetBuildLogExecutor(jdCloudClient: compileJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createJobAsync(request:CreateJobRequest,requestComplation:@escaping ExecuteResult<CreateJobResult>) throws {
        compileJDCloudClient = self
        try CreateJobExecutor(jdCloudClient: compileJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteJobsAsync(request:DeleteJobsRequest,requestComplation:@escaping ExecuteResult<DeleteJobsResult>) throws {
        compileJDCloudClient = self
        try DeleteJobsExecutor(jdCloudClient: compileJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getBuildStatusAsync(request:GetBuildStatusRequest,requestComplation:@escaping ExecuteResult<GetBuildStatusResult>) throws {
        compileJDCloudClient = self
        try GetBuildStatusExecutor(jdCloudClient: compileJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension CompileJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "compile.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
