/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   敏感操作配置
   操作敏感操作配置接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 获取操作保护设置信息
@objc(GetSensitiveOpSettingResult)
public class GetSensitiveOpSettingResult:NSObject,JdCloudResult
{
    /// 操作保护启用状态：0-未启用, 1-已启用
    var status:Int?

    /// 操作保护验证方式：0-无, 1-短信, 2-邮箱, 3-MFA
    var type:Int?

    /// 扩展信息，type&#x3D;1时为掩码后的手机号码 type&#x3D;2时为掩码后的邮箱地址
    var extInfo:String?



    public override init(){
        super.init()
    }

    enum GetSensitiveOpSettingResultCodingKeys: String, CodingKey {
        case status
        case type
        case extInfo
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetSensitiveOpSettingResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(Int?.self, forKey: .type)
        }
        if decoderContainer.contains(.extInfo)
        {
            self.extInfo = try decoderContainer.decode(String?.self, forKey: .extInfo)
        }
    }
}
public extension GetSensitiveOpSettingResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSensitiveOpSettingResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(type, forKey: .type)
        try encoderContainer.encode(extInfo, forKey: .extInfo)
    }
}
