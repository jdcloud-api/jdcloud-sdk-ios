/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   ConfServer APIs
   agent conf server

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 返回特定有效期的证书
@objc(DescribeLogdCAResult)
public class DescribeLogdCAResult:NSObject,JdCloudResult
{
    /// public 证书
    var cert:String?

    /// expiryDate 证书到期日
    var expiryDate:Int64?

    /// 私钥
    var privateKey:String?



    public override init(){
        super.init()
    }

    enum DescribeLogdCAResultCodingKeys: String, CodingKey {
        case cert
        case expiryDate
        case privateKey
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogdCAResultCodingKeys.self)
        if decoderContainer.contains(.cert)
        {
            self.cert = try decoderContainer.decode(String?.self, forKey: .cert)
        }
        if decoderContainer.contains(.expiryDate)
        {
            self.expiryDate = try decoderContainer.decode(Int64?.self, forKey: .expiryDate)
        }
        if decoderContainer.contains(.privateKey)
        {
            self.privateKey = try decoderContainer.decode(String?.self, forKey: .privateKey)
        }
    }
}
public extension DescribeLogdCAResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogdCAResultCodingKeys.self)
        try encoderContainer.encode(cert, forKey: .cert)
        try encoderContainer.encode(expiryDate, forKey: .expiryDate)
        try encoderContainer.encode(privateKey, forKey: .privateKey)
    }
}
