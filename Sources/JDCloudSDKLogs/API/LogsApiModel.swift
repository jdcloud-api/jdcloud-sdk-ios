/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Logtopic APIs
   日志服务日志主题相关的管理控制接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  搜索日志上下文
public class SearchLogContextRequest:JdCloudRequest
{
    /// 查询anchor,基于该值偏移进行上下文检索
    var anchor:[AnyObject?]?

    /// 搜索方向,默认both,可取值:up,down,both
    var direction:String?

    /// 日志记录ID
    var id:String

    /// 查看上下文行数大小，最大支持200
    var lineSize:Int64

    /// 查询日志时返回的时间戳
    var time:Int64

    /// 日志集 UID
    var logsetUID:String

    /// 日志主题 UID
    var logtopicUID:String


    public init(regionId: String,anchor:[AnyObject?]?,id:String,lineSize:Int64,time:Int64,logsetUID:String,logtopicUID:String){
        self.anchor = anchor
        self.id = id
        self.lineSize = lineSize
        self.time = time
        self.logsetUID = logsetUID
        self.logtopicUID = logtopicUID
        super.init(regionId: regionId)
    }


    enum SearchLogContextRequestRequestCodingKeys: String, CodingKey {
        case anchor
        case direction
        case id
        case lineSize
        case time
        case logsetUID
        case logtopicUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SearchLogContextRequestRequestCodingKeys.self)
        try encoderContainer.encode(direction, forKey: .direction)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(lineSize, forKey: .lineSize)
        try encoderContainer.encode(time, forKey: .time)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)
        try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)

    }
}

public class SearchLogContextResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SearchLogContextResult?;

    enum SearchLogContextResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SearchLogContextResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SearchLogContextResult?.self, forKey: .result) ?? nil
    }
}

public extension SearchLogContextResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SearchLogContextResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 搜索日志 
public class SearchResult:NSObject,JdCloudResult
{
    /// 数据
    var data:[[String:AnyObject?]?]?

    /// 总数
    var total:Int64?



    public override init(){
        super.init()
    }

    enum SearchResultCodingKeys: String, CodingKey {
        case data
        case total
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SearchResultCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int64?.self, forKey: .total)
        }
    }
}
public extension SearchResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SearchResultCodingKeys.self)
        try encoderContainer.encode(total, forKey: .total)
    }
}
public class SearchResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SearchResult?;

    enum SearchResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SearchResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SearchResult?.self, forKey: .result) ?? nil
    }
}

public extension SearchResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SearchResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  搜索日志
public class SearchRequest:JdCloudRequest
{
    /// &quot;preview&quot;表示预览, &quot;fulltext&quot;表示全文检索, &quot;advance&quot;表示按照搜索语句检索
    var action:String

    /// Base64编码的搜索表达式,
    var expr:String?

    /// 搜索关键字大小写敏感， 默认false
    var caseSensitive:Bool?

    /// 开始时间。格式 “YYYY-MM-DDThh:mm:ssTZD”, 比如 “2018-11-09T15:34:46+0800”
    var startTime:String?

    /// 结束时间。格式 “YYYY-MM-DDThh:mm:ssTZD”, 比如 “2018-11-09T15:34:46+0800”
    var endTime:String?

    /// 页数。 最小为1，最大为99
    var pageNumber:Int64?

    /// 每页个数。默认为10，最大100
    var pageSize:Int64?

    /// 日志集ID
    var logsetUID:String

    /// 日志主题ID
    var logtopicUID:String


    public init(regionId: String,action:String,logsetUID:String,logtopicUID:String){
        self.action = action
        self.logsetUID = logsetUID
        self.logtopicUID = logtopicUID
        super.init(regionId: regionId)
    }


    enum SearchRequestRequestCodingKeys: String, CodingKey {
        case action
        case expr
        case caseSensitive
        case startTime
        case endTime
        case pageNumber
        case pageSize
        case logsetUID
        case logtopicUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SearchRequestRequestCodingKeys.self)
        try encoderContainer.encode(action, forKey: .action)
        try encoderContainer.encode(expr, forKey: .expr)
        try encoderContainer.encode(caseSensitive, forKey: .caseSensitive)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)
        try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)

    }
}

/// 搜索日志上下文 
public class SearchLogContextResult:NSObject,JdCloudResult
{
    /// 数据
    var data:[[String:AnyObject?]?]?

    /// 总数
    var total:Int64?



    public override init(){
        super.init()
    }

    enum SearchLogContextResultCodingKeys: String, CodingKey {
        case data
        case total
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SearchLogContextResultCodingKeys.self)
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int64?.self, forKey: .total)
        }
    }
}
public extension SearchLogContextResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SearchLogContextResultCodingKeys.self)
        try encoderContainer.encode(total, forKey: .total)
    }
}
public class PutResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:PutResult?;

    enum PutResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PutResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(PutResult?.self, forKey: .result) ?? nil
    }
}

public extension PutResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PutResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 自定义日志上报。 
public class PutResult:NSObject,JdCloudResult
{
}

///  自定义日志上报。
public class PutRequest:JdCloudRequest
{
    /// 全局 strean 日志流标识符（建议起能唯一界定一个文件的名字，如 /i-iqnvqpinkjiq/app.log），不传则写入default日志流中（会导致很多文件混合在一起，不推荐）
    var stream:String?

    /// 全局时间戳，UTC格式，最多支持到纳秒级别，不传入则取服务器时间。如 2019-04-08T03:08:04.437670934Z、2019-04-08T03:08:04Z、2019-04-08T03:08:04.123Z
    var timestamp:String?

    /// 日志数据
    var entries:[Entry?]?

    /// 日志主题uid
    var logtopicUID:String


    public init(regionId: String,entries:[Entry?]?,logtopicUID:String){
        self.entries = entries
        self.logtopicUID = logtopicUID
        super.init(regionId: regionId)
    }


    enum PutRequestRequestCodingKeys: String, CodingKey {
        case stream
        case timestamp
        case entries
        case logtopicUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PutRequestRequestCodingKeys.self)
        try encoderContainer.encode(stream, forKey: .stream)
        try encoderContainer.encode(timestamp, forKey: .timestamp)
        try encoderContainer.encode(entries, forKey: .entries)
        try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)

    }
}

public class TestMetricTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:TestMetricTaskResult?;

    enum TestMetricTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TestMetricTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(TestMetricTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension TestMetricTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TestMetricTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateMetricTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateMetricTaskResult?;

    enum UpdateMetricTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateMetricTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateMetricTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateMetricTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateMetricTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询指定监控任务的详情信息
public class DescribeMetricTaskRequest:JdCloudRequest
{
    /// 日志集 UID
    var logsetUID:String

    /// 日志主题 UID
    var logtopicUID:String

    /// LogmetrictaskUID
    var logmetrictaskUID:String


    public init(regionId: String,logsetUID:String,logtopicUID:String,logmetrictaskUID:String){
        self.logsetUID = logsetUID
        self.logtopicUID = logtopicUID
        self.logmetrictaskUID = logmetrictaskUID
        super.init(regionId: regionId)
    }


    enum DescribeMetricTaskRequestRequestCodingKeys: String, CodingKey {
        case logsetUID
        case logtopicUID
        case logmetrictaskUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)
        try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)
        try encoderContainer.encode(logmetrictaskUID, forKey: .logmetrictaskUID)

    }
}

/// 创建监控任务，不可与当前日志主题下现有日志监控任务重名。 
public class CreateMetricTaskResult:NSObject,JdCloudResult
{
    /// UID
    var id:String?

    /// Suc
    var suc:String?



    public override init(){
        super.init()
    }

    enum CreateMetricTaskResultCodingKeys: String, CodingKey {
        case id
        case suc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateMetricTaskResultCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.suc)
        {
            self.suc = try decoderContainer.decode(String?.self, forKey: .suc)
        }
    }
}
public extension CreateMetricTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateMetricTaskResultCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(suc, forKey: .suc)
    }
}
/// 更新监控任务，日志监控任务不许重名。 
public class UpdateMetricTaskResult:NSObject,JdCloudResult
{
    /// Suc
    var suc:String?



    public override init(){
        super.init()
    }

    enum UpdateMetricTaskResultCodingKeys: String, CodingKey {
        case suc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateMetricTaskResultCodingKeys.self)
        if decoderContainer.contains(.suc)
        {
            self.suc = try decoderContainer.decode(String?.self, forKey: .suc)
        }
    }
}
public extension UpdateMetricTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateMetricTaskResultCodingKeys.self)
        try encoderContainer.encode(suc, forKey: .suc)
    }
}
public class DescribeMetricTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMetricTaskResult?;

    enum DescribeMetricTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMetricTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMetricTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  日志测试，根据用户输入的日志筛选条件以及监控指标设置进行模拟监控统计
public class TestMetricTaskRequest:JdCloudRequest
{
    /// 聚合函数,支持 count sum max min avg
    var aggregate:String

    /// 测试内容
    var content:[String?]?

    /// 查询字段,支持 英文字母 数字 下划线 中划线 点（中文日志原文和各产品线的key）
    var dataField:String

    /// 过滤语法，可以为空
    var filterContent:String?

    /// 是否打开过滤
    var filterOpen:String

    /// 过滤类型，只能是fulltext和 advance
    var filterType:String

    /// 日志集 UID
    var logsetUID:String

    /// 日志主题 UID
    var logtopicUID:String


    public init(regionId: String,aggregate:String,dataField:String,filterOpen:String,filterType:String,logsetUID:String,logtopicUID:String){
        self.aggregate = aggregate
        self.dataField = dataField
        self.filterOpen = filterOpen
        self.filterType = filterType
        self.logsetUID = logsetUID
        self.logtopicUID = logtopicUID
        super.init(regionId: regionId)
    }


    enum TestMetricTaskRequestRequestCodingKeys: String, CodingKey {
        case aggregate
        case content
        case dataField
        case filterContent
        case filterOpen
        case filterType
        case logsetUID
        case logtopicUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TestMetricTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(aggregate, forKey: .aggregate)
        try encoderContainer.encode(content, forKey: .content)
        try encoderContainer.encode(dataField, forKey: .dataField)
        try encoderContainer.encode(filterContent, forKey: .filterContent)
        try encoderContainer.encode(filterOpen, forKey: .filterOpen)
        try encoderContainer.encode(filterType, forKey: .filterType)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)
        try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)

    }
}


///  创建监控任务，不可与当前日志主题下现有日志监控任务重名。
public class CreateMetricTaskRequest:JdCloudRequest
{
    /// 聚合函数,支持 count sum max min avg
    var aggregate:String

    /// 自定义单位
    var customUnit:String

    /// 查询字段,支持 英文字母 数字 下划线 中划线 点（中文日志原文和各产品线的key）
    var dataField:String

    /// 过滤语法，可以为空
    var filterContent:String?

    /// 是否打开过滤
    var filterOpen:String

    /// 过滤类型，只能是fulltext和 advance
    var filterType:String

    /// 时间周期，固定60s
    var interval:Int64

    /// 监控项 , 支持大小写英文字母 下划线 数字 点，且不超过255byte（不支持中划线）
    var metric:String

    /// 监控任务名称,同一个日志主题下唯一，支持中文 大小写英文字母 下划线 中划线 数字，且不超过32字符
    var name:String

    /// 单位
    var unit:String

    /// 日志集 UID
    var logsetUID:String

    /// 日志主题 UID
    var logtopicUID:String


    public init(regionId: String,aggregate:String,customUnit:String,dataField:String,filterOpen:String,filterType:String,interval:Int64,metric:String,name:String,unit:String,logsetUID:String,logtopicUID:String){
        self.aggregate = aggregate
        self.customUnit = customUnit
        self.dataField = dataField
        self.filterOpen = filterOpen
        self.filterType = filterType
        self.interval = interval
        self.metric = metric
        self.name = name
        self.unit = unit
        self.logsetUID = logsetUID
        self.logtopicUID = logtopicUID
        super.init(regionId: regionId)
    }


    enum CreateMetricTaskRequestRequestCodingKeys: String, CodingKey {
        case aggregate
        case customUnit
        case dataField
        case filterContent
        case filterOpen
        case filterType
        case interval
        case metric
        case name
        case unit
        case logsetUID
        case logtopicUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateMetricTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(aggregate, forKey: .aggregate)
        try encoderContainer.encode(customUnit, forKey: .customUnit)
        try encoderContainer.encode(dataField, forKey: .dataField)
        try encoderContainer.encode(filterContent, forKey: .filterContent)
        try encoderContainer.encode(filterOpen, forKey: .filterOpen)
        try encoderContainer.encode(filterType, forKey: .filterType)
        try encoderContainer.encode(interval, forKey: .interval)
        try encoderContainer.encode(metric, forKey: .metric)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(unit, forKey: .unit)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)
        try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)

    }
}

/// 查询指定监控任务的详情信息 
public class DescribeMetricTaskResult:NSObject,JdCloudResult
{
    /// Data
    var data:MetrictaskDetailEnd?



    public override init(){
        super.init()
    }

    enum DescribeMetricTaskResultCodingKeys: String, CodingKey {
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricTaskResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(MetrictaskDetailEnd?.self, forKey: .data)
        }
    }
}
public extension DescribeMetricTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricTaskResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 日志测试，根据用户输入的日志筛选条件以及监控指标设置进行模拟监控统计 
public class TestMetricTaskResult:NSObject,JdCloudResult
{
    /// 符合的记录
    var lines:[String?]?

    /// 监控值
    var value:Double?



    public override init(){
        super.init()
    }

    enum TestMetricTaskResultCodingKeys: String, CodingKey {
        case lines
        case value
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TestMetricTaskResultCodingKeys.self)
        if decoderContainer.contains(.lines)
        {
            self.lines = try decoderContainer.decode([String?]?.self, forKey: .lines)
        }
        if decoderContainer.contains(.value)
        {
            self.value = try decoderContainer.decode(Double?.self, forKey: .value)
        }
    }
}
public extension TestMetricTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TestMetricTaskResultCodingKeys.self)
        try encoderContainer.encode(lines, forKey: .lines)
        try encoderContainer.encode(value, forKey: .value)
    }
}

///  查询监控任务列表，返回该主题下的所有监控任务信息。
public class DescribeMetricTasksRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
      /// in: query
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
      /// in: query
    var pageSize:Int64?

    /// 日志集 UID
    var logsetUID:String

    /// 日志主题 UID
    var logtopicUID:String


    public init(regionId: String,logsetUID:String,logtopicUID:String){
        self.logsetUID = logsetUID
        self.logtopicUID = logtopicUID
        super.init(regionId: regionId)
    }


    enum DescribeMetricTasksRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case logsetUID
        case logtopicUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricTasksRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)
        try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)

    }
}

public class DeleteMetricTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteMetricTaskResult?;

    enum DeleteMetricTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteMetricTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteMetricTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteMetricTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteMetricTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  更新监控任务，日志监控任务不许重名。
public class UpdateMetricTaskRequest:JdCloudRequest
{
    /// 自定义单位
    var customUnit:String

    /// 过滤语法，可以为空
    var filterContent:String?

    /// 是否打开过滤
    var filterOpen:String

    /// 过滤类型，只能是fulltext和 advance
    var filterType:String

    /// 监控任务名称,同一日志主题下唯一，支持中文 大小写英文字母 下划线 中划线 数字，且不超过32
    var name:String

    /// 单位
    var unit:String

    /// 日志集 UID
    var logsetUID:String

    /// 日志主题 UID
    var logtopicUID:String

    /// LogmetrictaskUID
    var logmetrictaskUID:String


    public init(regionId: String,customUnit:String,filterOpen:String,filterType:String,name:String,unit:String,logsetUID:String,logtopicUID:String,logmetrictaskUID:String){
        self.customUnit = customUnit
        self.filterOpen = filterOpen
        self.filterType = filterType
        self.name = name
        self.unit = unit
        self.logsetUID = logsetUID
        self.logtopicUID = logtopicUID
        self.logmetrictaskUID = logmetrictaskUID
        super.init(regionId: regionId)
    }


    enum UpdateMetricTaskRequestRequestCodingKeys: String, CodingKey {
        case customUnit
        case filterContent
        case filterOpen
        case filterType
        case name
        case unit
        case logsetUID
        case logtopicUID
        case logmetrictaskUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateMetricTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(customUnit, forKey: .customUnit)
        try encoderContainer.encode(filterContent, forKey: .filterContent)
        try encoderContainer.encode(filterOpen, forKey: .filterOpen)
        try encoderContainer.encode(filterType, forKey: .filterType)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(unit, forKey: .unit)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)
        try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)
        try encoderContainer.encode(logmetrictaskUID, forKey: .logmetrictaskUID)

    }
}

public class DescribeMetricTasksResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMetricTasksResult?;

    enum DescribeMetricTasksResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricTasksResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMetricTasksResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMetricTasksResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricTasksResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateMetricTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateMetricTaskResult?;

    enum CreateMetricTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateMetricTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateMetricTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateMetricTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateMetricTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除指定监控任务。
public class DeleteMetricTaskRequest:JdCloudRequest
{
    /// 日志集 UID
    var logsetUID:String

    /// 日志主题 UID
    var logtopicUID:String

    /// LogmetrictaskUID
    var logmetrictaskUID:String


    public init(regionId: String,logsetUID:String,logtopicUID:String,logmetrictaskUID:String){
        self.logsetUID = logsetUID
        self.logtopicUID = logtopicUID
        self.logmetrictaskUID = logmetrictaskUID
        super.init(regionId: regionId)
    }


    enum DeleteMetricTaskRequestRequestCodingKeys: String, CodingKey {
        case logsetUID
        case logtopicUID
        case logmetrictaskUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteMetricTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)
        try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)
        try encoderContainer.encode(logmetrictaskUID, forKey: .logmetrictaskUID)

    }
}

/// 删除指定监控任务。 
public class DeleteMetricTaskResult:NSObject,JdCloudResult
{
    /// Suc
    var suc:String?



    public override init(){
        super.init()
    }

    enum DeleteMetricTaskResultCodingKeys: String, CodingKey {
        case suc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteMetricTaskResultCodingKeys.self)
        if decoderContainer.contains(.suc)
        {
            self.suc = try decoderContainer.decode(String?.self, forKey: .suc)
        }
    }
}
public extension DeleteMetricTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteMetricTaskResultCodingKeys.self)
        try encoderContainer.encode(suc, forKey: .suc)
    }
}
/// 查询监控任务列表，返回该主题下的所有监控任务信息。 
public class DescribeMetricTasksResult:NSObject,JdCloudResult
{
    /// 监控任务列表
    var data:[MetrictaskDetailEnd?]?

    /// 总页数
    var numberPages:Int64?

    /// 总记录数
    var numberRecords:Int64?

    /// 当前页码
    var pageNumber:Int64?

    /// 分页大小
    var pageSize:Int64?



    public override init(){
        super.init()
    }

    enum DescribeMetricTasksResultCodingKeys: String, CodingKey {
        case data
        case numberPages
        case numberRecords
        case pageNumber
        case pageSize
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricTasksResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([MetrictaskDetailEnd?]?.self, forKey: .data)
        }
        if decoderContainer.contains(.numberPages)
        {
            self.numberPages = try decoderContainer.decode(Int64?.self, forKey: .numberPages)
        }
        if decoderContainer.contains(.numberRecords)
        {
            self.numberRecords = try decoderContainer.decode(Int64?.self, forKey: .numberRecords)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int64?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int64?.self, forKey: .pageSize)
        }
    }
}
public extension DescribeMetricTasksResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricTasksResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(numberPages, forKey: .numberPages)
        try encoderContainer.encode(numberRecords, forKey: .numberRecords)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
    }
}
/// 查询日志集列表。支持按照名称进行模糊查询。结果中包含了该日志集是否存在日志主题的信息。存在日志主题的日志集不允许删除。 
public class DescribeLogsetsResult:NSObject,JdCloudResult
{
    /// 日志集列表
    var data:[LogsetEnd?]?

    /// 总页数
    var numberPages:Int64?

    /// 总记录数
    var numberRecords:Int64?

    /// 当前页码
    var pageNumber:Int64?

    /// 分页大小
    var pageSize:Int64?



    public override init(){
        super.init()
    }

    enum DescribeLogsetsResultCodingKeys: String, CodingKey {
        case data
        case numberPages
        case numberRecords
        case pageNumber
        case pageSize
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogsetsResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([LogsetEnd?]?.self, forKey: .data)
        }
        if decoderContainer.contains(.numberPages)
        {
            self.numberPages = try decoderContainer.decode(Int64?.self, forKey: .numberPages)
        }
        if decoderContainer.contains(.numberRecords)
        {
            self.numberRecords = try decoderContainer.decode(Int64?.self, forKey: .numberRecords)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int64?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int64?.self, forKey: .pageSize)
        }
    }
}
public extension DescribeLogsetsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogsetsResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(numberPages, forKey: .numberPages)
        try encoderContainer.encode(numberRecords, forKey: .numberRecords)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
    }
}

///  创建日志集。名称不可重复。
public class CreateLogsetRequest:JdCloudRequest
{
    /// 日志集名称
    var name:String

    /// 日志集描述
    var descriptionValue:String?

    /// 保存周期，只能是 7， 15， 30
    var lifeCycle:Int64


    public init(regionId: String,name:String,lifeCycle:Int64){
        self.name = name
        self.lifeCycle = lifeCycle
        super.init(regionId: regionId)
    }


    enum CreateLogsetRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case lifeCycle
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateLogsetRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(lifeCycle, forKey: .lifeCycle)

    }
}

public class UpdateLogsetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateLogsetResult?;

    enum UpdateLogsetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateLogsetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateLogsetResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateLogsetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateLogsetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteLogsetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLogsetResult?;

    enum DeleteLogsetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLogsetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLogsetResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLogsetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLogsetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询日志集详情。 
public class DescribeLogsetResult:NSObject,JdCloudResult
{
    /// UID
    var uID:String?

    /// 创建时间
    var createTime:String?

    /// 描述信息
    var descriptionValue:String?

    /// 是否存在日志主题
    var hasTopic:Bool?

    /// 保存周期
    var lifeCycle:Int64?

    /// 日志集名称
    var name:String?

    /// 地域信息
    var region:String?



    public override init(){
        super.init()
    }

    enum DescribeLogsetResultCodingKeys: String, CodingKey {
        case uID
        case createTime
        case descriptionValue = "description"
        case hasTopic
        case lifeCycle
        case name
        case region
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogsetResultCodingKeys.self)
        if decoderContainer.contains(.uID)
        {
            self.uID = try decoderContainer.decode(String?.self, forKey: .uID)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.hasTopic)
        {
            self.hasTopic = try decoderContainer.decode(Bool?.self, forKey: .hasTopic)
        }
        if decoderContainer.contains(.lifeCycle)
        {
            self.lifeCycle = try decoderContainer.decode(Int64?.self, forKey: .lifeCycle)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
    }
}
public extension DescribeLogsetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogsetResultCodingKeys.self)
        try encoderContainer.encode(uID, forKey: .uID)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(hasTopic, forKey: .hasTopic)
        try encoderContainer.encode(lifeCycle, forKey: .lifeCycle)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(region, forKey: .region)
    }
}

///  查询日志集详情。
public class DescribeLogsetRequest:JdCloudRequest
{
    /// 日志集 UID
    var logsetUID:String


    public init(regionId: String,logsetUID:String){
        self.logsetUID = logsetUID
        super.init(regionId: regionId)
    }


    enum DescribeLogsetRequestRequestCodingKeys: String, CodingKey {
        case logsetUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogsetRequestRequestCodingKeys.self)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)

    }
}

public class DescribeLogsetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLogsetResult?;

    enum DescribeLogsetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogsetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLogsetResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLogsetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogsetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLogsetsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLogsetsResult?;

    enum DescribeLogsetsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogsetsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLogsetsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLogsetsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogsetsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建日志集。名称不可重复。 
public class CreateLogsetResult:NSObject,JdCloudResult
{
    /// UID
    var uID:String?



    public override init(){
        super.init()
    }

    enum CreateLogsetResultCodingKeys: String, CodingKey {
        case uID
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateLogsetResultCodingKeys.self)
        if decoderContainer.contains(.uID)
        {
            self.uID = try decoderContainer.decode(String?.self, forKey: .uID)
        }
    }
}
public extension CreateLogsetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateLogsetResultCodingKeys.self)
        try encoderContainer.encode(uID, forKey: .uID)
    }
}

///  更新日志集。日志集名称不可更新。
public class UpdateLogsetRequest:JdCloudRequest
{
    /// 日志集描述
    var descriptionValue:String?

    /// 保存周期，只能是 7， 15， 30
    var lifeCycle:Int64?

    /// 日志集 UID
    var logsetUID:String


    public init(regionId: String,logsetUID:String){
        self.logsetUID = logsetUID
        super.init(regionId: regionId)
    }


    enum UpdateLogsetRequestRequestCodingKeys: String, CodingKey {
        case descriptionValue = "description"
        case lifeCycle
        case logsetUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateLogsetRequestRequestCodingKeys.self)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(lifeCycle, forKey: .lifeCycle)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)

    }
}


///  删除日志集,删除多个日志集时，任意的日志集包含了日志主题的，将导致全部删除失败。
public class DeleteLogsetRequest:JdCloudRequest
{
    /// 日志集ID，多个日志集ID以逗号分割
    var logsetUIDs:String


    public init(regionId: String,logsetUIDs:String){
        self.logsetUIDs = logsetUIDs
        super.init(regionId: regionId)
    }


    enum DeleteLogsetRequestRequestCodingKeys: String, CodingKey {
        case logsetUIDs
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLogsetRequestRequestCodingKeys.self)
        try encoderContainer.encode(logsetUIDs, forKey: .logsetUIDs)

    }
}

/// 删除日志集,删除多个日志集时，任意的日志集包含了日志主题的，将导致全部删除失败。 
public class DeleteLogsetResult:NSObject,JdCloudResult
{
}
public class CreateLogsetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateLogsetResult?;

    enum CreateLogsetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateLogsetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateLogsetResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateLogsetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateLogsetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询日志集列表。支持按照名称进行模糊查询。结果中包含了该日志集是否存在日志主题的信息。存在日志主题的日志集不允许删除。
public class DescribeLogsetsRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
    var pageSize:Int64?

    /// 日志集名称
    var name:String?




    enum DescribeLogsetsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogsetsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(name, forKey: .name)

    }
}

/// 更新日志集。日志集名称不可更新。 
public class UpdateLogsetResult:NSObject,JdCloudResult
{
}

///  查询当前实例的采集配置列表：此接口会生成agent心跳监控数据，用以表征agent的可用性。请求中若添加了X-Jdcloud-Logs-md5的header，将按照md5的方式处理返回值。
public class DescribeInstanceCollectConfsRequest:JdCloudRequest
{
    /// instanceId
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceCollectConfsRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceCollectConfsRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 查询当前实例的采集配置列表：此接口会生成agent心跳监控数据，用以表征agent的可用性。请求中若添加了X-Jdcloud-Logs-md5的header，将按照md5的方式处理返回值。 
public class DescribeInstanceCollectConfsResult:NSObject,JdCloudResult
{
    /// result
    var confs:[CollectConf?]?



    public override init(){
        super.init()
    }

    enum DescribeInstanceCollectConfsResultCodingKeys: String, CodingKey {
        case confs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceCollectConfsResultCodingKeys.self)
        if decoderContainer.contains(.confs)
        {
            self.confs = try decoderContainer.decode([CollectConf?]?.self, forKey: .confs)
        }
    }
}
public extension DescribeInstanceCollectConfsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceCollectConfsResultCodingKeys.self)
        try encoderContainer.encode(confs, forKey: .confs)
    }
}

///  返回特定有效期的证书
public class DescribeLogdCARequest:JdCloudRequest
{
    /// instanceId
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeLogdCARequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogdCARequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeInstanceCollectConfsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceCollectConfsResult?;

    enum DescribeInstanceCollectConfsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceCollectConfsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceCollectConfsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceCollectConfsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceCollectConfsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLogdCAResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLogdCAResult?;

    enum DescribeLogdCAResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogdCAResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLogdCAResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLogdCAResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogdCAResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 返回特定有效期的证书 
public class DescribeLogdCAResult:NSObject,JdCloudResult
{
    /// public 证书
    var cert:String?

    /// expiryDate 证书到期日
    var expiryDate:Int64?

    /// 私钥
    var privateKey:String?



    public override init(){
        super.init()
    }

    enum DescribeLogdCAResultCodingKeys: String, CodingKey {
        case cert
        case expiryDate
        case privateKey
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogdCAResultCodingKeys.self)
        if decoderContainer.contains(.cert)
        {
            self.cert = try decoderContainer.decode(String?.self, forKey: .cert)
        }
        if decoderContainer.contains(.expiryDate)
        {
            self.expiryDate = try decoderContainer.decode(Int64?.self, forKey: .expiryDate)
        }
        if decoderContainer.contains(.privateKey)
        {
            self.privateKey = try decoderContainer.decode(String?.self, forKey: .privateKey)
        }
    }
}
public extension DescribeLogdCAResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogdCAResultCodingKeys.self)
        try encoderContainer.encode(cert, forKey: .cert)
        try encoderContainer.encode(expiryDate, forKey: .expiryDate)
        try encoderContainer.encode(privateKey, forKey: .privateKey)
    }
}
public class UpdateCollectResourcesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateCollectResourcesResult?;

    enum UpdateCollectResourcesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateCollectResourcesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateCollectResourcesResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateCollectResourcesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateCollectResourcesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建采集配置，支持基于云产品模板生成采集模板；支持用于自定义采集配置。 
public class CreateCollectInfoResult:NSObject,JdCloudResult
{
    /// UID
    var uID:String?



    public override init(){
        super.init()
    }

    enum CreateCollectInfoResultCodingKeys: String, CodingKey {
        case uID
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateCollectInfoResultCodingKeys.self)
        if decoderContainer.contains(.uID)
        {
            self.uID = try decoderContainer.decode(String?.self, forKey: .uID)
        }
    }
}
public extension CreateCollectInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateCollectInfoResultCodingKeys.self)
        try encoderContainer.encode(uID, forKey: .uID)
    }
}
/// 查询采集配置的实例列表 
public class DescribeCollectResourcesResult:NSObject,JdCloudResult
{
    /// 资源列表
    var data:[ResourceEnd?]?

    /// 总页数
    var numberPages:Int64?

    /// 总记录数
    var numberRecords:Int64?

    /// 当前页码
    var pageNumber:Int64?

    /// 分页大小
    var pageSize:Int64?



    public override init(){
        super.init()
    }

    enum DescribeCollectResourcesResultCodingKeys: String, CodingKey {
        case data
        case numberPages
        case numberRecords
        case pageNumber
        case pageSize
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCollectResourcesResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([ResourceEnd?]?.self, forKey: .data)
        }
        if decoderContainer.contains(.numberPages)
        {
            self.numberPages = try decoderContainer.decode(Int64?.self, forKey: .numberPages)
        }
        if decoderContainer.contains(.numberRecords)
        {
            self.numberRecords = try decoderContainer.decode(Int64?.self, forKey: .numberRecords)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int64?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int64?.self, forKey: .pageSize)
        }
    }
}
public extension DescribeCollectResourcesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCollectResourcesResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(numberPages, forKey: .numberPages)
        try encoderContainer.encode(numberRecords, forKey: .numberRecords)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
    }
}
public class UpdateCollectInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateCollectInfoResult?;

    enum UpdateCollectInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateCollectInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateCollectInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateCollectInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateCollectInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  更新采集配置。若传入的实例列表不为空，将覆盖之前的所有实例，而非新增。
public class UpdateCollectInfoRequest:JdCloudRequest
{
    /// 采集状态，0-禁用，1-启用
    var enabled:Bool

    /// 采集实例类型, 只能是 all/part  当选择all时，传入的实例列表无效
    var resourceType:String

    /// 采集实例列表（存在上限限制20）
    var resources:[Resource?]?

    /// 日志路径。当appcode为custom时为必填。目前仅支持对 Linux 云主机上的日志进行采集，路径支持通配符“*”和“？”，文件路径应符合 Linux 的文件路径规则
    var logPath:String?

    /// 日志文件名。当appcode为custom时为必填。日志文件名支持正则表达式。
    var logFile:String?

    /// 过滤器。设置过滤器后可根据用户设定的关键词采集部分日志，如仅采集 Error 的日志。目前最大允许5个。
    var logFilters:[String?]?

    /// 过滤器是否启用。当appcode为custom时必填
    var filterEnabled:Bool?

    /// 采集配置 UID
    var collectInfoUID:String


    public init(regionId: String,enabled:Bool,resourceType:String,collectInfoUID:String){
        self.enabled = enabled
        self.resourceType = resourceType
        self.collectInfoUID = collectInfoUID
        super.init(regionId: regionId)
    }


    enum UpdateCollectInfoRequestRequestCodingKeys: String, CodingKey {
        case enabled
        case resourceType
        case resources
        case logPath
        case logFile
        case logFilters
        case filterEnabled
        case collectInfoUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateCollectInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(resourceType, forKey: .resourceType)
        try encoderContainer.encode(resources, forKey: .resources)
        try encoderContainer.encode(logPath, forKey: .logPath)
        try encoderContainer.encode(logFile, forKey: .logFile)
        try encoderContainer.encode(logFilters, forKey: .logFilters)
        try encoderContainer.encode(filterEnabled, forKey: .filterEnabled)
        try encoderContainer.encode(collectInfoUID, forKey: .collectInfoUID)

    }
}


///  采集配置的基本信息。
public class DescribeCollectInfoRequest:JdCloudRequest
{
    /// 采集配置 UID
    var collectInfoUID:String


    public init(regionId: String,collectInfoUID:String){
        self.collectInfoUID = collectInfoUID
        super.init(regionId: regionId)
    }


    enum DescribeCollectInfoRequestRequestCodingKeys: String, CodingKey {
        case collectInfoUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCollectInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(collectInfoUID, forKey: .collectInfoUID)

    }
}

/// 采集配置的基本信息。 
public class DescribeCollectInfoResult:NSObject,JdCloudResult
{
    /// UID
    var uID:String?

    /// 日志来源
    var appCode:String?

    /// Detail
    var detail:CollectTempalteEnd?

    /// Enabled
    var enabled:Int64?

    /// 是否存在资源
    var hasResource:Bool?

    /// 日志集 UID
    var logsetUID:String?

    /// 日志主题 UID
    var logtopicUID:String?

    /// 采集实例类型, 只能是 all/part
    var resourceType:String?

    /// 产品线
    var serviceCode:String?

    /// 日志类型名称
    var templateName:String?

    /// 日志类型
    var templateUID:String?



    public override init(){
        super.init()
    }

    enum DescribeCollectInfoResultCodingKeys: String, CodingKey {
        case uID
        case appCode
        case detail
        case enabled
        case hasResource
        case logsetUID
        case logtopicUID
        case resourceType
        case serviceCode
        case templateName
        case templateUID
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCollectInfoResultCodingKeys.self)
        if decoderContainer.contains(.uID)
        {
            self.uID = try decoderContainer.decode(String?.self, forKey: .uID)
        }
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.detail)
        {
            self.detail = try decoderContainer.decode(CollectTempalteEnd?.self, forKey: .detail)
        }
        if decoderContainer.contains(.enabled)
        {
            self.enabled = try decoderContainer.decode(Int64?.self, forKey: .enabled)
        }
        if decoderContainer.contains(.hasResource)
        {
            self.hasResource = try decoderContainer.decode(Bool?.self, forKey: .hasResource)
        }
        if decoderContainer.contains(.logsetUID)
        {
            self.logsetUID = try decoderContainer.decode(String?.self, forKey: .logsetUID)
        }
        if decoderContainer.contains(.logtopicUID)
        {
            self.logtopicUID = try decoderContainer.decode(String?.self, forKey: .logtopicUID)
        }
        if decoderContainer.contains(.resourceType)
        {
            self.resourceType = try decoderContainer.decode(String?.self, forKey: .resourceType)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.templateName)
        {
            self.templateName = try decoderContainer.decode(String?.self, forKey: .templateName)
        }
        if decoderContainer.contains(.templateUID)
        {
            self.templateUID = try decoderContainer.decode(String?.self, forKey: .templateUID)
        }
    }
}
public extension DescribeCollectInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCollectInfoResultCodingKeys.self)
        try encoderContainer.encode(uID, forKey: .uID)
        try encoderContainer.encode(appCode, forKey: .appCode)
        try encoderContainer.encode(detail, forKey: .detail)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(hasResource, forKey: .hasResource)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)
        try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)
        try encoderContainer.encode(resourceType, forKey: .resourceType)
        try encoderContainer.encode(serviceCode, forKey: .serviceCode)
        try encoderContainer.encode(templateName, forKey: .templateName)
        try encoderContainer.encode(templateUID, forKey: .templateUID)
    }
}
public class DescribeCollectResourcesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCollectResourcesResult?;

    enum DescribeCollectResourcesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCollectResourcesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCollectResourcesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCollectResourcesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCollectResourcesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  增量更新采集实例列表。更新的动作支持 add 、 remove
public class UpdateCollectResourcesRequest:JdCloudRequest
{
    /// action
    var action:String

    /// 采集实例列表（系统日志存在上限限制20）
    var resources:[Resource?]?

    /// 采集配置 UID
    var collectInfoUID:String


    public init(regionId: String,action:String,collectInfoUID:String){
        self.action = action
        self.collectInfoUID = collectInfoUID
        super.init(regionId: regionId)
    }


    enum UpdateCollectResourcesRequestRequestCodingKeys: String, CodingKey {
        case action
        case resources
        case collectInfoUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateCollectResourcesRequestRequestCodingKeys.self)
        try encoderContainer.encode(action, forKey: .action)
        try encoderContainer.encode(resources, forKey: .resources)
        try encoderContainer.encode(collectInfoUID, forKey: .collectInfoUID)

    }
}


///  创建采集配置，支持基于云产品模板生成采集模板；支持用于自定义采集配置。
public class CreateCollectInfoRequest:JdCloudRequest
{
    /// 采集状态，0-禁用，1-启用
    var enabled:Bool

    /// 日志来源，只能是 custom/jdcloud
    var appCode:String

    /// 产品线,当日志来源为jdcloud时，必填
    var serviceCode:String

    /// 采集实例类型, 只能是 all/part  当选择all时，传入的实例列表无效；custom类型的采集配置目前仅支持part方式，即用户指定实例列表；
    var resourceType:String

    /// 采集实例列表：jdcloud类型最多添加20个资源；custom类型支持的资源数量不限；
    var resources:[Resource?]?

    /// 日志类型。当appcode为jdcloud时为必填
    var templateUID:String?

    /// 日志路径。当appcode为custom时为必填。目前仅支持对 Linux 云主机上的日志进行采集，路径支持通配符“*”和“？”，文件路径应符合 Linux 的文件路径规则
    var logPath:String?

    /// 日志文件名。当appcode为custom时为必填。日志文件名支持正则表达式。
    var logFile:String?

    /// 过滤器。设置过滤器后可根据用户设定的关键词采集部分日志，如仅采集 Error 的日志。目前最大允许5个。
    var logFilters:[String?]?

    /// 过滤器是否启用。当appcode为custom时必填
    var filterEnabled:Bool?

    /// 日志主题 UID
    var logtopicUID:String


    public init(regionId: String,enabled:Bool,appCode:String,serviceCode:String,resourceType:String,logtopicUID:String){
        self.enabled = enabled
        self.appCode = appCode
        self.serviceCode = serviceCode
        self.resourceType = resourceType
        self.logtopicUID = logtopicUID
        super.init(regionId: regionId)
    }


    enum CreateCollectInfoRequestRequestCodingKeys: String, CodingKey {
        case enabled
        case appCode
        case serviceCode
        case resourceType
        case resources
        case templateUID
        case logPath
        case logFile
        case logFilters
        case filterEnabled
        case logtopicUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateCollectInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(appCode, forKey: .appCode)
        try encoderContainer.encode(serviceCode, forKey: .serviceCode)
        try encoderContainer.encode(resourceType, forKey: .resourceType)
        try encoderContainer.encode(resources, forKey: .resources)
        try encoderContainer.encode(templateUID, forKey: .templateUID)
        try encoderContainer.encode(logPath, forKey: .logPath)
        try encoderContainer.encode(logFile, forKey: .logFile)
        try encoderContainer.encode(logFilters, forKey: .logFilters)
        try encoderContainer.encode(filterEnabled, forKey: .filterEnabled)
        try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)

    }
}


///  查询采集配置的实例列表
public class DescribeCollectResourcesRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
    var pageSize:Int64?

    /// 采集配置 UID
    var collectInfoUID:String


    public init(regionId: String,collectInfoUID:String){
        self.collectInfoUID = collectInfoUID
        super.init(regionId: regionId)
    }


    enum DescribeCollectResourcesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case collectInfoUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCollectResourcesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(collectInfoUID, forKey: .collectInfoUID)

    }
}

/// 更新采集配置。若传入的实例列表不为空，将覆盖之前的所有实例，而非新增。 
public class UpdateCollectInfoResult:NSObject,JdCloudResult
{
}
public class DescribeCollectInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCollectInfoResult?;

    enum DescribeCollectInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCollectInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCollectInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCollectInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCollectInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 增量更新采集实例列表。更新的动作支持 add 、 remove 
public class UpdateCollectResourcesResult:NSObject,JdCloudResult
{
}
public class CreateCollectInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateCollectInfoResult?;

    enum CreateCollectInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateCollectInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateCollectInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateCollectInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateCollectInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteLogtopicResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteLogtopicResult?;

    enum DeleteLogtopicResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteLogtopicResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteLogtopicResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteLogtopicResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLogtopicResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除日志主题。其采集配置与采集实例配置将一并删除。
public class DeleteLogtopicRequest:JdCloudRequest
{
    /// 日志集 UID
    var logsetUID:String

    /// 日志主题ID，多个日志主题ID以逗号分割
    var logtopicUIDs:String


    public init(regionId: String,logsetUID:String,logtopicUIDs:String){
        self.logsetUID = logsetUID
        self.logtopicUIDs = logtopicUIDs
        super.init(regionId: regionId)
    }


    enum DeleteLogtopicRequestRequestCodingKeys: String, CodingKey {
        case logsetUID
        case logtopicUIDs
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteLogtopicRequestRequestCodingKeys.self)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)
        try encoderContainer.encode(logtopicUIDs, forKey: .logtopicUIDs)

    }
}

/// 查询日志主题基本信息。如配置了采集配置，将返回采集配置的UID 
public class DescribeLogtopicResult:NSObject,JdCloudResult
{
    /// UID
    var uID:String?

    /// 日志来源,只在查询单个日志主题并且创建了采集配置时返回值
    var appCode:String?

    /// 采集配置UID
    var collectInfoUID:String?

    /// 创建时间
    var createTime:String?

    /// 描述信息
    var descriptionValue:String?

    /// 所属日志集名称
    var logsetName:String?

    /// 所属日志集
    var logsetUID:String?

    /// 日志主题名称
    var name:String?

    /// 地域信息
    var region:String?



    public override init(){
        super.init()
    }

    enum DescribeLogtopicResultCodingKeys: String, CodingKey {
        case uID
        case appCode
        case collectInfoUID
        case createTime
        case descriptionValue = "description"
        case logsetName
        case logsetUID
        case name
        case region
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogtopicResultCodingKeys.self)
        if decoderContainer.contains(.uID)
        {
            self.uID = try decoderContainer.decode(String?.self, forKey: .uID)
        }
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.collectInfoUID)
        {
            self.collectInfoUID = try decoderContainer.decode(String?.self, forKey: .collectInfoUID)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.logsetName)
        {
            self.logsetName = try decoderContainer.decode(String?.self, forKey: .logsetName)
        }
        if decoderContainer.contains(.logsetUID)
        {
            self.logsetUID = try decoderContainer.decode(String?.self, forKey: .logsetUID)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
    }
}
public extension DescribeLogtopicResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogtopicResultCodingKeys.self)
        try encoderContainer.encode(uID, forKey: .uID)
        try encoderContainer.encode(appCode, forKey: .appCode)
        try encoderContainer.encode(collectInfoUID, forKey: .collectInfoUID)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(logsetName, forKey: .logsetName)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(region, forKey: .region)
    }
}

///  更新日志主题。日志主题名称不可更新。
public class UpdateLogtopicRequest:JdCloudRequest
{
    /// 日志主题描述
    var descriptionValue:String

    /// 日志主题 UID
    var logtopicUID:String


    public init(regionId: String,descriptionValue:String,logtopicUID:String){
        self.descriptionValue = descriptionValue
        self.logtopicUID = logtopicUID
        super.init(regionId: regionId)
    }


    enum UpdateLogtopicRequestRequestCodingKeys: String, CodingKey {
        case descriptionValue = "description"
        case logtopicUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateLogtopicRequestRequestCodingKeys.self)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)

    }
}


///  创建日志主题，不可与当前日志集下现有日志主题重名。
public class CreateLogtopicRequest:JdCloudRequest
{
    /// 日志主题名称
    var name:String

    /// 日志集描述
    var descriptionValue:String?

    /// 日志集 UID
    var logsetUID:String


    public init(regionId: String,name:String,logsetUID:String){
        self.name = name
        self.logsetUID = logsetUID
        super.init(regionId: regionId)
    }


    enum CreateLogtopicRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case logsetUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateLogtopicRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)

    }
}

public class UpdateLogtopicResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateLogtopicResult?;

    enum UpdateLogtopicResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateLogtopicResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateLogtopicResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateLogtopicResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateLogtopicResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 更新日志主题。日志主题名称不可更新。 
public class UpdateLogtopicResult:NSObject,JdCloudResult
{
}
/// 删除日志主题。其采集配置与采集实例配置将一并删除。 
public class DeleteLogtopicResult:NSObject,JdCloudResult
{
}

///  查询日志主题基本信息。如配置了采集配置，将返回采集配置的UID
public class DescribeLogtopicRequest:JdCloudRequest
{
    /// 日志主题 UID
    var logtopicUID:String


    public init(regionId: String,logtopicUID:String){
        self.logtopicUID = logtopicUID
        super.init(regionId: regionId)
    }


    enum DescribeLogtopicRequestRequestCodingKeys: String, CodingKey {
        case logtopicUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogtopicRequestRequestCodingKeys.self)
        try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)

    }
}


///  查询日志主题列表，支持按照名称模糊查询。
public class DescribeLogtopicsRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
    var pageSize:Int64?

    /// 日志主题名称
    var name:String?

    /// 日志集 UID
    var logsetUID:String


    public init(regionId: String,logsetUID:String){
        self.logsetUID = logsetUID
        super.init(regionId: regionId)
    }


    enum DescribeLogtopicsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case name
        case logsetUID
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogtopicsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(logsetUID, forKey: .logsetUID)

    }
}

public class DescribeLogtopicsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLogtopicsResult?;

    enum DescribeLogtopicsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogtopicsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLogtopicsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLogtopicsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogtopicsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeLogtopicResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeLogtopicResult?;

    enum DescribeLogtopicResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogtopicResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeLogtopicResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeLogtopicResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogtopicResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询日志主题列表，支持按照名称模糊查询。 
public class DescribeLogtopicsResult:NSObject,JdCloudResult
{
    /// 日志主题列表
    var data:[LogtopicDetailEnd?]?

    /// 总页数
    var numberPages:Int64?

    /// 总记录数
    var numberRecords:Int64?

    /// 当前页码
    var pageNumber:Int64?

    /// 分页大小
    var pageSize:Int64?



    public override init(){
        super.init()
    }

    enum DescribeLogtopicsResultCodingKeys: String, CodingKey {
        case data
        case numberPages
        case numberRecords
        case pageNumber
        case pageSize
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeLogtopicsResultCodingKeys.self)
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([LogtopicDetailEnd?]?.self, forKey: .data)
        }
        if decoderContainer.contains(.numberPages)
        {
            self.numberPages = try decoderContainer.decode(Int64?.self, forKey: .numberPages)
        }
        if decoderContainer.contains(.numberRecords)
        {
            self.numberRecords = try decoderContainer.decode(Int64?.self, forKey: .numberRecords)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int64?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int64?.self, forKey: .pageSize)
        }
    }
}
public extension DescribeLogtopicsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeLogtopicsResultCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(numberPages, forKey: .numberPages)
        try encoderContainer.encode(numberRecords, forKey: .numberRecords)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
    }
}
public class CreateLogtopicResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateLogtopicResult?;

    enum CreateLogtopicResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateLogtopicResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateLogtopicResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateLogtopicResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateLogtopicResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建日志主题，不可与当前日志集下现有日志主题重名。 
public class CreateLogtopicResult:NSObject,JdCloudResult
{
    /// UID
    var uID:String?



    public override init(){
        super.init()
    }

    enum CreateLogtopicResultCodingKeys: String, CodingKey {
        case uID
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateLogtopicResultCodingKeys.self)
        if decoderContainer.contains(.uID)
        {
            self.uID = try decoderContainer.decode(String?.self, forKey: .uID)
        }
    }
}
public extension CreateLogtopicResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateLogtopicResultCodingKeys.self)
        try encoderContainer.encode(uID, forKey: .uID)
    }
}
