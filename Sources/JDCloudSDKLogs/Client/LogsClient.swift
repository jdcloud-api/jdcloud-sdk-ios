/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JCLOUD LOGS API
   logs API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class LogsJDCloudClient:NSObject,JDCloudClient{
    
    private final var logsJDCloudClient:LogsJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        logsJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "logs.jcloud.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        logsJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "logs/" + "v1"
    
    public let serviceName: String = "logs"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func describeLogtopicAsync(request:DescribeLogtopicRequest,requestComplation:@escaping ExecuteResult<DescribeLogtopicResult>) throws {
        logsJDCloudClient = self
        try DescribeLogtopicExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLogdCAAsync(request:DescribeLogdCARequest,requestComplation:@escaping ExecuteResult<DescribeLogdCAResult>) throws {
        logsJDCloudClient = self
        try DescribeLogdCAExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCollectResourcesAsync(request:DescribeCollectResourcesRequest,requestComplation:@escaping ExecuteResult<DescribeCollectResourcesResult>) throws {
        logsJDCloudClient = self
        try DescribeCollectResourcesExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateLogtopicAsync(request:UpdateLogtopicRequest,requestComplation:@escaping ExecuteResult<UpdateLogtopicResult>) throws {
        logsJDCloudClient = self
        try UpdateLogtopicExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLogsetsAsync(request:DescribeLogsetsRequest,requestComplation:@escaping ExecuteResult<DescribeLogsetsResult>) throws {
        logsJDCloudClient = self
        try DescribeLogsetsExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeMetricTasksAsync(request:DescribeMetricTasksRequest,requestComplation:@escaping ExecuteResult<DescribeMetricTasksResult>) throws {
        logsJDCloudClient = self
        try DescribeMetricTasksExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeMetricTaskAsync(request:DescribeMetricTaskRequest,requestComplation:@escaping ExecuteResult<DescribeMetricTaskResult>) throws {
        logsJDCloudClient = self
        try DescribeMetricTaskExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func putAsync(request:PutRequest,requestComplation:@escaping ExecuteResult<PutResult>) throws {
        logsJDCloudClient = self
        try PutExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func searchLogContextAsync(request:SearchLogContextRequest,requestComplation:@escaping ExecuteResult<SearchLogContextResult>) throws {
        logsJDCloudClient = self
        try SearchLogContextExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLogsetAsync(request:DeleteLogsetRequest,requestComplation:@escaping ExecuteResult<DeleteLogsetResult>) throws {
        logsJDCloudClient = self
        try DeleteLogsetExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func searchAsync(request:SearchRequest,requestComplation:@escaping ExecuteResult<SearchResult>) throws {
        logsJDCloudClient = self
        try SearchExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func testMetricTaskAsync(request:TestMetricTaskRequest,requestComplation:@escaping ExecuteResult<TestMetricTaskResult>) throws {
        logsJDCloudClient = self
        try TestMetricTaskExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLogsetAsync(request:DescribeLogsetRequest,requestComplation:@escaping ExecuteResult<DescribeLogsetResult>) throws {
        logsJDCloudClient = self
        try DescribeLogsetExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceCollectConfsAsync(request:DescribeInstanceCollectConfsRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceCollectConfsResult>) throws {
        logsJDCloudClient = self
        try DescribeInstanceCollectConfsExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteLogtopicAsync(request:DeleteLogtopicRequest,requestComplation:@escaping ExecuteResult<DeleteLogtopicResult>) throws {
        logsJDCloudClient = self
        try DeleteLogtopicExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createMetricTaskAsync(request:CreateMetricTaskRequest,requestComplation:@escaping ExecuteResult<CreateMetricTaskResult>) throws {
        logsJDCloudClient = self
        try CreateMetricTaskExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateCollectInfoAsync(request:UpdateCollectInfoRequest,requestComplation:@escaping ExecuteResult<UpdateCollectInfoResult>) throws {
        logsJDCloudClient = self
        try UpdateCollectInfoExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createLogsetAsync(request:CreateLogsetRequest,requestComplation:@escaping ExecuteResult<CreateLogsetResult>) throws {
        logsJDCloudClient = self
        try CreateLogsetExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateLogsetAsync(request:UpdateLogsetRequest,requestComplation:@escaping ExecuteResult<UpdateLogsetResult>) throws {
        logsJDCloudClient = self
        try UpdateLogsetExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCollectInfoAsync(request:DescribeCollectInfoRequest,requestComplation:@escaping ExecuteResult<DescribeCollectInfoResult>) throws {
        logsJDCloudClient = self
        try DescribeCollectInfoExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeLogtopicsAsync(request:DescribeLogtopicsRequest,requestComplation:@escaping ExecuteResult<DescribeLogtopicsResult>) throws {
        logsJDCloudClient = self
        try DescribeLogtopicsExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createCollectInfoAsync(request:CreateCollectInfoRequest,requestComplation:@escaping ExecuteResult<CreateCollectInfoResult>) throws {
        logsJDCloudClient = self
        try CreateCollectInfoExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateMetricTaskAsync(request:UpdateMetricTaskRequest,requestComplation:@escaping ExecuteResult<UpdateMetricTaskResult>) throws {
        logsJDCloudClient = self
        try UpdateMetricTaskExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteMetricTaskAsync(request:DeleteMetricTaskRequest,requestComplation:@escaping ExecuteResult<DeleteMetricTaskResult>) throws {
        logsJDCloudClient = self
        try DeleteMetricTaskExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateCollectResourcesAsync(request:UpdateCollectResourcesRequest,requestComplation:@escaping ExecuteResult<UpdateCollectResourcesResult>) throws {
        logsJDCloudClient = self
        try UpdateCollectResourcesExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createLogtopicAsync(request:CreateLogtopicRequest,requestComplation:@escaping ExecuteResult<CreateLogtopicResult>) throws {
        logsJDCloudClient = self
        try CreateLogtopicExecutor(jdCloudClient: logsJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension LogsJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "logs.jcloud.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
