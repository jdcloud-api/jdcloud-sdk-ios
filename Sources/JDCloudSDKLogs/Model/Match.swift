/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  match
@objc(Match)
public class Match:NSObject,Codable{
    /// Eq
    var eq:[String:[AnyObject?]?]?
    /// Not
    var not:[String:[AnyObject?]?]?
    /// Range
    var range:[String:Range?]?
    /// Regexp
    var regexp:[String:[String?]?]?
    /// Simple_query_string
    var simple_query_string:[String:String?]?
    /// SimpleQuery
    var simpleQuery:[String:SimpleQuery?]?
    /// Substring
    var substring:[String:[String?]?]?



    public override init(){
            super.init()
    }

    enum MatchCodingKeys: String, CodingKey {
        case eq
        case not
        case range
        case regexp
        case simple_query_string
        case simpleQuery
        case substring
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: MatchCodingKeys.self)
        if decoderContainer.contains(.range)
        {
            self.range = try decoderContainer.decode([String:Range?]?.self, forKey: .range)
        }
        if decoderContainer.contains(.regexp)
        {
            self.regexp = try decoderContainer.decode([String:[String?]?]?.self, forKey: .regexp)
        }
        if decoderContainer.contains(.simple_query_string)
        {
            self.simple_query_string = try decoderContainer.decode([String:String?]?.self, forKey: .simple_query_string)
        }
        if decoderContainer.contains(.simpleQuery)
        {
            self.simpleQuery = try decoderContainer.decode([String:SimpleQuery?]?.self, forKey: .simpleQuery)
        }
        if decoderContainer.contains(.substring)
        {
            self.substring = try decoderContainer.decode([String:[String?]?]?.self, forKey: .substring)
        }
    }
}
public extension Match{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: MatchCodingKeys.self)
         try encoderContainer.encode(range, forKey: .range)
         try encoderContainer.encode(regexp, forKey: .regexp)
         try encoderContainer.encode(simple_query_string, forKey: .simple_query_string)
         try encoderContainer.encode(simpleQuery, forKey: .simpleQuery)
         try encoderContainer.encode(substring, forKey: .substring)
    }
}
