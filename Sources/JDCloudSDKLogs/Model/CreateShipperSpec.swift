/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createShipperSpec
@objc(CreateShipperSpec)
public class CreateShipperSpec:NSObject,Codable{
    /// 压缩格式，为空不压缩
    var compress:String?
    /// 投递格式 json,  origin(原始日志格式), 默认origin
    var fileFormat:String?
    /// 投递文件大小，单位MB，支持200,300,400,500,1000
    /// Required:true
    var fileSize:Int64
    /// 转储任务名称
    /// Required:true
    var name:String
    /// 目的地 配置
    /// Required:true
    var targetConf:[String:AnyObject?]?
    /// 转储目的地类型 0: oss, 目前只支持oss
    var targetType:Int64?
    /// 投递时间间隔单位分钟，5分钟整数倍，支持5,10,15,20,30,60
    /// Required:true
    var timeInterval:Int64



    public  init(fileSize:Int64,name:String,targetConf:[String:AnyObject?],timeInterval:Int64){
             self.fileSize = fileSize
             self.name = name
             self.targetConf = targetConf
             self.timeInterval = timeInterval
    }

    enum CreateShipperSpecCodingKeys: String, CodingKey {
        case compress
        case fileFormat
        case fileSize
        case name
        case targetConf
        case targetType
        case timeInterval
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateShipperSpecCodingKeys.self)
        if decoderContainer.contains(.compress)
        {
            self.compress = try decoderContainer.decode(String?.self, forKey: .compress)
        }
        if decoderContainer.contains(.fileFormat)
        {
            self.fileFormat = try decoderContainer.decode(String?.self, forKey: .fileFormat)
        }
        self.fileSize = try decoderContainer.decode(Int64.self, forKey: .fileSize)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        if decoderContainer.contains(.targetType)
        {
            self.targetType = try decoderContainer.decode(Int64?.self, forKey: .targetType)
        }
        self.timeInterval = try decoderContainer.decode(Int64.self, forKey: .timeInterval)
    }
}
public extension CreateShipperSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateShipperSpecCodingKeys.self)
         try encoderContainer.encode(compress, forKey: .compress)
         try encoderContainer.encode(fileFormat, forKey: .fileFormat)
         try encoderContainer.encode(fileSize, forKey: .fileSize)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(targetType, forKey: .targetType)
         try encoderContainer.encode(timeInterval, forKey: .timeInterval)
    }
}
