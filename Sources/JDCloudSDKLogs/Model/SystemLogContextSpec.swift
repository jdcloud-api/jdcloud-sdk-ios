/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  systemLogContextSpec
@objc(SystemLogContextSpec)
public class SystemLogContextSpec:NSObject,Codable{
    /// Anchor
    var anchor:[AnyObject?]?
    /// AppName
    /// Required:true
    var appName:String
    /// Direction
    var direction:String?
    /// Id
    var id:String?
    /// LineSize
    var lineSize:Int64?
    /// LogType
    /// Required:true
    var logType:String
    /// Time
    var time:Int64?



    public  init(appName:String,logType:String){
             self.appName = appName
             self.logType = logType
    }

    enum SystemLogContextSpecCodingKeys: String, CodingKey {
        case anchor
        case appName
        case direction
        case id
        case lineSize
        case logType
        case time
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SystemLogContextSpecCodingKeys.self)
        self.appName = try decoderContainer.decode(String.self, forKey: .appName)
        if decoderContainer.contains(.direction)
        {
            self.direction = try decoderContainer.decode(String?.self, forKey: .direction)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.lineSize)
        {
            self.lineSize = try decoderContainer.decode(Int64?.self, forKey: .lineSize)
        }
        self.logType = try decoderContainer.decode(String.self, forKey: .logType)
        if decoderContainer.contains(.time)
        {
            self.time = try decoderContainer.decode(Int64?.self, forKey: .time)
        }
    }
}
public extension SystemLogContextSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SystemLogContextSpecCodingKeys.self)
         try encoderContainer.encode(appName, forKey: .appName)
         try encoderContainer.encode(direction, forKey: .direction)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(lineSize, forKey: .lineSize)
         try encoderContainer.encode(logType, forKey: .logType)
         try encoderContainer.encode(time, forKey: .time)
    }
}
