/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  logsetEnd
@objc(LogsetEnd)
public class LogsetEnd:NSObject,Codable{
    /// UID
    var uID:String?
    /// 创建时间
    var createTime:String?
    /// 描述信息
    var descriptionValue:String?
    /// 是否存在日志主题
    var hasTopic:Bool?
    /// 保存周期
    var lifeCycle:Int64?
    /// 日志集名称
    var name:String?
    /// 地域信息
    var region:String?



    public override init(){
            super.init()
    }

    enum LogsetEndCodingKeys: String, CodingKey {
        case uID
        case createTime
        case descriptionValue = "description"
        case hasTopic
        case lifeCycle
        case name
        case region
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: LogsetEndCodingKeys.self)
        if decoderContainer.contains(.uID)
        {
            self.uID = try decoderContainer.decode(String?.self, forKey: .uID)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.hasTopic)
        {
            self.hasTopic = try decoderContainer.decode(Bool?.self, forKey: .hasTopic)
        }
        if decoderContainer.contains(.lifeCycle)
        {
            self.lifeCycle = try decoderContainer.decode(Int64?.self, forKey: .lifeCycle)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
    }
}
public extension LogsetEnd{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: LogsetEndCodingKeys.self)
         try encoderContainer.encode(uID, forKey: .uID)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(hasTopic, forKey: .hasTopic)
         try encoderContainer.encode(lifeCycle, forKey: .lifeCycle)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(region, forKey: .region)
    }
}
