/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  collectInfoDetailEnd
@objc(CollectInfoDetailEnd)
public class CollectInfoDetailEnd:NSObject,Codable{
    /// UID
    var uID:String?
    /// 日志来源，只能是 custom
    var appCode:String?
    /// Detail
    var detail:CollectTempalteEnd?
    /// Enabled
    var enabled:Int64?
    /// 采集实例类型, 只能是 all/part
    var resourceType:String?
    /// 采集实例数量
    var resourcesCount:Int64?
    /// 产品线
    var serviceCode:String?
    /// 日志类型名称
    var templateName:String?
    /// 日志类型
    var templateUID:String?



    public override init(){
            super.init()
    }

    enum CollectInfoDetailEndCodingKeys: String, CodingKey {
        case uID
        case appCode
        case detail
        case enabled
        case resourceType
        case resourcesCount
        case serviceCode
        case templateName
        case templateUID
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CollectInfoDetailEndCodingKeys.self)
        if decoderContainer.contains(.uID)
        {
            self.uID = try decoderContainer.decode(String?.self, forKey: .uID)
        }
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.detail)
        {
            self.detail = try decoderContainer.decode(CollectTempalteEnd?.self, forKey: .detail)
        }
        if decoderContainer.contains(.enabled)
        {
            self.enabled = try decoderContainer.decode(Int64?.self, forKey: .enabled)
        }
        if decoderContainer.contains(.resourceType)
        {
            self.resourceType = try decoderContainer.decode(String?.self, forKey: .resourceType)
        }
        if decoderContainer.contains(.resourcesCount)
        {
            self.resourcesCount = try decoderContainer.decode(Int64?.self, forKey: .resourcesCount)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.templateName)
        {
            self.templateName = try decoderContainer.decode(String?.self, forKey: .templateName)
        }
        if decoderContainer.contains(.templateUID)
        {
            self.templateUID = try decoderContainer.decode(String?.self, forKey: .templateUID)
        }
    }
}
public extension CollectInfoDetailEnd{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CollectInfoDetailEndCodingKeys.self)
         try encoderContainer.encode(uID, forKey: .uID)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(detail, forKey: .detail)
         try encoderContainer.encode(enabled, forKey: .enabled)
         try encoderContainer.encode(resourceType, forKey: .resourceType)
         try encoderContainer.encode(resourcesCount, forKey: .resourcesCount)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(templateName, forKey: .templateName)
         try encoderContainer.encode(templateUID, forKey: .templateUID)
    }
}
