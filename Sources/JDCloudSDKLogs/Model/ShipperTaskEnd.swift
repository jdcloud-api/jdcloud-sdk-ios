/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  shipperTaskEnd
@objc(ShipperTaskEnd)
public class ShipperTaskEnd:NSObject,Codable{
    /// UID
    var uID:String?
    /// 是否允许重试， true，false
    var allowRetry:Bool?
    /// 创建时间
    var createTime:String?
    /// 结束时间
    var endTime:Int64?
    /// 日志集uuid
    var logsetUID:String?
    /// 日志主题uuid
    var logtopicUID:String?
    /// 地域信息
    var region:String?
    /// 日志批次任务截止时间
    var shipperEndTime:Int64?
    /// 日志批次任务起始时间
    var shipperStartTime:Int64?
    /// shipperUID
    var shipperUID:String?
    /// 开始时间
    var startTime:Int64?
    /// 该批次转储任务状态： 1 发送中 2 成功，3 失败
    var status:Int64?
    /// 更新时间
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum ShipperTaskEndCodingKeys: String, CodingKey {
        case uID
        case allowRetry
        case createTime
        case endTime
        case logsetUID
        case logtopicUID
        case region
        case shipperEndTime
        case shipperStartTime
        case shipperUID
        case startTime
        case status
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ShipperTaskEndCodingKeys.self)
        if decoderContainer.contains(.uID)
        {
            self.uID = try decoderContainer.decode(String?.self, forKey: .uID)
        }
        if decoderContainer.contains(.allowRetry)
        {
            self.allowRetry = try decoderContainer.decode(Bool?.self, forKey: .allowRetry)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.endTime)
        {
            self.endTime = try decoderContainer.decode(Int64?.self, forKey: .endTime)
        }
        if decoderContainer.contains(.logsetUID)
        {
            self.logsetUID = try decoderContainer.decode(String?.self, forKey: .logsetUID)
        }
        if decoderContainer.contains(.logtopicUID)
        {
            self.logtopicUID = try decoderContainer.decode(String?.self, forKey: .logtopicUID)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.shipperEndTime)
        {
            self.shipperEndTime = try decoderContainer.decode(Int64?.self, forKey: .shipperEndTime)
        }
        if decoderContainer.contains(.shipperStartTime)
        {
            self.shipperStartTime = try decoderContainer.decode(Int64?.self, forKey: .shipperStartTime)
        }
        if decoderContainer.contains(.shipperUID)
        {
            self.shipperUID = try decoderContainer.decode(String?.self, forKey: .shipperUID)
        }
        if decoderContainer.contains(.startTime)
        {
            self.startTime = try decoderContainer.decode(Int64?.self, forKey: .startTime)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int64?.self, forKey: .status)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension ShipperTaskEnd{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ShipperTaskEndCodingKeys.self)
         try encoderContainer.encode(uID, forKey: .uID)
         try encoderContainer.encode(allowRetry, forKey: .allowRetry)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
         try encoderContainer.encode(logsetUID, forKey: .logsetUID)
         try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(shipperEndTime, forKey: .shipperEndTime)
         try encoderContainer.encode(shipperStartTime, forKey: .shipperStartTime)
         try encoderContainer.encode(shipperUID, forKey: .shipperUID)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
