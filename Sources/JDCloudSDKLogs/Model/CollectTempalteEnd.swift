/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  collectTempalteEnd
@objc(CollectTempalteEnd)
public class CollectTempalteEnd:NSObject,Codable{
    /// 过滤器是否启用
    var filterEnabled:Bool?
    /// 日志文件
    var logFile:String?
    /// 过滤器
    var logFilters:[String?]?
    /// 日志路径
    var logPath:String?



    public override init(){
            super.init()
    }

    enum CollectTempalteEndCodingKeys: String, CodingKey {
        case filterEnabled
        case logFile
        case logFilters
        case logPath
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CollectTempalteEndCodingKeys.self)
        if decoderContainer.contains(.filterEnabled)
        {
            self.filterEnabled = try decoderContainer.decode(Bool?.self, forKey: .filterEnabled)
        }
        if decoderContainer.contains(.logFile)
        {
            self.logFile = try decoderContainer.decode(String?.self, forKey: .logFile)
        }
        if decoderContainer.contains(.logFilters)
        {
            self.logFilters = try decoderContainer.decode([String?]?.self, forKey: .logFilters)
        }
        if decoderContainer.contains(.logPath)
        {
            self.logPath = try decoderContainer.decode(String?.self, forKey: .logPath)
        }
    }
}
public extension CollectTempalteEnd{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CollectTempalteEndCodingKeys.self)
         try encoderContainer.encode(filterEnabled, forKey: .filterEnabled)
         try encoderContainer.encode(logFile, forKey: .logFile)
         try encoderContainer.encode(logFilters, forKey: .logFilters)
         try encoderContainer.encode(logPath, forKey: .logPath)
    }
}
