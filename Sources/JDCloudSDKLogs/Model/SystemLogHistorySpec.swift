/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  systemLogHistorySpec
@objc(SystemLogHistorySpec)
public class SystemLogHistorySpec:NSObject,Codable{
    /// AppName
    /// Required:true
    var appName:String
    /// 精确匹配，true 或者 false
    var exactMatch:Bool?
    /// Instance
    /// Required:true
    var instance:String
    /// 查询关键字
    var keyword:String?
    /// LogType
    /// Required:true
    var logType:String
    /// 排序，取值&quot;ASC&quot;或&quot;DESC&quot;，默认&quot;ASC&quot;
    var order:String?
    /// 页数，从1开始
    var page:Int64?
    /// 每页日志条数
    var size:Int64?
    /// Time
    /// Required:true
    var time:TimestampRange



    public  init(appName:String,instance:String,logType:String,time:TimestampRange){
             self.appName = appName
             self.instance = instance
             self.logType = logType
             self.time = time
    }

    enum SystemLogHistorySpecCodingKeys: String, CodingKey {
        case appName
        case exactMatch
        case instance
        case keyword
        case logType
        case order
        case page
        case size
        case time
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SystemLogHistorySpecCodingKeys.self)
        self.appName = try decoderContainer.decode(String.self, forKey: .appName)
        if decoderContainer.contains(.exactMatch)
        {
            self.exactMatch = try decoderContainer.decode(Bool?.self, forKey: .exactMatch)
        }
        self.instance = try decoderContainer.decode(String.self, forKey: .instance)
        if decoderContainer.contains(.keyword)
        {
            self.keyword = try decoderContainer.decode(String?.self, forKey: .keyword)
        }
        self.logType = try decoderContainer.decode(String.self, forKey: .logType)
        if decoderContainer.contains(.order)
        {
            self.order = try decoderContainer.decode(String?.self, forKey: .order)
        }
        if decoderContainer.contains(.page)
        {
            self.page = try decoderContainer.decode(Int64?.self, forKey: .page)
        }
        if decoderContainer.contains(.size)
        {
            self.size = try decoderContainer.decode(Int64?.self, forKey: .size)
        }
        self.time = try decoderContainer.decode(TimestampRange.self, forKey: .time)
    }
}
public extension SystemLogHistorySpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SystemLogHistorySpecCodingKeys.self)
         try encoderContainer.encode(appName, forKey: .appName)
         try encoderContainer.encode(exactMatch, forKey: .exactMatch)
         try encoderContainer.encode(instance, forKey: .instance)
         try encoderContainer.encode(keyword, forKey: .keyword)
         try encoderContainer.encode(logType, forKey: .logType)
         try encoderContainer.encode(order, forKey: .order)
         try encoderContainer.encode(page, forKey: .page)
         try encoderContainer.encode(size, forKey: .size)
         try encoderContainer.encode(time, forKey: .time)
    }
}
