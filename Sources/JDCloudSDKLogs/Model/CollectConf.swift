/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  collectConf
@objc(CollectConf)
public class CollectConf:NSObject,Codable{
    /// collectTemplateUID
    var collectTemplateUID:String?
    /// 采集文件名称，支持通配
    var file:String?
    /// filters 过滤器V1：多个词之间为or的关系
    var filters:[String?]?
    /// logtopicUID 日志主题UID
    var logtopicUID:String?
    /// 采集文件路径，支持通配
    var path:String?
    /// 用户 PIN
    var pin:String?



    public override init(){
            super.init()
    }

    enum CollectConfCodingKeys: String, CodingKey {
        case collectTemplateUID
        case file
        case filters
        case logtopicUID
        case path
        case pin
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CollectConfCodingKeys.self)
        if decoderContainer.contains(.collectTemplateUID)
        {
            self.collectTemplateUID = try decoderContainer.decode(String?.self, forKey: .collectTemplateUID)
        }
        if decoderContainer.contains(.file)
        {
            self.file = try decoderContainer.decode(String?.self, forKey: .file)
        }
        if decoderContainer.contains(.filters)
        {
            self.filters = try decoderContainer.decode([String?]?.self, forKey: .filters)
        }
        if decoderContainer.contains(.logtopicUID)
        {
            self.logtopicUID = try decoderContainer.decode(String?.self, forKey: .logtopicUID)
        }
        if decoderContainer.contains(.path)
        {
            self.path = try decoderContainer.decode(String?.self, forKey: .path)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
    }
}
public extension CollectConf{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CollectConfCodingKeys.self)
         try encoderContainer.encode(collectTemplateUID, forKey: .collectTemplateUID)
         try encoderContainer.encode(file, forKey: .file)
         try encoderContainer.encode(filters, forKey: .filters)
         try encoderContainer.encode(logtopicUID, forKey: .logtopicUID)
         try encoderContainer.encode(path, forKey: .path)
         try encoderContainer.encode(pin, forKey: .pin)
    }
}
