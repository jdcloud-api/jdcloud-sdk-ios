/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  entry
@objc(Entry)
public class Entry:NSObject,Codable{
    /// 日志原文
    /// Required:true
    var content:String
    /// 日志流标识符,不传则使用全局日志流标识符
    var stream:String?
    /// 标签，不传则取全局标签 map[string]string
    var tags:AnyObject?
    /// 时间戳，UTC格式，最多支持到纳秒级别，不传入则取全局时间戳。如 2019-04-08T03:08:04.437670934Z、2019-04-08T03:08:04Z、2019-04-08T03:08:04.123Z
    var timestamp:String?



    public  init(content:String){
             self.content = content
    }

    enum EntryCodingKeys: String, CodingKey {
        case content
        case stream
        case tags
        case timestamp
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EntryCodingKeys.self)
        self.content = try decoderContainer.decode(String.self, forKey: .content)
        if decoderContainer.contains(.stream)
        {
            self.stream = try decoderContainer.decode(String?.self, forKey: .stream)
        }
        if decoderContainer.contains(.timestamp)
        {
            self.timestamp = try decoderContainer.decode(String?.self, forKey: .timestamp)
        }
    }
}
public extension Entry{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EntryCodingKeys.self)
         try encoderContainer.encode(content, forKey: .content)
         try encoderContainer.encode(stream, forKey: .stream)
         try encoderContainer.encode(timestamp, forKey: .timestamp)
    }
}
