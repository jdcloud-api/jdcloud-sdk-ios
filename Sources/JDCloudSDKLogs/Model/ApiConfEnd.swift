/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  apiConfEnd
@objc(ApiConfEnd)
public class ApiConfEnd:NSObject,Codable{
    /// api name
    var apiName:String?
    /// apiType: 1-openapi,2-http
    var apiType:Int64?
    /// 记录id
    var id:Int64?
    /// method: GET/POST ...
    var method:String?
    /// params
    var params:[Pair?]?
    /// reps
    var resp:[Pair?]?
    /// serviceCode
    var serviceCode:String?
    /// url
    var url:String?
    /// version: v1
    var version:String?



    public override init(){
            super.init()
    }

    enum ApiConfEndCodingKeys: String, CodingKey {
        case apiName
        case apiType
        case id
        case method
        case params
        case resp
        case serviceCode
        case url
        case version
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ApiConfEndCodingKeys.self)
        if decoderContainer.contains(.apiName)
        {
            self.apiName = try decoderContainer.decode(String?.self, forKey: .apiName)
        }
        if decoderContainer.contains(.apiType)
        {
            self.apiType = try decoderContainer.decode(Int64?.self, forKey: .apiType)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int64?.self, forKey: .id)
        }
        if decoderContainer.contains(.method)
        {
            self.method = try decoderContainer.decode(String?.self, forKey: .method)
        }
        if decoderContainer.contains(.params)
        {
            self.params = try decoderContainer.decode([Pair?]?.self, forKey: .params)
        }
        if decoderContainer.contains(.resp)
        {
            self.resp = try decoderContainer.decode([Pair?]?.self, forKey: .resp)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.url)
        {
            self.url = try decoderContainer.decode(String?.self, forKey: .url)
        }
        if decoderContainer.contains(.version)
        {
            self.version = try decoderContainer.decode(String?.self, forKey: .version)
        }
    }
}
public extension ApiConfEnd{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ApiConfEndCodingKeys.self)
         try encoderContainer.encode(apiName, forKey: .apiName)
         try encoderContainer.encode(apiType, forKey: .apiType)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(method, forKey: .method)
         try encoderContainer.encode(params, forKey: .params)
         try encoderContainer.encode(resp, forKey: .resp)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(url, forKey: .url)
         try encoderContainer.encode(version, forKey: .version)
    }
}
