/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  sysTemplateEnd
@objc(SysTemplateEnd)
public class SysTemplateEnd:NSObject,Codable{
    /// UID
    var uID:String?
    /// create user
    var createErp:String?
    /// create date
    var createTime:String?
    /// 是否启用
    var enabled:Bool?
    /// 模板名称
    var name:String?
    /// serviceCode
    var serviceCode:String?
    /// update user
    var updateErp:String?
    /// update date
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum SysTemplateEndCodingKeys: String, CodingKey {
        case uID
        case createErp
        case createTime
        case enabled
        case name
        case serviceCode
        case updateErp
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SysTemplateEndCodingKeys.self)
        if decoderContainer.contains(.uID)
        {
            self.uID = try decoderContainer.decode(String?.self, forKey: .uID)
        }
        if decoderContainer.contains(.createErp)
        {
            self.createErp = try decoderContainer.decode(String?.self, forKey: .createErp)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.enabled)
        {
            self.enabled = try decoderContainer.decode(Bool?.self, forKey: .enabled)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.updateErp)
        {
            self.updateErp = try decoderContainer.decode(String?.self, forKey: .updateErp)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension SysTemplateEnd{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SysTemplateEndCodingKeys.self)
         try encoderContainer.encode(uID, forKey: .uID)
         try encoderContainer.encode(createErp, forKey: .createErp)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(enabled, forKey: .enabled)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(updateErp, forKey: .updateErp)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
