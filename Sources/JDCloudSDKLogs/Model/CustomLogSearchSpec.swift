/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  customLogSearchSpec
@objc(CustomLogSearchSpec)
public class CustomLogSearchSpec:NSObject,Codable{
    /// AppName
    /// Required:true
    var appName:[String?]
    /// From
    var from:Int64?
    /// LogTopicId
    var logTopicId:String?
    /// Match
    var match:[Match?]?
    /// RecordId
    var recordId:String?
    /// Resp
    var resp:[String?]?
    /// Size
    var size:Int64?
    /// Sort
    var sort:String?
    /// TimeRange
    /// Required:true
    var timeRange:DateTimeRange
    /// Uuid
    var uuid:String?



    public  init(appName:[String?],timeRange:DateTimeRange){
             self.appName = appName
             self.timeRange = timeRange
    }

    enum CustomLogSearchSpecCodingKeys: String, CodingKey {
        case appName
        case from
        case logTopicId
        case match
        case recordId
        case resp
        case size
        case sort
        case timeRange
        case uuid
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CustomLogSearchSpecCodingKeys.self)
        self.appName = try decoderContainer.decode([String?].self, forKey: .appName)
        if decoderContainer.contains(.from)
        {
            self.from = try decoderContainer.decode(Int64?.self, forKey: .from)
        }
        if decoderContainer.contains(.logTopicId)
        {
            self.logTopicId = try decoderContainer.decode(String?.self, forKey: .logTopicId)
        }
        if decoderContainer.contains(.match)
        {
            self.match = try decoderContainer.decode([Match?]?.self, forKey: .match)
        }
        if decoderContainer.contains(.recordId)
        {
            self.recordId = try decoderContainer.decode(String?.self, forKey: .recordId)
        }
        if decoderContainer.contains(.resp)
        {
            self.resp = try decoderContainer.decode([String?]?.self, forKey: .resp)
        }
        if decoderContainer.contains(.size)
        {
            self.size = try decoderContainer.decode(Int64?.self, forKey: .size)
        }
        if decoderContainer.contains(.sort)
        {
            self.sort = try decoderContainer.decode(String?.self, forKey: .sort)
        }
        self.timeRange = try decoderContainer.decode(DateTimeRange.self, forKey: .timeRange)
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
    }
}
public extension CustomLogSearchSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CustomLogSearchSpecCodingKeys.self)
         try encoderContainer.encode(appName, forKey: .appName)
         try encoderContainer.encode(from, forKey: .from)
         try encoderContainer.encode(logTopicId, forKey: .logTopicId)
         try encoderContainer.encode(match, forKey: .match)
         try encoderContainer.encode(recordId, forKey: .recordId)
         try encoderContainer.encode(resp, forKey: .resp)
         try encoderContainer.encode(size, forKey: .size)
         try encoderContainer.encode(sort, forKey: .sort)
         try encoderContainer.encode(timeRange, forKey: .timeRange)
         try encoderContainer.encode(uuid, forKey: .uuid)
    }
}
