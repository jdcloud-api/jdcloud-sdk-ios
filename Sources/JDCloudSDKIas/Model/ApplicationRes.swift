/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  应用组
@objc(ApplicationRes)
public class ApplicationRes:NSObject,Codable{
    /// 应用ID，由京东云分配的16位数字ID
    /// Required:true
    var clientId:String
    /// 应用名
    /// Required:true
    var clientName:String
    /// 客户端认证方式
    /// Required:true
    var tokenEndpointAuthMethod:String
    /// 支持的OAuth类型
    /// Required:true
    var grantTypes:String
    /// 当grantTypes为authorization_code时，responseTypes为code；当grantTypes为implicit时，responseTypes为token
    /// Required:true
    var responseTypes:String
    /// 回调地址
    /// Required:true
    var redirectUris:String
    /// 应用介绍地址
    /// Required:true
    var clientUri:String
    /// 应用logo地址
    /// Required:true
    var logoUri:String
    /// 应用服务协议地址
    /// Required:true
    var tosUri:String
    /// 应用隐私条款地址
    /// Required:true
    var policyUri:String
    /// OAuth scope授权范围
    /// Required:true
    var scope:String
    /// JWKS地址
    /// Required:true
    var jwksUri:String
    /// JWKS
    /// Required:true
    var jwks:String
    /// 应用联系信息
    /// Required:true
    var contacts:String
    /// 应用扩展信息
    /// Required:true
    var extensionValue:String
    /// 访问令牌有效期
    /// Required:true
    var accessTokenValiditySeconds:Int
    /// 刷新令牌有效期
    /// Required:true
    var refreshTokenValiditySeconds:Int
    /// 是否为多租户应用
    /// Required:true
    var multiTenant:Bool
    /// 应用密码更新时间
    /// Required:true
    var secretUpdateTime:Int64
    /// 应用更新时间
    /// Required:true
    var updateTime:Int64
    /// 应用创建时间
    /// Required:true
    var createTime:Int64
    /// 创建应用的账户用户名
    /// Required:true
    var account:String
    /// 允许登录应用的账号类型
    /// Required:true
    var userType:String



    public  init(clientId:String,clientName:String,tokenEndpointAuthMethod:String,grantTypes:String,responseTypes:String,redirectUris:String,clientUri:String,logoUri:String,tosUri:String,policyUri:String,scope:String,jwksUri:String,jwks:String,contacts:String,extensionValue:String,accessTokenValiditySeconds:Int,refreshTokenValiditySeconds:Int,multiTenant:Bool,secretUpdateTime:Int64,updateTime:Int64,createTime:Int64,account:String,userType:String){
             self.clientId = clientId
             self.clientName = clientName
             self.tokenEndpointAuthMethod = tokenEndpointAuthMethod
             self.grantTypes = grantTypes
             self.responseTypes = responseTypes
             self.redirectUris = redirectUris
             self.clientUri = clientUri
             self.logoUri = logoUri
             self.tosUri = tosUri
             self.policyUri = policyUri
             self.scope = scope
             self.jwksUri = jwksUri
             self.jwks = jwks
             self.contacts = contacts
             self.extensionValue = extensionValue
             self.accessTokenValiditySeconds = accessTokenValiditySeconds
             self.refreshTokenValiditySeconds = refreshTokenValiditySeconds
             self.multiTenant = multiTenant
             self.secretUpdateTime = secretUpdateTime
             self.updateTime = updateTime
             self.createTime = createTime
             self.account = account
             self.userType = userType
    }

    enum ApplicationResCodingKeys: String, CodingKey {
        case clientId
        case clientName
        case tokenEndpointAuthMethod
        case grantTypes
        case responseTypes
        case redirectUris
        case clientUri
        case logoUri
        case tosUri
        case policyUri
        case scope
        case jwksUri
        case jwks
        case contacts
        case extensionValue = "extension"
        case accessTokenValiditySeconds
        case refreshTokenValiditySeconds
        case multiTenant
        case secretUpdateTime
        case updateTime
        case createTime
        case account
        case userType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ApplicationResCodingKeys.self)
        self.clientId = try decoderContainer.decode(String.self, forKey: .clientId)
        self.clientName = try decoderContainer.decode(String.self, forKey: .clientName)
        self.tokenEndpointAuthMethod = try decoderContainer.decode(String.self, forKey: .tokenEndpointAuthMethod)
        self.grantTypes = try decoderContainer.decode(String.self, forKey: .grantTypes)
        self.responseTypes = try decoderContainer.decode(String.self, forKey: .responseTypes)
        self.redirectUris = try decoderContainer.decode(String.self, forKey: .redirectUris)
        self.clientUri = try decoderContainer.decode(String.self, forKey: .clientUri)
        self.logoUri = try decoderContainer.decode(String.self, forKey: .logoUri)
        self.tosUri = try decoderContainer.decode(String.self, forKey: .tosUri)
        self.policyUri = try decoderContainer.decode(String.self, forKey: .policyUri)
        self.scope = try decoderContainer.decode(String.self, forKey: .scope)
        self.jwksUri = try decoderContainer.decode(String.self, forKey: .jwksUri)
        self.jwks = try decoderContainer.decode(String.self, forKey: .jwks)
        self.contacts = try decoderContainer.decode(String.self, forKey: .contacts)
        self.extensionValue = try decoderContainer.decode(String.self, forKey: .extensionValue)
        self.accessTokenValiditySeconds = try decoderContainer.decode(Int.self, forKey: .accessTokenValiditySeconds)
        self.refreshTokenValiditySeconds = try decoderContainer.decode(Int.self, forKey: .refreshTokenValiditySeconds)
        self.multiTenant = try decoderContainer.decode(Bool.self, forKey: .multiTenant)
        self.secretUpdateTime = try decoderContainer.decode(Int64.self, forKey: .secretUpdateTime)
        self.updateTime = try decoderContainer.decode(Int64.self, forKey: .updateTime)
        self.createTime = try decoderContainer.decode(Int64.self, forKey: .createTime)
        self.account = try decoderContainer.decode(String.self, forKey: .account)
        self.userType = try decoderContainer.decode(String.self, forKey: .userType)
    }
}
public extension ApplicationRes{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ApplicationResCodingKeys.self)
         try encoderContainer.encode(clientId, forKey: .clientId)
         try encoderContainer.encode(clientName, forKey: .clientName)
         try encoderContainer.encode(tokenEndpointAuthMethod, forKey: .tokenEndpointAuthMethod)
         try encoderContainer.encode(grantTypes, forKey: .grantTypes)
         try encoderContainer.encode(responseTypes, forKey: .responseTypes)
         try encoderContainer.encode(redirectUris, forKey: .redirectUris)
         try encoderContainer.encode(clientUri, forKey: .clientUri)
         try encoderContainer.encode(logoUri, forKey: .logoUri)
         try encoderContainer.encode(tosUri, forKey: .tosUri)
         try encoderContainer.encode(policyUri, forKey: .policyUri)
         try encoderContainer.encode(scope, forKey: .scope)
         try encoderContainer.encode(jwksUri, forKey: .jwksUri)
         try encoderContainer.encode(jwks, forKey: .jwks)
         try encoderContainer.encode(contacts, forKey: .contacts)
         try encoderContainer.encode(extensionValue, forKey: .extensionValue)
         try encoderContainer.encode(accessTokenValiditySeconds, forKey: .accessTokenValiditySeconds)
         try encoderContainer.encode(refreshTokenValiditySeconds, forKey: .refreshTokenValiditySeconds)
         try encoderContainer.encode(multiTenant, forKey: .multiTenant)
         try encoderContainer.encode(secretUpdateTime, forKey: .secretUpdateTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(account, forKey: .account)
         try encoderContainer.encode(userType, forKey: .userType)
    }
}
