/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Renew Management APIs
   续费管理相关接口

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  为一个或多个实例设置自动续费服务。
public class SetRenewalRequest:JdCloudRequest
{
    /// SetRenewalParam
    var setRenewalParam:SetRenewalParam


    public init(regionId: String,setRenewalParam:SetRenewalParam){
        self.setRenewalParam = setRenewalParam
        super.init(regionId: regionId)
    }


    enum SetRenewalRequestRequestCodingKeys: String, CodingKey {
        case setRenewalParam
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetRenewalRequestRequestCodingKeys.self)
        try encoderContainer.encode(setRenewalParam, forKey: .setRenewalParam)

    }
}

/// 提供可续费的实例信息查询。 
public class QueryInstanceResult:NSObject,JdCloudResult
{
    /// 列表详情
    var listQueries:[ListQuery?]?

    /// 查询总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum QueryInstanceResultCodingKeys: String, CodingKey {
        case listQueries
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryInstanceResultCodingKeys.self)
        if decoderContainer.contains(.listQueries)
        {
            self.listQueries = try decoderContainer.decode([ListQuery?]?.self, forKey: .listQueries)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension QueryInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryInstanceResultCodingKeys.self)
        try encoderContainer.encode(listQueries, forKey: .listQueries)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  提供可续费的实例信息查询。
public class QueryInstanceRequest:JdCloudRequest
{
    /// QueryInstanceParam
    var queryInstanceParam:QueryInstanceParam


    public init(regionId: String,queryInstanceParam:QueryInstanceParam){
        self.queryInstanceParam = queryInstanceParam
        super.init(regionId: regionId)
    }


    enum QueryInstanceRequestRequestCodingKeys: String, CodingKey {
        case queryInstanceParam
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(queryInstanceParam, forKey: .queryInstanceParam)

    }
}

/// 为一个或多个实例设置自动续费服务。 
public class SetRenewalResult:NSObject,JdCloudResult
{
    /// 设置成功条数
    var stringResult:String?



    public override init(){
        super.init()
    }

    enum SetRenewalResultCodingKeys: String, CodingKey {
        case stringResult
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetRenewalResultCodingKeys.self)
        if decoderContainer.contains(.stringResult)
        {
            self.stringResult = try decoderContainer.decode(String?.self, forKey: .stringResult)
        }
    }
}
public extension SetRenewalResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetRenewalResultCodingKeys.self)
        try encoderContainer.encode(stringResult, forKey: .stringResult)
    }
}
public class RenewInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RenewInstanceResult?;

    enum RenewInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RenewInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RenewInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension RenewInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RenewInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class SetRenewalResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetRenewalResult?;

    enum SetRenewalResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetRenewalResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetRenewalResult?.self, forKey: .result) ?? nil
    }
}

public extension SetRenewalResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetRenewalResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class QueryInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryInstanceResult?;

    enum QueryInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 对相关实例进行续费。调用该接口会创建一个续费订单，并自动扣除您账户可用代金券和余额完成支付，如因为某些原因支付失败，订单会自动取消。 
public class RenewInstanceResult:NSObject,JdCloudResult
{
    /// 创建成功的订单ID
    var orderNumber:String?



    public override init(){
        super.init()
    }

    enum RenewInstanceResultCodingKeys: String, CodingKey {
        case orderNumber
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RenewInstanceResultCodingKeys.self)
        if decoderContainer.contains(.orderNumber)
        {
            self.orderNumber = try decoderContainer.decode(String?.self, forKey: .orderNumber)
        }
    }
}
public extension RenewInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RenewInstanceResultCodingKeys.self)
        try encoderContainer.encode(orderNumber, forKey: .orderNumber)
    }
}

///  对相关实例进行续费。调用该接口会创建一个续费订单，并自动扣除您账户可用代金券和余额完成支付，如因为某些原因支付失败，订单会自动取消。
public class RenewInstanceRequest:JdCloudRequest
{
    /// RenewInstanceParam
    var renewInstanceParam:RenewInstanceParam


    public init(regionId: String,renewInstanceParam:RenewInstanceParam){
        self.renewInstanceParam = renewInstanceParam
        super.init(regionId: regionId)
    }


    enum RenewInstanceRequestRequestCodingKeys: String, CodingKey {
        case renewInstanceParam
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RenewInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(renewInstanceParam, forKey: .renewInstanceParam)

    }
}

