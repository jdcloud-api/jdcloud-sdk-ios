/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  queryInstanceParam
@objc(QueryInstanceParam)
public class QueryInstanceParam:NSObject,Codable{
    /// 业务线
    /// Required:true
    var appCode:String
    /// 产品线
    /// Required:true
    var serviceCode:String
    /// 当前页码
    var pageNumber:Int?
    /// 每页条数
    var pageSize:Int?
    /// 资源续费状态 0:手动续费资源 1:全部资源 2:自动续费资源,默认全部
    var renewStatus:Int?
    /// 到期时间 0:已过期,n:n天内到期,-1:全部,-2:未到期,默认全部
    var expireTime:String?
    /// 资源名称
    var instanceName:String?
    /// 资源ID
    var instanceId:String?
    /// 资源计费类型 1:按配置,3:包年包月,默认不筛选
    var billingType:String?



    public  init(appCode:String,serviceCode:String){
             self.appCode = appCode
             self.serviceCode = serviceCode
    }

    enum QueryInstanceParamCodingKeys: String, CodingKey {
        case appCode
        case serviceCode
        case pageNumber
        case pageSize
        case renewStatus
        case expireTime
        case instanceName
        case instanceId
        case billingType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryInstanceParamCodingKeys.self)
        self.appCode = try decoderContainer.decode(String.self, forKey: .appCode)
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.renewStatus)
        {
            self.renewStatus = try decoderContainer.decode(Int?.self, forKey: .renewStatus)
        }
        if decoderContainer.contains(.expireTime)
        {
            self.expireTime = try decoderContainer.decode(String?.self, forKey: .expireTime)
        }
        if decoderContainer.contains(.instanceName)
        {
            self.instanceName = try decoderContainer.decode(String?.self, forKey: .instanceName)
        }
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(String?.self, forKey: .billingType)
        }
    }
}
public extension QueryInstanceParam{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryInstanceParamCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(pageNumber, forKey: .pageNumber)
         try encoderContainer.encode(pageSize, forKey: .pageSize)
         try encoderContainer.encode(renewStatus, forKey: .renewStatus)
         try encoderContainer.encode(expireTime, forKey: .expireTime)
         try encoderContainer.encode(instanceName, forKey: .instanceName)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
         try encoderContainer.encode(billingType, forKey: .billingType)
    }
}
