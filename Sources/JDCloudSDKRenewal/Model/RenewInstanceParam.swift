/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  renewInstanceParam
@objc(RenewInstanceParam)
public class RenewInstanceParam:NSObject,Codable{
    /// 业务线
    /// Required:true
    var appCode:String
    /// 产品线
    /// Required:true
    var serviceCode:String
    /// 续费时长(timeUnit&#x3D;MONTH时只能传1、2、3、4、5、6、7、8、9,timeUnit&#x3D;YEAR时只能传1、2、3)
    /// Required:true
    var timeSpan:Int
    /// 时间单位(MONTH-月,YEAR-年)
    /// Required:true
    var timeUnit:String
    /// 待续费资源ID列表,英文逗号分隔
    /// Required:true
    var instanceIds:String
    /// 续费至统一续费到期日(YES-是,NO-否)
    var unifyDate:String?
    /// 是否自动支付
    var autoPay:Bool?
    /// 支付成功后的回调地址
    var returnURL:String?



    public  init(appCode:String,serviceCode:String,timeSpan:Int,timeUnit:String,instanceIds:String){
             self.appCode = appCode
             self.serviceCode = serviceCode
             self.timeSpan = timeSpan
             self.timeUnit = timeUnit
             self.instanceIds = instanceIds
    }

    enum RenewInstanceParamCodingKeys: String, CodingKey {
        case appCode
        case serviceCode
        case timeSpan
        case timeUnit
        case instanceIds
        case unifyDate
        case autoPay
        case returnURL
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RenewInstanceParamCodingKeys.self)
        self.appCode = try decoderContainer.decode(String.self, forKey: .appCode)
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
        self.timeSpan = try decoderContainer.decode(Int.self, forKey: .timeSpan)
        self.timeUnit = try decoderContainer.decode(String.self, forKey: .timeUnit)
        self.instanceIds = try decoderContainer.decode(String.self, forKey: .instanceIds)
        if decoderContainer.contains(.unifyDate)
        {
            self.unifyDate = try decoderContainer.decode(String?.self, forKey: .unifyDate)
        }
        if decoderContainer.contains(.autoPay)
        {
            self.autoPay = try decoderContainer.decode(Bool?.self, forKey: .autoPay)
        }
        if decoderContainer.contains(.returnURL)
        {
            self.returnURL = try decoderContainer.decode(String?.self, forKey: .returnURL)
        }
    }
}
public extension RenewInstanceParam{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RenewInstanceParamCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(timeSpan, forKey: .timeSpan)
         try encoderContainer.encode(timeUnit, forKey: .timeUnit)
         try encoderContainer.encode(instanceIds, forKey: .instanceIds)
         try encoderContainer.encode(unifyDate, forKey: .unifyDate)
         try encoderContainer.encode(autoPay, forKey: .autoPay)
         try encoderContainer.encode(returnURL, forKey: .returnURL)
    }
}
