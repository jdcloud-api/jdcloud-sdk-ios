/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  queryExpiredResourceParam
@objc(QueryExpiredResourceParam)
public class QueryExpiredResourceParam:NSObject,Codable{
    /// 地域：不传时获取全部
    /// Required:true
    var region:String
    /// 产品线：多个用逗号分隔
    /// Required:true
    var serviceCodes:String
    /// 到期类型：大于0-订单还有几天到期; 等于0-订单已经到期; 小于0-全部
    /// Required:true
    var expireType:Int
    /// 当前页码
    var pageIndex:Int?
    /// 每页条数
    var pageSize:Int?



    public  init(region:String,serviceCodes:String,expireType:Int){
             self.region = region
             self.serviceCodes = serviceCodes
             self.expireType = expireType
    }

    enum QueryExpiredResourceParamCodingKeys: String, CodingKey {
        case region
        case serviceCodes
        case expireType
        case pageIndex
        case pageSize
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryExpiredResourceParamCodingKeys.self)
        self.region = try decoderContainer.decode(String.self, forKey: .region)
        self.serviceCodes = try decoderContainer.decode(String.self, forKey: .serviceCodes)
        self.expireType = try decoderContainer.decode(Int.self, forKey: .expireType)
        if decoderContainer.contains(.pageIndex)
        {
            self.pageIndex = try decoderContainer.decode(Int?.self, forKey: .pageIndex)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
    }
}
public extension QueryExpiredResourceParam{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryExpiredResourceParamCodingKeys.self)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(serviceCodes, forKey: .serviceCodes)
         try encoderContainer.encode(expireType, forKey: .expireType)
         try encoderContainer.encode(pageIndex, forKey: .pageIndex)
         try encoderContainer.encode(pageSize, forKey: .pageSize)
    }
}
