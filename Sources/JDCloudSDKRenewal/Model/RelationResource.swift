/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  relationResource
@objc(RelationResource)
public class RelationResource:NSObject,Codable{
    /// 资源ID
    var resourceId:String?
    /// 资源名称
    var resourceName:String?
    /// 产品线
    var serviceCode:String?
    /// 计费类型
    var billingType:Int?
    /// 到期时间
    var expireTime:String?
    /// 地域
    var dataCenter:String?
    /// 是否开通自动续费(0:未开通,1:已开通)
    var autoRenew:Int?
    /// 倒计时
    var lastTime:Int?
    /// 关联资源特殊需求
    var remark:String?



    public override init(){
            super.init()
    }

    enum RelationResourceCodingKeys: String, CodingKey {
        case resourceId
        case resourceName
        case serviceCode
        case billingType
        case expireTime
        case dataCenter
        case autoRenew
        case lastTime
        case remark
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RelationResourceCodingKeys.self)
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.resourceName)
        {
            self.resourceName = try decoderContainer.decode(String?.self, forKey: .resourceName)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(Int?.self, forKey: .billingType)
        }
        if decoderContainer.contains(.expireTime)
        {
            self.expireTime = try decoderContainer.decode(String?.self, forKey: .expireTime)
        }
        if decoderContainer.contains(.dataCenter)
        {
            self.dataCenter = try decoderContainer.decode(String?.self, forKey: .dataCenter)
        }
        if decoderContainer.contains(.autoRenew)
        {
            self.autoRenew = try decoderContainer.decode(Int?.self, forKey: .autoRenew)
        }
        if decoderContainer.contains(.lastTime)
        {
            self.lastTime = try decoderContainer.decode(Int?.self, forKey: .lastTime)
        }
        if decoderContainer.contains(.remark)
        {
            self.remark = try decoderContainer.decode(String?.self, forKey: .remark)
        }
    }
}
public extension RelationResource{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RelationResourceCodingKeys.self)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(resourceName, forKey: .resourceName)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(billingType, forKey: .billingType)
         try encoderContainer.encode(expireTime, forKey: .expireTime)
         try encoderContainer.encode(dataCenter, forKey: .dataCenter)
         try encoderContainer.encode(autoRenew, forKey: .autoRenew)
         try encoderContainer.encode(lastTime, forKey: .lastTime)
         try encoderContainer.encode(remark, forKey: .remark)
    }
}
