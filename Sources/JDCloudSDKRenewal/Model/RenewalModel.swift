/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Renew Management APIs
   续费管理相关接口

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
///  setExpiredRenewParam
public class SetExpiredRenewParam:NSObject,Codable{
    /// 业务线-必传
    /// Required:true
    var appCode:String
    /// 产品线-必传
    /// Required:true
    var serviceCode:String
    /// 地域-必传
    /// Required:true
    var region:String
    /// 资源id列表，英文逗号分隔-必传
    /// Required:true
    var resourceIds:String
    /// 过期资源续费状态-必传：YES-续费；NO-不续费
    /// Required:true
    var renewStatus:String
    /// 绑定资源过期续费状态-必传：YES-续费；NO-不续费
    var relationStatus:String?



    public  init(appCode:String,serviceCode:String,region:String,resourceIds:String,renewStatus:String){
             self.appCode = appCode
             self.serviceCode = serviceCode
             self.region = region
             self.resourceIds = resourceIds
             self.renewStatus = renewStatus
    }

    enum SetExpiredRenewParamCodingKeys: String, CodingKey {
        case appCode
        case serviceCode
        case region
        case resourceIds
        case renewStatus
        case relationStatus
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetExpiredRenewParamCodingKeys.self)
        self.appCode = try decoderContainer.decode(String.self, forKey: .appCode)
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
        self.region = try decoderContainer.decode(String.self, forKey: .region)
        self.resourceIds = try decoderContainer.decode(String.self, forKey: .resourceIds)
        self.renewStatus = try decoderContainer.decode(String.self, forKey: .renewStatus)
        if decoderContainer.contains(.relationStatus)
        {
            self.relationStatus = try decoderContainer.decode(String?.self, forKey: .relationStatus)
        }
    }
}
public extension SetExpiredRenewParam{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetExpiredRenewParamCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(resourceIds, forKey: .resourceIds)
         try encoderContainer.encode(renewStatus, forKey: .renewStatus)
         try encoderContainer.encode(relationStatus, forKey: .relationStatus)
    }
}
///  renewInstanceParam
public class RenewInstanceParam:NSObject,Codable{
    /// 业务线
    /// Required:true
    var appCode:String
    /// 产品线
    /// Required:true
    var serviceCode:String
    /// 续费时长(timeUnit&#x3D;MONTH时只能传1、2、3、4、5、6、7、8、9,timeUnit&#x3D;YEAR时只能传1、2、3)
    /// Required:true
    var timeSpan:Int
    /// 时间单位(MONTH-月,YEAR-年)
    /// Required:true
    var timeUnit:String
    /// 待续费资源ID列表,英文逗号分隔
    /// Required:true
    var instanceIds:String
    /// 是否统一到期日续费(YES-是,NO-否)，默认为NO
    var unifyDate:String?
    /// 是否自动支付，默认为true，外部用户调用时只能传true
    var autoPay:Bool?
    /// 支付成功后的回调地址
    var returnURL:String?



    public  init(appCode:String,serviceCode:String,timeSpan:Int,timeUnit:String,instanceIds:String){
             self.appCode = appCode
             self.serviceCode = serviceCode
             self.timeSpan = timeSpan
             self.timeUnit = timeUnit
             self.instanceIds = instanceIds
    }

    enum RenewInstanceParamCodingKeys: String, CodingKey {
        case appCode
        case serviceCode
        case timeSpan
        case timeUnit
        case instanceIds
        case unifyDate
        case autoPay
        case returnURL
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RenewInstanceParamCodingKeys.self)
        self.appCode = try decoderContainer.decode(String.self, forKey: .appCode)
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
        self.timeSpan = try decoderContainer.decode(Int.self, forKey: .timeSpan)
        self.timeUnit = try decoderContainer.decode(String.self, forKey: .timeUnit)
        self.instanceIds = try decoderContainer.decode(String.self, forKey: .instanceIds)
        if decoderContainer.contains(.unifyDate)
        {
            self.unifyDate = try decoderContainer.decode(String?.self, forKey: .unifyDate)
        }
        if decoderContainer.contains(.autoPay)
        {
            self.autoPay = try decoderContainer.decode(Bool?.self, forKey: .autoPay)
        }
        if decoderContainer.contains(.returnURL)
        {
            self.returnURL = try decoderContainer.decode(String?.self, forKey: .returnURL)
        }
    }
}
public extension RenewInstanceParam{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RenewInstanceParamCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(timeSpan, forKey: .timeSpan)
         try encoderContainer.encode(timeUnit, forKey: .timeUnit)
         try encoderContainer.encode(instanceIds, forKey: .instanceIds)
         try encoderContainer.encode(unifyDate, forKey: .unifyDate)
         try encoderContainer.encode(autoPay, forKey: .autoPay)
         try encoderContainer.encode(returnURL, forKey: .returnURL)
    }
}
///  queryExpiredResourceResultVo
public class QueryExpiredResourceResultVo:NSObject,Codable{
    /// 资源Id
    var resourceId:String?
    /// 资源名称
    var resourceName:String?
    /// 产品线
    var serviceCode:String?
    /// 业务线
    var appCode:String?
    /// 已过期天数
    var expiredDays:Int?
    /// 资源所在区域
    var regionId:String?
    /// 计费类型
    var billingType:Int?



    public override init(){
            super.init()
    }

    enum QueryExpiredResourceResultVoCodingKeys: String, CodingKey {
        case resourceId
        case resourceName
        case serviceCode
        case appCode
        case expiredDays
        case regionId
        case billingType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryExpiredResourceResultVoCodingKeys.self)
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.resourceName)
        {
            self.resourceName = try decoderContainer.decode(String?.self, forKey: .resourceName)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.expiredDays)
        {
            self.expiredDays = try decoderContainer.decode(Int?.self, forKey: .expiredDays)
        }
        if decoderContainer.contains(.regionId)
        {
            self.regionId = try decoderContainer.decode(String?.self, forKey: .regionId)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(Int?.self, forKey: .billingType)
        }
    }
}
public extension QueryExpiredResourceResultVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryExpiredResourceResultVoCodingKeys.self)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(resourceName, forKey: .resourceName)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(expiredDays, forKey: .expiredDays)
         try encoderContainer.encode(regionId, forKey: .regionId)
         try encoderContainer.encode(billingType, forKey: .billingType)
    }
}
///  queryInstanceParam
public class QueryInstanceParam:NSObject,Codable{
    /// 业务线
    /// Required:true
    var appCode:String
    /// 产品线
    /// Required:true
    var serviceCode:String
    /// 资源名称
    var instanceName:String?
    /// 资源ID
    var instanceId:String?
    /// 资源续费状态(AUTO-开通自动续费资源,MANUAL-未开通自动续费资源,ALL-全部资源)，默认为全部
    var renewStatus:String?
    /// 资源计费类型(CONFIG-按配置,FLOW-按用量,MONTHLY-包年包月)，不传显示全部计费类型的资源
    var billingType:String?
    /// 资源到期类型(EXPIRED-已到期,UNEXPIRED-未到期,ONE-1天内到期,THREE-3天内到期,SEVEN-7天内到期,ALL_TIME-全部)，默认为全部
    var expireType:String?
    /// 主机绑定的内网IP地址
    var ipAddress:String?
    /// 当前页码，不传默认为1
    var pageNumber:Int?
    /// 每页条数，不传默认为10
    var pageSize:Int?



    public  init(appCode:String,serviceCode:String){
             self.appCode = appCode
             self.serviceCode = serviceCode
    }

    enum QueryInstanceParamCodingKeys: String, CodingKey {
        case appCode
        case serviceCode
        case instanceName
        case instanceId
        case renewStatus
        case billingType
        case expireType
        case ipAddress
        case pageNumber
        case pageSize
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryInstanceParamCodingKeys.self)
        self.appCode = try decoderContainer.decode(String.self, forKey: .appCode)
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
        if decoderContainer.contains(.instanceName)
        {
            self.instanceName = try decoderContainer.decode(String?.self, forKey: .instanceName)
        }
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.renewStatus)
        {
            self.renewStatus = try decoderContainer.decode(String?.self, forKey: .renewStatus)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(String?.self, forKey: .billingType)
        }
        if decoderContainer.contains(.expireType)
        {
            self.expireType = try decoderContainer.decode(String?.self, forKey: .expireType)
        }
        if decoderContainer.contains(.ipAddress)
        {
            self.ipAddress = try decoderContainer.decode(String?.self, forKey: .ipAddress)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
    }
}
public extension QueryInstanceParam{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryInstanceParamCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(instanceName, forKey: .instanceName)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
         try encoderContainer.encode(renewStatus, forKey: .renewStatus)
         try encoderContainer.encode(billingType, forKey: .billingType)
         try encoderContainer.encode(expireType, forKey: .expireType)
         try encoderContainer.encode(ipAddress, forKey: .ipAddress)
         try encoderContainer.encode(pageNumber, forKey: .pageNumber)
         try encoderContainer.encode(pageSize, forKey: .pageSize)
    }
}
///  resourceMapResult
public class ResourceMapResult:NSObject,Codable{
    /// 产品线
    var serviceCode:String?
    /// 该产品线的已过期资源信息
    var resourceList:[QueryExpiredResourceResultVo?]?
    /// 该产品线的已过期资源总数
    var totalNumber:Int?
    /// 该产品线的已过期资源ID信息
    var resourceIdList:[String?]?



    public override init(){
            super.init()
    }

    enum ResourceMapResultCodingKeys: String, CodingKey {
        case serviceCode
        case resourceList
        case totalNumber
        case resourceIdList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResourceMapResultCodingKeys.self)
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.resourceList)
        {
            self.resourceList = try decoderContainer.decode([QueryExpiredResourceResultVo?]?.self, forKey: .resourceList)
        }
        if decoderContainer.contains(.totalNumber)
        {
            self.totalNumber = try decoderContainer.decode(Int?.self, forKey: .totalNumber)
        }
        if decoderContainer.contains(.resourceIdList)
        {
            self.resourceIdList = try decoderContainer.decode([String?]?.self, forKey: .resourceIdList)
        }
    }
}
public extension ResourceMapResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResourceMapResultCodingKeys.self)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(resourceList, forKey: .resourceList)
         try encoderContainer.encode(totalNumber, forKey: .totalNumber)
         try encoderContainer.encode(resourceIdList, forKey: .resourceIdList)
    }
}
///  setRenewalParam
public class SetRenewalParam:NSObject,Codable{
    /// 业务线
    /// Required:true
    var appCode:String
    /// 产品线
    /// Required:true
    var serviceCode:String
    /// 续费时长
    var timeSpan:Int?
    /// 时间单位(MONTH-月,YEAR-年)
    var timeUnit:String?
    /// 资源ID列表,英文逗号分隔
    /// Required:true
    var instanceIds:String
    /// 自动续费状态(OPEN-开通自动续费,CLOSE-关闭自动续费,MODIFY-修改自动续费)
    /// Required:true
    var autoRenewStatus:String
    /// 是否绑定关联资源一并开通自动续费(UNBIND：不绑定，BIND：绑定)
    var allAutoPay:String?



    public  init(appCode:String,serviceCode:String,instanceIds:String,autoRenewStatus:String){
             self.appCode = appCode
             self.serviceCode = serviceCode
             self.instanceIds = instanceIds
             self.autoRenewStatus = autoRenewStatus
    }

    enum SetRenewalParamCodingKeys: String, CodingKey {
        case appCode
        case serviceCode
        case timeSpan
        case timeUnit
        case instanceIds
        case autoRenewStatus
        case allAutoPay
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetRenewalParamCodingKeys.self)
        self.appCode = try decoderContainer.decode(String.self, forKey: .appCode)
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
        if decoderContainer.contains(.timeSpan)
        {
            self.timeSpan = try decoderContainer.decode(Int?.self, forKey: .timeSpan)
        }
        if decoderContainer.contains(.timeUnit)
        {
            self.timeUnit = try decoderContainer.decode(String?.self, forKey: .timeUnit)
        }
        self.instanceIds = try decoderContainer.decode(String.self, forKey: .instanceIds)
        self.autoRenewStatus = try decoderContainer.decode(String.self, forKey: .autoRenewStatus)
        if decoderContainer.contains(.allAutoPay)
        {
            self.allAutoPay = try decoderContainer.decode(String?.self, forKey: .allAutoPay)
        }
    }
}
public extension SetRenewalParam{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetRenewalParamCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(timeSpan, forKey: .timeSpan)
         try encoderContainer.encode(timeUnit, forKey: .timeUnit)
         try encoderContainer.encode(instanceIds, forKey: .instanceIds)
         try encoderContainer.encode(autoRenewStatus, forKey: .autoRenewStatus)
         try encoderContainer.encode(allAutoPay, forKey: .allAutoPay)
    }
}
///  listQuery
public class ListQuery:NSObject,Codable{
    /// 业务线
    var appCode:String?
    /// 产品线
    var serviceCode:String?
    /// 资源ID
    var resourceId:String?
    /// 资源名称
    var resourceName:String?
    /// 地域
    var region:String?
    /// 资源计费类型(CONFIG-按配置,FLOW-按用量,MONTHLY-包年包月)
    var billingType:String?
    /// 资源到期时间
    var expireTime:String?
    /// 倒计时
    var lastTime:Int?
    /// 开通自动续费状态(UNOPENED-未开通,OPENED-已开通)
    var autoRenewStatus:String?
    /// 自动续费周期，单位为月
    var autoRenewPeriod:String?
    /// 是否绑定关联资源一并开通自动续费(AUTO_RENEW:关联包年包月资源一并自动续费 UN_AUTO_RENEW：关联包年包月资源不自动续费)
    var associateResource:String?
    /// 扩展字段，包括数据库类型、资源特殊说明等
    var extendField:String?
    /// 绑定资源列表
    var relationList:[RelationResource?]?



    public override init(){
            super.init()
    }

    enum ListQueryCodingKeys: String, CodingKey {
        case appCode
        case serviceCode
        case resourceId
        case resourceName
        case region
        case billingType
        case expireTime
        case lastTime
        case autoRenewStatus
        case autoRenewPeriod
        case associateResource
        case extendField
        case relationList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListQueryCodingKeys.self)
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.resourceName)
        {
            self.resourceName = try decoderContainer.decode(String?.self, forKey: .resourceName)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(String?.self, forKey: .billingType)
        }
        if decoderContainer.contains(.expireTime)
        {
            self.expireTime = try decoderContainer.decode(String?.self, forKey: .expireTime)
        }
        if decoderContainer.contains(.lastTime)
        {
            self.lastTime = try decoderContainer.decode(Int?.self, forKey: .lastTime)
        }
        if decoderContainer.contains(.autoRenewStatus)
        {
            self.autoRenewStatus = try decoderContainer.decode(String?.self, forKey: .autoRenewStatus)
        }
        if decoderContainer.contains(.autoRenewPeriod)
        {
            self.autoRenewPeriod = try decoderContainer.decode(String?.self, forKey: .autoRenewPeriod)
        }
        if decoderContainer.contains(.associateResource)
        {
            self.associateResource = try decoderContainer.decode(String?.self, forKey: .associateResource)
        }
        if decoderContainer.contains(.extendField)
        {
            self.extendField = try decoderContainer.decode(String?.self, forKey: .extendField)
        }
        if decoderContainer.contains(.relationList)
        {
            self.relationList = try decoderContainer.decode([RelationResource?]?.self, forKey: .relationList)
        }
    }
}
public extension ListQuery{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListQueryCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(resourceName, forKey: .resourceName)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(billingType, forKey: .billingType)
         try encoderContainer.encode(expireTime, forKey: .expireTime)
         try encoderContainer.encode(lastTime, forKey: .lastTime)
         try encoderContainer.encode(autoRenewStatus, forKey: .autoRenewStatus)
         try encoderContainer.encode(autoRenewPeriod, forKey: .autoRenewPeriod)
         try encoderContainer.encode(associateResource, forKey: .associateResource)
         try encoderContainer.encode(extendField, forKey: .extendField)
         try encoderContainer.encode(relationList, forKey: .relationList)
    }
}
///  queryExpiredResourceParam
public class QueryExpiredResourceParam:NSObject,Codable{
    /// 地域：不传时获取全部
    /// Required:true
    var region:String
    /// 产品线：多个用逗号分隔
    /// Required:true
    var serviceCodes:String
    /// 到期类型：大于0-订单还有几天到期; 等于0-订单已经到期; 小于0-全部
    /// Required:true
    var expireType:Int
    /// 当前页码
    var pageIndex:Int?
    /// 每页条数
    var pageSize:Int?



    public  init(region:String,serviceCodes:String,expireType:Int){
             self.region = region
             self.serviceCodes = serviceCodes
             self.expireType = expireType
    }

    enum QueryExpiredResourceParamCodingKeys: String, CodingKey {
        case region
        case serviceCodes
        case expireType
        case pageIndex
        case pageSize
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryExpiredResourceParamCodingKeys.self)
        self.region = try decoderContainer.decode(String.self, forKey: .region)
        self.serviceCodes = try decoderContainer.decode(String.self, forKey: .serviceCodes)
        self.expireType = try decoderContainer.decode(Int.self, forKey: .expireType)
        if decoderContainer.contains(.pageIndex)
        {
            self.pageIndex = try decoderContainer.decode(Int?.self, forKey: .pageIndex)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
    }
}
public extension QueryExpiredResourceParam{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryExpiredResourceParamCodingKeys.self)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(serviceCodes, forKey: .serviceCodes)
         try encoderContainer.encode(expireType, forKey: .expireType)
         try encoderContainer.encode(pageIndex, forKey: .pageIndex)
         try encoderContainer.encode(pageSize, forKey: .pageSize)
    }
}
///  relationResource
public class RelationResource:NSObject,Codable{
    /// 业务线
    var appCode:String?
    /// 产品线
    var serviceCode:String?
    /// 资源ID
    var resourceId:String?
    /// 资源名称
    var resourceName:String?
    /// 地域
    var region:String?
    /// 资源计费类型(CONFIG-按配置,FLOW-按用量,MONTHLY-包年包月)
    var billingType:String?
    /// 资源到期时间
    var expireTime:String?
    /// 倒计时
    var lastTime:Int?
    /// 开通自动续费状态(UNOPENED-未开通,OPENED-已开通)
    var autoRenewStatus:String?
    /// 扩展字段，包括数据库类型、资源特殊说明等
    var extendField:String?



    public override init(){
            super.init()
    }

    enum RelationResourceCodingKeys: String, CodingKey {
        case appCode
        case serviceCode
        case resourceId
        case resourceName
        case region
        case billingType
        case expireTime
        case lastTime
        case autoRenewStatus
        case extendField
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RelationResourceCodingKeys.self)
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.resourceName)
        {
            self.resourceName = try decoderContainer.decode(String?.self, forKey: .resourceName)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(String?.self, forKey: .billingType)
        }
        if decoderContainer.contains(.expireTime)
        {
            self.expireTime = try decoderContainer.decode(String?.self, forKey: .expireTime)
        }
        if decoderContainer.contains(.lastTime)
        {
            self.lastTime = try decoderContainer.decode(Int?.self, forKey: .lastTime)
        }
        if decoderContainer.contains(.autoRenewStatus)
        {
            self.autoRenewStatus = try decoderContainer.decode(String?.self, forKey: .autoRenewStatus)
        }
        if decoderContainer.contains(.extendField)
        {
            self.extendField = try decoderContainer.decode(String?.self, forKey: .extendField)
        }
    }
}
public extension RelationResource{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RelationResourceCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(resourceName, forKey: .resourceName)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(billingType, forKey: .billingType)
         try encoderContainer.encode(expireTime, forKey: .expireTime)
         try encoderContainer.encode(lastTime, forKey: .lastTime)
         try encoderContainer.encode(autoRenewStatus, forKey: .autoRenewStatus)
         try encoderContainer.encode(extendField, forKey: .extendField)
    }
}
