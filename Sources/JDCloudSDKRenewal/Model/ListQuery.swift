/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  listQuery
@objc(ListQuery)
public class ListQuery:NSObject,Codable{
    /// 业务线
    var appCode:String?
    /// 产品线
    var serviceCode:String?
    /// 资源ID
    var resourceId:String?
    /// 资源名称
    var resourceName:String?
    /// 地域
    var region:String?
    /// 资源计费类型(CONFIG-按配置,FLOW-按用量,MONTHLY-包年包月)，不传显示全部资源
    var billingType:String?
    /// 资源到期时间
    var expireTime:String?
    /// 倒计时
    var lastTime:Int?
    /// 自动续费状态(UNOPENED-未开通,OPENED-已开通)
    var autoRenewStatus:String?
    /// 自动续费周期，单位为月
    var autoRenewPeriod:String?
    /// 是否绑定关联资源一并续费(BIND-是,UNBIND-否)
    var associateResource:String?
    /// 扩展字段，包括数据库类型、资源特殊说明等
    var extendField:String?
    /// 绑定资源列表
    var relationList:[RelationResource?]?



    public override init(){
            super.init()
    }

    enum ListQueryCodingKeys: String, CodingKey {
        case appCode
        case serviceCode
        case resourceId
        case resourceName
        case region
        case billingType
        case expireTime
        case lastTime
        case autoRenewStatus
        case autoRenewPeriod
        case associateResource
        case extendField
        case relationList
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListQueryCodingKeys.self)
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.resourceName)
        {
            self.resourceName = try decoderContainer.decode(String?.self, forKey: .resourceName)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(String?.self, forKey: .billingType)
        }
        if decoderContainer.contains(.expireTime)
        {
            self.expireTime = try decoderContainer.decode(String?.self, forKey: .expireTime)
        }
        if decoderContainer.contains(.lastTime)
        {
            self.lastTime = try decoderContainer.decode(Int?.self, forKey: .lastTime)
        }
        if decoderContainer.contains(.autoRenewStatus)
        {
            self.autoRenewStatus = try decoderContainer.decode(String?.self, forKey: .autoRenewStatus)
        }
        if decoderContainer.contains(.autoRenewPeriod)
        {
            self.autoRenewPeriod = try decoderContainer.decode(String?.self, forKey: .autoRenewPeriod)
        }
        if decoderContainer.contains(.associateResource)
        {
            self.associateResource = try decoderContainer.decode(String?.self, forKey: .associateResource)
        }
        if decoderContainer.contains(.extendField)
        {
            self.extendField = try decoderContainer.decode(String?.self, forKey: .extendField)
        }
        if decoderContainer.contains(.relationList)
        {
            self.relationList = try decoderContainer.decode([RelationResource?]?.self, forKey: .relationList)
        }
    }
}
public extension ListQuery{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListQueryCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(resourceName, forKey: .resourceName)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(billingType, forKey: .billingType)
         try encoderContainer.encode(expireTime, forKey: .expireTime)
         try encoderContainer.encode(lastTime, forKey: .lastTime)
         try encoderContainer.encode(autoRenewStatus, forKey: .autoRenewStatus)
         try encoderContainer.encode(autoRenewPeriod, forKey: .autoRenewPeriod)
         try encoderContainer.encode(associateResource, forKey: .associateResource)
         try encoderContainer.encode(extendField, forKey: .extendField)
         try encoderContainer.encode(relationList, forKey: .relationList)
    }
}
