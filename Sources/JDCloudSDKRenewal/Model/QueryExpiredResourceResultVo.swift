/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  queryExpiredResourceResultVo
@objc(QueryExpiredResourceResultVo)
public class QueryExpiredResourceResultVo:NSObject,Codable{
    /// 资源Id
    var resourceId:String?
    /// 资源名称
    var resourceName:String?
    /// 产品线
    var serviceCode:String?
    /// 业务线
    var appCode:String?
    /// 已过期天数
    var expiredDays:Int?
    /// 资源所在区域
    var regionId:String?
    /// 计费类型
    var billingType:Int?



    public override init(){
            super.init()
    }

    enum QueryExpiredResourceResultVoCodingKeys: String, CodingKey {
        case resourceId
        case resourceName
        case serviceCode
        case appCode
        case expiredDays
        case regionId
        case billingType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryExpiredResourceResultVoCodingKeys.self)
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.resourceName)
        {
            self.resourceName = try decoderContainer.decode(String?.self, forKey: .resourceName)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.expiredDays)
        {
            self.expiredDays = try decoderContainer.decode(Int?.self, forKey: .expiredDays)
        }
        if decoderContainer.contains(.regionId)
        {
            self.regionId = try decoderContainer.decode(String?.self, forKey: .regionId)
        }
        if decoderContainer.contains(.billingType)
        {
            self.billingType = try decoderContainer.decode(Int?.self, forKey: .billingType)
        }
    }
}
public extension QueryExpiredResourceResultVo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryExpiredResourceResultVoCodingKeys.self)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(resourceName, forKey: .resourceName)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(expiredDays, forKey: .expiredDays)
         try encoderContainer.encode(regionId, forKey: .regionId)
         try encoderContainer.encode(billingType, forKey: .billingType)
    }
}
