/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   yunding-datapush
   云鼎数据推送OPENAPI接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  查询已经开通的用户
public class DescribeDatapushVendersRequest:JdCloudRequest
{
    /// appkey
    var appkey:String

    /// 页码
    var pageNumber:Int?

    /// 页大小
    var pageSize:Int?

    /// 云鼎数据库实例ID
    var ydRdsInstanceId:String?

    /// 数据库实例名称
    var rdsInstanceName:String?

    /// 商家ID
    var venderId:String?

    /// 商家店铺名称
    var venderName:String?


    public init(regionId: String,appkey:String){
        self.appkey = appkey
        super.init(regionId: regionId)
    }


    enum DescribeDatapushVendersRequestRequestCodingKeys: String, CodingKey {
        case appkey
        case pageNumber
        case pageSize
        case ydRdsInstanceId
        case rdsInstanceName
        case venderId
        case venderName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDatapushVendersRequestRequestCodingKeys.self)
        try encoderContainer.encode(appkey, forKey: .appkey)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(ydRdsInstanceId, forKey: .ydRdsInstanceId)
        try encoderContainer.encode(rdsInstanceName, forKey: .rdsInstanceName)
        try encoderContainer.encode(venderId, forKey: .venderId)
        try encoderContainer.encode(venderName, forKey: .venderName)

    }
}

/// 添加数据推送用户 
public class AddDatapushVenderResult:NSObject,JdCloudResult
{
}
public class DescribeDatapushVendersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeDatapushVendersResult?;

    enum DescribeDatapushVendersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDatapushVendersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeDatapushVendersResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeDatapushVendersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDatapushVendersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  添加数据推送用户
public class AddDatapushVenderRequest:JdCloudRequest
{
    /// 添加/删除数据推送用户对象
      /// 
    var datapushVender:Vender


    public init(regionId: String,datapushVender:Vender){
        self.datapushVender = datapushVender
        super.init(regionId: regionId)
    }


    enum AddDatapushVenderRequestRequestCodingKeys: String, CodingKey {
        case datapushVender
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddDatapushVenderRequestRequestCodingKeys.self)
        try encoderContainer.encode(datapushVender, forKey: .datapushVender)

    }
}

public class AddDatapushVenderResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AddDatapushVenderResult?;

    enum AddDatapushVenderResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AddDatapushVenderResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AddDatapushVenderResult?.self, forKey: .result) ?? nil
    }
}

public extension AddDatapushVenderResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddDatapushVenderResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询开通数据推送的数据库实例 
public class DescribeRdsInstancesResult:NSObject,JdCloudResult
{
    /// Venders
    var venders:[RdsInstance?]?



    public override init(){
        super.init()
    }

    enum DescribeRdsInstancesResultCodingKeys: String, CodingKey {
        case venders
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRdsInstancesResultCodingKeys.self)
        if decoderContainer.contains(.venders)
        {
            self.venders = try decoderContainer.decode([RdsInstance?]?.self, forKey: .venders)
        }
    }
}
public extension DescribeRdsInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRdsInstancesResultCodingKeys.self)
        try encoderContainer.encode(venders, forKey: .venders)
    }
}

///  删除数据推送用户
public class DeleteDatapushVenderRequest:JdCloudRequest
{
    /// appkey
    var appkey:String

    /// 云鼎数据库实例ID
    var ydRdsInstanceId:String

    /// 商家ID
    var venderId:String


    public init(regionId: String,appkey:String,ydRdsInstanceId:String,venderId:String){
        self.appkey = appkey
        self.ydRdsInstanceId = ydRdsInstanceId
        self.venderId = venderId
        super.init(regionId: regionId)
    }


    enum DeleteDatapushVenderRequestRequestCodingKeys: String, CodingKey {
        case appkey
        case ydRdsInstanceId
        case venderId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDatapushVenderRequestRequestCodingKeys.self)
        try encoderContainer.encode(appkey, forKey: .appkey)
        try encoderContainer.encode(ydRdsInstanceId, forKey: .ydRdsInstanceId)
        try encoderContainer.encode(venderId, forKey: .venderId)

    }
}

/// 查询已经开通的用户 
public class DescribeDatapushVendersResult:NSObject,JdCloudResult
{
    /// Venders
    var venders:[VenderShow?]?



    public override init(){
        super.init()
    }

    enum DescribeDatapushVendersResultCodingKeys: String, CodingKey {
        case venders
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeDatapushVendersResultCodingKeys.self)
        if decoderContainer.contains(.venders)
        {
            self.venders = try decoderContainer.decode([VenderShow?]?.self, forKey: .venders)
        }
    }
}
public extension DescribeDatapushVendersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeDatapushVendersResultCodingKeys.self)
        try encoderContainer.encode(venders, forKey: .venders)
    }
}

///  查询开通数据推送的数据库实例
public class DescribeRdsInstancesRequest:JdCloudRequest
{
    /// appkey
    var appkey:String


    public init(regionId: String,appkey:String){
        self.appkey = appkey
        super.init(regionId: regionId)
    }


    enum DescribeRdsInstancesRequestRequestCodingKeys: String, CodingKey {
        case appkey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRdsInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(appkey, forKey: .appkey)

    }
}

public class DeleteDatapushVenderResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteDatapushVenderResult?;

    enum DeleteDatapushVenderResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteDatapushVenderResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteDatapushVenderResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteDatapushVenderResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDatapushVenderResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除数据推送用户 
public class DeleteDatapushVenderResult:NSObject,JdCloudResult
{
}
public class DescribeRdsInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeRdsInstancesResult?;

    enum DescribeRdsInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRdsInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeRdsInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeRdsInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRdsInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
