/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Video
   视频资源管理相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 修改视频信息
@objc(UpdateVideoResult)
public class UpdateVideoResult:NSObject,JdCloudResult
{
    /// 视频ID
    var id:String?

    /// 视频名称
    var name:String?

    /// 视频描述
    var descriptionValue:String?

    /// 封面图地址
    var coverUrl:String?

    /// 视频状态。取值范围：
      ///   transcoding - 转码中
      ///   transcode_failed - 转码失败
      ///   normal - 正常
      ///   uploaded - 上传完成（未转码）
      /// 
    var status:String?

    /// 文件大小，单位为 Byte
    var fileSize:Int64?

    /// 文件MD5校验和
    var checksum:String?

    /// 视频时长
    var duration:Int64?

    /// 标签集合
    var tags:[String?]?

    /// 分类ID
    var categoryId:Int64?

    /// 分类名称
    var categoryName:String?

    /// 转码截图
    var snapshots:[Snapshot?]?

    /// 创建时间
    var createTime:String?

    /// 修改时间
    var updateTime:String?



    public override init(){
        super.init()
    }

    enum UpdateVideoResultCodingKeys: String, CodingKey {
        case id
        case name
        case descriptionValue = "description"
        case coverUrl
        case status
        case fileSize
        case checksum
        case duration
        case tags
        case categoryId
        case categoryName
        case snapshots
        case createTime
        case updateTime
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateVideoResultCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.coverUrl)
        {
            self.coverUrl = try decoderContainer.decode(String?.self, forKey: .coverUrl)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.fileSize)
        {
            self.fileSize = try decoderContainer.decode(Int64?.self, forKey: .fileSize)
        }
        if decoderContainer.contains(.checksum)
        {
            self.checksum = try decoderContainer.decode(String?.self, forKey: .checksum)
        }
        if decoderContainer.contains(.duration)
        {
            self.duration = try decoderContainer.decode(Int64?.self, forKey: .duration)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([String?]?.self, forKey: .tags)
        }
        if decoderContainer.contains(.categoryId)
        {
            self.categoryId = try decoderContainer.decode(Int64?.self, forKey: .categoryId)
        }
        if decoderContainer.contains(.categoryName)
        {
            self.categoryName = try decoderContainer.decode(String?.self, forKey: .categoryName)
        }
        if decoderContainer.contains(.snapshots)
        {
            self.snapshots = try decoderContainer.decode([Snapshot?]?.self, forKey: .snapshots)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension UpdateVideoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateVideoResultCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(coverUrl, forKey: .coverUrl)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(fileSize, forKey: .fileSize)
        try encoderContainer.encode(checksum, forKey: .checksum)
        try encoderContainer.encode(duration, forKey: .duration)
        try encoderContainer.encode(tags, forKey: .tags)
        try encoderContainer.encode(categoryId, forKey: .categoryId)
        try encoderContainer.encode(categoryName, forKey: .categoryName)
        try encoderContainer.encode(snapshots, forKey: .snapshots)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
