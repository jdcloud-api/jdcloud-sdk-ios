/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Video
   视频资源管理相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 批量删除视频，调用该接口会同时删除与指定视频相关的所有信息，包括转码任务信息、转码流数据等，同时清除云存储中相关文件资源。
@objc(BatchDeleteVideosResult)
public class BatchDeleteVideosResult:NSObject,JdCloudResult
{
    /// 删除成功的视频ID集合
    var okVideoIds:[String?]?

    /// 未找到的视频ID集合
    var notFoundVideoIds:[String?]?

    /// 删除失败的视频ID集合
    var failedVideoIds:[String?]?



    public override init(){
        super.init()
    }

    enum BatchDeleteVideosResultCodingKeys: String, CodingKey {
        case okVideoIds
        case notFoundVideoIds
        case failedVideoIds
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BatchDeleteVideosResultCodingKeys.self)
        if decoderContainer.contains(.okVideoIds)
        {
            self.okVideoIds = try decoderContainer.decode([String?]?.self, forKey: .okVideoIds)
        }
        if decoderContainer.contains(.notFoundVideoIds)
        {
            self.notFoundVideoIds = try decoderContainer.decode([String?]?.self, forKey: .notFoundVideoIds)
        }
        if decoderContainer.contains(.failedVideoIds)
        {
            self.failedVideoIds = try decoderContainer.decode([String?]?.self, forKey: .failedVideoIds)
        }
    }
}
public extension BatchDeleteVideosResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchDeleteVideosResultCodingKeys.self)
        try encoderContainer.encode(okVideoIds, forKey: .okVideoIds)
        try encoderContainer.encode(notFoundVideoIds, forKey: .notFoundVideoIds)
        try encoderContainer.encode(failedVideoIds, forKey: .failedVideoIds)
    }
}
