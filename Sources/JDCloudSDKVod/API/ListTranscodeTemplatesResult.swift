/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Transcode Template
   转码模板管理

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询转码模板列表。允许通过条件过滤查询，支持的过滤字段如下：
      ///       /// - source 模板来源。枚举值，取值范围为：
      ///       ///   - system 系统预置
      ///       ///   - custom 用户自建
      ///       /// - templateType 模板类型。枚举值，取值范围：
      ///       ///   - jdchd 京享超清
      ///       ///   - jdchs 极速转码
      ///       /// 
@objc(ListTranscodeTemplatesResult)
public class ListTranscodeTemplatesResult:NSObject,JdCloudResult
{
    /// 当前页码
    var pageNumber:Int?

    /// 每页数量
    var pageSize:Int?

    /// 查询总数
    var totalElements:Int?

    /// 总页数
    var totalPages:Int?

    /// 分页内容
    var content:[TranscodeTemplateObject?]?



    public override init(){
        super.init()
    }

    enum ListTranscodeTemplatesResultCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case totalElements
        case totalPages
        case content
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListTranscodeTemplatesResultCodingKeys.self)
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalElements)
        {
            self.totalElements = try decoderContainer.decode(Int?.self, forKey: .totalElements)
        }
        if decoderContainer.contains(.totalPages)
        {
            self.totalPages = try decoderContainer.decode(Int?.self, forKey: .totalPages)
        }
        if decoderContainer.contains(.content)
        {
            self.content = try decoderContainer.decode([TranscodeTemplateObject?]?.self, forKey: .content)
        }
    }
}
public extension ListTranscodeTemplatesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListTranscodeTemplatesResultCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalElements, forKey: .totalElements)
        try encoderContainer.encode(totalPages, forKey: .totalPages)
        try encoderContainer.encode(content, forKey: .content)
    }
}
