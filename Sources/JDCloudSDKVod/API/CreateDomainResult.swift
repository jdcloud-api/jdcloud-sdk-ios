/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Domain
   域名管理

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 添加域名
@objc(CreateDomainResult)
public class CreateDomainResult:NSObject,JdCloudResult
{
    /// 域名ID
    var id:String?

    /// 域名名称
    var name:String?

    /// 域名CNAME
    var cname:String?

    /// 域名状态。取值范围：
      ///   init - 初始状态
      ///   configuring - 配置中
      ///   normal - 正常
      ///   stopped - 已停用
      /// 
    var status:String?

    /// 域名来源。取值范围：
      ///   system - 系统生成
      ///   custom - 用户自建
      /// 
    var source:String?

    /// 是否默认域名
    var asDefault:Bool?

    /// 创建时间
    var createTime:String?

    /// 修改时间
    var updateTime:String?



    public override init(){
        super.init()
    }

    enum CreateDomainResultCodingKeys: String, CodingKey {
        case id
        case name
        case cname
        case status
        case source
        case asDefault
        case createTime
        case updateTime
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDomainResultCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.cname)
        {
            self.cname = try decoderContainer.decode(String?.self, forKey: .cname)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.source)
        {
            self.source = try decoderContainer.decode(String?.self, forKey: .source)
        }
        if decoderContainer.contains(.asDefault)
        {
            self.asDefault = try decoderContainer.decode(Bool?.self, forKey: .asDefault)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension CreateDomainResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDomainResultCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(cname, forKey: .cname)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(source, forKey: .source)
        try encoderContainer.encode(asDefault, forKey: .asDefault)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
