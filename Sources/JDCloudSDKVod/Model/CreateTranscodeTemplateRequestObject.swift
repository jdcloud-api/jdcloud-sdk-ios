/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Transcode Template
   转码模板管理

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  创建转码模板请求信息
@objc(CreateTranscodeTemplateRequestObject)
public class CreateTranscodeTemplateRequestObject:NSObject,Codable{
    /// 模板名称
    /// Required:true
    var name:String
    /// 视频参数配置
    /// Required:true
    var video:Video
    /// 音频参数配置
    /// Required:true
    var audio:Audio
    /// 封装配置
    /// Required:true
    var encapsulation:Encapsulation
    /// 清晰度规格标记。取值范围：
      ///   SD - 标清
      ///   HD - 高清
      ///   FHD - 超清
      ///   2K
      ///   4K
      /// 
    /// Required:true
    var definition:String
    /// 模板类型。取值范围：
      ///   jdchd - 京享超清
      ///   jdchs - 极速转码
      /// 
    var templateType:String?



    public  init(name:String,video:Video,audio:Audio,encapsulation:Encapsulation,definition:String){
             self.name = name
             self.video = video
             self.audio = audio
             self.encapsulation = encapsulation
             self.definition = definition
    }

    enum CreateTranscodeTemplateRequestObjectCodingKeys: String, CodingKey {
        case name
        case video
        case audio
        case encapsulation
        case definition
        case templateType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateTranscodeTemplateRequestObjectCodingKeys.self)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        self.video = try decoderContainer.decode(Video.self, forKey: .video)
        self.audio = try decoderContainer.decode(Audio.self, forKey: .audio)
        self.encapsulation = try decoderContainer.decode(Encapsulation.self, forKey: .encapsulation)
        self.definition = try decoderContainer.decode(String.self, forKey: .definition)
        if decoderContainer.contains(.templateType)
        {
            self.templateType = try decoderContainer.decode(String?.self, forKey: .templateType)
        }
    }
}
public extension CreateTranscodeTemplateRequestObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateTranscodeTemplateRequestObjectCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(video, forKey: .video)
         try encoderContainer.encode(audio, forKey: .audio)
         try encoderContainer.encode(encapsulation, forKey: .encapsulation)
         try encoderContainer.encode(definition, forKey: .definition)
         try encoderContainer.encode(templateType, forKey: .templateType)
    }
}
