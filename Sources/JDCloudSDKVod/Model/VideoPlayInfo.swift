/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Video Management
   视频资源管理相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  视频播放信息
@objc(VideoPlayInfo)
public class VideoPlayInfo:NSObject,Codable{
    /// 生成播放信息的转码任务ID
    var taskId:String?
    /// 清晰度规格标记。取值范围：
      ///   SD - 标清
      ///   HD - 高清
      ///   FHD - 超清
      ///   2K
      ///   4K
      /// 
    var definition:String?
    /// 媒体类型
    var mediaType:Int?
    /// 播放信息状态，目前只有正常状态(normal)
    var status:String?
    /// CDN地址，原始地址或者鉴权地址
    var url:String?
    /// Size
    var size:Int64?
    /// 视频时长
    var duration:Int64?
    /// 码率
    var bitrate:Int64?
    /// 编码格式
    var codec:String?
    /// 封装格式
    var format:String?
    /// 视频宽度
    var width:Int?
    /// 视频高度
    var height:Int?
    /// 视频帧率
    var fps:String?
    /// CreateTime
    var createTime:String?
    /// UpdateTime
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum VideoPlayInfoCodingKeys: String, CodingKey {
        case taskId
        case definition
        case mediaType
        case status
        case url
        case size
        case duration
        case bitrate
        case codec
        case format
        case width
        case height
        case fps
        case createTime
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: VideoPlayInfoCodingKeys.self)
        if decoderContainer.contains(.taskId)
        {
            self.taskId = try decoderContainer.decode(String?.self, forKey: .taskId)
        }
        if decoderContainer.contains(.definition)
        {
            self.definition = try decoderContainer.decode(String?.self, forKey: .definition)
        }
        if decoderContainer.contains(.mediaType)
        {
            self.mediaType = try decoderContainer.decode(Int?.self, forKey: .mediaType)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.url)
        {
            self.url = try decoderContainer.decode(String?.self, forKey: .url)
        }
        if decoderContainer.contains(.size)
        {
            self.size = try decoderContainer.decode(Int64?.self, forKey: .size)
        }
        if decoderContainer.contains(.duration)
        {
            self.duration = try decoderContainer.decode(Int64?.self, forKey: .duration)
        }
        if decoderContainer.contains(.bitrate)
        {
            self.bitrate = try decoderContainer.decode(Int64?.self, forKey: .bitrate)
        }
        if decoderContainer.contains(.codec)
        {
            self.codec = try decoderContainer.decode(String?.self, forKey: .codec)
        }
        if decoderContainer.contains(.format)
        {
            self.format = try decoderContainer.decode(String?.self, forKey: .format)
        }
        if decoderContainer.contains(.width)
        {
            self.width = try decoderContainer.decode(Int?.self, forKey: .width)
        }
        if decoderContainer.contains(.height)
        {
            self.height = try decoderContainer.decode(Int?.self, forKey: .height)
        }
        if decoderContainer.contains(.fps)
        {
            self.fps = try decoderContainer.decode(String?.self, forKey: .fps)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension VideoPlayInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: VideoPlayInfoCodingKeys.self)
         try encoderContainer.encode(taskId, forKey: .taskId)
         try encoderContainer.encode(definition, forKey: .definition)
         try encoderContainer.encode(mediaType, forKey: .mediaType)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(url, forKey: .url)
         try encoderContainer.encode(size, forKey: .size)
         try encoderContainer.encode(duration, forKey: .duration)
         try encoderContainer.encode(bitrate, forKey: .bitrate)
         try encoderContainer.encode(codec, forKey: .codec)
         try encoderContainer.encode(format, forKey: .format)
         try encoderContainer.encode(width, forKey: .width)
         try encoderContainer.encode(height, forKey: .height)
         try encoderContainer.encode(fps, forKey: .fps)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
