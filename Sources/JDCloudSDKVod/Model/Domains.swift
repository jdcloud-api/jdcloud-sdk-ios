/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  domains
@objc(Domains)
public class Domains:NSObject,Codable{
    /// 域名ID
    var domainId:Double?
    /// 域名
    var domain:String?
    /// 域名名称
    var cname:String?
    /// 状态
    var status:Int?
    /// 证书
    var certificate:String?
    /// 类型
    var type:Int?
    /// 创建时间
    var createTime:String?
    /// 修改时间
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum DomainsCodingKeys: String, CodingKey {
        case domainId
        case domain
        case cname
        case status
        case certificate
        case type
        case createTime
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DomainsCodingKeys.self)
        if decoderContainer.contains(.domainId)
        {
            self.domainId = try decoderContainer.decode(Double?.self, forKey: .domainId)
        }
        if decoderContainer.contains(.domain)
        {
            self.domain = try decoderContainer.decode(String?.self, forKey: .domain)
        }
        if decoderContainer.contains(.cname)
        {
            self.cname = try decoderContainer.decode(String?.self, forKey: .cname)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.certificate)
        {
            self.certificate = try decoderContainer.decode(String?.self, forKey: .certificate)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(Int?.self, forKey: .type)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension Domains{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DomainsCodingKeys.self)
         try encoderContainer.encode(domainId, forKey: .domainId)
         try encoderContainer.encode(domain, forKey: .domain)
         try encoderContainer.encode(cname, forKey: .cname)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(certificate, forKey: .certificate)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
