/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Video Management
   视频资源管理相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  批量修改视频信息结果
@objc(BatchUpdateVideosResultObject)
public class BatchUpdateVideosResultObject:NSObject,Codable{
    /// 更新成功的视频ID列表
    var okVideoIds:[String?]?
    /// 未找到的视频ID列表
    var notFoundVideoIds:[String?]?
    /// 更新失败的视频ID列表
    var failedVideoIds:[String?]?



    public override init(){
            super.init()
    }

    enum BatchUpdateVideosResultObjectCodingKeys: String, CodingKey {
        case okVideoIds
        case notFoundVideoIds
        case failedVideoIds
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BatchUpdateVideosResultObjectCodingKeys.self)
        if decoderContainer.contains(.okVideoIds)
        {
            self.okVideoIds = try decoderContainer.decode([String?]?.self, forKey: .okVideoIds)
        }
        if decoderContainer.contains(.notFoundVideoIds)
        {
            self.notFoundVideoIds = try decoderContainer.decode([String?]?.self, forKey: .notFoundVideoIds)
        }
        if decoderContainer.contains(.failedVideoIds)
        {
            self.failedVideoIds = try decoderContainer.decode([String?]?.self, forKey: .failedVideoIds)
        }
    }
}
public extension BatchUpdateVideosResultObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchUpdateVideosResultObjectCodingKeys.self)
         try encoderContainer.encode(okVideoIds, forKey: .okVideoIds)
         try encoderContainer.encode(notFoundVideoIds, forKey: .notFoundVideoIds)
         try encoderContainer.encode(failedVideoIds, forKey: .failedVideoIds)
    }
}
