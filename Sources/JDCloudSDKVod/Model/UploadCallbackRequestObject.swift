/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Upload
   上传功能相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  uploadCallbackRequestObject
@objc(UploadCallbackRequestObject)
public class UploadCallbackRequestObject:NSObject,Codable{
    /// 上传状态
    var status:Int?
    /// 视频名称
    var name:String?
    /// 格式
    var format:String?
    /// 文件大小
    var size:Int64?
    /// 分类ID
    var categoryId:Int64?
    /// 转码模板ID，多个时以逗号分隔
    var coderateId:String?
    /// 水印ID，多个时以逗号分隔
    var logoId:String?
    /// 下载地址
    var url:String?
    /// 存储节点域名
    var endpoint:String?
    /// 存储桶名称
    var bucket:String?



    public override init(){
            super.init()
    }

    enum UploadCallbackRequestObjectCodingKeys: String, CodingKey {
        case status
        case name
        case format
        case size
        case categoryId
        case coderateId
        case logoId
        case url
        case endpoint
        case bucket
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UploadCallbackRequestObjectCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.format)
        {
            self.format = try decoderContainer.decode(String?.self, forKey: .format)
        }
        if decoderContainer.contains(.size)
        {
            self.size = try decoderContainer.decode(Int64?.self, forKey: .size)
        }
        if decoderContainer.contains(.categoryId)
        {
            self.categoryId = try decoderContainer.decode(Int64?.self, forKey: .categoryId)
        }
        if decoderContainer.contains(.coderateId)
        {
            self.coderateId = try decoderContainer.decode(String?.self, forKey: .coderateId)
        }
        if decoderContainer.contains(.logoId)
        {
            self.logoId = try decoderContainer.decode(String?.self, forKey: .logoId)
        }
        if decoderContainer.contains(.url)
        {
            self.url = try decoderContainer.decode(String?.self, forKey: .url)
        }
        if decoderContainer.contains(.endpoint)
        {
            self.endpoint = try decoderContainer.decode(String?.self, forKey: .endpoint)
        }
        if decoderContainer.contains(.bucket)
        {
            self.bucket = try decoderContainer.decode(String?.self, forKey: .bucket)
        }
    }
}
public extension UploadCallbackRequestObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UploadCallbackRequestObjectCodingKeys.self)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(format, forKey: .format)
         try encoderContainer.encode(size, forKey: .size)
         try encoderContainer.encode(categoryId, forKey: .categoryId)
         try encoderContainer.encode(coderateId, forKey: .coderateId)
         try encoderContainer.encode(logoId, forKey: .logoId)
         try encoderContainer.encode(url, forKey: .url)
         try encoderContainer.encode(endpoint, forKey: .endpoint)
         try encoderContainer.encode(bucket, forKey: .bucket)
    }
}
