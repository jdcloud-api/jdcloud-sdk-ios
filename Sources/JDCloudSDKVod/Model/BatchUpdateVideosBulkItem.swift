/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Video Management
   视频资源管理相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  批量修改视频的条目信息
@objc(BatchUpdateVideosBulkItem)
public class BatchUpdateVideosBulkItem:NSObject,Codable{
    /// 视频ID
    var videoId:String?
    /// 视频名称
    var name:String?
    /// 分类ID
    var categoryId:Double?
    /// 视频标签
    var tags:[String?]?
    /// 封面图地址
    var coverUrl:String?
    /// 视频描述信息
    var descriptionValue:String?



    public override init(){
            super.init()
    }

    enum BatchUpdateVideosBulkItemCodingKeys: String, CodingKey {
        case videoId
        case name
        case categoryId
        case tags
        case coverUrl
        case descriptionValue = "description"
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BatchUpdateVideosBulkItemCodingKeys.self)
        if decoderContainer.contains(.videoId)
        {
            self.videoId = try decoderContainer.decode(String?.self, forKey: .videoId)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.categoryId)
        {
            self.categoryId = try decoderContainer.decode(Double?.self, forKey: .categoryId)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([String?]?.self, forKey: .tags)
        }
        if decoderContainer.contains(.coverUrl)
        {
            self.coverUrl = try decoderContainer.decode(String?.self, forKey: .coverUrl)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
    }
}
public extension BatchUpdateVideosBulkItem{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchUpdateVideosBulkItemCodingKeys.self)
         try encoderContainer.encode(videoId, forKey: .videoId)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(categoryId, forKey: .categoryId)
         try encoderContainer.encode(tags, forKey: .tags)
         try encoderContainer.encode(coverUrl, forKey: .coverUrl)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
    }
}
