/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Video Transcode Template Management
   水印管理

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  视频参数
@objc(Video)
public class Video:NSObject,Codable{
    /// 视频编码
    var codec:String?
    /// 码率
    var bitrate:Int?
    /// 帧率
    var fps:Int?
    /// 宽度
    var width:Int?
    /// 高度
    var height:Int?



    public override init(){
            super.init()
    }

    enum VideoCodingKeys: String, CodingKey {
        case codec
        case bitrate
        case fps
        case width
        case height
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: VideoCodingKeys.self)
        if decoderContainer.contains(.codec)
        {
            self.codec = try decoderContainer.decode(String?.self, forKey: .codec)
        }
        if decoderContainer.contains(.bitrate)
        {
            self.bitrate = try decoderContainer.decode(Int?.self, forKey: .bitrate)
        }
        if decoderContainer.contains(.fps)
        {
            self.fps = try decoderContainer.decode(Int?.self, forKey: .fps)
        }
        if decoderContainer.contains(.width)
        {
            self.width = try decoderContainer.decode(Int?.self, forKey: .width)
        }
        if decoderContainer.contains(.height)
        {
            self.height = try decoderContainer.decode(Int?.self, forKey: .height)
        }
    }
}
public extension Video{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: VideoCodingKeys.self)
         try encoderContainer.encode(codec, forKey: .codec)
         try encoderContainer.encode(bitrate, forKey: .bitrate)
         try encoderContainer.encode(fps, forKey: .fps)
         try encoderContainer.encode(width, forKey: .width)
         try encoderContainer.encode(height, forKey: .height)
    }
}
