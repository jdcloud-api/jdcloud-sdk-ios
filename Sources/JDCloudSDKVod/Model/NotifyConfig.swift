/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Notice Management
   通知管理

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  notifyConfig
@objc(NotifyConfig)
public class NotifyConfig:NSObject,Codable{
    /// 回调ID
    var notifyId:Int64?
    /// 类型
    var type:Int?
    /// 回调开关
    var notifyFlag:Int?
    /// 回调地址
    var notifyUrl:String?
    /// 回调类型
    var callType:String?
    /// 回调关键值
    var notifyKey:String?
    /// 创建时间
    var createTime:String?
    /// 修改时间
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum NotifyConfigCodingKeys: String, CodingKey {
        case notifyId
        case type
        case notifyFlag
        case notifyUrl
        case callType
        case notifyKey
        case createTime
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NotifyConfigCodingKeys.self)
        if decoderContainer.contains(.notifyId)
        {
            self.notifyId = try decoderContainer.decode(Int64?.self, forKey: .notifyId)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(Int?.self, forKey: .type)
        }
        if decoderContainer.contains(.notifyFlag)
        {
            self.notifyFlag = try decoderContainer.decode(Int?.self, forKey: .notifyFlag)
        }
        if decoderContainer.contains(.notifyUrl)
        {
            self.notifyUrl = try decoderContainer.decode(String?.self, forKey: .notifyUrl)
        }
        if decoderContainer.contains(.callType)
        {
            self.callType = try decoderContainer.decode(String?.self, forKey: .callType)
        }
        if decoderContainer.contains(.notifyKey)
        {
            self.notifyKey = try decoderContainer.decode(String?.self, forKey: .notifyKey)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension NotifyConfig{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NotifyConfigCodingKeys.self)
         try encoderContainer.encode(notifyId, forKey: .notifyId)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(notifyFlag, forKey: .notifyFlag)
         try encoderContainer.encode(notifyUrl, forKey: .notifyUrl)
         try encoderContainer.encode(callType, forKey: .callType)
         try encoderContainer.encode(notifyKey, forKey: .notifyKey)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
