/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Domain Management
   域名管理

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  添加域名头参数响应消息体
@objc(GetHeaderResp)
public class GetHeaderResp:NSObject,Codable{
    /// 头参数名
    var headerName:String?
    /// 头参数值
    var headerValue:String?
    /// 头参数类型
    var headerType:String?
    /// CreateTime
    var createTime:String?
    /// UpdateTime
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum GetHeaderRespCodingKeys: String, CodingKey {
        case headerName
        case headerValue
        case headerType
        case createTime
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetHeaderRespCodingKeys.self)
        if decoderContainer.contains(.headerName)
        {
            self.headerName = try decoderContainer.decode(String?.self, forKey: .headerName)
        }
        if decoderContainer.contains(.headerValue)
        {
            self.headerValue = try decoderContainer.decode(String?.self, forKey: .headerValue)
        }
        if decoderContainer.contains(.headerType)
        {
            self.headerType = try decoderContainer.decode(String?.self, forKey: .headerType)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension GetHeaderResp{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetHeaderRespCodingKeys.self)
         try encoderContainer.encode(headerName, forKey: .headerName)
         try encoderContainer.encode(headerValue, forKey: .headerValue)
         try encoderContainer.encode(headerType, forKey: .headerType)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
