/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Upload
   上传功能相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  获取视频上传地址和凭证请求
@objc(CreateVideoUploadTaskRequestObject)
public class CreateVideoUploadTaskRequestObject:NSObject,Codable{
    /// HTTP 请求方法，取值范围：GET、POST、PUT、DELETE、HEAD、PATCH，默认值为 PUT
    var httpMethod:String?
    /// 视频标题
    var title:String?
    /// 文件名称
    var fileName:String?
    /// 文件大小
    var fileSize:Int64?
    /// 封面地址
    var coverUrl:String?
    /// 视频描述
    var descriptionValue:String?
    /// 分类ID
    var categoryId:Int64?
    /// 视频标签集合
    var tags:[String?]?
    /// 转码模板ID集合
    var transcodeTemplateIds:[Int64?]?
    /// 水印ID集合
    var watermarkIds:[Int64?]?



    public override init(){
            super.init()
    }

    enum CreateVideoUploadTaskRequestObjectCodingKeys: String, CodingKey {
        case httpMethod
        case title
        case fileName
        case fileSize
        case coverUrl
        case descriptionValue = "description"
        case categoryId
        case tags
        case transcodeTemplateIds
        case watermarkIds
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVideoUploadTaskRequestObjectCodingKeys.self)
        if decoderContainer.contains(.httpMethod)
        {
            self.httpMethod = try decoderContainer.decode(String?.self, forKey: .httpMethod)
        }
        if decoderContainer.contains(.title)
        {
            self.title = try decoderContainer.decode(String?.self, forKey: .title)
        }
        if decoderContainer.contains(.fileName)
        {
            self.fileName = try decoderContainer.decode(String?.self, forKey: .fileName)
        }
        if decoderContainer.contains(.fileSize)
        {
            self.fileSize = try decoderContainer.decode(Int64?.self, forKey: .fileSize)
        }
        if decoderContainer.contains(.coverUrl)
        {
            self.coverUrl = try decoderContainer.decode(String?.self, forKey: .coverUrl)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.categoryId)
        {
            self.categoryId = try decoderContainer.decode(Int64?.self, forKey: .categoryId)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([String?]?.self, forKey: .tags)
        }
        if decoderContainer.contains(.transcodeTemplateIds)
        {
            self.transcodeTemplateIds = try decoderContainer.decode([Int64?]?.self, forKey: .transcodeTemplateIds)
        }
        if decoderContainer.contains(.watermarkIds)
        {
            self.watermarkIds = try decoderContainer.decode([Int64?]?.self, forKey: .watermarkIds)
        }
    }
}
public extension CreateVideoUploadTaskRequestObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVideoUploadTaskRequestObjectCodingKeys.self)
         try encoderContainer.encode(httpMethod, forKey: .httpMethod)
         try encoderContainer.encode(title, forKey: .title)
         try encoderContainer.encode(fileName, forKey: .fileName)
         try encoderContainer.encode(fileSize, forKey: .fileSize)
         try encoderContainer.encode(coverUrl, forKey: .coverUrl)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(categoryId, forKey: .categoryId)
         try encoderContainer.encode(tags, forKey: .tags)
         try encoderContainer.encode(transcodeTemplateIds, forKey: .transcodeTemplateIds)
         try encoderContainer.encode(watermarkIds, forKey: .watermarkIds)
    }
}
