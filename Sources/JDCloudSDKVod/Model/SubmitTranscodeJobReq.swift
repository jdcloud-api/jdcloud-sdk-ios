/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Video Transcode
   媒体处理 - 视频转码

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  submitTranscodeJobReq
@objc(SubmitTranscodeJobReq)
public class SubmitTranscodeJobReq:NSObject,Codable{
    /// 视频ID
    var videoId:String?
    /// 转码模板ID列表
    var templateIds:[String?]?
    /// 水印ID列表
    var watermarkIds:String?



    public override init(){
            super.init()
    }

    enum SubmitTranscodeJobReqCodingKeys: String, CodingKey {
        case videoId
        case templateIds
        case watermarkIds
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SubmitTranscodeJobReqCodingKeys.self)
        if decoderContainer.contains(.videoId)
        {
            self.videoId = try decoderContainer.decode(String?.self, forKey: .videoId)
        }
        if decoderContainer.contains(.templateIds)
        {
            self.templateIds = try decoderContainer.decode([String?]?.self, forKey: .templateIds)
        }
        if decoderContainer.contains(.watermarkIds)
        {
            self.watermarkIds = try decoderContainer.decode(String?.self, forKey: .watermarkIds)
        }
    }
}
public extension SubmitTranscodeJobReq{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SubmitTranscodeJobReqCodingKeys.self)
         try encoderContainer.encode(videoId, forKey: .videoId)
         try encoderContainer.encode(templateIds, forKey: .templateIds)
         try encoderContainer.encode(watermarkIds, forKey: .watermarkIds)
    }
}
