/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  transcodeTemplate
@objc(TranscodeTemplate)
public class TranscodeTemplate:NSObject,Codable{
    /// 模板ID
    var coderateId:Double?
    /// 模板名称
    var name:String?
    /// 封装格式
    var format:String?
    /// 宽
    var width:Int?
    /// 高
    var height:Int?
    /// 视频码率
    var videoCodeRate:Int?
    /// 视频编码
    var videoCodec:String?
    /// 音频编码
    var audioCodec:String?
    /// 是否系统默认
    var type:Int?
    /// 修改时间
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum TranscodeTemplateCodingKeys: String, CodingKey {
        case coderateId
        case name
        case format
        case width
        case height
        case videoCodeRate
        case videoCodec
        case audioCodec
        case type
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TranscodeTemplateCodingKeys.self)
        self.coderateId = try decoderContainer.decode(Double?.self, forKey: .coderateId)
        self.name = try decoderContainer.decode(String?.self, forKey: .name)
        self.format = try decoderContainer.decode(String?.self, forKey: .format)
        self.width = try decoderContainer.decode(Int?.self, forKey: .width)
        self.height = try decoderContainer.decode(Int?.self, forKey: .height)
        self.videoCodeRate = try decoderContainer.decode(Int?.self, forKey: .videoCodeRate)
        self.videoCodec = try decoderContainer.decode(String?.self, forKey: .videoCodec)
        self.audioCodec = try decoderContainer.decode(String?.self, forKey: .audioCodec)
        self.type = try decoderContainer.decode(Int?.self, forKey: .type)
        self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
    }
}
public extension TranscodeTemplate{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TranscodeTemplateCodingKeys.self)
         try encoderContainer.encode(coderateId, forKey: .coderateId)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(format, forKey: .format)
         try encoderContainer.encode(width, forKey: .width)
         try encoderContainer.encode(height, forKey: .height)
         try encoderContainer.encode(videoCodeRate, forKey: .videoCodeRate)
         try encoderContainer.encode(videoCodec, forKey: .videoCodec)
         try encoderContainer.encode(audioCodec, forKey: .audioCodec)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
