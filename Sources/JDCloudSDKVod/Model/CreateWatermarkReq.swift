/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Watermark Management
   水印管理

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  创建水印请求信息
@objc(CreateWatermarkReq)
public class CreateWatermarkReq:NSObject,Codable{
    /// 水印名称
    var name:String?
    /// 图片地址
    var imgUrl:String?
    /// 宽度
    var width:Int?
    /// 高度
    var height:Int?
    /// 水印位置
    var position:String?
    /// 偏移单位
    var unit:String?
    /// 水平偏移
    var offsetX:Int?
    /// 竖直偏移
    var offsetY:Int?



    public override init(){
            super.init()
    }

    enum CreateWatermarkReqCodingKeys: String, CodingKey {
        case name
        case imgUrl
        case width
        case height
        case position
        case unit
        case offsetX
        case offsetY
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateWatermarkReqCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.imgUrl)
        {
            self.imgUrl = try decoderContainer.decode(String?.self, forKey: .imgUrl)
        }
        if decoderContainer.contains(.width)
        {
            self.width = try decoderContainer.decode(Int?.self, forKey: .width)
        }
        if decoderContainer.contains(.height)
        {
            self.height = try decoderContainer.decode(Int?.self, forKey: .height)
        }
        if decoderContainer.contains(.position)
        {
            self.position = try decoderContainer.decode(String?.self, forKey: .position)
        }
        if decoderContainer.contains(.unit)
        {
            self.unit = try decoderContainer.decode(String?.self, forKey: .unit)
        }
        if decoderContainer.contains(.offsetX)
        {
            self.offsetX = try decoderContainer.decode(Int?.self, forKey: .offsetX)
        }
        if decoderContainer.contains(.offsetY)
        {
            self.offsetY = try decoderContainer.decode(Int?.self, forKey: .offsetY)
        }
    }
}
public extension CreateWatermarkReq{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateWatermarkReqCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(imgUrl, forKey: .imgUrl)
         try encoderContainer.encode(width, forKey: .width)
         try encoderContainer.encode(height, forKey: .height)
         try encoderContainer.encode(position, forKey: .position)
         try encoderContainer.encode(unit, forKey: .unit)
         try encoderContainer.encode(offsetX, forKey: .offsetX)
         try encoderContainer.encode(offsetY, forKey: .offsetY)
    }
}
