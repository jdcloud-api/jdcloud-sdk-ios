/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Domain Management
   域名管理

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  获取全类型域名访问控制规则配置响应消息体
@objc(GetAllTypeRuleResultObject)
public class GetAllTypeRuleResultObject:NSObject,Codable{
    /// Referer
    var referer:GetRefererRuleResultObject?
    /// Url
    var url:GetURLRuleResultObject?
    /// Ip
    var ip:GetIPRuleResultObject?



    public override init(){
            super.init()
    }

    enum GetAllTypeRuleResultObjectCodingKeys: String, CodingKey {
        case referer
        case url
        case ip
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetAllTypeRuleResultObjectCodingKeys.self)
        if decoderContainer.contains(.referer)
        {
            self.referer = try decoderContainer.decode(GetRefererRuleResultObject?.self, forKey: .referer)
        }
        if decoderContainer.contains(.url)
        {
            self.url = try decoderContainer.decode(GetURLRuleResultObject?.self, forKey: .url)
        }
        if decoderContainer.contains(.ip)
        {
            self.ip = try decoderContainer.decode(GetIPRuleResultObject?.self, forKey: .ip)
        }
    }
}
public extension GetAllTypeRuleResultObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetAllTypeRuleResultObjectCodingKeys.self)
         try encoderContainer.encode(referer, forKey: .referer)
         try encoderContainer.encode(url, forKey: .url)
         try encoderContainer.encode(ip, forKey: .ip)
    }
}
