/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Domain Management
   域名管理

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  Referer防盗链规则配置对象
@objc(RefererRuleConfigObject)
public class RefererRuleConfigObject:NSObject,Codable{
    /// 启用策略。取值范围：
      ///   denial - 拒绝
      ///   allowance - 允许
      /// 
    /// Required:true
    var strategy:String
    /// Referer域名列表
    /// Required:true
    var domains:[String?]
    /// 是否允许请求头 Referer 为空，如允许浏览器直接访问等
    /// Required:true
    var allowBlank:Bool



    public  init(strategy:String,domains:[String?],allowBlank:Bool){
             self.strategy = strategy
             self.domains = domains
             self.allowBlank = allowBlank
    }

    enum RefererRuleConfigObjectCodingKeys: String, CodingKey {
        case strategy
        case domains
        case allowBlank
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RefererRuleConfigObjectCodingKeys.self)
        self.strategy = try decoderContainer.decode(String.self, forKey: .strategy)
        self.domains = try decoderContainer.decode([String?].self, forKey: .domains)
        self.allowBlank = try decoderContainer.decode(Bool.self, forKey: .allowBlank)
    }
}
public extension RefererRuleConfigObject{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RefererRuleConfigObjectCodingKeys.self)
         try encoderContainer.encode(strategy, forKey: .strategy)
         try encoderContainer.encode(domains, forKey: .domains)
         try encoderContainer.encode(allowBlank, forKey: .allowBlank)
    }
}
