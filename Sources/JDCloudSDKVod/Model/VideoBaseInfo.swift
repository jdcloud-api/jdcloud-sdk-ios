/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Video Management
   视频资源管理相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  视频基础信息
@objc(VideoBaseInfo)
public class VideoBaseInfo:NSObject,Codable{
    /// 视频ID
    var videoId:String?
    /// 视频名称
    var videoName:String?
    /// 视频描述
    var descriptionValue:String?
    /// CategoryId
    var categoryId:Int64?
    /// 分类名称
    var categoryName:String?
    /// 标签
    var tags:String?
    /// 视频时长
    var duration:Int64?
    /// 封面地址
    var coverImgUrl:String?



    public override init(){
            super.init()
    }

    enum VideoBaseInfoCodingKeys: String, CodingKey {
        case videoId
        case videoName
        case descriptionValue = "description"
        case categoryId
        case categoryName
        case tags
        case duration
        case coverImgUrl
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: VideoBaseInfoCodingKeys.self)
        if decoderContainer.contains(.videoId)
        {
            self.videoId = try decoderContainer.decode(String?.self, forKey: .videoId)
        }
        if decoderContainer.contains(.videoName)
        {
            self.videoName = try decoderContainer.decode(String?.self, forKey: .videoName)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.categoryId)
        {
            self.categoryId = try decoderContainer.decode(Int64?.self, forKey: .categoryId)
        }
        if decoderContainer.contains(.categoryName)
        {
            self.categoryName = try decoderContainer.decode(String?.self, forKey: .categoryName)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode(String?.self, forKey: .tags)
        }
        if decoderContainer.contains(.duration)
        {
            self.duration = try decoderContainer.decode(Int64?.self, forKey: .duration)
        }
        if decoderContainer.contains(.coverImgUrl)
        {
            self.coverImgUrl = try decoderContainer.decode(String?.self, forKey: .coverImgUrl)
        }
    }
}
public extension VideoBaseInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: VideoBaseInfoCodingKeys.self)
         try encoderContainer.encode(videoId, forKey: .videoId)
         try encoderContainer.encode(videoName, forKey: .videoName)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(categoryId, forKey: .categoryId)
         try encoderContainer.encode(categoryName, forKey: .categoryName)
         try encoderContainer.encode(tags, forKey: .tags)
         try encoderContainer.encode(duration, forKey: .duration)
         try encoderContainer.encode(coverImgUrl, forKey: .coverImgUrl)
    }
}
