/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Media Upload
   媒体上传相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

///  提交质检作业
public class SubmitQualityDetectionJobExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/qualityDetectionJobs:submit")
    }
    
}
///  批量提交质检作业
public class BatchSubmitQualityDetectionJobsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/qualityDetectionJobs:batchSubmit")
    }
    
}
///  查询域名列表
public class ListDomainsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/domains")
    }
    
}
///  添加域名
public class CreateDomainExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/domains")
    }
    
}
///  查询域名
public class GetDomainExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/domains/{domainId}")
    }
    
}
///  删除域名。执行该操作，需确保域名已被停用。
public class DeleteDomainExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/domains/{domainId}")
    }
    
}
///  启用域名
public class EnableDomainExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/domains/{domainId}:enable")
    }
    
}
///  停用域名
public class DisableDomainExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/domains/{domainId}:disable")
    }
    
}
///  设为默认域名
public class SetDefaultDomainExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/domains/{domainId}:setDefault")
    }
    
}
///  设置域名访问头参数
public class SetHeaderExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/domains/{domainId}:setHeader")
    }
    
}
///  查询域名访问头参数列表
public class ListHeadersExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/domains/{domainId}:listHeaders")
    }
    
}
///  删除域名访问头参数
public class DeleteHeaderExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/domains/{domainId}:deleteHeader")
    }
    
}
///  设置CDN域名Referer防盗链规则
public class SetRefererRuleExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/domains/{domainId}:setRefererRule")
    }
    
}
///  查询CDN域名Referer防盗链规则配置
public class GetRefererRuleExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/domains/{domainId}:getRefererRule")
    }
    
}
///  设置CDN域名URL鉴权规则
public class SetURLRuleExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/domains/{domainId}:setURLRule")
    }
    
}
///  查询CDN域名URL鉴权规则配置
public class GetURLRuleExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/domains/{domainId}:getURLRule")
    }
    
}
///  设置CDN域名IP黑名单规则
public class SetIPRuleExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/domains/{domainId}:setIPRule")
    }
    
}
///  查询CDN域名IP黑名单规则配置
public class GetIPRuleExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/domains/{domainId}:getIPRule")
    }
    
}
///  设置CDN域名SSL配置
public class SetHttpSslExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/domains/{domainId}:setHttpSsl")
    }
    
}
///  查询CDN域名SSL配置
public class GetHttpSslExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/domains/{domainId}:getHttpSsl")
    }
    
}
///  查询质测模板列表。
      /// 
public class ListQualityDetectionTemplatesExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/qualityDetectionTemplates")
    }
    
}
///  创建质检模板
public class CreateQualityDetectionTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/qualityDetectionTemplates")
    }
    
}
///  查询质检模板
public class GetQualityDetectionTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/qualityDetectionTemplates/{templateId}")
    }
    
}
///  修改质检模板
public class UpdateQualityDetectionTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/qualityDetectionTemplates/{templateId}")
    }
    
}
///  删除质检模板
public class DeleteQualityDetectionTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/qualityDetectionTemplates/{templateId}")
    }
    
}
///  提交转码作业
public class SubmitTranscodeJobExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/transcodeTasks:submitJob")
    }
    
}
///  批量提交转码作业
public class BatchSubmitTranscodeJobsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/transcodeTasks:batchSubmitJobs")
    }
    
}
///  查询转码模板列表。
      /// 允许通过条件过滤查询，支持的过滤字段如下：
      ///   - source[eq] 按模板来源精确查询
      ///   - templateType[eq] 按模板类型精确查询
      /// 
public class ListTranscodeTemplatesExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/transcodeTemplates")
    }
    
}
///  创建转码模板
public class CreateTranscodeTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/transcodeTemplates")
    }
    
}
///  查询转码模板
public class GetTranscodeTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/transcodeTemplates/{templateId}")
    }
    
}
///  修改转码模板
public class UpdateTranscodeTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/transcodeTemplates/{templateId}")
    }
    
}
///  删除转码模板
public class DeleteTranscodeTemplateExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/transcodeTemplates/{templateId}")
    }
    
}
///  查询分类列表。按照分页方式，返回分类列表信息。
public class ListCategoriesExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/categories")
    }
    
}
///  添加分类
public class CreateCategoryExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/categories")
    }
    
}
///  查询分类及其子分类，若指定的分类ID为0，则返回一个根分类及其子分类（即一级分类）.
public class GetCategoryWithChildrenExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/categories/{categoryId}:getWithChildren")
    }
    
}
///  查询分类
public class GetCategoryExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/categories/{categoryId}")
    }
    
}
///  修改分类
public class UpdateCategoryExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/categories/{categoryId}")
    }
    
}
///  删除分类
public class DeleteCategoryExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/categories/{categoryId}")
    }
    
}
///  查询视频列表信息。
      /// 允许通过条件过滤查询，支持的过滤字段如下：
      ///   - status[eq] 按视频状态精确查询
      ///   - categoryId[eq] 按分类ID精确查询
      ///   - videoId[eq] 按视频ID精确查询
      ///   - name[eq] 按视频名称精确查询
      /// 
public class ListVideosExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/videos")
    }
    
}
///  查询单个视频信息
public class GetVideoExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/videos/{videoId}")
    }
    
}
///  修改视频信息
public class UpdateVideoExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/videos/{videoId}")
    }
    
}
///  删除视频，调用该接口会同时删除与指定视频相关的所有信息，包括转码任务信息、转码流数据等，同时清除云存储中相关文件资源。
public class DeleteVideoExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/videos/{videoId}")
    }
    
}
///  批量删除视频，调用该接口会同时删除与指定视频相关的所有信息，包括转码任务信息、转码流数据等，同时清除云存储中相关文件资源。
public class BatchDeleteVideosExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/videos:batchDelete")
    }
    
}
///  批量修改视频信息
public class BatchUpdateVideosExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/videos:batchUpdate")
    }
    
}
///  获取视频播放信息
public class GetVideoPlayInfoExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/videos/{videoId}:getPlayInfo")
    }
    
}
///  删除视频转码流
public class DeleteVideoStreamsExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/videos/{videoId}:deleteStreams")
    }
    
}
///  查询水印列表
public class ListWatermarksExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/watermarks")
    }
    
}
///  添加水印
public class CreateWatermarkExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/watermarks")
    }
    
}
///  查询水印
public class GetWatermarkExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/watermarks/{watermarkId}")
    }
    
}
///  修改水印
public class UpdateWatermarkExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "PUT", url: "/watermarks/{watermarkId}")
    }
    
}
///  删除水印
public class DeleteWatermarkExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "DELETE", url: "/watermarks/{watermarkId}")
    }
    
}
///  获取视频上传地址和凭证
public class CreateVideoUploadTaskExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/videoUploadTask")
    }
    
}
///  刷新视频上传地址和凭证
public class RefreshVideoUploadTaskExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "GET", url: "/videoUploadTask:refresh")
    }
    
}
///  获取图片上传地址和凭证
public class CreateImageUploadTaskExecutor:JDCloudExecutor {
    
    public init(jdCloudClient: JDCloudClient) {
        super.init(jdCloudClient: jdCloudClient, method: "POST", url: "/imageUploadTask")
    }
    
}
