/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Video-on-Demand
   视频点播相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class VodJDCloudClient:NSObject,JDCloudClient{
    
    private final var vodJDCloudClient:VodJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        vodJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "vod.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        vodJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "vod/" + "v1"
    
    public let serviceName: String = "vod"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func batchSubmitQualityDetectionJobsAsync(request:BatchSubmitQualityDetectionJobsRequest,requestComplation:@escaping ExecuteResult<BatchSubmitQualityDetectionJobsResult>) throws {
        vodJDCloudClient = self
        try BatchSubmitQualityDetectionJobsExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteTranscodeTemplateAsync(request:DeleteTranscodeTemplateRequest,requestComplation:@escaping ExecuteResult<DeleteTranscodeTemplateResult>) throws {
        vodJDCloudClient = self
        try DeleteTranscodeTemplateExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateWatermarkAsync(request:UpdateWatermarkRequest,requestComplation:@escaping ExecuteResult<UpdateWatermarkResult>) throws {
        vodJDCloudClient = self
        try UpdateWatermarkExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listDomainsAsync(request:ListDomainsRequest,requestComplation:@escaping ExecuteResult<ListDomainsResult>) throws {
        vodJDCloudClient = self
        try ListDomainsExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVideoUploadTaskAsync(request:CreateVideoUploadTaskRequest,requestComplation:@escaping ExecuteResult<CreateVideoUploadTaskResult>) throws {
        vodJDCloudClient = self
        try CreateVideoUploadTaskExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getURLRuleAsync(request:GetURLRuleRequest,requestComplation:@escaping ExecuteResult<GetURLRuleResult>) throws {
        vodJDCloudClient = self
        try GetURLRuleExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listHeadersAsync(request:ListHeadersRequest,requestComplation:@escaping ExecuteResult<ListHeadersResult>) throws {
        vodJDCloudClient = self
        try ListHeadersExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setURLRuleAsync(request:SetURLRuleRequest,requestComplation:@escaping ExecuteResult<SetURLRuleResult>) throws {
        vodJDCloudClient = self
        try SetURLRuleExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getCategoryWithChildrenAsync(request:GetCategoryWithChildrenRequest,requestComplation:@escaping ExecuteResult<GetCategoryWithChildrenResult>) throws {
        vodJDCloudClient = self
        try GetCategoryWithChildrenExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listTranscodeTemplatesAsync(request:ListTranscodeTemplatesRequest,requestComplation:@escaping ExecuteResult<ListTranscodeTemplatesResult>) throws {
        vodJDCloudClient = self
        try ListTranscodeTemplatesExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getCategoryAsync(request:GetCategoryRequest,requestComplation:@escaping ExecuteResult<GetCategoryResult>) throws {
        vodJDCloudClient = self
        try GetCategoryExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createDomainAsync(request:CreateDomainRequest,requestComplation:@escaping ExecuteResult<CreateDomainResult>) throws {
        vodJDCloudClient = self
        try CreateDomainExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteWatermarkAsync(request:DeleteWatermarkRequest,requestComplation:@escaping ExecuteResult<DeleteWatermarkResult>) throws {
        vodJDCloudClient = self
        try DeleteWatermarkExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func submitTranscodeJobAsync(request:SubmitTranscodeJobRequest,requestComplation:@escaping ExecuteResult<SubmitTranscodeJobResult>) throws {
        vodJDCloudClient = self
        try SubmitTranscodeJobExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateTranscodeTemplateAsync(request:UpdateTranscodeTemplateRequest,requestComplation:@escaping ExecuteResult<UpdateTranscodeTemplateResult>) throws {
        vodJDCloudClient = self
        try UpdateTranscodeTemplateExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listQualityDetectionTemplatesAsync(request:ListQualityDetectionTemplatesRequest,requestComplation:@escaping ExecuteResult<ListQualityDetectionTemplatesResult>) throws {
        vodJDCloudClient = self
        try ListQualityDetectionTemplatesExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func batchUpdateVideosAsync(request:BatchUpdateVideosRequest,requestComplation:@escaping ExecuteResult<BatchUpdateVideosResult>) throws {
        vodJDCloudClient = self
        try BatchUpdateVideosExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createImageUploadTaskAsync(request:CreateImageUploadTaskRequest,requestComplation:@escaping ExecuteResult<CreateImageUploadTaskResult>) throws {
        vodJDCloudClient = self
        try CreateImageUploadTaskExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateQualityDetectionTemplateAsync(request:UpdateQualityDetectionTemplateRequest,requestComplation:@escaping ExecuteResult<UpdateQualityDetectionTemplateResult>) throws {
        vodJDCloudClient = self
        try UpdateQualityDetectionTemplateExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDomainAsync(request:GetDomainRequest,requestComplation:@escaping ExecuteResult<GetDomainResult>) throws {
        vodJDCloudClient = self
        try GetDomainExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getWatermarkAsync(request:GetWatermarkRequest,requestComplation:@escaping ExecuteResult<GetWatermarkResult>) throws {
        vodJDCloudClient = self
        try GetWatermarkExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVideoStreamsAsync(request:DeleteVideoStreamsRequest,requestComplation:@escaping ExecuteResult<DeleteVideoStreamsResult>) throws {
        vodJDCloudClient = self
        try DeleteVideoStreamsExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func batchSubmitTranscodeJobsAsync(request:BatchSubmitTranscodeJobsRequest,requestComplation:@escaping ExecuteResult<BatchSubmitTranscodeJobsResult>) throws {
        vodJDCloudClient = self
        try BatchSubmitTranscodeJobsExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setIPRuleAsync(request:SetIPRuleRequest,requestComplation:@escaping ExecuteResult<SetIPRuleResult>) throws {
        vodJDCloudClient = self
        try SetIPRuleExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateVideoAsync(request:UpdateVideoRequest,requestComplation:@escaping ExecuteResult<UpdateVideoResult>) throws {
        vodJDCloudClient = self
        try UpdateVideoExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setDefaultDomainAsync(request:SetDefaultDomainRequest,requestComplation:@escaping ExecuteResult<SetDefaultDomainResult>) throws {
        vodJDCloudClient = self
        try SetDefaultDomainExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getTranscodeTemplateAsync(request:GetTranscodeTemplateRequest,requestComplation:@escaping ExecuteResult<GetTranscodeTemplateResult>) throws {
        vodJDCloudClient = self
        try GetTranscodeTemplateExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteCategoryAsync(request:DeleteCategoryRequest,requestComplation:@escaping ExecuteResult<DeleteCategoryResult>) throws {
        vodJDCloudClient = self
        try DeleteCategoryExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVideoPlayInfoAsync(request:GetVideoPlayInfoRequest,requestComplation:@escaping ExecuteResult<GetVideoPlayInfoResult>) throws {
        vodJDCloudClient = self
        try GetVideoPlayInfoExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteHeaderAsync(request:DeleteHeaderRequest,requestComplation:@escaping ExecuteResult<DeleteHeaderResult>) throws {
        vodJDCloudClient = self
        try DeleteHeaderExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateCategoryAsync(request:UpdateCategoryRequest,requestComplation:@escaping ExecuteResult<UpdateCategoryResult>) throws {
        vodJDCloudClient = self
        try UpdateCategoryExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setRefererRuleAsync(request:SetRefererRuleRequest,requestComplation:@escaping ExecuteResult<SetRefererRuleResult>) throws {
        vodJDCloudClient = self
        try SetRefererRuleExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createQualityDetectionTemplateAsync(request:CreateQualityDetectionTemplateRequest,requestComplation:@escaping ExecuteResult<CreateQualityDetectionTemplateResult>) throws {
        vodJDCloudClient = self
        try CreateQualityDetectionTemplateExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRefererRuleAsync(request:GetRefererRuleRequest,requestComplation:@escaping ExecuteResult<GetRefererRuleResult>) throws {
        vodJDCloudClient = self
        try GetRefererRuleExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getQualityDetectionTemplateAsync(request:GetQualityDetectionTemplateRequest,requestComplation:@escaping ExecuteResult<GetQualityDetectionTemplateResult>) throws {
        vodJDCloudClient = self
        try GetQualityDetectionTemplateExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteDomainAsync(request:DeleteDomainRequest,requestComplation:@escaping ExecuteResult<DeleteDomainResult>) throws {
        vodJDCloudClient = self
        try DeleteDomainExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createCategoryAsync(request:CreateCategoryRequest,requestComplation:@escaping ExecuteResult<CreateCategoryResult>) throws {
        vodJDCloudClient = self
        try CreateCategoryExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listWatermarksAsync(request:ListWatermarksRequest,requestComplation:@escaping ExecuteResult<ListWatermarksResult>) throws {
        vodJDCloudClient = self
        try ListWatermarksExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getHttpSslAsync(request:GetHttpSslRequest,requestComplation:@escaping ExecuteResult<GetHttpSslResult>) throws {
        vodJDCloudClient = self
        try GetHttpSslExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setHeaderAsync(request:SetHeaderRequest,requestComplation:@escaping ExecuteResult<SetHeaderResult>) throws {
        vodJDCloudClient = self
        try SetHeaderExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func refreshVideoUploadTaskAsync(request:RefreshVideoUploadTaskRequest,requestComplation:@escaping ExecuteResult<RefreshVideoUploadTaskResult>) throws {
        vodJDCloudClient = self
        try RefreshVideoUploadTaskExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVideoAsync(request:GetVideoRequest,requestComplation:@escaping ExecuteResult<GetVideoResult>) throws {
        vodJDCloudClient = self
        try GetVideoExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listVideosAsync(request:ListVideosRequest,requestComplation:@escaping ExecuteResult<ListVideosResult>) throws {
        vodJDCloudClient = self
        try ListVideosExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createWatermarkAsync(request:CreateWatermarkRequest,requestComplation:@escaping ExecuteResult<CreateWatermarkResult>) throws {
        vodJDCloudClient = self
        try CreateWatermarkExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVideoAsync(request:DeleteVideoRequest,requestComplation:@escaping ExecuteResult<DeleteVideoResult>) throws {
        vodJDCloudClient = self
        try DeleteVideoExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func submitQualityDetectionJobAsync(request:SubmitQualityDetectionJobRequest,requestComplation:@escaping ExecuteResult<SubmitQualityDetectionJobResult>) throws {
        vodJDCloudClient = self
        try SubmitQualityDetectionJobExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getIPRuleAsync(request:GetIPRuleRequest,requestComplation:@escaping ExecuteResult<GetIPRuleResult>) throws {
        vodJDCloudClient = self
        try GetIPRuleExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableDomainAsync(request:EnableDomainRequest,requestComplation:@escaping ExecuteResult<EnableDomainResult>) throws {
        vodJDCloudClient = self
        try EnableDomainExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func setHttpSslAsync(request:SetHttpSslRequest,requestComplation:@escaping ExecuteResult<SetHttpSslResult>) throws {
        vodJDCloudClient = self
        try SetHttpSslExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createTranscodeTemplateAsync(request:CreateTranscodeTemplateRequest,requestComplation:@escaping ExecuteResult<CreateTranscodeTemplateResult>) throws {
        vodJDCloudClient = self
        try CreateTranscodeTemplateExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listCategoriesAsync(request:ListCategoriesRequest,requestComplation:@escaping ExecuteResult<ListCategoriesResult>) throws {
        vodJDCloudClient = self
        try ListCategoriesExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func batchDeleteVideosAsync(request:BatchDeleteVideosRequest,requestComplation:@escaping ExecuteResult<BatchDeleteVideosResult>) throws {
        vodJDCloudClient = self
        try BatchDeleteVideosExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disableDomainAsync(request:DisableDomainRequest,requestComplation:@escaping ExecuteResult<DisableDomainResult>) throws {
        vodJDCloudClient = self
        try DisableDomainExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteQualityDetectionTemplateAsync(request:DeleteQualityDetectionTemplateRequest,requestComplation:@escaping ExecuteResult<DeleteQualityDetectionTemplateResult>) throws {
        vodJDCloudClient = self
        try DeleteQualityDetectionTemplateExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension VodJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "vod.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
