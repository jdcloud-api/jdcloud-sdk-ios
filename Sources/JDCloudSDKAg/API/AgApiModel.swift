/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Availability-Group
   高可用组的接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon

public class DescribeQuotasResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeQuotasResult?;

    enum DescribeQuotasResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQuotasResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeQuotasResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeQuotasResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotasResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询(ag)配额 
public class DescribeQuotasResult:NSObject,JdCloudResult
{
    /// 配额列表
    var quotas:[Quota?]?



    public override init(){
        super.init()
    }

    enum DescribeQuotasResultCodingKeys: String, CodingKey {
        case quotas
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQuotasResultCodingKeys.self)
        if decoderContainer.contains(.quotas)
        {
            self.quotas = try decoderContainer.decode([Quota?]?.self, forKey: .quotas)
        }
    }
}
public extension DescribeQuotasResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotasResultCodingKeys.self)
        try encoderContainer.encode(quotas, forKey: .quotas)
    }
}

///  查询(ag)配额
public class DescribeQuotasRequest:JdCloudRequest
{
    /// resourceTypes - 资源类型，暂时只支持[ag]
      /// 
    var filters:[Filter?]?




    enum DescribeQuotasRequestRequestCodingKeys: String, CodingKey {
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotasRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  修改高可用组的实例模板
public class SetInstanceTemplateRequest:JdCloudRequest
{
    /// 实例模板 id
    var instanceTemplateId:String

    /// 高可用组 ID
    var agId:String


    public init(regionId: String,instanceTemplateId:String,agId:String){
        self.instanceTemplateId = instanceTemplateId
        self.agId = agId
        super.init(regionId: regionId)
    }


    enum SetInstanceTemplateRequestRequestCodingKeys: String, CodingKey {
        case instanceTemplateId
        case agId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetInstanceTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceTemplateId, forKey: .instanceTemplateId)
        try encoderContainer.encode(agId, forKey: .agId)

    }
}

public class SetInstanceTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:SetInstanceTemplateResult?;

    enum SetInstanceTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SetInstanceTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(SetInstanceTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension SetInstanceTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SetInstanceTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改一个高可用组的信息
public class UpdateAgRequest:JdCloudRequest
{
    /// 描述，长度不超过 256 字符
    var descriptionValue:String?

    /// 高可用组名称，只支持中文、数字、大小写字母、英文下划线 “_” 及中划线 “-”，且不能超过 32 字符
    var name:String?

    /// 高可用组 ID
    var agId:String


    public init(regionId: String,agId:String){
        self.agId = agId
        super.init(regionId: regionId)
    }


    enum UpdateAgRequestRequestCodingKeys: String, CodingKey {
        case descriptionValue = "description"
        case name
        case agId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAgRequestRequestCodingKeys.self)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(agId, forKey: .agId)

    }
}

/// 从高可用组中剔除实例 
public class AbandonInstancesResult:NSObject,JdCloudResult
{
}
public class UpdateAgResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateAgResult?;

    enum UpdateAgResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateAgResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateAgResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateAgResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAgResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建一个高可用组
public class CreateAgRequest:JdCloudRequest
{
    /// 支持的可用区，最少一个
    var azs:[String?]?

    /// 高可用组名称，只支持中文、数字、大小写字母、英文下划线 “_” 及中划线 “-”，且不能超过 32 字符
    var agName:String

    /// 高可用组类型，支持vm
    var agType:String?

    /// 实例模板的Id
    var instanceTemplateId:String

    /// 描述，长度不超过 256 字符
    var descriptionValue:String?


    public init(regionId: String,agName:String,instanceTemplateId:String){
        self.agName = agName
        self.instanceTemplateId = instanceTemplateId
        super.init(regionId: regionId)
    }


    enum CreateAgRequestRequestCodingKeys: String, CodingKey {
        case azs
        case agName
        case agType
        case instanceTemplateId
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAgRequestRequestCodingKeys.self)
        try encoderContainer.encode(azs, forKey: .azs)
        try encoderContainer.encode(agName, forKey: .agName)
        try encoderContainer.encode(agType, forKey: .agType)
        try encoderContainer.encode(instanceTemplateId, forKey: .instanceTemplateId)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}

/// 修改一个高可用组的信息 
public class UpdateAgResult:NSObject,JdCloudResult
{
}
public class AbandonInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AbandonInstancesResult?;

    enum AbandonInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AbandonInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AbandonInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension AbandonInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AbandonInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改高可用组的实例模板 
public class SetInstanceTemplateResult:NSObject,JdCloudResult
{
}
public class DescribeAgsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAgsResult?;

    enum DescribeAgsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAgsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAgsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAgsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAgsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateAgResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateAgResult?;

    enum CreateAgResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAgResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateAgResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateAgResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAgResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 使用过滤条件查询一个或多个高可用组 
public class DescribeAgsResult:NSObject,JdCloudResult
{
    /// Ags
    var ags:[AvailabilityGroup?]?

    /// TotalCount
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeAgsResultCodingKeys: String, CodingKey {
        case ags
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAgsResultCodingKeys.self)
        if decoderContainer.contains(.ags)
        {
            self.ags = try decoderContainer.decode([AvailabilityGroup?]?.self, forKey: .ags)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeAgsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAgsResultCodingKeys.self)
        try encoderContainer.encode(ags, forKey: .ags)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 根据 id 查询高可用组详情 
public class DescribeAgResult:NSObject,JdCloudResult
{
    /// Ag
    var ag:AvailabilityGroup?



    public override init(){
        super.init()
    }

    enum DescribeAgResultCodingKeys: String, CodingKey {
        case ag
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAgResultCodingKeys.self)
        if decoderContainer.contains(.ag)
        {
            self.ag = try decoderContainer.decode(AvailabilityGroup?.self, forKey: .ag)
        }
    }
}
public extension DescribeAgResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAgResultCodingKeys.self)
        try encoderContainer.encode(ag, forKey: .ag)
    }
}
public class DescribeAgResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAgResult?;

    enum DescribeAgResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAgResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAgResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAgResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAgResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteAgResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteAgResult?;

    enum DeleteAgResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteAgResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteAgResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteAgResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAgResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据 id 删除高可用组，需确保 AG 中云主机实例已全部删除
public class DeleteAgRequest:JdCloudRequest
{
    /// 高可用组 ID
    var agId:String


    public init(regionId: String,agId:String){
        self.agId = agId
        super.init(regionId: regionId)
    }


    enum DeleteAgRequestRequestCodingKeys: String, CodingKey {
        case agId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAgRequestRequestCodingKeys.self)
        try encoderContainer.encode(agId, forKey: .agId)

    }
}

/// 根据 id 删除高可用组，需确保 AG 中云主机实例已全部删除 
public class DeleteAgResult:NSObject,JdCloudResult
{
}
/// 创建一个高可用组 
public class CreateAgResult:NSObject,JdCloudResult
{
    /// 创建成功的高可用组 id
    var agId:String?



    public override init(){
        super.init()
    }

    enum CreateAgResultCodingKeys: String, CodingKey {
        case agId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAgResultCodingKeys.self)
        if decoderContainer.contains(.agId)
        {
            self.agId = try decoderContainer.decode(String?.self, forKey: .agId)
        }
    }
}
public extension CreateAgResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAgResultCodingKeys.self)
        try encoderContainer.encode(agId, forKey: .agId)
    }
}

///  根据 id 查询高可用组详情
public class DescribeAgRequest:JdCloudRequest
{
    /// 高可用组 ID
    var agId:String


    public init(regionId: String,agId:String){
        self.agId = agId
        super.init(regionId: regionId)
    }


    enum DescribeAgRequestRequestCodingKeys: String, CodingKey {
        case agId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAgRequestRequestCodingKeys.self)
        try encoderContainer.encode(agId, forKey: .agId)

    }
}


///  使用过滤条件查询一个或多个高可用组
public class DescribeAgsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// agName - ag名字，支持模糊匹配
      /// agId - ag id，精确匹配
      /// instanceTemplateId - 实例模板id，精确匹配
      /// vpcId - vpc id，精确匹配
      /// 
    var filters:[Filter?]?




    enum DescribeAgsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAgsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  从高可用组中剔除实例
public class AbandonInstancesRequest:JdCloudRequest
{
    /// 准备剔除出高可用组的实例 id
    var instanceIds:[String?]?

    /// 高可用组 ID
    var agId:String


    public init(regionId: String,agId:String){
        self.agId = agId
        super.init(regionId: regionId)
    }


    enum AbandonInstancesRequestRequestCodingKeys: String, CodingKey {
        case instanceIds
        case agId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AbandonInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceIds, forKey: .instanceIds)
        try encoderContainer.encode(agId, forKey: .agId)

    }
}

