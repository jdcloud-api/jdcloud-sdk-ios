/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   table
   API related to XDATA-DW table

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  获取用户Spark SQL脚本的查询日志
public class GetRasQueryLogRequest:JdCloudRequest
{
    /// 用户名称
    var userName:String

    /// 查询id
    var queryId:String


    public init(regionId: String,userName:String,queryId:String){
        self.userName = userName
        self.queryId = queryId
        super.init(regionId: regionId)
    }


    enum GetRasQueryLogRequestRequestCodingKeys: String, CodingKey {
        case userName
        case queryId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRasQueryLogRequestRequestCodingKeys.self)
        try encoderContainer.encode(userName, forKey: .userName)
        try encoderContainer.encode(queryId, forKey: .queryId)

    }
}

/// 获取用户Spark SQL脚本的查询结果 
public class GetRasQueryResultResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?



    public override init(){
        super.init()
    }

    enum GetRasQueryResultResultCodingKeys: String, CodingKey {
        case status
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRasQueryResultResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension GetRasQueryResultResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRasQueryResultResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 执行用户编写的PySpark脚本 
public class ExecutePySparkQueryResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?

    /// Data
    var data:Int?



    public override init(){
        super.init()
    }

    enum ExecutePySparkQueryResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecutePySparkQueryResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Int?.self, forKey: .data)
        }
    }
}
public extension ExecutePySparkQueryResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecutePySparkQueryResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class GetRasQueryLogResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRasQueryLogResult?;

    enum GetRasQueryLogResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRasQueryLogResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRasQueryLogResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRasQueryLogResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRasQueryLogResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取用户PySpark脚本的执行结果 
public class GetPySparkExecuteResultResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?



    public override init(){
        super.init()
    }

    enum GetPySparkExecuteResultResultCodingKeys: String, CodingKey {
        case status
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPySparkExecuteResultResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension GetPySparkExecuteResultResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPySparkExecuteResultResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class CancelPySparkJobResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CancelPySparkJobResult?;

    enum CancelPySparkJobResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CancelPySparkJobResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CancelPySparkJobResult?.self, forKey: .result) ?? nil
    }
}

public extension CancelPySparkJobResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CancelPySparkJobResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取用户Spark SQL脚本的查询结果
public class GetRasQueryResultRequest:JdCloudRequest
{
    /// 用户名称
    var userName:String

    /// 查询id
    var queryId:String


    public init(regionId: String,userName:String,queryId:String){
        self.userName = userName
        self.queryId = queryId
        super.init(regionId: regionId)
    }


    enum GetRasQueryResultRequestRequestCodingKeys: String, CodingKey {
        case userName
        case queryId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRasQueryResultRequestRequestCodingKeys.self)
        try encoderContainer.encode(userName, forKey: .userName)
        try encoderContainer.encode(queryId, forKey: .queryId)

    }
}


///  执行用户编写的Spark SQL脚本
public class ExecuteRasQueryRequest:JdCloudRequest
{
    /// 数据库名称
    var databaseName:String?

    /// sql脚本
    var sql:String

    /// 用户名称
    var userName:String

    /// 队列名称
    var queueName:String?

    /// 资源名称
    var source:String?

    /// 回调地址名称
    var callBackURL:String?

    /// 实例名称
    var instanceName:String

    /// 实例拥有者名称
    var instanceOwnerName:String?

    /// 是否需要解释
    var isExplain:String?


    public init(regionId: String,sql:String,userName:String,instanceName:String){
        self.sql = sql
        self.userName = userName
        self.instanceName = instanceName
        super.init(regionId: regionId)
    }


    enum ExecuteRasQueryRequestRequestCodingKeys: String, CodingKey {
        case databaseName
        case sql
        case userName
        case queueName
        case source
        case callBackURL
        case instanceName
        case instanceOwnerName
        case isExplain
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecuteRasQueryRequestRequestCodingKeys.self)
        try encoderContainer.encode(databaseName, forKey: .databaseName)
        try encoderContainer.encode(sql, forKey: .sql)
        try encoderContainer.encode(userName, forKey: .userName)
        try encoderContainer.encode(queueName, forKey: .queueName)
        try encoderContainer.encode(source, forKey: .source)
        try encoderContainer.encode(callBackURL, forKey: .callBackURL)
        try encoderContainer.encode(instanceName, forKey: .instanceName)
        try encoderContainer.encode(instanceOwnerName, forKey: .instanceOwnerName)
        try encoderContainer.encode(isExplain, forKey: .isExplain)

    }
}

/// 执行用户编写的Spark SQL脚本 
public class ExecuteRasQueryResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?

    /// Data
    var data:Int?



    public override init(){
        super.init()
    }

    enum ExecuteRasQueryResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecuteRasQueryResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(Int?.self, forKey: .data)
        }
    }
}
public extension ExecuteRasQueryResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecuteRasQueryResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  终止用户PySpark脚本任务
public class CancelPySparkJobRequest:JdCloudRequest
{
    /// 用户名称
    var userName:String

    /// 查询id
    var queryId:String


    public init(regionId: String,userName:String,queryId:String){
        self.userName = userName
        self.queryId = queryId
        super.init(regionId: regionId)
    }


    enum CancelPySparkJobRequestRequestCodingKeys: String, CodingKey {
        case userName
        case queryId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CancelPySparkJobRequestRequestCodingKeys.self)
        try encoderContainer.encode(userName, forKey: .userName)
        try encoderContainer.encode(queryId, forKey: .queryId)

    }
}

/// 获取用户PySpark脚本的执行状态 
public class GetPySparkExecuteStateResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?

    /// Data
    var data:String?



    public override init(){
        super.init()
    }

    enum GetPySparkExecuteStateResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPySparkExecuteStateResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(String?.self, forKey: .data)
        }
    }
}
public extension GetPySparkExecuteStateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPySparkExecuteStateResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  获取用户Spark SQL脚本的查询状态
public class GetRasQueryStateRequest:JdCloudRequest
{
    /// 用户名称
    var userName:String

    /// 查询id名称
    var queryId:String


    public init(regionId: String,userName:String,queryId:String){
        self.userName = userName
        self.queryId = queryId
        super.init(regionId: regionId)
    }


    enum GetRasQueryStateRequestRequestCodingKeys: String, CodingKey {
        case userName
        case queryId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRasQueryStateRequestRequestCodingKeys.self)
        try encoderContainer.encode(userName, forKey: .userName)
        try encoderContainer.encode(queryId, forKey: .queryId)

    }
}

public class GetPySparkExecuteStateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetPySparkExecuteStateResult?;

    enum GetPySparkExecuteStateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPySparkExecuteStateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetPySparkExecuteStateResult?.self, forKey: .result) ?? nil
    }
}

public extension GetPySparkExecuteStateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPySparkExecuteStateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ExecuteRasQueryResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ExecuteRasQueryResult?;

    enum ExecuteRasQueryResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecuteRasQueryResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ExecuteRasQueryResult?.self, forKey: .result) ?? nil
    }
}

public extension ExecuteRasQueryResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecuteRasQueryResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 终止用户Spark SQL脚本查询 
public class CancelRasQueryResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?



    public override init(){
        super.init()
    }

    enum CancelRasQueryResultCodingKeys: String, CodingKey {
        case status
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CancelRasQueryResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension CancelRasQueryResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CancelRasQueryResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 获取用户Spark SQL脚本的查询日志 
public class GetRasQueryLogResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?



    public override init(){
        super.init()
    }

    enum GetRasQueryLogResultCodingKeys: String, CodingKey {
        case status
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRasQueryLogResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension GetRasQueryLogResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRasQueryLogResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class GetPySparkExecuteResultResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetPySparkExecuteResultResult?;

    enum GetPySparkExecuteResultResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPySparkExecuteResultResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetPySparkExecuteResultResult?.self, forKey: .result) ?? nil
    }
}

public extension GetPySparkExecuteResultResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPySparkExecuteResultResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取用户Spark SQL脚本的查询状态 
public class GetRasQueryStateResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?

    /// Data
    var data:String?



    public override init(){
        super.init()
    }

    enum GetRasQueryStateResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRasQueryStateResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(String?.self, forKey: .data)
        }
    }
}
public extension GetRasQueryStateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRasQueryStateResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class GetRasQueryResultResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRasQueryResultResult?;

    enum GetRasQueryResultResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRasQueryResultResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRasQueryResultResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRasQueryResultResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRasQueryResultResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  终止用户Spark SQL脚本查询
public class CancelRasQueryRequest:JdCloudRequest
{
    /// 用户名称
    var userName:String

    /// 查询id
    var queryId:String


    public init(regionId: String,userName:String,queryId:String){
        self.userName = userName
        self.queryId = queryId
        super.init(regionId: regionId)
    }


    enum CancelRasQueryRequestRequestCodingKeys: String, CodingKey {
        case userName
        case queryId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CancelRasQueryRequestRequestCodingKeys.self)
        try encoderContainer.encode(userName, forKey: .userName)
        try encoderContainer.encode(queryId, forKey: .queryId)

    }
}


///  获取用户PySpark脚本的执行结果
public class GetPySparkExecuteResultRequest:JdCloudRequest
{
    /// 用户名称
    var userName:String

    /// 查询id
    var queryId:String


    public init(regionId: String,userName:String,queryId:String){
        self.userName = userName
        self.queryId = queryId
        super.init(regionId: regionId)
    }


    enum GetPySparkExecuteResultRequestRequestCodingKeys: String, CodingKey {
        case userName
        case queryId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPySparkExecuteResultRequestRequestCodingKeys.self)
        try encoderContainer.encode(userName, forKey: .userName)
        try encoderContainer.encode(queryId, forKey: .queryId)

    }
}

public class GetRasQueryStateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRasQueryStateResult?;

    enum GetRasQueryStateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRasQueryStateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRasQueryStateResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRasQueryStateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRasQueryStateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  执行用户编写的PySpark脚本
public class ExecutePySparkQueryRequest:JdCloudRequest
{
    /// PySpark脚本
    var script:String

    /// 用户名称
    var userName:String

    /// 实例名称
    var instanceName:String

    /// 实例拥有者名称
    var instanceOwnerName:String?

    /// 脚本类型名称
    var scriptType:String?


    public init(regionId: String,script:String,userName:String,instanceName:String){
        self.script = script
        self.userName = userName
        self.instanceName = instanceName
        super.init(regionId: regionId)
    }


    enum ExecutePySparkQueryRequestRequestCodingKeys: String, CodingKey {
        case script
        case userName
        case instanceName
        case instanceOwnerName
        case scriptType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecutePySparkQueryRequestRequestCodingKeys.self)
        try encoderContainer.encode(script, forKey: .script)
        try encoderContainer.encode(userName, forKey: .userName)
        try encoderContainer.encode(instanceName, forKey: .instanceName)
        try encoderContainer.encode(instanceOwnerName, forKey: .instanceOwnerName)
        try encoderContainer.encode(scriptType, forKey: .scriptType)

    }
}

public class ExecutePySparkQueryResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ExecutePySparkQueryResult?;

    enum ExecutePySparkQueryResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecutePySparkQueryResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ExecutePySparkQueryResult?.self, forKey: .result) ?? nil
    }
}

public extension ExecutePySparkQueryResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecutePySparkQueryResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取用户PySpark脚本的执行状态
public class GetPySparkExecuteStateRequest:JdCloudRequest
{
    /// 用户名称
    var userName:String

    /// 查询id
    var queryId:String


    public init(regionId: String,userName:String,queryId:String){
        self.userName = userName
        self.queryId = queryId
        super.init(regionId: regionId)
    }


    enum GetPySparkExecuteStateRequestRequestCodingKeys: String, CodingKey {
        case userName
        case queryId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPySparkExecuteStateRequestRequestCodingKeys.self)
        try encoderContainer.encode(userName, forKey: .userName)
        try encoderContainer.encode(queryId, forKey: .queryId)

    }
}

public class CancelRasQueryResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CancelRasQueryResult?;

    enum CancelRasQueryResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CancelRasQueryResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CancelRasQueryResult?.self, forKey: .result) ?? nil
    }
}

public extension CancelRasQueryResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CancelRasQueryResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 终止用户PySpark脚本任务 
public class CancelPySparkJobResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?



    public override init(){
        super.init()
    }

    enum CancelPySparkJobResultCodingKeys: String, CodingKey {
        case status
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CancelPySparkJobResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension CancelPySparkJobResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CancelPySparkJobResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 删除用户实例的指定数据库 
public class DeleteDatabaseResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?



    public override init(){
        super.init()
    }

    enum DeleteDatabaseResultCodingKeys: String, CodingKey {
        case status
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteDatabaseResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DeleteDatabaseResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDatabaseResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 查询用户实例的所有数据库信息 
public class ListDatabaseInfoResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?

    /// Data
    var data:[DwDatabaseInfo?]?



    public override init(){
        super.init()
    }

    enum ListDatabaseInfoResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListDatabaseInfoResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([DwDatabaseInfo?]?.self, forKey: .data)
        }
    }
}
public extension ListDatabaseInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListDatabaseInfoResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 查询用户实例的指定数据库信息 
public class GetDatabaseInfoResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?

    /// Data
    var data:DwDatabase?



    public override init(){
        super.init()
    }

    enum GetDatabaseInfoResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDatabaseInfoResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(DwDatabase?.self, forKey: .data)
        }
    }
}
public extension GetDatabaseInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDatabaseInfoResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class DeleteDatabaseResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteDatabaseResult?;

    enum DeleteDatabaseResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteDatabaseResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteDatabaseResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteDatabaseResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDatabaseResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ListDatabaseInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ListDatabaseInfoResult?;

    enum ListDatabaseInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListDatabaseInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ListDatabaseInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension ListDatabaseInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListDatabaseInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询用户实例的指定数据库信息
public class GetDatabaseInfoRequest:JdCloudRequest
{
    /// 实例名称
    var instanceName:String

    /// 数据库名
    var databaseName:String


    public init(regionId: String,instanceName:String,databaseName:String){
        self.instanceName = instanceName
        self.databaseName = databaseName
        super.init(regionId: regionId)
    }


    enum GetDatabaseInfoRequestRequestCodingKeys: String, CodingKey {
        case instanceName
        case databaseName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDatabaseInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceName, forKey: .instanceName)
        try encoderContainer.encode(databaseName, forKey: .databaseName)

    }
}

/// 创建属于用户实例的数据库 
public class CreateDatabaseResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?



    public override init(){
        super.init()
    }

    enum CreateDatabaseResultCodingKeys: String, CodingKey {
        case status
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDatabaseResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension CreateDatabaseResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDatabaseResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}
public class GetDatabaseInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetDatabaseInfoResult?;

    enum GetDatabaseInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDatabaseInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetDatabaseInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension GetDatabaseInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDatabaseInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询用户实例的所有数据库信息
public class ListDatabaseInfoRequest:JdCloudRequest
{
    /// 实例名称
    var instanceName:String


    public init(regionId: String,instanceName:String){
        self.instanceName = instanceName
        super.init(regionId: regionId)
    }


    enum ListDatabaseInfoRequestRequestCodingKeys: String, CodingKey {
        case instanceName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListDatabaseInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceName, forKey: .instanceName)

    }
}

public class CreateDatabaseResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateDatabaseResult?;

    enum CreateDatabaseResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDatabaseResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateDatabaseResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateDatabaseResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDatabaseResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建属于用户实例的数据库
public class CreateDatabaseRequest:JdCloudRequest
{
    /// 实例名称
    var instanceName:String

    /// 数据库描述信息
    var descriptionValue:String?

    /// 数据库名
    var databaseName:String


    public init(regionId: String,instanceName:String,databaseName:String){
        self.instanceName = instanceName
        self.databaseName = databaseName
        super.init(regionId: regionId)
    }


    enum CreateDatabaseRequestRequestCodingKeys: String, CodingKey {
        case instanceName
        case descriptionValue = "description"
        case databaseName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDatabaseRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceName, forKey: .instanceName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(databaseName, forKey: .databaseName)

    }
}


///  删除用户实例的指定数据库
public class DeleteDatabaseRequest:JdCloudRequest
{
    /// 实例名称
    var instanceName:String

    /// 数据库名
    var databaseName:String


    public init(regionId: String,instanceName:String,databaseName:String){
        self.instanceName = instanceName
        self.databaseName = databaseName
        super.init(regionId: regionId)
    }


    enum DeleteDatabaseRequestRequestCodingKeys: String, CodingKey {
        case instanceName
        case databaseName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDatabaseRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceName, forKey: .instanceName)
        try encoderContainer.encode(databaseName, forKey: .databaseName)

    }
}


///  查询用户所属的实例信息
public class ListInstanceInfoRequest:JdCloudRequest
{
}

public class ListInstanceInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ListInstanceInfoResult?;

    enum ListInstanceInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListInstanceInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ListInstanceInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension ListInstanceInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListInstanceInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询用户所属的实例信息 
public class ListInstanceInfoResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?

    /// Data
    var data:[DwInstance?]?



    public override init(){
        super.init()
    }

    enum ListInstanceInfoResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListInstanceInfoResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([DwInstance?]?.self, forKey: .data)
        }
    }
}
public extension ListInstanceInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListInstanceInfoResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}
public class CreateTableResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateTableResult?;

    enum CreateTableResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateTableResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateTableResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateTableResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateTableResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询用户实例的指定数据表信息
public class GetTableInfoRequest:JdCloudRequest
{
    /// 实例名称
    var instanceName:String

    /// 数据库名称
    var databaseName:String

    /// 数据表名
    var tableName:String


    public init(regionId: String,instanceName:String,databaseName:String,tableName:String){
        self.instanceName = instanceName
        self.databaseName = databaseName
        self.tableName = tableName
        super.init(regionId: regionId)
    }


    enum GetTableInfoRequestRequestCodingKeys: String, CodingKey {
        case instanceName
        case databaseName
        case tableName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTableInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceName, forKey: .instanceName)
        try encoderContainer.encode(databaseName, forKey: .databaseName)
        try encoderContainer.encode(tableName, forKey: .tableName)

    }
}

public class ListTableInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ListTableInfoResult?;

    enum ListTableInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListTableInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ListTableInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension ListTableInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListTableInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetTableInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetTableInfoResult?;

    enum GetTableInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTableInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetTableInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension GetTableInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTableInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除用户实例的指定数据表
public class DeleteTableRequest:JdCloudRequest
{
    /// 实例名称
    var instanceName:String

    /// 数据库名称
    var databaseName:String

    /// 数据表名
    var tableName:String


    public init(regionId: String,instanceName:String,databaseName:String,tableName:String){
        self.instanceName = instanceName
        self.databaseName = databaseName
        self.tableName = tableName
        super.init(regionId: regionId)
    }


    enum DeleteTableRequestRequestCodingKeys: String, CodingKey {
        case instanceName
        case databaseName
        case tableName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteTableRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceName, forKey: .instanceName)
        try encoderContainer.encode(databaseName, forKey: .databaseName)
        try encoderContainer.encode(tableName, forKey: .tableName)

    }
}

/// 删除用户实例的指定数据表 
public class DeleteTableResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?

    /// Data
    var data:AnyObject?



    public override init(){
        super.init()
    }

    enum DeleteTableResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteTableResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension DeleteTableResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteTableResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}
/// 查询用户实例的指定数据表信息 
public class GetTableInfoResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?

    /// Data
    var data:DwTable?



    public override init(){
        super.init()
    }

    enum GetTableInfoResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTableInfoResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode(DwTable?.self, forKey: .data)
        }
    }
}
public extension GetTableInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTableInfoResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}

///  创建用户实例的数据表
public class CreateTableRequest:JdCloudRequest
{
    /// 实例名称
    var instanceName:String

    /// 数据表描述信息
    var dbModelDBTable:DwTableDesc


    public init(regionId: String,instanceName:String,dbModelDBTable:DwTableDesc){
        self.instanceName = instanceName
        self.dbModelDBTable = dbModelDBTable
        super.init(regionId: regionId)
    }


    enum CreateTableRequestRequestCodingKeys: String, CodingKey {
        case instanceName
        case dbModelDBTable
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateTableRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceName, forKey: .instanceName)
        try encoderContainer.encode(dbModelDBTable, forKey: .dbModelDBTable)

    }
}


///  查询用户实例指定数据库下的所有数据表信息
public class ListTableInfoRequest:JdCloudRequest
{
    /// 实例名称
    var instanceName:String

    /// 数据库名称
    var databaseName:String


    public init(regionId: String,instanceName:String,databaseName:String){
        self.instanceName = instanceName
        self.databaseName = databaseName
        super.init(regionId: regionId)
    }


    enum ListTableInfoRequestRequestCodingKeys: String, CodingKey {
        case instanceName
        case databaseName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListTableInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceName, forKey: .instanceName)
        try encoderContainer.encode(databaseName, forKey: .databaseName)

    }
}

public class DeleteTableResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteTableResult?;

    enum DeleteTableResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteTableResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteTableResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteTableResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteTableResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询用户实例指定数据库下的所有数据表信息 
public class ListTableInfoResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?

    /// Data
    var data:[DwTable?]?



    public override init(){
        super.init()
    }

    enum ListTableInfoResultCodingKeys: String, CodingKey {
        case status
        case message
        case data
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ListTableInfoResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.data)
        {
            self.data = try decoderContainer.decode([DwTable?]?.self, forKey: .data)
        }
    }
}
public extension ListTableInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ListTableInfoResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
        try encoderContainer.encode(data, forKey: .data)
    }
}
/// 创建用户实例的数据表 
public class CreateTableResult:NSObject,JdCloudResult
{
    /// Status
    var status:Bool?

    /// Message
    var message:String?



    public override init(){
        super.init()
    }

    enum CreateTableResultCodingKeys: String, CodingKey {
        case status
        case message
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateTableResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
    }
}
public extension CreateTableResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateTableResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(message, forKey: .message)
    }
}
