/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  dwTable
@objc(DwTable)
public class DwTable:NSObject,Codable{
    /// 数据库id
    var id:Int?
    /// 用户名
    var userName:String?
    /// 数据库名
    var dbName:String?
    /// 表名
    var tableName:String?
    /// 创建时间
    var createTime:String?
    /// 最新更新时间
    var lastUpdateTime:String?
    /// 物理存储量
    var physicalStorageCapacity:String?
    /// 类别
    var category:String?
    /// 来源
    var source:String?
    /// 所有者
    var owner:String?
    /// 文件存储类型
    var hiveFileFormat:String?
    /// 是否加密
    var encryption:String?
    /// 位置
    var location:String?
    /// 描述信息
    var comments:String?
    /// hive表权限信息
    var hiveObjectPrivileges:DwHiveObjectPrivileges?
    /// 参数
    var parameters:AnyObject?



    public override init(){
            super.init()
    }

    enum DwTableCodingKeys: String, CodingKey {
        case id
        case userName
        case dbName
        case tableName
        case createTime
        case lastUpdateTime
        case physicalStorageCapacity
        case category
        case source
        case owner
        case hiveFileFormat
        case encryption
        case location
        case comments
        case hiveObjectPrivileges
        case parameters
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DwTableCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int?.self, forKey: .id)
        }
        if decoderContainer.contains(.userName)
        {
            self.userName = try decoderContainer.decode(String?.self, forKey: .userName)
        }
        if decoderContainer.contains(.dbName)
        {
            self.dbName = try decoderContainer.decode(String?.self, forKey: .dbName)
        }
        if decoderContainer.contains(.tableName)
        {
            self.tableName = try decoderContainer.decode(String?.self, forKey: .tableName)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.lastUpdateTime)
        {
            self.lastUpdateTime = try decoderContainer.decode(String?.self, forKey: .lastUpdateTime)
        }
        if decoderContainer.contains(.physicalStorageCapacity)
        {
            self.physicalStorageCapacity = try decoderContainer.decode(String?.self, forKey: .physicalStorageCapacity)
        }
        if decoderContainer.contains(.category)
        {
            self.category = try decoderContainer.decode(String?.self, forKey: .category)
        }
        if decoderContainer.contains(.source)
        {
            self.source = try decoderContainer.decode(String?.self, forKey: .source)
        }
        if decoderContainer.contains(.owner)
        {
            self.owner = try decoderContainer.decode(String?.self, forKey: .owner)
        }
        if decoderContainer.contains(.hiveFileFormat)
        {
            self.hiveFileFormat = try decoderContainer.decode(String?.self, forKey: .hiveFileFormat)
        }
        if decoderContainer.contains(.encryption)
        {
            self.encryption = try decoderContainer.decode(String?.self, forKey: .encryption)
        }
        if decoderContainer.contains(.location)
        {
            self.location = try decoderContainer.decode(String?.self, forKey: .location)
        }
        if decoderContainer.contains(.comments)
        {
            self.comments = try decoderContainer.decode(String?.self, forKey: .comments)
        }
        if decoderContainer.contains(.hiveObjectPrivileges)
        {
            self.hiveObjectPrivileges = try decoderContainer.decode(DwHiveObjectPrivileges?.self, forKey: .hiveObjectPrivileges)
        }
    }
}
public extension DwTable{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DwTableCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(userName, forKey: .userName)
         try encoderContainer.encode(dbName, forKey: .dbName)
         try encoderContainer.encode(tableName, forKey: .tableName)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(lastUpdateTime, forKey: .lastUpdateTime)
         try encoderContainer.encode(physicalStorageCapacity, forKey: .physicalStorageCapacity)
         try encoderContainer.encode(category, forKey: .category)
         try encoderContainer.encode(source, forKey: .source)
         try encoderContainer.encode(owner, forKey: .owner)
         try encoderContainer.encode(hiveFileFormat, forKey: .hiveFileFormat)
         try encoderContainer.encode(encryption, forKey: .encryption)
         try encoderContainer.encode(location, forKey: .location)
         try encoderContainer.encode(comments, forKey: .comments)
         try encoderContainer.encode(hiveObjectPrivileges, forKey: .hiveObjectPrivileges)
    }
}
