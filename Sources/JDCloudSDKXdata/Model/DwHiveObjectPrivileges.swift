/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  dwHiveObjectPrivileges
@objc(DwHiveObjectPrivileges)
public class DwHiveObjectPrivileges:NSObject,Codable{
    /// 状态
    var status:Bool?
    /// 返回信息
    var message:String?
    /// select权限
    var select:Bool?
    /// insert权限
    var insert:Bool?
    /// update权限
    var update:Bool?
    /// delete权限
    var delete:Bool?
    /// drop权限
    var drop:Bool?
    /// create权限
    var create:Bool?
    /// alter权限
    var alter:Bool?
    /// 是否为此表所有者
    var owner:Bool?



    public override init(){
            super.init()
    }

    enum DwHiveObjectPrivilegesCodingKeys: String, CodingKey {
        case status
        case message
        case select
        case insert
        case update
        case delete
        case drop
        case create
        case alter
        case owner
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DwHiveObjectPrivilegesCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Bool?.self, forKey: .status)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.select)
        {
            self.select = try decoderContainer.decode(Bool?.self, forKey: .select)
        }
        if decoderContainer.contains(.insert)
        {
            self.insert = try decoderContainer.decode(Bool?.self, forKey: .insert)
        }
        if decoderContainer.contains(.update)
        {
            self.update = try decoderContainer.decode(Bool?.self, forKey: .update)
        }
        if decoderContainer.contains(.delete)
        {
            self.delete = try decoderContainer.decode(Bool?.self, forKey: .delete)
        }
        if decoderContainer.contains(.drop)
        {
            self.drop = try decoderContainer.decode(Bool?.self, forKey: .drop)
        }
        if decoderContainer.contains(.create)
        {
            self.create = try decoderContainer.decode(Bool?.self, forKey: .create)
        }
        if decoderContainer.contains(.alter)
        {
            self.alter = try decoderContainer.decode(Bool?.self, forKey: .alter)
        }
        if decoderContainer.contains(.owner)
        {
            self.owner = try decoderContainer.decode(Bool?.self, forKey: .owner)
        }
    }
}
public extension DwHiveObjectPrivileges{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DwHiveObjectPrivilegesCodingKeys.self)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(message, forKey: .message)
         try encoderContainer.encode(select, forKey: .select)
         try encoderContainer.encode(insert, forKey: .insert)
         try encoderContainer.encode(update, forKey: .update)
         try encoderContainer.encode(delete, forKey: .delete)
         try encoderContainer.encode(drop, forKey: .drop)
         try encoderContainer.encode(create, forKey: .create)
         try encoderContainer.encode(alter, forKey: .alter)
         try encoderContainer.encode(owner, forKey: .owner)
    }
}
