/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  dwTableDesc
@objc(DwTableDesc)
public class DwTableDesc:NSObject,Codable{
    /// 数据库名
    var dbName:String?
    /// 表名
    var tableName:String?
    /// 存储格式
    var hiveFileFormat:String?
    /// 字段分隔符
    var fieldsDelimit:String?
    /// 行分隔符
    var linesDelimit:String?
    /// 其他serde属性
    var otherSerdeProperties:AnyObject?
    /// 创建时间（自动生成）
    var createTime:String?
    /// 所有者（自动生成）
    var owner:String?
    /// 描述信息
    var comments:String?
    /// 外表位置
    var externalLocation:String?
    /// 参数
    var parameters:AnyObject?
    /// 列信息
    var rows:[DwTableRow?]?



    public override init(){
            super.init()
    }

    enum DwTableDescCodingKeys: String, CodingKey {
        case dbName
        case tableName
        case hiveFileFormat
        case fieldsDelimit
        case linesDelimit
        case otherSerdeProperties
        case createTime
        case owner
        case comments
        case externalLocation
        case parameters
        case rows
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DwTableDescCodingKeys.self)
        if decoderContainer.contains(.dbName)
        {
            self.dbName = try decoderContainer.decode(String?.self, forKey: .dbName)
        }
        if decoderContainer.contains(.tableName)
        {
            self.tableName = try decoderContainer.decode(String?.self, forKey: .tableName)
        }
        if decoderContainer.contains(.hiveFileFormat)
        {
            self.hiveFileFormat = try decoderContainer.decode(String?.self, forKey: .hiveFileFormat)
        }
        if decoderContainer.contains(.fieldsDelimit)
        {
            self.fieldsDelimit = try decoderContainer.decode(String?.self, forKey: .fieldsDelimit)
        }
        if decoderContainer.contains(.linesDelimit)
        {
            self.linesDelimit = try decoderContainer.decode(String?.self, forKey: .linesDelimit)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.owner)
        {
            self.owner = try decoderContainer.decode(String?.self, forKey: .owner)
        }
        if decoderContainer.contains(.comments)
        {
            self.comments = try decoderContainer.decode(String?.self, forKey: .comments)
        }
        if decoderContainer.contains(.externalLocation)
        {
            self.externalLocation = try decoderContainer.decode(String?.self, forKey: .externalLocation)
        }
        if decoderContainer.contains(.rows)
        {
            self.rows = try decoderContainer.decode([DwTableRow?]?.self, forKey: .rows)
        }
    }
}
public extension DwTableDesc{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DwTableDescCodingKeys.self)
         try encoderContainer.encode(dbName, forKey: .dbName)
         try encoderContainer.encode(tableName, forKey: .tableName)
         try encoderContainer.encode(hiveFileFormat, forKey: .hiveFileFormat)
         try encoderContainer.encode(fieldsDelimit, forKey: .fieldsDelimit)
         try encoderContainer.encode(linesDelimit, forKey: .linesDelimit)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(owner, forKey: .owner)
         try encoderContainer.encode(comments, forKey: .comments)
         try encoderContainer.encode(externalLocation, forKey: .externalLocation)
         try encoderContainer.encode(rows, forKey: .rows)
    }
}
