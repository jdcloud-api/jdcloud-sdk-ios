/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   数据计算服务API
   数据计算服务相关API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class XdataJDCloudClient:NSObject,JDCloudClient{
    
    private final var xdataJDCloudClient:XdataJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        xdataJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "xdata.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        xdataJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "xdata/" + "v1"
    
    public let serviceName: String = "xdata"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func cancelRasQueryAsync(request:CancelRasQueryRequest,requestComplation:@escaping ExecuteResult<CancelRasQueryResult>) throws {
        xdataJDCloudClient = self
        try CancelRasQueryExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createDatabaseAsync(request:CreateDatabaseRequest,requestComplation:@escaping ExecuteResult<CreateDatabaseResult>) throws {
        xdataJDCloudClient = self
        try CreateDatabaseExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getPySparkExecuteStateAsync(request:GetPySparkExecuteStateRequest,requestComplation:@escaping ExecuteResult<GetPySparkExecuteStateResult>) throws {
        xdataJDCloudClient = self
        try GetPySparkExecuteStateExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listDatabaseInfoAsync(request:ListDatabaseInfoRequest,requestComplation:@escaping ExecuteResult<ListDatabaseInfoResult>) throws {
        xdataJDCloudClient = self
        try ListDatabaseInfoExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDatabaseInfoAsync(request:GetDatabaseInfoRequest,requestComplation:@escaping ExecuteResult<GetDatabaseInfoResult>) throws {
        xdataJDCloudClient = self
        try GetDatabaseInfoExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listTableInfoAsync(request:ListTableInfoRequest,requestComplation:@escaping ExecuteResult<ListTableInfoResult>) throws {
        xdataJDCloudClient = self
        try ListTableInfoExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRasQueryStateAsync(request:GetRasQueryStateRequest,requestComplation:@escaping ExecuteResult<GetRasQueryStateResult>) throws {
        xdataJDCloudClient = self
        try GetRasQueryStateExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func executeRasQueryAsync(request:ExecuteRasQueryRequest,requestComplation:@escaping ExecuteResult<ExecuteRasQueryResult>) throws {
        xdataJDCloudClient = self
        try ExecuteRasQueryExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func cancelPySparkJobAsync(request:CancelPySparkJobRequest,requestComplation:@escaping ExecuteResult<CancelPySparkJobResult>) throws {
        xdataJDCloudClient = self
        try CancelPySparkJobExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getPySparkExecuteResultAsync(request:GetPySparkExecuteResultRequest,requestComplation:@escaping ExecuteResult<GetPySparkExecuteResultResult>) throws {
        xdataJDCloudClient = self
        try GetPySparkExecuteResultExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func listInstanceInfoAsync(request:ListInstanceInfoRequest,requestComplation:@escaping ExecuteResult<ListInstanceInfoResult>) throws {
        xdataJDCloudClient = self
        try ListInstanceInfoExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteDatabaseAsync(request:DeleteDatabaseRequest,requestComplation:@escaping ExecuteResult<DeleteDatabaseResult>) throws {
        xdataJDCloudClient = self
        try DeleteDatabaseExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getTableInfoAsync(request:GetTableInfoRequest,requestComplation:@escaping ExecuteResult<GetTableInfoResult>) throws {
        xdataJDCloudClient = self
        try GetTableInfoExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func executePySparkQueryAsync(request:ExecutePySparkQueryRequest,requestComplation:@escaping ExecuteResult<ExecutePySparkQueryResult>) throws {
        xdataJDCloudClient = self
        try ExecutePySparkQueryExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRasQueryResultAsync(request:GetRasQueryResultRequest,requestComplation:@escaping ExecuteResult<GetRasQueryResultResult>) throws {
        xdataJDCloudClient = self
        try GetRasQueryResultExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createTableAsync(request:CreateTableRequest,requestComplation:@escaping ExecuteResult<CreateTableResult>) throws {
        xdataJDCloudClient = self
        try CreateTableExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRasQueryLogAsync(request:GetRasQueryLogRequest,requestComplation:@escaping ExecuteResult<GetRasQueryLogResult>) throws {
        xdataJDCloudClient = self
        try GetRasQueryLogExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteTableAsync(request:DeleteTableRequest,requestComplation:@escaping ExecuteResult<DeleteTableResult>) throws {
        xdataJDCloudClient = self
        try DeleteTableExecutor(jdCloudClient: xdataJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension XdataJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "xdata.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
