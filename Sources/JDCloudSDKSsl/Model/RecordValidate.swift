/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  recordValidate
@objc(RecordValidate)
public class RecordValidate:NSObject,Codable{
    /// 校验类型，DNS或File
    var validateType:String?
    /// 校验Key
    var validateKey:String?
    /// 记录类型
    var recordType:String?
    /// 校验Value
    var validateValue:String?



    public override init(){
            super.init()
    }

    enum RecordValidateCodingKeys: String, CodingKey {
        case validateType
        case validateKey
        case recordType
        case validateValue
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RecordValidateCodingKeys.self)
        if decoderContainer.contains(.validateType)
        {
            self.validateType = try decoderContainer.decode(String?.self, forKey: .validateType)
        }
        if decoderContainer.contains(.validateKey)
        {
            self.validateKey = try decoderContainer.decode(String?.self, forKey: .validateKey)
        }
        if decoderContainer.contains(.recordType)
        {
            self.recordType = try decoderContainer.decode(String?.self, forKey: .recordType)
        }
        if decoderContainer.contains(.validateValue)
        {
            self.validateValue = try decoderContainer.decode(String?.self, forKey: .validateValue)
        }
    }
}
public extension RecordValidate{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RecordValidateCodingKeys.self)
         try encoderContainer.encode(validateType, forKey: .validateType)
         try encoderContainer.encode(validateKey, forKey: .validateKey)
         try encoderContainer.encode(recordType, forKey: .recordType)
         try encoderContainer.encode(validateValue, forKey: .validateValue)
    }
}
