/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  downloadCertDesc
@objc(DownloadCertDesc)
public class DownloadCertDesc:NSObject,Codable{
    /// 证书Id
    var certId:String?
    /// 证书名称
    var certName:String?
    /// 私钥
    var keyFile:String?
    /// 证书
    var certFile:String?
    /// 对私钥文件使用sha256算法计算的摘要信息
    var digest:String?



    public override init(){
            super.init()
    }

    enum DownloadCertDescCodingKeys: String, CodingKey {
        case certId
        case certName
        case keyFile
        case certFile
        case digest
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DownloadCertDescCodingKeys.self)
        if decoderContainer.contains(.certId)
        {
            self.certId = try decoderContainer.decode(String?.self, forKey: .certId)
        }
        if decoderContainer.contains(.certName)
        {
            self.certName = try decoderContainer.decode(String?.self, forKey: .certName)
        }
        if decoderContainer.contains(.keyFile)
        {
            self.keyFile = try decoderContainer.decode(String?.self, forKey: .keyFile)
        }
        if decoderContainer.contains(.certFile)
        {
            self.certFile = try decoderContainer.decode(String?.self, forKey: .certFile)
        }
        if decoderContainer.contains(.digest)
        {
            self.digest = try decoderContainer.decode(String?.self, forKey: .digest)
        }
    }
}
public extension DownloadCertDesc{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DownloadCertDescCodingKeys.self)
         try encoderContainer.encode(certId, forKey: .certId)
         try encoderContainer.encode(certName, forKey: .certName)
         try encoderContainer.encode(keyFile, forKey: .keyFile)
         try encoderContainer.encode(certFile, forKey: .certFile)
         try encoderContainer.encode(digest, forKey: .digest)
    }
}
