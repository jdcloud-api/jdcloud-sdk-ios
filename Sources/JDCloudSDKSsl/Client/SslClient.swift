/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD SSL数字证书管理 API
   提供SSL数字证书，证书申购记录管理相关信息接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class SslJDCloudClient:NSObject,JDCloudClient{
    
    private final var sslJDCloudClient:SslJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        sslJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "ssl.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        sslJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "ssl/" + "v1"
    
    public let serviceName: String = "ssl"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func updateCertAsync(request:UpdateCertRequest,requestComplation:@escaping ExecuteResult<UpdateCertResult>) throws {
        sslJDCloudClient = self
        try UpdateCertExecutor(jdCloudClient: sslJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCertAsync(request:DescribeCertRequest,requestComplation:@escaping ExecuteResult<DescribeCertResult>) throws {
        sslJDCloudClient = self
        try DescribeCertExecutor(jdCloudClient: sslJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func uploadCertAsync(request:UploadCertRequest,requestComplation:@escaping ExecuteResult<UploadCertResult>) throws {
        sslJDCloudClient = self
        try UploadCertExecutor(jdCloudClient: sslJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteCertsAsync(request:DeleteCertsRequest,requestComplation:@escaping ExecuteResult<DeleteCertsResult>) throws {
        sslJDCloudClient = self
        try DeleteCertsExecutor(jdCloudClient: sslJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func downloadCertAsync(request:DownloadCertRequest,requestComplation:@escaping ExecuteResult<DownloadCertResult>) throws {
        sslJDCloudClient = self
        try DownloadCertExecutor(jdCloudClient: sslJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeCertsAsync(request:DescribeCertsRequest,requestComplation:@escaping ExecuteResult<DescribeCertsResult>) throws {
        sslJDCloudClient = self
        try DescribeCertsExecutor(jdCloudClient: sslJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateCertNameAsync(request:UpdateCertNameRequest,requestComplation:@escaping ExecuteResult<UpdateCertNameResult>) throws {
        sslJDCloudClient = self
        try UpdateCertNameExecutor(jdCloudClient: sslJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension SslJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "ssl.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
