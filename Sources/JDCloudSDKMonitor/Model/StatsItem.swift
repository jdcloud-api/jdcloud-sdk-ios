/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  statsItem
@objc(StatsItem)
public class StatsItem:NSObject,Codable{
    /// 聚合方式
    var aggregateFunc:String?
    /// 单位
    var calculateUnit:String?
    /// 数据点
    var dps:[DataPoint?]?
    /// metric
    var metric:String?
    /// metric名称
    var metricName:String?
    /// tags
    var tags:[String:String?]?



    public override init(){
            super.init()
    }

    enum StatsItemCodingKeys: String, CodingKey {
        case aggregateFunc
        case calculateUnit
        case dps
        case metric
        case metricName
        case tags
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StatsItemCodingKeys.self)
        if decoderContainer.contains(.aggregateFunc)
        {
            self.aggregateFunc = try decoderContainer.decode(String?.self, forKey: .aggregateFunc)
        }
        if decoderContainer.contains(.calculateUnit)
        {
            self.calculateUnit = try decoderContainer.decode(String?.self, forKey: .calculateUnit)
        }
        if decoderContainer.contains(.dps)
        {
            self.dps = try decoderContainer.decode([DataPoint?]?.self, forKey: .dps)
        }
        if decoderContainer.contains(.metric)
        {
            self.metric = try decoderContainer.decode(String?.self, forKey: .metric)
        }
        if decoderContainer.contains(.metricName)
        {
            self.metricName = try decoderContainer.decode(String?.self, forKey: .metricName)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([String:String?]?.self, forKey: .tags)
        }
    }
}
public extension StatsItem{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StatsItemCodingKeys.self)
         try encoderContainer.encode(aggregateFunc, forKey: .aggregateFunc)
         try encoderContainer.encode(calculateUnit, forKey: .calculateUnit)
         try encoderContainer.encode(dps, forKey: .dps)
         try encoderContainer.encode(metric, forKey: .metric)
         try encoderContainer.encode(metricName, forKey: .metricName)
         try encoderContainer.encode(tags, forKey: .tags)
    }
}
