/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  batchCreateAlarmsSpec
@objc(BatchCreateAlarmsSpec)
public class BatchCreateAlarmsSpec:NSObject,Codable{
    /// 幂等性校验参数，最长36位
    /// Required:true
    var clientToken:String
    /// 通知的联系人
    var contacts:[BaseContact?]?
    /// 地域
    var datacenter:String?
    /// 是否启用, 1表示启用规则，0表示禁用规则，默认为1
    var enabled:Int64?
    /// 报警规则对应实例列表，每次最多100个，例如&quot;[&#39;resourceId1&#39;,&#39;resourceId2&#39;]&quot;
    /// Required:true
    var resourceIds:[String?]
    /// 规则类型, 1表示资源监控，6表示站点监控，默认为1
    var ruleType:Int64?
    /// 要批量创建的规则列表
    /// Required:true
    var rules:[BaseRule?]
    /// 是否保存为模板
    var saveTemplate:Bool?
    /// 产品线标识，规则对应的serviceCode
    /// Required:true
    var serviceCode:String
    /// 模板名称，保存模板时，不能为空
    var templateName:String?
    /// 产品线标识，保存为模板时，模板对应的serviceCode
    var templateServiceCode:String?
    /// 回调content 注：仅webHookUrl和webHookContent均不为空时，才会创建webHook
    var webHookContent:String?
    /// webHook协议
    var webHookProtocol:String?
    /// 回调secret，用户请求签名，防伪造
    var webHookSecret:String?
    /// 回调url
    var webHookUrl:String?



    public  init(clientToken:String,resourceIds:[String?],rules:[BaseRule?],serviceCode:String){
             self.clientToken = clientToken
             self.resourceIds = resourceIds
             self.rules = rules
             self.serviceCode = serviceCode
    }

    enum BatchCreateAlarmsSpecCodingKeys: String, CodingKey {
        case clientToken
        case contacts
        case datacenter
        case enabled
        case resourceIds
        case ruleType
        case rules
        case saveTemplate
        case serviceCode
        case templateName
        case templateServiceCode
        case webHookContent
        case webHookProtocol
        case webHookSecret
        case webHookUrl
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BatchCreateAlarmsSpecCodingKeys.self)
        self.clientToken = try decoderContainer.decode(String.self, forKey: .clientToken)
        if decoderContainer.contains(.contacts)
        {
            self.contacts = try decoderContainer.decode([BaseContact?]?.self, forKey: .contacts)
        }
        if decoderContainer.contains(.datacenter)
        {
            self.datacenter = try decoderContainer.decode(String?.self, forKey: .datacenter)
        }
        if decoderContainer.contains(.enabled)
        {
            self.enabled = try decoderContainer.decode(Int64?.self, forKey: .enabled)
        }
        self.resourceIds = try decoderContainer.decode([String?].self, forKey: .resourceIds)
        if decoderContainer.contains(.ruleType)
        {
            self.ruleType = try decoderContainer.decode(Int64?.self, forKey: .ruleType)
        }
        self.rules = try decoderContainer.decode([BaseRule?].self, forKey: .rules)
        if decoderContainer.contains(.saveTemplate)
        {
            self.saveTemplate = try decoderContainer.decode(Bool?.self, forKey: .saveTemplate)
        }
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
        if decoderContainer.contains(.templateName)
        {
            self.templateName = try decoderContainer.decode(String?.self, forKey: .templateName)
        }
        if decoderContainer.contains(.templateServiceCode)
        {
            self.templateServiceCode = try decoderContainer.decode(String?.self, forKey: .templateServiceCode)
        }
        if decoderContainer.contains(.webHookContent)
        {
            self.webHookContent = try decoderContainer.decode(String?.self, forKey: .webHookContent)
        }
        if decoderContainer.contains(.webHookProtocol)
        {
            self.webHookProtocol = try decoderContainer.decode(String?.self, forKey: .webHookProtocol)
        }
        if decoderContainer.contains(.webHookSecret)
        {
            self.webHookSecret = try decoderContainer.decode(String?.self, forKey: .webHookSecret)
        }
        if decoderContainer.contains(.webHookUrl)
        {
            self.webHookUrl = try decoderContainer.decode(String?.self, forKey: .webHookUrl)
        }
    }
}
public extension BatchCreateAlarmsSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BatchCreateAlarmsSpecCodingKeys.self)
         try encoderContainer.encode(clientToken, forKey: .clientToken)
         try encoderContainer.encode(contacts, forKey: .contacts)
         try encoderContainer.encode(datacenter, forKey: .datacenter)
         try encoderContainer.encode(enabled, forKey: .enabled)
         try encoderContainer.encode(resourceIds, forKey: .resourceIds)
         try encoderContainer.encode(ruleType, forKey: .ruleType)
         try encoderContainer.encode(rules, forKey: .rules)
         try encoderContainer.encode(saveTemplate, forKey: .saveTemplate)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(templateName, forKey: .templateName)
         try encoderContainer.encode(templateServiceCode, forKey: .templateServiceCode)
         try encoderContainer.encode(webHookContent, forKey: .webHookContent)
         try encoderContainer.encode(webHookProtocol, forKey: .webHookProtocol)
         try encoderContainer.encode(webHookSecret, forKey: .webHookSecret)
         try encoderContainer.encode(webHookUrl, forKey: .webHookUrl)
    }
}
