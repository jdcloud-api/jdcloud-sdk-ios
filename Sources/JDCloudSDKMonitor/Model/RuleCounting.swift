/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  ruleCounting
@objc(RuleCounting)
public class RuleCounting:NSObject,Codable{
    /// 处于报警状态的规则个数  status:2
    var alarmRuleCount:Int64?
    /// 未启用的规则 数量
    var disableRuleCount:Int64?
    /// 处于正常状态的规则个数  status：1
    var normalRuleCount:Int64?
    /// 报警联系人列表
    var serviceCode:String?
    /// 监控规则 总数
    var totalRuleCount:Int64?
    /// 处于数据不足状态的规则 个数  status:4
    var unknownRuleCount:Int64?



    public override init(){
            super.init()
    }

    enum RuleCountingCodingKeys: String, CodingKey {
        case alarmRuleCount
        case disableRuleCount
        case normalRuleCount
        case serviceCode
        case totalRuleCount
        case unknownRuleCount
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RuleCountingCodingKeys.self)
        if decoderContainer.contains(.alarmRuleCount)
        {
            self.alarmRuleCount = try decoderContainer.decode(Int64?.self, forKey: .alarmRuleCount)
        }
        if decoderContainer.contains(.disableRuleCount)
        {
            self.disableRuleCount = try decoderContainer.decode(Int64?.self, forKey: .disableRuleCount)
        }
        if decoderContainer.contains(.normalRuleCount)
        {
            self.normalRuleCount = try decoderContainer.decode(Int64?.self, forKey: .normalRuleCount)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.totalRuleCount)
        {
            self.totalRuleCount = try decoderContainer.decode(Int64?.self, forKey: .totalRuleCount)
        }
        if decoderContainer.contains(.unknownRuleCount)
        {
            self.unknownRuleCount = try decoderContainer.decode(Int64?.self, forKey: .unknownRuleCount)
        }
    }
}
public extension RuleCounting{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RuleCountingCodingKeys.self)
         try encoderContainer.encode(alarmRuleCount, forKey: .alarmRuleCount)
         try encoderContainer.encode(disableRuleCount, forKey: .disableRuleCount)
         try encoderContainer.encode(normalRuleCount, forKey: .normalRuleCount)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(totalRuleCount, forKey: .totalRuleCount)
         try encoderContainer.encode(unknownRuleCount, forKey: .unknownRuleCount)
    }
}
