/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  updateCmAlarmSpec
@objc(UpdateCmAlarmSpec)
public class UpdateCmAlarmSpec:NSObject,Codable{
    /// 统计方法：平均值&#x3D;avg、最大值&#x3D;max、最小值&#x3D;min、总和&#x3D;sum
    /// Required:true
    var calculation:String
    /// 通知的联系组，如 [“联系组1”,”联系组2”]
    var contactGroups:[String?]?
    /// 通知的联系人，如 [“联系人1”,”联系人2”]
    var contactPersons:[String?]?
    /// 取样频次
    var downSample:String?
    /// 根据产品线查询可用监控项列表 接口 返回的Metric字段
    /// Required:true
    var metric:String
    /// 通知周期 单位：小时
    var noticePeriod:Int64?
    /// &gt;&#x3D;、&gt;、&lt;、&lt;&#x3D;、&#x3D;、！&#x3D;
    /// Required:true
    var operation:String
    /// 统计周期（单位：分钟）目前支持的取值：2，5，15，30，60
    /// Required:true
    var period:Int64
    /// 产品名称
    /// Required:true
    var serviceCode:String
    /// 阈值
    /// Required:true
    var threshold:Double
    /// 连续多少次后报警，可选值:1,2,3,5
    /// Required:true
    var times:Int64



    public  init(calculation:String,metric:String,operation:String,period:Int64,serviceCode:String,threshold:Double,times:Int64){
             self.calculation = calculation
             self.metric = metric
             self.operation = operation
             self.period = period
             self.serviceCode = serviceCode
             self.threshold = threshold
             self.times = times
    }

    enum UpdateCmAlarmSpecCodingKeys: String, CodingKey {
        case calculation
        case contactGroups
        case contactPersons
        case downSample
        case metric
        case noticePeriod
        case operation
        case period
        case serviceCode
        case threshold
        case times
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateCmAlarmSpecCodingKeys.self)
        self.calculation = try decoderContainer.decode(String.self, forKey: .calculation)
        if decoderContainer.contains(.contactGroups)
        {
            self.contactGroups = try decoderContainer.decode([String?]?.self, forKey: .contactGroups)
        }
        if decoderContainer.contains(.contactPersons)
        {
            self.contactPersons = try decoderContainer.decode([String?]?.self, forKey: .contactPersons)
        }
        if decoderContainer.contains(.downSample)
        {
            self.downSample = try decoderContainer.decode(String?.self, forKey: .downSample)
        }
        self.metric = try decoderContainer.decode(String.self, forKey: .metric)
        if decoderContainer.contains(.noticePeriod)
        {
            self.noticePeriod = try decoderContainer.decode(Int64?.self, forKey: .noticePeriod)
        }
        self.operation = try decoderContainer.decode(String.self, forKey: .operation)
        self.period = try decoderContainer.decode(Int64.self, forKey: .period)
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
        self.threshold = try decoderContainer.decode(Double.self, forKey: .threshold)
        self.times = try decoderContainer.decode(Int64.self, forKey: .times)
    }
}
public extension UpdateCmAlarmSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateCmAlarmSpecCodingKeys.self)
         try encoderContainer.encode(calculation, forKey: .calculation)
         try encoderContainer.encode(contactGroups, forKey: .contactGroups)
         try encoderContainer.encode(contactPersons, forKey: .contactPersons)
         try encoderContainer.encode(downSample, forKey: .downSample)
         try encoderContainer.encode(metric, forKey: .metric)
         try encoderContainer.encode(noticePeriod, forKey: .noticePeriod)
         try encoderContainer.encode(operation, forKey: .operation)
         try encoderContainer.encode(period, forKey: .period)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(threshold, forKey: .threshold)
         try encoderContainer.encode(times, forKey: .times)
    }
}
