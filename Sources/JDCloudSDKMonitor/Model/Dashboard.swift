/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  dashboard
@objc(Dashboard)
public class Dashboard:NSObject,Codable{
    /// CreatedTime
    var createdTime:Int64?
    /// DashboardId
    var dashboardId:String?
    /// Focused
    var focused:String?
    /// Name
    var name:String?
    /// Pin
    var pin:String?
    /// UpdatedTime
    var updatedTime:Int64?
    /// WidgetCount
    var widgetCount:Int64?



    public override init(){
            super.init()
    }

    enum DashboardCodingKeys: String, CodingKey {
        case createdTime
        case dashboardId
        case focused
        case name
        case pin
        case updatedTime
        case widgetCount
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DashboardCodingKeys.self)
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(Int64?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.dashboardId)
        {
            self.dashboardId = try decoderContainer.decode(String?.self, forKey: .dashboardId)
        }
        if decoderContainer.contains(.focused)
        {
            self.focused = try decoderContainer.decode(String?.self, forKey: .focused)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.updatedTime)
        {
            self.updatedTime = try decoderContainer.decode(Int64?.self, forKey: .updatedTime)
        }
        if decoderContainer.contains(.widgetCount)
        {
            self.widgetCount = try decoderContainer.decode(Int64?.self, forKey: .widgetCount)
        }
    }
}
public extension Dashboard{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DashboardCodingKeys.self)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(dashboardId, forKey: .dashboardId)
         try encoderContainer.encode(focused, forKey: .focused)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(updatedTime, forKey: .updatedTime)
         try encoderContainer.encode(widgetCount, forKey: .widgetCount)
    }
}
