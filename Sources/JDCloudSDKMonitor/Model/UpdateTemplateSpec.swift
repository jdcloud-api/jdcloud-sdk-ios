/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  updateTemplateSpec
@objc(UpdateTemplateSpec)
public class UpdateTemplateSpec:NSObject,Codable{
    /// 模板描述
    var descriptionValue:String?
    /// 规则的资源类型
    /// Required:true
    var ruleServiceCode:String
    /// 模板的资源类型
    /// Required:true
    var serviceCode:String
    /// 模板ID
    /// Required:true
    var templateId:Int64
    /// 模板名称
    /// Required:true
    var templateName:String
    /// 模板内包含的规则
    /// Required:true
    var templateRules:[BaseRuleT?]



    public  init(ruleServiceCode:String,serviceCode:String,templateId:Int64,templateName:String,templateRules:[BaseRuleT?]){
             self.ruleServiceCode = ruleServiceCode
             self.serviceCode = serviceCode
             self.templateId = templateId
             self.templateName = templateName
             self.templateRules = templateRules
    }

    enum UpdateTemplateSpecCodingKeys: String, CodingKey {
        case descriptionValue = "description"
        case ruleServiceCode
        case serviceCode
        case templateId
        case templateName
        case templateRules
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateTemplateSpecCodingKeys.self)
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        self.ruleServiceCode = try decoderContainer.decode(String.self, forKey: .ruleServiceCode)
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
        self.templateId = try decoderContainer.decode(Int64.self, forKey: .templateId)
        self.templateName = try decoderContainer.decode(String.self, forKey: .templateName)
        self.templateRules = try decoderContainer.decode([BaseRuleT?].self, forKey: .templateRules)
    }
}
public extension UpdateTemplateSpec{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateTemplateSpecCodingKeys.self)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(ruleServiceCode, forKey: .ruleServiceCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(templateId, forKey: .templateId)
         try encoderContainer.encode(templateName, forKey: .templateName)
         try encoderContainer.encode(templateRules, forKey: .templateRules)
    }
}
