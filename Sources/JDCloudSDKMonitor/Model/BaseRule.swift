/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  baseRule
@objc(BaseRule)
public class BaseRule:NSObject,Codable{
    /// 弹性伸缩组ID
    var autoScalingPolicyId:String?
    /// 单位
    /// Required:true
    var calculateUnit:String
    /// 统计方法，必须与定义的metric一致，可选值列表：avg,sum,max,min
    /// Required:true
    var calculation:String
    /// 降采样函数
    /// Required:true
    var downSample:String
    /// 监控项
    /// Required:true
    var metric:String
    /// NoticeLevel
    var noticeLevel:NoticeLevel?
    /// 通知周期，单位：小时
    /// Required:true
    var noticePeriod:Int64
    /// 报警比较符，只能为以下几种lte(&lt;&#x3D;),lt(&lt;),gt(&gt;),gte(&gt;&#x3D;),eq(&#x3D;&#x3D;),ne(!&#x3D;)
    /// Required:true
    var operation:String
    /// 查询指标的周期，单位为分钟,目前支持的取值：1,2，5，15，30，60
    /// Required:true
    var period:Int64
    /// 规则类型, 1云监控的规则， 6站点监控。默认为1
    var ruleType:Int64?
    /// 多值标签
    var tags:[String:String?]?
    /// 报警阈值，目前只开放数值类型功能
    /// Required:true
    var threshold:Double
    /// 连续探测几次都满足阈值条件时报警，可选值:1,2,3,5,10,15,30,60
    /// Required:true
    var times:Int64



    public  init(calculateUnit:String,calculation:String,downSample:String,metric:String,noticePeriod:Int64,operation:String,period:Int64,threshold:Double,times:Int64){
             self.calculateUnit = calculateUnit
             self.calculation = calculation
             self.downSample = downSample
             self.metric = metric
             self.noticePeriod = noticePeriod
             self.operation = operation
             self.period = period
             self.threshold = threshold
             self.times = times
    }

    enum BaseRuleCodingKeys: String, CodingKey {
        case autoScalingPolicyId
        case calculateUnit
        case calculation
        case downSample
        case metric
        case noticeLevel
        case noticePeriod
        case operation
        case period
        case ruleType
        case tags
        case threshold
        case times
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BaseRuleCodingKeys.self)
        if decoderContainer.contains(.autoScalingPolicyId)
        {
            self.autoScalingPolicyId = try decoderContainer.decode(String?.self, forKey: .autoScalingPolicyId)
        }
        self.calculateUnit = try decoderContainer.decode(String.self, forKey: .calculateUnit)
        self.calculation = try decoderContainer.decode(String.self, forKey: .calculation)
        self.downSample = try decoderContainer.decode(String.self, forKey: .downSample)
        self.metric = try decoderContainer.decode(String.self, forKey: .metric)
        if decoderContainer.contains(.noticeLevel)
        {
            self.noticeLevel = try decoderContainer.decode(NoticeLevel?.self, forKey: .noticeLevel)
        }
        self.noticePeriod = try decoderContainer.decode(Int64.self, forKey: .noticePeriod)
        self.operation = try decoderContainer.decode(String.self, forKey: .operation)
        self.period = try decoderContainer.decode(Int64.self, forKey: .period)
        if decoderContainer.contains(.ruleType)
        {
            self.ruleType = try decoderContainer.decode(Int64?.self, forKey: .ruleType)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([String:String?]?.self, forKey: .tags)
        }
        self.threshold = try decoderContainer.decode(Double.self, forKey: .threshold)
        self.times = try decoderContainer.decode(Int64.self, forKey: .times)
    }
}
public extension BaseRule{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BaseRuleCodingKeys.self)
         try encoderContainer.encode(autoScalingPolicyId, forKey: .autoScalingPolicyId)
         try encoderContainer.encode(calculateUnit, forKey: .calculateUnit)
         try encoderContainer.encode(calculation, forKey: .calculation)
         try encoderContainer.encode(downSample, forKey: .downSample)
         try encoderContainer.encode(metric, forKey: .metric)
         try encoderContainer.encode(noticeLevel, forKey: .noticeLevel)
         try encoderContainer.encode(noticePeriod, forKey: .noticePeriod)
         try encoderContainer.encode(operation, forKey: .operation)
         try encoderContainer.encode(period, forKey: .period)
         try encoderContainer.encode(ruleType, forKey: .ruleType)
         try encoderContainer.encode(tags, forKey: .tags)
         try encoderContainer.encode(threshold, forKey: .threshold)
         try encoderContainer.encode(times, forKey: .times)
    }
}
