/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  null
@objc(HandleTag)
public class HandleTag:NSObject,Codable{
    /// 处理编码 1、复制元数据打tag 2 进行原数据上打tag
    /// Required:true
    var handleTagCode:Int64
    /// 对于进行复制数据点打tag，需要提供metric 前缀
    var prefixMetric:String?
    /// 打标签数据
    /// Required:true
    var handleTags:[DataTag?]



    public  init(handleTagCode:Int64,handleTags:[DataTag?]){
             self.handleTagCode = handleTagCode
             self.handleTags = handleTags
    }

    enum HandleTagCodingKeys: String, CodingKey {
        case handleTagCode
        case prefixMetric
        case handleTags
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: HandleTagCodingKeys.self)
        self.handleTagCode = try decoderContainer.decode(Int64.self, forKey: .handleTagCode)
        if decoderContainer.contains(.prefixMetric)
        {
            self.prefixMetric = try decoderContainer.decode(String?.self, forKey: .prefixMetric)
        }
        self.handleTags = try decoderContainer.decode([DataTag?].self, forKey: .handleTags)
    }
}
public extension HandleTag{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: HandleTagCodingKeys.self)
         try encoderContainer.encode(handleTagCode, forKey: .handleTagCode)
         try encoderContainer.encode(prefixMetric, forKey: .prefixMetric)
         try encoderContainer.encode(handleTags, forKey: .handleTags)
    }
}
