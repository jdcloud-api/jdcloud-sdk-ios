/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  applyTemplateSpec
@objc(ApplyTemplateSpec)
public class ApplyTemplateSpec:NSObject,Codable{
    /// 幂等性校验参数,最长36位
    /// Required:true
    var clientToken:String
    /// 联系人列表
    var contacts:[BaseContact?]?
    /// dataCenters，该资源所处地域，与resourceIds一一对应
    /// Required:true
    var dataCenters:[String?]
    /// 资源ID列表，resourceIds数量为1--40，每一项不能为空或包含*
    /// Required:true
    var resourceIds:[String?]
    /// 资源类型
    /// Required:true
    var serviceCode:String
    /// 标签组，模板下面规则对应的tags，与resourceIds一一对应
    var tagsArray:[[String:String?]?]?
    /// 模板类型，1表示默认模板，2表示用户自定义模板
    /// Required:true
    var templateType:Int64
    /// 回调content 注:仅webHookUrl和webHookContent均不为空时,才会创建webHook
    var webHookContent:String?
    /// webHook协议,https或http 注:此处需和webHookUrl相匹配
    var webHookProtocol:String?
    /// 回调secret,用户请求签名,防伪造
    var webHookSecret:String?
    /// 回调url
    var webHookUrl:String?



    public  init(clientToken:String,dataCenters:[String?],resourceIds:[String?],serviceCode:String,templateType:Int64){
             self.clientToken = clientToken
             self.dataCenters = dataCenters
             self.resourceIds = resourceIds
             self.serviceCode = serviceCode
             self.templateType = templateType
    }

    enum ApplyTemplateSpecCodingKeys: String, CodingKey {
        case clientToken
        case contacts
        case dataCenters
        case resourceIds
        case serviceCode
        case tagsArray
        case templateType
        case webHookContent
        case webHookProtocol
        case webHookSecret
        case webHookUrl
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ApplyTemplateSpecCodingKeys.self)
        self.clientToken = try decoderContainer.decode(String.self, forKey: .clientToken)
        if decoderContainer.contains(.contacts)
        {
            self.contacts = try decoderContainer.decode([BaseContact?]?.self, forKey: .contacts)
        }
        self.dataCenters = try decoderContainer.decode([String?].self, forKey: .dataCenters)
        self.resourceIds = try decoderContainer.decode([String?].self, forKey: .resourceIds)
        self.serviceCode = try decoderContainer.decode(String.self, forKey: .serviceCode)
        if decoderContainer.contains(.tagsArray)
        {
            self.tagsArray = try decoderContainer.decode([[String:String?]?]?.self, forKey: .tagsArray)
        }
        self.templateType = try decoderContainer.decode(Int64.self, forKey: .templateType)
        if decoderContainer.contains(.webHookContent)
        {
            self.webHookContent = try decoderContainer.decode(String?.self, forKey: .webHookContent)
        }
        if decoderContainer.contains(.webHookProtocol)
        {
            self.webHookProtocol = try decoderContainer.decode(String?.self, forKey: .webHookProtocol)
        }
        if decoderContainer.contains(.webHookSecret)
        {
            self.webHookSecret = try decoderContainer.decode(String?.self, forKey: .webHookSecret)
        }
        if decoderContainer.contains(.webHookUrl)
        {
            self.webHookUrl = try decoderContainer.decode(String?.self, forKey: .webHookUrl)
        }
    }
}
public extension ApplyTemplateSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ApplyTemplateSpecCodingKeys.self)
         try encoderContainer.encode(clientToken, forKey: .clientToken)
         try encoderContainer.encode(contacts, forKey: .contacts)
         try encoderContainer.encode(dataCenters, forKey: .dataCenters)
         try encoderContainer.encode(resourceIds, forKey: .resourceIds)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(tagsArray, forKey: .tagsArray)
         try encoderContainer.encode(templateType, forKey: .templateType)
         try encoderContainer.encode(webHookContent, forKey: .webHookContent)
         try encoderContainer.encode(webHookProtocol, forKey: .webHookProtocol)
         try encoderContainer.encode(webHookSecret, forKey: .webHookSecret)
         try encoderContainer.encode(webHookUrl, forKey: .webHookUrl)
    }
}
