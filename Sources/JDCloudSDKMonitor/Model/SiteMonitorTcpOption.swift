/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  siteMonitorTcpOption
@objc(SiteMonitorTcpOption)
public class SiteMonitorTcpOption:NSObject,Codable{
    /// ReqContent
    var reqContent:String?
    /// ReqContentType
    var reqContentType:String?
    /// ResCheck
    var resCheck:String?
    /// ResCheckType
    var resCheckType:String?
    /// Timeout
    var timeout:Int64?



    public override init(){
            super.init()
    }

    enum SiteMonitorTcpOptionCodingKeys: String, CodingKey {
        case reqContent
        case reqContentType
        case resCheck
        case resCheckType
        case timeout
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SiteMonitorTcpOptionCodingKeys.self)
        if decoderContainer.contains(.reqContent)
        {
            self.reqContent = try decoderContainer.decode(String?.self, forKey: .reqContent)
        }
        if decoderContainer.contains(.reqContentType)
        {
            self.reqContentType = try decoderContainer.decode(String?.self, forKey: .reqContentType)
        }
        if decoderContainer.contains(.resCheck)
        {
            self.resCheck = try decoderContainer.decode(String?.self, forKey: .resCheck)
        }
        if decoderContainer.contains(.resCheckType)
        {
            self.resCheckType = try decoderContainer.decode(String?.self, forKey: .resCheckType)
        }
        if decoderContainer.contains(.timeout)
        {
            self.timeout = try decoderContainer.decode(Int64?.self, forKey: .timeout)
        }
    }
}
public extension SiteMonitorTcpOption{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SiteMonitorTcpOptionCodingKeys.self)
         try encoderContainer.encode(reqContent, forKey: .reqContent)
         try encoderContainer.encode(reqContentType, forKey: .reqContentType)
         try encoderContainer.encode(resCheck, forKey: .resCheck)
         try encoderContainer.encode(resCheckType, forKey: .resCheckType)
         try encoderContainer.encode(timeout, forKey: .timeout)
    }
}
