/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  event
@objc(Event)
public class Event:NSObject,Codable{
    /// 探测结果 1:探测成功  2：探测失败  3：探测超时
    var probeResult:Int64?
    /// 插件状态 1：正常  2：异常
    var probeStatus:Int64?
    /// 时间戳
    var timestamp:Int64?



    public override init(){
            super.init()
    }

    enum EventCodingKeys: String, CodingKey {
        case probeResult
        case probeStatus
        case timestamp
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EventCodingKeys.self)
        if decoderContainer.contains(.probeResult)
        {
            self.probeResult = try decoderContainer.decode(Int64?.self, forKey: .probeResult)
        }
        if decoderContainer.contains(.probeStatus)
        {
            self.probeStatus = try decoderContainer.decode(Int64?.self, forKey: .probeStatus)
        }
        if decoderContainer.contains(.timestamp)
        {
            self.timestamp = try decoderContainer.decode(Int64?.self, forKey: .timestamp)
        }
    }
}
public extension Event{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EventCodingKeys.self)
         try encoderContainer.encode(probeResult, forKey: .probeResult)
         try encoderContainer.encode(probeStatus, forKey: .probeStatus)
         try encoderContainer.encode(timestamp, forKey: .timestamp)
    }
}
