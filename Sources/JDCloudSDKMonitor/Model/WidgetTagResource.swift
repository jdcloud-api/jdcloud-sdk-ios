/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  widgetTagResource
@objc(WidgetTagResource)
public class WidgetTagResource:NSObject,Codable{
    /// Id
    var id:String?
    /// Key
    var key:String?
    /// RegionId
    var regionId:String?
    /// Value
    var value:String?



    public override init(){
            super.init()
    }

    enum WidgetTagResourceCodingKeys: String, CodingKey {
        case id
        case key
        case regionId
        case value
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: WidgetTagResourceCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.key)
        {
            self.key = try decoderContainer.decode(String?.self, forKey: .key)
        }
        if decoderContainer.contains(.regionId)
        {
            self.regionId = try decoderContainer.decode(String?.self, forKey: .regionId)
        }
        if decoderContainer.contains(.value)
        {
            self.value = try decoderContainer.decode(String?.self, forKey: .value)
        }
    }
}
public extension WidgetTagResource{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: WidgetTagResourceCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(key, forKey: .key)
         try encoderContainer.encode(regionId, forKey: .regionId)
         try encoderContainer.encode(value, forKey: .value)
    }
}
