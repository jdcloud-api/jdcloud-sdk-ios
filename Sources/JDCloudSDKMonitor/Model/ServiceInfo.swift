/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  serviceInfo
@objc(ServiceInfo)
public class ServiceInfo:NSObject,Codable{
    /// 产品线下的分组信息
    var metricGroup:[GroupInfo?]?
    /// 上报延迟
    var metricsTimeDelay:Int64?
    /// 产品线ServiceCode
    var serviceCode:String?
    /// 产品线名称
    var serviceName:String?
    /// 上报的时间间隔
    var timeInterval:Int64?



    public override init(){
            super.init()
    }

    enum ServiceInfoCodingKeys: String, CodingKey {
        case metricGroup
        case metricsTimeDelay
        case serviceCode
        case serviceName
        case timeInterval
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ServiceInfoCodingKeys.self)
        if decoderContainer.contains(.metricGroup)
        {
            self.metricGroup = try decoderContainer.decode([GroupInfo?]?.self, forKey: .metricGroup)
        }
        if decoderContainer.contains(.metricsTimeDelay)
        {
            self.metricsTimeDelay = try decoderContainer.decode(Int64?.self, forKey: .metricsTimeDelay)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.serviceName)
        {
            self.serviceName = try decoderContainer.decode(String?.self, forKey: .serviceName)
        }
        if decoderContainer.contains(.timeInterval)
        {
            self.timeInterval = try decoderContainer.decode(Int64?.self, forKey: .timeInterval)
        }
    }
}
public extension ServiceInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ServiceInfoCodingKeys.self)
         try encoderContainer.encode(metricGroup, forKey: .metricGroup)
         try encoderContainer.encode(metricsTimeDelay, forKey: .metricsTimeDelay)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(serviceName, forKey: .serviceName)
         try encoderContainer.encode(timeInterval, forKey: .timeInterval)
    }
}
