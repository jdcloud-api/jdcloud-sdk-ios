/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  dataTag
@objc(DataTag)
public class DataTag:NSObject,Codable{
    /// 标签名称
    /// Required:true
    var tagKey:String
    /// 标签值
    /// Required:true
    var tagValue:String
    /// 标签的处理方式，1 代表对于新增标签的时候，如果数据点存在该标签，跳过不处理，2、代表新增标签的时候，如果标签存在进行覆盖
    var operation:Int64?



    public  init(tagKey:String,tagValue:String){
             self.tagKey = tagKey
             self.tagValue = tagValue
    }

    enum DataTagCodingKeys: String, CodingKey {
        case tagKey
        case tagValue
        case operation
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DataTagCodingKeys.self)
        self.tagKey = try decoderContainer.decode(String.self, forKey: .tagKey)
        self.tagValue = try decoderContainer.decode(String.self, forKey: .tagValue)
        if decoderContainer.contains(.operation)
        {
            self.operation = try decoderContainer.decode(Int64?.self, forKey: .operation)
        }
    }
}
public extension DataTag{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DataTagCodingKeys.self)
         try encoderContainer.encode(tagKey, forKey: .tagKey)
         try encoderContainer.encode(tagValue, forKey: .tagValue)
         try encoderContainer.encode(operation, forKey: .operation)
    }
}
