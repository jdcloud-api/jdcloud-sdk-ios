/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  probe
@objc(Probe)
public class Probe:NSObject,Codable{
    /// 探测源所在云主机内网ip
    /// Required:true
    var privateIp:String
    /// 探测源所在云主机公网ip
    var publicIp:String?
    /// 探测源所在region
    /// Required:true
    var region:String
    /// 探测源所在云主机的uuid
    /// Required:true
    var uuid:String



    public  init(privateIp:String,region:String,uuid:String){
             self.privateIp = privateIp
             self.region = region
             self.uuid = uuid
    }

    enum ProbeCodingKeys: String, CodingKey {
        case privateIp
        case publicIp
        case region
        case uuid
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ProbeCodingKeys.self)
        self.privateIp = try decoderContainer.decode(String.self, forKey: .privateIp)
        if decoderContainer.contains(.publicIp)
        {
            self.publicIp = try decoderContainer.decode(String?.self, forKey: .publicIp)
        }
        self.region = try decoderContainer.decode(String.self, forKey: .region)
        self.uuid = try decoderContainer.decode(String.self, forKey: .uuid)
    }
}
public extension Probe{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ProbeCodingKeys.self)
         try encoderContainer.encode(privateIp, forKey: .privateIp)
         try encoderContainer.encode(publicIp, forKey: .publicIp)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(uuid, forKey: .uuid)
    }
}
