/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  taskInfo
@objc(TaskInfo)
public class TaskInfo:NSObject,Codable{
    /// 探测异常数  ，null代表缺值。只统计探测失败，超时的个数。
    var abnormalCount:Int64?
    /// task的探测地址
    var address:String?
    /// 任务状态[false：己禁用，true：己启用]
    var enabled:Bool?
    /// task名称
    var name:String?
    /// task的可用率
    var probeAvailability:Double?
    /// 该task的探测源个数
    var probeCount:Int64?
    /// task的探测类型，1：http，2：telnet
    var probeType:Int64?
    /// task的探测平均响应时间
    var responseTime:Double?
    /// task的id
    var taskId:String?



    public override init(){
            super.init()
    }

    enum TaskInfoCodingKeys: String, CodingKey {
        case abnormalCount
        case address
        case enabled
        case name
        case probeAvailability
        case probeCount
        case probeType
        case responseTime
        case taskId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TaskInfoCodingKeys.self)
        if decoderContainer.contains(.abnormalCount)
        {
            self.abnormalCount = try decoderContainer.decode(Int64?.self, forKey: .abnormalCount)
        }
        if decoderContainer.contains(.address)
        {
            self.address = try decoderContainer.decode(String?.self, forKey: .address)
        }
        if decoderContainer.contains(.enabled)
        {
            self.enabled = try decoderContainer.decode(Bool?.self, forKey: .enabled)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.probeAvailability)
        {
            self.probeAvailability = try decoderContainer.decode(Double?.self, forKey: .probeAvailability)
        }
        if decoderContainer.contains(.probeCount)
        {
            self.probeCount = try decoderContainer.decode(Int64?.self, forKey: .probeCount)
        }
        if decoderContainer.contains(.probeType)
        {
            self.probeType = try decoderContainer.decode(Int64?.self, forKey: .probeType)
        }
        if decoderContainer.contains(.responseTime)
        {
            self.responseTime = try decoderContainer.decode(Double?.self, forKey: .responseTime)
        }
        if decoderContainer.contains(.taskId)
        {
            self.taskId = try decoderContainer.decode(String?.self, forKey: .taskId)
        }
    }
}
public extension TaskInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TaskInfoCodingKeys.self)
         try encoderContainer.encode(abnormalCount, forKey: .abnormalCount)
         try encoderContainer.encode(address, forKey: .address)
         try encoderContainer.encode(enabled, forKey: .enabled)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(probeAvailability, forKey: .probeAvailability)
         try encoderContainer.encode(probeCount, forKey: .probeCount)
         try encoderContainer.encode(probeType, forKey: .probeType)
         try encoderContainer.encode(responseTime, forKey: .responseTime)
         try encoderContainer.encode(taskId, forKey: .taskId)
    }
}
