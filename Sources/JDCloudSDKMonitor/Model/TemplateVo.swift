/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  templateVo
@objc(TemplateVo)
public class TemplateVo:NSObject,Codable{
    /// CreateTime
    var createTime:String?
    /// 模板描述
    var descriptionValue:String?
    /// 用户
    var pin:String?
    /// 模板内包含的规则数量
    var rulesCount:Int64?
    /// 模板所属资源类型
    var serviceCode:String?
    /// 模板id
    var templateId:Int64?
    /// 模板名称
    var templateName:String?
    /// 模板内包含的规则
    var templateRules:[AlarmVo?]?
    /// 模板内包含的提供给前端的拼接好的规则
    var templateRulesString:[String?]?
    /// 模板类型，区分默认模板和用户自定义模板：1表示默认模板，2表示用户自定义模板
    var templateType:Int64?
    /// UpdateTime
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum TemplateVoCodingKeys: String, CodingKey {
        case createTime
        case descriptionValue = "description"
        case pin
        case rulesCount
        case serviceCode
        case templateId
        case templateName
        case templateRules
        case templateRulesString
        case templateType
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TemplateVoCodingKeys.self)
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.rulesCount)
        {
            self.rulesCount = try decoderContainer.decode(Int64?.self, forKey: .rulesCount)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.templateId)
        {
            self.templateId = try decoderContainer.decode(Int64?.self, forKey: .templateId)
        }
        if decoderContainer.contains(.templateName)
        {
            self.templateName = try decoderContainer.decode(String?.self, forKey: .templateName)
        }
        if decoderContainer.contains(.templateRules)
        {
            self.templateRules = try decoderContainer.decode([AlarmVo?]?.self, forKey: .templateRules)
        }
        if decoderContainer.contains(.templateRulesString)
        {
            self.templateRulesString = try decoderContainer.decode([String?]?.self, forKey: .templateRulesString)
        }
        if decoderContainer.contains(.templateType)
        {
            self.templateType = try decoderContainer.decode(Int64?.self, forKey: .templateType)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension TemplateVo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TemplateVoCodingKeys.self)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(rulesCount, forKey: .rulesCount)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(templateId, forKey: .templateId)
         try encoderContainer.encode(templateName, forKey: .templateName)
         try encoderContainer.encode(templateRules, forKey: .templateRules)
         try encoderContainer.encode(templateRulesString, forKey: .templateRulesString)
         try encoderContainer.encode(templateType, forKey: .templateType)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
