/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  describedAlarmHistory
@objc(DescribedAlarmHistory)
public class DescribedAlarmHistory:NSObject,Codable{
    /// Alarm
    var alarm:DescribedAlarm?
    /// 告警联系人
    var contacts:[DescribedNoticeContacts?]?
    /// 触发的告警级别。从低到高分别为‘common’, ‘critical’, ‘fatal’
    var noticeLevelTriggered:String?
    /// 告警时间
    var noticeTime:String?
    /// 告警值
    var value:Double?



    public override init(){
            super.init()
    }

    enum DescribedAlarmHistoryCodingKeys: String, CodingKey {
        case alarm
        case contacts
        case noticeLevelTriggered
        case noticeTime
        case value
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribedAlarmHistoryCodingKeys.self)
        if decoderContainer.contains(.alarm)
        {
            self.alarm = try decoderContainer.decode(DescribedAlarm?.self, forKey: .alarm)
        }
        if decoderContainer.contains(.contacts)
        {
            self.contacts = try decoderContainer.decode([DescribedNoticeContacts?]?.self, forKey: .contacts)
        }
        if decoderContainer.contains(.noticeLevelTriggered)
        {
            self.noticeLevelTriggered = try decoderContainer.decode(String?.self, forKey: .noticeLevelTriggered)
        }
        if decoderContainer.contains(.noticeTime)
        {
            self.noticeTime = try decoderContainer.decode(String?.self, forKey: .noticeTime)
        }
        if decoderContainer.contains(.value)
        {
            self.value = try decoderContainer.decode(Double?.self, forKey: .value)
        }
    }
}
public extension DescribedAlarmHistory{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribedAlarmHistoryCodingKeys.self)
         try encoderContainer.encode(alarm, forKey: .alarm)
         try encoderContainer.encode(contacts, forKey: .contacts)
         try encoderContainer.encode(noticeLevelTriggered, forKey: .noticeLevelTriggered)
         try encoderContainer.encode(noticeTime, forKey: .noticeTime)
         try encoderContainer.encode(value, forKey: .value)
    }
}
