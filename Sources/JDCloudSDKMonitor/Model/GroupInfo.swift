/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  groupInfo
@objc(GroupInfo)
public class GroupInfo:NSObject,Codable{
    /// 监控图的展示方式
    var charts:[Chart?]?
    /// 分组groupCode
    var groupCode:String?
    /// 分组名称
    var groupName:String?
    /// 分组内的metric列表
    var metrics:[String?]?
    /// 分组下metric对应的tags
    var tags:[String:String?]?
    /// 分组的webCode
    var webCode:String?



    public override init(){
            super.init()
    }

    enum GroupInfoCodingKeys: String, CodingKey {
        case charts
        case groupCode
        case groupName
        case metrics
        case tags
        case webCode
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GroupInfoCodingKeys.self)
        if decoderContainer.contains(.charts)
        {
            self.charts = try decoderContainer.decode([Chart?]?.self, forKey: .charts)
        }
        if decoderContainer.contains(.groupCode)
        {
            self.groupCode = try decoderContainer.decode(String?.self, forKey: .groupCode)
        }
        if decoderContainer.contains(.groupName)
        {
            self.groupName = try decoderContainer.decode(String?.self, forKey: .groupName)
        }
        if decoderContainer.contains(.metrics)
        {
            self.metrics = try decoderContainer.decode([String?]?.self, forKey: .metrics)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([String:String?]?.self, forKey: .tags)
        }
        if decoderContainer.contains(.webCode)
        {
            self.webCode = try decoderContainer.decode(String?.self, forKey: .webCode)
        }
    }
}
public extension GroupInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GroupInfoCodingKeys.self)
         try encoderContainer.encode(charts, forKey: .charts)
         try encoderContainer.encode(groupCode, forKey: .groupCode)
         try encoderContainer.encode(groupName, forKey: .groupName)
         try encoderContainer.encode(metrics, forKey: .metrics)
         try encoderContainer.encode(tags, forKey: .tags)
         try encoderContainer.encode(webCode, forKey: .webCode)
    }
}
