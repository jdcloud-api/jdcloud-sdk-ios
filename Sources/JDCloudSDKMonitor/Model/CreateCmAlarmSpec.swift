/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createCmAlarmSpec
@objc(CreateCmAlarmSpec)
public class CreateCmAlarmSpec:NSObject,Codable{
    /// 幂等性校验参数,最长36位
    /// Required:true
    var clientToken:String
    /// CreateCmAlarmSpecValue
    /// Required:true
    var createCmAlarmSpecValue:CreateCmAlarmParam



    public  init(clientToken:String,createCmAlarmSpecValue:CreateCmAlarmParam){
             self.clientToken = clientToken
             self.createCmAlarmSpecValue = createCmAlarmSpecValue
    }

    enum CreateCmAlarmSpecCodingKeys: String, CodingKey {
        case clientToken
        case createCmAlarmSpecValue = "createCmAlarmSpec"
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateCmAlarmSpecCodingKeys.self)
        self.clientToken = try decoderContainer.decode(String.self, forKey: .clientToken)
        self.createCmAlarmSpecValue = try decoderContainer.decode(CreateCmAlarmParam.self, forKey: .createCmAlarmSpecValue)
    }
}
public extension CreateCmAlarmSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateCmAlarmSpecCodingKeys.self)
         try encoderContainer.encode(clientToken, forKey: .clientToken)
         try encoderContainer.encode(createCmAlarmSpecValue, forKey: .createCmAlarmSpecValue)
    }
}
