/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  widgetPosition
@objc(WidgetPosition)
public class WidgetPosition:NSObject,Codable{
    /// Col
    var col:Int?
    /// CreatedTime
    var createdTime:Int64?
    /// Order
    var order:Int?
    /// Row
    var row:Int?
    /// SizeX
    var sizeX:Int?
    /// SizeY
    var sizeY:Int?
    /// UpdatedTime
    var updatedTime:Int64?



    public override init(){
            super.init()
    }

    enum WidgetPositionCodingKeys: String, CodingKey {
        case col
        case createdTime
        case order
        case row
        case sizeX
        case sizeY
        case updatedTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: WidgetPositionCodingKeys.self)
        if decoderContainer.contains(.col)
        {
            self.col = try decoderContainer.decode(Int?.self, forKey: .col)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(Int64?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.order)
        {
            self.order = try decoderContainer.decode(Int?.self, forKey: .order)
        }
        if decoderContainer.contains(.row)
        {
            self.row = try decoderContainer.decode(Int?.self, forKey: .row)
        }
        if decoderContainer.contains(.sizeX)
        {
            self.sizeX = try decoderContainer.decode(Int?.self, forKey: .sizeX)
        }
        if decoderContainer.contains(.sizeY)
        {
            self.sizeY = try decoderContainer.decode(Int?.self, forKey: .sizeY)
        }
        if decoderContainer.contains(.updatedTime)
        {
            self.updatedTime = try decoderContainer.decode(Int64?.self, forKey: .updatedTime)
        }
    }
}
public extension WidgetPosition{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: WidgetPositionCodingKeys.self)
         try encoderContainer.encode(col, forKey: .col)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(order, forKey: .order)
         try encoderContainer.encode(row, forKey: .row)
         try encoderContainer.encode(sizeX, forKey: .sizeX)
         try encoderContainer.encode(sizeY, forKey: .sizeY)
         try encoderContainer.encode(updatedTime, forKey: .updatedTime)
    }
}
