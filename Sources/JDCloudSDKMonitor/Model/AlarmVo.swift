/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  alarmVo
@objc(AlarmVo)
public class AlarmVo:NSObject,Codable{
    /// 监控项单位
    var calculateUnit:String?
    /// 统计方法：平均值&#x3D;avg、最大值&#x3D;max、最小值&#x3D;min
    var calculation:String?
    /// 联系人列表
    var contacts:[BaseContact?]?
    /// CreateTime
    var createTime:String?
    /// 是否删除 1正常，0删除
    var deleted:Int64?
    /// 规则ID
    var id:Int64?
    /// 监控项ID
    var metricId:Int64?
    /// 监控项名称
    var metricName:String?
    /// NoticeLevel
    var noticeLevel:NoticeLevel?
    /// 通知周期
    var noticePeriod:Int64?
    /// 报警比较符，只能为以下几种lte(&lt;&#x3D;),lt(&lt;),gt(&gt;),gte(&gt;&#x3D;),eq(&#x3D;&#x3D;),ne(!&#x3D;)
    var operation:String?
    /// 统计周期（单位：分钟）
    var period:Int64?
    /// 规则类型
    var ruleType:Int64?
    /// 规则所属资源类型
    var serviceCode:String?
    /// 监控项附属信息
    var tag:String?
    /// 多值标签
    var tags:[String:String?]?
    /// 阈值
    var threshold:Double?
    /// 连续多少次后报警
    var times:Int64?
    /// UpdateTime
    var updateTime:String?



    public override init(){
            super.init()
    }

    enum AlarmVoCodingKeys: String, CodingKey {
        case calculateUnit
        case calculation
        case contacts
        case createTime
        case deleted
        case id
        case metricId
        case metricName
        case noticeLevel
        case noticePeriod
        case operation
        case period
        case ruleType
        case serviceCode
        case tag
        case tags
        case threshold
        case times
        case updateTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AlarmVoCodingKeys.self)
        if decoderContainer.contains(.calculateUnit)
        {
            self.calculateUnit = try decoderContainer.decode(String?.self, forKey: .calculateUnit)
        }
        if decoderContainer.contains(.calculation)
        {
            self.calculation = try decoderContainer.decode(String?.self, forKey: .calculation)
        }
        if decoderContainer.contains(.contacts)
        {
            self.contacts = try decoderContainer.decode([BaseContact?]?.self, forKey: .contacts)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.deleted)
        {
            self.deleted = try decoderContainer.decode(Int64?.self, forKey: .deleted)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(Int64?.self, forKey: .id)
        }
        if decoderContainer.contains(.metricId)
        {
            self.metricId = try decoderContainer.decode(Int64?.self, forKey: .metricId)
        }
        if decoderContainer.contains(.metricName)
        {
            self.metricName = try decoderContainer.decode(String?.self, forKey: .metricName)
        }
        if decoderContainer.contains(.noticeLevel)
        {
            self.noticeLevel = try decoderContainer.decode(NoticeLevel?.self, forKey: .noticeLevel)
        }
        if decoderContainer.contains(.noticePeriod)
        {
            self.noticePeriod = try decoderContainer.decode(Int64?.self, forKey: .noticePeriod)
        }
        if decoderContainer.contains(.operation)
        {
            self.operation = try decoderContainer.decode(String?.self, forKey: .operation)
        }
        if decoderContainer.contains(.period)
        {
            self.period = try decoderContainer.decode(Int64?.self, forKey: .period)
        }
        if decoderContainer.contains(.ruleType)
        {
            self.ruleType = try decoderContainer.decode(Int64?.self, forKey: .ruleType)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.tag)
        {
            self.tag = try decoderContainer.decode(String?.self, forKey: .tag)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([String:String?]?.self, forKey: .tags)
        }
        if decoderContainer.contains(.threshold)
        {
            self.threshold = try decoderContainer.decode(Double?.self, forKey: .threshold)
        }
        if decoderContainer.contains(.times)
        {
            self.times = try decoderContainer.decode(Int64?.self, forKey: .times)
        }
        if decoderContainer.contains(.updateTime)
        {
            self.updateTime = try decoderContainer.decode(String?.self, forKey: .updateTime)
        }
    }
}
public extension AlarmVo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AlarmVoCodingKeys.self)
         try encoderContainer.encode(calculateUnit, forKey: .calculateUnit)
         try encoderContainer.encode(calculation, forKey: .calculation)
         try encoderContainer.encode(contacts, forKey: .contacts)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(deleted, forKey: .deleted)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(metricId, forKey: .metricId)
         try encoderContainer.encode(metricName, forKey: .metricName)
         try encoderContainer.encode(noticeLevel, forKey: .noticeLevel)
         try encoderContainer.encode(noticePeriod, forKey: .noticePeriod)
         try encoderContainer.encode(operation, forKey: .operation)
         try encoderContainer.encode(period, forKey: .period)
         try encoderContainer.encode(ruleType, forKey: .ruleType)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(tag, forKey: .tag)
         try encoderContainer.encode(tags, forKey: .tags)
         try encoderContainer.encode(threshold, forKey: .threshold)
         try encoderContainer.encode(times, forKey: .times)
         try encoderContainer.encode(updateTime, forKey: .updateTime)
    }
}
