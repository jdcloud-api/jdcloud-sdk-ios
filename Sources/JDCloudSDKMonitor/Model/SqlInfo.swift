/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  数据详情
@objc(SqlInfo)
public class SqlInfo:NSObject,Codable{
    /// 产品标识，目前统一用jcloud
    var appCode:String?
    /// 客户端IP地址
    var client_net_address:String?
    /// 库名
    var database:String?
    /// SQL已执行时间（单位s）
    var execution_time:Int64?
    /// 用户名
    var loginname:String?
    /// 监控项
    var metric:String?
    /// 资源所在的地域
    var region:String?
    /// 资源的uuid
    var resourceId:String?
    /// 资源的类型
    var serviceCode:String?
    /// 会话ID
    var session_id:String?
    /// SQL详细文本
    var sqlstr:String?
    /// SQL开始执行的时间
    var start_time:String?
    /// SQL会话请求状态
    var status:String?
    /// 毫秒级时间戳
    var time:Int64?
    /// 上报的监控值
    var value:Int64?



    public override init(){
            super.init()
    }

    enum SqlInfoCodingKeys: String, CodingKey {
        case appCode
        case client_net_address
        case database
        case execution_time
        case loginname
        case metric
        case region
        case resourceId
        case serviceCode
        case session_id
        case sqlstr
        case start_time
        case status
        case time
        case value
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SqlInfoCodingKeys.self)
        if decoderContainer.contains(.appCode)
        {
            self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        }
        if decoderContainer.contains(.client_net_address)
        {
            self.client_net_address = try decoderContainer.decode(String?.self, forKey: .client_net_address)
        }
        if decoderContainer.contains(.database)
        {
            self.database = try decoderContainer.decode(String?.self, forKey: .database)
        }
        if decoderContainer.contains(.execution_time)
        {
            self.execution_time = try decoderContainer.decode(Int64?.self, forKey: .execution_time)
        }
        if decoderContainer.contains(.loginname)
        {
            self.loginname = try decoderContainer.decode(String?.self, forKey: .loginname)
        }
        if decoderContainer.contains(.metric)
        {
            self.metric = try decoderContainer.decode(String?.self, forKey: .metric)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.resourceId)
        {
            self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        }
        if decoderContainer.contains(.serviceCode)
        {
            self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        }
        if decoderContainer.contains(.session_id)
        {
            self.session_id = try decoderContainer.decode(String?.self, forKey: .session_id)
        }
        if decoderContainer.contains(.sqlstr)
        {
            self.sqlstr = try decoderContainer.decode(String?.self, forKey: .sqlstr)
        }
        if decoderContainer.contains(.start_time)
        {
            self.start_time = try decoderContainer.decode(String?.self, forKey: .start_time)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.time)
        {
            self.time = try decoderContainer.decode(Int64?.self, forKey: .time)
        }
        if decoderContainer.contains(.value)
        {
            self.value = try decoderContainer.decode(Int64?.self, forKey: .value)
        }
    }
}
public extension SqlInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SqlInfoCodingKeys.self)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(client_net_address, forKey: .client_net_address)
         try encoderContainer.encode(database, forKey: .database)
         try encoderContainer.encode(execution_time, forKey: .execution_time)
         try encoderContainer.encode(loginname, forKey: .loginname)
         try encoderContainer.encode(metric, forKey: .metric)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(session_id, forKey: .session_id)
         try encoderContainer.encode(sqlstr, forKey: .sqlstr)
         try encoderContainer.encode(start_time, forKey: .start_time)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(time, forKey: .time)
         try encoderContainer.encode(value, forKey: .value)
    }
}
