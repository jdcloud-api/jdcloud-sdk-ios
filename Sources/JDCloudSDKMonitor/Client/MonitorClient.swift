/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JCLOUD MONITOR API
   monitor API

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class MonitorJDCloudClient:NSObject,JDCloudClient{
    
    private final var monitorJDCloudClient:MonitorJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        monitorJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "monitor.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        monitorJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "monitor/" + "v2"
    
    public let serviceName: String = "monitor"
    
    public let version: String = "v2"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func describeMetricDataAsync(request:DescribeMetricDataRequest,requestComplation:@escaping ExecuteResult<DescribeMetricDataResult>) throws {
        monitorJDCloudClient = self
        try DescribeMetricDataExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createAlarmAsync(request:CreateAlarmRequest,requestComplation:@escaping ExecuteResult<CreateAlarmResult>) throws {
        monitorJDCloudClient = self
        try CreateAlarmExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeServicesAsync(request:DescribeServicesRequest,requestComplation:@escaping ExecuteResult<DescribeServicesResult>) throws {
        monitorJDCloudClient = self
        try DescribeServicesExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeMetricsForAlarmAsync(request:DescribeMetricsForAlarmRequest,requestComplation:@escaping ExecuteResult<DescribeMetricsForAlarmResult>) throws {
        monitorJDCloudClient = self
        try DescribeMetricsForAlarmExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAlarmContactsAsync(request:DescribeAlarmContactsRequest,requestComplation:@escaping ExecuteResult<DescribeAlarmContactsResult>) throws {
        monitorJDCloudClient = self
        try DescribeAlarmContactsExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAlarmHistoryAsync(request:DescribeAlarmHistoryRequest,requestComplation:@escaping ExecuteResult<DescribeAlarmHistoryResult>) throws {
        monitorJDCloudClient = self
        try DescribeAlarmHistoryExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAlarmAsync(request:DescribeAlarmRequest,requestComplation:@escaping ExecuteResult<DescribeAlarmResult>) throws {
        monitorJDCloudClient = self
        try DescribeAlarmExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func lastDownsampleAsync(request:LastDownsampleRequest,requestComplation:@escaping ExecuteResult<LastDownsampleResult>) throws {
        monitorJDCloudClient = self
        try LastDownsampleExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteAlarmsAsync(request:DeleteAlarmsRequest,requestComplation:@escaping ExecuteResult<DeleteAlarmsResult>) throws {
        monitorJDCloudClient = self
        try DeleteAlarmsExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeProductsForAlarmAsync(request:DescribeProductsForAlarmRequest,requestComplation:@escaping ExecuteResult<DescribeProductsForAlarmResult>) throws {
        monitorJDCloudClient = self
        try DescribeProductsForAlarmExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateAlarmAsync(request:UpdateAlarmRequest,requestComplation:@escaping ExecuteResult<UpdateAlarmResult>) throws {
        monitorJDCloudClient = self
        try UpdateAlarmExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func enableAlarmsAsync(request:EnableAlarmsRequest,requestComplation:@escaping ExecuteResult<EnableAlarmsResult>) throws {
        monitorJDCloudClient = self
        try EnableAlarmsExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func putMetricDataAsync(request:PutMetricDataRequest,requestComplation:@escaping ExecuteResult<PutMetricDataResult>) throws {
        monitorJDCloudClient = self
        try PutMetricDataExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeMetricsAsync(request:DescribeMetricsRequest,requestComplation:@escaping ExecuteResult<DescribeMetricsResult>) throws {
        monitorJDCloudClient = self
        try DescribeMetricsExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeAlarmsAsync(request:DescribeAlarmsRequest,requestComplation:@escaping ExecuteResult<DescribeAlarmsResult>) throws {
        monitorJDCloudClient = self
        try DescribeAlarmsExecutor(jdCloudClient: monitorJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension MonitorJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "monitor.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
