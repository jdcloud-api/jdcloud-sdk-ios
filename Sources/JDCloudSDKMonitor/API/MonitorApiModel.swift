/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   监控项自定义监控相关接口
   自定义监控项相关接口，提供自定义监控数据上报功能

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

public class DescribeMetricsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMetricsResult?;

    enum DescribeMetricsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMetricsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMetricsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据不同的聚合方式将metric的数据聚合为一个点。downAggrType：last(最后一个点)、max(最大值)、min(最小值)、avg(平均值)。该接口返回值为上报metric的原始值，没有做单位转换。metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;
public class LastDownsampleRequest:JdCloudRequest
{
    /// 资源的类型，取值vm, lb, ip, database 等。可用的serviceCode请使用describeServices接口查询
    var serviceCode:String

    /// 资源的维度。serviceCode下可用的dimension请使用describeServices接口查询
    var dimension:String?

    /// 资源的uuid，支持多个resourceId批量查询，每个id用竖线分隔。 如：id1|id2|id3|id4
    var resourceId:String

    /// 自定义标签
    var tags:[TagFilter?]?

    /// 查询时间范围的开始时间， UTC时间，格式：2016-12-11T00:00:00+0800（早于30d时，将被重置为30d）（注意在url中+要转译为%2B故url中为2016-12-11T00:00:00%2B0800）
    var startTime:String?

    /// 查询时间范围的结束时间， UTC时间，格式：2016-12-11T00:00:00+0800（为空时，将由startTime与timeInterval计算得出）（注意在url中+要转译为%2B故url中为2016-12-11T00:00:00%2B0800）
    var endTime:String?

    /// 查询的时间间隔，最大不超过30天，支持分钟级别,小时级别，天级别，例如：1m、1h、1d
    var timeInterval:String?

    /// 聚合方式：max avg min等,用于不同维度之间聚合
    var aggrType:String?

    /// 聚合方式：max avg min等,用于将维度内一个周期数据聚合为一个点的聚合方式,默认last
    var downAggrType:String?

    /// 监控项英文标识(id)
    var metric:String


    public init(regionId: String,serviceCode:String,resourceId:String,metric:String){
        self.serviceCode = serviceCode
        self.resourceId = resourceId
        self.metric = metric
        super.init(regionId: regionId)
    }


    enum LastDownsampleRequestRequestCodingKeys: String, CodingKey {
        case serviceCode
        case dimension
        case resourceId
        case tags
        case startTime
        case endTime
        case timeInterval
        case aggrType
        case downAggrType
        case metric
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: LastDownsampleRequestRequestCodingKeys.self)
        try encoderContainer.encode(serviceCode, forKey: .serviceCode)
        try encoderContainer.encode(dimension, forKey: .dimension)
        try encoderContainer.encode(resourceId, forKey: .resourceId)
        try encoderContainer.encode(tags, forKey: .tags)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(timeInterval, forKey: .timeInterval)
        try encoderContainer.encode(aggrType, forKey: .aggrType)
        try encoderContainer.encode(downAggrType, forKey: .downAggrType)
        try encoderContainer.encode(metric, forKey: .metric)

    }
}

/// 根据产品线查询可用监控项列表,metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt; 
public class DescribeMetricsResult:NSObject,JdCloudResult
{
    /// Metrics
    var metrics:[MetricDetail?]?



    public override init(){
        super.init()
    }

    enum DescribeMetricsResultCodingKeys: String, CodingKey {
        case metrics
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricsResultCodingKeys.self)
        if decoderContainer.contains(.metrics)
        {
            self.metrics = try decoderContainer.decode([MetricDetail?]?.self, forKey: .metrics)
        }
    }
}
public extension DescribeMetricsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricsResultCodingKeys.self)
        try encoderContainer.encode(metrics, forKey: .metrics)
    }
}
/// 查看某资源单个监控项数据，metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;，可以使用接口&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;describeMetrics&lt;/a&gt;：查询产品线可用的metric列表。 
public class DescribeMetricDataResult:NSObject,JdCloudResult
{
    /// MetricDatas
    var metricDatas:[MetricData?]?



    public override init(){
        super.init()
    }

    enum DescribeMetricDataResultCodingKeys: String, CodingKey {
        case metricDatas
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricDataResultCodingKeys.self)
        if decoderContainer.contains(.metricDatas)
        {
            self.metricDatas = try decoderContainer.decode([MetricData?]?.self, forKey: .metricDatas)
        }
    }
}
public extension DescribeMetricDataResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricDataResultCodingKeys.self)
        try encoderContainer.encode(metricDatas, forKey: .metricDatas)
    }
}
public class DescribeMetricDataResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMetricDataResult?;

    enum DescribeMetricDataResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricDataResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMetricDataResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMetricDataResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricDataResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查看某资源单个监控项数据，metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;，可以使用接口&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;describeMetrics&lt;/a&gt;：查询产品线可用的metric列表。
public class DescribeMetricDataRequest:JdCloudRequest
{
    /// 聚合方式，用于不同时间轴上的聚合。如balance产品同一个resourceId下存在port&#x3D;80和port&#x3D;8080等多种维度。可选值参考:sum、avg、min、max
    var aggrType:String?

    /// 采样方式，用于在时间轴维度上将聚合周期内的数据聚合为一个点。可选值参考：sum(聚合周期内的数据求和)、avg(求平均)、last(最新值)、min(最小值)、max(最大值)
    var downSampleType:String?

    /// 查询时间范围的开始时间， UTC时间，格式：2016-12-11T00:00:00+0800（注意在url中+要转译为%2B故url中为2016-12-11T00:00:00%2B0800）
    var startTime:String?

    /// 查询时间范围的结束时间， UTC时间，格式：2016-12-11T00:00:00+0800（为空时，将由startTime与timeInterval计算得出）（注意在url中+要转译为%2B故url中为2016-12-11T00:00:00%2B0800）
    var endTime:String?

    /// 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval默认为1h，当前时间往 前1h
    var timeInterval:String?

    /// 监控指标数据的维度信息,根据tags来筛选指标数据不同的维度
    var tags:[TagFilter?]?

    /// 是否对查询的tags分组
    var groupBy:Bool?

    /// 是否求速率
    var rate:Bool?

    /// 资源的类型，取值vm, lb, ip, database 等,&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/api/describeservices?content&#x3D;API&amp;SOP&#x3D;JDCloud&quot;&gt;describeServices&lt;/a&gt;：查询己接入云监控的产品线列表
    var serviceCode:String?

    /// 资源的维度。查询serviceCode下可用的维度请使用describeServices接口
    var dimension:String?

    /// 资源的uuid
    var resourceId:String

    /// 监控项英文标识(id)
    var metric:String


    public init(regionId: String,resourceId:String,metric:String){
        self.resourceId = resourceId
        self.metric = metric
        super.init(regionId: regionId)
    }


    enum DescribeMetricDataRequestRequestCodingKeys: String, CodingKey {
        case aggrType
        case downSampleType
        case startTime
        case endTime
        case timeInterval
        case tags
        case groupBy
        case rate
        case serviceCode
        case dimension
        case resourceId
        case metric
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(aggrType, forKey: .aggrType)
        try encoderContainer.encode(downSampleType, forKey: .downSampleType)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(timeInterval, forKey: .timeInterval)
        try encoderContainer.encode(tags, forKey: .tags)
        try encoderContainer.encode(groupBy, forKey: .groupBy)
        try encoderContainer.encode(rate, forKey: .rate)
        try encoderContainer.encode(serviceCode, forKey: .serviceCode)
        try encoderContainer.encode(dimension, forKey: .dimension)
        try encoderContainer.encode(resourceId, forKey: .resourceId)
        try encoderContainer.encode(metric, forKey: .metric)

    }
}

public class DescribeServicesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeServicesResult?;

    enum DescribeServicesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeServicesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeServicesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeServicesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeServicesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据产品线查询可用监控项列表,metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;
public class DescribeMetricsRequest:JdCloudRequest
{
    /// 资源的类型，取值vm, lb, ip, database 等。&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/api/describeservices?content&#x3D;API&amp;SOP&#x3D;JDCloud&quot;&gt;describeServices&lt;/a&gt;：查询己接入云监控的产品线列表，当产品线下有多个分组时，查询分组对应的监控项，serviceCode请传对应分组的groupCode字段值
    var serviceCode:String

    /// metric的类型，取值0(控制台展示)、1(内部使用，控制台不展示)、2(所有).默认取0
    var type:Int64?


    public init(regionId: String,serviceCode:String){
        self.serviceCode = serviceCode
        super.init(regionId: regionId)
    }


    enum DescribeMetricsRequestRequestCodingKeys: String, CodingKey {
        case serviceCode
        case type
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricsRequestRequestCodingKeys.self)
        try encoderContainer.encode(serviceCode, forKey: .serviceCode)
        try encoderContainer.encode(type, forKey: .type)

    }
}

/// 根据不同的聚合方式将metric的数据聚合为一个点。downAggrType：last(最后一个点)、max(最大值)、min(最小值)、avg(平均值)。该接口返回值为上报metric的原始值，没有做单位转换。metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt; 
public class LastDownsampleResult:NSObject,JdCloudResult
{
    /// Items
    var items:[LastDownsampleRespItem?]?



    public override init(){
        super.init()
    }

    enum LastDownsampleResultCodingKeys: String, CodingKey {
        case items
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: LastDownsampleResultCodingKeys.self)
        if decoderContainer.contains(.items)
        {
            self.items = try decoderContainer.decode([LastDownsampleRespItem?]?.self, forKey: .items)
        }
    }
}
public extension LastDownsampleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: LastDownsampleResultCodingKeys.self)
        try encoderContainer.encode(items, forKey: .items)
    }
}

///  查询监控图可用的产品线列表
public class DescribeServicesRequest:JdCloudRequest
{
    /// 服务码列表
      /// filter name 为serviceCodes表示查询多个产品线的规则
    var filters:[Filter?]?

    /// 要查询的产品线类型   0：all    1：资源监控   2：其它   默认：1。若指定了查询的serviceCode，则忽略该参数
    var productType:Int64?




    enum DescribeServicesRequestRequestCodingKeys: String, CodingKey {
        case filters
        case productType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeServicesRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(productType, forKey: .productType)

    }
}

public class LastDownsampleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:LastDownsampleResult?;

    enum LastDownsampleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: LastDownsampleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(LastDownsampleResult?.self, forKey: .result) ?? nil
    }
}

public extension LastDownsampleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: LastDownsampleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询监控图可用的产品线列表 
public class DescribeServicesResult:NSObject,JdCloudResult
{
    /// Services
    var services:[ServiceInfoV2?]?



    public override init(){
        super.init()
    }

    enum DescribeServicesResultCodingKeys: String, CodingKey {
        case services
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeServicesResultCodingKeys.self)
        if decoderContainer.contains(.services)
        {
            self.services = try decoderContainer.decode([ServiceInfoV2?]?.self, forKey: .services)
        }
    }
}
public extension DescribeServicesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeServicesResultCodingKeys.self)
        try encoderContainer.encode(services, forKey: .services)
    }
}

///  删除规则
public class DeleteAlarmsRequest:JdCloudRequest
{
    /// 规则id
    var alarmId:String


    public init(regionId: String,alarmId:String){
        self.alarmId = alarmId
        super.init(regionId: regionId)
    }


    enum DeleteAlarmsRequestRequestCodingKeys: String, CodingKey {
        case alarmId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAlarmsRequestRequestCodingKeys.self)
        try encoderContainer.encode(alarmId, forKey: .alarmId)

    }
}

public class DescribeProductsForAlarmResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeProductsForAlarmResult?;

    enum DescribeProductsForAlarmResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProductsForAlarmResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeProductsForAlarmResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeProductsForAlarmResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProductsForAlarmResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UpdateAlarmResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateAlarmResult?;

    enum UpdateAlarmResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateAlarmResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateAlarmResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateAlarmResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAlarmResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeAlarmResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAlarmResult?;

    enum DescribeAlarmResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAlarmResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAlarmResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAlarmResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeAlarmHistoryResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAlarmHistoryResult?;

    enum DescribeAlarmHistoryResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAlarmHistoryResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAlarmHistoryResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAlarmHistoryResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmHistoryResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询规则的报警联系人
public class DescribeAlarmContactsRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
    var pageSize:Int64?

    /// 联系人类型。0,联系人分组; 1,联系人
    var referenceType:Int64?

    /// 规则id
    var alarmId:String


    public init(regionId: String,alarmId:String){
        self.alarmId = alarmId
        super.init(regionId: regionId)
    }


    enum DescribeAlarmContactsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case referenceType
        case alarmId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmContactsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(referenceType, forKey: .referenceType)
        try encoderContainer.encode(alarmId, forKey: .alarmId)

    }
}

/// 删除规则 
public class DeleteAlarmsResult:NSObject,JdCloudResult
{
    /// Success
    var success:Bool?



    public override init(){
        super.init()
    }

    enum DeleteAlarmsResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteAlarmsResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension DeleteAlarmsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAlarmsResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class CreateAlarmResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateAlarmResult?;

    enum CreateAlarmResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAlarmResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateAlarmResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateAlarmResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAlarmResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeAlarmsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAlarmsResult?;

    enum DescribeAlarmsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAlarmsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAlarmsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAlarmsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改已创建的报警规则 
public class UpdateAlarmResult:NSObject,JdCloudResult
{
    /// 创建成功的规则id
    var alarmId:String?

    /// 成功则返回true
    var success:Bool?



    public override init(){
        super.init()
    }

    enum UpdateAlarmResultCodingKeys: String, CodingKey {
        case alarmId
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateAlarmResultCodingKeys.self)
        if decoderContainer.contains(.alarmId)
        {
            self.alarmId = try decoderContainer.decode(String?.self, forKey: .alarmId)
        }
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension UpdateAlarmResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAlarmResultCodingKeys.self)
        try encoderContainer.encode(alarmId, forKey: .alarmId)
        try encoderContainer.encode(success, forKey: .success)
    }
}
public class DescribeAlarmContactsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeAlarmContactsResult?;

    enum DescribeAlarmContactsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAlarmContactsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeAlarmContactsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeAlarmContactsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmContactsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeMetricsForAlarmResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMetricsForAlarmResult?;

    enum DescribeMetricsForAlarmResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricsForAlarmResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMetricsForAlarmResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMetricsForAlarmResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricsForAlarmResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建报警规则 
public class CreateAlarmResult:NSObject,JdCloudResult
{
    /// 创建成功的规则id
    var alarmId:String?



    public override init(){
        super.init()
    }

    enum CreateAlarmResultCodingKeys: String, CodingKey {
        case alarmId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateAlarmResultCodingKeys.self)
        if decoderContainer.contains(.alarmId)
        {
            self.alarmId = try decoderContainer.decode(String?.self, forKey: .alarmId)
        }
    }
}
public extension CreateAlarmResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAlarmResultCodingKeys.self)
        try encoderContainer.encode(alarmId, forKey: .alarmId)
    }
}
/// 启用、禁用规则 
public class EnableAlarmsResult:NSObject,JdCloudResult
{
    /// Success
    var success:Bool?



    public override init(){
        super.init()
    }

    enum EnableAlarmsResultCodingKeys: String, CodingKey {
        case success
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableAlarmsResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
    }
}
public extension EnableAlarmsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableAlarmsResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
    }
}

///  查询可用于创建监控规则的指标列表,metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;
public class DescribeMetricsForAlarmRequest:JdCloudRequest
{
    /// 产品线
    var serviceCode:String?

    /// 产品类型，如redis2.8cluster(集群)\redis2.8MS(主从)。当serviceCode与product同时指定时，product优先级更高
    var product:String?

    /// 产品维度，必须指定serviceCode或product才生效。
    var dimension:String?

    /// metric类型，取值0、1；默认值：0（常规指标，用于控制台创建报警规则）、1（其它）
    var metricType:Int64?




    enum DescribeMetricsForAlarmRequestRequestCodingKeys: String, CodingKey {
        case serviceCode
        case product
        case dimension
        case metricType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricsForAlarmRequestRequestCodingKeys.self)
        try encoderContainer.encode(serviceCode, forKey: .serviceCode)
        try encoderContainer.encode(product, forKey: .product)
        try encoderContainer.encode(dimension, forKey: .dimension)
        try encoderContainer.encode(metricType, forKey: .metricType)

    }
}

/// 查询规则的报警联系人 
public class DescribeAlarmContactsResult:NSObject,JdCloudResult
{
    /// 报警联系人列表
    var contactsList:[DescribedNoticeContacts?]?

    /// 报警联系人总数
    var total:Int64?



    public override init(){
        super.init()
    }

    enum DescribeAlarmContactsResultCodingKeys: String, CodingKey {
        case contactsList
        case total
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAlarmContactsResultCodingKeys.self)
        if decoderContainer.contains(.contactsList)
        {
            self.contactsList = try decoderContainer.decode([DescribedNoticeContacts?]?.self, forKey: .contactsList)
        }
        if decoderContainer.contains(.total)
        {
            self.total = try decoderContainer.decode(Int64?.self, forKey: .total)
        }
    }
}
public extension DescribeAlarmContactsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmContactsResultCodingKeys.self)
        try encoderContainer.encode(contactsList, forKey: .contactsList)
        try encoderContainer.encode(total, forKey: .total)
    }
}

///  查询可用于创建监控规则的产品列表
public class DescribeProductsForAlarmRequest:JdCloudRequest
{
    /// 产品线，从产品线维度筛选
    var serviceCode:String?

    /// 产品类型,从产品维度筛选、如redis2.8cluster\redis2.8instance。当serviceCode与product同时指定时，product优先级更高
    var product:String?




    enum DescribeProductsForAlarmRequestRequestCodingKeys: String, CodingKey {
        case serviceCode
        case product
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProductsForAlarmRequestRequestCodingKeys.self)
        try encoderContainer.encode(serviceCode, forKey: .serviceCode)
        try encoderContainer.encode(product, forKey: .product)

    }
}


///  启用、禁用规则
public class EnableAlarmsRequest:JdCloudRequest
{
    /// 告警规则的ID列表
    var alarmIds:[String?]?

    /// 启用:1,禁用0,
    var state:Int64?




    enum EnableAlarmsRequestRequestCodingKeys: String, CodingKey {
        case alarmIds
        case state
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableAlarmsRequestRequestCodingKeys.self)
        try encoderContainer.encode(alarmIds, forKey: .alarmIds)
        try encoderContainer.encode(state, forKey: .state)

    }
}

/// 查询规则列表 
public class DescribeAlarmsResult:NSObject,JdCloudResult
{
    /// 规则列表
    var alarmList:[DescribeGroupAlarm?]?

    /// 总页数
    var numberPages:Int64?

    /// 总记录数
    var numberRecords:Int64?

    /// 当前页码
    var pageNumber:Int64?

    /// 分页大小
    var pageSize:Int64?



    public override init(){
        super.init()
    }

    enum DescribeAlarmsResultCodingKeys: String, CodingKey {
        case alarmList
        case numberPages
        case numberRecords
        case pageNumber
        case pageSize
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAlarmsResultCodingKeys.self)
        if decoderContainer.contains(.alarmList)
        {
            self.alarmList = try decoderContainer.decode([DescribeGroupAlarm?]?.self, forKey: .alarmList)
        }
        if decoderContainer.contains(.numberPages)
        {
            self.numberPages = try decoderContainer.decode(Int64?.self, forKey: .numberPages)
        }
        if decoderContainer.contains(.numberRecords)
        {
            self.numberRecords = try decoderContainer.decode(Int64?.self, forKey: .numberRecords)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int64?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int64?.self, forKey: .pageSize)
        }
    }
}
public extension DescribeAlarmsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmsResultCodingKeys.self)
        try encoderContainer.encode(alarmList, forKey: .alarmList)
        try encoderContainer.encode(numberPages, forKey: .numberPages)
        try encoderContainer.encode(numberRecords, forKey: .numberRecords)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
    }
}
public class DeleteAlarmsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteAlarmsResult?;

    enum DeleteAlarmsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteAlarmsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteAlarmsResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteAlarmsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteAlarmsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改已创建的报警规则
public class UpdateAlarmRequest:JdCloudRequest
{
    /// 告警通知联系人
    var baseContact:[BaseContact?]?

    /// 资源维度，可用的维度请使用 describeProductsForAlarm接口查询
    var dimension:String?

    /// 是否启用, 1表示启用规则，0表示禁用规则，默认为1
    var enabled:Int64?

    /// 通知策略
    var noticeOption:[NoticeOption?]?

    /// 资源类型, 可用的资源类型列表请使用 describeProductsForAlarm接口查询。
    var product:String

    /// ResourceOption
    var resourceOption:ResourceOption

    /// 规则名称，规则名称，最大长度42个字符，只允许中英文、数字、&#39;&#39;-&#39;&#39;和&quot;_&quot;
    var ruleName:String

    /// RuleOption
    var ruleOption:RuleOption

    /// 规则类型, 默认为resourceMonitor
    var ruleType:String?

    /// 资源维度，指定监控数据实例的维度标签,如resourceId&#x3D;id。(请确认资源的监控数据带有该标签，否则规则会报数据不足)
    var tags:[String:String?]?

    /// WebHookOption
    var webHookOption:WebHookOption?

    /// 规则id
    var alarmId:String


    public init(regionId: String,product:String,resourceOption:ResourceOption,ruleName:String,ruleOption:RuleOption,alarmId:String){
        self.product = product
        self.resourceOption = resourceOption
        self.ruleName = ruleName
        self.ruleOption = ruleOption
        self.alarmId = alarmId
        super.init(regionId: regionId)
    }


    enum UpdateAlarmRequestRequestCodingKeys: String, CodingKey {
        case baseContact
        case dimension
        case enabled
        case noticeOption
        case product
        case resourceOption
        case ruleName
        case ruleOption
        case ruleType
        case tags
        case webHookOption
        case alarmId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAlarmRequestRequestCodingKeys.self)
        try encoderContainer.encode(baseContact, forKey: .baseContact)
        try encoderContainer.encode(dimension, forKey: .dimension)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(noticeOption, forKey: .noticeOption)
        try encoderContainer.encode(product, forKey: .product)
        try encoderContainer.encode(resourceOption, forKey: .resourceOption)
        try encoderContainer.encode(ruleName, forKey: .ruleName)
        try encoderContainer.encode(ruleOption, forKey: .ruleOption)
        try encoderContainer.encode(ruleType, forKey: .ruleType)
        try encoderContainer.encode(tags, forKey: .tags)
        try encoderContainer.encode(webHookOption, forKey: .webHookOption)
        try encoderContainer.encode(alarmId, forKey: .alarmId)

    }
}


///  查询报警历史
public class DescribeAlarmHistoryRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
    var pageSize:Int64?

    /// 产品线标识，同一个产品线下可能存在多个product，如(redis下有redis2.8cluster、redis4.0)
    var serviceCode:String?

    /// 产品标识,默认返回该product下所有dimension的数据。eg:product&#x3D;redis2.8cluster（redis2.8cluster产品下包含redis2.8-shard与redis2.8-proxy、redis2.8-instance多个维度)。
    var product:String?

    /// 维度标识、指定该参数时，查询只返回该维度的数据。如redis2.8cluster下存在实例、分片等多个维度
    var dimension:String?

    /// 正在报警, 取值为1
    var isAlarming:Int64?

    /// 报警的状态,1为报警恢复、2为报警、4为报警恢复无数据
    var status:Int64?

    /// 开始时间
    var startTime:String?

    /// 结束时间
    var endTime:String?

    /// 规则类型,默认查询1， 1表示资源监控，6表示站点监控,7表示可用性监控
    var ruleType:Int64?

    /// 规则名称模糊搜索
    var ruleName:String?

    /// serviceCodes - 产品线servicecode，精确匹配，支持多个
      /// resourceIds - 资源Id，精确匹配，支持多个（必须指定serviceCode才会在该serviceCode下根据resourceIds过滤，否则该参数不生效）
      /// alarmIds - 规则Id，精确匹配，支持多个
    var filters:[Filter?]?




    enum DescribeAlarmHistoryRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case serviceCode
        case product
        case dimension
        case isAlarming
        case status
        case startTime
        case endTime
        case ruleType
        case ruleName
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmHistoryRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(serviceCode, forKey: .serviceCode)
        try encoderContainer.encode(product, forKey: .product)
        try encoderContainer.encode(dimension, forKey: .dimension)
        try encoderContainer.encode(isAlarming, forKey: .isAlarming)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(ruleType, forKey: .ruleType)
        try encoderContainer.encode(ruleName, forKey: .ruleName)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 查询报警历史 
public class DescribeAlarmHistoryResult:NSObject,JdCloudResult
{
    /// 告警历史列表
    var alarmHistoryList:[DescribedAlarmHistory?]?

    /// 总页数
    var numberPages:Int64?

    /// 总记录数
    var numberRecords:Int64?

    /// 当前页码
    var pageNumber:Int64?

    /// 分页大小
    var pageSize:Int64?



    public override init(){
        super.init()
    }

    enum DescribeAlarmHistoryResultCodingKeys: String, CodingKey {
        case alarmHistoryList
        case numberPages
        case numberRecords
        case pageNumber
        case pageSize
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAlarmHistoryResultCodingKeys.self)
        if decoderContainer.contains(.alarmHistoryList)
        {
            self.alarmHistoryList = try decoderContainer.decode([DescribedAlarmHistory?]?.self, forKey: .alarmHistoryList)
        }
        if decoderContainer.contains(.numberPages)
        {
            self.numberPages = try decoderContainer.decode(Int64?.self, forKey: .numberPages)
        }
        if decoderContainer.contains(.numberRecords)
        {
            self.numberRecords = try decoderContainer.decode(Int64?.self, forKey: .numberRecords)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int64?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int64?.self, forKey: .pageSize)
        }
    }
}
public extension DescribeAlarmHistoryResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmHistoryResultCodingKeys.self)
        try encoderContainer.encode(alarmHistoryList, forKey: .alarmHistoryList)
        try encoderContainer.encode(numberPages, forKey: .numberPages)
        try encoderContainer.encode(numberRecords, forKey: .numberRecords)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
    }
}

///  查询规则详情
public class DescribeAlarmRequest:JdCloudRequest
{
    /// 规则id
    var alarmId:String


    public init(regionId: String,alarmId:String){
        self.alarmId = alarmId
        super.init(regionId: regionId)
    }


    enum DescribeAlarmRequestRequestCodingKeys: String, CodingKey {
        case alarmId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmRequestRequestCodingKeys.self)
        try encoderContainer.encode(alarmId, forKey: .alarmId)

    }
}

/// 查询可用于创建监控规则的产品列表 
public class DescribeProductsForAlarmResult:NSObject,JdCloudResult
{
    /// ProductList
    var productList:[Product?]?



    public override init(){
        super.init()
    }

    enum DescribeProductsForAlarmResultCodingKeys: String, CodingKey {
        case productList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeProductsForAlarmResultCodingKeys.self)
        if decoderContainer.contains(.productList)
        {
            self.productList = try decoderContainer.decode([Product?]?.self, forKey: .productList)
        }
    }
}
public extension DescribeProductsForAlarmResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeProductsForAlarmResultCodingKeys.self)
        try encoderContainer.encode(productList, forKey: .productList)
    }
}
/// 查询规则详情 
public class DescribeAlarmResult:NSObject,JdCloudResult
{
    /// 报警规则ID
    var alarmId:String?

    /// 规则状态，当一个规则下同时存在报警、数据不足、正常的资源时，规则状态按 报警&gt;数据不足&gt;正常的优先级展示
      /// 监控项状态：-1 未启用 1正常，2告警，4数据不足
    var alarmStatus:Int64?

    /// 规则的状态列表,可能同时存在多个：1正常，2告警，4数据不足
    var alarmStatusList:[Int64?]?

    /// 告警通知联系人
    var baseContact:[BaseContact?]?

    /// 创建时间
    var createTime:String?

    /// 资源维度
    var dimension:String?

    /// 资源维度名称
    var dimensionName:String?

    /// 是否启用, 1表示启用规则，0表示禁用规则，默认为1
    var enabled:Int64?

    /// 通知策略
    var noticeOption:[NoticeOption?]?

    /// 资源类型
    var product:String

    /// 资源类型名称
    var productName:String?

    /// ResourceOption
    var resourceOption:ResourceOption

    /// 规则名称，规则名称，最大长度42个字符，只允许中英文、数字、&#39;&#39;-&#39;&#39;和&quot;_&quot;
    var ruleName:String

    /// RuleOption
    var ruleOption:RuleOptionDetail

    /// 规则类型, 默认为resourceMonitor
    var ruleType:String?

    /// 规则版本  v1  v2
    var ruleVersion:String?

    /// 资源维度，指定监控数据实例的维度标签,如resourceId&#x3D;id。(请确认资源的监控数据带有该标签，否则规则会报数据不足)
    var tags:[String:String?]?

    /// WebHookOption
    var webHookOption:WebHookOption?



    public  init(product:String,resourceOption:ResourceOption,ruleName:String,ruleOption:RuleOptionDetail){
        self.product = product
        self.resourceOption = resourceOption
        self.ruleName = ruleName
        self.ruleOption = ruleOption
    }

    enum DescribeAlarmResultCodingKeys: String, CodingKey {
        case alarmId
        case alarmStatus
        case alarmStatusList
        case baseContact
        case createTime
        case dimension
        case dimensionName
        case enabled
        case noticeOption
        case product
        case productName
        case resourceOption
        case ruleName
        case ruleOption
        case ruleType
        case ruleVersion
        case tags
        case webHookOption
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeAlarmResultCodingKeys.self)
        if decoderContainer.contains(.alarmId)
        {
            self.alarmId = try decoderContainer.decode(String?.self, forKey: .alarmId)
        }
        if decoderContainer.contains(.alarmStatus)
        {
            self.alarmStatus = try decoderContainer.decode(Int64?.self, forKey: .alarmStatus)
        }
        if decoderContainer.contains(.alarmStatusList)
        {
            self.alarmStatusList = try decoderContainer.decode([Int64?]?.self, forKey: .alarmStatusList)
        }
        if decoderContainer.contains(.baseContact)
        {
            self.baseContact = try decoderContainer.decode([BaseContact?]?.self, forKey: .baseContact)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.dimension)
        {
            self.dimension = try decoderContainer.decode(String?.self, forKey: .dimension)
        }
        if decoderContainer.contains(.dimensionName)
        {
            self.dimensionName = try decoderContainer.decode(String?.self, forKey: .dimensionName)
        }
        if decoderContainer.contains(.enabled)
        {
            self.enabled = try decoderContainer.decode(Int64?.self, forKey: .enabled)
        }
        if decoderContainer.contains(.noticeOption)
        {
            self.noticeOption = try decoderContainer.decode([NoticeOption?]?.self, forKey: .noticeOption)
        }
        self.product = try decoderContainer.decode(String.self, forKey: .product)
        if decoderContainer.contains(.productName)
        {
            self.productName = try decoderContainer.decode(String?.self, forKey: .productName)
        }
        self.resourceOption = try decoderContainer.decode(ResourceOption.self, forKey: .resourceOption)
        self.ruleName = try decoderContainer.decode(String.self, forKey: .ruleName)
        self.ruleOption = try decoderContainer.decode(RuleOptionDetail.self, forKey: .ruleOption)
        if decoderContainer.contains(.ruleType)
        {
            self.ruleType = try decoderContainer.decode(String?.self, forKey: .ruleType)
        }
        if decoderContainer.contains(.ruleVersion)
        {
            self.ruleVersion = try decoderContainer.decode(String?.self, forKey: .ruleVersion)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([String:String?]?.self, forKey: .tags)
        }
        if decoderContainer.contains(.webHookOption)
        {
            self.webHookOption = try decoderContainer.decode(WebHookOption?.self, forKey: .webHookOption)
        }
    }
}
public extension DescribeAlarmResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmResultCodingKeys.self)
        try encoderContainer.encode(alarmId, forKey: .alarmId)
        try encoderContainer.encode(alarmStatus, forKey: .alarmStatus)
        try encoderContainer.encode(alarmStatusList, forKey: .alarmStatusList)
        try encoderContainer.encode(baseContact, forKey: .baseContact)
        try encoderContainer.encode(createTime, forKey: .createTime)
        try encoderContainer.encode(dimension, forKey: .dimension)
        try encoderContainer.encode(dimensionName, forKey: .dimensionName)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(noticeOption, forKey: .noticeOption)
        try encoderContainer.encode(product, forKey: .product)
        try encoderContainer.encode(productName, forKey: .productName)
        try encoderContainer.encode(resourceOption, forKey: .resourceOption)
        try encoderContainer.encode(ruleName, forKey: .ruleName)
        try encoderContainer.encode(ruleOption, forKey: .ruleOption)
        try encoderContainer.encode(ruleType, forKey: .ruleType)
        try encoderContainer.encode(ruleVersion, forKey: .ruleVersion)
        try encoderContainer.encode(tags, forKey: .tags)
        try encoderContainer.encode(webHookOption, forKey: .webHookOption)
    }
}
/// 查询可用于创建监控规则的指标列表,metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt; 
public class DescribeMetricsForAlarmResult:NSObject,JdCloudResult
{
    /// 规则列表
    var metrics:[RuleMetricDetail?]?



    public override init(){
        super.init()
    }

    enum DescribeMetricsForAlarmResultCodingKeys: String, CodingKey {
        case metrics
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricsForAlarmResultCodingKeys.self)
        if decoderContainer.contains(.metrics)
        {
            self.metrics = try decoderContainer.decode([RuleMetricDetail?]?.self, forKey: .metrics)
        }
    }
}
public extension DescribeMetricsForAlarmResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricsForAlarmResultCodingKeys.self)
        try encoderContainer.encode(metrics, forKey: .metrics)
    }
}

///  查询规则列表
public class DescribeAlarmsRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
    var pageSize:Int64?

    /// 产品线标识，同一个产品线下可能存在多个product，如(redis下有redis2.8cluster、redis4.0)
    var serviceCode:String?

    /// 产品标识，如redis下分多个产品(redis2.8cluster、redis4.0)。同时指定serviceCode与product时，product优先生效
    var product:String?

    /// 产品下的维度标识，指定dimension时必须指定product
    var dimension:String?

    /// 规则名称
    var ruleName:String?

    /// 规则类型, 1表示资源监控，6表示站点监控,7表示可用性监控
    var ruleType:Int64?

    /// 规则状态：1为启用，0为禁用
    var enabled:Int64?

    /// 资源的规则状态  2：报警、4：数据不足
    var ruleStatus:Int64?

    /// 服务码或资源Id列表
      /// products - 产品product，精确匹配，支持多个
      /// resourceIds - 资源Id，精确匹配，支持多个（必须指定serviceCode、product或dimension，否则该参数不生效）
      /// alarmIds - 规则id，精确匹配，支持多个
    var filters:[Filter?]?




    enum DescribeAlarmsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case serviceCode
        case product
        case dimension
        case ruleName
        case ruleType
        case enabled
        case ruleStatus
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(serviceCode, forKey: .serviceCode)
        try encoderContainer.encode(product, forKey: .product)
        try encoderContainer.encode(dimension, forKey: .dimension)
        try encoderContainer.encode(ruleName, forKey: .ruleName)
        try encoderContainer.encode(ruleType, forKey: .ruleType)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(ruleStatus, forKey: .ruleStatus)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class EnableAlarmsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EnableAlarmsResult?;

    enum EnableAlarmsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EnableAlarmsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EnableAlarmsResult?.self, forKey: .result) ?? nil
    }
}

public extension EnableAlarmsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EnableAlarmsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建报警规则
public class CreateAlarmRequest:JdCloudRequest
{
    /// 告警通知联系人
    var baseContact:[BaseContact?]?

    /// 幂等性校验参数,最长36位,若两个请求clientToken相等，则返回第一次创建的规则id，只创建一次规则
    var clientToken:String

    /// 资源维度，可用的维度请使用 describeProductsForAlarm接口查询
    var dimension:String?

    /// 是否启用, 1表示启用规则，0表示禁用规则，默认为1
    var enabled:Int64?

    /// 通知策略
    var noticeOption:[NoticeOption?]?

    /// 资源类型, 可用的资源类型列表请使用 describeProductsForAlarm接口查询。
    var product:String

    /// ResourceOption
    var resourceOption:ResourceOption

    /// 规则名称，规则名称，最大长度42个字符，只允许中英文、数字、&#39;&#39;-&#39;&#39;和&quot;_&quot;
    var ruleName:String

    /// RuleOption
    var ruleOption:RuleOption

    /// 规则类型, 默认为resourceMonitor
    var ruleType:String?

    /// 资源维度，指定监控数据实例的维度标签,如resourceId&#x3D;id。(请确认资源的监控数据带有该标签，否则规则会报数据不足)
    var tags:[String:String?]?

    /// WebHookOption
    var webHookOption:WebHookOption?


    public init(regionId: String,clientToken:String,product:String,resourceOption:ResourceOption,ruleName:String,ruleOption:RuleOption){
        self.clientToken = clientToken
        self.product = product
        self.resourceOption = resourceOption
        self.ruleName = ruleName
        self.ruleOption = ruleOption
        super.init(regionId: regionId)
    }


    enum CreateAlarmRequestRequestCodingKeys: String, CodingKey {
        case baseContact
        case clientToken
        case dimension
        case enabled
        case noticeOption
        case product
        case resourceOption
        case ruleName
        case ruleOption
        case ruleType
        case tags
        case webHookOption
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateAlarmRequestRequestCodingKeys.self)
        try encoderContainer.encode(baseContact, forKey: .baseContact)
        try encoderContainer.encode(clientToken, forKey: .clientToken)
        try encoderContainer.encode(dimension, forKey: .dimension)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(noticeOption, forKey: .noticeOption)
        try encoderContainer.encode(product, forKey: .product)
        try encoderContainer.encode(resourceOption, forKey: .resourceOption)
        try encoderContainer.encode(ruleName, forKey: .ruleName)
        try encoderContainer.encode(ruleOption, forKey: .ruleOption)
        try encoderContainer.encode(ruleType, forKey: .ruleType)
        try encoderContainer.encode(tags, forKey: .tags)
        try encoderContainer.encode(webHookOption, forKey: .webHookOption)

    }
}


///  该接口为自定义监控数据上报的接口，方便您将自己采集的时序数据上报到云监控。不同region域名上报不同region的数据，参考：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/reporting-monitoring-data&quot;&gt;调用说明&lt;/a&gt;可上报原始数据和已聚合的统计数据。支持批量上报方式。单次请求最多包含 50 个数据点；数据大小不超过 256k。
public class PutMetricDataRequest:JdCloudRequest
{
    /// 数据参数
    var metricDataList:[MetricDataCm?]?




    enum PutMetricDataRequestRequestCodingKeys: String, CodingKey {
        case metricDataList
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PutMetricDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(metricDataList, forKey: .metricDataList)

    }
}

/// 该接口为自定义监控数据上报的接口，方便您将自己采集的时序数据上报到云监控。不同region域名上报不同region的数据，参考：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/reporting-monitoring-data&quot;&gt;调用说明&lt;/a&gt;可上报原始数据和已聚合的统计数据。支持批量上报方式。单次请求最多包含 50 个数据点；数据大小不超过 256k。 
public class PutMetricDataResult:NSObject,JdCloudResult
{
    /// 全部写入成功为true，否则为false
    var success:Bool?

    /// ErrMetricDataList
    var errMetricDataList:[MetricDataList?]?



    public override init(){
        super.init()
    }

    enum PutMetricDataResultCodingKeys: String, CodingKey {
        case success
        case errMetricDataList
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PutMetricDataResultCodingKeys.self)
        if decoderContainer.contains(.success)
        {
            self.success = try decoderContainer.decode(Bool?.self, forKey: .success)
        }
        if decoderContainer.contains(.errMetricDataList)
        {
            self.errMetricDataList = try decoderContainer.decode([MetricDataList?]?.self, forKey: .errMetricDataList)
        }
    }
}
public extension PutMetricDataResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PutMetricDataResultCodingKeys.self)
        try encoderContainer.encode(success, forKey: .success)
        try encoderContainer.encode(errMetricDataList, forKey: .errMetricDataList)
    }
}
public class PutMetricDataResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:PutMetricDataResult?;

    enum PutMetricDataResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PutMetricDataResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(PutMetricDataResult?.self, forKey: .result) ?? nil
    }
}

public extension PutMetricDataResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PutMetricDataResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
