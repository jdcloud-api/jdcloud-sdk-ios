/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Monitoring Items APIs
   监控项相关接口，提供可用监控项列表查询和监控数据查询等功能

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  查看某资源多个监控项数据，metric介绍1：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;
@objc(DescribeMetricDataRequest)
public class DescribeMetricDataRequest:JdCloudRequest
{
    /// 聚合方式，默认等于downSampleType或avg，可选值参考:sum、avg、last、min、max
    var aggrType:String?

    /// 采样方式，默认等于aggrType或avg，可选值参考：sum、avg、last、min、max
    var downSampleType:String?

    /// 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ
    var startTime:String?

    /// 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出）
    var endTime:String?

    /// 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval默认为1h，当前时间往 前1h
    var timeInterval:String?

    /// 自定义标签/tag；至少要传一个tag，且tag.Values不为空
    var tags:[TagFilter?]?

    /// 是否对查询的tags分组
    var groupBy:Bool?

    /// 是否求速率
    var rate:Bool?

    /// 资源的类型，取值vm, lb, ip, database 等
    var serviceCode:String

    /// 资源的uuid
    var resourceId:String

    /// 监控项英文标识(id)
    var metric:String


    public init(regionId: String,serviceCode:String,resourceId:String,metric:String){
        self.serviceCode = serviceCode
        self.resourceId = resourceId
        self.metric = metric
        super.init(regionId: regionId)
    }


    enum DescribeMetricDataRequestRequestCodingKeys: String, CodingKey {
        case aggrType
        case downSampleType
        case startTime
        case endTime
        case timeInterval
        case tags
        case groupBy
        case rate
        case serviceCode
        case resourceId
        case metric
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(aggrType, forKey: .aggrType)
        try encoderContainer.encode(downSampleType, forKey: .downSampleType)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(timeInterval, forKey: .timeInterval)
        try encoderContainer.encode(tags, forKey: .tags)
        try encoderContainer.encode(groupBy, forKey: .groupBy)
        try encoderContainer.encode(rate, forKey: .rate)
        try encoderContainer.encode(serviceCode, forKey: .serviceCode)
        try encoderContainer.encode(resourceId, forKey: .resourceId)
        try encoderContainer.encode(metric, forKey: .metric)

    }
}
