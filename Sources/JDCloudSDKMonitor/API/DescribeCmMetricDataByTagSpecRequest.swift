/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   CustomMetric APIs
   自定义监控相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  查询自定义监控项数据
@objc(DescribeCmMetricDataByTagSpecRequest)
public class DescribeCmMetricDataByTagSpecRequest:JdCloudRequest
{
    /// 指标聚合方式，每个指标都有默认的聚合方式， 可选值包括：sum,avg.max.min；多个对象的数据如何合并(resourceId -&gt; cluster)
    var aggrType:String?

    /// 指标采样方式，默认avg， 可选值包括：sum,avg,max,min,last；同一对象的数据，在改变时间点粒度时如何合并(1m-&gt;20m)
    var downSampleType:String?

    /// 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d）
    var startTime:String?

    /// 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出）
    var endTime:String?

    /// 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项
    var timeInterval:String?

    /// 自定义标签
    var tags:[TagFilter?]?

    /// 是否对查询的tags分组
    var groupBy:Bool?

    /// namespace
    var namespace:String

    /// 监控项英文标识(id)，监控项名称
    var metric:String


    public init(regionId: String,namespace:String,metric:String){
        self.namespace = namespace
        self.metric = metric
        super.init(regionId: regionId)
    }


    enum DescribeCmMetricDataByTagSpecRequestRequestCodingKeys: String, CodingKey {
        case aggrType
        case downSampleType
        case startTime
        case endTime
        case timeInterval
        case tags
        case groupBy
        case namespace
        case metric
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCmMetricDataByTagSpecRequestRequestCodingKeys.self)
        try encoderContainer.encode(aggrType, forKey: .aggrType)
        try encoderContainer.encode(downSampleType, forKey: .downSampleType)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(timeInterval, forKey: .timeInterval)
        try encoderContainer.encode(tags, forKey: .tags)
        try encoderContainer.encode(groupBy, forKey: .groupBy)
        try encoderContainer.encode(namespace, forKey: .namespace)
        try encoderContainer.encode(metric, forKey: .metric)

    }
}
