/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Monitoring Rules APIs
   云监控规则相关接口，提供创建、查询、修改、删除监控规则等功能

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  查询规则, 查询参数组合及优先级从高到低为：
      ///       /// 1：serviceCode不为空
      ///       /// 1.1：serviceCode + resourceId
      ///       /// 1.2: serviceCode + resourceIds
      ///       /// 2：serviceCodes不为空
      ///       /// 3: 所有规则
@objc(DescribeAlarmsRequest)
public class DescribeAlarmsRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
    var pageSize:Int64?

    /// 产品名称
    var serviceCode:String?

    /// 资源ID
    var resourceID:String?

    /// 规则类型, 1表示资源监控，6表示站点监控,7表示可用性监控
    var ruleType:Int64?

    /// 规则报警状态, 1：正常, 2：报警，4：数据不足
    var status:Int64?

    /// 规则状态：1为启用，0为禁用
    var enabled:Int64?

    /// 是否为正在报警的规则，0为忽略，1为是，与 status 同时只能生效一个,isAlarming 优先生效
    var isAlarming:Int64?

    /// 规则的id
    var alarmId:String?

    /// 服务码或资源Id列表
      /// filter name 为serviceCodes表示查询多个产品线的规则
      /// filter name 为resourceIds表示查询多个资源的规则
    var filters:[Filter?]?




    enum DescribeAlarmsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case serviceCode
        case resourceID
        case ruleType
        case status
        case enabled
        case isAlarming
        case alarmId
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeAlarmsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(serviceCode, forKey: .serviceCode)
        try encoderContainer.encode(resourceID, forKey: .resourceID)
        try encoderContainer.encode(ruleType, forKey: .ruleType)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(enabled, forKey: .enabled)
        try encoderContainer.encode(isAlarming, forKey: .isAlarming)
        try encoderContainer.encode(alarmId, forKey: .alarmId)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}
