/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Monitoring Rules APIs
   云监控规则相关接口，提供创建、查询、修改、删除监控规则等功能

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  修改已创建的报警规则
@objc(UpdateAlarmRequest)
public class UpdateAlarmRequest:JdCloudRequest
{
    /// 通知联系人
    var contacts:[BaseContact?]?

    /// Rule
    var rule:BaseRule

    /// 回调content 注：仅webHookUrl和webHookContent均不为空时，才会创建webHook
    var webHookContent:String?

    /// webHook协议
    var webHookProtocol:String?

    /// 回调secret，用户请求签名，防伪造
    var webHookSecret:String?

    /// 回调url
    var webHookUrl:String?

    /// 规则id
    var alarmId:String


    public init(regionId: String,rule:BaseRule,alarmId:String){
        self.rule = rule
        self.alarmId = alarmId
        super.init(regionId: regionId)
    }


    enum UpdateAlarmRequestRequestCodingKeys: String, CodingKey {
        case contacts
        case rule
        case webHookContent
        case webHookProtocol
        case webHookSecret
        case webHookUrl
        case alarmId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateAlarmRequestRequestCodingKeys.self)
        try encoderContainer.encode(contacts, forKey: .contacts)
        try encoderContainer.encode(rule, forKey: .rule)
        try encoderContainer.encode(webHookContent, forKey: .webHookContent)
        try encoderContainer.encode(webHookProtocol, forKey: .webHookProtocol)
        try encoderContainer.encode(webHookSecret, forKey: .webHookSecret)
        try encoderContainer.encode(webHookUrl, forKey: .webHookUrl)
        try encoderContainer.encode(alarmId, forKey: .alarmId)

    }
}
