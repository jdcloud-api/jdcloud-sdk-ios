/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   yunding-vpc
   云鼎-VPC相关接口

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
///  vmImageOverview
public class VmImageOverview:NSObject,Codable{
    /// 镜像名称
    var name:String?
    /// 平台信息
    var platform:String?



    public override init(){
            super.init()
    }

    enum VmImageOverviewCodingKeys: String, CodingKey {
        case name
        case platform
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: VmImageOverviewCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.platform)
        {
            self.platform = try decoderContainer.decode(String?.self, forKey: .platform)
        }
    }
}
public extension VmImageOverview{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: VmImageOverviewCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(platform, forKey: .platform)
    }
}
///  rdsInstance
public class RdsInstance:NSObject,Codable{
    /// 实例ID
    var instanceId:String?
    /// 实例名称，具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
    var instanceName:String?
    /// 实例类别，例如主实例，只读实例等，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
    var instanceType:String?
    /// 实例引擎类型，如MySQL或SQL Server等，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
    var engine:String?
    /// 实例引擎版本，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
    var engineVersion:String?
    /// 实例规格代码
    var instanceClass:String?
    /// 磁盘，单位GB
    var instanceStorageGB:Int?
    /// CPU核数
    var instanceCPU:Int?
    /// 内存，单位MB
    var instanceMemoryMB:Int?
    /// 地域ID，参见[地域及可用区对照表](../Enum-Definitions/Regions-AZ.md)
    var regionId:String?
    /// 可用区ID，第一个为主实例在的可用区，参见[地域及可用区对照表](../Enum-Definitions/Regions-AZ.md)
    var azId:[String?]?
    /// VPC的ID
    var vpcId:String?
    /// VPC的name
    var vpcName:String?
    /// 子网的ID
    var subnetId:String?
    /// 实例状态，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
    var instanceStatus:String?
    /// 实例创建时间
    var createTime:String?
    /// MySQL只读实例对应的主实例ID
    var sourceInstanceId:String?



    public override init(){
            super.init()
    }

    enum RdsInstanceCodingKeys: String, CodingKey {
        case instanceId
        case instanceName
        case instanceType
        case engine
        case engineVersion
        case instanceClass
        case instanceStorageGB
        case instanceCPU
        case instanceMemoryMB
        case regionId
        case azId
        case vpcId
        case vpcName
        case subnetId
        case instanceStatus
        case createTime
        case sourceInstanceId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RdsInstanceCodingKeys.self)
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.instanceName)
        {
            self.instanceName = try decoderContainer.decode(String?.self, forKey: .instanceName)
        }
        if decoderContainer.contains(.instanceType)
        {
            self.instanceType = try decoderContainer.decode(String?.self, forKey: .instanceType)
        }
        if decoderContainer.contains(.engine)
        {
            self.engine = try decoderContainer.decode(String?.self, forKey: .engine)
        }
        if decoderContainer.contains(.engineVersion)
        {
            self.engineVersion = try decoderContainer.decode(String?.self, forKey: .engineVersion)
        }
        if decoderContainer.contains(.instanceClass)
        {
            self.instanceClass = try decoderContainer.decode(String?.self, forKey: .instanceClass)
        }
        if decoderContainer.contains(.instanceStorageGB)
        {
            self.instanceStorageGB = try decoderContainer.decode(Int?.self, forKey: .instanceStorageGB)
        }
        if decoderContainer.contains(.instanceCPU)
        {
            self.instanceCPU = try decoderContainer.decode(Int?.self, forKey: .instanceCPU)
        }
        if decoderContainer.contains(.instanceMemoryMB)
        {
            self.instanceMemoryMB = try decoderContainer.decode(Int?.self, forKey: .instanceMemoryMB)
        }
        if decoderContainer.contains(.regionId)
        {
            self.regionId = try decoderContainer.decode(String?.self, forKey: .regionId)
        }
        if decoderContainer.contains(.azId)
        {
            self.azId = try decoderContainer.decode([String?]?.self, forKey: .azId)
        }
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
        if decoderContainer.contains(.vpcName)
        {
            self.vpcName = try decoderContainer.decode(String?.self, forKey: .vpcName)
        }
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
        if decoderContainer.contains(.instanceStatus)
        {
            self.instanceStatus = try decoderContainer.decode(String?.self, forKey: .instanceStatus)
        }
        if decoderContainer.contains(.createTime)
        {
            self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        }
        if decoderContainer.contains(.sourceInstanceId)
        {
            self.sourceInstanceId = try decoderContainer.decode(String?.self, forKey: .sourceInstanceId)
        }
    }
}
public extension RdsInstance{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RdsInstanceCodingKeys.self)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
         try encoderContainer.encode(instanceName, forKey: .instanceName)
         try encoderContainer.encode(instanceType, forKey: .instanceType)
         try encoderContainer.encode(engine, forKey: .engine)
         try encoderContainer.encode(engineVersion, forKey: .engineVersion)
         try encoderContainer.encode(instanceClass, forKey: .instanceClass)
         try encoderContainer.encode(instanceStorageGB, forKey: .instanceStorageGB)
         try encoderContainer.encode(instanceCPU, forKey: .instanceCPU)
         try encoderContainer.encode(instanceMemoryMB, forKey: .instanceMemoryMB)
         try encoderContainer.encode(regionId, forKey: .regionId)
         try encoderContainer.encode(azId, forKey: .azId)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(vpcName, forKey: .vpcName)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(instanceStatus, forKey: .instanceStatus)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(sourceInstanceId, forKey: .sourceInstanceId)
    }
}
///  cluster
public class Cluster:NSObject,Codable{
    /// id
    var id:String?
    /// 实例名称
    var name:String?
    /// 数据中心
    var dataCenter:String?
    /// 域名
    var domain:String?
    /// 端口号
    var connectionPort:String?
    /// 数据库引擎
    var dbEngine:String?
    /// 数据库版本
    var dbVersion:String?



    public override init(){
            super.init()
    }

    enum ClusterCodingKeys: String, CodingKey {
        case id
        case name
        case dataCenter
        case domain
        case connectionPort
        case dbEngine
        case dbVersion
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ClusterCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.dataCenter)
        {
            self.dataCenter = try decoderContainer.decode(String?.self, forKey: .dataCenter)
        }
        if decoderContainer.contains(.domain)
        {
            self.domain = try decoderContainer.decode(String?.self, forKey: .domain)
        }
        if decoderContainer.contains(.connectionPort)
        {
            self.connectionPort = try decoderContainer.decode(String?.self, forKey: .connectionPort)
        }
        if decoderContainer.contains(.dbEngine)
        {
            self.dbEngine = try decoderContainer.decode(String?.self, forKey: .dbEngine)
        }
        if decoderContainer.contains(.dbVersion)
        {
            self.dbVersion = try decoderContainer.decode(String?.self, forKey: .dbVersion)
        }
    }
}
public extension Cluster{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ClusterCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(dataCenter, forKey: .dataCenter)
         try encoderContainer.encode(domain, forKey: .domain)
         try encoderContainer.encode(connectionPort, forKey: .connectionPort)
         try encoderContainer.encode(dbEngine, forKey: .dbEngine)
         try encoderContainer.encode(dbVersion, forKey: .dbVersion)
    }
}
