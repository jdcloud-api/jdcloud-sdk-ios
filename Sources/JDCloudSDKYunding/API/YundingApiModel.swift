/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   yunding-vpc
   云鼎-VPC相关接口

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 给网卡删除secondaryIp接口 
public class UnassignSecondaryIpsResult:NSObject,JdCloudResult
{
}
/// 给网卡分配secondaryIp接口 
public class AssignSecondaryIpsResult:NSObject,JdCloudResult
{
}

///  给网卡删除secondaryIp接口
public class UnassignSecondaryIpsRequest:JdCloudRequest
{
    /// 指定删除的secondaryIp地址
    var secondaryIps:[String?]?

    /// networkInterface ID
    var networkInterfaceId:String


    public init(regionId: String,networkInterfaceId:String){
        self.networkInterfaceId = networkInterfaceId
        super.init(regionId: regionId)
    }


    enum UnassignSecondaryIpsRequestRequestCodingKeys: String, CodingKey {
        case secondaryIps
        case networkInterfaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UnassignSecondaryIpsRequestRequestCodingKeys.self)
        try encoderContainer.encode(secondaryIps, forKey: .secondaryIps)
        try encoderContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)

    }
}

public class AssignSecondaryIpsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AssignSecondaryIpsResult?;

    enum AssignSecondaryIpsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssignSecondaryIpsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AssignSecondaryIpsResult?.self, forKey: .result) ?? nil
    }
}

public extension AssignSecondaryIpsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssignSecondaryIpsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UnassignSecondaryIpsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UnassignSecondaryIpsResult?;

    enum UnassignSecondaryIpsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UnassignSecondaryIpsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UnassignSecondaryIpsResult?.self, forKey: .result) ?? nil
    }
}

public extension UnassignSecondaryIpsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UnassignSecondaryIpsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  给网卡分配secondaryIp接口
public class AssignSecondaryIpsRequest:JdCloudRequest
{
    /// secondary ip被其他接口占用时，是否抢占。false：非抢占重分配，true：抢占重分配，默认抢占重分配。默认值：true
    var force:Bool?

    /// 指定分配的secondaryIp地址
    var secondaryIps:[String?]?

    /// 指定自动分配的secondaryIp个数
    var secondaryIpCount:Double?

    /// networkInterface ID
    var networkInterfaceId:String


    public init(regionId: String,networkInterfaceId:String){
        self.networkInterfaceId = networkInterfaceId
        super.init(regionId: regionId)
    }


    enum AssignSecondaryIpsRequestRequestCodingKeys: String, CodingKey {
        case force
        case secondaryIps
        case secondaryIpCount
        case networkInterfaceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssignSecondaryIpsRequestRequestCodingKeys.self)
        try encoderContainer.encode(force, forKey: .force)
        try encoderContainer.encode(secondaryIps, forKey: .secondaryIps)
        try encoderContainer.encode(secondaryIpCount, forKey: .secondaryIpCount)
        try encoderContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)

    }
}


///  删除按配置计费、或包年包月已到期的单个云主机。不能删除没有计费信息的云主机。&lt;br&gt;
      ///       /// 云主机状态必须为运行&lt;b&gt;running&lt;/b&gt;、停止&lt;b&gt;stopped&lt;/b&gt;、错误&lt;b&gt;error&lt;/b&gt;，同时云主机没有正在进行中的任务才可删除。&lt;br&gt;
      ///       /// 如果主机中挂载的数据盘为按配置计费的云硬盘且AutoDelete属性为true，那么数据盘会随主机一起删除。
      ///       ///  [MFA enabled]
public class DeleteVmInstanceRequest:JdCloudRequest
{
    /// 云主机ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DeleteVmInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVmInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 删除按配置计费、或包年包月已到期的单个云主机。不能删除没有计费信息的云主机。&lt;br&gt;
      ///       /// 云主机状态必须为运行&lt;b&gt;running&lt;/b&gt;、停止&lt;b&gt;stopped&lt;/b&gt;、错误&lt;b&gt;error&lt;/b&gt;，同时云主机没有正在进行中的任务才可删除。&lt;br&gt;
      ///       /// 如果主机中挂载的数据盘为按配置计费的云硬盘且AutoDelete属性为true，那么数据盘会随主机一起删除。
      ///       ///  [MFA enabled] 
public class DeleteVmInstanceResult:NSObject,JdCloudResult
{
}
public class DeleteVmInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVmInstanceResult?;

    enum DeleteVmInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVmInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVmInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVmInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVmInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  从RDS实例中删除数据库。为便于管理和数据恢复，RDS对用户权限进行了控制，用户仅能通过控制台或本接口删除数据库 [MFA enabled]
public class DeleteRdsDatabaseRequest:JdCloudRequest
{
    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 库名称
    var dbName:String


    public init(regionId: String,instanceId:String,dbName:String){
        self.instanceId = instanceId
        self.dbName = dbName
        super.init(regionId: regionId)
    }


    enum DeleteRdsDatabaseRequestRequestCodingKeys: String, CodingKey {
        case instanceId
        case dbName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRdsDatabaseRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(dbName, forKey: .dbName)

    }
}

public class DeleteRdsDatabaseResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteRdsDatabaseResult?;

    enum DeleteRdsDatabaseResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteRdsDatabaseResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteRdsDatabaseResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteRdsDatabaseResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRdsDatabaseResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 从RDS实例中删除数据库。为便于管理和数据恢复，RDS对用户权限进行了控制，用户仅能通过控制台或本接口删除数据库 [MFA enabled] 
public class DeleteRdsDatabaseResult:NSObject,JdCloudResult
{
}
