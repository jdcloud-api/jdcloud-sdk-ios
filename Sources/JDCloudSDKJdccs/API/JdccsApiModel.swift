/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Console Permission API
   云托管服务的控制台权限API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon


///  查询带宽（出口）流量（资源）详情
public class DescribeBandwidthTrafficRequest:JdCloudRequest
{
    /// IDC机房ID
    var idc:String

    /// 带宽（出口）实例ID
    var bandwidthId:String


    public init(regionId: String,idc:String,bandwidthId:String){
        self.idc = idc
        self.bandwidthId = bandwidthId
        super.init(regionId: regionId)
    }


    enum DescribeBandwidthTrafficRequestRequestCodingKeys: String, CodingKey {
        case idc
        case bandwidthId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBandwidthTrafficRequestRequestCodingKeys.self)
        try encoderContainer.encode(idc, forKey: .idc)
        try encoderContainer.encode(bandwidthId, forKey: .bandwidthId)

    }
}

/// 查询带宽（出口）流量（资源）详情 
public class DescribeBandwidthTrafficResult:NSObject,JdCloudResult
{
    /// 带宽（出口）流量（资源）详情
    var bandwidthTraffic:BandwidthTraffic?



    public override init(){
        super.init()
    }

    enum DescribeBandwidthTrafficResultCodingKeys: String, CodingKey {
        case bandwidthTraffic
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBandwidthTrafficResultCodingKeys.self)
        if decoderContainer.contains(.bandwidthTraffic)
        {
            self.bandwidthTraffic = try decoderContainer.decode(BandwidthTraffic?.self, forKey: .bandwidthTraffic)
        }
    }
}
public extension DescribeBandwidthTrafficResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBandwidthTrafficResultCodingKeys.self)
        try encoderContainer.encode(bandwidthTraffic, forKey: .bandwidthTraffic)
    }
}

///  查看某资源的最后一个监控数据点（目前只支持机柜电流）
public class LastDownsampleRequest:JdCloudRequest
{
    /// 资源ID，支持多个resourceId批量查询，每个id用竖线 | 分隔
    var resourceId:String

    /// IDC机房ID
    var idc:String

    /// 监控项英文标识(id)
    var metric:String


    public init(regionId: String,resourceId:String,idc:String,metric:String){
        self.resourceId = resourceId
        self.idc = idc
        self.metric = metric
        super.init(regionId: regionId)
    }


    enum LastDownsampleRequestRequestCodingKeys: String, CodingKey {
        case resourceId
        case idc
        case metric
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: LastDownsampleRequestRequestCodingKeys.self)
        try encoderContainer.encode(resourceId, forKey: .resourceId)
        try encoderContainer.encode(idc, forKey: .idc)
        try encoderContainer.encode(metric, forKey: .metric)

    }
}

public class DescribeBandwidthTrafficsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBandwidthTrafficsResult?;

    enum DescribeBandwidthTrafficsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBandwidthTrafficsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBandwidthTrafficsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBandwidthTrafficsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBandwidthTrafficsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查看某资源单个监控项数据
public class DescribeMetricDataRequest:JdCloudRequest
{
    /// 资源ID
    var resourceId:String

    /// 查询时间范围的开始时间， UNIX时间戳，（最多支持最近90天数据查询）
    var startTime:Int

    /// 查询时间范围的结束时间， UNIX时间戳，（最多支持最近90天数据查询）
    var endTime:Int

    /// 时间间隔：分钟m、小时h、天d，如： 10分钟&#x3D;10m、1小时&#x3D;1h，3天&#x3D;3d；默认5m，最小支持5m，最大90d
    var timeInterval:String?

    /// IDC机房ID
    var idc:String

    /// 监控项英文标识(id)
    var metric:String


    public init(regionId: String,resourceId:String,startTime:Int,endTime:Int,idc:String,metric:String){
        self.resourceId = resourceId
        self.startTime = startTime
        self.endTime = endTime
        self.idc = idc
        self.metric = metric
        super.init(regionId: regionId)
    }


    enum DescribeMetricDataRequestRequestCodingKeys: String, CodingKey {
        case resourceId
        case startTime
        case endTime
        case timeInterval
        case idc
        case metric
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricDataRequestRequestCodingKeys.self)
        try encoderContainer.encode(resourceId, forKey: .resourceId)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(timeInterval, forKey: .timeInterval)
        try encoderContainer.encode(idc, forKey: .idc)
        try encoderContainer.encode(metric, forKey: .metric)

    }
}


///  查询可用监控项列表
public class DescribeMetricsRequest:JdCloudRequest
{
}

public class DescribeMetricsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMetricsResult?;

    enum DescribeMetricsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMetricsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMetricsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询可用监控项列表 
public class DescribeMetricsResult:NSObject,JdCloudResult
{
    /// Metrics
    var metrics:[Metric?]?



    public override init(){
        super.init()
    }

    enum DescribeMetricsResultCodingKeys: String, CodingKey {
        case metrics
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricsResultCodingKeys.self)
        if decoderContainer.contains(.metrics)
        {
            self.metrics = try decoderContainer.decode([Metric?]?.self, forKey: .metrics)
        }
    }
}
public extension DescribeMetricsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricsResultCodingKeys.self)
        try encoderContainer.encode(metrics, forKey: .metrics)
    }
}
public class LastDownsampleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:LastDownsampleResult?;

    enum LastDownsampleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: LastDownsampleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(LastDownsampleResult?.self, forKey: .result) ?? nil
    }
}

public extension LastDownsampleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: LastDownsampleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeMetricDataResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeMetricDataResult?;

    enum DescribeMetricDataResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricDataResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeMetricDataResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeMetricDataResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricDataResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeBandwidthTrafficResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeBandwidthTrafficResult?;

    enum DescribeBandwidthTrafficResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBandwidthTrafficResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeBandwidthTrafficResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeBandwidthTrafficResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBandwidthTrafficResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查看某资源的最后一个监控数据点（目前只支持机柜电流） 
public class LastDownsampleResult:NSObject,JdCloudResult
{
    /// Items
    var items:[LastDownsampleRespItem?]?



    public override init(){
        super.init()
    }

    enum LastDownsampleResultCodingKeys: String, CodingKey {
        case items
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: LastDownsampleResultCodingKeys.self)
        if decoderContainer.contains(.items)
        {
            self.items = try decoderContainer.decode([LastDownsampleRespItem?]?.self, forKey: .items)
        }
    }
}
public extension LastDownsampleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: LastDownsampleResultCodingKeys.self)
        try encoderContainer.encode(items, forKey: .items)
    }
}

///  查询带宽（出口）流量列表
public class DescribeBandwidthTrafficsRequest:JdCloudRequest
{
    /// 页码, 默认为1
    var pageNumber:Int?

    /// 分页大小，默认为20
    var pageSize:Int?

    /// IDC机房ID
    var idc:String


    public init(regionId: String,idc:String){
        self.idc = idc
        super.init(regionId: regionId)
    }


    enum DescribeBandwidthTrafficsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case idc
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBandwidthTrafficsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(idc, forKey: .idc)

    }
}

/// 查询带宽（出口）流量列表 
public class DescribeBandwidthTrafficsResult:NSObject,JdCloudResult
{
    /// 带宽（出口）流量列表
    var bandwidthTraffics:[DescribeBandwidthTraffic?]?

    /// 页码
    var pageNumber:Int?

    /// 分页大小
    var pageSize:Int?

    /// 总数量
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeBandwidthTrafficsResultCodingKeys: String, CodingKey {
        case bandwidthTraffics
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeBandwidthTrafficsResultCodingKeys.self)
        if decoderContainer.contains(.bandwidthTraffics)
        {
            self.bandwidthTraffics = try decoderContainer.decode([DescribeBandwidthTraffic?]?.self, forKey: .bandwidthTraffics)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeBandwidthTrafficsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeBandwidthTrafficsResultCodingKeys.self)
        try encoderContainer.encode(bandwidthTraffics, forKey: .bandwidthTraffics)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 查看某资源单个监控项数据 
public class DescribeMetricDataResult:NSObject,JdCloudResult
{
    /// MetricData
    var metricData:MetricData?



    public override init(){
        super.init()
    }

    enum DescribeMetricDataResultCodingKeys: String, CodingKey {
        case metricData
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeMetricDataResultCodingKeys.self)
        if decoderContainer.contains(.metricData)
        {
            self.metricData = try decoderContainer.decode(MetricData?.self, forKey: .metricData)
        }
    }
}
public extension DescribeMetricDataResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeMetricDataResultCodingKeys.self)
        try encoderContainer.encode(metricData, forKey: .metricData)
    }
}
/// 查询机柜列表 
public class DescribeCabinetsResult:NSObject,JdCloudResult
{
    /// 机柜列表
    var cabinets:[DescribeCabinet?]?

    /// 页码
    var pageNumber:Int?

    /// 分页大小
    var pageSize:Int?

    /// 总数量
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeCabinetsResultCodingKeys: String, CodingKey {
        case cabinets
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCabinetsResultCodingKeys.self)
        if decoderContainer.contains(.cabinets)
        {
            self.cabinets = try decoderContainer.decode([DescribeCabinet?]?.self, forKey: .cabinets)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeCabinetsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCabinetsResultCodingKeys.self)
        try encoderContainer.encode(cabinets, forKey: .cabinets)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 查询机房房间号列表 
public class DescribeRoomsResult:NSObject,JdCloudResult
{
    /// 房间号列表
    var rooms:[Room?]?

    /// 页码
    var pageNumber:Int?

    /// 分页大小
    var pageSize:Int?

    /// 总数量
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeRoomsResultCodingKeys: String, CodingKey {
        case rooms
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRoomsResultCodingKeys.self)
        if decoderContainer.contains(.rooms)
        {
            self.rooms = try decoderContainer.decode([Room?]?.self, forKey: .rooms)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeRoomsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRoomsResultCodingKeys.self)
        try encoderContainer.encode(rooms, forKey: .rooms)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  查询机柜列表
public class DescribeCabinetsRequest:JdCloudRequest
{
    /// 页码, 默认为1
    var pageNumber:Int?

    /// 分页大小，默认为20
    var pageSize:Int?

    /// roomNo - 房间号，精确匹配，支持多个
      /// cabinetId - 机柜ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?

    /// IDC机房ID
    var idc:String


    public init(regionId: String,idc:String){
        self.idc = idc
        super.init(regionId: regionId)
    }


    enum DescribeCabinetsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case idc
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCabinetsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(idc, forKey: .idc)

    }
}


///  查询机房房间号列表
public class DescribeRoomsRequest:JdCloudRequest
{
    /// 页码, 默认为1
    var pageNumber:Int?

    /// 分页大小，默认为20
    var pageSize:Int?

    /// roomNo - 房间号，精确匹配，支持多个
      /// 
    var filters:[Filter?]?

    /// IDC机房ID
    var idc:String


    public init(regionId: String,idc:String){
        self.idc = idc
        super.init(regionId: regionId)
    }


    enum DescribeRoomsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case idc
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRoomsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(idc, forKey: .idc)

    }
}

public class DescribeRoomsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeRoomsResult?;

    enum DescribeRoomsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeRoomsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeRoomsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeRoomsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeRoomsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeIdcsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeIdcsResult?;

    enum DescribeIdcsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIdcsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeIdcsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeIdcsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIdcsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeCabinetsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeCabinetsResult?;

    enum DescribeCabinetsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeCabinetsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeCabinetsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeCabinetsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeCabinetsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询IDC机房列表 
public class DescribeIdcsResult:NSObject,JdCloudResult
{
    /// IDC机房列表
    var idcs:[Idc?]?

    /// 页码
    var pageNumber:Int?

    /// 分页大小
    var pageSize:Int?

    /// 总数量
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeIdcsResultCodingKeys: String, CodingKey {
        case idcs
        case pageNumber
        case pageSize
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeIdcsResultCodingKeys.self)
        if decoderContainer.contains(.idcs)
        {
            self.idcs = try decoderContainer.decode([Idc?]?.self, forKey: .idcs)
        }
        if decoderContainer.contains(.pageNumber)
        {
            self.pageNumber = try decoderContainer.decode(Int?.self, forKey: .pageNumber)
        }
        if decoderContainer.contains(.pageSize)
        {
            self.pageSize = try decoderContainer.decode(Int?.self, forKey: .pageSize)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeIdcsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIdcsResultCodingKeys.self)
        try encoderContainer.encode(idcs, forKey: .idcs)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  查询IDC机房列表
public class DescribeIdcsRequest:JdCloudRequest
{
    /// 页码, 默认为1
    var pageNumber:Int?

    /// 分页大小，默认为20
    var pageSize:Int?




    enum DescribeIdcsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeIdcsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

