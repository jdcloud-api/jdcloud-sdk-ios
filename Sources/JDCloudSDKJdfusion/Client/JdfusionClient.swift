/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JD Fusion
   云主机、网卡、云硬盘、网络与相关、关系型数据库、对象存储等相关的接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore
@objc(JdfusionJDCloudClient)
public class JdfusionJDCloudClient:NSObject,JDCloudClient{
    
    private final var jdfusionJDCloudClient:JdfusionJDCloudClient!


    @objc public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        jdfusionJDCloudClient = self
    }


    @objc public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "jdfusion.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        jdfusionJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "jdfusion" + "v1"
    
    public let serviceName: String = "jdfusion"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    @objc public var httpRequestProtocol: String = "https"

    @objc public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    @objc
    public func startVmInstanceByIdAsync(request:StartVmInstanceByIdRequest,requestComplation:@escaping (NSNumber?,StartVmInstanceByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try StartVmInstanceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(StartVmInstanceByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func detachDiskToVmInstanceByDiskIdAsync(request:DetachDiskToVmInstanceByDiskIdRequest,requestComplation:@escaping (NSNumber?,DetachDiskToVmInstanceByDiskIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try DetachDiskToVmInstanceByDiskIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DetachDiskToVmInstanceByDiskIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getTaskInfoHistoryByIdAsync(request:GetTaskInfoHistoryByIdRequest,requestComplation:@escaping (NSNumber?,GetTaskInfoHistoryByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetTaskInfoHistoryByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetTaskInfoHistoryByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVmInstancesAsync(request:GetVmInstancesRequest,requestComplation:@escaping (NSNumber?,GetVmInstancesResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVmInstancesExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVmInstancesResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func removeDiskByIdAsync(request:RemoveDiskByIdRequest,requestComplation:@escaping (NSNumber?,RemoveDiskByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try RemoveDiskByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(RemoveDiskByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVpcSecurityGroupByIdAsync(request:GetVpcSecurityGroupByIdRequest,requestComplation:@escaping (NSNumber?,GetVpcSecurityGroupByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVpcSecurityGroupByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVpcSecurityGroupByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteVpcNetworkInterfaceByIdAsync(request:DeleteVpcNetworkInterfaceByIdRequest,requestComplation:@escaping (NSNumber?,DeleteVpcNetworkInterfaceByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try DeleteVpcNetworkInterfaceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteVpcNetworkInterfaceByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVpcByIdAsync(request:GetVpcByIdRequest,requestComplation:@escaping (NSNumber?,GetVpcByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVpcByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVpcByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVpcSecurityGroupsAsync(request:GetVpcSecurityGroupsRequest,requestComplation:@escaping (NSNumber?,GetVpcSecurityGroupsResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVpcSecurityGroupsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVpcSecurityGroupsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVpcNetworkInterfaceByIdAsync(request:GetVpcNetworkInterfaceByIdRequest,requestComplation:@escaping (NSNumber?,GetVpcNetworkInterfaceByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVpcNetworkInterfaceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVpcNetworkInterfaceByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVmKeypairsAsync(request:GetVmKeypairsRequest,requestComplation:@escaping (NSNumber?,GetVmKeypairsResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVmKeypairsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVmKeypairsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVpcSlbByIdAsync(request:GetVpcSlbByIdRequest,requestComplation:@escaping (NSNumber?,GetVpcSlbByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVpcSlbByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVpcSlbByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createVpcSubnetAsync(request:CreateVpcSubnetRequest,requestComplation:@escaping (NSNumber?,CreateVpcSubnetResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try CreateVpcSubnetExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateVpcSubnetResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVpcSlbsAsync(request:GetVpcSlbsRequest,requestComplation:@escaping (NSNumber?,GetVpcSlbsResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVpcSlbsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVpcSlbsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func rebootVmInstanceByIdAsync(request:RebootVmInstanceByIdRequest,requestComplation:@escaping (NSNumber?,RebootVmInstanceByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try RebootVmInstanceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(RebootVmInstanceByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createVpcNetworkInterfaceAsync(request:CreateVpcNetworkInterfaceRequest,requestComplation:@escaping (NSNumber?,CreateVpcNetworkInterfaceResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try CreateVpcNetworkInterfaceExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateVpcNetworkInterfaceResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteVpcByIdAsync(request:DeleteVpcByIdRequest,requestComplation:@escaping (NSNumber?,DeleteVpcByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try DeleteVpcByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteVpcByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createVpcAsync(request:CreateVpcRequest,requestComplation:@escaping (NSNumber?,CreateVpcResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try CreateVpcExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateVpcResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func disassociateVpcEipByIdAsync(request:DisassociateVpcEipByIdRequest,requestComplation:@escaping (NSNumber?,DisassociateVpcEipByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try DisassociateVpcEipByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DisassociateVpcEipByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createVmKeypairAsync(request:CreateVmKeypairRequest,requestComplation:@escaping (NSNumber?,CreateVmKeypairResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try CreateVmKeypairExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateVmKeypairResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVmKeypairsByNameAsync(request:GetVmKeypairsByNameRequest,requestComplation:@escaping (NSNumber?,GetVmKeypairsByNameResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVmKeypairsByNameExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVmKeypairsByNameResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteVpcEipByIdAsync(request:DeleteVpcEipByIdRequest,requestComplation:@escaping (NSNumber?,DeleteVpcEipByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try DeleteVpcEipByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteVpcEipByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVpcSubnetByIdAsync(request:GetVpcSubnetByIdRequest,requestComplation:@escaping (NSNumber?,GetVpcSubnetByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVpcSubnetByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVpcSubnetByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createVpcSecurityGroupAsync(request:CreateVpcSecurityGroupRequest,requestComplation:@escaping (NSNumber?,CreateVpcSecurityGroupResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try CreateVpcSecurityGroupExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateVpcSecurityGroupResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVpcSubnetsAsync(request:GetVpcSubnetsRequest,requestComplation:@escaping (NSNumber?,GetVpcSubnetsResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVpcSubnetsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVpcSubnetsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVpcsAsync(request:GetVpcsRequest,requestComplation:@escaping (NSNumber?,GetVpcsResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVpcsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVpcsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createVpcLBHttpListenerAsync(request:CreateVpcLBHttpListenerRequest,requestComplation:@escaping (NSNumber?,CreateVpcLBHttpListenerResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try CreateVpcLBHttpListenerExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateVpcLBHttpListenerResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVmInstancesByIdAsync(request:GetVmInstancesByIdRequest,requestComplation:@escaping (NSNumber?,GetVmInstancesByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVmInstancesByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVmInstancesByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteVpcSubnetByIdAsync(request:DeleteVpcSubnetByIdRequest,requestComplation:@escaping (NSNumber?,DeleteVpcSubnetByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try DeleteVpcSubnetByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteVpcSubnetByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteVpcSecurityGroupByIdAsync(request:DeleteVpcSecurityGroupByIdRequest,requestComplation:@escaping (NSNumber?,DeleteVpcSecurityGroupByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try DeleteVpcSecurityGroupByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteVpcSecurityGroupByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createVpcEipAsync(request:CreateVpcEipRequest,requestComplation:@escaping (NSNumber?,CreateVpcEipResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try CreateVpcEipExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateVpcEipResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVpcVServerGroupsAsync(request:GetVpcVServerGroupsRequest,requestComplation:@escaping (NSNumber?,GetVpcVServerGroupsResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVpcVServerGroupsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVpcVServerGroupsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createVpcVServerGroupAsync(request:CreateVpcVServerGroupRequest,requestComplation:@escaping (NSNumber?,CreateVpcVServerGroupResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try CreateVpcVServerGroupExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateVpcVServerGroupResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getTaskInfoByIdAsync(request:GetTaskInfoByIdRequest,requestComplation:@escaping (NSNumber?,GetTaskInfoByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetTaskInfoByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetTaskInfoByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createDiskAsync(request:CreateDiskRequest,requestComplation:@escaping (NSNumber?,CreateDiskResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try CreateDiskExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateDiskResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getDisksAsync(request:GetDisksRequest,requestComplation:@escaping (NSNumber?,GetDisksResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetDisksExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetDisksResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func detachVpcNetworkInterfaceByIdAsync(request:DetachVpcNetworkInterfaceByIdRequest,requestComplation:@escaping (NSNumber?,DetachVpcNetworkInterfaceByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try DetachVpcNetworkInterfaceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DetachVpcNetworkInterfaceByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getCloudInfosAsync(request:GetCloudInfosRequest,requestComplation:@escaping (NSNumber?,GetCloudInfosResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetCloudInfosExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetCloudInfosResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVpcNetworkInterfacesAsync(request:GetVpcNetworkInterfacesRequest,requestComplation:@escaping (NSNumber?,GetVpcNetworkInterfacesResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVpcNetworkInterfacesExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVpcNetworkInterfacesResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createVmInstanceAsync(request:CreateVmInstanceRequest,requestComplation:@escaping (NSNumber?,CreateVmInstanceResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try CreateVmInstanceExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateVmInstanceResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func associateVpcEipByIdAsync(request:AssociateVpcEipByIdRequest,requestComplation:@escaping (NSNumber?,AssociateVpcEipByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try AssociateVpcEipByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AssociateVpcEipByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getCloudInfoByIdAsync(request:GetCloudInfoByIdRequest,requestComplation:@escaping (NSNumber?,GetCloudInfoByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetCloudInfoByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetCloudInfoByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteVmKeypairByNameAsync(request:DeleteVmKeypairByNameRequest,requestComplation:@escaping (NSNumber?,DeleteVmKeypairByNameResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try DeleteVmKeypairByNameExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteVmKeypairByNameResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVpcEipByIdAsync(request:GetVpcEipByIdRequest,requestComplation:@escaping (NSNumber?,GetVpcEipByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVpcEipByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVpcEipByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func stopVmInstanceByIdAsync(request:StopVmInstanceByIdRequest,requestComplation:@escaping (NSNumber?,StopVmInstanceByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try StopVmInstanceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(StopVmInstanceByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVpcEipsAsync(request:GetVpcEipsRequest,requestComplation:@escaping (NSNumber?,GetVpcEipsResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVpcEipsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVpcEipsResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func registCloudInfoAsync(request:RegistCloudInfoRequest,requestComplation:@escaping (NSNumber?,RegistCloudInfoResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try RegistCloudInfoExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(RegistCloudInfoResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getDiskByIdAsync(request:GetDiskByIdRequest,requestComplation:@escaping (NSNumber?,GetDiskByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetDiskByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetDiskByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func createVpcSlbAsync(request:CreateVpcSlbRequest,requestComplation:@escaping (NSNumber?,CreateVpcSlbResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try CreateVpcSlbExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(CreateVpcSlbResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVmImagesAsync(request:GetVmImagesRequest,requestComplation:@escaping (NSNumber?,GetVmImagesResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVmImagesExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVmImagesResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func unregistCloudInfoAsync(request:UnregistCloudInfoRequest,requestComplation:@escaping (NSNumber?,UnregistCloudInfoResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try UnregistCloudInfoExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(UnregistCloudInfoResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func attachDiskToVmInstanceByDiskIdAsync(request:AttachDiskToVmInstanceByDiskIdRequest,requestComplation:@escaping (NSNumber?,AttachDiskToVmInstanceByDiskIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try AttachDiskToVmInstanceByDiskIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AttachDiskToVmInstanceByDiskIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func attachVpcNetworkInterfaceByIdAsync(request:AttachVpcNetworkInterfaceByIdRequest,requestComplation:@escaping (NSNumber?,AttachVpcNetworkInterfaceByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try AttachVpcNetworkInterfaceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(AttachVpcNetworkInterfaceByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteVpcSlbByIdAsync(request:DeleteVpcSlbByIdRequest,requestComplation:@escaping (NSNumber?,DeleteVpcSlbByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try DeleteVpcSlbByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteVpcSlbByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func deleteVmInstanceByIdAsync(request:DeleteVmInstanceByIdRequest,requestComplation:@escaping (NSNumber?,DeleteVmInstanceByIdResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try DeleteVmInstanceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(DeleteVmInstanceByIdResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }


    @objc
    public func getVmInstanceTypesAsync(request:GetVmInstanceTypesRequest,requestComplation:@escaping (NSNumber?,GetVmInstanceTypesResponse?,NSError?,NSString?)->()) throws {
        jdfusionJDCloudClient = self
        try GetVmInstanceTypesExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,sdkRequestError,resultString) in
            if( resultString != nil )
            {
                do{
                    let responseData = resultString!.data(using: .utf8)
                    let result = try JSONDecoder().decode(GetVmInstanceTypesResponse.self, from: responseData!)
                    requestComplation(statusCode as NSNumber?,result,sdkRequestError as NSError? ,resultString as NSString?)
                }catch{
                    requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
                }
            }else{
                requestComplation(statusCode as NSNumber?, nil,sdkRequestError as NSError?,resultString as NSString?)
            }

        }
    }

    
}


public extension JdfusionJDCloudClient{

    @objc public convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "jdfusion.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
