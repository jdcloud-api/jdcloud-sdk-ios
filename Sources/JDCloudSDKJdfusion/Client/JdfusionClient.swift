/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDFusion
   云主机、网卡、云硬盘、网络与相关、关系型数据库、对象存储等相关的接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class JdfusionJDCloudClient:NSObject,JDCloudClient{
    
    private final var jdfusionJDCloudClient:JdfusionJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        jdfusionJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "jdfusion.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        jdfusionJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "jdfusion/" + "v1"
    
    public let serviceName: String = "jdfusion"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func startVmInstanceByIdAsync(request:StartVmInstanceByIdRequest,requestComplation:@escaping ExecuteResult<StartVmInstanceByIdResult>) throws {
        jdfusionJDCloudClient = self
        try StartVmInstanceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteRdsAccountAsync(request:DeleteRdsAccountRequest,requestComplation:@escaping ExecuteResult<DeleteRdsAccountResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteRdsAccountExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createDeploymentAsync(request:CreateDeploymentRequest,requestComplation:@escaping ExecuteResult<CreateDeploymentResult>) throws {
        jdfusionJDCloudClient = self
        try CreateDeploymentExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getBucketByNameAsync(request:GetBucketByNameRequest,requestComplation:@escaping ExecuteResult<GetBucketByNameResult>) throws {
        jdfusionJDCloudClient = self
        try GetBucketByNameExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getTaskInfoHistoryByIdAsync(request:GetTaskInfoHistoryByIdRequest,requestComplation:@escaping ExecuteResult<GetTaskInfoHistoryByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetTaskInfoHistoryByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVmInstancesAsync(request:GetVmInstancesRequest,requestComplation:@escaping ExecuteResult<GetVmInstancesResult>) throws {
        jdfusionJDCloudClient = self
        try GetVmInstancesExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDeploymentsResultsByIdRecordAsync(request:GetDeploymentsResultsByIdRecordRequest,requestComplation:@escaping ExecuteResult<GetDeploymentsResultsByIdRecordResult>) throws {
        jdfusionJDCloudClient = self
        try GetDeploymentsResultsByIdRecordExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func rollbackDeploymentsVersionAsync(request:RollbackDeploymentsVersionRequest,requestComplation:@escaping ExecuteResult<RollbackDeploymentsVersionResult>) throws {
        jdfusionJDCloudClient = self
        try RollbackDeploymentsVersionExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRdsDatabaseByInstIdAndDbNameAsync(request:GetRdsDatabaseByInstIdAndDbNameRequest,requestComplation:@escaping ExecuteResult<GetRdsDatabaseByInstIdAndDbNameResult>) throws {
        jdfusionJDCloudClient = self
        try GetRdsDatabaseByInstIdAndDbNameExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDeploymentVersionsAsync(request:GetDeploymentVersionsRequest,requestComplation:@escaping ExecuteResult<GetDeploymentVersionsResult>) throws {
        jdfusionJDCloudClient = self
        try GetDeploymentVersionsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVpcByIdAsync(request:GetVpcByIdRequest,requestComplation:@escaping ExecuteResult<GetVpcByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetVpcByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRdsAccountsByInstIdAndAccountNameAsync(request:GetRdsAccountsByInstIdAndAccountNameRequest,requestComplation:@escaping ExecuteResult<GetRdsAccountsByInstIdAndAccountNameResult>) throws {
        jdfusionJDCloudClient = self
        try GetRdsAccountsByInstIdAndAccountNameExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVpcNetworkInterfaceByIdAsync(request:GetVpcNetworkInterfaceByIdRequest,requestComplation:@escaping ExecuteResult<GetVpcNetworkInterfaceByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetVpcNetworkInterfaceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteSecurityGroupsRuleAsync(request:DeleteSecurityGroupsRuleRequest,requestComplation:@escaping ExecuteResult<DeleteSecurityGroupsRuleResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteSecurityGroupsRuleExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDeploymentResultAsync(request:GetDeploymentResultRequest,requestComplation:@escaping ExecuteResult<GetDeploymentResultResult>) throws {
        jdfusionJDCloudClient = self
        try GetDeploymentResultExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func editTransferTaskAsync(request:EditTransferTaskRequest,requestComplation:@escaping ExecuteResult<EditTransferTaskResult>) throws {
        jdfusionJDCloudClient = self
        try EditTransferTaskExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getBucketsAsync(request:GetBucketsRequest,requestComplation:@escaping ExecuteResult<GetBucketsResult>) throws {
        jdfusionJDCloudClient = self
        try GetBucketsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func rebootVmInstanceByIdAsync(request:RebootVmInstanceByIdRequest,requestComplation:@escaping ExecuteResult<RebootVmInstanceByIdResult>) throws {
        jdfusionJDCloudClient = self
        try RebootVmInstanceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startTransferTaskAsync(request:StartTransferTaskRequest,requestComplation:@escaping ExecuteResult<StartTransferTaskResult>) throws {
        jdfusionJDCloudClient = self
        try StartTransferTaskExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func grantRdsAccountAsync(request:GrantRdsAccountRequest,requestComplation:@escaping ExecuteResult<GrantRdsAccountResult>) throws {
        jdfusionJDCloudClient = self
        try GrantRdsAccountExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVpcNetworkInterfaceAsync(request:CreateVpcNetworkInterfaceRequest,requestComplation:@escaping ExecuteResult<CreateVpcNetworkInterfaceResult>) throws {
        jdfusionJDCloudClient = self
        try CreateVpcNetworkInterfaceExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createRdsDatabaseAsync(request:CreateRdsDatabaseRequest,requestComplation:@escaping ExecuteResult<CreateRdsDatabaseResult>) throws {
        jdfusionJDCloudClient = self
        try CreateRdsDatabaseExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopSlbListenerAsync(request:StopSlbListenerRequest,requestComplation:@escaping ExecuteResult<StopSlbListenerResult>) throws {
        jdfusionJDCloudClient = self
        try StopSlbListenerExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDeploymentsByIdAsync(request:GetDeploymentsByIdRequest,requestComplation:@escaping ExecuteResult<GetDeploymentsByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetDeploymentsByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDeploymentsAsync(request:GetDeploymentsRequest,requestComplation:@escaping ExecuteResult<GetDeploymentsResult>) throws {
        jdfusionJDCloudClient = self
        try GetDeploymentsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRdsSpecificationAsync(request:GetRdsSpecificationRequest,requestComplation:@escaping ExecuteResult<GetRdsSpecificationResult>) throws {
        jdfusionJDCloudClient = self
        try GetRdsSpecificationExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func validCloudInfoAsync(request:ValidCloudInfoRequest,requestComplation:@escaping ExecuteResult<ValidCloudInfoResult>) throws {
        jdfusionJDCloudClient = self
        try ValidCloudInfoExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startChannelAsync(request:StartChannelRequest,requestComplation:@escaping ExecuteResult<StartChannelResult>) throws {
        jdfusionJDCloudClient = self
        try StartChannelExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVserverGroupAsync(request:DeleteVserverGroupRequest,requestComplation:@escaping ExecuteResult<DeleteVserverGroupResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteVserverGroupExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVmKeypairAsync(request:CreateVmKeypairRequest,requestComplation:@escaping ExecuteResult<CreateVmKeypairResult>) throws {
        jdfusionJDCloudClient = self
        try CreateVmKeypairExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createChannelAsync(request:CreateChannelRequest,requestComplation:@escaping ExecuteResult<CreateChannelResult>) throws {
        jdfusionJDCloudClient = self
        try CreateChannelExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVmKeypairsByNameAsync(request:GetVmKeypairsByNameRequest,requestComplation:@escaping ExecuteResult<GetVmKeypairsByNameResult>) throws {
        jdfusionJDCloudClient = self
        try GetVmKeypairsByNameExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVpcEipByIdAsync(request:DeleteVpcEipByIdRequest,requestComplation:@escaping ExecuteResult<DeleteVpcEipByIdResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteVpcEipByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func reverseDeploymentAsync(request:ReverseDeploymentRequest,requestComplation:@escaping ExecuteResult<ReverseDeploymentResult>) throws {
        jdfusionJDCloudClient = self
        try ReverseDeploymentExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getTransferTaskByIdAsync(request:GetTransferTaskByIdRequest,requestComplation:@escaping ExecuteResult<GetTransferTaskByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetTransferTaskByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVpcSubnetsAsync(request:GetVpcSubnetsRequest,requestComplation:@escaping ExecuteResult<GetVpcSubnetsResult>) throws {
        jdfusionJDCloudClient = self
        try GetVpcSubnetsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVpcLBHttpListenerAsync(request:CreateVpcLBHttpListenerRequest,requestComplation:@escaping ExecuteResult<CreateVpcLBHttpListenerResult>) throws {
        jdfusionJDCloudClient = self
        try CreateVpcLBHttpListenerExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopTransferTaskAsync(request:StopTransferTaskRequest,requestComplation:@escaping ExecuteResult<StopTransferTaskResult>) throws {
        jdfusionJDCloudClient = self
        try StopTransferTaskExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVserverGroupsByIdAsync(request:GetVserverGroupsByIdRequest,requestComplation:@escaping ExecuteResult<GetVserverGroupsByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetVserverGroupsByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVpcSubnetByIdAsync(request:DeleteVpcSubnetByIdRequest,requestComplation:@escaping ExecuteResult<DeleteVpcSubnetByIdResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteVpcSubnetByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVpcSecurityGroupByIdAsync(request:DeleteVpcSecurityGroupByIdRequest,requestComplation:@escaping ExecuteResult<DeleteVpcSecurityGroupByIdResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteVpcSecurityGroupByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVpcEipAsync(request:CreateVpcEipRequest,requestComplation:@escaping ExecuteResult<CreateVpcEipResult>) throws {
        jdfusionJDCloudClient = self
        try CreateVpcEipExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteChannelAsync(request:DeleteChannelRequest,requestComplation:@escaping ExecuteResult<DeleteChannelResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteChannelExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteBucketAsync(request:DeleteBucketRequest,requestComplation:@escaping ExecuteResult<DeleteBucketResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteBucketExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getCloudInfosAsync(request:GetCloudInfosRequest,requestComplation:@escaping ExecuteResult<GetCloudInfosResult>) throws {
        jdfusionJDCloudClient = self
        try GetCloudInfosExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVpcNetworkInterfacesAsync(request:GetVpcNetworkInterfacesRequest,requestComplation:@escaping ExecuteResult<GetVpcNetworkInterfacesResult>) throws {
        jdfusionJDCloudClient = self
        try GetVpcNetworkInterfacesExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func associateVpcEipByIdAsync(request:AssociateVpcEipByIdRequest,requestComplation:@escaping ExecuteResult<AssociateVpcEipByIdResult>) throws {
        jdfusionJDCloudClient = self
        try AssociateVpcEipByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRdsDatabasesByInstIdAsync(request:GetRdsDatabasesByInstIdRequest,requestComplation:@escaping ExecuteResult<GetRdsDatabasesByInstIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetRdsDatabasesByInstIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVpcEipByIdAsync(request:GetVpcEipByIdRequest,requestComplation:@escaping ExecuteResult<GetVpcEipByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetVpcEipByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDeploymentsVersionAsync(request:GetDeploymentsVersionRequest,requestComplation:@escaping ExecuteResult<GetDeploymentsVersionResult>) throws {
        jdfusionJDCloudClient = self
        try GetDeploymentsVersionExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDatasourcesAsync(request:GetDatasourcesRequest,requestComplation:@escaping ExecuteResult<GetDatasourcesResult>) throws {
        jdfusionJDCloudClient = self
        try GetDatasourcesExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getChannelsAsync(request:GetChannelsRequest,requestComplation:@escaping ExecuteResult<GetChannelsResult>) throws {
        jdfusionJDCloudClient = self
        try GetChannelsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVpcEipsAsync(request:GetVpcEipsRequest,requestComplation:@escaping ExecuteResult<GetVpcEipsResult>) throws {
        jdfusionJDCloudClient = self
        try GetVpcEipsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteRdsDatabaseAsync(request:DeleteRdsDatabaseRequest,requestComplation:@escaping ExecuteResult<DeleteRdsDatabaseResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteRdsDatabaseExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func registCloudInfoAsync(request:RegistCloudInfoRequest,requestComplation:@escaping ExecuteResult<RegistCloudInfoResult>) throws {
        jdfusionJDCloudClient = self
        try RegistCloudInfoExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVpcSlbAsync(request:CreateVpcSlbRequest,requestComplation:@escaping ExecuteResult<CreateVpcSlbResult>) throws {
        jdfusionJDCloudClient = self
        try CreateVpcSlbExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRdsByInstIdAsync(request:GetRdsByInstIdRequest,requestComplation:@escaping ExecuteResult<GetRdsByInstIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetRdsByInstIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func unregistCloudInfoAsync(request:UnregistCloudInfoRequest,requestComplation:@escaping ExecuteResult<UnregistCloudInfoResult>) throws {
        jdfusionJDCloudClient = self
        try UnregistCloudInfoExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func attachDiskToVmInstanceByDiskIdAsync(request:AttachDiskToVmInstanceByDiskIdRequest,requestComplation:@escaping ExecuteResult<AttachDiskToVmInstanceByDiskIdResult>) throws {
        jdfusionJDCloudClient = self
        try AttachDiskToVmInstanceByDiskIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func attachVpcNetworkInterfaceByIdAsync(request:AttachVpcNetworkInterfaceByIdRequest,requestComplation:@escaping ExecuteResult<AttachVpcNetworkInterfaceByIdResult>) throws {
        jdfusionJDCloudClient = self
        try AttachVpcNetworkInterfaceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getLbHttpListenerAsync(request:GetLbHttpListenerRequest,requestComplation:@escaping ExecuteResult<GetLbHttpListenerResult>) throws {
        jdfusionJDCloudClient = self
        try GetLbHttpListenerExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func dryrunDeploymentAsync(request:DryrunDeploymentRequest,requestComplation:@escaping ExecuteResult<DryrunDeploymentResult>) throws {
        jdfusionJDCloudClient = self
        try DryrunDeploymentExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createDatasourceAsync(request:CreateDatasourceRequest,requestComplation:@escaping ExecuteResult<CreateDatasourceResult>) throws {
        jdfusionJDCloudClient = self
        try CreateDatasourceExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRegionsAvailableZonesAsync(request:GetRegionsAvailableZonesRequest,requestComplation:@escaping ExecuteResult<GetRegionsAvailableZonesResult>) throws {
        jdfusionJDCloudClient = self
        try GetRegionsAvailableZonesExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func detachDiskToVmInstanceByDiskIdAsync(request:DetachDiskToVmInstanceByDiskIdRequest,requestComplation:@escaping ExecuteResult<DetachDiskToVmInstanceByDiskIdResult>) throws {
        jdfusionJDCloudClient = self
        try DetachDiskToVmInstanceByDiskIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startSlbListenerAsync(request:StartSlbListenerRequest,requestComplation:@escaping ExecuteResult<StartSlbListenerResult>) throws {
        jdfusionJDCloudClient = self
        try StartSlbListenerExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getTransferTasksAsync(request:GetTransferTasksRequest,requestComplation:@escaping ExecuteResult<GetTransferTasksResult>) throws {
        jdfusionJDCloudClient = self
        try GetTransferTasksExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createRdsInstanceAsync(request:CreateRdsInstanceRequest,requestComplation:@escaping ExecuteResult<CreateRdsInstanceResult>) throws {
        jdfusionJDCloudClient = self
        try CreateRdsInstanceExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func removeDiskByIdAsync(request:RemoveDiskByIdRequest,requestComplation:@escaping ExecuteResult<RemoveDiskByIdResult>) throws {
        jdfusionJDCloudClient = self
        try RemoveDiskByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVpcSecurityGroupByIdAsync(request:GetVpcSecurityGroupByIdRequest,requestComplation:@escaping ExecuteResult<GetVpcSecurityGroupByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetVpcSecurityGroupByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRdsInstancesAsync(request:GetRdsInstancesRequest,requestComplation:@escaping ExecuteResult<GetRdsInstancesResult>) throws {
        jdfusionJDCloudClient = self
        try GetRdsInstancesExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getBucketFilesAsync(request:GetBucketFilesRequest,requestComplation:@escaping ExecuteResult<GetBucketFilesResult>) throws {
        jdfusionJDCloudClient = self
        try GetBucketFilesExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVpcNetworkInterfaceByIdAsync(request:DeleteVpcNetworkInterfaceByIdRequest,requestComplation:@escaping ExecuteResult<DeleteVpcNetworkInterfaceByIdResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteVpcNetworkInterfaceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRdsAccountsByInstIdAsync(request:GetRdsAccountsByInstIdRequest,requestComplation:@escaping ExecuteResult<GetRdsAccountsByInstIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetRdsAccountsByInstIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVpcSecurityGroupsAsync(request:GetVpcSecurityGroupsRequest,requestComplation:@escaping ExecuteResult<GetVpcSecurityGroupsResult>) throws {
        jdfusionJDCloudClient = self
        try GetVpcSecurityGroupsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createSecurityGroupsRuleAsync(request:CreateSecurityGroupsRuleRequest,requestComplation:@escaping ExecuteResult<CreateSecurityGroupsRuleResult>) throws {
        jdfusionJDCloudClient = self
        try CreateSecurityGroupsRuleExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func applyDeploymentAsync(request:ApplyDeploymentRequest,requestComplation:@escaping ExecuteResult<ApplyDeploymentResult>) throws {
        jdfusionJDCloudClient = self
        try ApplyDeploymentExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVmKeypairsAsync(request:GetVmKeypairsRequest,requestComplation:@escaping ExecuteResult<GetVmKeypairsResult>) throws {
        jdfusionJDCloudClient = self
        try GetVmKeypairsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVpcSlbByIdAsync(request:GetVpcSlbByIdRequest,requestComplation:@escaping ExecuteResult<GetVpcSlbByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetVpcSlbByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteDeploymentAsync(request:DeleteDeploymentRequest,requestComplation:@escaping ExecuteResult<DeleteDeploymentResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteDeploymentExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVpcSubnetAsync(request:CreateVpcSubnetRequest,requestComplation:@escaping ExecuteResult<CreateVpcSubnetResult>) throws {
        jdfusionJDCloudClient = self
        try CreateVpcSubnetExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteRdsByInstIdAsync(request:DeleteRdsByInstIdRequest,requestComplation:@escaping ExecuteResult<DeleteRdsByInstIdResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteRdsByInstIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createTransferTaskAsync(request:CreateTransferTaskRequest,requestComplation:@escaping ExecuteResult<CreateTransferTaskResult>) throws {
        jdfusionJDCloudClient = self
        try CreateTransferTaskExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVpcSlbsAsync(request:GetVpcSlbsRequest,requestComplation:@escaping ExecuteResult<GetVpcSlbsResult>) throws {
        jdfusionJDCloudClient = self
        try GetVpcSlbsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func cloneDeploymentAsync(request:CloneDeploymentRequest,requestComplation:@escaping ExecuteResult<CloneDeploymentResult>) throws {
        jdfusionJDCloudClient = self
        try CloneDeploymentExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVpcByIdAsync(request:DeleteVpcByIdRequest,requestComplation:@escaping ExecuteResult<DeleteVpcByIdResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteVpcByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVpcAsync(request:CreateVpcRequest,requestComplation:@escaping ExecuteResult<CreateVpcResult>) throws {
        jdfusionJDCloudClient = self
        try CreateVpcExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disassociateVpcEipByIdAsync(request:DisassociateVpcEipByIdRequest,requestComplation:@escaping ExecuteResult<DisassociateVpcEipByIdResult>) throws {
        jdfusionJDCloudClient = self
        try DisassociateVpcEipByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVpcSubnetByIdAsync(request:GetVpcSubnetByIdRequest,requestComplation:@escaping ExecuteResult<GetVpcSubnetByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetVpcSubnetByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVpcSecurityGroupAsync(request:CreateVpcSecurityGroupRequest,requestComplation:@escaping ExecuteResult<CreateVpcSecurityGroupResult>) throws {
        jdfusionJDCloudClient = self
        try CreateVpcSecurityGroupExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVpcsAsync(request:GetVpcsRequest,requestComplation:@escaping ExecuteResult<GetVpcsResult>) throws {
        jdfusionJDCloudClient = self
        try GetVpcsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopChannelAsync(request:StopChannelRequest,requestComplation:@escaping ExecuteResult<StopChannelResult>) throws {
        jdfusionJDCloudClient = self
        try StopChannelExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startSlbAsync(request:StartSlbRequest,requestComplation:@escaping ExecuteResult<StartSlbResult>) throws {
        jdfusionJDCloudClient = self
        try StartSlbExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVmInstancesByIdAsync(request:GetVmInstancesByIdRequest,requestComplation:@escaping ExecuteResult<GetVmInstancesByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetVmInstancesByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRegionsAsync(request:GetRegionsRequest,requestComplation:@escaping ExecuteResult<GetRegionsResult>) throws {
        jdfusionJDCloudClient = self
        try GetRegionsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopSlbAsync(request:StopSlbRequest,requestComplation:@escaping ExecuteResult<StopSlbResult>) throws {
        jdfusionJDCloudClient = self
        try StopSlbExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getTransferTaskProgressAsync(request:GetTransferTaskProgressRequest,requestComplation:@escaping ExecuteResult<GetTransferTaskProgressResult>) throws {
        jdfusionJDCloudClient = self
        try GetTransferTaskProgressExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVpcVServerGroupsAsync(request:GetVpcVServerGroupsRequest,requestComplation:@escaping ExecuteResult<GetVpcVServerGroupsResult>) throws {
        jdfusionJDCloudClient = self
        try GetVpcVServerGroupsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteTransferTaskAsync(request:DeleteTransferTaskRequest,requestComplation:@escaping ExecuteResult<DeleteTransferTaskResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteTransferTaskExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getTransferTaskFailedFilesAsync(request:GetTransferTaskFailedFilesRequest,requestComplation:@escaping ExecuteResult<GetTransferTaskFailedFilesResult>) throws {
        jdfusionJDCloudClient = self
        try GetTransferTaskFailedFilesExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createRdsAccountsAsync(request:CreateRdsAccountsRequest,requestComplation:@escaping ExecuteResult<CreateRdsAccountsResult>) throws {
        jdfusionJDCloudClient = self
        try CreateRdsAccountsExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVpcVServerGroupAsync(request:CreateVpcVServerGroupRequest,requestComplation:@escaping ExecuteResult<CreateVpcVServerGroupResult>) throws {
        jdfusionJDCloudClient = self
        try CreateVpcVServerGroupExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getTaskInfoByIdAsync(request:GetTaskInfoByIdRequest,requestComplation:@escaping ExecuteResult<GetTaskInfoByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetTaskInfoByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createDiskAsync(request:CreateDiskRequest,requestComplation:@escaping ExecuteResult<CreateDiskResult>) throws {
        jdfusionJDCloudClient = self
        try CreateDiskExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func grantRdsAccountsByTaskAsync(request:GrantRdsAccountsByTaskRequest,requestComplation:@escaping ExecuteResult<GrantRdsAccountsByTaskResult>) throws {
        jdfusionJDCloudClient = self
        try GrantRdsAccountsByTaskExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDisksAsync(request:GetDisksRequest,requestComplation:@escaping ExecuteResult<GetDisksResult>) throws {
        jdfusionJDCloudClient = self
        try GetDisksExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func detachVpcNetworkInterfaceByIdAsync(request:DetachVpcNetworkInterfaceByIdRequest,requestComplation:@escaping ExecuteResult<DetachVpcNetworkInterfaceByIdResult>) throws {
        jdfusionJDCloudClient = self
        try DetachVpcNetworkInterfaceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createVmInstanceAsync(request:CreateVmInstanceRequest,requestComplation:@escaping ExecuteResult<CreateVmInstanceResult>) throws {
        jdfusionJDCloudClient = self
        try CreateVmInstanceExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteSlbsListenerAsync(request:DeleteSlbsListenerRequest,requestComplation:@escaping ExecuteResult<DeleteSlbsListenerResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteSlbsListenerExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getCloudInfoByIdAsync(request:GetCloudInfoByIdRequest,requestComplation:@escaping ExecuteResult<GetCloudInfoByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetCloudInfoByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVmKeypairByNameAsync(request:DeleteVmKeypairByNameRequest,requestComplation:@escaping ExecuteResult<DeleteVmKeypairByNameResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteVmKeypairByNameExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopVmInstanceByIdAsync(request:StopVmInstanceByIdRequest,requestComplation:@escaping ExecuteResult<StopVmInstanceByIdResult>) throws {
        jdfusionJDCloudClient = self
        try StopVmInstanceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func revokeRdsAccountAsync(request:RevokeRdsAccountRequest,requestComplation:@escaping ExecuteResult<RevokeRdsAccountResult>) throws {
        jdfusionJDCloudClient = self
        try RevokeRdsAccountExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getDiskByIdAsync(request:GetDiskByIdRequest,requestComplation:@escaping ExecuteResult<GetDiskByIdResult>) throws {
        jdfusionJDCloudClient = self
        try GetDiskByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVmImagesAsync(request:GetVmImagesRequest,requestComplation:@escaping ExecuteResult<GetVmImagesResult>) throws {
        jdfusionJDCloudClient = self
        try GetVmImagesExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func editDeploymentAsync(request:EditDeploymentRequest,requestComplation:@escaping ExecuteResult<EditDeploymentResult>) throws {
        jdfusionJDCloudClient = self
        try EditDeploymentExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteDatasourceAsync(request:DeleteDatasourceRequest,requestComplation:@escaping ExecuteResult<DeleteDatasourceResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteDatasourceExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVpcSlbByIdAsync(request:DeleteVpcSlbByIdRequest,requestComplation:@escaping ExecuteResult<DeleteVpcSlbByIdResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteVpcSlbByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteVmInstanceByIdAsync(request:DeleteVmInstanceByIdRequest,requestComplation:@escaping ExecuteResult<DeleteVmInstanceByIdResult>) throws {
        jdfusionJDCloudClient = self
        try DeleteVmInstanceByIdExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getVmInstanceTypesAsync(request:GetVmInstanceTypesRequest,requestComplation:@escaping ExecuteResult<GetVmInstanceTypesResult>) throws {
        jdfusionJDCloudClient = self
        try GetVmInstanceTypesExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createBucketAsync(request:CreateBucketRequest,requestComplation:@escaping ExecuteResult<CreateBucketResult>) throws {
        jdfusionJDCloudClient = self
        try CreateBucketExecutor(jdCloudClient: jdfusionJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension JdfusionJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "jdfusion.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
