/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   vpc-securityGroups
   与安全组相关的接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  删除安全组规则
@objc(DeleteSecurityGroupsRuleRequest)
public class DeleteSecurityGroupsRuleRequest:JdCloudRequest
{
    /// 规则类型，ingress、egress
    var ruleType:String

    /// 协议，tcp、udp、icmp 或者 all
    var protocolValue:String

    /// 起始端口
    var fromPort:String

    /// 终止端口
    var toPort:String

    /// 网络类型，internet、intranet
    var nicType:String?

    /// 认证策略，accept、drop
    var policy:String?

    /// 认证策略的权重，1-100
    var priority:String?

    /// 目标IP地址范围
    var cidrIp:String?

    /// 安全组ID
    var id:String


    public init(regionId: String,ruleType:String,protocolValue:String,fromPort:String,toPort:String,id:String){
        self.ruleType = ruleType
        self.protocolValue = protocolValue
        self.fromPort = fromPort
        self.toPort = toPort
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteSecurityGroupsRuleRequestRequestCodingKeys: String, CodingKey {
        case ruleType
        case protocolValue = "protocol"
        case fromPort
        case toPort
        case nicType
        case policy
        case priority
        case cidrIp
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecurityGroupsRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(ruleType, forKey: .ruleType)
        try encoderContainer.encode(protocolValue, forKey: .protocolValue)
        try encoderContainer.encode(fromPort, forKey: .fromPort)
        try encoderContainer.encode(toPort, forKey: .toPort)
        try encoderContainer.encode(nicType, forKey: .nicType)
        try encoderContainer.encode(policy, forKey: .policy)
        try encoderContainer.encode(priority, forKey: .priority)
        try encoderContainer.encode(cidrIp, forKey: .cidrIp)
        try encoderContainer.encode(id, forKey: .id)

    }
}
