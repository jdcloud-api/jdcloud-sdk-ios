/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Rds-Database
   与RDS数据库相关的接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

public class GetVpcSubnetByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVpcSubnetByIdResult?;

    enum GetVpcSubnetByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcSubnetByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVpcSubnetByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVpcSubnetByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSubnetByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据云提供商创建子网
public class CreateVpcSubnetRequest:JdCloudRequest
{
    /// 创建subnet
    var subnet:CreateSubnet


    public init(regionId: String,subnet:CreateSubnet){
        self.subnet = subnet
        super.init(regionId: regionId)
    }


    enum CreateVpcSubnetRequestRequestCodingKeys: String, CodingKey {
        case subnet
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcSubnetRequestRequestCodingKeys.self)
        try encoderContainer.encode(subnet, forKey: .subnet)

    }
}

/// 根据云提供商查询对应的subnet资源信息 
public class GetVpcSubnetsResult:NSObject,JdCloudResult
{
    /// Subnets
    var subnets:[SubnetDesInfo?]?



    public override init(){
        super.init()
    }

    enum GetVpcSubnetsResultCodingKeys: String, CodingKey {
        case subnets
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcSubnetsResultCodingKeys.self)
        if decoderContainer.contains(.subnets)
        {
            self.subnets = try decoderContainer.decode([SubnetDesInfo?]?.self, forKey: .subnets)
        }
    }
}
public extension GetVpcSubnetsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSubnetsResultCodingKeys.self)
        try encoderContainer.encode(subnets, forKey: .subnets)
    }
}
/// 删除子网 
public class DeleteVpcSubnetByIdResult:NSObject,JdCloudResult
{
}
/// 根据云提供商查询对应的subnet资源信息 
public class GetVpcSubnetByIdResult:NSObject,JdCloudResult
{
    /// Subnet
    var subnet:SubnetDesInfo?



    public override init(){
        super.init()
    }

    enum GetVpcSubnetByIdResultCodingKeys: String, CodingKey {
        case subnet
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcSubnetByIdResultCodingKeys.self)
        if decoderContainer.contains(.subnet)
        {
            self.subnet = try decoderContainer.decode(SubnetDesInfo?.self, forKey: .subnet)
        }
    }
}
public extension GetVpcSubnetByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSubnetByIdResultCodingKeys.self)
        try encoderContainer.encode(subnet, forKey: .subnet)
    }
}

///  根据云提供商查询对应的subnet资源信息
public class GetVpcSubnetsRequest:JdCloudRequest
{
}

/// 根据云提供商创建子网 
public class CreateVpcSubnetResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateVpcSubnetResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcSubnetResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateVpcSubnetResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcSubnetResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
public class GetVpcSubnetsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVpcSubnetsResult?;

    enum GetVpcSubnetsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcSubnetsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVpcSubnetsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVpcSubnetsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSubnetsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteVpcSubnetByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVpcSubnetByIdResult?;

    enum DeleteVpcSubnetByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVpcSubnetByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVpcSubnetByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVpcSubnetByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcSubnetByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除子网
public class DeleteVpcSubnetByIdRequest:JdCloudRequest
{
    /// VPC ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteVpcSubnetByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcSubnetByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class CreateVpcSubnetResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVpcSubnetResult?;

    enum CreateVpcSubnetResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcSubnetResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVpcSubnetResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVpcSubnetResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcSubnetResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据云提供商查询对应的subnet资源信息
public class GetVpcSubnetByIdRequest:JdCloudRequest
{
    /// VPC ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetVpcSubnetByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSubnetByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class CreateVpcResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVpcResult?;

    enum CreateVpcResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVpcResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVpcResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询私有网络资源列表 
public class GetVpcsResult:NSObject,JdCloudResult
{
    /// Vpcs
    var vpcs:[VpcListInfo?]?



    public override init(){
        super.init()
    }

    enum GetVpcsResultCodingKeys: String, CodingKey {
        case vpcs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcsResultCodingKeys.self)
        if decoderContainer.contains(.vpcs)
        {
            self.vpcs = try decoderContainer.decode([VpcListInfo?]?.self, forKey: .vpcs)
        }
    }
}
public extension GetVpcsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcsResultCodingKeys.self)
        try encoderContainer.encode(vpcs, forKey: .vpcs)
    }
}
/// 根据云提供商查询对应的VPC资源信息 
public class GetVpcByIdResult:NSObject,JdCloudResult
{
    /// Vpc
    var vpc:VpcInfoDetail?



    public override init(){
        super.init()
    }

    enum GetVpcByIdResultCodingKeys: String, CodingKey {
        case vpc
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcByIdResultCodingKeys.self)
        if decoderContainer.contains(.vpc)
        {
            self.vpc = try decoderContainer.decode(VpcInfoDetail?.self, forKey: .vpc)
        }
    }
}
public extension GetVpcByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcByIdResultCodingKeys.self)
        try encoderContainer.encode(vpc, forKey: .vpc)
    }
}

///  查询私有网络资源列表
public class GetVpcsRequest:JdCloudRequest
{
}


///  根据云提供商查询对应的VPC资源信息
public class GetVpcByIdRequest:JdCloudRequest
{
    /// VPC ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetVpcByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class GetVpcsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVpcsResult?;

    enum GetVpcsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVpcsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVpcsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除VPC
public class DeleteVpcByIdRequest:JdCloudRequest
{
    /// VPC ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteVpcByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  根据云提供商创建私有网络
public class CreateVpcRequest:JdCloudRequest
{
    /// 创建VPC
    var vpc:VpcInfo


    public init(regionId: String,vpc:VpcInfo){
        self.vpc = vpc
        super.init(regionId: regionId)
    }


    enum CreateVpcRequestRequestCodingKeys: String, CodingKey {
        case vpc
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcRequestRequestCodingKeys.self)
        try encoderContainer.encode(vpc, forKey: .vpc)

    }
}

/// 根据云提供商创建私有网络 
public class CreateVpcResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateVpcResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateVpcResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
public class GetVpcByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVpcByIdResult?;

    enum GetVpcByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVpcByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVpcByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteVpcByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVpcByIdResult?;

    enum DeleteVpcByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVpcByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVpcByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVpcByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除VPC 
public class DeleteVpcByIdResult:NSObject,JdCloudResult
{
}
public class GetVmInstancesByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVmInstancesByIdResult?;

    enum GetVmInstancesByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVmInstancesByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVmInstancesByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVmInstancesByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmInstancesByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据云提供商查询对应的VM资源信息 
public class GetVmInstancesByIdResult:NSObject,JdCloudResult
{
    /// Vm
    var vm:VmInfoDetail?



    public override init(){
        super.init()
    }

    enum GetVmInstancesByIdResultCodingKeys: String, CodingKey {
        case vm
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVmInstancesByIdResultCodingKeys.self)
        if decoderContainer.contains(.vm)
        {
            self.vm = try decoderContainer.decode(VmInfoDetail?.self, forKey: .vm)
        }
    }
}
public extension GetVmInstancesByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmInstancesByIdResultCodingKeys.self)
        try encoderContainer.encode(vm, forKey: .vm)
    }
}

///  通过虚拟机id删除虚拟机
public class DeleteVmInstanceByIdRequest:JdCloudRequest
{
    /// 资源实例ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteVmInstanceByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVmInstanceByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  根据云提供商创建虚拟机
public class CreateVmInstanceRequest:JdCloudRequest
{
    /// 创建VM
    var vm:CreateVm


    public init(regionId: String,vm:CreateVm){
        self.vm = vm
        super.init(regionId: regionId)
    }


    enum CreateVmInstanceRequestRequestCodingKeys: String, CodingKey {
        case vm
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVmInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(vm, forKey: .vm)

    }
}


///  启动一台实例。实例状态必须为 已停止（Stopped），才可以调用该接口。
public class StartVmInstanceByIdRequest:JdCloudRequest
{
    /// 资源实例ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum StartVmInstanceByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartVmInstanceByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  根据云提供商查询对应的VM资源信息
public class GetVmInstancesByIdRequest:JdCloudRequest
{
    /// 资源实例ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetVmInstancesByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmInstancesByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class DeleteVmInstanceByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVmInstanceByIdResult?;

    enum DeleteVmInstanceByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVmInstanceByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVmInstanceByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVmInstanceByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVmInstanceByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  只能重启状态为 运行中（Running）的实例。
public class RebootVmInstanceByIdRequest:JdCloudRequest
{
    /// 资源实例ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum RebootVmInstanceByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RebootVmInstanceByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 根据云提供商创建虚拟机 
public class CreateVmInstanceResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateVmInstanceResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVmInstanceResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateVmInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVmInstanceResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
public class StopVmInstanceByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopVmInstanceByIdResult?;

    enum StopVmInstanceByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopVmInstanceByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopVmInstanceByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension StopVmInstanceByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopVmInstanceByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  停止运行一台实例。只有状态为 运行中（Running）的实例才可以进行此操作。
public class StopVmInstanceByIdRequest:JdCloudRequest
{
    /// 资源实例ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum StopVmInstanceByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopVmInstanceByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class GetVmInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVmInstancesResult?;

    enum GetVmInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVmInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVmInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVmInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 通过虚拟机id删除虚拟机 
public class DeleteVmInstanceByIdResult:NSObject,JdCloudResult
{
}
public class RebootVmInstanceByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RebootVmInstanceByIdResult?;

    enum RebootVmInstanceByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RebootVmInstanceByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RebootVmInstanceByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension RebootVmInstanceByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RebootVmInstanceByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据云提供商查询对应的虚拟机资源信息 
public class GetVmInstancesResult:NSObject,JdCloudResult
{
    /// Vms
    var vms:[VmInfo?]?



    public override init(){
        super.init()
    }

    enum GetVmInstancesResultCodingKeys: String, CodingKey {
        case vms
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVmInstancesResultCodingKeys.self)
        if decoderContainer.contains(.vms)
        {
            self.vms = try decoderContainer.decode([VmInfo?]?.self, forKey: .vms)
        }
    }
}
public extension GetVmInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmInstancesResultCodingKeys.self)
        try encoderContainer.encode(vms, forKey: .vms)
    }
}
/// 启动一台实例。实例状态必须为 已停止（Stopped），才可以调用该接口。 
public class StartVmInstanceByIdResult:NSObject,JdCloudResult
{
}
/// 只能重启状态为 运行中（Running）的实例。 
public class RebootVmInstanceByIdResult:NSObject,JdCloudResult
{
}

///  根据云提供商查询对应的虚拟机资源信息
public class GetVmInstancesRequest:JdCloudRequest
{
}

/// 停止运行一台实例。只有状态为 运行中（Running）的实例才可以进行此操作。 
public class StopVmInstanceByIdResult:NSObject,JdCloudResult
{
}
public class CreateVmInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVmInstanceResult?;

    enum CreateVmInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVmInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVmInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVmInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVmInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class StartVmInstanceByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartVmInstanceByIdResult?;

    enum StartVmInstanceByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartVmInstanceByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartVmInstanceByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension StartVmInstanceByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartVmInstanceByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteRdsByInstIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteRdsByInstIdResult?;

    enum DeleteRdsByInstIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteRdsByInstIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteRdsByInstIdResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteRdsByInstIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRdsByInstIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除指定ID的RDS实例信息 
public class DeleteRdsByInstIdResult:NSObject,JdCloudResult
{
}

///  根据云提供商查询对应的RDS实例信息
public class GetRdsInstancesRequest:JdCloudRequest
{
}


///  根据给定的信息，创建RDS实例
public class CreateRdsInstanceRequest:JdCloudRequest
{
    /// 创建RDS实例
    var instance:CreateRDSInstance


    public init(regionId: String,instance:CreateRDSInstance){
        self.instance = instance
        super.init(regionId: regionId)
    }


    enum CreateRdsInstanceRequestRequestCodingKeys: String, CodingKey {
        case instance
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRdsInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instance, forKey: .instance)

    }
}

/// 根据云提供商查询对应的RDS实例信息 
public class GetRdsInstancesResult:NSObject,JdCloudResult
{
    /// Instances
    var instances:[RdsInstanceDetailInfo?]?



    public override init(){
        super.init()
    }

    enum GetRdsInstancesResultCodingKeys: String, CodingKey {
        case instances
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsInstancesResultCodingKeys.self)
        if decoderContainer.contains(.instances)
        {
            self.instances = try decoderContainer.decode([RdsInstanceDetailInfo?]?.self, forKey: .instances)
        }
    }
}
public extension GetRdsInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsInstancesResultCodingKeys.self)
        try encoderContainer.encode(instances, forKey: .instances)
    }
}

///  查询指定ID的RDS实例信息
public class GetRdsByInstIdRequest:JdCloudRequest
{
    /// RDS实例ID
    var instId:String


    public init(regionId: String,instId:String){
        self.instId = instId
        super.init(regionId: regionId)
    }


    enum GetRdsByInstIdRequestRequestCodingKeys: String, CodingKey {
        case instId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsByInstIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(instId, forKey: .instId)

    }
}


///  删除指定ID的RDS实例信息
public class DeleteRdsByInstIdRequest:JdCloudRequest
{
    /// RDS实例ID
    var instId:String


    public init(regionId: String,instId:String){
        self.instId = instId
        super.init(regionId: regionId)
    }


    enum DeleteRdsByInstIdRequestRequestCodingKeys: String, CodingKey {
        case instId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRdsByInstIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(instId, forKey: .instId)

    }
}

/// 根据给定的信息，创建RDS实例 
public class CreateRdsInstanceResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateRdsInstanceResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRdsInstanceResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateRdsInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRdsInstanceResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
/// 查询指定ID的RDS实例信息 
public class GetRdsByInstIdResult:NSObject,JdCloudResult
{
    /// Instance
    var instance:RdsInstanceDetailInfo?



    public override init(){
        super.init()
    }

    enum GetRdsByInstIdResultCodingKeys: String, CodingKey {
        case instance
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsByInstIdResultCodingKeys.self)
        if decoderContainer.contains(.instance)
        {
            self.instance = try decoderContainer.decode(RdsInstanceDetailInfo?.self, forKey: .instance)
        }
    }
}
public extension GetRdsByInstIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsByInstIdResultCodingKeys.self)
        try encoderContainer.encode(instance, forKey: .instance)
    }
}
public class GetRdsInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRdsInstancesResult?;

    enum GetRdsInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRdsInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRdsInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetRdsByInstIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRdsByInstIdResult?;

    enum GetRdsByInstIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsByInstIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRdsByInstIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRdsByInstIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsByInstIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateRdsInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateRdsInstanceResult?;

    enum CreateRdsInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRdsInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateRdsInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateRdsInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRdsInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询执行结果 
public class GetDeploymentResultResult:NSObject,JdCloudResult
{
    /// Task
    var task:TaskInfo?



    public override init(){
        super.init()
    }

    enum GetDeploymentResultResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDeploymentResultResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(TaskInfo?.self, forKey: .task)
        }
    }
}
public extension GetDeploymentResultResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentResultResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
/// 查询部署信息列表 
public class GetDeploymentsResult:NSObject,JdCloudResult
{
    /// Deployments
    var deployments:[DeploymentInfo?]?



    public override init(){
        super.init()
    }

    enum GetDeploymentsResultCodingKeys: String, CodingKey {
        case deployments
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDeploymentsResultCodingKeys.self)
        if decoderContainer.contains(.deployments)
        {
            self.deployments = try decoderContainer.decode([DeploymentInfo?]?.self, forKey: .deployments)
        }
    }
}
public extension GetDeploymentsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentsResultCodingKeys.self)
        try encoderContainer.encode(deployments, forKey: .deployments)
    }
}
public class GetDeploymentsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetDeploymentsResult?;

    enum GetDeploymentsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDeploymentsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetDeploymentsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetDeploymentsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询某一次的历史执行结果（内部使用） 
public class GetDeploymentsResultsByIdRecordResult:NSObject,JdCloudResult
{
    /// Task
    var task:TaskInfo?



    public override init(){
        super.init()
    }

    enum GetDeploymentsResultsByIdRecordResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDeploymentsResultsByIdRecordResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(TaskInfo?.self, forKey: .task)
        }
    }
}
public extension GetDeploymentsResultsByIdRecordResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentsResultsByIdRecordResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
public class DeleteDeploymentResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteDeploymentResult?;

    enum DeleteDeploymentResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteDeploymentResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteDeploymentResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteDeploymentResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDeploymentResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据已有资源反向生成deployment
public class ReverseDeploymentRequest:JdCloudRequest
{
    /// 根据已有资源反向生成deployment
    var reverse:ReverseDeploymentInfo


    public init(regionId: String,reverse:ReverseDeploymentInfo){
        self.reverse = reverse
        super.init(regionId: regionId)
    }


    enum ReverseDeploymentRequestRequestCodingKeys: String, CodingKey {
        case reverse
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReverseDeploymentRequestRequestCodingKeys.self)
        try encoderContainer.encode(reverse, forKey: .reverse)

    }
}

public class CreateDeploymentResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateDeploymentResult?;

    enum CreateDeploymentResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDeploymentResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateDeploymentResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateDeploymentResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDeploymentResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ReverseDeploymentResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ReverseDeploymentResult?;

    enum ReverseDeploymentResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReverseDeploymentResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ReverseDeploymentResult?.self, forKey: .result) ?? nil
    }
}

public extension ReverseDeploymentResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReverseDeploymentResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  克隆部署信息
public class CloneDeploymentRequest:JdCloudRequest
{
    /// 创建deployment
    var deployment:Deployment

    /// Deployment ID
    var id:String


    public init(regionId: String,deployment:Deployment,id:String){
        self.deployment = deployment
        self.id = id
        super.init(regionId: regionId)
    }


    enum CloneDeploymentRequestRequestCodingKeys: String, CodingKey {
        case deployment
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CloneDeploymentRequestRequestCodingKeys.self)
        try encoderContainer.encode(deployment, forKey: .deployment)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 根据已有资源反向生成deployment 
public class ReverseDeploymentResult:NSObject,JdCloudResult
{
    /// Deployment
    var deployment:DeploymentInfo?



    public override init(){
        super.init()
    }

    enum ReverseDeploymentResultCodingKeys: String, CodingKey {
        case deployment
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReverseDeploymentResultCodingKeys.self)
        if decoderContainer.contains(.deployment)
        {
            self.deployment = try decoderContainer.decode(DeploymentInfo?.self, forKey: .deployment)
        }
    }
}
public extension ReverseDeploymentResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReverseDeploymentResultCodingKeys.self)
        try encoderContainer.encode(deployment, forKey: .deployment)
    }
}
public class EditDeploymentResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EditDeploymentResult?;

    enum EditDeploymentResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EditDeploymentResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EditDeploymentResult?.self, forKey: .result) ?? nil
    }
}

public extension EditDeploymentResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EditDeploymentResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询应用记录
public class GetDeploymentVersionsRequest:JdCloudRequest
{
    /// Deployment ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetDeploymentVersionsRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentVersionsRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  应用部署回滚
public class RollbackDeploymentsVersionRequest:JdCloudRequest
{
    /// deployment ID
    var id:String

    /// application ID
    var version_id:String


    public init(regionId: String,id:String,version_id:String){
        self.id = id
        self.version_id = version_id
        super.init(regionId: regionId)
    }


    enum RollbackDeploymentsVersionRequestRequestCodingKeys: String, CodingKey {
        case id
        case version_id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RollbackDeploymentsVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(version_id, forKey: .version_id)

    }
}


///  创建部署信息
public class CreateDeploymentRequest:JdCloudRequest
{
    /// 创建deployment
    var deployment:DeploymentInfo


    public init(regionId: String,deployment:DeploymentInfo){
        self.deployment = deployment
        super.init(regionId: regionId)
    }


    enum CreateDeploymentRequestRequestCodingKeys: String, CodingKey {
        case deployment
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDeploymentRequestRequestCodingKeys.self)
        try encoderContainer.encode(deployment, forKey: .deployment)

    }
}

public class RollbackDeploymentsVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RollbackDeploymentsVersionResult?;

    enum RollbackDeploymentsVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RollbackDeploymentsVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RollbackDeploymentsVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension RollbackDeploymentsVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RollbackDeploymentsVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询部署信息
public class GetDeploymentsByIdRequest:JdCloudRequest
{
    /// Deployment ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetDeploymentsByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentsByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class GetDeploymentsResultsByIdRecordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetDeploymentsResultsByIdRecordResult?;

    enum GetDeploymentsResultsByIdRecordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDeploymentsResultsByIdRecordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetDeploymentsResultsByIdRecordResult?.self, forKey: .result) ?? nil
    }
}

public extension GetDeploymentsResultsByIdRecordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentsResultsByIdRecordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改部署信息
public class EditDeploymentRequest:JdCloudRequest
{
    /// 修改deployment
    var deployment:DeploymentInfo

    /// Deployment ID
    var id:String


    public init(regionId: String,deployment:DeploymentInfo,id:String){
        self.deployment = deployment
        self.id = id
        super.init(regionId: regionId)
    }


    enum EditDeploymentRequestRequestCodingKeys: String, CodingKey {
        case deployment
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EditDeploymentRequestRequestCodingKeys.self)
        try encoderContainer.encode(deployment, forKey: .deployment)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 应用部署回滚 
public class RollbackDeploymentsVersionResult:NSObject,JdCloudResult
{
    /// Deployment
    var deployment:DeploymentInfo?



    public override init(){
        super.init()
    }

    enum RollbackDeploymentsVersionResultCodingKeys: String, CodingKey {
        case deployment
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RollbackDeploymentsVersionResultCodingKeys.self)
        if decoderContainer.contains(.deployment)
        {
            self.deployment = try decoderContainer.decode(DeploymentInfo?.self, forKey: .deployment)
        }
    }
}
public extension RollbackDeploymentsVersionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RollbackDeploymentsVersionResultCodingKeys.self)
        try encoderContainer.encode(deployment, forKey: .deployment)
    }
}
/// 查询应用记录详细信息 
public class GetDeploymentsVersionResult:NSObject,JdCloudResult
{
    /// Deployment
    var deployment:DeploymentInfo?



    public override init(){
        super.init()
    }

    enum GetDeploymentsVersionResultCodingKeys: String, CodingKey {
        case deployment
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDeploymentsVersionResultCodingKeys.self)
        if decoderContainer.contains(.deployment)
        {
            self.deployment = try decoderContainer.decode(DeploymentInfo?.self, forKey: .deployment)
        }
    }
}
public extension GetDeploymentsVersionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentsVersionResultCodingKeys.self)
        try encoderContainer.encode(deployment, forKey: .deployment)
    }
}
/// 修改部署信息 
public class EditDeploymentResult:NSObject,JdCloudResult
{
    /// Deployment
    var deployment:DeploymentInfo?



    public override init(){
        super.init()
    }

    enum EditDeploymentResultCodingKeys: String, CodingKey {
        case deployment
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EditDeploymentResultCodingKeys.self)
        if decoderContainer.contains(.deployment)
        {
            self.deployment = try decoderContainer.decode(DeploymentInfo?.self, forKey: .deployment)
        }
    }
}
public extension EditDeploymentResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EditDeploymentResultCodingKeys.self)
        try encoderContainer.encode(deployment, forKey: .deployment)
    }
}

///  应用部署
public class ApplyDeploymentRequest:JdCloudRequest
{
    /// 应用部署
    var apply:Apply

    /// Deployment ID
    var id:String


    public init(regionId: String,apply:Apply,id:String){
        self.apply = apply
        self.id = id
        super.init(regionId: regionId)
    }


    enum ApplyDeploymentRequestRequestCodingKeys: String, CodingKey {
        case apply
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ApplyDeploymentRequestRequestCodingKeys.self)
        try encoderContainer.encode(apply, forKey: .apply)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class GetDeploymentVersionsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetDeploymentVersionsResult?;

    enum GetDeploymentVersionsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDeploymentVersionsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetDeploymentVersionsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetDeploymentVersionsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentVersionsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetDeploymentResultResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetDeploymentResultResult?;

    enum GetDeploymentResultResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDeploymentResultResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetDeploymentResultResult?.self, forKey: .result) ?? nil
    }
}

public extension GetDeploymentResultResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentResultResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CloneDeploymentResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CloneDeploymentResult?;

    enum CloneDeploymentResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CloneDeploymentResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CloneDeploymentResult?.self, forKey: .result) ?? nil
    }
}

public extension CloneDeploymentResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CloneDeploymentResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询部署信息 
public class GetDeploymentsByIdResult:NSObject,JdCloudResult
{
    /// Deployment
    var deployment:DeploymentInfo?



    public override init(){
        super.init()
    }

    enum GetDeploymentsByIdResultCodingKeys: String, CodingKey {
        case deployment
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDeploymentsByIdResultCodingKeys.self)
        if decoderContainer.contains(.deployment)
        {
            self.deployment = try decoderContainer.decode(DeploymentInfo?.self, forKey: .deployment)
        }
    }
}
public extension GetDeploymentsByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentsByIdResultCodingKeys.self)
        try encoderContainer.encode(deployment, forKey: .deployment)
    }
}
/// 克隆部署信息 
public class CloneDeploymentResult:NSObject,JdCloudResult
{
    /// Deployment
    var deployment:DeploymentInfo?



    public override init(){
        super.init()
    }

    enum CloneDeploymentResultCodingKeys: String, CodingKey {
        case deployment
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CloneDeploymentResultCodingKeys.self)
        if decoderContainer.contains(.deployment)
        {
            self.deployment = try decoderContainer.decode(DeploymentInfo?.self, forKey: .deployment)
        }
    }
}
public extension CloneDeploymentResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CloneDeploymentResultCodingKeys.self)
        try encoderContainer.encode(deployment, forKey: .deployment)
    }
}

///  查询执行结果
public class GetDeploymentResultRequest:JdCloudRequest
{
    /// deployment ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetDeploymentResultRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentResultRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 应用部署 
public class ApplyDeploymentResult:NSObject,JdCloudResult
{
    /// Deployment
    var deployment:DeploymentInfo?



    public override init(){
        super.init()
    }

    enum ApplyDeploymentResultCodingKeys: String, CodingKey {
        case deployment
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ApplyDeploymentResultCodingKeys.self)
        if decoderContainer.contains(.deployment)
        {
            self.deployment = try decoderContainer.decode(DeploymentInfo?.self, forKey: .deployment)
        }
    }
}
public extension ApplyDeploymentResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ApplyDeploymentResultCodingKeys.self)
        try encoderContainer.encode(deployment, forKey: .deployment)
    }
}

///  查询某一次的历史执行结果（内部使用）
public class GetDeploymentsResultsByIdRecordRequest:JdCloudRequest
{
    /// deployment ID
    var id:String

    /// deployment ID
    var record:String


    public init(regionId: String,id:String,record:String){
        self.id = id
        self.record = record
        super.init(regionId: regionId)
    }


    enum GetDeploymentsResultsByIdRecordRequestRequestCodingKeys: String, CodingKey {
        case id
        case record
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentsResultsByIdRecordRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(record, forKey: .record)

    }
}


///  查询部署信息列表
public class GetDeploymentsRequest:JdCloudRequest
{
}


///  删除部署信息
public class DeleteDeploymentRequest:JdCloudRequest
{
    /// Deployment ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteDeploymentRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDeploymentRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class GetDeploymentsVersionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetDeploymentsVersionResult?;

    enum GetDeploymentsVersionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDeploymentsVersionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetDeploymentsVersionResult?.self, forKey: .result) ?? nil
    }
}

public extension GetDeploymentsVersionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentsVersionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 预部署 
public class DryrunDeploymentResult:NSObject,JdCloudResult
{
}
/// 创建部署信息 
public class CreateDeploymentResult:NSObject,JdCloudResult
{
    /// Deployment
    var deployment:DeploymentInfo?



    public override init(){
        super.init()
    }

    enum CreateDeploymentResultCodingKeys: String, CodingKey {
        case deployment
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDeploymentResultCodingKeys.self)
        if decoderContainer.contains(.deployment)
        {
            self.deployment = try decoderContainer.decode(DeploymentInfo?.self, forKey: .deployment)
        }
    }
}
public extension CreateDeploymentResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDeploymentResultCodingKeys.self)
        try encoderContainer.encode(deployment, forKey: .deployment)
    }
}
/// 查询应用记录 
public class GetDeploymentVersionsResult:NSObject,JdCloudResult
{
    /// Versions
    var versions:[DeploymentApplyInfo?]?



    public override init(){
        super.init()
    }

    enum GetDeploymentVersionsResultCodingKeys: String, CodingKey {
        case versions
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDeploymentVersionsResultCodingKeys.self)
        if decoderContainer.contains(.versions)
        {
            self.versions = try decoderContainer.decode([DeploymentApplyInfo?]?.self, forKey: .versions)
        }
    }
}
public extension GetDeploymentVersionsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentVersionsResultCodingKeys.self)
        try encoderContainer.encode(versions, forKey: .versions)
    }
}
public class DryrunDeploymentResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DryrunDeploymentResult?;

    enum DryrunDeploymentResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DryrunDeploymentResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DryrunDeploymentResult?.self, forKey: .result) ?? nil
    }
}

public extension DryrunDeploymentResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DryrunDeploymentResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ApplyDeploymentResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ApplyDeploymentResult?;

    enum ApplyDeploymentResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ApplyDeploymentResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ApplyDeploymentResult?.self, forKey: .result) ?? nil
    }
}

public extension ApplyDeploymentResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ApplyDeploymentResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询应用记录详细信息
public class GetDeploymentsVersionRequest:JdCloudRequest
{
    /// deployment ID
    var id:String

    /// application ID
    var version_id:String


    public init(regionId: String,id:String,version_id:String){
        self.id = id
        self.version_id = version_id
        super.init(regionId: regionId)
    }


    enum GetDeploymentsVersionRequestRequestCodingKeys: String, CodingKey {
        case id
        case version_id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentsVersionRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)
        try encoderContainer.encode(version_id, forKey: .version_id)

    }
}


///  预部署
public class DryrunDeploymentRequest:JdCloudRequest
{
    /// Deployment ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DryrunDeploymentRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DryrunDeploymentRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class GetDeploymentsByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetDeploymentsByIdResult?;

    enum GetDeploymentsByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDeploymentsByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetDeploymentsByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetDeploymentsByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDeploymentsByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除部署信息 
public class DeleteDeploymentResult:NSObject,JdCloudResult
{
}

///  删除密钥对
public class DeleteVmKeypairByNameRequest:JdCloudRequest
{
    /// keypair name
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum DeleteVmKeypairByNameRequestRequestCodingKeys: String, CodingKey {
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVmKeypairByNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)

    }
}

/// 根据云提供商创建密钥对 
public class CreateVmKeypairResult:NSObject,JdCloudResult
{
    /// Tasks
    var tasks:[ResourceTFInfo?]?



    public override init(){
        super.init()
    }

    enum CreateVmKeypairResultCodingKeys: String, CodingKey {
        case tasks
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVmKeypairResultCodingKeys.self)
        if decoderContainer.contains(.tasks)
        {
            self.tasks = try decoderContainer.decode([ResourceTFInfo?]?.self, forKey: .tasks)
        }
    }
}
public extension CreateVmKeypairResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVmKeypairResultCodingKeys.self)
        try encoderContainer.encode(tasks, forKey: .tasks)
    }
}

///  根据云提供商查询对应的密钥对资源信息
public class GetVmKeypairsByNameRequest:JdCloudRequest
{
    /// keypair name
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum GetVmKeypairsByNameRequestRequestCodingKeys: String, CodingKey {
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmKeypairsByNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)

    }
}


///  根据云提供商查询对应的密钥对资源信息
public class GetVmKeypairsRequest:JdCloudRequest
{
}

/// 根据云提供商查询对应的密钥对资源信息 
public class GetVmKeypairsResult:NSObject,JdCloudResult
{
    /// Keypairs
    var keypairs:[KeypairInfo?]?



    public override init(){
        super.init()
    }

    enum GetVmKeypairsResultCodingKeys: String, CodingKey {
        case keypairs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVmKeypairsResultCodingKeys.self)
        if decoderContainer.contains(.keypairs)
        {
            self.keypairs = try decoderContainer.decode([KeypairInfo?]?.self, forKey: .keypairs)
        }
    }
}
public extension GetVmKeypairsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmKeypairsResultCodingKeys.self)
        try encoderContainer.encode(keypairs, forKey: .keypairs)
    }
}
/// 根据云提供商查询对应的密钥对资源信息 
public class GetVmKeypairsByNameResult:NSObject,JdCloudResult
{
    /// Keypair
    var keypair:KeypairInfo?



    public override init(){
        super.init()
    }

    enum GetVmKeypairsByNameResultCodingKeys: String, CodingKey {
        case keypair
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVmKeypairsByNameResultCodingKeys.self)
        if decoderContainer.contains(.keypair)
        {
            self.keypair = try decoderContainer.decode(KeypairInfo?.self, forKey: .keypair)
        }
    }
}
public extension GetVmKeypairsByNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmKeypairsByNameResultCodingKeys.self)
        try encoderContainer.encode(keypair, forKey: .keypair)
    }
}

///  根据云提供商创建密钥对
public class CreateVmKeypairRequest:JdCloudRequest
{
    /// 创建keypair
    var keypair:CreateKeypair


    public init(regionId: String,keypair:CreateKeypair){
        self.keypair = keypair
        super.init(regionId: regionId)
    }


    enum CreateVmKeypairRequestRequestCodingKeys: String, CodingKey {
        case keypair
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVmKeypairRequestRequestCodingKeys.self)
        try encoderContainer.encode(keypair, forKey: .keypair)

    }
}

public class CreateVmKeypairResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVmKeypairResult?;

    enum CreateVmKeypairResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVmKeypairResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVmKeypairResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVmKeypairResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVmKeypairResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteVmKeypairByNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVmKeypairByNameResult?;

    enum DeleteVmKeypairByNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVmKeypairByNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVmKeypairByNameResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVmKeypairByNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVmKeypairByNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除密钥对 
public class DeleteVmKeypairByNameResult:NSObject,JdCloudResult
{
}
public class GetVmKeypairsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVmKeypairsResult?;

    enum GetVmKeypairsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVmKeypairsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVmKeypairsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVmKeypairsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmKeypairsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetVmKeypairsByNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVmKeypairsByNameResult?;

    enum GetVmKeypairsByNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVmKeypairsByNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVmKeypairsByNameResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVmKeypairsByNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmKeypairsByNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建任务
public class CreateTransferTaskRequest:JdCloudRequest
{
    /// 
    var task:TransferSimpleTaskInfo?




    enum CreateTransferTaskRequestRequestCodingKeys: String, CodingKey {
        case task
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateTransferTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)

    }
}


///  根据指定ID停止任务
public class StopTransferTaskRequest:JdCloudRequest
{
    /// 用户ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum StopTransferTaskRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopTransferTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 创建任务 
public class CreateTransferTaskResult:NSObject,JdCloudResult
{
    /// Task
    var task:TransferTaskInfoWithID?



    public override init(){
        super.init()
    }

    enum CreateTransferTaskResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateTransferTaskResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(TransferTaskInfoWithID?.self, forKey: .task)
        }
    }
}
public extension CreateTransferTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateTransferTaskResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
/// 根据指定ID停止任务 
public class StopTransferTaskResult:NSObject,JdCloudResult
{
}
/// 根据指定任务id查询迁移进度 
public class GetTransferTaskProgressResult:NSObject,JdCloudResult
{
    /// Task
    var task:TransferTaskProgressInfo?



    public override init(){
        super.init()
    }

    enum GetTransferTaskProgressResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTransferTaskProgressResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(TransferTaskProgressInfo?.self, forKey: .task)
        }
    }
}
public extension GetTransferTaskProgressResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTransferTaskProgressResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
/// 根据指定ID删除任务 
public class DeleteTransferTaskResult:NSObject,JdCloudResult
{
}

///  根据指定ID启动任务
public class StartTransferTaskRequest:JdCloudRequest
{
    /// 用户ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum StartTransferTaskRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartTransferTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 根据指定任务id查询迁移失败文件列表 
public class GetTransferTaskFailedFilesResult:NSObject,JdCloudResult
{
    /// Task
    var task:TransferTaskFailedDetailInfo?



    public override init(){
        super.init()
    }

    enum GetTransferTaskFailedFilesResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTransferTaskFailedFilesResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(TransferTaskFailedDetailInfo?.self, forKey: .task)
        }
    }
}
public extension GetTransferTaskFailedFilesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTransferTaskFailedFilesResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
/// 获取任务列表 
public class GetTransferTasksResult:NSObject,JdCloudResult
{
    /// Tasks
    var tasks:[TransferTaskInfoWithID?]?



    public override init(){
        super.init()
    }

    enum GetTransferTasksResultCodingKeys: String, CodingKey {
        case tasks
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTransferTasksResultCodingKeys.self)
        if decoderContainer.contains(.tasks)
        {
            self.tasks = try decoderContainer.decode([TransferTaskInfoWithID?]?.self, forKey: .tasks)
        }
    }
}
public extension GetTransferTasksResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTransferTasksResultCodingKeys.self)
        try encoderContainer.encode(tasks, forKey: .tasks)
    }
}
public class GetTransferTaskFailedFilesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetTransferTaskFailedFilesResult?;

    enum GetTransferTaskFailedFilesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTransferTaskFailedFilesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetTransferTaskFailedFilesResult?.self, forKey: .result) ?? nil
    }
}

public extension GetTransferTaskFailedFilesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTransferTaskFailedFilesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据指定ID删除任务
public class DeleteTransferTaskRequest:JdCloudRequest
{
    /// 任务ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteTransferTaskRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteTransferTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class StartTransferTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartTransferTaskResult?;

    enum StartTransferTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartTransferTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartTransferTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension StartTransferTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartTransferTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据指定ID获取任务信息 
public class GetTransferTaskByIdResult:NSObject,JdCloudResult
{
    /// Task
    var task:TransferTaskInfoWithID?



    public override init(){
        super.init()
    }

    enum GetTransferTaskByIdResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTransferTaskByIdResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(TransferTaskInfoWithID?.self, forKey: .task)
        }
    }
}
public extension GetTransferTaskByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTransferTaskByIdResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}

///  获取任务列表
public class GetTransferTasksRequest:JdCloudRequest
{
}

public class CreateTransferTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateTransferTaskResult?;

    enum CreateTransferTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateTransferTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateTransferTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateTransferTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateTransferTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据指定任务id查询迁移进度
public class GetTransferTaskProgressRequest:JdCloudRequest
{
    /// 任务ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetTransferTaskProgressRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTransferTaskProgressRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class StopTransferTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopTransferTaskResult?;

    enum StopTransferTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopTransferTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopTransferTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension StopTransferTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopTransferTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据指定ID获取任务信息
public class GetTransferTaskByIdRequest:JdCloudRequest
{
    /// 用户ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetTransferTaskByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTransferTaskByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 根据指定ID修改任务 
public class EditTransferTaskResult:NSObject,JdCloudResult
{
}

///  根据指定ID修改任务
public class EditTransferTaskRequest:JdCloudRequest
{
    /// 
    var task:TransferTaskInfo?

    /// 任务ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum EditTransferTaskRequestRequestCodingKeys: String, CodingKey {
        case task
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EditTransferTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 根据指定ID启动任务 
public class StartTransferTaskResult:NSObject,JdCloudResult
{
}
public class EditTransferTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:EditTransferTaskResult?;

    enum EditTransferTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EditTransferTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(EditTransferTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension EditTransferTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EditTransferTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteTransferTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteTransferTaskResult?;

    enum DeleteTransferTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteTransferTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteTransferTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteTransferTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteTransferTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetTransferTaskProgressResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetTransferTaskProgressResult?;

    enum GetTransferTaskProgressResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTransferTaskProgressResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetTransferTaskProgressResult?.self, forKey: .result) ?? nil
    }
}

public extension GetTransferTaskProgressResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTransferTaskProgressResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据指定任务id查询迁移失败文件列表
public class GetTransferTaskFailedFilesRequest:JdCloudRequest
{
    /// 任务ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetTransferTaskFailedFilesRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTransferTaskFailedFilesRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class GetTransferTaskByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetTransferTaskByIdResult?;

    enum GetTransferTaskByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTransferTaskByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetTransferTaskByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetTransferTaskByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTransferTaskByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetTransferTasksResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetTransferTasksResult?;

    enum GetTransferTasksResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTransferTasksResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetTransferTasksResult?.self, forKey: .result) ?? nil
    }
}

public extension GetTransferTasksResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTransferTasksResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据云提供商查询对应的OSS存储桶信息 
public class GetBucketByNameResult:NSObject,JdCloudResult
{
    /// Bucket
    var bucket:OssBucketDetailInfo?



    public override init(){
        super.init()
    }

    enum GetBucketByNameResultCodingKeys: String, CodingKey {
        case bucket
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetBucketByNameResultCodingKeys.self)
        if decoderContainer.contains(.bucket)
        {
            self.bucket = try decoderContainer.decode(OssBucketDetailInfo?.self, forKey: .bucket)
        }
    }
}
public extension GetBucketByNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBucketByNameResultCodingKeys.self)
        try encoderContainer.encode(bucket, forKey: .bucket)
    }
}
public class CreateBucketResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateBucketResult?;

    enum CreateBucketResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBucketResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateBucketResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateBucketResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBucketResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据过滤条件，取得指定OSS存储桶上的文件列表 
public class GetBucketFilesResult:NSObject,JdCloudResult
{
    /// 是否已被截断（表示没有更多数据了）
    var isTruncated:Bool?

    /// 本次查询的起点（文件key值）
    var marker:String?

    /// Files
    var files:[OssFileInfo?]?



    public override init(){
        super.init()
    }

    enum GetBucketFilesResultCodingKeys: String, CodingKey {
        case isTruncated
        case marker
        case files
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetBucketFilesResultCodingKeys.self)
        if decoderContainer.contains(.isTruncated)
        {
            self.isTruncated = try decoderContainer.decode(Bool?.self, forKey: .isTruncated)
        }
        if decoderContainer.contains(.marker)
        {
            self.marker = try decoderContainer.decode(String?.self, forKey: .marker)
        }
        if decoderContainer.contains(.files)
        {
            self.files = try decoderContainer.decode([OssFileInfo?]?.self, forKey: .files)
        }
    }
}
public extension GetBucketFilesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBucketFilesResultCodingKeys.self)
        try encoderContainer.encode(isTruncated, forKey: .isTruncated)
        try encoderContainer.encode(marker, forKey: .marker)
        try encoderContainer.encode(files, forKey: .files)
    }
}
public class GetBucketFilesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetBucketFilesResult?;

    enum GetBucketFilesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetBucketFilesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetBucketFilesResult?.self, forKey: .result) ?? nil
    }
}

public extension GetBucketFilesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBucketFilesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除指定ID的OSS存储桶信息 
public class DeleteBucketResult:NSObject,JdCloudResult
{
}
public class GetBucketsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetBucketsResult?;

    enum GetBucketsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetBucketsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetBucketsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetBucketsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBucketsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据云提供商查询对应的OSS存储桶信息
public class GetBucketByNameRequest:JdCloudRequest
{
    /// OSS存储桶名称
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum GetBucketByNameRequestRequestCodingKeys: String, CodingKey {
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBucketByNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)

    }
}


///  根据给定的信息，创建OSS存储桶
public class CreateBucketRequest:JdCloudRequest
{
    /// 创建OSS存储桶
    var bucket:CreateOSSBucket


    public init(regionId: String,bucket:CreateOSSBucket){
        self.bucket = bucket
        super.init(regionId: regionId)
    }


    enum CreateBucketRequestRequestCodingKeys: String, CodingKey {
        case bucket
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBucketRequestRequestCodingKeys.self)
        try encoderContainer.encode(bucket, forKey: .bucket)

    }
}


///  删除指定ID的OSS存储桶信息
public class DeleteBucketRequest:JdCloudRequest
{
    /// OSS存储桶名称
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum DeleteBucketRequestRequestCodingKeys: String, CodingKey {
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBucketRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)

    }
}


///  根据云提供商查询对应的OSS存储桶列表
public class GetBucketsRequest:JdCloudRequest
{
}

/// 根据云提供商查询对应的OSS存储桶列表 
public class GetBucketsResult:NSObject,JdCloudResult
{
    /// Buckets
    var buckets:[OssBucketInfo?]?



    public override init(){
        super.init()
    }

    enum GetBucketsResultCodingKeys: String, CodingKey {
        case buckets
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetBucketsResultCodingKeys.self)
        if decoderContainer.contains(.buckets)
        {
            self.buckets = try decoderContainer.decode([OssBucketInfo?]?.self, forKey: .buckets)
        }
    }
}
public extension GetBucketsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBucketsResultCodingKeys.self)
        try encoderContainer.encode(buckets, forKey: .buckets)
    }
}
public class GetBucketByNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetBucketByNameResult?;

    enum GetBucketByNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetBucketByNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetBucketByNameResult?.self, forKey: .result) ?? nil
    }
}

public extension GetBucketByNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBucketByNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteBucketResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteBucketResult?;

    enum DeleteBucketResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteBucketResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteBucketResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteBucketResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteBucketResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据给定的信息，创建OSS存储桶 
public class CreateBucketResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateBucketResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateBucketResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateBucketResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateBucketResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}

///  根据过滤条件，取得指定OSS存储桶上的文件列表
public class GetBucketFilesRequest:JdCloudRequest
{
    /// 本次查询的起点（文件key值）
    var marker:String?

    /// OSS存储桶名称
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum GetBucketFilesRequestRequestCodingKeys: String, CodingKey {
        case marker
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetBucketFilesRequestRequestCodingKeys.self)
        try encoderContainer.encode(marker, forKey: .marker)
        try encoderContainer.encode(name, forKey: .name)

    }
}


///  创建数据同步通道
public class CreateChannelRequest:JdCloudRequest
{
    /// 创建channel
    var channel:ChannelInfo


    public init(regionId: String,channel:ChannelInfo){
        self.channel = channel
        super.init(regionId: regionId)
    }


    enum CreateChannelRequestRequestCodingKeys: String, CodingKey {
        case channel
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateChannelRequestRequestCodingKeys.self)
        try encoderContainer.encode(channel, forKey: .channel)

    }
}

/// 创建数据源 
public class CreateDatasourceResult:NSObject,JdCloudResult
{
    /// Datasource
    var datasource:DatasourceInfo?



    public override init(){
        super.init()
    }

    enum CreateDatasourceResultCodingKeys: String, CodingKey {
        case datasource
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDatasourceResultCodingKeys.self)
        if decoderContainer.contains(.datasource)
        {
            self.datasource = try decoderContainer.decode(DatasourceInfo?.self, forKey: .datasource)
        }
    }
}
public extension CreateDatasourceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDatasourceResultCodingKeys.self)
        try encoderContainer.encode(datasource, forKey: .datasource)
    }
}
/// 删除channel 
public class DeleteChannelResult:NSObject,JdCloudResult
{
}
/// 启动数据同步 
public class StartChannelResult:NSObject,JdCloudResult
{
}
public class StopChannelResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopChannelResult?;

    enum StopChannelResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopChannelResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopChannelResult?.self, forKey: .result) ?? nil
    }
}

public extension StopChannelResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopChannelResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class StartChannelResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartChannelResult?;

    enum StartChannelResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartChannelResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartChannelResult?.self, forKey: .result) ?? nil
    }
}

public extension StartChannelResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartChannelResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteDatasourceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteDatasourceResult?;

    enum DeleteDatasourceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteDatasourceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteDatasourceResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteDatasourceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDatasourceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetDatasourcesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetDatasourcesResult?;

    enum GetDatasourcesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDatasourcesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetDatasourcesResult?.self, forKey: .result) ?? nil
    }
}

public extension GetDatasourcesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDatasourcesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  启动数据同步
public class StartChannelRequest:JdCloudRequest
{
    /// channel ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum StartChannelRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartChannelRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  查询数据源
public class GetDatasourcesRequest:JdCloudRequest
{
}


///  删除数据源
public class DeleteDatasourceRequest:JdCloudRequest
{
    /// channel ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteDatasourceRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteDatasourceRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class CreateDatasourceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateDatasourceResult?;

    enum CreateDatasourceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDatasourceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateDatasourceResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateDatasourceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDatasourceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除数据源 
public class DeleteDatasourceResult:NSObject,JdCloudResult
{
}

///  创建数据源
public class CreateDatasourceRequest:JdCloudRequest
{
    /// 创建数据源
    var datasource:DatasourceInfo


    public init(regionId: String,datasource:DatasourceInfo){
        self.datasource = datasource
        super.init(regionId: regionId)
    }


    enum CreateDatasourceRequestRequestCodingKeys: String, CodingKey {
        case datasource
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDatasourceRequestRequestCodingKeys.self)
        try encoderContainer.encode(datasource, forKey: .datasource)

    }
}


///  停止数据同步
public class StopChannelRequest:JdCloudRequest
{
    /// channel ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum StopChannelRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopChannelRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 创建数据同步通道 
public class CreateChannelResult:NSObject,JdCloudResult
{
    /// Channel
    var channel:ChannelInfo?



    public override init(){
        super.init()
    }

    enum CreateChannelResultCodingKeys: String, CodingKey {
        case channel
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateChannelResultCodingKeys.self)
        if decoderContainer.contains(.channel)
        {
            self.channel = try decoderContainer.decode(ChannelInfo?.self, forKey: .channel)
        }
    }
}
public extension CreateChannelResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateChannelResultCodingKeys.self)
        try encoderContainer.encode(channel, forKey: .channel)
    }
}
public class CreateChannelResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateChannelResult?;

    enum CreateChannelResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateChannelResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateChannelResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateChannelResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateChannelResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 停止数据同步 
public class StopChannelResult:NSObject,JdCloudResult
{
}
public class DeleteChannelResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteChannelResult?;

    enum DeleteChannelResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteChannelResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteChannelResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteChannelResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteChannelResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询数据同步通道信息 
public class GetChannelsResult:NSObject,JdCloudResult
{
    /// Channels
    var channels:[ChannelInfo?]?



    public override init(){
        super.init()
    }

    enum GetChannelsResultCodingKeys: String, CodingKey {
        case channels
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetChannelsResultCodingKeys.self)
        if decoderContainer.contains(.channels)
        {
            self.channels = try decoderContainer.decode([ChannelInfo?]?.self, forKey: .channels)
        }
    }
}
public extension GetChannelsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetChannelsResultCodingKeys.self)
        try encoderContainer.encode(channels, forKey: .channels)
    }
}

///  删除channel
public class DeleteChannelRequest:JdCloudRequest
{
    /// channel ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteChannelRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteChannelRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  查询数据同步通道信息
public class GetChannelsRequest:JdCloudRequest
{
}

public class GetChannelsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetChannelsResult?;

    enum GetChannelsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetChannelsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetChannelsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetChannelsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetChannelsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询数据源 
public class GetDatasourcesResult:NSObject,JdCloudResult
{
    /// Datasources
    var datasources:[DatasourceInfo?]?



    public override init(){
        super.init()
    }

    enum GetDatasourcesResultCodingKeys: String, CodingKey {
        case datasources
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDatasourcesResultCodingKeys.self)
        if decoderContainer.contains(.datasources)
        {
            self.datasources = try decoderContainer.decode([DatasourceInfo?]?.self, forKey: .datasources)
        }
    }
}
public extension GetDatasourcesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDatasourcesResultCodingKeys.self)
        try encoderContainer.encode(datasources, forKey: .datasources)
    }
}
public class GetVpcSecurityGroupsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVpcSecurityGroupsResult?;

    enum GetVpcSecurityGroupsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcSecurityGroupsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVpcSecurityGroupsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVpcSecurityGroupsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSecurityGroupsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetVpcSecurityGroupByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVpcSecurityGroupByIdResult?;

    enum GetVpcSecurityGroupByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcSecurityGroupByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVpcSecurityGroupByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVpcSecurityGroupByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSecurityGroupByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据云提供商查询对应的安全组资源信息 
public class GetVpcSecurityGroupsResult:NSObject,JdCloudResult
{
    /// SecurityGroups
    var securityGroups:[SecurityGroupInfo?]?



    public override init(){
        super.init()
    }

    enum GetVpcSecurityGroupsResultCodingKeys: String, CodingKey {
        case securityGroups
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcSecurityGroupsResultCodingKeys.self)
        if decoderContainer.contains(.securityGroups)
        {
            self.securityGroups = try decoderContainer.decode([SecurityGroupInfo?]?.self, forKey: .securityGroups)
        }
    }
}
public extension GetVpcSecurityGroupsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSecurityGroupsResultCodingKeys.self)
        try encoderContainer.encode(securityGroups, forKey: .securityGroups)
    }
}
/// 根据云提供商创建安全组 
public class CreateVpcSecurityGroupResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateVpcSecurityGroupResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcSecurityGroupResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateVpcSecurityGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcSecurityGroupResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
public class DeleteSecurityGroupsRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSecurityGroupsRuleResult?;

    enum DeleteSecurityGroupsRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSecurityGroupsRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSecurityGroupsRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSecurityGroupsRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecurityGroupsRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateSecurityGroupsRuleResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSecurityGroupsRuleResult?;

    enum CreateSecurityGroupsRuleResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSecurityGroupsRuleResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSecurityGroupsRuleResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSecurityGroupsRuleResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecurityGroupsRuleResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询指定的安全组资源信息
public class GetVpcSecurityGroupByIdRequest:JdCloudRequest
{
    /// SecurityGroup ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetVpcSecurityGroupByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSecurityGroupByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  删除安全组规则
public class DeleteSecurityGroupsRuleRequest:JdCloudRequest
{
    /// 规则类型，ingress、egress
    var ruleType:String

    /// 协议，tcp、udp、icmp 或者 all
    var protocolValue:String

    /// 起始端口
    var fromPort:String

    /// 终止端口
    var toPort:String

    /// 网络类型，internet、intranet
    var nicType:String?

    /// 认证策略，accept、drop
    var policy:String?

    /// 认证策略的权重，1-100
    var priority:String?

    /// 目标IP地址范围
    var cidrIp:String?

    /// 安全组ID
    var id:String


    public init(regionId: String,ruleType:String,protocolValue:String,fromPort:String,toPort:String,id:String){
        self.ruleType = ruleType
        self.protocolValue = protocolValue
        self.fromPort = fromPort
        self.toPort = toPort
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteSecurityGroupsRuleRequestRequestCodingKeys: String, CodingKey {
        case ruleType
        case protocolValue = "protocol"
        case fromPort
        case toPort
        case nicType
        case policy
        case priority
        case cidrIp
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecurityGroupsRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(ruleType, forKey: .ruleType)
        try encoderContainer.encode(protocolValue, forKey: .protocolValue)
        try encoderContainer.encode(fromPort, forKey: .fromPort)
        try encoderContainer.encode(toPort, forKey: .toPort)
        try encoderContainer.encode(nicType, forKey: .nicType)
        try encoderContainer.encode(policy, forKey: .policy)
        try encoderContainer.encode(priority, forKey: .priority)
        try encoderContainer.encode(cidrIp, forKey: .cidrIp)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 删除安全组规则 
public class DeleteSecurityGroupsRuleResult:NSObject,JdCloudResult
{
}
public class DeleteVpcSecurityGroupByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVpcSecurityGroupByIdResult?;

    enum DeleteVpcSecurityGroupByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVpcSecurityGroupByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVpcSecurityGroupByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVpcSecurityGroupByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcSecurityGroupByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据云提供商创建安全组
public class CreateVpcSecurityGroupRequest:JdCloudRequest
{
    /// 创建securityGroup
    var securityGroup:CreateSecurityGroup


    public init(regionId: String,securityGroup:CreateSecurityGroup){
        self.securityGroup = securityGroup
        super.init(regionId: regionId)
    }


    enum CreateVpcSecurityGroupRequestRequestCodingKeys: String, CodingKey {
        case securityGroup
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcSecurityGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(securityGroup, forKey: .securityGroup)

    }
}


///  根据云提供商查询对应的安全组资源信息
public class GetVpcSecurityGroupsRequest:JdCloudRequest
{
}


///  删除安全组
public class DeleteVpcSecurityGroupByIdRequest:JdCloudRequest
{
    /// SecurityGroup ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteVpcSecurityGroupByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcSecurityGroupByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 新增安全组规则 
public class CreateSecurityGroupsRuleResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateSecurityGroupsRuleResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSecurityGroupsRuleResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateSecurityGroupsRuleResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecurityGroupsRuleResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}

///  新增安全组规则
public class CreateSecurityGroupsRuleRequest:JdCloudRequest
{
    /// 新增安全组规则
    var sgRule:CreateSgRule

    /// 安全组ID
    var id:String


    public init(regionId: String,sgRule:CreateSgRule,id:String){
        self.sgRule = sgRule
        self.id = id
        super.init(regionId: regionId)
    }


    enum CreateSecurityGroupsRuleRequestRequestCodingKeys: String, CodingKey {
        case sgRule
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecurityGroupsRuleRequestRequestCodingKeys.self)
        try encoderContainer.encode(sgRule, forKey: .sgRule)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class CreateVpcSecurityGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVpcSecurityGroupResult?;

    enum CreateVpcSecurityGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcSecurityGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVpcSecurityGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVpcSecurityGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcSecurityGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除安全组 
public class DeleteVpcSecurityGroupByIdResult:NSObject,JdCloudResult
{
}
/// 查询指定的安全组资源信息 
public class GetVpcSecurityGroupByIdResult:NSObject,JdCloudResult
{
    /// SecurityGroup
    var securityGroup:SecurityGroupDetail?



    public override init(){
        super.init()
    }

    enum GetVpcSecurityGroupByIdResultCodingKeys: String, CodingKey {
        case securityGroup
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcSecurityGroupByIdResultCodingKeys.self)
        if decoderContainer.contains(.securityGroup)
        {
            self.securityGroup = try decoderContainer.decode(SecurityGroupDetail?.self, forKey: .securityGroup)
        }
    }
}
public extension GetVpcSecurityGroupByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSecurityGroupByIdResultCodingKeys.self)
        try encoderContainer.encode(securityGroup, forKey: .securityGroup)
    }
}
public class GetTaskInfoByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetTaskInfoByIdResult?;

    enum GetTaskInfoByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTaskInfoByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetTaskInfoByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetTaskInfoByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTaskInfoByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 读取指定ID的运行结果和运行状态 
public class GetTaskInfoByIdResult:NSObject,JdCloudResult
{
    /// Task
    var task:TaskInfo?



    public override init(){
        super.init()
    }

    enum GetTaskInfoByIdResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTaskInfoByIdResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(TaskInfo?.self, forKey: .task)
        }
    }
}
public extension GetTaskInfoByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTaskInfoByIdResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}

///  读取指定ID的运行结果和运行状态
public class GetTaskInfoHistoryByIdRequest:JdCloudRequest
{
    /// 执行请求 ID
    var task:String


    public init(regionId: String,task:String){
        self.task = task
        super.init(regionId: regionId)
    }


    enum GetTaskInfoHistoryByIdRequestRequestCodingKeys: String, CodingKey {
        case task
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTaskInfoHistoryByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)

    }
}

public class GetTaskInfoHistoryByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetTaskInfoHistoryByIdResult?;

    enum GetTaskInfoHistoryByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTaskInfoHistoryByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetTaskInfoHistoryByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetTaskInfoHistoryByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTaskInfoHistoryByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  读取指定ID的运行结果和运行状态
public class GetTaskInfoByIdRequest:JdCloudRequest
{
    /// 执行文件名称
    var fileName:String?

    /// 执行请求 ID
    var task:String


    public init(regionId: String,task:String){
        self.task = task
        super.init(regionId: regionId)
    }


    enum GetTaskInfoByIdRequestRequestCodingKeys: String, CodingKey {
        case fileName
        case task
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTaskInfoByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(fileName, forKey: .fileName)
        try encoderContainer.encode(task, forKey: .task)

    }
}

/// 读取指定ID的运行结果和运行状态 
public class GetTaskInfoHistoryByIdResult:NSObject,JdCloudResult
{
    /// Tasks
    var tasks:[TaskInfo?]?



    public override init(){
        super.init()
    }

    enum GetTaskInfoHistoryByIdResultCodingKeys: String, CodingKey {
        case tasks
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetTaskInfoHistoryByIdResultCodingKeys.self)
        if decoderContainer.contains(.tasks)
        {
            self.tasks = try decoderContainer.decode([TaskInfo?]?.self, forKey: .tasks)
        }
    }
}
public extension GetTaskInfoHistoryByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetTaskInfoHistoryByIdResultCodingKeys.self)
        try encoderContainer.encode(tasks, forKey: .tasks)
    }
}
/// 根据给定的信息，创建指定RDS实例的账户 
public class CreateRdsAccountsResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateRdsAccountsResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRdsAccountsResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateRdsAccountsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRdsAccountsResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
public class GetRdsAccountsByInstIdAndAccountNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRdsAccountsByInstIdAndAccountNameResult?;

    enum GetRdsAccountsByInstIdAndAccountNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsAccountsByInstIdAndAccountNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRdsAccountsByInstIdAndAccountNameResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRdsAccountsByInstIdAndAccountNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsAccountsByInstIdAndAccountNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GrantRdsAccountsByTaskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GrantRdsAccountsByTaskResult?;

    enum GrantRdsAccountsByTaskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GrantRdsAccountsByTaskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GrantRdsAccountsByTaskResult?.self, forKey: .result) ?? nil
    }
}

public extension GrantRdsAccountsByTaskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GrantRdsAccountsByTaskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GrantRdsAccountResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GrantRdsAccountResult?;

    enum GrantRdsAccountResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GrantRdsAccountResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GrantRdsAccountResult?.self, forKey: .result) ?? nil
    }
}

public extension GrantRdsAccountResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GrantRdsAccountResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteRdsAccountResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteRdsAccountResult?;

    enum DeleteRdsAccountResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteRdsAccountResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteRdsAccountResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteRdsAccountResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRdsAccountResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除指定RDS实例上，指定用户名的账号信息
public class DeleteRdsAccountRequest:JdCloudRequest
{
    /// RDS实例ID
    var instId:String

    /// 账号用户名
    var accountName:String


    public init(regionId: String,instId:String,accountName:String){
        self.instId = instId
        self.accountName = accountName
        super.init(regionId: regionId)
    }


    enum DeleteRdsAccountRequestRequestCodingKeys: String, CodingKey {
        case instId
        case accountName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRdsAccountRequestRequestCodingKeys.self)
        try encoderContainer.encode(instId, forKey: .instId)
        try encoderContainer.encode(accountName, forKey: .accountName)

    }
}

public class GetRdsAccountsByInstIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRdsAccountsByInstIdResult?;

    enum GetRdsAccountsByInstIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsAccountsByInstIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRdsAccountsByInstIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRdsAccountsByInstIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsAccountsByInstIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateRdsAccountsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateRdsAccountsResult?;

    enum CreateRdsAccountsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRdsAccountsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateRdsAccountsResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateRdsAccountsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRdsAccountsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class RevokeRdsAccountResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RevokeRdsAccountResult?;

    enum RevokeRdsAccountResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RevokeRdsAccountResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RevokeRdsAccountResult?.self, forKey: .result) ?? nil
    }
}

public extension RevokeRdsAccountResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RevokeRdsAccountResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 给RDS账号分配数据库权限 
public class GrantRdsAccountResult:NSObject,JdCloudResult
{
}

///  给RDS账号分配数据库权限
public class GrantRdsAccountRequest:JdCloudRequest
{
    /// RDS账号对数据库的权限信息
    var dbPrivilegeInfo:DbPrivilegeInfo

    /// RDS实例ID
    var instId:String

    /// 账号名称
    var accountName:String


    public init(regionId: String,dbPrivilegeInfo:DbPrivilegeInfo,instId:String,accountName:String){
        self.dbPrivilegeInfo = dbPrivilegeInfo
        self.instId = instId
        self.accountName = accountName
        super.init(regionId: regionId)
    }


    enum GrantRdsAccountRequestRequestCodingKeys: String, CodingKey {
        case dbPrivilegeInfo
        case instId
        case accountName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GrantRdsAccountRequestRequestCodingKeys.self)
        try encoderContainer.encode(dbPrivilegeInfo, forKey: .dbPrivilegeInfo)
        try encoderContainer.encode(instId, forKey: .instId)
        try encoderContainer.encode(accountName, forKey: .accountName)

    }
}


///  根据给定的信息，创建指定RDS实例的账户
public class CreateRdsAccountsRequest:JdCloudRequest
{
    /// 创建RDS实例的账号信息
    var account:CreateRDSAccount

    /// RDS实例ID
    var instId:String


    public init(regionId: String,account:CreateRDSAccount,instId:String){
        self.account = account
        self.instId = instId
        super.init(regionId: regionId)
    }


    enum CreateRdsAccountsRequestRequestCodingKeys: String, CodingKey {
        case account
        case instId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRdsAccountsRequestRequestCodingKeys.self)
        try encoderContainer.encode(account, forKey: .account)
        try encoderContainer.encode(instId, forKey: .instId)

    }
}

/// 根据过滤条件，取得指定RDS实例上的账号信息 
public class GetRdsAccountsByInstIdResult:NSObject,JdCloudResult
{
    /// Accounts
    var accounts:[RdsAccountInfo?]?



    public override init(){
        super.init()
    }

    enum GetRdsAccountsByInstIdResultCodingKeys: String, CodingKey {
        case accounts
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsAccountsByInstIdResultCodingKeys.self)
        if decoderContainer.contains(.accounts)
        {
            self.accounts = try decoderContainer.decode([RdsAccountInfo?]?.self, forKey: .accounts)
        }
    }
}
public extension GetRdsAccountsByInstIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsAccountsByInstIdResultCodingKeys.self)
        try encoderContainer.encode(accounts, forKey: .accounts)
    }
}
/// 通过异步任务，给RDS账号分配数据库权限 
public class GrantRdsAccountsByTaskResult:NSObject,JdCloudResult
{
    /// Cloud
    var cloud:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum GrantRdsAccountsByTaskResultCodingKeys: String, CodingKey {
        case cloud
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GrantRdsAccountsByTaskResultCodingKeys.self)
        if decoderContainer.contains(.cloud)
        {
            self.cloud = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .cloud)
        }
    }
}
public extension GrantRdsAccountsByTaskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GrantRdsAccountsByTaskResultCodingKeys.self)
        try encoderContainer.encode(cloud, forKey: .cloud)
    }
}

///  通过异步任务，给RDS账号分配数据库权限
public class GrantRdsAccountsByTaskRequest:JdCloudRequest
{
    /// RDS账号对数据库的权限信息
    var info:DbPrivilegeInfo

    /// RDS实例ID
    var instId:String

    /// 账号名称
    var accountName:String


    public init(regionId: String,info:DbPrivilegeInfo,instId:String,accountName:String){
        self.info = info
        self.instId = instId
        self.accountName = accountName
        super.init(regionId: regionId)
    }


    enum GrantRdsAccountsByTaskRequestRequestCodingKeys: String, CodingKey {
        case info
        case instId
        case accountName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GrantRdsAccountsByTaskRequestRequestCodingKeys.self)
        try encoderContainer.encode(info, forKey: .info)
        try encoderContainer.encode(instId, forKey: .instId)
        try encoderContainer.encode(accountName, forKey: .accountName)

    }
}


///  撤销RDS账号在指定数据库的所有权限
public class RevokeRdsAccountRequest:JdCloudRequest
{
    /// RDS实例ID
    var instId:String

    /// 账号名称
    var accountName:String

    /// 数据库名称
    var dbName:String


    public init(regionId: String,instId:String,accountName:String,dbName:String){
        self.instId = instId
        self.accountName = accountName
        self.dbName = dbName
        super.init(regionId: regionId)
    }


    enum RevokeRdsAccountRequestRequestCodingKeys: String, CodingKey {
        case instId
        case accountName
        case dbName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RevokeRdsAccountRequestRequestCodingKeys.self)
        try encoderContainer.encode(instId, forKey: .instId)
        try encoderContainer.encode(accountName, forKey: .accountName)
        try encoderContainer.encode(dbName, forKey: .dbName)

    }
}

/// 取得指定RDS实例上的指定账号信息 
public class GetRdsAccountsByInstIdAndAccountNameResult:NSObject,JdCloudResult
{
    /// Account
    var account:RdsAccountInfo?



    public override init(){
        super.init()
    }

    enum GetRdsAccountsByInstIdAndAccountNameResultCodingKeys: String, CodingKey {
        case account
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsAccountsByInstIdAndAccountNameResultCodingKeys.self)
        if decoderContainer.contains(.account)
        {
            self.account = try decoderContainer.decode(RdsAccountInfo?.self, forKey: .account)
        }
    }
}
public extension GetRdsAccountsByInstIdAndAccountNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsAccountsByInstIdAndAccountNameResultCodingKeys.self)
        try encoderContainer.encode(account, forKey: .account)
    }
}

///  根据过滤条件，取得指定RDS实例上的账号信息
public class GetRdsAccountsByInstIdRequest:JdCloudRequest
{
    /// RDS实例ID
    var instId:String


    public init(regionId: String,instId:String){
        self.instId = instId
        super.init(regionId: regionId)
    }


    enum GetRdsAccountsByInstIdRequestRequestCodingKeys: String, CodingKey {
        case instId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsAccountsByInstIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(instId, forKey: .instId)

    }
}


///  取得指定RDS实例上的指定账号信息
public class GetRdsAccountsByInstIdAndAccountNameRequest:JdCloudRequest
{
    /// RDS实例ID
    var instId:String

    /// 账号名称
    var accountName:String


    public init(regionId: String,instId:String,accountName:String){
        self.instId = instId
        self.accountName = accountName
        super.init(regionId: regionId)
    }


    enum GetRdsAccountsByInstIdAndAccountNameRequestRequestCodingKeys: String, CodingKey {
        case instId
        case accountName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsAccountsByInstIdAndAccountNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(instId, forKey: .instId)
        try encoderContainer.encode(accountName, forKey: .accountName)

    }
}

/// 撤销RDS账号在指定数据库的所有权限 
public class RevokeRdsAccountResult:NSObject,JdCloudResult
{
}
/// 删除指定RDS实例上，指定用户名的账号信息 
public class DeleteRdsAccountResult:NSObject,JdCloudResult
{
}

///  为指定用户关联云
public class RegistCloudInfoRequest:JdCloudRequest
{
    /// 
    var cloud:CloudInfo


    public init(regionId: String,cloud:CloudInfo){
        self.cloud = cloud
        super.init(regionId: regionId)
    }


    enum RegistCloudInfoRequestRequestCodingKeys: String, CodingKey {
        case cloud
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RegistCloudInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(cloud, forKey: .cloud)

    }
}

public class UnregistCloudInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UnregistCloudInfoResult?;

    enum UnregistCloudInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UnregistCloudInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UnregistCloudInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension UnregistCloudInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UnregistCloudInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取指定云信息 
public class GetCloudInfoByIdResult:NSObject,JdCloudResult
{
    /// Cloud
    var cloud:CloudInfo?



    public override init(){
        super.init()
    }

    enum GetCloudInfoByIdResultCodingKeys: String, CodingKey {
        case cloud
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetCloudInfoByIdResultCodingKeys.self)
        if decoderContainer.contains(.cloud)
        {
            self.cloud = try decoderContainer.decode(CloudInfo?.self, forKey: .cloud)
        }
    }
}
public extension GetCloudInfoByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetCloudInfoByIdResultCodingKeys.self)
        try encoderContainer.encode(cloud, forKey: .cloud)
    }
}
public class GetCloudInfosResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetCloudInfosResult?;

    enum GetCloudInfosResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetCloudInfosResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetCloudInfosResult?.self, forKey: .result) ?? nil
    }
}

public extension GetCloudInfosResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetCloudInfosResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  获取指定云信息
public class GetCloudInfoByIdRequest:JdCloudRequest
{
    /// 云信息ID
    var cloudId:String


    public init(regionId: String,cloudId:String){
        self.cloudId = cloudId
        super.init(regionId: regionId)
    }


    enum GetCloudInfoByIdRequestRequestCodingKeys: String, CodingKey {
        case cloudId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetCloudInfoByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(cloudId, forKey: .cloudId)

    }
}

public class GetCloudInfoByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetCloudInfoByIdResult?;

    enum GetCloudInfoByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetCloudInfoByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetCloudInfoByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetCloudInfoByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetCloudInfoByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 为指定用户关联云 
public class RegistCloudInfoResult:NSObject,JdCloudResult
{
    /// Cloud
    var cloud:CloudInfo?



    public override init(){
        super.init()
    }

    enum RegistCloudInfoResultCodingKeys: String, CodingKey {
        case cloud
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RegistCloudInfoResultCodingKeys.self)
        if decoderContainer.contains(.cloud)
        {
            self.cloud = try decoderContainer.decode(CloudInfo?.self, forKey: .cloud)
        }
    }
}
public extension RegistCloudInfoResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RegistCloudInfoResultCodingKeys.self)
        try encoderContainer.encode(cloud, forKey: .cloud)
    }
}

///  获取指定云信息
public class UnregistCloudInfoRequest:JdCloudRequest
{
    /// 云信息ID
    var cloudId:String


    public init(regionId: String,cloudId:String){
        self.cloudId = cloudId
        super.init(regionId: regionId)
    }


    enum UnregistCloudInfoRequestRequestCodingKeys: String, CodingKey {
        case cloudId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UnregistCloudInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(cloudId, forKey: .cloudId)

    }
}

/// 获取指定云信息 
public class UnregistCloudInfoResult:NSObject,JdCloudResult
{
}

///  获取当前用户的云注册信息
public class GetCloudInfosRequest:JdCloudRequest
{
    /// 只获取对应driver的云信息
    var driver:String?




    enum GetCloudInfosRequestRequestCodingKeys: String, CodingKey {
        case driver
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetCloudInfosRequestRequestCodingKeys.self)
        try encoderContainer.encode(driver, forKey: .driver)

    }
}

/// 获取当前用户的云注册信息 
public class GetCloudInfosResult:NSObject,JdCloudResult
{
    /// Clouds
    var clouds:[CloudInfo?]?



    public override init(){
        super.init()
    }

    enum GetCloudInfosResultCodingKeys: String, CodingKey {
        case clouds
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetCloudInfosResultCodingKeys.self)
        if decoderContainer.contains(.clouds)
        {
            self.clouds = try decoderContainer.decode([CloudInfo?]?.self, forKey: .clouds)
        }
    }
}
public extension GetCloudInfosResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetCloudInfosResultCodingKeys.self)
        try encoderContainer.encode(clouds, forKey: .clouds)
    }
}
public class RegistCloudInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RegistCloudInfoResult?;

    enum RegistCloudInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RegistCloudInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RegistCloudInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension RegistCloudInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RegistCloudInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ValidCloudInfoResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ValidCloudInfoResult?;

    enum ValidCloudInfoResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ValidCloudInfoResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ValidCloudInfoResult?.self, forKey: .result) ?? nil
    }
}

public extension ValidCloudInfoResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ValidCloudInfoResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  验证指定云信息的AK、SK
public class ValidCloudInfoRequest:JdCloudRequest
{
    /// 云信息ID
    var cloudId:String


    public init(regionId: String,cloudId:String){
        self.cloudId = cloudId
        super.init(regionId: regionId)
    }


    enum ValidCloudInfoRequestRequestCodingKeys: String, CodingKey {
        case cloudId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ValidCloudInfoRequestRequestCodingKeys.self)
        try encoderContainer.encode(cloudId, forKey: .cloudId)

    }
}

/// 验证指定云信息的AK、SK 
public class ValidCloudInfoResult:NSObject,JdCloudResult
{
}

///  虚拟机规格列表
public class GetVmInstanceTypesRequest:JdCloudRequest
{
    /// 可用区
    var az:String?




    enum GetVmInstanceTypesRequestRequestCodingKeys: String, CodingKey {
        case az
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmInstanceTypesRequestRequestCodingKeys.self)
        try encoderContainer.encode(az, forKey: .az)

    }
}

/// 虚拟机规格列表 
public class GetVmInstanceTypesResult:NSObject,JdCloudResult
{
    /// InstanceTypes
    var instanceTypes:[InstanceTypeInfo?]?



    public override init(){
        super.init()
    }

    enum GetVmInstanceTypesResultCodingKeys: String, CodingKey {
        case instanceTypes
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVmInstanceTypesResultCodingKeys.self)
        if decoderContainer.contains(.instanceTypes)
        {
            self.instanceTypes = try decoderContainer.decode([InstanceTypeInfo?]?.self, forKey: .instanceTypes)
        }
    }
}
public extension GetVmInstanceTypesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmInstanceTypesResultCodingKeys.self)
        try encoderContainer.encode(instanceTypes, forKey: .instanceTypes)
    }
}
public class GetVmInstanceTypesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVmInstanceTypesResult?;

    enum GetVmInstanceTypesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVmInstanceTypesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVmInstanceTypesResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVmInstanceTypesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmInstanceTypesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetLbHttpListenerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetLbHttpListenerResult?;

    enum GetLbHttpListenerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetLbHttpListenerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetLbHttpListenerResult?.self, forKey: .result) ?? nil
    }
}

public extension GetLbHttpListenerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetLbHttpListenerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据过滤条件，查监听器列表
public class GetLbHttpListenerRequest:JdCloudRequest
{
    /// 负载均衡id
    var slbid:String?




    enum GetLbHttpListenerRequestRequestCodingKeys: String, CodingKey {
        case slbid
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetLbHttpListenerRequestRequestCodingKeys.self)
        try encoderContainer.encode(slbid, forKey: .slbid)

    }
}

public class CreateVpcLBHttpListenerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVpcLBHttpListenerResult?;

    enum CreateVpcLBHttpListenerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcLBHttpListenerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVpcLBHttpListenerResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVpcLBHttpListenerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcLBHttpListenerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建HTTP监听器
public class CreateVpcLBHttpListenerRequest:JdCloudRequest
{
    /// 创建HTTP监听器
    var httpListener:CreateLoadBalancerHTTPListener


    public init(regionId: String,httpListener:CreateLoadBalancerHTTPListener){
        self.httpListener = httpListener
        super.init(regionId: regionId)
    }


    enum CreateVpcLBHttpListenerRequestRequestCodingKeys: String, CodingKey {
        case httpListener
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcLBHttpListenerRequestRequestCodingKeys.self)
        try encoderContainer.encode(httpListener, forKey: .httpListener)

    }
}

/// 根据过滤条件，查监听器列表 
public class GetLbHttpListenerResult:NSObject,JdCloudResult
{
    /// HttpListeners
    var httpListeners:[LbHttpListener?]?



    public override init(){
        super.init()
    }

    enum GetLbHttpListenerResultCodingKeys: String, CodingKey {
        case httpListeners
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetLbHttpListenerResultCodingKeys.self)
        if decoderContainer.contains(.httpListeners)
        {
            self.httpListeners = try decoderContainer.decode([LbHttpListener?]?.self, forKey: .httpListeners)
        }
    }
}
public extension GetLbHttpListenerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetLbHttpListenerResultCodingKeys.self)
        try encoderContainer.encode(httpListeners, forKey: .httpListeners)
    }
}
/// 创建HTTP监听器 
public class CreateVpcLBHttpListenerResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateVpcLBHttpListenerResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcLBHttpListenerResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateVpcLBHttpListenerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcLBHttpListenerResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}

///  根据云提供商查询对应的公网IP资源信息
public class GetVpcEipsRequest:JdCloudRequest
{
}

public class DeleteVpcEipByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVpcEipByIdResult?;

    enum DeleteVpcEipByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVpcEipByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVpcEipByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVpcEipByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcEipByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateVpcEipResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVpcEipResult?;

    enum CreateVpcEipResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcEipResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVpcEipResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVpcEipResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcEipResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DisassociateVpcEipByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisassociateVpcEipByIdResult?;

    enum DisassociateVpcEipByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisassociateVpcEipByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisassociateVpcEipByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension DisassociateVpcEipByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateVpcEipByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据云提供商查询对应的公网IP资源信息
public class GetVpcEipByIdRequest:JdCloudRequest
{
    /// 公网IP ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetVpcEipByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcEipByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  弹性公网IP绑定到虚拟机
public class AssociateVpcEipByIdRequest:JdCloudRequest
{
    /// 弹性公网IP绑定到虚拟机
    var associate:AssociateEipAddress

    /// 公网IP ID
    var id:String


    public init(regionId: String,associate:AssociateEipAddress,id:String){
        self.associate = associate
        self.id = id
        super.init(regionId: regionId)
    }


    enum AssociateVpcEipByIdRequestRequestCodingKeys: String, CodingKey {
        case associate
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateVpcEipByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(associate, forKey: .associate)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 根据云提供商查询对应的公网IP资源信息 
public class GetVpcEipsResult:NSObject,JdCloudResult
{
    /// EipAddresses
    var eipAddresses:[EipAddress?]?



    public override init(){
        super.init()
    }

    enum GetVpcEipsResultCodingKeys: String, CodingKey {
        case eipAddresses
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcEipsResultCodingKeys.self)
        if decoderContainer.contains(.eipAddresses)
        {
            self.eipAddresses = try decoderContainer.decode([EipAddress?]?.self, forKey: .eipAddresses)
        }
    }
}
public extension GetVpcEipsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcEipsResultCodingKeys.self)
        try encoderContainer.encode(eipAddresses, forKey: .eipAddresses)
    }
}

///  释放公网IP
public class DeleteVpcEipByIdRequest:JdCloudRequest
{
    /// 公网IP ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteVpcEipByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcEipByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 根据云提供商查询对应的公网IP资源信息 
public class GetVpcEipByIdResult:NSObject,JdCloudResult
{
    /// EipAddress
    var eipAddress:EipAddress?



    public override init(){
        super.init()
    }

    enum GetVpcEipByIdResultCodingKeys: String, CodingKey {
        case eipAddress
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcEipByIdResultCodingKeys.self)
        if decoderContainer.contains(.eipAddress)
        {
            self.eipAddress = try decoderContainer.decode(EipAddress?.self, forKey: .eipAddress)
        }
    }
}
public extension GetVpcEipByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcEipByIdResultCodingKeys.self)
        try encoderContainer.encode(eipAddress, forKey: .eipAddress)
    }
}
/// 解绑公网IP 
public class DisassociateVpcEipByIdResult:NSObject,JdCloudResult
{
}
public class GetVpcEipsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVpcEipsResult?;

    enum GetVpcEipsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcEipsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVpcEipsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVpcEipsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcEipsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AssociateVpcEipByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AssociateVpcEipByIdResult?;

    enum AssociateVpcEipByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateVpcEipByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AssociateVpcEipByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension AssociateVpcEipByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateVpcEipByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 释放公网IP 
public class DeleteVpcEipByIdResult:NSObject,JdCloudResult
{
}
public class GetVpcEipByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVpcEipByIdResult?;

    enum GetVpcEipByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcEipByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVpcEipByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVpcEipByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcEipByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 弹性公网IP绑定到虚拟机 
public class AssociateVpcEipByIdResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum AssociateVpcEipByIdResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateVpcEipByIdResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension AssociateVpcEipByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateVpcEipByIdResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}

///  根据云提供商分配公网IP
public class CreateVpcEipRequest:JdCloudRequest
{
    /// 分配弹性公网ip
    var allocate:AllocateEipAddress


    public init(regionId: String,allocate:AllocateEipAddress){
        self.allocate = allocate
        super.init(regionId: regionId)
    }


    enum CreateVpcEipRequestRequestCodingKeys: String, CodingKey {
        case allocate
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcEipRequestRequestCodingKeys.self)
        try encoderContainer.encode(allocate, forKey: .allocate)

    }
}


///  解绑公网IP
public class DisassociateVpcEipByIdRequest:JdCloudRequest
{
    /// 解绑公网IP
    var unassociate:UnassociateEipAddress

    /// 公网IP ID
    var id:String


    public init(regionId: String,unassociate:UnassociateEipAddress,id:String){
        self.unassociate = unassociate
        self.id = id
        super.init(regionId: regionId)
    }


    enum DisassociateVpcEipByIdRequestRequestCodingKeys: String, CodingKey {
        case unassociate
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateVpcEipByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(unassociate, forKey: .unassociate)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 根据云提供商分配公网IP 
public class CreateVpcEipResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateVpcEipResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcEipResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateVpcEipResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcEipResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
public class GetDisksResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetDisksResult?;

    enum GetDisksResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDisksResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetDisksResult?.self, forKey: .result) ?? nil
    }
}

public extension GetDisksResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDisksResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除云硬盘 
public class RemoveDiskByIdResult:NSObject,JdCloudResult
{
}

///  从虚拟机卸载云硬盘
public class DetachDiskToVmInstanceByDiskIdRequest:JdCloudRequest
{
    /// 从虚拟机卸载云硬盘
    var detach:DetachDataDisk

    /// 云硬盘 ID
    var id:String


    public init(regionId: String,detach:DetachDataDisk,id:String){
        self.detach = detach
        self.id = id
        super.init(regionId: regionId)
    }


    enum DetachDiskToVmInstanceByDiskIdRequestRequestCodingKeys: String, CodingKey {
        case detach
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachDiskToVmInstanceByDiskIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(detach, forKey: .detach)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  删除云硬盘
public class RemoveDiskByIdRequest:JdCloudRequest
{
    /// 云硬盘 ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum RemoveDiskByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveDiskByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class DetachDiskToVmInstanceByDiskIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DetachDiskToVmInstanceByDiskIdResult?;

    enum DetachDiskToVmInstanceByDiskIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DetachDiskToVmInstanceByDiskIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DetachDiskToVmInstanceByDiskIdResult?.self, forKey: .result) ?? nil
    }
}

public extension DetachDiskToVmInstanceByDiskIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachDiskToVmInstanceByDiskIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据云提供商查询对应的云硬盘资源信息
public class GetDisksRequest:JdCloudRequest
{
    /// 云主机id
    var vmId:String?




    enum GetDisksRequestRequestCodingKeys: String, CodingKey {
        case vmId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDisksRequestRequestCodingKeys.self)
        try encoderContainer.encode(vmId, forKey: .vmId)

    }
}

public class CreateDiskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateDiskResult?;

    enum CreateDiskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDiskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateDiskResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateDiskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDiskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据云提供商查询对应的云硬盘资源信息 
public class GetDiskByIdResult:NSObject,JdCloudResult
{
    /// Disk
    var disk:CloudDataDisk?



    public override init(){
        super.init()
    }

    enum GetDiskByIdResultCodingKeys: String, CodingKey {
        case disk
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDiskByIdResultCodingKeys.self)
        if decoderContainer.contains(.disk)
        {
            self.disk = try decoderContainer.decode(CloudDataDisk?.self, forKey: .disk)
        }
    }
}
public extension GetDiskByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDiskByIdResultCodingKeys.self)
        try encoderContainer.encode(disk, forKey: .disk)
    }
}

///  根据云提供商查询对应的云硬盘资源信息
public class GetDiskByIdRequest:JdCloudRequest
{
    /// 云硬盘 ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetDiskByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDiskByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 从虚拟机卸载云硬盘 
public class DetachDiskToVmInstanceByDiskIdResult:NSObject,JdCloudResult
{
}

///  根据云提供商创建云硬盘
public class CreateDiskRequest:JdCloudRequest
{
    /// 创建云硬盘
    var disk:CreateDataDisk


    public init(regionId: String,disk:CreateDataDisk){
        self.disk = disk
        super.init(regionId: regionId)
    }


    enum CreateDiskRequestRequestCodingKeys: String, CodingKey {
        case disk
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDiskRequestRequestCodingKeys.self)
        try encoderContainer.encode(disk, forKey: .disk)

    }
}

public class GetDiskByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetDiskByIdResult?;

    enum GetDiskByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDiskByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetDiskByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetDiskByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDiskByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据云提供商创建云硬盘 
public class CreateDiskResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateDiskResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateDiskResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateDiskResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateDiskResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
/// 云硬盘挂载至虚拟机 
public class AttachDiskToVmInstanceByDiskIdResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum AttachDiskToVmInstanceByDiskIdResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AttachDiskToVmInstanceByDiskIdResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension AttachDiskToVmInstanceByDiskIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachDiskToVmInstanceByDiskIdResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}

///  云硬盘挂载至虚拟机
public class AttachDiskToVmInstanceByDiskIdRequest:JdCloudRequest
{
    /// 云硬盘挂载至虚拟机
    var attach:AttachDataDisk

    /// 云硬盘 ID
    var id:String


    public init(regionId: String,attach:AttachDataDisk,id:String){
        self.attach = attach
        self.id = id
        super.init(regionId: regionId)
    }


    enum AttachDiskToVmInstanceByDiskIdRequestRequestCodingKeys: String, CodingKey {
        case attach
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachDiskToVmInstanceByDiskIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(attach, forKey: .attach)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class RemoveDiskByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RemoveDiskByIdResult?;

    enum RemoveDiskByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RemoveDiskByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RemoveDiskByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension RemoveDiskByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RemoveDiskByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据云提供商查询对应的云硬盘资源信息 
public class GetDisksResult:NSObject,JdCloudResult
{
    /// Disks
    var disks:[CloudDataDisk?]?



    public override init(){
        super.init()
    }

    enum GetDisksResultCodingKeys: String, CodingKey {
        case disks
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetDisksResultCodingKeys.self)
        if decoderContainer.contains(.disks)
        {
            self.disks = try decoderContainer.decode([CloudDataDisk?]?.self, forKey: .disks)
        }
    }
}
public extension GetDisksResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetDisksResultCodingKeys.self)
        try encoderContainer.encode(disks, forKey: .disks)
    }
}
public class AttachDiskToVmInstanceByDiskIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AttachDiskToVmInstanceByDiskIdResult?;

    enum AttachDiskToVmInstanceByDiskIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AttachDiskToVmInstanceByDiskIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AttachDiskToVmInstanceByDiskIdResult?.self, forKey: .result) ?? nil
    }
}

public extension AttachDiskToVmInstanceByDiskIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachDiskToVmInstanceByDiskIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DetachVpcNetworkInterfaceByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DetachVpcNetworkInterfaceByIdResult?;

    enum DetachVpcNetworkInterfaceByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DetachVpcNetworkInterfaceByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DetachVpcNetworkInterfaceByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension DetachVpcNetworkInterfaceByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachVpcNetworkInterfaceByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据云提供商查询对应的网卡资源信息 
public class GetVpcNetworkInterfacesResult:NSObject,JdCloudResult
{
    /// NetInterfaces
    var netInterfaces:[NetInterfaceInfo?]?



    public override init(){
        super.init()
    }

    enum GetVpcNetworkInterfacesResultCodingKeys: String, CodingKey {
        case netInterfaces
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcNetworkInterfacesResultCodingKeys.self)
        if decoderContainer.contains(.netInterfaces)
        {
            self.netInterfaces = try decoderContainer.decode([NetInterfaceInfo?]?.self, forKey: .netInterfaces)
        }
    }
}
public extension GetVpcNetworkInterfacesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcNetworkInterfacesResultCodingKeys.self)
        try encoderContainer.encode(netInterfaces, forKey: .netInterfaces)
    }
}

///  网卡挂载虚拟机
public class AttachVpcNetworkInterfaceByIdRequest:JdCloudRequest
{
    /// 网卡挂载虚拟机
    var attach:AttachNetInterface

    /// 网卡 ID
    var id:String


    public init(regionId: String,attach:AttachNetInterface,id:String){
        self.attach = attach
        self.id = id
        super.init(regionId: regionId)
    }


    enum AttachVpcNetworkInterfaceByIdRequestRequestCodingKeys: String, CodingKey {
        case attach
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachVpcNetworkInterfaceByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(attach, forKey: .attach)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class GetVpcNetworkInterfaceByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVpcNetworkInterfaceByIdResult?;

    enum GetVpcNetworkInterfaceByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcNetworkInterfaceByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVpcNetworkInterfaceByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVpcNetworkInterfaceByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcNetworkInterfaceByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  卸载网卡
public class DetachVpcNetworkInterfaceByIdRequest:JdCloudRequest
{
    /// 卸载网卡
    var detach:DetachNetInterface

    /// 网卡 ID
    var id:String


    public init(regionId: String,detach:DetachNetInterface,id:String){
        self.detach = detach
        self.id = id
        super.init(regionId: regionId)
    }


    enum DetachVpcNetworkInterfaceByIdRequestRequestCodingKeys: String, CodingKey {
        case detach
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachVpcNetworkInterfaceByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(detach, forKey: .detach)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  删除弹性网卡
public class DeleteVpcNetworkInterfaceByIdRequest:JdCloudRequest
{
    /// 网卡 ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteVpcNetworkInterfaceByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcNetworkInterfaceByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  根据云提供商查询对应的网卡资源信息
public class GetVpcNetworkInterfacesRequest:JdCloudRequest
{
    /// 云主机id
    var vmId:String?




    enum GetVpcNetworkInterfacesRequestRequestCodingKeys: String, CodingKey {
        case vmId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcNetworkInterfacesRequestRequestCodingKeys.self)
        try encoderContainer.encode(vmId, forKey: .vmId)

    }
}

public class CreateVpcNetworkInterfaceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVpcNetworkInterfaceResult?;

    enum CreateVpcNetworkInterfaceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcNetworkInterfaceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVpcNetworkInterfaceResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVpcNetworkInterfaceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcNetworkInterfaceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetVpcNetworkInterfacesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVpcNetworkInterfacesResult?;

    enum GetVpcNetworkInterfacesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcNetworkInterfacesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVpcNetworkInterfacesResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVpcNetworkInterfacesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcNetworkInterfacesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据云提供商查询对应的网卡资源信息
public class GetVpcNetworkInterfaceByIdRequest:JdCloudRequest
{
    /// 网卡 ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetVpcNetworkInterfaceByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcNetworkInterfaceByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 根据云提供商查询对应的网卡资源信息 
public class GetVpcNetworkInterfaceByIdResult:NSObject,JdCloudResult
{
    /// NetInterface
    var netInterface:NetInterfaceInfo?



    public override init(){
        super.init()
    }

    enum GetVpcNetworkInterfaceByIdResultCodingKeys: String, CodingKey {
        case netInterface
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcNetworkInterfaceByIdResultCodingKeys.self)
        if decoderContainer.contains(.netInterface)
        {
            self.netInterface = try decoderContainer.decode(NetInterfaceInfo?.self, forKey: .netInterface)
        }
    }
}
public extension GetVpcNetworkInterfaceByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcNetworkInterfaceByIdResultCodingKeys.self)
        try encoderContainer.encode(netInterface, forKey: .netInterface)
    }
}
public class DeleteVpcNetworkInterfaceByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVpcNetworkInterfaceByIdResult?;

    enum DeleteVpcNetworkInterfaceByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVpcNetworkInterfaceByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVpcNetworkInterfaceByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVpcNetworkInterfaceByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcNetworkInterfaceByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class AttachVpcNetworkInterfaceByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AttachVpcNetworkInterfaceByIdResult?;

    enum AttachVpcNetworkInterfaceByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AttachVpcNetworkInterfaceByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AttachVpcNetworkInterfaceByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension AttachVpcNetworkInterfaceByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachVpcNetworkInterfaceByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除弹性网卡 
public class DeleteVpcNetworkInterfaceByIdResult:NSObject,JdCloudResult
{
}

///  根据云提供商创建网卡
public class CreateVpcNetworkInterfaceRequest:JdCloudRequest
{
    /// 创建网卡
    var netInterface:CreateNetInterface


    public init(regionId: String,netInterface:CreateNetInterface){
        self.netInterface = netInterface
        super.init(regionId: regionId)
    }


    enum CreateVpcNetworkInterfaceRequestRequestCodingKeys: String, CodingKey {
        case netInterface
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcNetworkInterfaceRequestRequestCodingKeys.self)
        try encoderContainer.encode(netInterface, forKey: .netInterface)

    }
}

/// 根据云提供商创建网卡 
public class CreateVpcNetworkInterfaceResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateVpcNetworkInterfaceResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcNetworkInterfaceResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateVpcNetworkInterfaceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcNetworkInterfaceResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
/// 网卡挂载虚拟机 
public class AttachVpcNetworkInterfaceByIdResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum AttachVpcNetworkInterfaceByIdResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AttachVpcNetworkInterfaceByIdResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension AttachVpcNetworkInterfaceByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachVpcNetworkInterfaceByIdResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
/// 卸载网卡 
public class DetachVpcNetworkInterfaceByIdResult:NSObject,JdCloudResult
{
}

///  根据云提供商查询对应的负载均衡资源信息
public class GetVpcSlbsRequest:JdCloudRequest
{
}

public class StopSlbResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopSlbResult?;

    enum StopSlbResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopSlbResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopSlbResult?.self, forKey: .result) ?? nil
    }
}

public extension StopSlbResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopSlbResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetVpcSlbByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVpcSlbByIdResult?;

    enum GetVpcSlbByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcSlbByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVpcSlbByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVpcSlbByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSlbByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除监听器 
public class DeleteSlbsListenerResult:NSObject,JdCloudResult
{
}

///  删除监听器
public class DeleteSlbsListenerRequest:JdCloudRequest
{
    /// 监听器端口
    var listenerPort:Int32

    /// 负载均衡id
    var id:String


    public init(regionId: String,listenerPort:Int32,id:String){
        self.listenerPort = listenerPort
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteSlbsListenerRequestRequestCodingKeys: String, CodingKey {
        case listenerPort
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSlbsListenerRequestRequestCodingKeys.self)
        try encoderContainer.encode(listenerPort, forKey: .listenerPort)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 根据云提供商查询对应的SLB资源信息 
public class GetVpcSlbByIdResult:NSObject,JdCloudResult
{
    /// Slb
    var slb:SlbInfoDetail?



    public override init(){
        super.init()
    }

    enum GetVpcSlbByIdResultCodingKeys: String, CodingKey {
        case slb
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcSlbByIdResultCodingKeys.self)
        if decoderContainer.contains(.slb)
        {
            self.slb = try decoderContainer.decode(SlbInfoDetail?.self, forKey: .slb)
        }
    }
}
public extension GetVpcSlbByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSlbByIdResultCodingKeys.self)
        try encoderContainer.encode(slb, forKey: .slb)
    }
}
public class StopSlbListenerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopSlbListenerResult?;

    enum StopSlbListenerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopSlbListenerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopSlbListenerResult?.self, forKey: .result) ?? nil
    }
}

public extension StopSlbListenerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopSlbListenerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据云提供商创建负载均衡 
public class CreateVpcSlbResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateVpcSlbResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcSlbResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateVpcSlbResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcSlbResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
/// 启动负载均衡 
public class StartSlbResult:NSObject,JdCloudResult
{
}

///  根据云提供商查询对应的SLB资源信息
public class GetVpcSlbByIdRequest:JdCloudRequest
{
    /// LB ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetVpcSlbByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSlbByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class StartSlbResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartSlbResult?;

    enum StartSlbResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartSlbResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartSlbResult?.self, forKey: .result) ?? nil
    }
}

public extension StartSlbResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartSlbResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  停止监听器
public class StopSlbListenerRequest:JdCloudRequest
{
    /// 监听器端口
    var listenerPort:Int32

    /// 负载均衡id
    var id:String


    public init(regionId: String,listenerPort:Int32,id:String){
        self.listenerPort = listenerPort
        self.id = id
        super.init(regionId: regionId)
    }


    enum StopSlbListenerRequestRequestCodingKeys: String, CodingKey {
        case listenerPort
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopSlbListenerRequestRequestCodingKeys.self)
        try encoderContainer.encode(listenerPort, forKey: .listenerPort)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  删除SLB
public class DeleteVpcSlbByIdRequest:JdCloudRequest
{
    /// LB ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteVpcSlbByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcSlbByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  启动负载均衡
public class StartSlbRequest:JdCloudRequest
{
    /// LB ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum StartSlbRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartSlbRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 停止监听器 
public class StopSlbListenerResult:NSObject,JdCloudResult
{
}
public class DeleteVpcSlbByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVpcSlbByIdResult?;

    enum DeleteVpcSlbByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVpcSlbByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVpcSlbByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVpcSlbByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVpcSlbByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 停止负载均衡 
public class StopSlbResult:NSObject,JdCloudResult
{
}
/// 启动监听器 
public class StartSlbListenerResult:NSObject,JdCloudResult
{
}
public class GetVpcSlbsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVpcSlbsResult?;

    enum GetVpcSlbsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcSlbsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVpcSlbsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVpcSlbsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSlbsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateVpcSlbResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVpcSlbResult?;

    enum CreateVpcSlbResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcSlbResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVpcSlbResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVpcSlbResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcSlbResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据云提供商查询对应的负载均衡资源信息 
public class GetVpcSlbsResult:NSObject,JdCloudResult
{
    /// Slbs
    var slbs:[SlbInfo?]?



    public override init(){
        super.init()
    }

    enum GetVpcSlbsResultCodingKeys: String, CodingKey {
        case slbs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcSlbsResultCodingKeys.self)
        if decoderContainer.contains(.slbs)
        {
            self.slbs = try decoderContainer.decode([SlbInfo?]?.self, forKey: .slbs)
        }
    }
}
public extension GetVpcSlbsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcSlbsResultCodingKeys.self)
        try encoderContainer.encode(slbs, forKey: .slbs)
    }
}

///  启动监听器
public class StartSlbListenerRequest:JdCloudRequest
{
    /// 监听器端口
    var listenerPort:Int32

    /// 负载均衡id
    var id:String


    public init(regionId: String,listenerPort:Int32,id:String){
        self.listenerPort = listenerPort
        self.id = id
        super.init(regionId: regionId)
    }


    enum StartSlbListenerRequestRequestCodingKeys: String, CodingKey {
        case listenerPort
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartSlbListenerRequestRequestCodingKeys.self)
        try encoderContainer.encode(listenerPort, forKey: .listenerPort)
        try encoderContainer.encode(id, forKey: .id)

    }
}


///  停止负载均衡
public class StopSlbRequest:JdCloudRequest
{
    /// LB ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum StopSlbRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopSlbRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

public class DeleteSlbsListenerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSlbsListenerResult?;

    enum DeleteSlbsListenerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSlbsListenerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSlbsListenerResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSlbsListenerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSlbsListenerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除SLB 
public class DeleteVpcSlbByIdResult:NSObject,JdCloudResult
{
}

///  根据云提供商创建负载均衡
public class CreateVpcSlbRequest:JdCloudRequest
{
    /// 创建SLB
    var slb:SlbInfo


    public init(regionId: String,slb:SlbInfo){
        self.slb = slb
        super.init(regionId: regionId)
    }


    enum CreateVpcSlbRequestRequestCodingKeys: String, CodingKey {
        case slb
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcSlbRequestRequestCodingKeys.self)
        try encoderContainer.encode(slb, forKey: .slb)

    }
}

public class StartSlbListenerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartSlbListenerResult?;

    enum StartSlbListenerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartSlbListenerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartSlbListenerResult?.self, forKey: .result) ?? nil
    }
}

public extension StartSlbListenerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartSlbListenerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据过滤条件，取得服务器组的信息
public class GetVpcVServerGroupsRequest:JdCloudRequest
{
    /// 负载均衡id
    var slbid:String?




    enum GetVpcVServerGroupsRequestRequestCodingKeys: String, CodingKey {
        case slbid
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcVServerGroupsRequestRequestCodingKeys.self)
        try encoderContainer.encode(slbid, forKey: .slbid)

    }
}


///  根据过滤条件，取得服务器组的信息
public class GetVserverGroupsByIdRequest:JdCloudRequest
{
    /// 服务器组ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum GetVserverGroupsByIdRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVserverGroupsByIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 根据过滤条件，取得服务器组的信息 
public class GetVserverGroupsByIdResult:NSObject,JdCloudResult
{
    /// VserverGroup
    var vserverGroup:VserverGroupDetail?



    public override init(){
        super.init()
    }

    enum GetVserverGroupsByIdResultCodingKeys: String, CodingKey {
        case vserverGroup
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVserverGroupsByIdResultCodingKeys.self)
        if decoderContainer.contains(.vserverGroup)
        {
            self.vserverGroup = try decoderContainer.decode(VserverGroupDetail?.self, forKey: .vserverGroup)
        }
    }
}
public extension GetVserverGroupsByIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVserverGroupsByIdResultCodingKeys.self)
        try encoderContainer.encode(vserverGroup, forKey: .vserverGroup)
    }
}
public class GetVserverGroupsByIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVserverGroupsByIdResult?;

    enum GetVserverGroupsByIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVserverGroupsByIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVserverGroupsByIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVserverGroupsByIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVserverGroupsByIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateVpcVServerGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateVpcVServerGroupResult?;

    enum CreateVpcVServerGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcVServerGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateVpcVServerGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateVpcVServerGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcVServerGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetVpcVServerGroupsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVpcVServerGroupsResult?;

    enum GetVpcVServerGroupsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcVServerGroupsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVpcVServerGroupsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVpcVServerGroupsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcVServerGroupsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteVserverGroupResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteVserverGroupResult?;

    enum DeleteVserverGroupResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteVserverGroupResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteVserverGroupResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteVserverGroupResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVserverGroupResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据过滤条件，取得服务器组的信息 
public class GetVpcVServerGroupsResult:NSObject,JdCloudResult
{
    /// VserverGroups
    var vserverGroups:[VserverGroupInfo?]?



    public override init(){
        super.init()
    }

    enum GetVpcVServerGroupsResultCodingKeys: String, CodingKey {
        case vserverGroups
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVpcVServerGroupsResultCodingKeys.self)
        if decoderContainer.contains(.vserverGroups)
        {
            self.vserverGroups = try decoderContainer.decode([VserverGroupInfo?]?.self, forKey: .vserverGroups)
        }
    }
}
public extension GetVpcVServerGroupsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVpcVServerGroupsResultCodingKeys.self)
        try encoderContainer.encode(vserverGroups, forKey: .vserverGroups)
    }
}

///  删除服务器组
public class DeleteVserverGroupRequest:JdCloudRequest
{
    /// 服务器组ID
    var id:String


    public init(regionId: String,id:String){
        self.id = id
        super.init(regionId: regionId)
    }


    enum DeleteVserverGroupRequestRequestCodingKeys: String, CodingKey {
        case id
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteVserverGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(id, forKey: .id)

    }
}

/// 删除服务器组 
public class DeleteVserverGroupResult:NSObject,JdCloudResult
{
}
/// 创建虚拟服务器组，并添加后端服务器 
public class CreateVpcVServerGroupResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateVpcVServerGroupResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVpcVServerGroupResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateVpcVServerGroupResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcVServerGroupResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}

///  创建虚拟服务器组，并添加后端服务器
public class CreateVpcVServerGroupRequest:JdCloudRequest
{
    /// 创建虚拟服务器组
    var vserverGroup:CreateVserverGroup


    public init(regionId: String,vserverGroup:CreateVserverGroup){
        self.vserverGroup = vserverGroup
        super.init(regionId: regionId)
    }


    enum CreateVpcVServerGroupRequestRequestCodingKeys: String, CodingKey {
        case vserverGroup
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVpcVServerGroupRequestRequestCodingKeys.self)
        try encoderContainer.encode(vserverGroup, forKey: .vserverGroup)

    }
}

/// 根据过滤条件，取得镜像资源的信息 
public class GetVmImagesResult:NSObject,JdCloudResult
{
    /// Images
    var images:[ImageInfo?]?



    public override init(){
        super.init()
    }

    enum GetVmImagesResultCodingKeys: String, CodingKey {
        case images
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVmImagesResultCodingKeys.self)
        if decoderContainer.contains(.images)
        {
            self.images = try decoderContainer.decode([ImageInfo?]?.self, forKey: .images)
        }
    }
}
public extension GetVmImagesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmImagesResultCodingKeys.self)
        try encoderContainer.encode(images, forKey: .images)
    }
}

///  根据过滤条件，取得镜像资源的信息
public class GetVmImagesRequest:JdCloudRequest
{
    /// 镜像来源： system：系统官方公共镜像。 self：用户自定义镜像。 others：用户共享的镜像。 marketplace：镜像市场云市场 提供的镜像。
    var imageSource:String?




    enum GetVmImagesRequestRequestCodingKeys: String, CodingKey {
        case imageSource
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmImagesRequestRequestCodingKeys.self)
        try encoderContainer.encode(imageSource, forKey: .imageSource)

    }
}

public class GetVmImagesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetVmImagesResult?;

    enum GetVmImagesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetVmImagesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetVmImagesResult?.self, forKey: .result) ?? nil
    }
}

public extension GetVmImagesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetVmImagesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据数据库类型，取得RDS实例的规格 
public class GetRdsSpecificationResult:NSObject,JdCloudResult
{
    /// Specifications
    var specifications:[RdsSpecification?]?



    public override init(){
        super.init()
    }

    enum GetRdsSpecificationResultCodingKeys: String, CodingKey {
        case specifications
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsSpecificationResultCodingKeys.self)
        if decoderContainer.contains(.specifications)
        {
            self.specifications = try decoderContainer.decode([RdsSpecification?]?.self, forKey: .specifications)
        }
    }
}
public extension GetRdsSpecificationResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsSpecificationResultCodingKeys.self)
        try encoderContainer.encode(specifications, forKey: .specifications)
    }
}
public class GetRdsSpecificationResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRdsSpecificationResult?;

    enum GetRdsSpecificationResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsSpecificationResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRdsSpecificationResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRdsSpecificationResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsSpecificationResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据数据库类型，取得RDS实例的规格
public class GetRdsSpecificationRequest:JdCloudRequest
{
    /// RDS数据库引擎，目前只支持mysql
    var engine:String


    public init(regionId: String,engine:String){
        self.engine = engine
        super.init(regionId: regionId)
    }


    enum GetRdsSpecificationRequestRequestCodingKeys: String, CodingKey {
        case engine
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsSpecificationRequestRequestCodingKeys.self)
        try encoderContainer.encode(engine, forKey: .engine)

    }
}

public class GetRegionsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRegionsResult?;

    enum GetRegionsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRegionsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRegionsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRegionsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRegionsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询可用域列表信息
public class GetRegionsAvailableZonesRequest:JdCloudRequest
{
    /// 区域id
    var region:String


    public init(regionId: String,region:String){
        self.region = region
        super.init(regionId: regionId)
    }


    enum GetRegionsAvailableZonesRequestRequestCodingKeys: String, CodingKey {
        case region
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRegionsAvailableZonesRequestRequestCodingKeys.self)
        try encoderContainer.encode(region, forKey: .region)

    }
}


///  查询地域列表信息
public class GetRegionsRequest:JdCloudRequest
{
}

public class GetRegionsAvailableZonesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRegionsAvailableZonesResult?;

    enum GetRegionsAvailableZonesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRegionsAvailableZonesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRegionsAvailableZonesResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRegionsAvailableZonesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRegionsAvailableZonesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询地域列表信息 
public class GetRegionsResult:NSObject,JdCloudResult
{
    /// Regions
    var regions:[RegionInfo?]?



    public override init(){
        super.init()
    }

    enum GetRegionsResultCodingKeys: String, CodingKey {
        case regions
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRegionsResultCodingKeys.self)
        if decoderContainer.contains(.regions)
        {
            self.regions = try decoderContainer.decode([RegionInfo?]?.self, forKey: .regions)
        }
    }
}
public extension GetRegionsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRegionsResultCodingKeys.self)
        try encoderContainer.encode(regions, forKey: .regions)
    }
}
/// 查询可用域列表信息 
public class GetRegionsAvailableZonesResult:NSObject,JdCloudResult
{
    /// Azs
    var azs:[AzInfo?]?



    public override init(){
        super.init()
    }

    enum GetRegionsAvailableZonesResultCodingKeys: String, CodingKey {
        case azs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRegionsAvailableZonesResultCodingKeys.self)
        if decoderContainer.contains(.azs)
        {
            self.azs = try decoderContainer.decode([AzInfo?]?.self, forKey: .azs)
        }
    }
}
public extension GetRegionsAvailableZonesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRegionsAvailableZonesResultCodingKeys.self)
        try encoderContainer.encode(azs, forKey: .azs)
    }
}
/// 根据过滤条件，取得指定RDS实例上的数据库信息 
public class GetRdsDatabaseByInstIdAndDbNameResult:NSObject,JdCloudResult
{
    /// Db
    var db:RdsDBInfo?



    public override init(){
        super.init()
    }

    enum GetRdsDatabaseByInstIdAndDbNameResultCodingKeys: String, CodingKey {
        case db
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsDatabaseByInstIdAndDbNameResultCodingKeys.self)
        if decoderContainer.contains(.db)
        {
            self.db = try decoderContainer.decode(RdsDBInfo?.self, forKey: .db)
        }
    }
}
public extension GetRdsDatabaseByInstIdAndDbNameResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsDatabaseByInstIdAndDbNameResultCodingKeys.self)
        try encoderContainer.encode(db, forKey: .db)
    }
}

///  根据给定的信息，创建指定RDS实例的数据库
public class CreateRdsDatabaseRequest:JdCloudRequest
{
    /// 创建RDS实例的数据库信息
    var database:CreateRDSDB

    /// RDS实例ID
    var instId:String


    public init(regionId: String,database:CreateRDSDB,instId:String){
        self.database = database
        self.instId = instId
        super.init(regionId: regionId)
    }


    enum CreateRdsDatabaseRequestRequestCodingKeys: String, CodingKey {
        case database
        case instId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRdsDatabaseRequestRequestCodingKeys.self)
        try encoderContainer.encode(database, forKey: .database)
        try encoderContainer.encode(instId, forKey: .instId)

    }
}

public class GetRdsDatabasesByInstIdResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRdsDatabasesByInstIdResult?;

    enum GetRdsDatabasesByInstIdResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsDatabasesByInstIdResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRdsDatabasesByInstIdResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRdsDatabasesByInstIdResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsDatabasesByInstIdResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除指定RDS实例上，指定数据库名的数据库信息
public class DeleteRdsDatabaseRequest:JdCloudRequest
{
    /// RDS实例ID
    var instId:String

    /// 数据库名称
    var dbName:String


    public init(regionId: String,instId:String,dbName:String){
        self.instId = instId
        self.dbName = dbName
        super.init(regionId: regionId)
    }


    enum DeleteRdsDatabaseRequestRequestCodingKeys: String, CodingKey {
        case instId
        case dbName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRdsDatabaseRequestRequestCodingKeys.self)
        try encoderContainer.encode(instId, forKey: .instId)
        try encoderContainer.encode(dbName, forKey: .dbName)

    }
}

public class GetRdsDatabaseByInstIdAndDbNameResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRdsDatabaseByInstIdAndDbNameResult?;

    enum GetRdsDatabaseByInstIdAndDbNameResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsDatabaseByInstIdAndDbNameResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRdsDatabaseByInstIdAndDbNameResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRdsDatabaseByInstIdAndDbNameResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsDatabaseByInstIdAndDbNameResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除指定RDS实例上，指定数据库名的数据库信息 
public class DeleteRdsDatabaseResult:NSObject,JdCloudResult
{
}
public class DeleteRdsDatabaseResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteRdsDatabaseResult?;

    enum DeleteRdsDatabaseResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteRdsDatabaseResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteRdsDatabaseResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteRdsDatabaseResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteRdsDatabaseResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateRdsDatabaseResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateRdsDatabaseResult?;

    enum CreateRdsDatabaseResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRdsDatabaseResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateRdsDatabaseResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateRdsDatabaseResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRdsDatabaseResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据过滤条件，取得指定RDS实例上的数据库信息 
public class GetRdsDatabasesByInstIdResult:NSObject,JdCloudResult
{
    /// Dbs
    var dbs:[RdsDBInfo?]?



    public override init(){
        super.init()
    }

    enum GetRdsDatabasesByInstIdResultCodingKeys: String, CodingKey {
        case dbs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRdsDatabasesByInstIdResultCodingKeys.self)
        if decoderContainer.contains(.dbs)
        {
            self.dbs = try decoderContainer.decode([RdsDBInfo?]?.self, forKey: .dbs)
        }
    }
}
public extension GetRdsDatabasesByInstIdResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsDatabasesByInstIdResultCodingKeys.self)
        try encoderContainer.encode(dbs, forKey: .dbs)
    }
}

///  根据过滤条件，取得指定RDS实例上的数据库信息
public class GetRdsDatabaseByInstIdAndDbNameRequest:JdCloudRequest
{
    /// RDS实例ID
    var instId:String

    /// 数据库名称
    var dbName:String


    public init(regionId: String,instId:String,dbName:String){
        self.instId = instId
        self.dbName = dbName
        super.init(regionId: regionId)
    }


    enum GetRdsDatabaseByInstIdAndDbNameRequestRequestCodingKeys: String, CodingKey {
        case instId
        case dbName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsDatabaseByInstIdAndDbNameRequestRequestCodingKeys.self)
        try encoderContainer.encode(instId, forKey: .instId)
        try encoderContainer.encode(dbName, forKey: .dbName)

    }
}


///  根据过滤条件，取得指定RDS实例上的数据库信息
public class GetRdsDatabasesByInstIdRequest:JdCloudRequest
{
    /// RDS实例ID
    var instId:String


    public init(regionId: String,instId:String){
        self.instId = instId
        super.init(regionId: regionId)
    }


    enum GetRdsDatabasesByInstIdRequestRequestCodingKeys: String, CodingKey {
        case instId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRdsDatabasesByInstIdRequestRequestCodingKeys.self)
        try encoderContainer.encode(instId, forKey: .instId)

    }
}

/// 根据给定的信息，创建指定RDS实例的数据库 
public class CreateRdsDatabaseResult:NSObject,JdCloudResult
{
    /// Task
    var task:ResourceTFInfo?



    public override init(){
        super.init()
    }

    enum CreateRdsDatabaseResultCodingKeys: String, CodingKey {
        case task
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRdsDatabaseResultCodingKeys.self)
        if decoderContainer.contains(.task)
        {
            self.task = try decoderContainer.decode(ResourceTFInfo?.self, forKey: .task)
        }
    }
}
public extension CreateRdsDatabaseResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRdsDatabaseResultCodingKeys.self)
        try encoderContainer.encode(task, forKey: .task)
    }
}
