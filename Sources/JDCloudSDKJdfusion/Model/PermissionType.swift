/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  安全组规则类型
@objc(PermissionType)
public class PermissionType:NSObject,Codable{
    /// 云注册信息ID
    var cloudID:String?
    /// IP协议
    var ipProtocol:String?
    /// 端口范围
    var portRange:String?
    /// 描述信息
    var descriptionValue:String?
    /// 源IP地址段，用于入方向授权
    var sourceCidrIp:String?
    /// 源安全组，用于入方向授权
    var sourceGroupId:String?
    /// 源安全组所属阿里云账户Id
    var sourceGroupOwnerAccount:String?
    /// 目标IP地址段，用于出方向授权
    var destCidrIp:String?
    /// 目标安全组，用于出方向授权
    var destGroupId:String?
    /// 目标安全组所属阿里云账户Id
    var destGroupOwnerAccount:String?
    /// 授权策略
    var policy:String?
    /// 网络类型
    var nicType:String?
    /// 规则优先级
    var priority:String?
    /// 授权方向
    var direction:String?



    public override init(){
            super.init()
    }

    enum PermissionTypeCodingKeys: String, CodingKey {
        case cloudID
        case ipProtocol
        case portRange
        case descriptionValue = "description"
        case sourceCidrIp
        case sourceGroupId
        case sourceGroupOwnerAccount
        case destCidrIp
        case destGroupId
        case destGroupOwnerAccount
        case policy
        case nicType
        case priority
        case direction
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PermissionTypeCodingKeys.self)
        self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        self.ipProtocol = try decoderContainer.decode(String?.self, forKey: .ipProtocol)
        self.portRange = try decoderContainer.decode(String?.self, forKey: .portRange)
        self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        self.sourceCidrIp = try decoderContainer.decode(String?.self, forKey: .sourceCidrIp)
        self.sourceGroupId = try decoderContainer.decode(String?.self, forKey: .sourceGroupId)
        self.sourceGroupOwnerAccount = try decoderContainer.decode(String?.self, forKey: .sourceGroupOwnerAccount)
        self.destCidrIp = try decoderContainer.decode(String?.self, forKey: .destCidrIp)
        self.destGroupId = try decoderContainer.decode(String?.self, forKey: .destGroupId)
        self.destGroupOwnerAccount = try decoderContainer.decode(String?.self, forKey: .destGroupOwnerAccount)
        self.policy = try decoderContainer.decode(String?.self, forKey: .policy)
        self.nicType = try decoderContainer.decode(String?.self, forKey: .nicType)
        self.priority = try decoderContainer.decode(String?.self, forKey: .priority)
        self.direction = try decoderContainer.decode(String?.self, forKey: .direction)
    }
}
public extension PermissionType{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PermissionTypeCodingKeys.self)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
         try encoderContainer.encode(ipProtocol, forKey: .ipProtocol)
         try encoderContainer.encode(portRange, forKey: .portRange)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(sourceCidrIp, forKey: .sourceCidrIp)
         try encoderContainer.encode(sourceGroupId, forKey: .sourceGroupId)
         try encoderContainer.encode(sourceGroupOwnerAccount, forKey: .sourceGroupOwnerAccount)
         try encoderContainer.encode(destCidrIp, forKey: .destCidrIp)
         try encoderContainer.encode(destGroupId, forKey: .destGroupId)
         try encoderContainer.encode(destGroupOwnerAccount, forKey: .destGroupOwnerAccount)
         try encoderContainer.encode(policy, forKey: .policy)
         try encoderContainer.encode(nicType, forKey: .nicType)
         try encoderContainer.encode(priority, forKey: .priority)
         try encoderContainer.encode(direction, forKey: .direction)
    }
}
