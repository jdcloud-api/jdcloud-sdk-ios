/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  云硬盘信息
@objc(CloudDataDisk)
public class CloudDataDisk:NSObject,Codable{
    /// 云注册信息ID
    var cloudID:String?
    /// 云硬盘ID
    var id:String?
    /// 云硬盘名称
    var name:String?
    /// 云硬盘描述
    var descriptionValue:String?
    /// 磁盘大小,单位为 GiB
    var diskSizeGB:Int32?
    /// 挂载信息
    var attachments:[ArrayDiskAttachment?]?
    /// 云硬盘所属AZ
    var az:String?
    /// 磁盘类型,取值为 ssd 或 premium-hdd
    var diskType:String?
    /// 创建该云硬盘的快照ID
    var snapshotId:String?
    /// 云硬盘状态
    var status:String?
    /// Tags
    var tags:[Tag?]?
    /// 创建时间
    var createdTime:String?



    public override init(){
            super.init()
    }

    enum CloudDataDiskCodingKeys: String, CodingKey {
        case cloudID
        case id
        case name
        case descriptionValue = "description"
        case diskSizeGB
        case attachments
        case az
        case diskType
        case snapshotId
        case status
        case tags
        case createdTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CloudDataDiskCodingKeys.self)
        if decoderContainer.contains(.cloudID)
        {
            self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.diskSizeGB)
        {
            self.diskSizeGB = try decoderContainer.decode(Int32?.self, forKey: .diskSizeGB)
        }
        if decoderContainer.contains(.attachments)
        {
            self.attachments = try decoderContainer.decode([ArrayDiskAttachment?]?.self, forKey: .attachments)
        }
        if decoderContainer.contains(.az)
        {
            self.az = try decoderContainer.decode(String?.self, forKey: .az)
        }
        if decoderContainer.contains(.diskType)
        {
            self.diskType = try decoderContainer.decode(String?.self, forKey: .diskType)
        }
        if decoderContainer.contains(.snapshotId)
        {
            self.snapshotId = try decoderContainer.decode(String?.self, forKey: .snapshotId)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([Tag?]?.self, forKey: .tags)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
    }
}
public extension CloudDataDisk{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CloudDataDiskCodingKeys.self)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(diskSizeGB, forKey: .diskSizeGB)
         try encoderContainer.encode(attachments, forKey: .attachments)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(diskType, forKey: .diskType)
         try encoderContainer.encode(snapshotId, forKey: .snapshotId)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(tags, forKey: .tags)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
    }
}
