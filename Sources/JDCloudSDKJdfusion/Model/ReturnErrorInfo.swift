/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  returnErrorInfo
@objc(ReturnErrorInfo)
public class ReturnErrorInfo:NSObject,Codable{
    /// 10位错误码；1-4服务码，5-7业务码，8-0错误码
    var code:String?
    /// 错误信息
    var msg:String?
    /// http协议状态码
    var httpStatus:Int32?
    /// PayloadInfo
    var payloadInfo:AnyObject?



    public override init(){
            super.init()
    }

    enum ReturnErrorInfoCodingKeys: String, CodingKey {
        case code
        case msg
        case httpStatus
        case payloadInfo
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReturnErrorInfoCodingKeys.self)
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(String?.self, forKey: .code)
        }
        if decoderContainer.contains(.msg)
        {
            self.msg = try decoderContainer.decode(String?.self, forKey: .msg)
        }
        if decoderContainer.contains(.httpStatus)
        {
            self.httpStatus = try decoderContainer.decode(Int32?.self, forKey: .httpStatus)
        }
    }
}
public extension ReturnErrorInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReturnErrorInfoCodingKeys.self)
         try encoderContainer.encode(code, forKey: .code)
         try encoderContainer.encode(msg, forKey: .msg)
         try encoderContainer.encode(httpStatus, forKey: .httpStatus)
    }
}
