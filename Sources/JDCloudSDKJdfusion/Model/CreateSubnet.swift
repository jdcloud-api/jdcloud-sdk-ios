/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createSubnet
@objc(CreateSubnet)
public class CreateSubnet:NSObject,Codable{
    /// Subnet的Id
    var id:String?
    /// 子网名称
    var name:String?
    /// 子网所属VPC的Id
    /// Required:true
    var vpcId:String
    /// 子网网段
    /// Required:true
    var cidrBlock:String
    /// 子网描述信息
    var descriptionValue:String?
    /// 子网所属可用域Id
    /// Required:true
    var az:String
    /// 创建时间
    var createdTime:String?
    /// 所属云提供商ID
    var cloudID:String?



    public  init(vpcId:String,cidrBlock:String,az:String){
             self.vpcId = vpcId
             self.cidrBlock = cidrBlock
             self.az = az
    }

    enum CreateSubnetCodingKeys: String, CodingKey {
        case id
        case name
        case vpcId
        case cidrBlock
        case descriptionValue = "description"
        case az
        case createdTime
        case cloudID
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSubnetCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        self.vpcId = try decoderContainer.decode(String.self, forKey: .vpcId)
        self.cidrBlock = try decoderContainer.decode(String.self, forKey: .cidrBlock)
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        self.az = try decoderContainer.decode(String.self, forKey: .az)
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.cloudID)
        {
            self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        }
    }
}
public extension CreateSubnet{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSubnetCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(cidrBlock, forKey: .cidrBlock)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
    }
}
