/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  dataDiskAttachment
@objc(DataDiskAttachment)
public class DataDiskAttachment:NSObject,Codable{
    /// 是否随云主机一起删除,true：自动；false：非自动
    var autoDelete:Bool?
    /// DataDisk
    var dataDisk:DataDiskInfo?
    /// 数据盘逻辑挂载点
    var deviceName:String?
    /// 磁盘分类,取值为本地盘(local)或者数据盘(cloud)
    var diskCategory:String?



    public override init(){
            super.init()
    }

    enum DataDiskAttachmentCodingKeys: String, CodingKey {
        case autoDelete
        case dataDisk
        case deviceName
        case diskCategory
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DataDiskAttachmentCodingKeys.self)
        self.autoDelete = try decoderContainer.decode(Bool?.self, forKey: .autoDelete)
        self.dataDisk = try decoderContainer.decode(DataDiskInfo?.self, forKey: .dataDisk)
        self.deviceName = try decoderContainer.decode(String?.self, forKey: .deviceName)
        self.diskCategory = try decoderContainer.decode(String?.self, forKey: .diskCategory)
    }
}
public extension DataDiskAttachment{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DataDiskAttachmentCodingKeys.self)
         try encoderContainer.encode(autoDelete, forKey: .autoDelete)
         try encoderContainer.encode(dataDisk, forKey: .dataDisk)
         try encoderContainer.encode(deviceName, forKey: .deviceName)
         try encoderContainer.encode(diskCategory, forKey: .diskCategory)
    }
}
