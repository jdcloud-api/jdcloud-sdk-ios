/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  子网属性信息
@objc(NetInterfaceInfo)
public class NetInterfaceInfo:NSObject,Codable{
    /// 网卡的Id
    var id:String?
    /// 网卡名称
    var name:String?
    /// 网卡描述信息
    var descriptionValue:String?
    /// VPC的Id
    var vpcId:String?
    /// 网卡类型
    var type:String?
    /// 子网id
    var subnetId:String?
    /// 可用区的 ID
    var az:String?
    /// 弹性网卡关联的公网 IP
    var associatedPublicIp:String?
    /// 弹性网卡主私有 IP 地址
    var privateIpAddress:String?
    /// 弹性网卡的 MAC 地址
    var macAddress:String?
    /// 弹性网卡附加的实例 ID
    var instanceId:String?
    /// 创建时间
    var createdTime:String?
    /// 所属云提供商ID
    var cloudID:String?



    public override init(){
            super.init()
    }

    enum NetInterfaceInfoCodingKeys: String, CodingKey {
        case id
        case name
        case descriptionValue = "description"
        case vpcId
        case type
        case subnetId
        case az
        case associatedPublicIp
        case privateIpAddress
        case macAddress
        case instanceId
        case createdTime
        case cloudID
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NetInterfaceInfoCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(String?.self, forKey: .type)
        }
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
        if decoderContainer.contains(.az)
        {
            self.az = try decoderContainer.decode(String?.self, forKey: .az)
        }
        if decoderContainer.contains(.associatedPublicIp)
        {
            self.associatedPublicIp = try decoderContainer.decode(String?.self, forKey: .associatedPublicIp)
        }
        if decoderContainer.contains(.privateIpAddress)
        {
            self.privateIpAddress = try decoderContainer.decode(String?.self, forKey: .privateIpAddress)
        }
        if decoderContainer.contains(.macAddress)
        {
            self.macAddress = try decoderContainer.decode(String?.self, forKey: .macAddress)
        }
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.cloudID)
        {
            self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        }
    }
}
public extension NetInterfaceInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NetInterfaceInfoCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(type, forKey: .type)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(associatedPublicIp, forKey: .associatedPublicIp)
         try encoderContainer.encode(privateIpAddress, forKey: .privateIpAddress)
         try encoderContainer.encode(macAddress, forKey: .macAddress)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
    }
}
