/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  子网属性信息
@objc(SubnetInfo)
public class SubnetInfo:NSObject,Codable{
    /// Subnet的Id
    var id:String?
    /// 子网所属VPC的Id
    var vpcId:String?
    /// 子网名称
    var subnetName:String?
    /// 子网网段
    var cidrBlock:String?
    /// 子网可用ip数量
    var availableIpCount:Int32?
    /// 子网描述信息
    var descriptionValue:String?
    /// 子网的结束地址
    var endIp:String?
    /// 子网关联的路由表Id
    var routeTableId:String?
    /// 子网的起始地址
    var startIp:String?
    /// 所属云提供商ID
    var cloudID:String?
    /// 可用区
    var az:String?
    /// 子网创建时间
    var createdTime:String?



    public override init(){
            super.init()
    }

    enum SubnetInfoCodingKeys: String, CodingKey {
        case id
        case vpcId
        case subnetName
        case cidrBlock
        case availableIpCount
        case descriptionValue = "description"
        case endIp
        case routeTableId
        case startIp
        case cloudID
        case az
        case createdTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SubnetInfoCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
        if decoderContainer.contains(.subnetName)
        {
            self.subnetName = try decoderContainer.decode(String?.self, forKey: .subnetName)
        }
        if decoderContainer.contains(.cidrBlock)
        {
            self.cidrBlock = try decoderContainer.decode(String?.self, forKey: .cidrBlock)
        }
        if decoderContainer.contains(.availableIpCount)
        {
            self.availableIpCount = try decoderContainer.decode(Int32?.self, forKey: .availableIpCount)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.endIp)
        {
            self.endIp = try decoderContainer.decode(String?.self, forKey: .endIp)
        }
        if decoderContainer.contains(.routeTableId)
        {
            self.routeTableId = try decoderContainer.decode(String?.self, forKey: .routeTableId)
        }
        if decoderContainer.contains(.startIp)
        {
            self.startIp = try decoderContainer.decode(String?.self, forKey: .startIp)
        }
        if decoderContainer.contains(.cloudID)
        {
            self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        }
        if decoderContainer.contains(.az)
        {
            self.az = try decoderContainer.decode(String?.self, forKey: .az)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
    }
}
public extension SubnetInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SubnetInfoCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(subnetName, forKey: .subnetName)
         try encoderContainer.encode(cidrBlock, forKey: .cidrBlock)
         try encoderContainer.encode(availableIpCount, forKey: .availableIpCount)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(endIp, forKey: .endIp)
         try encoderContainer.encode(routeTableId, forKey: .routeTableId)
         try encoderContainer.encode(startIp, forKey: .startIp)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
    }
}
