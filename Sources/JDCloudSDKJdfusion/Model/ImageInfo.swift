/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  镜像信息
@objc(ImageInfo)
public class ImageInfo:NSObject,Codable{
    /// 镜像ID
    var id:String?
    /// 镜像名称
    var name:String?
    /// 镜像描述
    var descriptionValue:String?
    /// 镜像架构
    var architecture:String?
    /// 创建时间
    var createdTime:String?
    /// 镜像来源
    var imageSource:String?
    /// 镜像操作系统类型
    var osType:String?
    /// 操作系统平台
    var platform:String?
    /// 镜像复制和转换时的进度，仅显示数值，单位为百分比
    var progress:String?
    /// 镜像大小 单位MB
    var size:Int32?
    /// 状态
    var status:String?
    /// 云注册信息ID
    var cloudID:String?



    public override init(){
            super.init()
    }

    enum ImageInfoCodingKeys: String, CodingKey {
        case id
        case name
        case descriptionValue = "description"
        case architecture
        case createdTime
        case imageSource
        case osType
        case platform
        case progress
        case size
        case status
        case cloudID
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImageInfoCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.architecture)
        {
            self.architecture = try decoderContainer.decode(String?.self, forKey: .architecture)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.imageSource)
        {
            self.imageSource = try decoderContainer.decode(String?.self, forKey: .imageSource)
        }
        if decoderContainer.contains(.osType)
        {
            self.osType = try decoderContainer.decode(String?.self, forKey: .osType)
        }
        if decoderContainer.contains(.platform)
        {
            self.platform = try decoderContainer.decode(String?.self, forKey: .platform)
        }
        if decoderContainer.contains(.progress)
        {
            self.progress = try decoderContainer.decode(String?.self, forKey: .progress)
        }
        if decoderContainer.contains(.size)
        {
            self.size = try decoderContainer.decode(Int32?.self, forKey: .size)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.cloudID)
        {
            self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        }
    }
}
public extension ImageInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImageInfoCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(architecture, forKey: .architecture)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(imageSource, forKey: .imageSource)
         try encoderContainer.encode(osType, forKey: .osType)
         try encoderContainer.encode(platform, forKey: .platform)
         try encoderContainer.encode(progress, forKey: .progress)
         try encoderContainer.encode(size, forKey: .size)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
    }
}
