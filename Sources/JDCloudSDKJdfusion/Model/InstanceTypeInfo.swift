/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  虚机规格
@objc(InstanceTypeInfo)
public class InstanceTypeInfo:NSObject,Codable{
    /// 类型
    var instanceType:String?
    /// 处理器核数，单位为C
    var cpu:Int32?
    /// 内存大小，单位为M
    var memory:Int32?
    /// GPU 数量
    var gpuAmount:Int32?
    /// GPU 类型
    var gpuSpec:String?
    /// 本地存储的单盘容量
    var localStorageSize:Int32?
    /// 本地存储的类型
    var localStorageType:String?
    /// 本地存储的数量
    var localStorageAmount:Int32?
    /// 支持弹性网卡的数量
    var nicLimit:Int32?



    public override init(){
            super.init()
    }

    enum InstanceTypeInfoCodingKeys: String, CodingKey {
        case instanceType
        case cpu
        case memory
        case gpuAmount
        case gpuSpec
        case localStorageSize
        case localStorageType
        case localStorageAmount
        case nicLimit
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InstanceTypeInfoCodingKeys.self)
        self.instanceType = try decoderContainer.decode(String?.self, forKey: .instanceType)
        self.cpu = try decoderContainer.decode(Int32?.self, forKey: .cpu)
        self.memory = try decoderContainer.decode(Int32?.self, forKey: .memory)
        self.gpuAmount = try decoderContainer.decode(Int32?.self, forKey: .gpuAmount)
        self.gpuSpec = try decoderContainer.decode(String?.self, forKey: .gpuSpec)
        self.localStorageSize = try decoderContainer.decode(Int32?.self, forKey: .localStorageSize)
        self.localStorageType = try decoderContainer.decode(String?.self, forKey: .localStorageType)
        self.localStorageAmount = try decoderContainer.decode(Int32?.self, forKey: .localStorageAmount)
        self.nicLimit = try decoderContainer.decode(Int32?.self, forKey: .nicLimit)
    }
}
public extension InstanceTypeInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InstanceTypeInfoCodingKeys.self)
         try encoderContainer.encode(instanceType, forKey: .instanceType)
         try encoderContainer.encode(cpu, forKey: .cpu)
         try encoderContainer.encode(memory, forKey: .memory)
         try encoderContainer.encode(gpuAmount, forKey: .gpuAmount)
         try encoderContainer.encode(gpuSpec, forKey: .gpuSpec)
         try encoderContainer.encode(localStorageSize, forKey: .localStorageSize)
         try encoderContainer.encode(localStorageType, forKey: .localStorageType)
         try encoderContainer.encode(localStorageAmount, forKey: .localStorageAmount)
         try encoderContainer.encode(nicLimit, forKey: .nicLimit)
    }
}
