/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  网卡配置信息
@objc(NetAttachment)
public class NetAttachment:NSObject,Codable{
    /// 指明删除实例时是否删除网卡,默认true；（当前只能是true）
    var autoDelete:Bool?
    /// 设备Index
    var deviceIndex:Int32?
    /// NetworkInterface
    var networkInterface:NetworkInterface?



    public override init(){
            super.init()
    }

    enum NetAttachmentCodingKeys: String, CodingKey {
        case autoDelete
        case deviceIndex
        case networkInterface
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NetAttachmentCodingKeys.self)
        if decoderContainer.contains(.autoDelete)
        {
            self.autoDelete = try decoderContainer.decode(Bool?.self, forKey: .autoDelete)
        }
        if decoderContainer.contains(.deviceIndex)
        {
            self.deviceIndex = try decoderContainer.decode(Int32?.self, forKey: .deviceIndex)
        }
        if decoderContainer.contains(.networkInterface)
        {
            self.networkInterface = try decoderContainer.decode(NetworkInterface?.self, forKey: .networkInterface)
        }
    }
}
public extension NetAttachment{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NetAttachmentCodingKeys.self)
         try encoderContainer.encode(autoDelete, forKey: .autoDelete)
         try encoderContainer.encode(deviceIndex, forKey: .deviceIndex)
         try encoderContainer.encode(networkInterface, forKey: .networkInterface)
    }
}
