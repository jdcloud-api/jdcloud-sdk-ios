/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  分配公网IP
@objc(AllocateEipAddress)
public class AllocateEipAddress:NSObject,Codable{
    /// 公网IP名称
    /// Required:true
    var name:String
    /// EIP的带宽峰值，单位为Mbps
    /// Required:true
    var bandwidth:String
    /// IP服务商
    /// Required:true
    var provider:String



    public  init(name:String,bandwidth:String,provider:String){
             self.name = name
             self.bandwidth = bandwidth
             self.provider = provider
    }

    enum AllocateEipAddressCodingKeys: String, CodingKey {
        case name
        case bandwidth
        case provider
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AllocateEipAddressCodingKeys.self)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        self.bandwidth = try decoderContainer.decode(String.self, forKey: .bandwidth)
        self.provider = try decoderContainer.decode(String.self, forKey: .provider)
    }
}
public extension AllocateEipAddress{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AllocateEipAddressCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(bandwidth, forKey: .bandwidth)
         try encoderContainer.encode(provider, forKey: .provider)
    }
}
