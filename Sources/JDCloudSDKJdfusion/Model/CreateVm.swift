/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createVm
@objc(CreateVm)
public class CreateVm:NSObject,Codable{
    /// 资源ID，如果为空，则执行创建操作，否则执行修改操作
    var id:String?
    /// 可用区,根据各云平台规范填写
    var region:String?
    /// 云主机所属的可用区
    var az:String?
    /// 云主机名称
    /// Required:true
    var name:String
    /// 云主机
    var hostName:String?
    /// ImageType
    var imageType:ImageType?
    /// InstanceType
    var instanceType:InstanceType?
    /// 云主机描述
    var descriptionValue:String?
    /// 子网ID
    /// Required:true
    var subnetId:String
    /// Tags
    var tags:[Tag?]?
    /// 所属云提供商ID
    var cloudID:String?
    /// 密钥对名称,jd当前只支持传入一个
    var keyNames:[String?]?
    /// 主网卡主IP绑定弹性IP的地址
    var elasticIpAddress:String?
    /// 私有ip地址
    var privateIpAddress:String?
    /// 云主机状态
    var status:String?
    /// 创建时间
    var createdTime:String?
    /// 镜像文件ID，启动实例时选择的镜像资源
    /// Required:true
    var imageId:String
    /// 规格类型
    /// Required:true
    var instanceFlavorType:String
    /// 指定新创建实例所属于的安全组代码，同一个安全组内的实例之间可以互相访问
    var securityGroupId:String?
    /// 否  公网入带宽最大值，单位为Mbit/s
    var internetMaxBandwidthIn:Int32?
    /// 否  公网出带宽最大值，单位为Mbit/s
    var internetMaxBandwidthOut:Int32?
    /// 否  实例的密码
    var password:String?
    /// 否  是否使用镜像预设的密码
    var passwordInherit:Bool?
    /// 否  实例自定义数据，需要以Base64方式编码，原始数据最多为16KB
    var userData:String?
    /// 否  密钥对名称
    var keyPairName:String?
    /// SystemDisk
    var systemDisk:SystemDisk?



    public  init(name:String,subnetId:String,imageId:String,instanceFlavorType:String){
             self.name = name
             self.subnetId = subnetId
             self.imageId = imageId
             self.instanceFlavorType = instanceFlavorType
    }

    enum CreateVmCodingKeys: String, CodingKey {
        case id
        case region
        case az
        case name
        case hostName
        case imageType
        case instanceType
        case descriptionValue = "description"
        case subnetId
        case tags
        case cloudID
        case keyNames
        case elasticIpAddress
        case privateIpAddress
        case status
        case createdTime
        case imageId
        case instanceFlavorType
        case securityGroupId
        case internetMaxBandwidthIn
        case internetMaxBandwidthOut
        case password
        case passwordInherit
        case userData
        case keyPairName
        case systemDisk
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateVmCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.az)
        {
            self.az = try decoderContainer.decode(String?.self, forKey: .az)
        }
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        if decoderContainer.contains(.hostName)
        {
            self.hostName = try decoderContainer.decode(String?.self, forKey: .hostName)
        }
        if decoderContainer.contains(.imageType)
        {
            self.imageType = try decoderContainer.decode(ImageType?.self, forKey: .imageType)
        }
        if decoderContainer.contains(.instanceType)
        {
            self.instanceType = try decoderContainer.decode(InstanceType?.self, forKey: .instanceType)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        self.subnetId = try decoderContainer.decode(String.self, forKey: .subnetId)
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([Tag?]?.self, forKey: .tags)
        }
        if decoderContainer.contains(.cloudID)
        {
            self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        }
        if decoderContainer.contains(.keyNames)
        {
            self.keyNames = try decoderContainer.decode([String?]?.self, forKey: .keyNames)
        }
        if decoderContainer.contains(.elasticIpAddress)
        {
            self.elasticIpAddress = try decoderContainer.decode(String?.self, forKey: .elasticIpAddress)
        }
        if decoderContainer.contains(.privateIpAddress)
        {
            self.privateIpAddress = try decoderContainer.decode(String?.self, forKey: .privateIpAddress)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
        self.imageId = try decoderContainer.decode(String.self, forKey: .imageId)
        self.instanceFlavorType = try decoderContainer.decode(String.self, forKey: .instanceFlavorType)
        if decoderContainer.contains(.securityGroupId)
        {
            self.securityGroupId = try decoderContainer.decode(String?.self, forKey: .securityGroupId)
        }
        if decoderContainer.contains(.internetMaxBandwidthIn)
        {
            self.internetMaxBandwidthIn = try decoderContainer.decode(Int32?.self, forKey: .internetMaxBandwidthIn)
        }
        if decoderContainer.contains(.internetMaxBandwidthOut)
        {
            self.internetMaxBandwidthOut = try decoderContainer.decode(Int32?.self, forKey: .internetMaxBandwidthOut)
        }
        if decoderContainer.contains(.password)
        {
            self.password = try decoderContainer.decode(String?.self, forKey: .password)
        }
        if decoderContainer.contains(.passwordInherit)
        {
            self.passwordInherit = try decoderContainer.decode(Bool?.self, forKey: .passwordInherit)
        }
        if decoderContainer.contains(.userData)
        {
            self.userData = try decoderContainer.decode(String?.self, forKey: .userData)
        }
        if decoderContainer.contains(.keyPairName)
        {
            self.keyPairName = try decoderContainer.decode(String?.self, forKey: .keyPairName)
        }
        if decoderContainer.contains(.systemDisk)
        {
            self.systemDisk = try decoderContainer.decode(SystemDisk?.self, forKey: .systemDisk)
        }
    }
}
public extension CreateVm{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateVmCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(hostName, forKey: .hostName)
         try encoderContainer.encode(imageType, forKey: .imageType)
         try encoderContainer.encode(instanceType, forKey: .instanceType)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(tags, forKey: .tags)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
         try encoderContainer.encode(keyNames, forKey: .keyNames)
         try encoderContainer.encode(elasticIpAddress, forKey: .elasticIpAddress)
         try encoderContainer.encode(privateIpAddress, forKey: .privateIpAddress)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(imageId, forKey: .imageId)
         try encoderContainer.encode(instanceFlavorType, forKey: .instanceFlavorType)
         try encoderContainer.encode(securityGroupId, forKey: .securityGroupId)
         try encoderContainer.encode(internetMaxBandwidthIn, forKey: .internetMaxBandwidthIn)
         try encoderContainer.encode(internetMaxBandwidthOut, forKey: .internetMaxBandwidthOut)
         try encoderContainer.encode(password, forKey: .password)
         try encoderContainer.encode(passwordInherit, forKey: .passwordInherit)
         try encoderContainer.encode(userData, forKey: .userData)
         try encoderContainer.encode(keyPairName, forKey: .keyPairName)
         try encoderContainer.encode(systemDisk, forKey: .systemDisk)
    }
}
