/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  绑定公网IP
@objc(DeploymentAssociateEip)
public class DeploymentAssociateEip:NSObject,Codable{
    /// 公网IP id
    var eipId:String?
    /// 云产品的实例ID
    var instanceId:String?
    /// 要解绑的资源类型  虚拟机：vm 负载均衡：slb
    var instanceType:String?



    public override init(){
            super.init()
    }

    enum DeploymentAssociateEipCodingKeys: String, CodingKey {
        case eipId
        case instanceId
        case instanceType
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeploymentAssociateEipCodingKeys.self)
        if decoderContainer.contains(.eipId)
        {
            self.eipId = try decoderContainer.decode(String?.self, forKey: .eipId)
        }
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.instanceType)
        {
            self.instanceType = try decoderContainer.decode(String?.self, forKey: .instanceType)
        }
    }
}
public extension DeploymentAssociateEip{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeploymentAssociateEipCodingKeys.self)
         try encoderContainer.encode(eipId, forKey: .eipId)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
         try encoderContainer.encode(instanceType, forKey: .instanceType)
    }
}
