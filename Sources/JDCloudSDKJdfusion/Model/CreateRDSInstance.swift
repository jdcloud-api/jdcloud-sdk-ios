/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createRDSInstance
@objc(CreateRDSInstance)
public class CreateRDSInstance:NSObject,Codable{
    /// RDS实例ID
    var id:String?
    /// RDS实例名称
    var name:String?
    /// 计费信息,prepaid\postpaid
    /// Required:true
    var payType:String
    /// 可用区ID
    var azs:[String?]?
    /// 实例引擎类型
    /// Required:true
    var engine:String
    /// 实例状态
    var status:String?
    /// 实例类型
    var instanceType:String?
    /// 所属云提供商ID
    var cloudID:String?
    /// 数据库版本号
    /// Required:true
    var engineVersion:String
    /// 实例规格
    /// Required:true
    var instanceClass:String
    /// 磁盘大小，单位GB
    /// Required:true
    var storageGB:Int32
    /// VPC ID
    /// Required:true
    var vpcId:String
    /// 子网ID
    /// Required:true
    var subnetId:String



    public  init(payType:String,engine:String,engineVersion:String,instanceClass:String,storageGB:Int32,vpcId:String,subnetId:String){
             self.payType = payType
             self.engine = engine
             self.engineVersion = engineVersion
             self.instanceClass = instanceClass
             self.storageGB = storageGB
             self.vpcId = vpcId
             self.subnetId = subnetId
    }

    enum CreateRDSInstanceCodingKeys: String, CodingKey {
        case id
        case name
        case payType
        case azs
        case engine
        case status
        case instanceType
        case cloudID
        case engineVersion
        case instanceClass
        case storageGB
        case vpcId
        case subnetId
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateRDSInstanceCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        self.payType = try decoderContainer.decode(String.self, forKey: .payType)
        if decoderContainer.contains(.azs)
        {
            self.azs = try decoderContainer.decode([String?]?.self, forKey: .azs)
        }
        self.engine = try decoderContainer.decode(String.self, forKey: .engine)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.instanceType)
        {
            self.instanceType = try decoderContainer.decode(String?.self, forKey: .instanceType)
        }
        if decoderContainer.contains(.cloudID)
        {
            self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        }
        self.engineVersion = try decoderContainer.decode(String.self, forKey: .engineVersion)
        self.instanceClass = try decoderContainer.decode(String.self, forKey: .instanceClass)
        self.storageGB = try decoderContainer.decode(Int32.self, forKey: .storageGB)
        self.vpcId = try decoderContainer.decode(String.self, forKey: .vpcId)
        self.subnetId = try decoderContainer.decode(String.self, forKey: .subnetId)
    }
}
public extension CreateRDSInstance{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateRDSInstanceCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(payType, forKey: .payType)
         try encoderContainer.encode(azs, forKey: .azs)
         try encoderContainer.encode(engine, forKey: .engine)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(instanceType, forKey: .instanceType)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
         try encoderContainer.encode(engineVersion, forKey: .engineVersion)
         try encoderContainer.encode(instanceClass, forKey: .instanceClass)
         try encoderContainer.encode(storageGB, forKey: .storageGB)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
    }
}
