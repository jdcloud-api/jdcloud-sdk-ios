/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  rdsSpecificationDisk
@objc(RdsSpecificationDisk)
public class RdsSpecificationDisk:NSObject,Codable{
    /// 硬盘大小列表
    var list:[Int32?]?
    /// 硬盘最小值
    var min:Int32?
    /// 硬盘最大值
    var max:Int32?



    public override init(){
            super.init()
    }

    enum RdsSpecificationDiskCodingKeys: String, CodingKey {
        case list
        case min
        case max
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RdsSpecificationDiskCodingKeys.self)
        if decoderContainer.contains(.list)
        {
            self.list = try decoderContainer.decode([Int32?]?.self, forKey: .list)
        }
        if decoderContainer.contains(.min)
        {
            self.min = try decoderContainer.decode(Int32?.self, forKey: .min)
        }
        if decoderContainer.contains(.max)
        {
            self.max = try decoderContainer.decode(Int32?.self, forKey: .max)
        }
    }
}
public extension RdsSpecificationDisk{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RdsSpecificationDiskCodingKeys.self)
         try encoderContainer.encode(list, forKey: .list)
         try encoderContainer.encode(min, forKey: .min)
         try encoderContainer.encode(max, forKey: .max)
    }
}
