/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  公网IP信息
@objc(EipAddress)
public class EipAddress:NSObject,Codable{
    /// 云注册信息ID
    var cloudID:String?
    /// 公网IP地址
    var ipAddress:String?
    /// 公网IP ID
    var id:String?
    /// 状态
    var status:String?
    /// 当前绑定的实例类型
    var instanceType:String?
    /// 当前绑定的实例ID
    var instanceId:String?
    /// EIP的带宽峰值，单位为Mbps
    var bandwidth:String?
    /// EIP的创建时间
    var allocationTime:String?



    public override init(){
            super.init()
    }

    enum EipAddressCodingKeys: String, CodingKey {
        case cloudID
        case ipAddress
        case id
        case status
        case instanceType
        case instanceId
        case bandwidth
        case allocationTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: EipAddressCodingKeys.self)
        if decoderContainer.contains(.cloudID)
        {
            self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        }
        if decoderContainer.contains(.ipAddress)
        {
            self.ipAddress = try decoderContainer.decode(String?.self, forKey: .ipAddress)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.instanceType)
        {
            self.instanceType = try decoderContainer.decode(String?.self, forKey: .instanceType)
        }
        if decoderContainer.contains(.instanceId)
        {
            self.instanceId = try decoderContainer.decode(String?.self, forKey: .instanceId)
        }
        if decoderContainer.contains(.bandwidth)
        {
            self.bandwidth = try decoderContainer.decode(String?.self, forKey: .bandwidth)
        }
        if decoderContainer.contains(.allocationTime)
        {
            self.allocationTime = try decoderContainer.decode(String?.self, forKey: .allocationTime)
        }
    }
}
public extension EipAddress{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: EipAddressCodingKeys.self)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
         try encoderContainer.encode(ipAddress, forKey: .ipAddress)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(instanceType, forKey: .instanceType)
         try encoderContainer.encode(instanceId, forKey: .instanceId)
         try encoderContainer.encode(bandwidth, forKey: .bandwidth)
         try encoderContainer.encode(allocationTime, forKey: .allocationTime)
    }
}
