/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  网卡接口规范
@objc(NetworkInterface)
public class NetworkInterface:NSObject,Codable{
    /// 以太网地址
    var macAddress:String?
    /// 弹性网卡ID
    var networkInterfaceId:String?
    /// 源和目标IP地址校验,取值为0或者1
    var sanityCheck:Int32?
    /// 子网ID
    var subnetId:String?
    /// 虚拟网络ID
    var vpcId:String?
    /// PrimaryIp
    var primaryIp:Ip?
    /// 网卡辅IP
    var secondaryIps:[Ip?]?
    /// 所属安全组列表
    var securityGroups:[SecurityGroup?]?



    public override init(){
            super.init()
    }

    enum NetworkInterfaceCodingKeys: String, CodingKey {
        case macAddress
        case networkInterfaceId
        case sanityCheck
        case subnetId
        case vpcId
        case primaryIp
        case secondaryIps
        case securityGroups
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NetworkInterfaceCodingKeys.self)
        if decoderContainer.contains(.macAddress)
        {
            self.macAddress = try decoderContainer.decode(String?.self, forKey: .macAddress)
        }
        if decoderContainer.contains(.networkInterfaceId)
        {
            self.networkInterfaceId = try decoderContainer.decode(String?.self, forKey: .networkInterfaceId)
        }
        if decoderContainer.contains(.sanityCheck)
        {
            self.sanityCheck = try decoderContainer.decode(Int32?.self, forKey: .sanityCheck)
        }
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
        if decoderContainer.contains(.primaryIp)
        {
            self.primaryIp = try decoderContainer.decode(Ip?.self, forKey: .primaryIp)
        }
        if decoderContainer.contains(.secondaryIps)
        {
            self.secondaryIps = try decoderContainer.decode([Ip?]?.self, forKey: .secondaryIps)
        }
        if decoderContainer.contains(.securityGroups)
        {
            self.securityGroups = try decoderContainer.decode([SecurityGroup?]?.self, forKey: .securityGroups)
        }
    }
}
public extension NetworkInterface{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NetworkInterfaceCodingKeys.self)
         try encoderContainer.encode(macAddress, forKey: .macAddress)
         try encoderContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)
         try encoderContainer.encode(sanityCheck, forKey: .sanityCheck)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(primaryIp, forKey: .primaryIp)
         try encoderContainer.encode(secondaryIps, forKey: .secondaryIps)
         try encoderContainer.encode(securityGroups, forKey: .securityGroups)
    }
}
