/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  账号授权
@objc(DeploymentAccountGrant)
public class DeploymentAccountGrant:NSObject,Codable{
    /// 实例ID
    var instId:String?
    /// 账号名称
    var accountName:String?
    /// 数据库名称
    var dbName:String?
    /// 权限
    var privilege:String?



    public override init(){
            super.init()
    }

    enum DeploymentAccountGrantCodingKeys: String, CodingKey {
        case instId
        case accountName
        case dbName
        case privilege
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeploymentAccountGrantCodingKeys.self)
        if decoderContainer.contains(.instId)
        {
            self.instId = try decoderContainer.decode(String?.self, forKey: .instId)
        }
        if decoderContainer.contains(.accountName)
        {
            self.accountName = try decoderContainer.decode(String?.self, forKey: .accountName)
        }
        if decoderContainer.contains(.dbName)
        {
            self.dbName = try decoderContainer.decode(String?.self, forKey: .dbName)
        }
        if decoderContainer.contains(.privilege)
        {
            self.privilege = try decoderContainer.decode(String?.self, forKey: .privilege)
        }
    }
}
public extension DeploymentAccountGrant{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeploymentAccountGrantCodingKeys.self)
         try encoderContainer.encode(instId, forKey: .instId)
         try encoderContainer.encode(accountName, forKey: .accountName)
         try encoderContainer.encode(dbName, forKey: .dbName)
         try encoderContainer.encode(privilege, forKey: .privilege)
    }
}
