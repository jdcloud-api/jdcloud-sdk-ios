/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  部署信息
@objc(DeploymentBaseInfo)
public class DeploymentBaseInfo:NSObject,Codable{
    /// 云ID
    var cloudId:String?
    /// 版本
    var version:String?
    /// 是否只读 0：否 1：是
    var readOnly:Int32?
    /// ID
    var id:String?
    /// 名称
    var name:String?
    /// 描述
    var descriptionValue:String?
    /// 用户ID
    var userId:String?
    /// 创建时间
    var createdTime:String?
    /// 更新时间
    var updatedTime:String?
    /// 最近一次操作
    var lastOperation:String?



    public override init(){
            super.init()
    }

    enum DeploymentBaseInfoCodingKeys: String, CodingKey {
        case cloudId
        case version
        case readOnly
        case id
        case name
        case descriptionValue = "description"
        case userId
        case createdTime
        case updatedTime
        case lastOperation
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeploymentBaseInfoCodingKeys.self)
        if decoderContainer.contains(.cloudId)
        {
            self.cloudId = try decoderContainer.decode(String?.self, forKey: .cloudId)
        }
        if decoderContainer.contains(.version)
        {
            self.version = try decoderContainer.decode(String?.self, forKey: .version)
        }
        if decoderContainer.contains(.readOnly)
        {
            self.readOnly = try decoderContainer.decode(Int32?.self, forKey: .readOnly)
        }
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.userId)
        {
            self.userId = try decoderContainer.decode(String?.self, forKey: .userId)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.updatedTime)
        {
            self.updatedTime = try decoderContainer.decode(String?.self, forKey: .updatedTime)
        }
        if decoderContainer.contains(.lastOperation)
        {
            self.lastOperation = try decoderContainer.decode(String?.self, forKey: .lastOperation)
        }
    }
}
public extension DeploymentBaseInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeploymentBaseInfoCodingKeys.self)
         try encoderContainer.encode(cloudId, forKey: .cloudId)
         try encoderContainer.encode(version, forKey: .version)
         try encoderContainer.encode(readOnly, forKey: .readOnly)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(userId, forKey: .userId)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(updatedTime, forKey: .updatedTime)
         try encoderContainer.encode(lastOperation, forKey: .lastOperation)
    }
}
