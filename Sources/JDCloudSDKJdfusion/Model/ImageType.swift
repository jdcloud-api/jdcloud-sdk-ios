/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  主机镜像描述
@objc(ImageType)
public class ImageType:NSObject,Codable{
    /// 镜像ID
    var id:String?
    /// 镜像描述
    var desc:String?
    /// 镜像来源
    var imageSource:String?
    /// 镜像名称
    var name:String?
    /// 镜像的操作系统类型
    var osType:String?
    /// 镜像的操作系统版本
    var osVersion:String?
    /// 镜像的操作系统发行版
    var platform:String?
    /// 镜像所属区域
    var region:String?
    /// 所属云提供商ID
    var cloudID:String?



    public override init(){
            super.init()
    }

    enum ImageTypeCodingKeys: String, CodingKey {
        case id
        case desc
        case imageSource
        case name
        case osType
        case osVersion
        case platform
        case region
        case cloudID
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImageTypeCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.desc)
        {
            self.desc = try decoderContainer.decode(String?.self, forKey: .desc)
        }
        if decoderContainer.contains(.imageSource)
        {
            self.imageSource = try decoderContainer.decode(String?.self, forKey: .imageSource)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.osType)
        {
            self.osType = try decoderContainer.decode(String?.self, forKey: .osType)
        }
        if decoderContainer.contains(.osVersion)
        {
            self.osVersion = try decoderContainer.decode(String?.self, forKey: .osVersion)
        }
        if decoderContainer.contains(.platform)
        {
            self.platform = try decoderContainer.decode(String?.self, forKey: .platform)
        }
        if decoderContainer.contains(.region)
        {
            self.region = try decoderContainer.decode(String?.self, forKey: .region)
        }
        if decoderContainer.contains(.cloudID)
        {
            self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        }
    }
}
public extension ImageType{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImageTypeCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(desc, forKey: .desc)
         try encoderContainer.encode(imageSource, forKey: .imageSource)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(osType, forKey: .osType)
         try encoderContainer.encode(osVersion, forKey: .osVersion)
         try encoderContainer.encode(platform, forKey: .platform)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
    }
}
