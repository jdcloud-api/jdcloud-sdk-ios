/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  OSS文件信息
@objc(OssFileInfo)
public class OssFileInfo:NSObject,Codable{
    /// 存储桶名称
    var bucketName:String?
    /// 文件存储Key值
    var key:String?
    /// 文件大小（字节）
    var size:Double?
    /// 上次修改时间
    var lastModifiedTime:String?
    /// 存储类型
    var storageClass:String?



    public override init(){
            super.init()
    }

    enum OssFileInfoCodingKeys: String, CodingKey {
        case bucketName
        case key
        case size
        case lastModifiedTime
        case storageClass
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: OssFileInfoCodingKeys.self)
        if decoderContainer.contains(.bucketName)
        {
            self.bucketName = try decoderContainer.decode(String?.self, forKey: .bucketName)
        }
        if decoderContainer.contains(.key)
        {
            self.key = try decoderContainer.decode(String?.self, forKey: .key)
        }
        if decoderContainer.contains(.size)
        {
            self.size = try decoderContainer.decode(Double?.self, forKey: .size)
        }
        if decoderContainer.contains(.lastModifiedTime)
        {
            self.lastModifiedTime = try decoderContainer.decode(String?.self, forKey: .lastModifiedTime)
        }
        if decoderContainer.contains(.storageClass)
        {
            self.storageClass = try decoderContainer.decode(String?.self, forKey: .storageClass)
        }
    }
}
public extension OssFileInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: OssFileInfoCodingKeys.self)
         try encoderContainer.encode(bucketName, forKey: .bucketName)
         try encoderContainer.encode(key, forKey: .key)
         try encoderContainer.encode(size, forKey: .size)
         try encoderContainer.encode(lastModifiedTime, forKey: .lastModifiedTime)
         try encoderContainer.encode(storageClass, forKey: .storageClass)
    }
}
