/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  taskAddressInfo
@objc(TaskAddressInfo)
public class TaskAddressInfo:NSObject,Codable{
    /// 任务类型:源地址中支持 s3file, aliyunfile，目标现在只支持s3file
    var storageType:String?
    /// 源地址的accesskey
    var accessKey:String?
    /// 源地址的securitykey
    var secretKey:String?
    /// 源地址的Endpoint
    var endpoint:String?
    /// 源地址的Bucket
    var bucket:String?
    /// 源地址的Prefix，不能以/开头
    var prefix:String?



    public override init(){
            super.init()
    }

    enum TaskAddressInfoCodingKeys: String, CodingKey {
        case storageType
        case accessKey
        case secretKey
        case endpoint
        case bucket
        case prefix
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TaskAddressInfoCodingKeys.self)
        if decoderContainer.contains(.storageType)
        {
            self.storageType = try decoderContainer.decode(String?.self, forKey: .storageType)
        }
        if decoderContainer.contains(.accessKey)
        {
            self.accessKey = try decoderContainer.decode(String?.self, forKey: .accessKey)
        }
        if decoderContainer.contains(.secretKey)
        {
            self.secretKey = try decoderContainer.decode(String?.self, forKey: .secretKey)
        }
        if decoderContainer.contains(.endpoint)
        {
            self.endpoint = try decoderContainer.decode(String?.self, forKey: .endpoint)
        }
        if decoderContainer.contains(.bucket)
        {
            self.bucket = try decoderContainer.decode(String?.self, forKey: .bucket)
        }
        if decoderContainer.contains(.prefix)
        {
            self.prefix = try decoderContainer.decode(String?.self, forKey: .prefix)
        }
    }
}
public extension TaskAddressInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TaskAddressInfoCodingKeys.self)
         try encoderContainer.encode(storageType, forKey: .storageType)
         try encoderContainer.encode(accessKey, forKey: .accessKey)
         try encoderContainer.encode(secretKey, forKey: .secretKey)
         try encoderContainer.encode(endpoint, forKey: .endpoint)
         try encoderContainer.encode(bucket, forKey: .bucket)
         try encoderContainer.encode(prefix, forKey: .prefix)
    }
}
