/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createSlb
@objc(CreateSlb)
public class CreateSlb:NSObject,Codable{
    /// 所属云ID
    var cloudID:String?
    /// 负载均衡实例ID。
    var id:String?
    /// 负载均衡实例的名称。
    var name:String?
    /// 负载均衡实例状态
    var status:String?
    /// 负载均衡实例的服务地址。
    var ipAddress:String?
    /// 负载均衡实例的网络类型。
    var addressType:String?
    /// 私网负载均衡实例的交换机ID。
    /// Required:true
    var subnetId:String
    /// 私网负载均衡实例的专有网络ID。
    var vpc:String?
    /// 私网负载均衡实例的网络类型
    var networkType:String?
    /// 实例的主可用区ID。
    var masterAz:String?
    /// 实例的备可用区ID。
    var slaveAz:String?
    /// 创建时间
    var createdTime:String?
    /// 否  负载均衡实例的规格
    var loadBalancerSpec:String?



    public  init(subnetId:String){
             self.subnetId = subnetId
    }

    enum CreateSlbCodingKeys: String, CodingKey {
        case cloudID
        case id
        case name
        case status
        case ipAddress
        case addressType
        case subnetId
        case vpc
        case networkType
        case masterAz
        case slaveAz
        case createdTime
        case loadBalancerSpec
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSlbCodingKeys.self)
        self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        self.id = try decoderContainer.decode(String?.self, forKey: .id)
        self.name = try decoderContainer.decode(String?.self, forKey: .name)
        self.status = try decoderContainer.decode(String?.self, forKey: .status)
        self.ipAddress = try decoderContainer.decode(String?.self, forKey: .ipAddress)
        self.addressType = try decoderContainer.decode(String?.self, forKey: .addressType)
        self.subnetId = try decoderContainer.decode(String.self, forKey: .subnetId)
        self.vpc = try decoderContainer.decode(String?.self, forKey: .vpc)
        self.networkType = try decoderContainer.decode(String?.self, forKey: .networkType)
        self.masterAz = try decoderContainer.decode(String?.self, forKey: .masterAz)
        self.slaveAz = try decoderContainer.decode(String?.self, forKey: .slaveAz)
        self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        self.loadBalancerSpec = try decoderContainer.decode(String?.self, forKey: .loadBalancerSpec)
    }
}
public extension CreateSlb{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSlbCodingKeys.self)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(ipAddress, forKey: .ipAddress)
         try encoderContainer.encode(addressType, forKey: .addressType)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(vpc, forKey: .vpc)
         try encoderContainer.encode(networkType, forKey: .networkType)
         try encoderContainer.encode(masterAz, forKey: .masterAz)
         try encoderContainer.encode(slaveAz, forKey: .slaveAz)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(loadBalancerSpec, forKey: .loadBalancerSpec)
    }
}
