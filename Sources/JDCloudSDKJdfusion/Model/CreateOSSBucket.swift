/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  createOSSBucket
@objc(CreateOSSBucket)
public class CreateOSSBucket:NSObject,Codable{
    /// 存储桶名称
    /// Required:true
    var name:String
    /// 创建时间
    var creationDate:String?
    /// 云信息
    var cloudID:String?
    /// 访问控制,private\public-read\public-read-write
    var acl:String?



    public  init(name:String){
             self.name = name
    }

    enum CreateOSSBucketCodingKeys: String, CodingKey {
        case name
        case creationDate
        case cloudID
        case acl
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateOSSBucketCodingKeys.self)
        self.name = try decoderContainer.decode(String.self, forKey: .name)
        if decoderContainer.contains(.creationDate)
        {
            self.creationDate = try decoderContainer.decode(String?.self, forKey: .creationDate)
        }
        if decoderContainer.contains(.cloudID)
        {
            self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        }
        if decoderContainer.contains(.acl)
        {
            self.acl = try decoderContainer.decode(String?.self, forKey: .acl)
        }
    }
}
public extension CreateOSSBucket{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateOSSBucketCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(creationDate, forKey: .creationDate)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
         try encoderContainer.encode(acl, forKey: .acl)
    }
}
