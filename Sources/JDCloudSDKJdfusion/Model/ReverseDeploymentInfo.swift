/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  reverseDeploymentInfo
@objc(ReverseDeploymentInfo)
public class ReverseDeploymentInfo:NSObject,Codable{
    /// 模板名称
    var name:String?
    /// 描述
    var descriptionValue:String?
    /// 版本
    var version:String?
    /// 是否只读 0：否 1：是
    var readOnly:Int32?
    /// Resources
    var resources:ReverseDeploymentResourcesInfo?



    public override init(){
            super.init()
    }

    enum ReverseDeploymentInfoCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case version
        case readOnly
        case resources
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReverseDeploymentInfoCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.version)
        {
            self.version = try decoderContainer.decode(String?.self, forKey: .version)
        }
        if decoderContainer.contains(.readOnly)
        {
            self.readOnly = try decoderContainer.decode(Int32?.self, forKey: .readOnly)
        }
        if decoderContainer.contains(.resources)
        {
            self.resources = try decoderContainer.decode(ReverseDeploymentResourcesInfo?.self, forKey: .resources)
        }
    }
}
public extension ReverseDeploymentInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReverseDeploymentInfoCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(version, forKey: .version)
         try encoderContainer.encode(readOnly, forKey: .readOnly)
         try encoderContainer.encode(resources, forKey: .resources)
    }
}
