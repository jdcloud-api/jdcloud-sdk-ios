/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  userNotFoundException
@objc(UserNotFoundException)
public class UserNotFoundException:NSObject,Codable{
    /// Message
    /// Required:true
    var message:String
    /// Code
    /// Required:true
    var code:Int32
    /// Payload
    /// Required:true
    var payload:Payload



    public  init(message:String,code:Int32,payload:Payload){
             self.message = message
             self.code = code
             self.payload = payload
    }

    enum UserNotFoundExceptionCodingKeys: String, CodingKey {
        case message
        case code
        case payload
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UserNotFoundExceptionCodingKeys.self)
        self.message = try decoderContainer.decode(String.self, forKey: .message)
        self.code = try decoderContainer.decode(Int32.self, forKey: .code)
        self.payload = try decoderContainer.decode(Payload.self, forKey: .payload)
    }
}
public extension UserNotFoundException{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UserNotFoundExceptionCodingKeys.self)
         try encoderContainer.encode(message, forKey: .message)
         try encoderContainer.encode(code, forKey: .code)
         try encoderContainer.encode(payload, forKey: .payload)
    }
}
