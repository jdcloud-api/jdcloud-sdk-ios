/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  秘钥对信息
@objc(KeypairInfo)
public class KeypairInfo:NSObject,Codable{
    /// 密钥名称
    var name:String?
    /// 密钥指纹
    var keyFingerprint:String?
    /// 云注册信息ID
    var cloudID:String?



    public override init(){
            super.init()
    }

    enum KeypairInfoCodingKeys: String, CodingKey {
        case name
        case keyFingerprint
        case cloudID
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: KeypairInfoCodingKeys.self)
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.keyFingerprint)
        {
            self.keyFingerprint = try decoderContainer.decode(String?.self, forKey: .keyFingerprint)
        }
        if decoderContainer.contains(.cloudID)
        {
            self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        }
    }
}
public extension KeypairInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: KeypairInfoCodingKeys.self)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(keyFingerprint, forKey: .keyFingerprint)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
    }
}
