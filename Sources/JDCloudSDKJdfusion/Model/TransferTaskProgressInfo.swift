/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  创建任务信息
@objc(TransferTaskProgressInfo)
public class TransferTaskProgressInfo:NSObject,Codable{
    /// 任务ID
    var id:String?
    /// 运行状态
    var status:String?
    /// 启动时间
    var timeStart:String?
    /// 迁移成功文件个数
    var succeedFileCount:String?
    /// 迁移失败文件个数
    var failedFileCount:String?



    public override init(){
            super.init()
    }

    enum TransferTaskProgressInfoCodingKeys: String, CodingKey {
        case id
        case status
        case timeStart
        case succeedFileCount
        case failedFileCount
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TransferTaskProgressInfoCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.timeStart)
        {
            self.timeStart = try decoderContainer.decode(String?.self, forKey: .timeStart)
        }
        if decoderContainer.contains(.succeedFileCount)
        {
            self.succeedFileCount = try decoderContainer.decode(String?.self, forKey: .succeedFileCount)
        }
        if decoderContainer.contains(.failedFileCount)
        {
            self.failedFileCount = try decoderContainer.decode(String?.self, forKey: .failedFileCount)
        }
    }
}
public extension TransferTaskProgressInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TransferTaskProgressInfoCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(timeStart, forKey: .timeStart)
         try encoderContainer.encode(succeedFileCount, forKey: .succeedFileCount)
         try encoderContainer.encode(failedFileCount, forKey: .failedFileCount)
    }
}
