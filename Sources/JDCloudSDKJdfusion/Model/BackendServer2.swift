/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  backendServer2
@objc(BackendServer2)
public class BackendServer2:NSObject,Codable{
    /// 后端服务器名（ECS实例）ID。
    var serverId:String?
    /// 后端服务器的权重。
    var weight:Int32?
    /// 后端服务器类型。
    var type:String?



    public override init(){
            super.init()
    }

    enum BackendServer2CodingKeys: String, CodingKey {
        case serverId
        case weight
        case type
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: BackendServer2CodingKeys.self)
        if decoderContainer.contains(.serverId)
        {
            self.serverId = try decoderContainer.decode(String?.self, forKey: .serverId)
        }
        if decoderContainer.contains(.weight)
        {
            self.weight = try decoderContainer.decode(Int32?.self, forKey: .weight)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(String?.self, forKey: .type)
        }
    }
}
public extension BackendServer2{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: BackendServer2CodingKeys.self)
         try encoderContainer.encode(serverId, forKey: .serverId)
         try encoderContainer.encode(weight, forKey: .weight)
         try encoderContainer.encode(type, forKey: .type)
    }
}
