/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  迁移通道
@objc(CloudInfo)
public class CloudInfo:NSObject,Codable{
    /// 云ID
    var cloudId:String?
    /// 数据库ID
    var rdsId:String?
    /// 数据库账号
    var username:String?
    /// 数据库密码
    var password:String?



    public override init(){
            super.init()
    }

    enum CloudInfoCodingKeys: String, CodingKey {
        case cloudId
        case rdsId
        case username
        case password
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CloudInfoCodingKeys.self)
        if decoderContainer.contains(.cloudId)
        {
            self.cloudId = try decoderContainer.decode(String?.self, forKey: .cloudId)
        }
        if decoderContainer.contains(.rdsId)
        {
            self.rdsId = try decoderContainer.decode(String?.self, forKey: .rdsId)
        }
        if decoderContainer.contains(.username)
        {
            self.username = try decoderContainer.decode(String?.self, forKey: .username)
        }
        if decoderContainer.contains(.password)
        {
            self.password = try decoderContainer.decode(String?.self, forKey: .password)
        }
    }
}
public extension CloudInfo{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CloudInfoCodingKeys.self)
         try encoderContainer.encode(cloudId, forKey: .cloudId)
         try encoderContainer.encode(rdsId, forKey: .rdsId)
         try encoderContainer.encode(username, forKey: .username)
         try encoderContainer.encode(password, forKey: .password)
    }
}
