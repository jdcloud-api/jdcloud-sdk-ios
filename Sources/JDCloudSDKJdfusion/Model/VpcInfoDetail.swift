/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  vpcInfoDetail
@objc(VpcInfoDetail)
public class VpcInfoDetail:NSObject,Codable{
    /// Vpc的Id
    var id:String?
    /// 私有网络名称
    var name:String?
    /// 地址范围
    var addressPrefix:String?
    /// VPC 描述
    var descriptionValue:String?
    /// 创建时间
    var createdTime:String?
    /// 所属云提供商ID
    var cloudID:String?
    /// 私有网络包含的子网列表
    var subnets:SubnetInfo?
    /// 路由表ID集合
    var routeTableIds:[String?]?



    public override init(){
            super.init()
    }

    enum VpcInfoDetailCodingKeys: String, CodingKey {
        case id
        case name
        case addressPrefix
        case descriptionValue = "description"
        case createdTime
        case cloudID
        case subnets
        case routeTableIds
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: VpcInfoDetailCodingKeys.self)
        self.id = try decoderContainer.decode(String?.self, forKey: .id)
        self.name = try decoderContainer.decode(String?.self, forKey: .name)
        self.addressPrefix = try decoderContainer.decode(String?.self, forKey: .addressPrefix)
        self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        self.cloudID = try decoderContainer.decode(String?.self, forKey: .cloudID)
        self.subnets = try decoderContainer.decode(SubnetInfo?.self, forKey: .subnets)
        self.routeTableIds = try decoderContainer.decode([String?]?.self, forKey: .routeTableIds)
    }
}
public extension VpcInfoDetail{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: VpcInfoDetailCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(addressPrefix, forKey: .addressPrefix)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(cloudID, forKey: .cloudID)
         try encoderContainer.encode(subnets, forKey: .subnets)
         try encoderContainer.encode(routeTableIds, forKey: .routeTableIds)
    }
}
