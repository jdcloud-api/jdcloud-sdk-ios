/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  instanceTemplate
@objc(InstanceTemplate)
public class InstanceTemplate:NSObject,Codable{
    /// 启动模板ID
    var id:String?
    /// 启动模板名称
    var name:String?
    /// 启动模板描述
    var descriptionValue:String?
    /// 启动模板的数据
    var instanceTemplateData:InstanceTemplateData?
    /// 关联的高可用组(ag)信息
    var ags:[Ag?]?
    /// 创建时间
    var createdTime:String?



    public override init(){
            super.init()
    }

    enum InstanceTemplateCodingKeys: String, CodingKey {
        case id
        case name
        case descriptionValue = "description"
        case instanceTemplateData
        case ags
        case createdTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InstanceTemplateCodingKeys.self)
        if decoderContainer.contains(.id)
        {
            self.id = try decoderContainer.decode(String?.self, forKey: .id)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
        if decoderContainer.contains(.instanceTemplateData)
        {
            self.instanceTemplateData = try decoderContainer.decode(InstanceTemplateData?.self, forKey: .instanceTemplateData)
        }
        if decoderContainer.contains(.ags)
        {
            self.ags = try decoderContainer.decode([Ag?]?.self, forKey: .ags)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
    }
}
public extension InstanceTemplate{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InstanceTemplateCodingKeys.self)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
         try encoderContainer.encode(instanceTemplateData, forKey: .instanceTemplateData)
         try encoderContainer.encode(ags, forKey: .ags)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
    }
}
