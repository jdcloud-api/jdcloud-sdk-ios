/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  instanceType
@objc(InstanceType)
public class InstanceType:NSObject,Codable{
    /// 实例规格类型
    var family:String?
    /// 实例规格，比如g.b1.2xlarge
    var instanceTypeValue:String?
    /// cpu个数
    var cpu:Int?
    /// 内存大小
    var memoryMB:Int?
    /// 支持弹性网卡的数量
    var nicLimit:Int?
    /// 描述
    var desc:String?
    /// 规格状态
    var state:[InstanceTypeState?]?
    /// Gpu配置
    var gpu:Gpu?
    /// 本地缓存盘配置，目前只有Gpu规格上才有
    var localDisks:[LocalDisk?]?



    public override init(){
            super.init()
    }

    enum InstanceTypeCodingKeys: String, CodingKey {
        case family
        case instanceTypeValue = "instanceType"
        case cpu
        case memoryMB
        case nicLimit
        case desc
        case state
        case gpu
        case localDisks
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InstanceTypeCodingKeys.self)
        if decoderContainer.contains(.family)
        {
            self.family = try decoderContainer.decode(String?.self, forKey: .family)
        }
        if decoderContainer.contains(.instanceTypeValue)
        {
            self.instanceTypeValue = try decoderContainer.decode(String?.self, forKey: .instanceTypeValue)
        }
        if decoderContainer.contains(.cpu)
        {
            self.cpu = try decoderContainer.decode(Int?.self, forKey: .cpu)
        }
        if decoderContainer.contains(.memoryMB)
        {
            self.memoryMB = try decoderContainer.decode(Int?.self, forKey: .memoryMB)
        }
        if decoderContainer.contains(.nicLimit)
        {
            self.nicLimit = try decoderContainer.decode(Int?.self, forKey: .nicLimit)
        }
        if decoderContainer.contains(.desc)
        {
            self.desc = try decoderContainer.decode(String?.self, forKey: .desc)
        }
        if decoderContainer.contains(.state)
        {
            self.state = try decoderContainer.decode([InstanceTypeState?]?.self, forKey: .state)
        }
        if decoderContainer.contains(.gpu)
        {
            self.gpu = try decoderContainer.decode(Gpu?.self, forKey: .gpu)
        }
        if decoderContainer.contains(.localDisks)
        {
            self.localDisks = try decoderContainer.decode([LocalDisk?]?.self, forKey: .localDisks)
        }
    }
}
public extension InstanceType{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InstanceTypeCodingKeys.self)
         try encoderContainer.encode(family, forKey: .family)
         try encoderContainer.encode(instanceTypeValue, forKey: .instanceTypeValue)
         try encoderContainer.encode(cpu, forKey: .cpu)
         try encoderContainer.encode(memoryMB, forKey: .memoryMB)
         try encoderContainer.encode(nicLimit, forKey: .nicLimit)
         try encoderContainer.encode(desc, forKey: .desc)
         try encoderContainer.encode(state, forKey: .state)
         try encoderContainer.encode(gpu, forKey: .gpu)
         try encoderContainer.encode(localDisks, forKey: .localDisks)
    }
}
