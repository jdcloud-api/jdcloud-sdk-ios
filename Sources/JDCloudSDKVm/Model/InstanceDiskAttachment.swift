/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKDisk

///  instanceDiskAttachment
@objc(InstanceDiskAttachment)
public class InstanceDiskAttachment:NSObject,Codable{
    /// 磁盘分类，取值为本地盘(local)或者数据盘(cloud)。
      /// 系统盘支持本地盘(local)或者云硬盘(cloud)。系统盘选择local类型，必须使用localDisk类型的镜像；同理系统盘选择cloud类型，必须使用cloudDisk类型的镜像。
      /// 数据盘仅支持云硬盘(cloud)。
      /// 
    var diskCategory:String?
    /// 随云主机一起删除，删除主机时自动删除此磁盘，默认为true，本地盘(local)不能更改此值。
      /// 如果云主机中的数据盘(cloud)是包年包月计费方式，此参数不生效。
      /// 如果云主机中的数据盘(cloud)是共享型数据盘，此参数不生效。
      /// 
    var autoDelete:Bool?
    /// 本地磁盘配置
    var localDisk:LocalDisk?
    /// 云硬盘配置
    var cloudDisk:Disk?
    /// 数据盘逻辑挂载点，取值范围：vda,vdb,vdc,vdd,vde,vdf,vdg,vdh,vdi,vmj,vdk,vdl,vdm
    var deviceName:String?
    /// 数据盘挂载状态，取值范围：attaching,detaching,attached,detached,error_attach,error_detach
    var status:String?



    public override init(){
            super.init()
    }

    enum InstanceDiskAttachmentCodingKeys: String, CodingKey {
        case diskCategory
        case autoDelete
        case localDisk
        case cloudDisk
        case deviceName
        case status
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: InstanceDiskAttachmentCodingKeys.self)
        if decoderContainer.contains(.diskCategory)
        {
            self.diskCategory = try decoderContainer.decode(String?.self, forKey: .diskCategory)
        }
        if decoderContainer.contains(.autoDelete)
        {
            self.autoDelete = try decoderContainer.decode(Bool?.self, forKey: .autoDelete)
        }
        if decoderContainer.contains(.localDisk)
        {
            self.localDisk = try decoderContainer.decode(LocalDisk?.self, forKey: .localDisk)
        }
        if decoderContainer.contains(.cloudDisk)
        {
            self.cloudDisk = try decoderContainer.decode(Disk?.self, forKey: .cloudDisk)
        }
        if decoderContainer.contains(.deviceName)
        {
            self.deviceName = try decoderContainer.decode(String?.self, forKey: .deviceName)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
    }
}
public extension InstanceDiskAttachment{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: InstanceDiskAttachmentCodingKeys.self)
         try encoderContainer.encode(diskCategory, forKey: .diskCategory)
         try encoderContainer.encode(autoDelete, forKey: .autoDelete)
         try encoderContainer.encode(localDisk, forKey: .localDisk)
         try encoderContainer.encode(cloudDisk, forKey: .cloudDisk)
         try encoderContainer.encode(deviceName, forKey: .deviceName)
         try encoderContainer.encode(status, forKey: .status)
    }
}
