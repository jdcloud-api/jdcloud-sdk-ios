/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  taskInfo
@objc(TaskInfo)
public class TaskInfo:NSObject,Codable{
    /// 任务id
    var taskId:Int?
    /// 任务操作类型
    var action:String?
    /// 任务状态，pending,running,failed,finished
    var taskStatus:String?
    /// 任务进度，0-100
    var progress:Int?
    /// 额外信息
    var message:String?
    /// 任务创建时间
    var createdTime:String?
    /// 任务完成时间
    var finishedTime:String?



    public override init(){
            super.init()
    }

    enum TaskInfoCodingKeys: String, CodingKey {
        case taskId
        case action
        case taskStatus
        case progress
        case message
        case createdTime
        case finishedTime
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: TaskInfoCodingKeys.self)
        if decoderContainer.contains(.taskId)
        {
            self.taskId = try decoderContainer.decode(Int?.self, forKey: .taskId)
        }
        if decoderContainer.contains(.action)
        {
            self.action = try decoderContainer.decode(String?.self, forKey: .action)
        }
        if decoderContainer.contains(.taskStatus)
        {
            self.taskStatus = try decoderContainer.decode(String?.self, forKey: .taskStatus)
        }
        if decoderContainer.contains(.progress)
        {
            self.progress = try decoderContainer.decode(Int?.self, forKey: .progress)
        }
        if decoderContainer.contains(.message)
        {
            self.message = try decoderContainer.decode(String?.self, forKey: .message)
        }
        if decoderContainer.contains(.createdTime)
        {
            self.createdTime = try decoderContainer.decode(String?.self, forKey: .createdTime)
        }
        if decoderContainer.contains(.finishedTime)
        {
            self.finishedTime = try decoderContainer.decode(String?.self, forKey: .finishedTime)
        }
    }
}
public extension TaskInfo{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: TaskInfoCodingKeys.self)
         try encoderContainer.encode(taskId, forKey: .taskId)
         try encoderContainer.encode(action, forKey: .action)
         try encoderContainer.encode(taskStatus, forKey: .taskStatus)
         try encoderContainer.encode(progress, forKey: .progress)
         try encoderContainer.encode(message, forKey: .message)
         try encoderContainer.encode(createdTime, forKey: .createdTime)
         try encoderContainer.encode(finishedTime, forKey: .finishedTime)
    }
}
