/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云主机
   与主机操作相关的接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 批量查询云主机内网IP地址，查询的是主网卡内网主IP地址。
@objc(DescribeInstancePrivateIpAddressResult)
public class DescribeInstancePrivateIpAddressResult:NSObject,JdCloudResult
{
    /// InstancePrivateIpAddress
    var instancePrivateIpAddress:[InstancePrivateIpAddress?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeInstancePrivateIpAddressResultCodingKeys: String, CodingKey {
        case instancePrivateIpAddress
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancePrivateIpAddressResultCodingKeys.self)
        if decoderContainer.contains(.instancePrivateIpAddress)
        {
            self.instancePrivateIpAddress = try decoderContainer.decode([InstancePrivateIpAddress?]?.self, forKey: .instancePrivateIpAddress)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInstancePrivateIpAddressResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancePrivateIpAddressResultCodingKeys.self)
        try encoderContainer.encode(instancePrivateIpAddress, forKey: .instancePrivateIpAddress)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
