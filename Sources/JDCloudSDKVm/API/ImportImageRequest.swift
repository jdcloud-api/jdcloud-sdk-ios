/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   镜像
   关于主机镜像操作的相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  导入镜像，将外部镜像导入到京东云中
      ///       /// 
@objc(ImportImageRequest)
public class ImportImageRequest:JdCloudRequest
{
    /// 系统架构，可选值：x86_64,i386
    var architecture:String

    /// 操作系统，可选值：windows,linux
    var osType:String

    /// 平台名称，可选值：CentOS,Ubuntu,Windows Server,Other Linux,Other Windows
    var platform:String

    /// 磁盘格式，可选值：qcow2,vhd,vmdk,raw
    var diskFormat:String

    /// 以此镜像需要制作的系统盘的默认大小，单位GB。最小值40，最大值500，要求值是10的整数倍
    var systemDiskSizeGB:Int

    /// 要导入镜像的对象存储外链地址
    var imageUrl:String

    /// 镜像的操作系统版本
    var osVersion:String?

    /// 导入镜像的自定义名称
    var imageName:String

    /// 导入镜像的描述信息
    var descriptionValue:String?

    /// 是否强制导入。强制导入则忽略镜像的合规性检测
    var forceImport:Bool?

    /// 用户导入镜像的幂等性保证。每次创建请传入不同的值，如果传值与某次的clientToken相同，则返还该次的请求结果
    var clientToken:String?


    public init(regionId: String,architecture:String,osType:String,platform:String,diskFormat:String,systemDiskSizeGB:Int,imageUrl:String,imageName:String){
        self.architecture = architecture
        self.osType = osType
        self.platform = platform
        self.diskFormat = diskFormat
        self.systemDiskSizeGB = systemDiskSizeGB
        self.imageUrl = imageUrl
        self.imageName = imageName
        super.init(regionId: regionId)
    }


    enum ImportImageRequestRequestCodingKeys: String, CodingKey {
        case architecture
        case osType
        case platform
        case diskFormat
        case systemDiskSizeGB
        case imageUrl
        case osVersion
        case imageName
        case descriptionValue = "description"
        case forceImport
        case clientToken
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportImageRequestRequestCodingKeys.self)
        try encoderContainer.encode(architecture, forKey: .architecture)
        try encoderContainer.encode(osType, forKey: .osType)
        try encoderContainer.encode(platform, forKey: .platform)
        try encoderContainer.encode(diskFormat, forKey: .diskFormat)
        try encoderContainer.encode(systemDiskSizeGB, forKey: .systemDiskSizeGB)
        try encoderContainer.encode(imageUrl, forKey: .imageUrl)
        try encoderContainer.encode(osVersion, forKey: .osVersion)
        try encoderContainer.encode(imageName, forKey: .imageName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(forceImport, forKey: .forceImport)
        try encoderContainer.encode(clientToken, forKey: .clientToken)

    }
}
