/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   镜像
   关于主机镜像操作的相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  查询镜像导入任务详情
      ///       /// 
@objc(ImageTasksRequest)
public class ImageTasksRequest:JdCloudRequest
{
    /// 任务种类。可选值：ImportImage
    var taskAction:String

    /// 任务id
    var taskIds:[Int?]?

    /// 任务状态。可选值：pending,running,failed,finished
    var taskStatus:String?

    /// 任务开始时间
    var startTime:String?

    /// 任务结束时间
    var endTime:String?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?


    public init(regionId: String,taskAction:String){
        self.taskAction = taskAction
        super.init(regionId: regionId)
    }


    enum ImageTasksRequestRequestCodingKeys: String, CodingKey {
        case taskAction
        case taskIds
        case taskStatus
        case startTime
        case endTime
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImageTasksRequestRequestCodingKeys.self)
        try encoderContainer.encode(taskAction, forKey: .taskAction)
        try encoderContainer.encode(taskIds, forKey: .taskIds)
        try encoderContainer.encode(taskStatus, forKey: .taskStatus)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}
