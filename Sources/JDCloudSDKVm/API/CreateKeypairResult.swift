/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   SSH密钥对
   关于SSH密钥对的相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 创建ssh密钥对。公钥部分存储在京东云，并返回未加密的 PEM 编码的 PKCS#8 格式私钥，您只有一次机会保存您的私钥。请妥善保管。&lt;br&gt;
      ///       /// 若传入已存在的密钥名称，会返回错误。
      ///       /// 
@objc(CreateKeypairResult)
public class CreateKeypairResult:NSObject,JdCloudResult
{
    /// 密钥对名称
    var keyName:String?

    /// 密钥对的私钥部分，PEM PKCS#8 格式。
    var privateKey:String?

    /// 密钥对的指纹，根据 RFC4716 定义的公钥指纹格式，采用 MD5 信息摘要算法。
    var keyFingerprint:String?



    public override init(){
        super.init()
    }

    enum CreateKeypairResultCodingKeys: String, CodingKey {
        case keyName
        case privateKey
        case keyFingerprint
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateKeypairResultCodingKeys.self)
        if decoderContainer.contains(.keyName)
        {
            self.keyName = try decoderContainer.decode(String?.self, forKey: .keyName)
        }
        if decoderContainer.contains(.privateKey)
        {
            self.privateKey = try decoderContainer.decode(String?.self, forKey: .privateKey)
        }
        if decoderContainer.contains(.keyFingerprint)
        {
            self.keyFingerprint = try decoderContainer.decode(String?.self, forKey: .keyFingerprint)
        }
    }
}
public extension CreateKeypairResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeypairResultCodingKeys.self)
        try encoderContainer.encode(keyName, forKey: .keyName)
        try encoderContainer.encode(privateKey, forKey: .privateKey)
        try encoderContainer.encode(keyFingerprint, forKey: .keyFingerprint)
    }
}
