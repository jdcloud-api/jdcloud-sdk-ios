/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   镜像
   关于主机镜像操作的相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon

public class UpdateInstanceTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdateInstanceTemplateResult?;

    enum UpdateInstanceTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdateInstanceTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdateInstanceTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdateInstanceTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateInstanceTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询启动模板详情
      ///       /// 
public class DescribeInstanceTemplateRequest:JdCloudRequest
{
    /// 启动模板ID
    var instanceTemplateId:String


    public init(regionId: String,instanceTemplateId:String){
        self.instanceTemplateId = instanceTemplateId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceTemplateRequestRequestCodingKeys: String, CodingKey {
        case instanceTemplateId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceTemplateId, forKey: .instanceTemplateId)

    }
}

/// 查询启动模板详情
      ///       ///  
public class DescribeInstanceTemplateResult:NSObject,JdCloudResult
{
    /// InstanceTemplate
    var instanceTemplate:InstanceTemplate?



    public override init(){
        super.init()
    }

    enum DescribeInstanceTemplateResultCodingKeys: String, CodingKey {
        case instanceTemplate
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceTemplateResultCodingKeys.self)
        if decoderContainer.contains(.instanceTemplate)
        {
            self.instanceTemplate = try decoderContainer.decode(InstanceTemplate?.self, forKey: .instanceTemplate)
        }
    }
}
public extension DescribeInstanceTemplateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTemplateResultCodingKeys.self)
        try encoderContainer.encode(instanceTemplate, forKey: .instanceTemplate)
    }
}

///  查询启动模板列表
      ///       /// 
public class DescribeInstanceTemplatesRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// name - 启动模板名称，模糊匹配，支持多个
      /// instanceTemplateId - 启动模板ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeInstanceTemplatesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTemplatesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class DeleteInstanceTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteInstanceTemplateResult?;

    enum DeleteInstanceTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteInstanceTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteInstanceTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteInstanceTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteInstanceTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  校验启动模板的有效性
      ///       /// 
public class VerifyInstanceTemplateRequest:JdCloudRequest
{
    /// 启动模板ID
    var instanceTemplateId:String


    public init(regionId: String,instanceTemplateId:String){
        self.instanceTemplateId = instanceTemplateId
        super.init(regionId: regionId)
    }


    enum VerifyInstanceTemplateRequestRequestCodingKeys: String, CodingKey {
        case instanceTemplateId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: VerifyInstanceTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceTemplateId, forKey: .instanceTemplateId)

    }
}


///  创建一个指定参数的启动模板，启动模板中包含创建云主机时的大部分配置参数，避免每次创建云主机时的重复性工作。&lt;br&gt;
      ///       /// 如果是使用启动模板创建云主机，如果指定了某些参数与模板中的参数相冲突，那么新指定的参数会替换模板中的参数。&lt;br&gt;
      ///       /// 如果是使用启动模板创建云主机，如果指定了镜像ID与模板中的镜像ID不一致，那么模板中的dataDisks参数会失效。&lt;br&gt;
      ///       /// 如果使用高可用组(Ag)创建云主机，那么Ag所关联的模板中的参数都不可以被调整，只能以模板为准。
      ///       /// 
public class CreateInstanceTemplateRequest:JdCloudRequest
{
    /// 启动模板的数据
    var instanceTemplateData:InstanceTemplateSpec

    /// 启动模板的名称，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var name:String

    /// 启动模板的描述，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var descriptionValue:String?


    public init(regionId: String,instanceTemplateData:InstanceTemplateSpec,name:String){
        self.instanceTemplateData = instanceTemplateData
        self.name = name
        super.init(regionId: regionId)
    }


    enum CreateInstanceTemplateRequestRequestCodingKeys: String, CodingKey {
        case instanceTemplateData
        case name
        case descriptionValue = "description"
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceTemplateData, forKey: .instanceTemplateData)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)

    }
}

/// 创建一个指定参数的启动模板，启动模板中包含创建云主机时的大部分配置参数，避免每次创建云主机时的重复性工作。&lt;br&gt;
      ///       /// 如果是使用启动模板创建云主机，如果指定了某些参数与模板中的参数相冲突，那么新指定的参数会替换模板中的参数。&lt;br&gt;
      ///       /// 如果是使用启动模板创建云主机，如果指定了镜像ID与模板中的镜像ID不一致，那么模板中的dataDisks参数会失效。&lt;br&gt;
      ///       /// 如果使用高可用组(Ag)创建云主机，那么Ag所关联的模板中的参数都不可以被调整，只能以模板为准。
      ///       ///  
public class CreateInstanceTemplateResult:NSObject,JdCloudResult
{
    /// InstanceTemplateId
    var instanceTemplateId:String?



    public override init(){
        super.init()
    }

    enum CreateInstanceTemplateResultCodingKeys: String, CodingKey {
        case instanceTemplateId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceTemplateResultCodingKeys.self)
        if decoderContainer.contains(.instanceTemplateId)
        {
            self.instanceTemplateId = try decoderContainer.decode(String?.self, forKey: .instanceTemplateId)
        }
    }
}
public extension CreateInstanceTemplateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceTemplateResultCodingKeys.self)
        try encoderContainer.encode(instanceTemplateId, forKey: .instanceTemplateId)
    }
}

///  修改一个启动模板的信息，包括名称、描述
      ///       /// 
public class UpdateInstanceTemplateRequest:JdCloudRequest
{
    /// 模板描述，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var descriptionValue:String?

    /// 模板名称，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var name:String?

    /// 启动模板ID
    var instanceTemplateId:String


    public init(regionId: String,instanceTemplateId:String){
        self.instanceTemplateId = instanceTemplateId
        super.init(regionId: regionId)
    }


    enum UpdateInstanceTemplateRequestRequestCodingKeys: String, CodingKey {
        case descriptionValue = "description"
        case name
        case instanceTemplateId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdateInstanceTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(instanceTemplateId, forKey: .instanceTemplateId)

    }
}

/// 校验启动模板的有效性
      ///       ///  
public class VerifyInstanceTemplateResult:NSObject,JdCloudResult
{
}
public class CreateInstanceTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateInstanceTemplateResult?;

    enum CreateInstanceTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstanceTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateInstanceTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateInstanceTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstanceTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeInstanceTemplatesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceTemplatesResult?;

    enum DescribeInstanceTemplatesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceTemplatesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceTemplatesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceTemplatesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTemplatesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改一个启动模板的信息，包括名称、描述
      ///       ///  
public class UpdateInstanceTemplateResult:NSObject,JdCloudResult
{
}
public class VerifyInstanceTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:VerifyInstanceTemplateResult?;

    enum VerifyInstanceTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: VerifyInstanceTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(VerifyInstanceTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension VerifyInstanceTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: VerifyInstanceTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询启动模板列表
      ///       ///  
public class DescribeInstanceTemplatesResult:NSObject,JdCloudResult
{
    /// InstanceTemplates
    var instanceTemplates:[InstanceTemplate?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeInstanceTemplatesResultCodingKeys: String, CodingKey {
        case instanceTemplates
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceTemplatesResultCodingKeys.self)
        if decoderContainer.contains(.instanceTemplates)
        {
            self.instanceTemplates = try decoderContainer.decode([InstanceTemplate?]?.self, forKey: .instanceTemplates)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInstanceTemplatesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTemplatesResultCodingKeys.self)
        try encoderContainer.encode(instanceTemplates, forKey: .instanceTemplates)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  删除一个启动模板
      ///       /// 
public class DeleteInstanceTemplateRequest:JdCloudRequest
{
    /// 启动模板ID
    var instanceTemplateId:String


    public init(regionId: String,instanceTemplateId:String){
        self.instanceTemplateId = instanceTemplateId
        super.init(regionId: regionId)
    }


    enum DeleteInstanceTemplateRequestRequestCodingKeys: String, CodingKey {
        case instanceTemplateId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteInstanceTemplateRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceTemplateId, forKey: .instanceTemplateId)

    }
}

public class DescribeInstanceTemplateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceTemplateResult?;

    enum DescribeInstanceTemplateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceTemplateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceTemplateResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceTemplateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTemplateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除一个启动模板
      ///       ///  
public class DeleteInstanceTemplateResult:NSObject,JdCloudResult
{
}

///  查询配额，支持的类型：云主机、镜像、密钥、模板、镜像共享。
      ///       /// 
public class DescribeQuotasRequest:JdCloudRequest
{
    /// resourceTypes - 资源类型，支持多个[instance，keypair，image，instanceTemplate，imageShare]
      /// 
    var filters:[Filter?]?

    /// 私有镜像Id，查询镜像共享(imageShare)配额时，此参数必传
    var imageId:String?




    enum DescribeQuotasRequestRequestCodingKeys: String, CodingKey {
        case filters
        case imageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotasRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(imageId, forKey: .imageId)

    }
}

public class DescribeQuotasResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeQuotasResult?;

    enum DescribeQuotasResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQuotasResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeQuotasResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeQuotasResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotasResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询配额，支持的类型：云主机、镜像、密钥、模板、镜像共享。
      ///       ///  
public class DescribeQuotasResult:NSObject,JdCloudResult
{
    /// 配额列表
    var quotas:[Quota?]?



    public override init(){
        super.init()
    }

    enum DescribeQuotasResultCodingKeys: String, CodingKey {
        case quotas
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQuotasResultCodingKeys.self)
        if decoderContainer.contains(.quotas)
        {
            self.quotas = try decoderContainer.decode([Quota?]?.self, forKey: .quotas)
        }
    }
}
public extension DescribeQuotasResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotasResultCodingKeys.self)
        try encoderContainer.encode(quotas, forKey: .quotas)
    }
}
/// 查询实例规格信息列表
      ///       ///  
public class DescribeInstanceTypesResult:NSObject,JdCloudResult
{
    /// 通用的实例规格
    var instanceTypes:[InstanceType?]?

    /// 用户特有的实例规格；需要工单申请
    var specificInstanceTypes:[InstanceType?]?

    /// 总数量
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeInstanceTypesResultCodingKeys: String, CodingKey {
        case instanceTypes
        case specificInstanceTypes
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceTypesResultCodingKeys.self)
        if decoderContainer.contains(.instanceTypes)
        {
            self.instanceTypes = try decoderContainer.decode([InstanceType?]?.self, forKey: .instanceTypes)
        }
        if decoderContainer.contains(.specificInstanceTypes)
        {
            self.specificInstanceTypes = try decoderContainer.decode([InstanceType?]?.self, forKey: .specificInstanceTypes)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInstanceTypesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTypesResultCodingKeys.self)
        try encoderContainer.encode(instanceTypes, forKey: .instanceTypes)
        try encoderContainer.encode(specificInstanceTypes, forKey: .specificInstanceTypes)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeInstanceTypesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceTypesResult?;

    enum DescribeInstanceTypesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceTypesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceTypesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceTypesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTypesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询实例规格信息列表
      ///       /// 
public class DescribeInstanceTypesRequest:JdCloudRequest
{
    /// 服务类型，取值为{vm、nc}，vm代表虚机、nc代表原生容器
    var serviceName:String?

    /// instanceTypes - 实例规格，精确匹配，支持多个
      /// az - 可用区，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeInstanceTypesRequestRequestCodingKeys: String, CodingKey {
        case serviceName
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTypesRequestRequestCodingKeys.self)
        try encoderContainer.encode(serviceName, forKey: .serviceName)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  导入由其他工具生成的密钥对的公钥部分。&lt;br&gt;
      ///       /// 若传入已存在的密钥名称，会返回错误。
      ///       /// 
public class ImportKeypairRequest:JdCloudRequest
{
    /// 密钥对名称，需要全局唯一。只允许数字、大小写字母、下划线“_”及中划线“-”，不超过32个字符。
      /// 
    var keyName:String

    /// 密钥对的公钥部分
    var publicKey:String


    public init(regionId: String,keyName:String,publicKey:String){
        self.keyName = keyName
        self.publicKey = publicKey
        super.init(regionId: regionId)
    }


    enum ImportKeypairRequestRequestCodingKeys: String, CodingKey {
        case keyName
        case publicKey
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportKeypairRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyName, forKey: .keyName)
        try encoderContainer.encode(publicKey, forKey: .publicKey)

    }
}


///  批量查询密钥对。&lt;br&gt;
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       /// 
public class DescribeKeypairsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// keyNames - 密钥对名称，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeKeypairsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeypairsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 导入由其他工具生成的密钥对的公钥部分。&lt;br&gt;
      ///       /// 若传入已存在的密钥名称，会返回错误。
      ///       ///  
public class ImportKeypairResult:NSObject,JdCloudResult
{
    /// 密钥对名称
    var keyName:String?

    /// 密钥对的指纹，根据 RFC4716 定义的公钥指纹格式，采用 MD5 信息摘要算法。
    var keyFingerprint:String?



    public override init(){
        super.init()
    }

    enum ImportKeypairResultCodingKeys: String, CodingKey {
        case keyName
        case keyFingerprint
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImportKeypairResultCodingKeys.self)
        if decoderContainer.contains(.keyName)
        {
            self.keyName = try decoderContainer.decode(String?.self, forKey: .keyName)
        }
        if decoderContainer.contains(.keyFingerprint)
        {
            self.keyFingerprint = try decoderContainer.decode(String?.self, forKey: .keyFingerprint)
        }
    }
}
public extension ImportKeypairResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportKeypairResultCodingKeys.self)
        try encoderContainer.encode(keyName, forKey: .keyName)
        try encoderContainer.encode(keyFingerprint, forKey: .keyFingerprint)
    }
}

///  删除ssh密钥对。
      ///       /// 
public class DeleteKeypairRequest:JdCloudRequest
{
    /// 密钥名称
    var keyName:String


    public init(regionId: String,keyName:String){
        self.keyName = keyName
        super.init(regionId: regionId)
    }


    enum DeleteKeypairRequestRequestCodingKeys: String, CodingKey {
        case keyName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteKeypairRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyName, forKey: .keyName)

    }
}

public class ImportKeypairResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ImportKeypairResult?;

    enum ImportKeypairResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImportKeypairResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ImportKeypairResult?.self, forKey: .result) ?? nil
    }
}

public extension ImportKeypairResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportKeypairResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 批量查询密钥对。&lt;br&gt;
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       ///  
public class DescribeKeypairsResult:NSObject,JdCloudResult
{
    /// Keypairs
    var keypairs:[Keypair?]?

    /// 总的数据条数
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeKeypairsResultCodingKeys: String, CodingKey {
        case keypairs
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeKeypairsResultCodingKeys.self)
        if decoderContainer.contains(.keypairs)
        {
            self.keypairs = try decoderContainer.decode([Keypair?]?.self, forKey: .keypairs)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeKeypairsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeypairsResultCodingKeys.self)
        try encoderContainer.encode(keypairs, forKey: .keypairs)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DeleteKeypairResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteKeypairResult?;

    enum DeleteKeypairResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteKeypairResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteKeypairResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteKeypairResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteKeypairResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除ssh密钥对。
      ///       ///  
public class DeleteKeypairResult:NSObject,JdCloudResult
{
}
/// 创建ssh密钥对。公钥部分存储在京东云，并返回未加密的 PEM 编码的 PKCS#8 格式私钥，您只有一次机会保存您的私钥。请妥善保管。&lt;br&gt;
      ///       /// 若传入已存在的密钥名称，会返回错误。
      ///       ///  
public class CreateKeypairResult:NSObject,JdCloudResult
{
    /// 密钥对名称
    var keyName:String?

    /// 密钥对的私钥部分，PEM PKCS#8 格式。
    var privateKey:String?

    /// 密钥对的指纹，根据 RFC4716 定义的公钥指纹格式，采用 MD5 信息摘要算法。
    var keyFingerprint:String?



    public override init(){
        super.init()
    }

    enum CreateKeypairResultCodingKeys: String, CodingKey {
        case keyName
        case privateKey
        case keyFingerprint
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateKeypairResultCodingKeys.self)
        if decoderContainer.contains(.keyName)
        {
            self.keyName = try decoderContainer.decode(String?.self, forKey: .keyName)
        }
        if decoderContainer.contains(.privateKey)
        {
            self.privateKey = try decoderContainer.decode(String?.self, forKey: .privateKey)
        }
        if decoderContainer.contains(.keyFingerprint)
        {
            self.keyFingerprint = try decoderContainer.decode(String?.self, forKey: .keyFingerprint)
        }
    }
}
public extension CreateKeypairResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeypairResultCodingKeys.self)
        try encoderContainer.encode(keyName, forKey: .keyName)
        try encoderContainer.encode(privateKey, forKey: .privateKey)
        try encoderContainer.encode(keyFingerprint, forKey: .keyFingerprint)
    }
}
public class CreateKeypairResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateKeypairResult?;

    enum CreateKeypairResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateKeypairResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateKeypairResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateKeypairResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeypairResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeKeypairsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeKeypairsResult?;

    enum DescribeKeypairsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeKeypairsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeKeypairsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeKeypairsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeKeypairsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建ssh密钥对。公钥部分存储在京东云，并返回未加密的 PEM 编码的 PKCS#8 格式私钥，您只有一次机会保存您的私钥。请妥善保管。&lt;br&gt;
      ///       /// 若传入已存在的密钥名称，会返回错误。
      ///       /// 
public class CreateKeypairRequest:JdCloudRequest
{
    /// 密钥对名称，需要全局唯一。只允许数字、大小写字母、下划线“_”及中划线“-”，不超过32个字符。
      /// 
    var keyName:String


    public init(regionId: String,keyName:String){
        self.keyName = keyName
        super.init(regionId: regionId)
    }


    enum CreateKeypairRequestRequestCodingKeys: String, CodingKey {
        case keyName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateKeypairRequestRequestCodingKeys.self)
        try encoderContainer.encode(keyName, forKey: .keyName)

    }
}

public class DescribeInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceResult?;

    enum DescribeInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeInstanceVncUrlResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceVncUrlResult?;

    enum DescribeInstanceVncUrlResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceVncUrlResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceVncUrlResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceVncUrlResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceVncUrlResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询一台云主机的详细信息
      ///       ///  
public class DescribeInstanceResult:NSObject,JdCloudResult
{
    /// Instance
    var instance:Instance?



    public override init(){
        super.init()
    }

    enum DescribeInstanceResultCodingKeys: String, CodingKey {
        case instance
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceResultCodingKeys.self)
        if decoderContainer.contains(.instance)
        {
            self.instance = try decoderContainer.decode(Instance?.self, forKey: .instance)
        }
    }
}
public extension DescribeInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceResultCodingKeys.self)
        try encoderContainer.encode(instance, forKey: .instance)
    }
}

///  重启单个云主机，只能重启&lt;b&gt;running&lt;/b&gt;状态的云主机，云主机没有正在进行中的任务才可重启。
      ///       /// 
public class RebootInstanceRequest:JdCloudRequest
{
    /// 云主机ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum RebootInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RebootInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 批量查询云主机状态 
public class DescribeInstanceStatusResult:NSObject,JdCloudResult
{
    /// InstanceStatuses
    var instanceStatuses:[InstanceStatus?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeInstanceStatusResultCodingKeys: String, CodingKey {
        case instanceStatuses
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceStatusResultCodingKeys.self)
        if decoderContainer.contains(.instanceStatuses)
        {
            self.instanceStatuses = try decoderContainer.decode([InstanceStatus?]?.self, forKey: .instanceStatuses)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInstanceStatusResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceStatusResultCodingKeys.self)
        try encoderContainer.encode(instanceStatuses, forKey: .instanceStatuses)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  修改云主机挂载的数据盘属性，包括是否随主机删除。&lt;br&gt;
      ///       /// 仅按配置计费云硬盘支持设置随实例删除属性;包年包月计费云硬盘该属性不生效,实例删除时云硬盘将保留。&lt;br&gt;
      ///       /// 
public class ModifyInstanceDiskAttributeRequest:JdCloudRequest
{
    /// 云硬盘列表
    var dataDisks:[InstanceDiskAttribute?]?

    /// 云主机ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstanceDiskAttributeRequestRequestCodingKeys: String, CodingKey {
        case dataDisks
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceDiskAttributeRequestRequestCodingKeys.self)
        try encoderContainer.encode(dataDisks, forKey: .dataDisks)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 云主机变更实例规格&lt;br&gt;
      ///       /// 云主机的状态必须为&lt;b&gt;stopped&lt;/b&gt;状态。&lt;br&gt;
      ///       /// 以下情况的云主机，不允许在一代与二代实例规格间互相调整，例：不允许g.n1与g.n2之间互相调配&lt;br&gt;
      ///       /// 1、16年创建的云硬盘做系统盘的云主机&lt;br&gt;
      ///       /// 2、本地盘(local类型)做系统盘的云主机。&lt;br&gt;
      ///       /// 3、使用高可用组(Ag)创建的云主机。&lt;br&gt;
      ///       /// 如果当前主机中的弹性网卡数量，大于新实例规格允许的弹性网卡数量，会返回错误。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeinstancetypes&quot;&gt;DescribeInstanceTypes&lt;/a&gt;接口获得指定地域及可用区下的实例规格信息。&lt;br&gt;
      ///       /// 当前主机所使用的镜像，需要支持要变更的目标实例规格，否则返回错误。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeimageconstraints&quot;&gt;DescribeImageConstraints&lt;/a&gt;接口获得指定镜像的实例规格限制信息。&lt;br&gt;
      ///       /// 云主机欠费或到期时，无法更改实例规格。
      ///       ///  
public class ResizeInstanceResult:NSObject,JdCloudResult
{
}
/// 修改云主机部分信息，包括名称、描述。
      ///       ///  
public class ModifyInstanceAttributeResult:NSObject,JdCloudResult
{
}

///  云主机变更实例规格&lt;br&gt;
      ///       /// 云主机的状态必须为&lt;b&gt;stopped&lt;/b&gt;状态。&lt;br&gt;
      ///       /// 以下情况的云主机，不允许在一代与二代实例规格间互相调整，例：不允许g.n1与g.n2之间互相调配&lt;br&gt;
      ///       /// 1、16年创建的云硬盘做系统盘的云主机&lt;br&gt;
      ///       /// 2、本地盘(local类型)做系统盘的云主机。&lt;br&gt;
      ///       /// 3、使用高可用组(Ag)创建的云主机。&lt;br&gt;
      ///       /// 如果当前主机中的弹性网卡数量，大于新实例规格允许的弹性网卡数量，会返回错误。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeinstancetypes&quot;&gt;DescribeInstanceTypes&lt;/a&gt;接口获得指定地域及可用区下的实例规格信息。&lt;br&gt;
      ///       /// 当前主机所使用的镜像，需要支持要变更的目标实例规格，否则返回错误。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeimageconstraints&quot;&gt;DescribeImageConstraints&lt;/a&gt;接口获得指定镜像的实例规格限制信息。&lt;br&gt;
      ///       /// 云主机欠费或到期时，无法更改实例规格。
      ///       /// 
public class ResizeInstanceRequest:JdCloudRequest
{
    /// 实例规格，可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeinstancetypes&quot;&gt;DescribeInstanceTypes&lt;/a&gt;接口获得指定地域或可用区的规格信息。
    var instanceType:String

    /// 云主机ID
    var instanceId:String


    public init(regionId: String,instanceType:String,instanceId:String){
        self.instanceType = instanceType
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ResizeInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceType
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResizeInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceType, forKey: .instanceType)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  停止单个云主机，只能停止&lt;b&gt;running&lt;/b&gt;状态的云主机，云主机没有正在进行中的任务才可停止
      ///       /// 
public class StopInstanceRequest:JdCloudRequest
{
    /// 云主机ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum StopInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class CreateInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateInstancesResult?;

    enum CreateInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  云主机绑定一块弹性网卡。&lt;br&gt;
      ///       /// 云主机状态必须为&lt;b&gt;running&lt;/b&gt;或&lt;b&gt;stopped&lt;/b&gt;状态，并且没有正在进行中的任务才可操作。&lt;br&gt;
      ///       /// 弹性网卡上如果绑定了弹性公网IP，那么其所在az需要与云主机的az保持一致，或者为全可用区型弹性公网IP，才可挂载该网卡。&lt;br&gt;
      ///       /// 云主机挂载弹性网卡的数量，不能超过实例规格的限制。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeinstancetypes&quot;&gt;DescribeInstanceTypes&lt;/a&gt;接口获得指定规格可挂载弹性网卡的数量上限。&lt;br&gt;
      ///       /// 弹性网卡与云主机必须在相同vpc下。
      ///       /// 
public class AttachNetworkInterfaceRequest:JdCloudRequest
{
    /// 弹性网卡ID
    var networkInterfaceId:String

    /// 随云主机删除而自动删除，默认为False
    var autoDelete:Bool?

    /// 云主机ID
    var instanceId:String


    public init(regionId: String,networkInterfaceId:String,instanceId:String){
        self.networkInterfaceId = networkInterfaceId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum AttachNetworkInterfaceRequestRequestCodingKeys: String, CodingKey {
        case networkInterfaceId
        case autoDelete
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachNetworkInterfaceRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)
        try encoderContainer.encode(autoDelete, forKey: .autoDelete)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class AttachNetworkInterfaceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AttachNetworkInterfaceResult?;

    enum AttachNetworkInterfaceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AttachNetworkInterfaceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AttachNetworkInterfaceResult?.self, forKey: .result) ?? nil
    }
}

public extension AttachNetworkInterfaceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachNetworkInterfaceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 批量查询云主机的详细信息&lt;br&gt;
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       ///  
public class DescribeInstancesResult:NSObject,JdCloudResult
{
    /// Instances
    var instances:[Instance?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeInstancesResultCodingKeys: String, CodingKey {
        case instances
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        if decoderContainer.contains(.instances)
        {
            self.instances = try decoderContainer.decode([Instance?]?.self, forKey: .instances)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        try encoderContainer.encode(instances, forKey: .instances)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DetachDiskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DetachDiskResult?;

    enum DetachDiskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DetachDiskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DetachDiskResult?.self, forKey: .result) ?? nil
    }
}

public extension DetachDiskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachDiskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  批量查询云主机的详细信息&lt;br&gt;
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       /// 
public class DescribeInstancesRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// instanceId - 云主机ID，精确匹配，支持多个
      /// privateIpAddress - 主网卡内网主IP地址，模糊匹配，支持多个
      /// az - 可用区，精确匹配，支持多个
      /// vpcId - 私有网络ID，精确匹配，支持多个
      /// status - 云主机状态，精确匹配，支持多个，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/vm_status&quot;&gt;参考云主机状态&lt;/a&gt;
      /// name - 云主机名称，模糊匹配，支持单个
      /// imageId - 镜像ID，精确匹配，支持多个
      /// networkInterfaceId - 弹性网卡ID，精确匹配，支持多个
      /// subnetId - 子网ID，精确匹配，支持多个
      /// agId - 使用可用组id，支持单个
      /// faultDomain - 错误域，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeInstancesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

public class ResizeInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResizeInstanceResult?;

    enum ResizeInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResizeInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResizeInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension ResizeInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResizeInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteInstanceResult?;

    enum DeleteInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class ModifyInstanceDiskAttributeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstanceDiskAttributeResult?;

    enum ModifyInstanceDiskAttributeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceDiskAttributeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstanceDiskAttributeResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstanceDiskAttributeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceDiskAttributeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除按配置计费、或包年包月已到期的单个云主机。不能删除没有计费信息的云主机。&lt;br&gt;
      ///       /// 云主机状态必须为运行&lt;b&gt;running&lt;/b&gt;、停止&lt;b&gt;stopped&lt;/b&gt;、错误&lt;b&gt;error&lt;/b&gt;，同时云主机没有正在进行中的任务才可删除。&lt;br&gt;
      ///       /// 如果主机中挂载的数据盘为按配置计费的云硬盘且AutoDelete属性为true，那么数据盘会随主机一起删除。
      ///       ///  [MFA enabled] 
public class DeleteInstanceResult:NSObject,JdCloudResult
{
}
public class AssociateElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AssociateElasticIpResult?;

    enum AssociateElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AssociateElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension AssociateElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  启动单个云主机，只能启动&lt;b&gt;stopped&lt;/b&gt;状态的云主机，云主机没有正在进行中的任务才可启动。&lt;br&gt;
      ///       /// 只能启动正常计费状态的云主机，若已欠费停服或到期停服则不支持启动。
      ///       /// 
public class StartInstanceRequest:JdCloudRequest
{
    /// 云主机ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum StartInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  删除按配置计费、或包年包月已到期的单个云主机。不能删除没有计费信息的云主机。&lt;br&gt;
      ///       /// 云主机状态必须为运行&lt;b&gt;running&lt;/b&gt;、停止&lt;b&gt;stopped&lt;/b&gt;、错误&lt;b&gt;error&lt;/b&gt;，同时云主机没有正在进行中的任务才可删除。&lt;br&gt;
      ///       /// 如果主机中挂载的数据盘为按配置计费的云硬盘且AutoDelete属性为true，那么数据盘会随主机一起删除。
      ///       ///  [MFA enabled]
public class DeleteInstanceRequest:JdCloudRequest
{
    /// 云主机ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DeleteInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  为云主机主网卡的主内网IP绑定弹性公网IP。&lt;br&gt;
      ///       /// 一台云主机的主网卡的主内网IP只能绑定一个弹性公网IP，若已绑定弹性公网IP，操作绑定会返回错误。&lt;br&gt;
      ///       /// 
public class AssociateElasticIpRequest:JdCloudRequest
{
    /// 弹性公网IP的ID
    var elasticIpId:String

    /// 云主机ID
    var instanceId:String


    public init(regionId: String,elasticIpId:String,instanceId:String){
        self.elasticIpId = elasticIpId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum AssociateElasticIpRequestRequestCodingKeys: String, CodingKey {
        case elasticIpId
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  查询一台云主机的详细信息
      ///       /// 
public class DescribeInstanceRequest:JdCloudRequest
{
    /// 云主机ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DetachNetworkInterfaceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DetachNetworkInterfaceResult?;

    enum DetachNetworkInterfaceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DetachNetworkInterfaceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DetachNetworkInterfaceResult?.self, forKey: .result) ?? nil
    }
}

public extension DetachNetworkInterfaceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachNetworkInterfaceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 云主机绑定一块弹性网卡。&lt;br&gt;
      ///       /// 云主机状态必须为&lt;b&gt;running&lt;/b&gt;或&lt;b&gt;stopped&lt;/b&gt;状态，并且没有正在进行中的任务才可操作。&lt;br&gt;
      ///       /// 弹性网卡上如果绑定了弹性公网IP，那么其所在az需要与云主机的az保持一致，或者为全可用区型弹性公网IP，才可挂载该网卡。&lt;br&gt;
      ///       /// 云主机挂载弹性网卡的数量，不能超过实例规格的限制。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeinstancetypes&quot;&gt;DescribeInstanceTypes&lt;/a&gt;接口获得指定规格可挂载弹性网卡的数量上限。&lt;br&gt;
      ///       /// 弹性网卡与云主机必须在相同vpc下。
      ///       ///  
public class AttachNetworkInterfaceResult:NSObject,JdCloudResult
{
}
/// 云主机缷载一块弹性网卡。&lt;br&gt;
      ///       /// 云主机状态必须为&lt;b&gt;running&lt;/b&gt;或&lt;b&gt;stopped&lt;/b&gt;状态，并且没有正在进行中的任务才可操作。&lt;br&gt;
      ///       /// 不能缷载主网卡。
      ///       ///  
public class DetachNetworkInterfaceResult:NSObject,JdCloudResult
{
}
public class StopInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopInstanceResult?;

    enum StopInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension StopInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  批量查询云主机内网IP地址，查询的是主网卡内网主IP地址。
public class DescribeInstancePrivateIpAddressRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// instanceId - 云主机ID，精确匹配，支持多个
      /// privateIpAddress - 主网卡内网主IP地址，模糊匹配，支持多个
      /// vpcId - 私有网络ID，精确匹配，支持多个
      /// status - 云主机状态，精确匹配，支持多个，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/vm_status&quot;&gt;参考云主机状态&lt;/a&gt;
      /// name - 云主机名称，模糊匹配，支持单个
      /// imageId - 镜像ID，精确匹配，支持多个
      /// networkInterfaceId - 弹性网卡ID，精确匹配，支持多个
      /// subnetId - 子网ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeInstancePrivateIpAddressRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancePrivateIpAddressRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 云主机缷载云硬盘，云主机和云硬盘没有正在进行中的任务时才可缷载。&lt;br&gt;
      ///       ///  
public class DetachDiskResult:NSObject,JdCloudResult
{
}
/// 获取云主机vnc，用于连接管理云主机。&lt;br&gt;
      ///       /// vnc地址的有效期为1个小时，调用接口获取vnc地址后如果1个小时内没有使用，vnc地址自动失效，再次使用需要重新获取。
      ///       ///  
public class DescribeInstanceVncUrlResult:NSObject,JdCloudResult
{
    /// VncUrl
    var vncUrl:String?



    public override init(){
        super.init()
    }

    enum DescribeInstanceVncUrlResultCodingKeys: String, CodingKey {
        case vncUrl
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceVncUrlResultCodingKeys.self)
        if decoderContainer.contains(.vncUrl)
        {
            self.vncUrl = try decoderContainer.decode(String?.self, forKey: .vncUrl)
        }
    }
}
public extension DescribeInstanceVncUrlResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceVncUrlResultCodingKeys.self)
        try encoderContainer.encode(vncUrl, forKey: .vncUrl)
    }
}
/// 云主机解绑弹性公网IP，解绑的是主网卡、内网主IP对应的弹性公网IP。
      ///       ///  
public class DisassociateElasticIpResult:NSObject,JdCloudResult
{
}
public class CreateImageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateImageResult?;

    enum CreateImageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateImageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateImageResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateImageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateImageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改虚机弹性网卡属性，包括是否随云主机一起删除。&lt;br&gt;
      ///       /// 不能修改主网卡。
      ///       ///  
public class ModifyInstanceNetworkAttributeResult:NSObject,JdCloudResult
{
}
public class DescribeInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstancesResult?;

    enum DescribeInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 启动单个云主机，只能启动&lt;b&gt;stopped&lt;/b&gt;状态的云主机，云主机没有正在进行中的任务才可启动。&lt;br&gt;
      ///       /// 只能启动正常计费状态的云主机，若已欠费停服或到期停服则不支持启动。
      ///       ///  
public class StartInstanceResult:NSObject,JdCloudResult
{
}
/// 为一台云主机挂载一块云硬盘，云主机和云硬盘没有正在进行中的的任务时才可挂载。&lt;br&gt;
      ///       /// 云主机状态必须是&lt;b&gt;running&lt;/b&gt;或&lt;b&gt;stopped&lt;/b&gt;状态。&lt;br&gt;
      ///       /// 本地盘(local类型)做系统盘的云主机可挂载8块云硬盘，云硬盘(cloud类型)做系统盘的云主机可挂载除系统盘外7块云硬盘。
      ///       ///  
public class AttachDiskResult:NSObject,JdCloudResult
{
}
public class AttachDiskResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AttachDiskResult?;

    enum AttachDiskResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AttachDiskResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AttachDiskResult?.self, forKey: .result) ?? nil
    }
}

public extension AttachDiskResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachDiskResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 修改云主机挂载的数据盘属性，包括是否随主机删除。&lt;br&gt;
      ///       /// 仅按配置计费云硬盘支持设置随实例删除属性;包年包月计费云硬盘该属性不生效,实例删除时云硬盘将保留。&lt;br&gt;
      ///       ///  
public class ModifyInstanceDiskAttributeResult:NSObject,JdCloudResult
{
}

///  获取云主机vnc，用于连接管理云主机。&lt;br&gt;
      ///       /// vnc地址的有效期为1个小时，调用接口获取vnc地址后如果1个小时内没有使用，vnc地址自动失效，再次使用需要重新获取。
      ///       /// 
public class DescribeInstanceVncUrlRequest:JdCloudRequest
{
    /// 云主机ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceVncUrlRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceVncUrlRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class StartInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartInstanceResult?;

    enum StartInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension StartInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建一台或多台指定配置的云主机，创建模式分为三种：1.普通方式、2.使用高可用组、3.使用启动模板。三种方式创建云主机时参数的必传与非必传是不同的，具体请参考&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/create_vm_sample&quot;&gt;参数详细说明&lt;/a&gt;&lt;br&gt;
      ///       /// - 创建云主机需要通过实名认证
      ///       /// - 实例规格
      ///       ///     - 可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeinstancetypes&quot;&gt;DescribeInstanceTypes&lt;/a&gt;接口获得指定地域或可用区的规格信息。
      ///       ///     - 不能使用已下线、或已售馨的规格ID
      ///       /// - 镜像
      ///       ///     - Windows Server所有镜像CPU不可选超过64核CPU。
      ///       ///     - 可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeimages&quot;&gt;DescribeImages&lt;/a&gt;接口获得指定地域的镜像信息。
      ///       ///     - 选择的镜像必须支持选择的实例规格。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeimageconstraints&quot;&gt;DescribeImageConstraints&lt;/a&gt;接口获得指定镜像的实例规格限制信息。&lt;br&gt;
      ///       /// - 网络配置
      ///       ///     - 指定主网卡配置信息
      ///       ///         - 必须指定subnetId
      ///       ///         - 可以指定elasticIp规格来约束创建的弹性IP，带宽取值范围[1-200]Mbps，步进1Mbps
      ///       ///         - 可以指定主网卡的内网主IP(primaryIpAddress)，此时maxCount只能为1
      ///       ///         - 安全组securityGroup需与子网Subnet在同一个私有网络VPC内
      ///       ///         - 一台云主机创建时必须至少指定一个安全组，至多指定5个安全组，如果没有指定安全组，默认使用默认安全组
      ///       ///         - 主网卡deviceIndex设置为1
      ///       /// - 存储
      ///       ///     - 系统盘
      ///       ///         - 磁盘分类，系统盘支持local或cloud
      ///       ///         - 磁盘大小
      ///       ///             - local：不能指定大小，默认为40GB
      ///       ///             - cloud：取值范围: 40-500GB，并且不能小于镜像的最小系统盘大小，如果没有指定，默认以镜像中的系统盘大小为准
      ///       ///         - 自动删除
      ///       ///             - 如果是local类型，默认自动删除，不可修改
      ///       ///             - 如果是cloud类型的按配置计费的云硬盘，默认为True，可修改
      ///       ///             - 如果是cloud类型的包年包月的云硬盘，默认为False，不可修改
      ///       ///     - 数据盘
      ///       ///         - 磁盘分类，数据盘仅支持cloud
      ///       ///         - 云硬盘类型可以选择ssd、premium-hdd、hdd.std1、ssd.gp1、ssd.io1
      ///       ///         - 磁盘大小
      ///       ///             - premium-hdd：范围[20,3000]GB，步长为10G
      ///       ///             - ssd：范围[20,1000]GB，步长为10G
      ///       ///             - hdd.std1、ssd.gp1、ssd.io1: 范围[20-16000]GB，步长为10GB
      ///       ///         - 自动删除
      ///       ///             - 默认自动删除，如果是包年包月的云硬盘，此参数不生效
      ///       ///         - 可以从快照创建磁盘
      ///       ///     - local类型系统的云主机可以挂载8块云硬盘
      ///       ///     - cloud类型系统的云主机可以挂载7块云硬盘
      ///       /// - 计费
      ///       ///     - 弹性IP的计费模式，如果选择按用量类型可以单独设置，其它计费模式都以主机为准
      ///       ///     - 云硬盘的计费模式以主机为准
      ///       /// - 其他
      ///       ///     - 创建完成后，主机状态为running
      ///       ///     - 仅Linux系统云主机可以指定密钥
      ///       ///     - maxCount为最大努力，不保证一定能达到maxCount
      ///       ///     - 虚机的az会覆盖磁盘的az属性
      ///       /// - 密码
      ///       ///     - &lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;
      ///       /// 
public class CreateInstancesRequest:JdCloudRequest
{
    /// 描述云主机配置
      /// 
    var instanceSpec:InstanceSpec

    /// 购买云主机的数量；取值范围：[1,100]，默认为1。
      /// 
    var maxCount:Int?

    /// 用于保证请求的幂等性。由客户端生成，长度不能超过64个字符。
      /// 
    var clientToken:String?


    public init(regionId: String,instanceSpec:InstanceSpec){
        self.instanceSpec = instanceSpec
        super.init(regionId: regionId)
    }


    enum CreateInstancesRequestRequestCodingKeys: String, CodingKey {
        case instanceSpec
        case maxCount
        case clientToken
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceSpec, forKey: .instanceSpec)
        try encoderContainer.encode(maxCount, forKey: .maxCount)
        try encoderContainer.encode(clientToken, forKey: .clientToken)

    }
}


///  修改云主机密码，主机没有正在进行中的任务时才可操作。&lt;br&gt;
      ///       /// 修改密码后，需要重启云主机后生效。
      ///       /// 
public class ModifyInstancePasswordRequest:JdCloudRequest
{
    /// 密码，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var password:String

    /// 云主机ID
    var instanceId:String


    public init(regionId: String,password:String,instanceId:String){
        self.password = password
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstancePasswordRequestRequestCodingKeys: String, CodingKey {
        case password
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstancePasswordRequestRequestCodingKeys.self)
        try encoderContainer.encode(password, forKey: .password)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 停止单个云主机，只能停止&lt;b&gt;running&lt;/b&gt;状态的云主机，云主机没有正在进行中的任务才可停止
      ///       ///  
public class StopInstanceResult:NSObject,JdCloudResult
{
}

///  为云主机创建私有镜像。云主机状态必须为&lt;b&gt;stopped&lt;/b&gt;。&lt;br&gt;
      ///       /// 云主机没有正在进行中的任务才可制作镜像。&lt;br&gt;
      ///       /// 制作镜像以备份系统盘为基础，在此之上可选择全部或部分挂载数据盘制作整机镜像（如不做任何更改将默认制作整机镜像），制作镜像过程会为所挂载云硬盘创建快照并与镜像关联。&lt;br&gt;
      ///       /// 调用接口后，需要等待镜像状态变为&lt;b&gt;ready&lt;/b&gt;后，才能正常使用镜像。
      ///       /// 
public class CreateImageRequest:JdCloudRequest
{
    /// 镜像名称，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var name:String

    /// 镜像描述，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var descriptionValue:String?

    /// 数据盘列表，可以在实例已挂载数据盘的基础上，额外增加新的快照、空盘、或排除云主机中的数据盘。
    var dataDisks:[InstanceDiskAttachmentSpec?]?

    /// 云主机ID
    var instanceId:String


    public init(regionId: String,name:String,instanceId:String){
        self.name = name
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum CreateImageRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case dataDisks
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateImageRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(dataDisks, forKey: .dataDisks)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 创建一台或多台指定配置的云主机，创建模式分为三种：1.普通方式、2.使用高可用组、3.使用启动模板。三种方式创建云主机时参数的必传与非必传是不同的，具体请参考&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/create_vm_sample&quot;&gt;参数详细说明&lt;/a&gt;&lt;br&gt;
      ///       /// - 创建云主机需要通过实名认证
      ///       /// - 实例规格
      ///       ///     - 可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeinstancetypes&quot;&gt;DescribeInstanceTypes&lt;/a&gt;接口获得指定地域或可用区的规格信息。
      ///       ///     - 不能使用已下线、或已售馨的规格ID
      ///       /// - 镜像
      ///       ///     - Windows Server所有镜像CPU不可选超过64核CPU。
      ///       ///     - 可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeimages&quot;&gt;DescribeImages&lt;/a&gt;接口获得指定地域的镜像信息。
      ///       ///     - 选择的镜像必须支持选择的实例规格。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeimageconstraints&quot;&gt;DescribeImageConstraints&lt;/a&gt;接口获得指定镜像的实例规格限制信息。&lt;br&gt;
      ///       /// - 网络配置
      ///       ///     - 指定主网卡配置信息
      ///       ///         - 必须指定subnetId
      ///       ///         - 可以指定elasticIp规格来约束创建的弹性IP，带宽取值范围[1-200]Mbps，步进1Mbps
      ///       ///         - 可以指定主网卡的内网主IP(primaryIpAddress)，此时maxCount只能为1
      ///       ///         - 安全组securityGroup需与子网Subnet在同一个私有网络VPC内
      ///       ///         - 一台云主机创建时必须至少指定一个安全组，至多指定5个安全组，如果没有指定安全组，默认使用默认安全组
      ///       ///         - 主网卡deviceIndex设置为1
      ///       /// - 存储
      ///       ///     - 系统盘
      ///       ///         - 磁盘分类，系统盘支持local或cloud
      ///       ///         - 磁盘大小
      ///       ///             - local：不能指定大小，默认为40GB
      ///       ///             - cloud：取值范围: 40-500GB，并且不能小于镜像的最小系统盘大小，如果没有指定，默认以镜像中的系统盘大小为准
      ///       ///         - 自动删除
      ///       ///             - 如果是local类型，默认自动删除，不可修改
      ///       ///             - 如果是cloud类型的按配置计费的云硬盘，默认为True，可修改
      ///       ///             - 如果是cloud类型的包年包月的云硬盘，默认为False，不可修改
      ///       ///     - 数据盘
      ///       ///         - 磁盘分类，数据盘仅支持cloud
      ///       ///         - 云硬盘类型可以选择ssd、premium-hdd、hdd.std1、ssd.gp1、ssd.io1
      ///       ///         - 磁盘大小
      ///       ///             - premium-hdd：范围[20,3000]GB，步长为10G
      ///       ///             - ssd：范围[20,1000]GB，步长为10G
      ///       ///             - hdd.std1、ssd.gp1、ssd.io1: 范围[20-16000]GB，步长为10GB
      ///       ///         - 自动删除
      ///       ///             - 默认自动删除，如果是包年包月的云硬盘，此参数不生效
      ///       ///         - 可以从快照创建磁盘
      ///       ///     - local类型系统的云主机可以挂载8块云硬盘
      ///       ///     - cloud类型系统的云主机可以挂载7块云硬盘
      ///       /// - 计费
      ///       ///     - 弹性IP的计费模式，如果选择按用量类型可以单独设置，其它计费模式都以主机为准
      ///       ///     - 云硬盘的计费模式以主机为准
      ///       /// - 其他
      ///       ///     - 创建完成后，主机状态为running
      ///       ///     - 仅Linux系统云主机可以指定密钥
      ///       ///     - maxCount为最大努力，不保证一定能达到maxCount
      ///       ///     - 虚机的az会覆盖磁盘的az属性
      ///       /// - 密码
      ///       ///     - &lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;
      ///       ///  
public class CreateInstancesResult:NSObject,JdCloudResult
{
    /// InstanceIds
    var instanceIds:[String?]?



    public override init(){
        super.init()
    }

    enum CreateInstancesResultCodingKeys: String, CodingKey {
        case instanceIds
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateInstancesResultCodingKeys.self)
        if decoderContainer.contains(.instanceIds)
        {
            self.instanceIds = try decoderContainer.decode([String?]?.self, forKey: .instanceIds)
        }
    }
}
public extension CreateInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateInstancesResultCodingKeys.self)
        try encoderContainer.encode(instanceIds, forKey: .instanceIds)
    }
}
/// 为云主机创建私有镜像。云主机状态必须为&lt;b&gt;stopped&lt;/b&gt;。&lt;br&gt;
      ///       /// 云主机没有正在进行中的任务才可制作镜像。&lt;br&gt;
      ///       /// 制作镜像以备份系统盘为基础，在此之上可选择全部或部分挂载数据盘制作整机镜像（如不做任何更改将默认制作整机镜像），制作镜像过程会为所挂载云硬盘创建快照并与镜像关联。&lt;br&gt;
      ///       /// 调用接口后，需要等待镜像状态变为&lt;b&gt;ready&lt;/b&gt;后，才能正常使用镜像。
      ///       ///  
public class CreateImageResult:NSObject,JdCloudResult
{
    /// 镜像ID
    var imageId:String?



    public override init(){
        super.init()
    }

    enum CreateImageResultCodingKeys: String, CodingKey {
        case imageId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateImageResultCodingKeys.self)
        if decoderContainer.contains(.imageId)
        {
            self.imageId = try decoderContainer.decode(String?.self, forKey: .imageId)
        }
    }
}
public extension CreateImageResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateImageResultCodingKeys.self)
        try encoderContainer.encode(imageId, forKey: .imageId)
    }
}

///  批量查询云主机状态
public class DescribeInstanceStatusRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// instanceId - 云主机ID，精确匹配，支持多个
      /// privateIpAddress - 主网卡内网主IP地址，模糊匹配，支持多个
      /// vpcId - 私有网络ID，精确匹配，支持多个
      /// status - 云主机状态，精确匹配，支持多个，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/vm_status&quot;&gt;参考云主机状态&lt;/a&gt;
      /// name - 云主机名称，模糊匹配，支持单个
      /// imageId - 镜像ID，精确匹配，支持多个
      /// networkInterfaceId - 弹性网卡ID，精确匹配，支持多个
      /// subnetId - 子网ID，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeInstanceStatusRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceStatusRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 重启单个云主机，只能重启&lt;b&gt;running&lt;/b&gt;状态的云主机，云主机没有正在进行中的任务才可重启。
      ///       ///  
public class RebootInstanceResult:NSObject,JdCloudResult
{
}
/// 云主机使用指定镜像重置云主机系统&lt;br&gt;
      ///       /// 云主机的状态必须为&lt;b&gt;stopped&lt;/b&gt;状态。&lt;br&gt;
      ///       /// 若不指定镜像ID，默认使用当前主机的原镜像重置系统。&lt;br&gt;
      ///       /// 云主机系统盘类型必须与待更换镜像支持的系统盘类型保持一致，若当前云主机系统盘为local类型，则更换镜像的系统盘类型必须为loaclDisk类型；同理，若当前云主机系统盘为cloud类型，则更换镜像的系统盘类型必须为cloudDisk类型。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeimages&quot;&gt;DescribeImages&lt;/a&gt;接口获得指定地域的镜像信息。&lt;br&gt;
      ///       /// 指定的镜像必须能够支持当前主机的实例规格(instanceType)，否则会返回错误。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeimageconstraints&quot;&gt;DescribeImageConstraints&lt;/a&gt;接口获得指定镜像支持的系统盘类型信息。
      ///       ///  
public class RebuildInstanceResult:NSObject,JdCloudResult
{
}
public class RebootInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RebootInstanceResult?;

    enum RebootInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RebootInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RebootInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension RebootInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RebootInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改虚机弹性网卡属性，包括是否随云主机一起删除。&lt;br&gt;
      ///       /// 不能修改主网卡。
      ///       /// 
public class ModifyInstanceNetworkAttributeRequest:JdCloudRequest
{
    /// 弹性网卡列表
    var networks:[InstanceNetworkAttribute?]?

    /// 云主机ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstanceNetworkAttributeRequestRequestCodingKeys: String, CodingKey {
        case networks
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceNetworkAttributeRequestRequestCodingKeys.self)
        try encoderContainer.encode(networks, forKey: .networks)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  为一台云主机挂载一块云硬盘，云主机和云硬盘没有正在进行中的的任务时才可挂载。&lt;br&gt;
      ///       /// 云主机状态必须是&lt;b&gt;running&lt;/b&gt;或&lt;b&gt;stopped&lt;/b&gt;状态。&lt;br&gt;
      ///       /// 本地盘(local类型)做系统盘的云主机可挂载8块云硬盘，云硬盘(cloud类型)做系统盘的云主机可挂载除系统盘外7块云硬盘。
      ///       /// 
public class AttachDiskRequest:JdCloudRequest
{
    /// 云硬盘ID
    var diskId:String

    /// 设备名[vda,vdb,vdc,vdd,vde,vdf,vdg,vdh,vdi,vmj,vdk,vdl,vdm]，挂载系统盘时必传，且需传vda
    var deviceName:String?

    /// 随云主机删除自动删除此云硬盘，默认为False。仅按配置计费云硬盘支持修改此参数，包年包月云硬盘不可修改。
    var autoDelete:Bool?

    /// 云主机ID
    var instanceId:String


    public init(regionId: String,diskId:String,instanceId:String){
        self.diskId = diskId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum AttachDiskRequestRequestCodingKeys: String, CodingKey {
        case diskId
        case deviceName
        case autoDelete
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AttachDiskRequestRequestCodingKeys.self)
        try encoderContainer.encode(diskId, forKey: .diskId)
        try encoderContainer.encode(deviceName, forKey: .deviceName)
        try encoderContainer.encode(autoDelete, forKey: .autoDelete)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DescribeInstanceStatusResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceStatusResult?;

    enum DescribeInstanceStatusResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceStatusResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceStatusResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceStatusResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceStatusResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DisassociateElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisassociateElasticIpResult?;

    enum DisassociateElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisassociateElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisassociateElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DisassociateElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  云主机解绑弹性公网IP，解绑的是主网卡、内网主IP对应的弹性公网IP。
      ///       /// 
public class DisassociateElasticIpRequest:JdCloudRequest
{
    /// 弹性公网IP的ID
    var elasticIpId:String

    /// 云主机ID
    var instanceId:String


    public init(regionId: String,elasticIpId:String,instanceId:String){
        self.elasticIpId = elasticIpId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DisassociateElasticIpRequestRequestCodingKeys: String, CodingKey {
        case elasticIpId
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class RebuildInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RebuildInstanceResult?;

    enum RebuildInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RebuildInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RebuildInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension RebuildInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RebuildInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 为云主机主网卡的主内网IP绑定弹性公网IP。&lt;br&gt;
      ///       /// 一台云主机的主网卡的主内网IP只能绑定一个弹性公网IP，若已绑定弹性公网IP，操作绑定会返回错误。&lt;br&gt;
      ///       ///  
public class AssociateElasticIpResult:NSObject,JdCloudResult
{
}
public class ModifyInstanceAttributeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstanceAttributeResult?;

    enum ModifyInstanceAttributeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceAttributeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstanceAttributeResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstanceAttributeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceAttributeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeInstancePrivateIpAddressResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstancePrivateIpAddressResult?;

    enum DescribeInstancePrivateIpAddressResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancePrivateIpAddressResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstancePrivateIpAddressResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstancePrivateIpAddressResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancePrivateIpAddressResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 批量查询云主机内网IP地址，查询的是主网卡内网主IP地址。 
public class DescribeInstancePrivateIpAddressResult:NSObject,JdCloudResult
{
    /// InstancePrivateIpAddress
    var instancePrivateIpAddress:[InstancePrivateIpAddress?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeInstancePrivateIpAddressResultCodingKeys: String, CodingKey {
        case instancePrivateIpAddress
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancePrivateIpAddressResultCodingKeys.self)
        if decoderContainer.contains(.instancePrivateIpAddress)
        {
            self.instancePrivateIpAddress = try decoderContainer.decode([InstancePrivateIpAddress?]?.self, forKey: .instancePrivateIpAddress)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInstancePrivateIpAddressResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancePrivateIpAddressResultCodingKeys.self)
        try encoderContainer.encode(instancePrivateIpAddress, forKey: .instancePrivateIpAddress)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 修改云主机密码，主机没有正在进行中的任务时才可操作。&lt;br&gt;
      ///       /// 修改密码后，需要重启云主机后生效。
      ///       ///  
public class ModifyInstancePasswordResult:NSObject,JdCloudResult
{
}
public class ModifyInstanceNetworkAttributeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstanceNetworkAttributeResult?;

    enum ModifyInstanceNetworkAttributeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstanceNetworkAttributeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstanceNetworkAttributeResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstanceNetworkAttributeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceNetworkAttributeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改云主机部分信息，包括名称、描述。
      ///       /// 
public class ModifyInstanceAttributeRequest:JdCloudRequest
{
    /// 名称，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var name:String?

    /// 描述，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var descriptionValue:String?

    /// 云主机ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum ModifyInstanceAttributeRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstanceAttributeRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  云主机缷载云硬盘，云主机和云硬盘没有正在进行中的任务时才可缷载。&lt;br&gt;
      ///       /// 
public class DetachDiskRequest:JdCloudRequest
{
    /// 云硬盘ID
    var diskId:String

    /// 强制缷载，默认False。如果此参数传值为True，代表数据盘的IO会被强制断掉。
    var force:Bool?

    /// 云主机ID
    var instanceId:String


    public init(regionId: String,diskId:String,instanceId:String){
        self.diskId = diskId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DetachDiskRequestRequestCodingKeys: String, CodingKey {
        case diskId
        case force
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachDiskRequestRequestCodingKeys.self)
        try encoderContainer.encode(diskId, forKey: .diskId)
        try encoderContainer.encode(force, forKey: .force)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class ModifyInstancePasswordResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyInstancePasswordResult?;

    enum ModifyInstancePasswordResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyInstancePasswordResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyInstancePasswordResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyInstancePasswordResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyInstancePasswordResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  云主机使用指定镜像重置云主机系统&lt;br&gt;
      ///       /// 云主机的状态必须为&lt;b&gt;stopped&lt;/b&gt;状态。&lt;br&gt;
      ///       /// 若不指定镜像ID，默认使用当前主机的原镜像重置系统。&lt;br&gt;
      ///       /// 云主机系统盘类型必须与待更换镜像支持的系统盘类型保持一致，若当前云主机系统盘为local类型，则更换镜像的系统盘类型必须为loaclDisk类型；同理，若当前云主机系统盘为cloud类型，则更换镜像的系统盘类型必须为cloudDisk类型。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeimages&quot;&gt;DescribeImages&lt;/a&gt;接口获得指定地域的镜像信息。&lt;br&gt;
      ///       /// 指定的镜像必须能够支持当前主机的实例规格(instanceType)，否则会返回错误。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeimageconstraints&quot;&gt;DescribeImageConstraints&lt;/a&gt;接口获得指定镜像支持的系统盘类型信息。
      ///       /// 
public class RebuildInstanceRequest:JdCloudRequest
{
    /// 云主机密码，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var password:String

    /// 镜像ID。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeimages&quot;&gt;DescribeImages&lt;/a&gt;接口获得指定地域的镜像信息。
    var imageId:String?

    /// 密钥对名称；当前只支持一个。仅Linux系统支持指定。
    var keyNames:[String?]?

    /// 云主机ID
    var instanceId:String


    public init(regionId: String,password:String,instanceId:String){
        self.password = password
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum RebuildInstanceRequestRequestCodingKeys: String, CodingKey {
        case password
        case imageId
        case keyNames
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RebuildInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(password, forKey: .password)
        try encoderContainer.encode(imageId, forKey: .imageId)
        try encoderContainer.encode(keyNames, forKey: .keyNames)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  云主机缷载一块弹性网卡。&lt;br&gt;
      ///       /// 云主机状态必须为&lt;b&gt;running&lt;/b&gt;或&lt;b&gt;stopped&lt;/b&gt;状态，并且没有正在进行中的任务才可操作。&lt;br&gt;
      ///       /// 不能缷载主网卡。
      ///       /// 
public class DetachNetworkInterfaceRequest:JdCloudRequest
{
    /// 弹性网卡ID
    var networkInterfaceId:String

    /// 云主机ID
    var instanceId:String


    public init(regionId: String,networkInterfaceId:String,instanceId:String){
        self.networkInterfaceId = networkInterfaceId
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DetachNetworkInterfaceRequestRequestCodingKeys: String, CodingKey {
        case networkInterfaceId
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DetachNetworkInterfaceRequestRequestCodingKeys.self)
        try encoderContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}


///  删除一个私有镜像，只允许操作您的个人私有镜像。&lt;br&gt;
      ///       /// 若镜像已共享给其他用户，需先取消共享才可删除。
      ///       /// 
public class DeleteImageRequest:JdCloudRequest
{
    /// 镜像ID
    var imageId:String


    public init(regionId: String,imageId:String){
        self.imageId = imageId
        super.init(regionId: regionId)
    }


    enum DeleteImageRequestRequestCodingKeys: String, CodingKey {
        case imageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteImageRequestRequestCodingKeys.self)
        try encoderContainer.encode(imageId, forKey: .imageId)

    }
}

public class ImportImageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ImportImageResult?;

    enum ImportImageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImportImageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ImportImageResult?.self, forKey: .result) ?? nil
    }
}

public extension ImportImageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportImageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeImageConstraintsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeImageConstraintsResult?;

    enum DescribeImageConstraintsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImageConstraintsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeImageConstraintsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeImageConstraintsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImageConstraintsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CopyImagesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CopyImagesResult?;

    enum CopyImagesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CopyImagesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CopyImagesResult?.self, forKey: .result) ?? nil
    }
}

public extension CopyImagesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CopyImagesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 共享镜像，只允许操作您的个人私有镜像，单个镜像最多可共享给20个京东云帐户。&lt;br&gt;
      ///       /// 整机镜像目前不支持共享。
      ///       ///  
public class ShareImageResult:NSObject,JdCloudResult
{
}

///  镜像跨区复制，将私有镜像复制到其它地域下，只允许操作您的个人私有镜像。&lt;br&gt;
      ///       /// 只支持rootDeviceType为cloudDisk的云硬盘系统盘镜像操作。
      ///       /// 
public class CopyImagesRequest:JdCloudRequest
{
    /// 源镜像ID
    var sourceImageIds:[String?]?

    /// 目标区域
    var destinationRegion:String


    public init(regionId: String,destinationRegion:String){
        self.destinationRegion = destinationRegion
        super.init(regionId: regionId)
    }


    enum CopyImagesRequestRequestCodingKeys: String, CodingKey {
        case sourceImageIds
        case destinationRegion
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CopyImagesRequestRequestCodingKeys.self)
        try encoderContainer.encode(sourceImageIds, forKey: .sourceImageIds)
        try encoderContainer.encode(destinationRegion, forKey: .destinationRegion)

    }
}


///  发布社区镜像，只允许操作您的个人私有镜像。发布为社区镜像后会撤销共享关系。&lt;br&gt;
      ///       /// 
public class ReleaseImageRequest:JdCloudRequest
{
    /// 镜像ID
    var imageId:String


    public init(regionId: String,imageId:String){
        self.imageId = imageId
        super.init(regionId: regionId)
    }


    enum ReleaseImageRequestRequestCodingKeys: String, CodingKey {
        case imageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReleaseImageRequestRequestCodingKeys.self)
        try encoderContainer.encode(imageId, forKey: .imageId)

    }
}

public class DescribeImageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeImageResult?;

    enum DescribeImageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeImageResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeImageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  导入镜像，将外部镜像导入到京东云中
      ///       /// 
public class ImportImageRequest:JdCloudRequest
{
    /// 系统架构，可选值：x86_64,i386
    var architecture:String

    /// 操作系统，可选值：windows,linux
    var osType:String

    /// 平台名称，可选值：CentOS,Ubuntu,Windows Server,Other Linux,Other Windows
    var platform:String

    /// 磁盘格式，可选值：qcow2,vhd,vmdk,raw
    var diskFormat:String

    /// 以此镜像需要制作的系统盘的默认大小，单位GB。最小值40，最大值500，要求值是10的整数倍
    var systemDiskSizeGB:Int

    /// 要导入镜像的对象存储外链地址
    var imageUrl:String

    /// 镜像的操作系统版本
    var osVersion:String?

    /// 导入镜像的自定义名称
    var imageName:String

    /// 导入镜像的描述信息
    var descriptionValue:String?

    /// 是否强制导入。强制导入则忽略镜像的合规性检测
    var forceImport:Bool?

    /// 用户导入镜像的幂等性保证。每次创建请传入不同的值，如果传值与某次的clientToken相同，则返还该次的请求结果
    var clientToken:String?


    public init(regionId: String,architecture:String,osType:String,platform:String,diskFormat:String,systemDiskSizeGB:Int,imageUrl:String,imageName:String){
        self.architecture = architecture
        self.osType = osType
        self.platform = platform
        self.diskFormat = diskFormat
        self.systemDiskSizeGB = systemDiskSizeGB
        self.imageUrl = imageUrl
        self.imageName = imageName
        super.init(regionId: regionId)
    }


    enum ImportImageRequestRequestCodingKeys: String, CodingKey {
        case architecture
        case osType
        case platform
        case diskFormat
        case systemDiskSizeGB
        case imageUrl
        case osVersion
        case imageName
        case descriptionValue = "description"
        case forceImport
        case clientToken
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportImageRequestRequestCodingKeys.self)
        try encoderContainer.encode(architecture, forKey: .architecture)
        try encoderContainer.encode(osType, forKey: .osType)
        try encoderContainer.encode(platform, forKey: .platform)
        try encoderContainer.encode(diskFormat, forKey: .diskFormat)
        try encoderContainer.encode(systemDiskSizeGB, forKey: .systemDiskSizeGB)
        try encoderContainer.encode(imageUrl, forKey: .imageUrl)
        try encoderContainer.encode(osVersion, forKey: .osVersion)
        try encoderContainer.encode(imageName, forKey: .imageName)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(forceImport, forKey: .forceImport)
        try encoderContainer.encode(clientToken, forKey: .clientToken)

    }
}

public class ImageTasksResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ImageTasksResult?;

    enum ImageTasksResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImageTasksResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ImageTasksResult?.self, forKey: .result) ?? nil
    }
}

public extension ImageTasksResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImageTasksResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeImagesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeImagesResult?;

    enum DescribeImagesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImagesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeImagesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeImagesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImagesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 镜像跨区复制，将私有镜像复制到其它地域下，只允许操作您的个人私有镜像。&lt;br&gt;
      ///       /// 只支持rootDeviceType为cloudDisk的云硬盘系统盘镜像操作。
      ///       ///  
public class CopyImagesResult:NSObject,JdCloudResult
{
    /// 源镜像与目标镜像映射关系
    var copyImages:[CopyImage?]?



    public override init(){
        super.init()
    }

    enum CopyImagesResultCodingKeys: String, CodingKey {
        case copyImages
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CopyImagesResultCodingKeys.self)
        if decoderContainer.contains(.copyImages)
        {
            self.copyImages = try decoderContainer.decode([CopyImage?]?.self, forKey: .copyImages)
        }
    }
}
public extension CopyImagesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CopyImagesResultCodingKeys.self)
        try encoderContainer.encode(copyImages, forKey: .copyImages)
    }
}

///  修改镜像信息，包括名称、描述；只允许操作您的个人私有镜像。
      ///       /// 
public class ModifyImageAttributeRequest:JdCloudRequest
{
    /// 名称，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var name:String?

    /// 描述，&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;。
    var descriptionValue:String?

    /// 镜像ID
    var imageId:String


    public init(regionId: String,imageId:String){
        self.imageId = imageId
        super.init(regionId: regionId)
    }


    enum ModifyImageAttributeRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case imageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyImageAttributeRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(imageId, forKey: .imageId)

    }
}

public class UnReleaseImageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UnReleaseImageResult?;

    enum UnReleaseImageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UnReleaseImageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UnReleaseImageResult?.self, forKey: .result) ?? nil
    }
}

public extension UnReleaseImageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UnReleaseImageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询镜像信息列表。&lt;br&gt;
      ///       /// 通过此接口可以查询到京东云官方镜像、第三方镜像、私有镜像、或其他用户共享给您的镜像。&lt;br&gt;
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       ///  
public class DescribeImagesResult:NSObject,JdCloudResult
{
    /// 镜像详情
    var images:[Image?]?

    /// 总数量
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeImagesResultCodingKeys: String, CodingKey {
        case images
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImagesResultCodingKeys.self)
        if decoderContainer.contains(.images)
        {
            self.images = try decoderContainer.decode([Image?]?.self, forKey: .images)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeImagesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImagesResultCodingKeys.self)
        try encoderContainer.encode(images, forKey: .images)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  查询镜像共享帐户列表，只允许操作您的个人私有镜像。
      ///       /// 
public class DescribeImageMembersRequest:JdCloudRequest
{
    /// 镜像ID
    var imageId:String


    public init(regionId: String,imageId:String){
        self.imageId = imageId
        super.init(regionId: regionId)
    }


    enum DescribeImageMembersRequestRequestCodingKeys: String, CodingKey {
        case imageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImageMembersRequestRequestCodingKeys.self)
        try encoderContainer.encode(imageId, forKey: .imageId)

    }
}


///  查询镜像信息列表。&lt;br&gt;
      ///       /// 通过此接口可以查询到京东云官方镜像、第三方镜像、私有镜像、或其他用户共享给您的镜像。&lt;br&gt;
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       /// 
public class DescribeImagesRequest:JdCloudRequest
{
    /// 镜像来源，如果没有指定ids参数，此参数必传；取值范围：public、shared、thirdparty、private、community
    var imageSource:String?

    /// 操作系统平台，取值范围：Windows Server、CentOS、Ubuntu
    var platform:String?

    /// 镜像ID列表，如果指定了此参数，其它参数可为空
    var ids:[String?]?

    /// 镜像支持的系统盘类型，[localDisk,cloudDisk]
    var rootDeviceType:String?

    /// 镜像的使用权限[all, specifiedUsers，ownerOnly]，可选参数，仅当imageSource取值private时有效
    var launchPermission:String?

    /// &lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/image_status&quot;&gt;参考镜像状态&lt;/a&gt;
    var status:String?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?




    enum DescribeImagesRequestRequestCodingKeys: String, CodingKey {
        case imageSource
        case platform
        case ids
        case rootDeviceType
        case launchPermission
        case status
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImagesRequestRequestCodingKeys.self)
        try encoderContainer.encode(imageSource, forKey: .imageSource)
        try encoderContainer.encode(platform, forKey: .platform)
        try encoderContainer.encode(ids, forKey: .ids)
        try encoderContainer.encode(rootDeviceType, forKey: .rootDeviceType)
        try encoderContainer.encode(launchPermission, forKey: .launchPermission)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}


///  查询镜像详情。
      ///       /// 
public class DescribeImageRequest:JdCloudRequest
{
    /// 镜像ID
    var imageId:String


    public init(regionId: String,imageId:String){
        self.imageId = imageId
        super.init(regionId: regionId)
    }


    enum DescribeImageRequestRequestCodingKeys: String, CodingKey {
        case imageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImageRequestRequestCodingKeys.self)
        try encoderContainer.encode(imageId, forKey: .imageId)

    }
}

/// 查询镜像共享帐户列表，只允许操作您的个人私有镜像。
      ///       ///  
public class DescribeImageMembersResult:NSObject,JdCloudResult
{
    /// 用户Pin列表
    var pins:[String?]?



    public override init(){
        super.init()
    }

    enum DescribeImageMembersResultCodingKeys: String, CodingKey {
        case pins
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImageMembersResultCodingKeys.self)
        if decoderContainer.contains(.pins)
        {
            self.pins = try decoderContainer.decode([String?]?.self, forKey: .pins)
        }
    }
}
public extension DescribeImageMembersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImageMembersResultCodingKeys.self)
        try encoderContainer.encode(pins, forKey: .pins)
    }
}
public class DescribeImageConstraintsBatchResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeImageConstraintsBatchResult?;

    enum DescribeImageConstraintsBatchResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImageConstraintsBatchResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeImageConstraintsBatchResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeImageConstraintsBatchResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImageConstraintsBatchResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询镜像的实例规格限制。&lt;br&gt;
      ///       /// 通过此接口可以查看镜像不支持的实例规格。只有官方镜像、第三方镜像有实例规格的限制，个人的私有镜像没有此限制。
      ///       /// 
public class DescribeImageConstraintsRequest:JdCloudRequest
{
    /// 镜像ID
    var imageId:String


    public init(regionId: String,imageId:String){
        self.imageId = imageId
        super.init(regionId: regionId)
    }


    enum DescribeImageConstraintsRequestRequestCodingKeys: String, CodingKey {
        case imageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImageConstraintsRequestRequestCodingKeys.self)
        try encoderContainer.encode(imageId, forKey: .imageId)

    }
}

public class DeleteImageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteImageResult?;

    enum DeleteImageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteImageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteImageResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteImageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteImageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询镜像导入任务详情
      ///       /// 
public class ImageTasksRequest:JdCloudRequest
{
    /// 任务种类。可选值：ImportImage
    var taskAction:String

    /// 任务id
    var taskIds:[Int?]?

    /// 任务状态。可选值：pending,running,failed,finished
    var taskStatus:String?

    /// 任务开始时间
    var startTime:String?

    /// 任务结束时间
    var endTime:String?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?


    public init(regionId: String,taskAction:String){
        self.taskAction = taskAction
        super.init(regionId: regionId)
    }


    enum ImageTasksRequestRequestCodingKeys: String, CodingKey {
        case taskAction
        case taskIds
        case taskStatus
        case startTime
        case endTime
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImageTasksRequestRequestCodingKeys.self)
        try encoderContainer.encode(taskAction, forKey: .taskAction)
        try encoderContainer.encode(taskIds, forKey: .taskIds)
        try encoderContainer.encode(taskStatus, forKey: .taskStatus)
        try encoderContainer.encode(startTime, forKey: .startTime)
        try encoderContainer.encode(endTime, forKey: .endTime)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

/// 发布社区镜像，只允许操作您的个人私有镜像。发布为社区镜像后会撤销共享关系。&lt;br&gt;
      ///       ///  
public class ReleaseImageResult:NSObject,JdCloudResult
{
}
/// 批量查询镜像的实例规格限制。&lt;br&gt;
      ///       /// 通过此接口可以查看镜像不支持的实例规格。只有官方镜像、第三方镜像有实例规格的限制，个人的私有镜像没有此限制。
      ///       ///  
public class DescribeImageConstraintsBatchResult:NSObject,JdCloudResult
{
    /// 镜像限制
    var imageConstraints:[ImageConstraint?]?



    public override init(){
        super.init()
    }

    enum DescribeImageConstraintsBatchResultCodingKeys: String, CodingKey {
        case imageConstraints
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImageConstraintsBatchResultCodingKeys.self)
        if decoderContainer.contains(.imageConstraints)
        {
            self.imageConstraints = try decoderContainer.decode([ImageConstraint?]?.self, forKey: .imageConstraints)
        }
    }
}
public extension DescribeImageConstraintsBatchResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImageConstraintsBatchResultCodingKeys.self)
        try encoderContainer.encode(imageConstraints, forKey: .imageConstraints)
    }
}
/// 导入镜像，将外部镜像导入到京东云中
      ///       ///  
public class ImportImageResult:NSObject,JdCloudResult
{
    /// 镜像id
    var imageId:String?

    /// 导入任务id
    var importTaskId:Int?



    public override init(){
        super.init()
    }

    enum ImportImageResultCodingKeys: String, CodingKey {
        case imageId
        case importTaskId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImportImageResultCodingKeys.self)
        if decoderContainer.contains(.imageId)
        {
            self.imageId = try decoderContainer.decode(String?.self, forKey: .imageId)
        }
        if decoderContainer.contains(.importTaskId)
        {
            self.importTaskId = try decoderContainer.decode(Int?.self, forKey: .importTaskId)
        }
    }
}
public extension ImportImageResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImportImageResultCodingKeys.self)
        try encoderContainer.encode(imageId, forKey: .imageId)
        try encoderContainer.encode(importTaskId, forKey: .importTaskId)
    }
}
/// 修改镜像信息，包括名称、描述；只允许操作您的个人私有镜像。
      ///       ///  
public class ModifyImageAttributeResult:NSObject,JdCloudResult
{
}
/// 查询镜像导入任务详情
      ///       ///  
public class ImageTasksResult:NSObject,JdCloudResult
{
    /// 任务详情
    var taskSet:[TaskInfo?]?

    /// 总数量
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum ImageTasksResultCodingKeys: String, CodingKey {
        case taskSet
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ImageTasksResultCodingKeys.self)
        if decoderContainer.contains(.taskSet)
        {
            self.taskSet = try decoderContainer.decode([TaskInfo?]?.self, forKey: .taskSet)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension ImageTasksResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ImageTasksResultCodingKeys.self)
        try encoderContainer.encode(taskSet, forKey: .taskSet)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class ModifyImageAttributeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyImageAttributeResult?;

    enum ModifyImageAttributeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyImageAttributeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyImageAttributeResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyImageAttributeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyImageAttributeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 删除一个私有镜像，只允许操作您的个人私有镜像。&lt;br&gt;
      ///       /// 若镜像已共享给其他用户，需先取消共享才可删除。
      ///       ///  
public class DeleteImageResult:NSObject,JdCloudResult
{
}
public class ShareImageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ShareImageResult?;

    enum ShareImageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ShareImageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ShareImageResult?.self, forKey: .result) ?? nil
    }
}

public extension ShareImageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ShareImageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class UnShareImageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UnShareImageResult?;

    enum UnShareImageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UnShareImageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UnShareImageResult?.self, forKey: .result) ?? nil
    }
}

public extension UnShareImageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UnShareImageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  撤销社区镜像，只允许操作您的个人私有镜像。
      ///       /// 
public class UnReleaseImageRequest:JdCloudRequest
{
    /// 镜像ID
    var imageId:String


    public init(regionId: String,imageId:String){
        self.imageId = imageId
        super.init(regionId: regionId)
    }


    enum UnReleaseImageRequestRequestCodingKeys: String, CodingKey {
        case imageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UnReleaseImageRequestRequestCodingKeys.self)
        try encoderContainer.encode(imageId, forKey: .imageId)

    }
}

/// 取消共享镜像，只允许操作您的个人私有镜像。
      ///       ///  
public class UnShareImageResult:NSObject,JdCloudResult
{
}

///  批量查询镜像的实例规格限制。&lt;br&gt;
      ///       /// 通过此接口可以查看镜像不支持的实例规格。只有官方镜像、第三方镜像有实例规格的限制，个人的私有镜像没有此限制。
      ///       /// 
public class DescribeImageConstraintsBatchRequest:JdCloudRequest
{
    /// 镜像ID列表
    var ids:[String?]?




    enum DescribeImageConstraintsBatchRequestRequestCodingKeys: String, CodingKey {
        case ids
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImageConstraintsBatchRequestRequestCodingKeys.self)
        try encoderContainer.encode(ids, forKey: .ids)

    }
}

/// 查询镜像详情。
      ///       ///  
public class DescribeImageResult:NSObject,JdCloudResult
{
    /// 镜像详情
    var image:Image?



    public override init(){
        super.init()
    }

    enum DescribeImageResultCodingKeys: String, CodingKey {
        case image
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImageResultCodingKeys.self)
        if decoderContainer.contains(.image)
        {
            self.image = try decoderContainer.decode(Image?.self, forKey: .image)
        }
    }
}
public extension DescribeImageResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImageResultCodingKeys.self)
        try encoderContainer.encode(image, forKey: .image)
    }
}
public class ReleaseImageResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ReleaseImageResult?;

    enum ReleaseImageResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReleaseImageResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ReleaseImageResult?.self, forKey: .result) ?? nil
    }
}

public extension ReleaseImageResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReleaseImageResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  取消共享镜像，只允许操作您的个人私有镜像。
      ///       /// 
public class UnShareImageRequest:JdCloudRequest
{
    /// 需要取消的帐户
    var pins:[String?]?

    /// 镜像ID
    var imageId:String


    public init(regionId: String,imageId:String){
        self.imageId = imageId
        super.init(regionId: regionId)
    }


    enum UnShareImageRequestRequestCodingKeys: String, CodingKey {
        case pins
        case imageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UnShareImageRequestRequestCodingKeys.self)
        try encoderContainer.encode(pins, forKey: .pins)
        try encoderContainer.encode(imageId, forKey: .imageId)

    }
}

/// 撤销社区镜像，只允许操作您的个人私有镜像。
      ///       ///  
public class UnReleaseImageResult:NSObject,JdCloudResult
{
}
public class DescribeImageMembersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeImageMembersResult?;

    enum DescribeImageMembersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImageMembersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeImageMembersResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeImageMembersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImageMembersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  共享镜像，只允许操作您的个人私有镜像，单个镜像最多可共享给20个京东云帐户。&lt;br&gt;
      ///       /// 整机镜像目前不支持共享。
      ///       /// 
public class ShareImageRequest:JdCloudRequest
{
    /// 需要共享的帐户
    var pins:[String?]?

    /// 镜像ID
    var imageId:String


    public init(regionId: String,imageId:String){
        self.imageId = imageId
        super.init(regionId: regionId)
    }


    enum ShareImageRequestRequestCodingKeys: String, CodingKey {
        case pins
        case imageId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ShareImageRequestRequestCodingKeys.self)
        try encoderContainer.encode(pins, forKey: .pins)
        try encoderContainer.encode(imageId, forKey: .imageId)

    }
}

/// 查询镜像的实例规格限制。&lt;br&gt;
      ///       /// 通过此接口可以查看镜像不支持的实例规格。只有官方镜像、第三方镜像有实例规格的限制，个人的私有镜像没有此限制。
      ///       ///  
public class DescribeImageConstraintsResult:NSObject,JdCloudResult
{
    /// 镜像限制
    var imageConstraints:ImageConstraint?



    public override init(){
        super.init()
    }

    enum DescribeImageConstraintsResultCodingKeys: String, CodingKey {
        case imageConstraints
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeImageConstraintsResultCodingKeys.self)
        if decoderContainer.contains(.imageConstraints)
        {
            self.imageConstraints = try decoderContainer.decode(ImageConstraint?.self, forKey: .imageConstraints)
        }
    }
}
public extension DescribeImageConstraintsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeImageConstraintsResultCodingKeys.self)
        try encoderContainer.encode(imageConstraints, forKey: .imageConstraints)
    }
}
