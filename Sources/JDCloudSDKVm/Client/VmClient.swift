/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云主机
   云主机实例、镜像、实例规格、实例模板、配额相关的接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class VmJDCloudClient:NSObject,JDCloudClient{
    
    private final var vmJDCloudClient:VmJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        vmJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "vm.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        vmJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "vm/" + "v1"
    
    public let serviceName: String = "vm"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func describeImageMembersAsync(request:DescribeImageMembersRequest,requestComplation:@escaping ExecuteResult<DescribeImageMembersResult>) throws {
        vmJDCloudClient = self
        try DescribeImageMembersExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createInstancesAsync(request:CreateInstancesRequest,requestComplation:@escaping ExecuteResult<CreateInstancesResult>) throws {
        vmJDCloudClient = self
        try CreateInstancesExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func shareImageAsync(request:ShareImageRequest,requestComplation:@escaping ExecuteResult<ShareImageResult>) throws {
        vmJDCloudClient = self
        try ShareImageExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startInstanceAsync(request:StartInstanceRequest,requestComplation:@escaping ExecuteResult<StartInstanceResult>) throws {
        vmJDCloudClient = self
        try StartInstanceExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func unReleaseImageAsync(request:UnReleaseImageRequest,requestComplation:@escaping ExecuteResult<UnReleaseImageResult>) throws {
        vmJDCloudClient = self
        try UnReleaseImageExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func unShareImageAsync(request:UnShareImageRequest,requestComplation:@escaping ExecuteResult<UnShareImageResult>) throws {
        vmJDCloudClient = self
        try UnShareImageExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeImageConstraintsBatchAsync(request:DescribeImageConstraintsBatchRequest,requestComplation:@escaping ExecuteResult<DescribeImageConstraintsBatchResult>) throws {
        vmJDCloudClient = self
        try DescribeImageConstraintsBatchExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updateInstanceTemplateAsync(request:UpdateInstanceTemplateRequest,requestComplation:@escaping ExecuteResult<UpdateInstanceTemplateResult>) throws {
        vmJDCloudClient = self
        try UpdateInstanceTemplateExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func attachDiskAsync(request:AttachDiskRequest,requestComplation:@escaping ExecuteResult<AttachDiskResult>) throws {
        vmJDCloudClient = self
        try AttachDiskExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyInstancePasswordAsync(request:ModifyInstancePasswordRequest,requestComplation:@escaping ExecuteResult<ModifyInstancePasswordResult>) throws {
        vmJDCloudClient = self
        try ModifyInstancePasswordExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func attachNetworkInterfaceAsync(request:AttachNetworkInterfaceRequest,requestComplation:@escaping ExecuteResult<AttachNetworkInterfaceResult>) throws {
        vmJDCloudClient = self
        try AttachNetworkInterfaceExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteKeypairAsync(request:DeleteKeypairRequest,requestComplation:@escaping ExecuteResult<DeleteKeypairResult>) throws {
        vmJDCloudClient = self
        try DeleteKeypairExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeImageAsync(request:DescribeImageRequest,requestComplation:@escaping ExecuteResult<DescribeImageResult>) throws {
        vmJDCloudClient = self
        try DescribeImageExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func importKeypairAsync(request:ImportKeypairRequest,requestComplation:@escaping ExecuteResult<ImportKeypairResult>) throws {
        vmJDCloudClient = self
        try ImportKeypairExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceAsync(request:DescribeInstanceRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceResult>) throws {
        vmJDCloudClient = self
        try DescribeInstanceExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func copyImagesAsync(request:CopyImagesRequest,requestComplation:@escaping ExecuteResult<CopyImagesResult>) throws {
        vmJDCloudClient = self
        try CopyImagesExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeQuotasAsync(request:DescribeQuotasRequest,requestComplation:@escaping ExecuteResult<DescribeQuotasResult>) throws {
        vmJDCloudClient = self
        try DescribeQuotasExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyInstanceNetworkAttributeAsync(request:ModifyInstanceNetworkAttributeRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceNetworkAttributeResult>) throws {
        vmJDCloudClient = self
        try ModifyInstanceNetworkAttributeExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyImageAttributeAsync(request:ModifyImageAttributeRequest,requestComplation:@escaping ExecuteResult<ModifyImageAttributeResult>) throws {
        vmJDCloudClient = self
        try ModifyImageAttributeExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func rebootInstanceAsync(request:RebootInstanceRequest,requestComplation:@escaping ExecuteResult<RebootInstanceResult>) throws {
        vmJDCloudClient = self
        try RebootInstanceExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeKeypairsAsync(request:DescribeKeypairsRequest,requestComplation:@escaping ExecuteResult<DescribeKeypairsResult>) throws {
        vmJDCloudClient = self
        try DescribeKeypairsExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func detachDiskAsync(request:DetachDiskRequest,requestComplation:@escaping ExecuteResult<DetachDiskResult>) throws {
        vmJDCloudClient = self
        try DetachDiskExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func importImageAsync(request:ImportImageRequest,requestComplation:@escaping ExecuteResult<ImportImageResult>) throws {
        vmJDCloudClient = self
        try ImportImageExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createInstanceTemplateAsync(request:CreateInstanceTemplateRequest,requestComplation:@escaping ExecuteResult<CreateInstanceTemplateResult>) throws {
        vmJDCloudClient = self
        try CreateInstanceTemplateExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createImageAsync(request:CreateImageRequest,requestComplation:@escaping ExecuteResult<CreateImageResult>) throws {
        vmJDCloudClient = self
        try CreateImageExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func associateElasticIpAsync(request:AssociateElasticIpRequest,requestComplation:@escaping ExecuteResult<AssociateElasticIpResult>) throws {
        vmJDCloudClient = self
        try AssociateElasticIpExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func disassociateElasticIpAsync(request:DisassociateElasticIpRequest,requestComplation:@escaping ExecuteResult<DisassociateElasticIpResult>) throws {
        vmJDCloudClient = self
        try DisassociateElasticIpExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopInstanceAsync(request:StopInstanceRequest,requestComplation:@escaping ExecuteResult<StopInstanceResult>) throws {
        vmJDCloudClient = self
        try StopInstanceExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceTemplateAsync(request:DescribeInstanceTemplateRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceTemplateResult>) throws {
        vmJDCloudClient = self
        try DescribeInstanceTemplateExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeImagesAsync(request:DescribeImagesRequest,requestComplation:@escaping ExecuteResult<DescribeImagesResult>) throws {
        vmJDCloudClient = self
        try DescribeImagesExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceVncUrlAsync(request:DescribeInstanceVncUrlRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceVncUrlResult>) throws {
        vmJDCloudClient = self
        try DescribeInstanceVncUrlExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeImageConstraintsAsync(request:DescribeImageConstraintsRequest,requestComplation:@escaping ExecuteResult<DescribeImageConstraintsResult>) throws {
        vmJDCloudClient = self
        try DescribeImageConstraintsExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func rebuildInstanceAsync(request:RebuildInstanceRequest,requestComplation:@escaping ExecuteResult<RebuildInstanceResult>) throws {
        vmJDCloudClient = self
        try RebuildInstanceExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyInstanceAttributeAsync(request:ModifyInstanceAttributeRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceAttributeResult>) throws {
        vmJDCloudClient = self
        try ModifyInstanceAttributeExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func resizeInstanceAsync(request:ResizeInstanceRequest,requestComplation:@escaping ExecuteResult<ResizeInstanceResult>) throws {
        vmJDCloudClient = self
        try ResizeInstanceExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func releaseImageAsync(request:ReleaseImageRequest,requestComplation:@escaping ExecuteResult<ReleaseImageResult>) throws {
        vmJDCloudClient = self
        try ReleaseImageExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteImageAsync(request:DeleteImageRequest,requestComplation:@escaping ExecuteResult<DeleteImageResult>) throws {
        vmJDCloudClient = self
        try DeleteImageExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceTypesAsync(request:DescribeInstanceTypesRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceTypesResult>) throws {
        vmJDCloudClient = self
        try DescribeInstanceTypesExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteInstanceTemplateAsync(request:DeleteInstanceTemplateRequest,requestComplation:@escaping ExecuteResult<DeleteInstanceTemplateResult>) throws {
        vmJDCloudClient = self
        try DeleteInstanceTemplateExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func detachNetworkInterfaceAsync(request:DetachNetworkInterfaceRequest,requestComplation:@escaping ExecuteResult<DetachNetworkInterfaceResult>) throws {
        vmJDCloudClient = self
        try DetachNetworkInterfaceExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceTemplatesAsync(request:DescribeInstanceTemplatesRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceTemplatesResult>) throws {
        vmJDCloudClient = self
        try DescribeInstanceTemplatesExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func modifyInstanceDiskAttributeAsync(request:ModifyInstanceDiskAttributeRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceDiskAttributeResult>) throws {
        vmJDCloudClient = self
        try ModifyInstanceDiskAttributeExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstancePrivateIpAddressAsync(request:DescribeInstancePrivateIpAddressRequest,requestComplation:@escaping ExecuteResult<DescribeInstancePrivateIpAddressResult>) throws {
        vmJDCloudClient = self
        try DescribeInstancePrivateIpAddressExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func imageTasksAsync(request:ImageTasksRequest,requestComplation:@escaping ExecuteResult<ImageTasksResult>) throws {
        vmJDCloudClient = self
        try ImageTasksExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstanceStatusAsync(request:DescribeInstanceStatusRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceStatusResult>) throws {
        vmJDCloudClient = self
        try DescribeInstanceStatusExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deleteInstanceAsync(request:DeleteInstanceRequest,requestComplation:@escaping ExecuteResult<DeleteInstanceResult>) throws {
        vmJDCloudClient = self
        try DeleteInstanceExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createKeypairAsync(request:CreateKeypairRequest,requestComplation:@escaping ExecuteResult<CreateKeypairResult>) throws {
        vmJDCloudClient = self
        try CreateKeypairExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func describeInstancesAsync(request:DescribeInstancesRequest,requestComplation:@escaping ExecuteResult<DescribeInstancesResult>) throws {
        vmJDCloudClient = self
        try DescribeInstancesExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func verifyInstanceTemplateAsync(request:VerifyInstanceTemplateRequest,requestComplation:@escaping ExecuteResult<VerifyInstanceTemplateResult>) throws {
        vmJDCloudClient = self
        try VerifyInstanceTemplateExecutor(jdCloudClient: vmJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension VmJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "vm.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
