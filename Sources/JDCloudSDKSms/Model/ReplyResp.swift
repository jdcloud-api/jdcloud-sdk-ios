/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  replyResp
@objc(ReplyResp)
public class ReplyResp:NSObject,Codable{
    /// 应用Id
    var appId:String?
    /// 签名Id
    var signId:String?
    /// 手机号
    var phoneNum:String?
    /// 回复时间（yyyy-MM-dd HH:mm:ss)
    var dataTime:String?
    /// 回复内容
    var content:String?



    public override init(){
            super.init()
    }

    enum ReplyRespCodingKeys: String, CodingKey {
        case appId
        case signId
        case phoneNum
        case dataTime
        case content
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReplyRespCodingKeys.self)
        if decoderContainer.contains(.appId)
        {
            self.appId = try decoderContainer.decode(String?.self, forKey: .appId)
        }
        if decoderContainer.contains(.signId)
        {
            self.signId = try decoderContainer.decode(String?.self, forKey: .signId)
        }
        if decoderContainer.contains(.phoneNum)
        {
            self.phoneNum = try decoderContainer.decode(String?.self, forKey: .phoneNum)
        }
        if decoderContainer.contains(.dataTime)
        {
            self.dataTime = try decoderContainer.decode(String?.self, forKey: .dataTime)
        }
        if decoderContainer.contains(.content)
        {
            self.content = try decoderContainer.decode(String?.self, forKey: .content)
        }
    }
}
public extension ReplyResp{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReplyRespCodingKeys.self)
         try encoderContainer.encode(appId, forKey: .appId)
         try encoderContainer.encode(signId, forKey: .signId)
         try encoderContainer.encode(phoneNum, forKey: .phoneNum)
         try encoderContainer.encode(dataTime, forKey: .dataTime)
         try encoderContainer.encode(content, forKey: .content)
    }
}
