/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  mtSms
@objc(MtSms)
public class MtSms:NSObject,Codable{
    /// 用户pin
    var pin:String?
    /// 扩展码
    var expandNum:String?
    /// 手机号
    var mobileNum:String?
    /// 应用ID
    var appId:String?
    /// 套餐包ID
    var packageId:String?
    /// 签名ID
    var signId:String?
    /// 模板ID
    var templateId:String?
    /// 消息内容
    var msgContent:String?
    /// 批次ID
    var orderId:String?
    /// 错误码
    var code:Int?
    /// 流水号
    var receiptNum:String?
    /// 拆分标识
    var splitFlag:String?
    /// 发送状态
    var status:String?
    /// 类型
    var type:String?



    public override init(){
            super.init()
    }

    enum MtSmsCodingKeys: String, CodingKey {
        case pin
        case expandNum
        case mobileNum
        case appId
        case packageId
        case signId
        case templateId
        case msgContent
        case orderId
        case code
        case receiptNum
        case splitFlag
        case status
        case type
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: MtSmsCodingKeys.self)
        if decoderContainer.contains(.pin)
        {
            self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        }
        if decoderContainer.contains(.expandNum)
        {
            self.expandNum = try decoderContainer.decode(String?.self, forKey: .expandNum)
        }
        if decoderContainer.contains(.mobileNum)
        {
            self.mobileNum = try decoderContainer.decode(String?.self, forKey: .mobileNum)
        }
        if decoderContainer.contains(.appId)
        {
            self.appId = try decoderContainer.decode(String?.self, forKey: .appId)
        }
        if decoderContainer.contains(.packageId)
        {
            self.packageId = try decoderContainer.decode(String?.self, forKey: .packageId)
        }
        if decoderContainer.contains(.signId)
        {
            self.signId = try decoderContainer.decode(String?.self, forKey: .signId)
        }
        if decoderContainer.contains(.templateId)
        {
            self.templateId = try decoderContainer.decode(String?.self, forKey: .templateId)
        }
        if decoderContainer.contains(.msgContent)
        {
            self.msgContent = try decoderContainer.decode(String?.self, forKey: .msgContent)
        }
        if decoderContainer.contains(.orderId)
        {
            self.orderId = try decoderContainer.decode(String?.self, forKey: .orderId)
        }
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(Int?.self, forKey: .code)
        }
        if decoderContainer.contains(.receiptNum)
        {
            self.receiptNum = try decoderContainer.decode(String?.self, forKey: .receiptNum)
        }
        if decoderContainer.contains(.splitFlag)
        {
            self.splitFlag = try decoderContainer.decode(String?.self, forKey: .splitFlag)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.type)
        {
            self.type = try decoderContainer.decode(String?.self, forKey: .type)
        }
    }
}
public extension MtSms{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: MtSmsCodingKeys.self)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(expandNum, forKey: .expandNum)
         try encoderContainer.encode(mobileNum, forKey: .mobileNum)
         try encoderContainer.encode(appId, forKey: .appId)
         try encoderContainer.encode(packageId, forKey: .packageId)
         try encoderContainer.encode(signId, forKey: .signId)
         try encoderContainer.encode(templateId, forKey: .templateId)
         try encoderContainer.encode(msgContent, forKey: .msgContent)
         try encoderContainer.encode(orderId, forKey: .orderId)
         try encoderContainer.encode(code, forKey: .code)
         try encoderContainer.encode(receiptNum, forKey: .receiptNum)
         try encoderContainer.encode(splitFlag, forKey: .splitFlag)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(type, forKey: .type)
    }
}
