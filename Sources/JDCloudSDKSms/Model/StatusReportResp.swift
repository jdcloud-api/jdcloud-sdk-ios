/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  statusReportResp
@objc(StatusReportResp)
public class StatusReportResp:NSObject,Codable{
    /// 手机号
    var phoneNum:String?
    /// 发送短信的序列号
    var sequenceNumber:String?
    /// 短信发送时间（yyyy-MM-dd HH:mm:ss)
    var sendTime:String?
    /// 接收到回执的时间（yyyy-MM-dd HH:mm:ss)
    var reportTime:String?
    /// 发送状态
    var status:Int?
    /// 错误码
    var code:String?
    /// 长短信拆分序号（短短信直接返回1)
    var splitNum:Int?



    public override init(){
            super.init()
    }

    enum StatusReportRespCodingKeys: String, CodingKey {
        case phoneNum
        case sequenceNumber
        case sendTime
        case reportTime
        case status
        case code
        case splitNum
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StatusReportRespCodingKeys.self)
        if decoderContainer.contains(.phoneNum)
        {
            self.phoneNum = try decoderContainer.decode(String?.self, forKey: .phoneNum)
        }
        if decoderContainer.contains(.sequenceNumber)
        {
            self.sequenceNumber = try decoderContainer.decode(String?.self, forKey: .sequenceNumber)
        }
        if decoderContainer.contains(.sendTime)
        {
            self.sendTime = try decoderContainer.decode(String?.self, forKey: .sendTime)
        }
        if decoderContainer.contains(.reportTime)
        {
            self.reportTime = try decoderContainer.decode(String?.self, forKey: .reportTime)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.code)
        {
            self.code = try decoderContainer.decode(String?.self, forKey: .code)
        }
        if decoderContainer.contains(.splitNum)
        {
            self.splitNum = try decoderContainer.decode(Int?.self, forKey: .splitNum)
        }
    }
}
public extension StatusReportResp{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StatusReportRespCodingKeys.self)
         try encoderContainer.encode(phoneNum, forKey: .phoneNum)
         try encoderContainer.encode(sequenceNumber, forKey: .sequenceNumber)
         try encoderContainer.encode(sendTime, forKey: .sendTime)
         try encoderContainer.encode(reportTime, forKey: .reportTime)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(code, forKey: .code)
         try encoderContainer.encode(splitNum, forKey: .splitNum)
    }
}
