/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   原生容器
   原生容器相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  重置原生容器，对已有原生容器使用新的镜像重置。
      ///       /// 原容器 id 不变，不涉及计费变动，暂不支持修改实例类型，不会改变原生容器所在的物理节点，也不支持修改已经使用的系统盘和数据盘以及网络相关参数。
      ///       /// - 镜像
      ///       ///     - 容器的镜像通过镜像名称来确定
      ///       ///     - nginx:tag 或 mysql/mysql-server:tag 这样命名的镜像表示 docker hub 官方镜像
      ///       ///     - container-registry/image:tag 这样命名的镜像表示私有仓储的镜像
      ///       ///     - 私有仓储必须兼容 docker registry 认证机制，并通过 secret 来保存机密信息
      ///       /// - 其他
      ///       ///     - rebuild 之前容器必须处于关闭状态
      ///       ///     - rebuild 完成后，容器仍为关闭状态
      ///       /// 
@objc(RebuildContainerRequest)
public class RebuildContainerRequest:JdCloudRequest
{
    /// 镜像名称 &lt;/br&gt; 1. Docker Hub官方镜像通过类似nginx, mysql/mysql-server的名字指定 &lt;/br&gt; &lt;/br&gt; repository长度最大256个字符，tag最大128个字符，registry最大255个字符 &lt;/br&gt; 下载镜像超时时间：10分钟
    var image:String?

    /// secret引用名称；使用Docker Hub和京东云CR的镜像不需要secret
    var secret:String?

    /// 容器执行命令，如果不指定默认是docker镜像的ENTRYPOINT
    var command:[String?]?

    /// 容器执行命令的参数，如果不指定默认是docker镜像的CMD
    var args:[String?]?

    /// 容器是否分配tty。默认不分配
    var tty:Bool?

    /// 容器的工作目录。如果不指定，默认是根目录（/）；必须是绝对路径
    var workingDir:String?

    /// 容器执行的环境变量；如果和镜像中的环境变量Key相同，会覆盖镜像中的值；&lt;/br&gt; 最大10对
    var evns:[String?]?

    /// Container ID
    var containerId:String


    public init(regionId: String,containerId:String){
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum RebuildContainerRequestRequestCodingKeys: String, CodingKey {
        case image
        case secret
        case command
        case args
        case tty
        case workingDir
        case evns
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RebuildContainerRequestRequestCodingKeys.self)
        try encoderContainer.encode(image, forKey: .image)
        try encoderContainer.encode(secret, forKey: .secret)
        try encoderContainer.encode(command, forKey: .command)
        try encoderContainer.encode(args, forKey: .args)
        try encoderContainer.encode(tty, forKey: .tty)
        try encoderContainer.encode(workingDir, forKey: .workingDir)
        try encoderContainer.encode(evns, forKey: .evns)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}
