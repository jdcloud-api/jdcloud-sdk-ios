/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   商业平台
   续费相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon

public class DescribeQuotaResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeQuotaResult?;

    enum DescribeQuotaResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQuotaResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeQuotaResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeQuotaResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotaResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询资源的配额，支持：原生容器 pod 和 secret.
      ///       ///  
public class DescribeQuotaResult:NSObject,JdCloudResult
{
    /// Quota
    var quota:Quota?



    public override init(){
        super.init()
    }

    enum DescribeQuotaResultCodingKeys: String, CodingKey {
        case quota
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeQuotaResultCodingKeys.self)
        if decoderContainer.contains(.quota)
        {
            self.quota = try decoderContainer.decode(Quota?.self, forKey: .quota)
        }
    }
}
public extension DescribeQuotaResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotaResultCodingKeys.self)
        try encoderContainer.encode(quota, forKey: .quota)
    }
}

///  查询资源的配额，支持：原生容器 pod 和 secret.
      ///       /// 
public class DescribeQuotaRequest:JdCloudRequest
{
    /// resourceType - 资源类型，支持 [container, pod, secret]
      /// 
    var resourceType:String


    public init(regionId: String,resourceType:String){
        self.resourceType = resourceType
        super.init(regionId: regionId)
    }


    enum DescribeQuotaRequestRequestCodingKeys: String, CodingKey {
        case resourceType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeQuotaRequestRequestCodingKeys.self)
        try encoderContainer.encode(resourceType, forKey: .resourceType)

    }
}

/// 查询实例规格信息列表
      ///       ///  
public class DescribeInstanceTypesResult:NSObject,JdCloudResult
{
    /// 通用的实例规格
    var instanceTypes:[InstanceType?]?

    /// 用户特有的实例规格；需要工单申请
    var specificInstanceTypes:[InstanceType?]?

    /// 总数量
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeInstanceTypesResultCodingKeys: String, CodingKey {
        case instanceTypes
        case specificInstanceTypes
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceTypesResultCodingKeys.self)
        if decoderContainer.contains(.instanceTypes)
        {
            self.instanceTypes = try decoderContainer.decode([InstanceType?]?.self, forKey: .instanceTypes)
        }
        if decoderContainer.contains(.specificInstanceTypes)
        {
            self.specificInstanceTypes = try decoderContainer.decode([InstanceType?]?.self, forKey: .specificInstanceTypes)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInstanceTypesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTypesResultCodingKeys.self)
        try encoderContainer.encode(instanceTypes, forKey: .instanceTypes)
        try encoderContainer.encode(specificInstanceTypes, forKey: .specificInstanceTypes)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeInstanceTypesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceTypesResult?;

    enum DescribeInstanceTypesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceTypesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceTypesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceTypesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTypesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询实例规格信息列表
      ///       /// 
public class DescribeInstanceTypesRequest:JdCloudRequest
{
    /// instanceTypes - 实例规格，精确匹配，支持多个
      /// az - 可用区，精确匹配，支持多个
      /// 
    var filters:[Filter?]?




    enum DescribeInstanceTypesRequestRequestCodingKeys: String, CodingKey {
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceTypesRequestRequestCodingKeys.self)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  停止处于运行状态的单个实例，处于任务执行中的容器无法启动。
      ///       /// 
public class StopContainerRequest:JdCloudRequest
{
    /// Container ID
    var containerId:String


    public init(regionId: String,containerId:String){
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum StopContainerRequestRequestCodingKeys: String, CodingKey {
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopContainerRequestRequestCodingKeys.self)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}

public class AssociateElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:AssociateElasticIpResult?;

    enum AssociateElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: AssociateElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(AssociateElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension AssociateElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 调整原生容器实例类型配置。
      ///       /// - 原生容器状态为停止;
      ///       /// - 支持升配、降配；**不支持原有规格**
      ///       /// - 计费类型不变
      ///       ///     - 包年包月：需要计算配置差价，如果所选配置价格高，需要补齐到期前的差价，到期时间不变；如果所选配置价格低，需要延长到期时间
      ///       ///     - 按配置：按照所选规格，进行计费
      ///       ///  
public class ResizeContainerResult:NSObject,JdCloudResult
{
}

///  获取exec退出码
      ///       /// 
public class ExecGetExitCodeRequest:JdCloudRequest
{
    /// exec ID
    var execId:String

    /// Container ID
    var containerId:String


    public init(regionId: String,execId:String,containerId:String){
        self.execId = execId
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum ExecGetExitCodeRequestRequestCodingKeys: String, CodingKey {
        case execId
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecGetExitCodeRequestRequestCodingKeys.self)
        try encoderContainer.encode(execId, forKey: .execId)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}

/// 容器解绑公网 IP，解绑的是主网卡、主内网 IP 对应的弹性 IP.
      ///       ///  
public class DisassociateElasticIpResult:NSObject,JdCloudResult
{
}

///  查询一台原生容器的详细信息
      ///       /// 
public class DescribeContainerRequest:JdCloudRequest
{
    /// Container ID
    var containerId:String


    public init(regionId: String,containerId:String){
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum DescribeContainerRequestRequestCodingKeys: String, CodingKey {
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeContainerRequestRequestCodingKeys.self)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}

public class ExecGetExitCodeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ExecGetExitCodeResult?;

    enum ExecGetExitCodeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecGetExitCodeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ExecGetExitCodeResult?.self, forKey: .result) ?? nil
    }
}

public extension ExecGetExitCodeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecGetExitCodeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 容器状态必须为 stopped、running 或 error状态。 &lt;br&gt;
      ///       /// 按量付费的实例，如不主动删除将一直运行，不再使用的实例，可通过本接口主动停用。&lt;br&gt;
      ///       /// 只能支持主动删除按配置计费类型的实例。包年包月过期的容器也可以删除，其它的情况还请发工单系统。计费状态异常的容器无法删除。
      ///       ///  
public class DeleteContainerResult:NSObject,JdCloudResult
{
}
public class StartContainerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartContainerResult?;

    enum StartContainerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartContainerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartContainerResult?.self, forKey: .result) ?? nil
    }
}

public extension StartContainerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartContainerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 容器绑定弹性公网 IP，绑定的是主网卡、主内网IP对应的弹性IP. &lt;br&gt;
      ///       /// 一台云主机只能绑定一个弹性公网 IP(主网卡)，若主网卡已存在弹性公网IP，会返回错误。&lt;br&gt;
      ///       /// 如果是黑名单中的用户，会返回错误。
      ///       ///  
public class AssociateElasticIpResult:NSObject,JdCloudResult
{
}
/// 停止处于运行状态的单个实例，处于任务执行中的容器无法启动。
      ///       ///  
public class StopContainerResult:NSObject,JdCloudResult
{
}

///  调整原生容器实例类型配置。
      ///       /// - 原生容器状态为停止;
      ///       /// - 支持升配、降配；**不支持原有规格**
      ///       /// - 计费类型不变
      ///       ///     - 包年包月：需要计算配置差价，如果所选配置价格高，需要补齐到期前的差价，到期时间不变；如果所选配置价格低，需要延长到期时间
      ///       ///     - 按配置：按照所选规格，进行计费
      ///       /// 
public class ResizeContainerRequest:JdCloudRequest
{
    /// 新实例类型，不可与原实例类型相同
    var instanceType:String

    /// Container ID
    var containerId:String


    public init(regionId: String,instanceType:String,containerId:String){
        self.instanceType = instanceType
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum ResizeContainerRequestRequestCodingKeys: String, CodingKey {
        case instanceType
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResizeContainerRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceType, forKey: .instanceType)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}

/// 修改容器的 名称 和 描述。&lt;br&gt;
      ///       /// name 和 description 必须要指定一个
      ///       ///  
public class ModifyContainerAttributeResult:NSObject,JdCloudResult
{
}

///  启动处于关闭状态的单个容器，处在任务执行中的容器无法启动。&lt;br&gt;
      ///       /// 容器实例或其绑定的云盘已欠费时，容器将无法正常启动。&lt;br&gt;
      ///       /// 
public class StartContainerRequest:JdCloudRequest
{
    /// Container ID
    var containerId:String


    public init(regionId: String,containerId:String){
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum StartContainerRequestRequestCodingKeys: String, CodingKey {
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartContainerRequestRequestCodingKeys.self)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}

public class RebuildContainerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:RebuildContainerResult?;

    enum RebuildContainerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: RebuildContainerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(RebuildContainerResult?.self, forKey: .result) ?? nil
    }
}

public extension RebuildContainerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RebuildContainerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  容器解绑公网 IP，解绑的是主网卡、主内网 IP 对应的弹性 IP.
      ///       /// 
public class DisassociateElasticIpRequest:JdCloudRequest
{
    /// 弹性IP ID
    var elasticIpId:String

    /// Container ID
    var containerId:String


    public init(regionId: String,elasticIpId:String,containerId:String){
        self.elasticIpId = elasticIpId
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum DisassociateElasticIpRequestRequestCodingKeys: String, CodingKey {
        case elasticIpId
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}

public class ModifyContainerAttributeResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ModifyContainerAttributeResult?;

    enum ModifyContainerAttributeResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ModifyContainerAttributeResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ModifyContainerAttributeResult?.self, forKey: .result) ?? nil
    }
}

public extension ModifyContainerAttributeResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyContainerAttributeResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 重置原生容器，对已有原生容器使用新的镜像重置。
      ///       /// 原容器 id 不变，不涉及计费变动，暂不支持修改实例类型，不会改变原生容器所在的物理节点，也不支持修改已经使用的系统盘和数据盘以及网络相关参数。
      ///       /// - 镜像
      ///       ///     - 容器的镜像通过镜像名称来确定
      ///       ///     - nginx:tag 或 mysql/mysql-server:tag 这样命名的镜像表示 docker hub 官方镜像
      ///       ///     - container-registry/image:tag 这样命名的镜像表示私有仓储的镜像
      ///       ///     - 私有仓储必须兼容 docker registry 认证机制，并通过 secret 来保存机密信息
      ///       /// - 其他
      ///       ///     - rebuild 之前容器必须处于关闭状态
      ///       ///     - rebuild 完成后，容器仍为关闭状态
      ///       ///  
public class RebuildContainerResult:NSObject,JdCloudResult
{
}
public class DescribeContainersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeContainersResult?;

    enum DescribeContainersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeContainersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeContainersResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeContainersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeContainersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  容器状态必须为 stopped、running 或 error状态。 &lt;br&gt;
      ///       /// 按量付费的实例，如不主动删除将一直运行，不再使用的实例，可通过本接口主动停用。&lt;br&gt;
      ///       /// 只能支持主动删除按配置计费类型的实例。包年包月过期的容器也可以删除，其它的情况还请发工单系统。计费状态异常的容器无法删除。
      ///       /// 
public class DeleteContainerRequest:JdCloudRequest
{
    /// Container ID
    var containerId:String


    public init(regionId: String,containerId:String){
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum DeleteContainerRequestRequestCodingKeys: String, CodingKey {
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteContainerRequestRequestCodingKeys.self)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}

/// 批量查询原生容器的详细信息&lt;br&gt;
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       ///  
public class DescribeContainersResult:NSObject,JdCloudResult
{
    /// Containers
    var containers:[Container?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeContainersResultCodingKeys: String, CodingKey {
        case containers
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeContainersResultCodingKeys.self)
        if decoderContainer.contains(.containers)
        {
            self.containers = try decoderContainer.decode([Container?]?.self, forKey: .containers)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeContainersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeContainersResultCodingKeys.self)
        try encoderContainer.encode(containers, forKey: .containers)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}

///  容器绑定弹性公网 IP，绑定的是主网卡、主内网IP对应的弹性IP. &lt;br&gt;
      ///       /// 一台云主机只能绑定一个弹性公网 IP(主网卡)，若主网卡已存在弹性公网IP，会返回错误。&lt;br&gt;
      ///       /// 如果是黑名单中的用户，会返回错误。
      ///       /// 
public class AssociateElasticIpRequest:JdCloudRequest
{
    /// 弹性IP ID
    var elasticIpId:String

    /// Container ID
    var containerId:String


    public init(regionId: String,elasticIpId:String,containerId:String){
        self.elasticIpId = elasticIpId
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum AssociateElasticIpRequestRequestCodingKeys: String, CodingKey {
        case elasticIpId
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AssociateElasticIpRequestRequestCodingKeys.self)
        try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}

public class DescribeContainerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeContainerResult?;

    enum DescribeContainerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeContainerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeContainerResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeContainerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeContainerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  修改容器的 名称 和 描述。&lt;br&gt;
      ///       /// name 和 description 必须要指定一个
      ///       /// 
public class ModifyContainerAttributeRequest:JdCloudRequest
{
    /// 容器名称
    var name:String?

    /// 容器描述
    var descriptionValue:String?

    /// Container ID
    var containerId:String


    public init(regionId: String,containerId:String){
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum ModifyContainerAttributeRequestRequestCodingKeys: String, CodingKey {
        case name
        case descriptionValue = "description"
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ModifyContainerAttributeRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}


///  创建exec
      ///       /// 
public class ExecCreateRequest:JdCloudRequest
{
    /// 执行命令
    var command:[String?]?

    /// 执行命令是否添加tty
    var tty:Bool?

    /// Container ID
    var containerId:String


    public init(regionId: String,containerId:String){
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum ExecCreateRequestRequestCodingKeys: String, CodingKey {
        case command
        case tty
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecCreateRequestRequestCodingKeys.self)
        try encoderContainer.encode(command, forKey: .command)
        try encoderContainer.encode(tty, forKey: .tty)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}

/// 创建一台或多台指定配置容器
      ///       /// - 创建容器需要通过实名认证
      ///       /// - 镜像
      ///       ///   - 容器的镜像通过镜像名称来确定
      ///       ///   - nginx:tag, mysql/mysql-server:tag这样命名的镜像表示docker hub官方镜像
      ///       ///   - container-registry/image:tag这样命名的镜像表示私有仓储的镜像
      ///       ///   - 私有仓储必须兼容docker registry认证机制，并通过secret来保存机密信息
      ///       /// - hostname规范
      ///       ///   - 支持两种方式：以标签方式书写或以完整主机名方式书写
      ///       ///   - 标签规范
      ///       ///     - 0-9，a-z(不分大小写)和-（减号），其他的都是无效的字符串
      ///       ///     - 不能以减号开始，也不能以减号结尾
      ///       ///     - 最小1个字符，最大63个字符
      ///       ///   - 完整的主机名由一系列标签与点连接组成
      ///       ///     - 标签与标签之间使用“.”(点)进行连接
      ///       ///     - 不能以“.”(点)开始，也不能以“.”(点)结尾
      ///       ///     - 整个主机名（包括标签以及分隔点“.”）最多有63个ASCII字符
      ///       ///   - 正则表达式
      ///       ///     - ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]))*$
      ///       /// - 网络配置
      ///       ///   - 指定主网卡配置信息
      ///       ///     - 必须指定vpcId、subnetId、securityGroupIds
      ///       ///     - 可以指定elasticIp规格来约束创建的弹性IP，带宽取值范围[1-200]Mbps，步进1Mbps
      ///       ///     - 可以指定网卡的主IP(primaryIpAddress)和辅助IP(secondaryIpAddresses)，此时maxCount只能为1
      ///       ///     - 可以指定希望的辅助IP个数(secondaryIpAddressCount)让系统自动创建内网IP
      ///       ///     - 可以设置网卡的自动删除autoDelete属性，指明是否删除实例时自动删除网卡
      ///       ///     - 安全组securityGroup需与子网Subnet在同一个私有网络VPC内
      ///       ///     - 每个容器至多指定5个安全组
      ///       ///     - 主网卡deviceIndex设置为0
      ///       /// - 存储
      ///       ///   - volume分为root volume和data volume，root volume的挂载目录是/，data volume的挂载目录可以随意指定
      ///       ///   - volume的底层存储介质当前只支持cloud类别，也就是云硬盘
      ///       ///   - 云盘类型为 ssd.io1 时，用户可以指定 iops，其他类型云盘无效，对已经存在的云盘无效，具体规则如下
      ///       ///     - 步长 10
      ///       ///     - 范围 [200，min(32000，size*50)]
      ///       ///     - 默认值 size*30
      ///       ///   - root volume
      ///       ///   - root volume只能是cloud类别
      ///       ///     - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1
      ///       ///     - 磁盘大小
      ///       ///       - 所有类型：范围[10,100]GB，步长为10G
      ///       ///     - 自动删除
      ///       ///       - 默认自动删除
      ///       ///     - 可以选择已存在的云硬盘
      ///       ///   - data volume
      ///       ///     - data volume当前只能选择cloud类别
      ///       ///     - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1
      ///       ///     - 磁盘大小
      ///       ///       - 所有类型：范围[20,4000]GB，步长为10G
      ///       ///     - 自动删除
      ///       ///       - 默认自动删除
      ///       ///     - 可以选择已存在的云硬盘
      ///       ///     - 可以从快照创建磁盘
      ///       ///     - 单个容器可以挂载7个data volume
      ///       /// - 容器日志
      ///       ///   - default：默认在本地分配10MB的存储空间，自动rotate
      ///       /// - 其他
      ///       ///   - 创建完成后，容器状态为running
      ///       ///   - maxCount为最大努力，不保证一定能达到maxCount
      ///       ///  
public class CreateContainersResult:NSObject,JdCloudResult
{
    /// ContainerIds
    var containerIds:[String?]?



    public override init(){
        super.init()
    }

    enum CreateContainersResultCodingKeys: String, CodingKey {
        case containerIds
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateContainersResultCodingKeys.self)
        if decoderContainer.contains(.containerIds)
        {
            self.containerIds = try decoderContainer.decode([String?]?.self, forKey: .containerIds)
        }
    }
}
public extension CreateContainersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateContainersResultCodingKeys.self)
        try encoderContainer.encode(containerIds, forKey: .containerIds)
    }
}
public class StopContainerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopContainerResult?;

    enum StopContainerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopContainerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopContainerResult?.self, forKey: .result) ?? nil
    }
}

public extension StopContainerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopContainerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 调整TTY大小
      ///       ///  
public class ResizeTTYResult:NSObject,JdCloudResult
{
}
public class ResizeTTYResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResizeTTYResult?;

    enum ResizeTTYResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResizeTTYResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResizeTTYResult?.self, forKey: .result) ?? nil
    }
}

public extension ResizeTTYResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResizeTTYResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class CreateContainersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateContainersResult?;

    enum CreateContainersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateContainersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateContainersResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateContainersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateContainersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 启动处于关闭状态的单个容器，处在任务执行中的容器无法启动。&lt;br&gt;
      ///       /// 容器实例或其绑定的云盘已欠费时，容器将无法正常启动。&lt;br&gt;
      ///       ///  
public class StartContainerResult:NSObject,JdCloudResult
{
}

///  重置原生容器，对已有原生容器使用新的镜像重置。
      ///       /// 原容器 id 不变，不涉及计费变动，暂不支持修改实例类型，不会改变原生容器所在的物理节点，也不支持修改已经使用的系统盘和数据盘以及网络相关参数。
      ///       /// - 镜像
      ///       ///     - 容器的镜像通过镜像名称来确定
      ///       ///     - nginx:tag 或 mysql/mysql-server:tag 这样命名的镜像表示 docker hub 官方镜像
      ///       ///     - container-registry/image:tag 这样命名的镜像表示私有仓储的镜像
      ///       ///     - 私有仓储必须兼容 docker registry 认证机制，并通过 secret 来保存机密信息
      ///       /// - 其他
      ///       ///     - rebuild 之前容器必须处于关闭状态
      ///       ///     - rebuild 完成后，容器仍为关闭状态
      ///       /// 
public class RebuildContainerRequest:JdCloudRequest
{
    /// 镜像名称 &lt;/br&gt; 1. Docker Hub官方镜像通过类似nginx, mysql/mysql-server的名字指定 &lt;/br&gt; &lt;/br&gt; repository长度最大256个字符，tag最大128个字符，registry最大255个字符 &lt;/br&gt; 下载镜像超时时间：10分钟
    var image:String

    /// 镜像仓库认证信息；使用Docker Hub和京东云CR的镜像不需要secret
    var secret:String?

    /// 容器启动执行的命令, 如果不指定默认是镜像的ENTRYPOINT. 数组字符总长度范围：[0-256]
    var command:[String?]?

    /// 容器启动执行命令的参数, 如果不指定默认是镜像的CMD. 数组字符总长度范围：[0-2048]
    var args:[String?]?

    /// 容器是否分配tty。默认不分配
    var tty:Bool?

    /// 容器的工作目录。如果不指定，默认是根目录（/），必须是绝对路径。字符长度范围：[0-1024]
    var workingDir:String?

    /// 容器执行的环境变量；如果和镜像中的环境变量Key相同，会覆盖镜像中的值；&lt;/br&gt; 最大100对
    var envs:[EnvVar?]?

    /// Container ID
    var containerId:String


    public init(regionId: String,image:String,containerId:String){
        self.image = image
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum RebuildContainerRequestRequestCodingKeys: String, CodingKey {
        case image
        case secret
        case command
        case args
        case tty
        case workingDir
        case envs
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RebuildContainerRequestRequestCodingKeys.self)
        try encoderContainer.encode(image, forKey: .image)
        try encoderContainer.encode(secret, forKey: .secret)
        try encoderContainer.encode(command, forKey: .command)
        try encoderContainer.encode(args, forKey: .args)
        try encoderContainer.encode(tty, forKey: .tty)
        try encoderContainer.encode(workingDir, forKey: .workingDir)
        try encoderContainer.encode(envs, forKey: .envs)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}


///  批量查询原生容器的详细信息&lt;br&gt;
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       /// 
public class DescribeContainersRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// containerId - 实例ID，精确匹配，支持多个
      /// privateIpAddress - 主网卡IP地址，模糊匹配，支持单个
      /// az - 可用区，精确匹配，支持多个
      /// vpcId - 私有网络ID，精确匹配，支持多个
      /// status - 容器状态，精确匹配，支持多个
      /// name - 实例名称，模糊匹配，支持单个
      /// subnetId - 镜像ID，模糊匹配，支持单个
      /// securityGroups - 安全组 id，精确匹配，支持多个
      /// 
    var filters:[Filter?]?

    /// Tag筛选条件
    var tags:[TagFilter?]?




    enum DescribeContainersRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
        case tags
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeContainersRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)
        try encoderContainer.encode(tags, forKey: .tags)

    }
}

/// 查询单个容器日志
      ///       ///  
public class GetLogsResult:NSObject,JdCloudResult
{
    /// Logs
    var logs:Logs?



    public override init(){
        super.init()
    }

    enum GetLogsResultCodingKeys: String, CodingKey {
        case logs
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetLogsResultCodingKeys.self)
        if decoderContainer.contains(.logs)
        {
            self.logs = try decoderContainer.decode(Logs?.self, forKey: .logs)
        }
    }
}
public extension GetLogsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetLogsResultCodingKeys.self)
        try encoderContainer.encode(logs, forKey: .logs)
    }
}
/// 获取exec退出码
      ///       ///  
public class ExecGetExitCodeResult:NSObject,JdCloudResult
{
    /// ExitCode
    var exitCode:Int?



    public override init(){
        super.init()
    }

    enum ExecGetExitCodeResultCodingKeys: String, CodingKey {
        case exitCode
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecGetExitCodeResultCodingKeys.self)
        if decoderContainer.contains(.exitCode)
        {
            self.exitCode = try decoderContainer.decode(Int?.self, forKey: .exitCode)
        }
    }
}
public extension ExecGetExitCodeResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecGetExitCodeResultCodingKeys.self)
        try encoderContainer.encode(exitCode, forKey: .exitCode)
    }
}
public class ExecCreateResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ExecCreateResult?;

    enum ExecCreateResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecCreateResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ExecCreateResult?.self, forKey: .result) ?? nil
    }
}

public extension ExecCreateResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecCreateResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  创建一台或多台指定配置容器
      ///       /// - 创建容器需要通过实名认证
      ///       /// - 镜像
      ///       ///   - 容器的镜像通过镜像名称来确定
      ///       ///   - nginx:tag, mysql/mysql-server:tag这样命名的镜像表示docker hub官方镜像
      ///       ///   - container-registry/image:tag这样命名的镜像表示私有仓储的镜像
      ///       ///   - 私有仓储必须兼容docker registry认证机制，并通过secret来保存机密信息
      ///       /// - hostname规范
      ///       ///   - 支持两种方式：以标签方式书写或以完整主机名方式书写
      ///       ///   - 标签规范
      ///       ///     - 0-9，a-z(不分大小写)和-（减号），其他的都是无效的字符串
      ///       ///     - 不能以减号开始，也不能以减号结尾
      ///       ///     - 最小1个字符，最大63个字符
      ///       ///   - 完整的主机名由一系列标签与点连接组成
      ///       ///     - 标签与标签之间使用“.”(点)进行连接
      ///       ///     - 不能以“.”(点)开始，也不能以“.”(点)结尾
      ///       ///     - 整个主机名（包括标签以及分隔点“.”）最多有63个ASCII字符
      ///       ///   - 正则表达式
      ///       ///     - ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]))*$
      ///       /// - 网络配置
      ///       ///   - 指定主网卡配置信息
      ///       ///     - 必须指定vpcId、subnetId、securityGroupIds
      ///       ///     - 可以指定elasticIp规格来约束创建的弹性IP，带宽取值范围[1-200]Mbps，步进1Mbps
      ///       ///     - 可以指定网卡的主IP(primaryIpAddress)和辅助IP(secondaryIpAddresses)，此时maxCount只能为1
      ///       ///     - 可以指定希望的辅助IP个数(secondaryIpAddressCount)让系统自动创建内网IP
      ///       ///     - 可以设置网卡的自动删除autoDelete属性，指明是否删除实例时自动删除网卡
      ///       ///     - 安全组securityGroup需与子网Subnet在同一个私有网络VPC内
      ///       ///     - 每个容器至多指定5个安全组
      ///       ///     - 主网卡deviceIndex设置为0
      ///       /// - 存储
      ///       ///   - volume分为root volume和data volume，root volume的挂载目录是/，data volume的挂载目录可以随意指定
      ///       ///   - volume的底层存储介质当前只支持cloud类别，也就是云硬盘
      ///       ///   - 云盘类型为 ssd.io1 时，用户可以指定 iops，其他类型云盘无效，对已经存在的云盘无效，具体规则如下
      ///       ///     - 步长 10
      ///       ///     - 范围 [200，min(32000，size*50)]
      ///       ///     - 默认值 size*30
      ///       ///   - root volume
      ///       ///   - root volume只能是cloud类别
      ///       ///     - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1
      ///       ///     - 磁盘大小
      ///       ///       - 所有类型：范围[10,100]GB，步长为10G
      ///       ///     - 自动删除
      ///       ///       - 默认自动删除
      ///       ///     - 可以选择已存在的云硬盘
      ///       ///   - data volume
      ///       ///     - data volume当前只能选择cloud类别
      ///       ///     - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1
      ///       ///     - 磁盘大小
      ///       ///       - 所有类型：范围[20,4000]GB，步长为10G
      ///       ///     - 自动删除
      ///       ///       - 默认自动删除
      ///       ///     - 可以选择已存在的云硬盘
      ///       ///     - 可以从快照创建磁盘
      ///       ///     - 单个容器可以挂载7个data volume
      ///       /// - 容器日志
      ///       ///   - default：默认在本地分配10MB的存储空间，自动rotate
      ///       /// - 其他
      ///       ///   - 创建完成后，容器状态为running
      ///       ///   - maxCount为最大努力，不保证一定能达到maxCount
      ///       /// 
public class CreateContainersRequest:JdCloudRequest
{
    /// 创建容器规格
    var containerSpec:ContainerSpec

    /// 购买实例数量；取值范围：[1,100]
    var maxCount:Int

    /// 保证请求幂等性
    var clientToken:String?


    public init(regionId: String,containerSpec:ContainerSpec,maxCount:Int){
        self.containerSpec = containerSpec
        self.maxCount = maxCount
        super.init(regionId: regionId)
    }


    enum CreateContainersRequestRequestCodingKeys: String, CodingKey {
        case containerSpec
        case maxCount
        case clientToken
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateContainersRequestRequestCodingKeys.self)
        try encoderContainer.encode(containerSpec, forKey: .containerSpec)
        try encoderContainer.encode(maxCount, forKey: .maxCount)
        try encoderContainer.encode(clientToken, forKey: .clientToken)

    }
}

/// 查询一台原生容器的详细信息
      ///       ///  
public class DescribeContainerResult:NSObject,JdCloudResult
{
    /// Container
    var container:Container?



    public override init(){
        super.init()
    }

    enum DescribeContainerResultCodingKeys: String, CodingKey {
        case container
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeContainerResultCodingKeys.self)
        if decoderContainer.contains(.container)
        {
            self.container = try decoderContainer.decode(Container?.self, forKey: .container)
        }
    }
}
public extension DescribeContainerResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeContainerResultCodingKeys.self)
        try encoderContainer.encode(container, forKey: .container)
    }
}
public class DeleteContainerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteContainerResult?;

    enum DeleteContainerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteContainerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteContainerResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteContainerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteContainerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询单个容器日志
      ///       /// 
public class GetLogsRequest:JdCloudRequest
{
    /// 返回日志文件中倒数 tailLines 行，如不指定，默认从容器启动时或 sinceSeconds 指定的时间读取。
      /// 
    var tailLines:Int?

    /// 返回相对于当前时间之前sinceSeconds之内的日志。
      /// 
    var sinceSeconds:Int?

    /// 限制返回的日志文件内容字节数，取值范围 [1-4]KB，最大 4KB.
      /// 
    var limitBytes:Int?

    /// Container ID
    var containerId:String


    public init(regionId: String,containerId:String){
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum GetLogsRequestRequestCodingKeys: String, CodingKey {
        case tailLines
        case sinceSeconds
        case limitBytes
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetLogsRequestRequestCodingKeys.self)
        try encoderContainer.encode(tailLines, forKey: .tailLines)
        try encoderContainer.encode(sinceSeconds, forKey: .sinceSeconds)
        try encoderContainer.encode(limitBytes, forKey: .limitBytes)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}


///  调整TTY大小
      ///       /// 
public class ResizeTTYRequest:JdCloudRequest
{
    /// tty row
    var height:Int

    /// tty column
    var width:Int

    /// exec ID
    var execId:String?

    /// Container ID
    var containerId:String


    public init(regionId: String,height:Int,width:Int,containerId:String){
        self.height = height
        self.width = width
        self.containerId = containerId
        super.init(regionId: regionId)
    }


    enum ResizeTTYRequestRequestCodingKeys: String, CodingKey {
        case height
        case width
        case execId
        case containerId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResizeTTYRequestRequestCodingKeys.self)
        try encoderContainer.encode(height, forKey: .height)
        try encoderContainer.encode(width, forKey: .width)
        try encoderContainer.encode(execId, forKey: .execId)
        try encoderContainer.encode(containerId, forKey: .containerId)

    }
}

public class GetLogsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetLogsResult?;

    enum GetLogsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetLogsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetLogsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetLogsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetLogsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DisassociateElasticIpResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DisassociateElasticIpResult?;

    enum DisassociateElasticIpResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DisassociateElasticIpResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DisassociateElasticIpResult?.self, forKey: .result) ?? nil
    }
}

public extension DisassociateElasticIpResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DisassociateElasticIpResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 创建exec
      ///       ///  
public class ExecCreateResult:NSObject,JdCloudResult
{
    /// ExecId
    var execId:String?



    public override init(){
        super.init()
    }

    enum ExecCreateResultCodingKeys: String, CodingKey {
        case execId
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ExecCreateResultCodingKeys.self)
        if decoderContainer.contains(.execId)
        {
            self.execId = try decoderContainer.decode(String?.self, forKey: .execId)
        }
    }
}
public extension ExecCreateResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ExecCreateResultCodingKeys.self)
        try encoderContainer.encode(execId, forKey: .execId)
    }
}
public class ResizeContainerResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ResizeContainerResult?;

    enum ResizeContainerResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResizeContainerResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ResizeContainerResult?.self, forKey: .result) ?? nil
    }
}

public extension ResizeContainerResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResizeContainerResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DeleteSecretResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeleteSecretResult?;

    enum DeleteSecretResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeleteSecretResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeleteSecretResult?.self, forKey: .result) ?? nil
    }
}

public extension DeleteSecretResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecretResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询 secret 列表。&lt;br&gt; 
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       ///  
public class DescribeSecretsResult:NSObject,JdCloudResult
{
    /// Secrets
    var secrets:[Secret?]?

    /// TotalCount
    var totalCount:Double?



    public override init(){
        super.init()
    }

    enum DescribeSecretsResultCodingKeys: String, CodingKey {
        case secrets
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretsResultCodingKeys.self)
        if decoderContainer.contains(.secrets)
        {
            self.secrets = try decoderContainer.decode([Secret?]?.self, forKey: .secrets)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Double?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeSecretsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretsResultCodingKeys.self)
        try encoderContainer.encode(secrets, forKey: .secrets)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
public class DescribeSecretsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSecretsResult?;

    enum DescribeSecretsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSecretsResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSecretsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  删除单个 secret
      ///       /// 
public class DeleteSecretRequest:JdCloudRequest
{
    /// Secret Name
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum DeleteSecretRequestRequestCodingKeys: String, CodingKey {
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeleteSecretRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)

    }
}

/// 创建一个 secret，用于存放镜像仓库认证信息。
      ///       ///  
public class CreateSecretResult:NSObject,JdCloudResult
{
    /// SecretName
    var secretName:String?



    public override init(){
        super.init()
    }

    enum CreateSecretResultCodingKeys: String, CodingKey {
        case secretName
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSecretResultCodingKeys.self)
        if decoderContainer.contains(.secretName)
        {
            self.secretName = try decoderContainer.decode(String?.self, forKey: .secretName)
        }
    }
}
public extension CreateSecretResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecretResultCodingKeys.self)
        try encoderContainer.encode(secretName, forKey: .secretName)
    }
}
public class DescribeSecretResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeSecretResult?;

    enum DescribeSecretResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeSecretResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeSecretResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询单个 secret 详情
      ///       /// 
public class DescribeSecretRequest:JdCloudRequest
{
    /// Secret Name
    var name:String


    public init(regionId: String,name:String){
        self.name = name
        super.init(regionId: regionId)
    }


    enum DescribeSecretRequestRequestCodingKeys: String, CodingKey {
        case name
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)

    }
}

public class CreateSecretResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreateSecretResult?;

    enum CreateSecretResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreateSecretResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreateSecretResult?.self, forKey: .result) ?? nil
    }
}

public extension CreateSecretResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecretResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询单个 secret 详情
      ///       ///  
public class DescribeSecretResult:NSObject,JdCloudResult
{
    /// Secret
    var secret:Secret?



    public override init(){
        super.init()
    }

    enum DescribeSecretResultCodingKeys: String, CodingKey {
        case secret
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeSecretResultCodingKeys.self)
        if decoderContainer.contains(.secret)
        {
            self.secret = try decoderContainer.decode(Secret?.self, forKey: .secret)
        }
    }
}
public extension DescribeSecretResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretResultCodingKeys.self)
        try encoderContainer.encode(secret, forKey: .secret)
    }
}

///  创建一个 secret，用于存放镜像仓库认证信息。
      ///       /// 
public class CreateSecretRequest:JdCloudRequest
{
    /// 镜像仓库认证信息名称，不能重复
      /// 
    var name:String

    /// 镜像仓库认证信息类型，目前仅支持：docker-registry 类型，用来和docker registry认证的类型。
      /// 
    var secretType:String

    /// 镜像仓库认证信息数据。&lt;br&gt;
      /// 必须包含server、username、password 字段，email 字段是可选的。&lt;br&gt;
      /// 
    var data:DockerRegistryData


    public init(regionId: String,name:String,secretType:String,data:DockerRegistryData){
        self.name = name
        self.secretType = secretType
        self.data = data
        super.init(regionId: regionId)
    }


    enum CreateSecretRequestRequestCodingKeys: String, CodingKey {
        case name
        case secretType
        case data
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreateSecretRequestRequestCodingKeys.self)
        try encoderContainer.encode(name, forKey: .name)
        try encoderContainer.encode(secretType, forKey: .secretType)
        try encoderContainer.encode(data, forKey: .data)

    }
}


///  查询 secret 列表。&lt;br&gt; 
      ///       /// 此接口支持分页查询，默认每页20条。
      ///       /// 
public class DescribeSecretsRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为20；取值范围[10, 100]
    var pageSize:Int?

    /// name - secret名称，支持模糊搜索
      /// 
    var filters:[Filter?]?




    enum DescribeSecretsRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeSecretsRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 删除单个 secret
      ///       ///  
public class DeleteSecretResult:NSObject,JdCloudResult
{
}
