/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  创建网卡请求模板
@objc(NetworkInterfaceSpec)
public class NetworkInterfaceSpec:NSObject,Codable{
    /// 子网ID
    /// Required:true
    var subnetId:String
    /// 可用区，用户的默认可用区
    /// Required:true
    var az:String
    /// 网卡主IP
    var primaryIpAddress:String?
    /// SecondaryIp列表
    var secondaryIpAddresses:[String?]?
    /// 自动分配的SecondaryIp数量
    var secondaryIpCount:Int?
    /// 安全组ID列表
    var securityGroups:[String?]?
    /// PortSecurity，取值为0或者1，默认为1
    var sanityCheck:Bool?
    /// 描述
    var descriptionValue:String?



    public  init(subnetId:String,az:String){
             self.subnetId = subnetId
             self.az = az
    }

    enum NetworkInterfaceSpecCodingKeys: String, CodingKey {
        case subnetId
        case az
        case primaryIpAddress
        case secondaryIpAddresses
        case secondaryIpCount
        case securityGroups
        case sanityCheck
        case descriptionValue = "description"
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: NetworkInterfaceSpecCodingKeys.self)
        self.subnetId = try decoderContainer.decode(String.self, forKey: .subnetId)
        self.az = try decoderContainer.decode(String.self, forKey: .az)
        if decoderContainer.contains(.primaryIpAddress)
        {
            self.primaryIpAddress = try decoderContainer.decode(String?.self, forKey: .primaryIpAddress)
        }
        if decoderContainer.contains(.secondaryIpAddresses)
        {
            self.secondaryIpAddresses = try decoderContainer.decode([String?]?.self, forKey: .secondaryIpAddresses)
        }
        if decoderContainer.contains(.secondaryIpCount)
        {
            self.secondaryIpCount = try decoderContainer.decode(Int?.self, forKey: .secondaryIpCount)
        }
        if decoderContainer.contains(.securityGroups)
        {
            self.securityGroups = try decoderContainer.decode([String?]?.self, forKey: .securityGroups)
        }
        if decoderContainer.contains(.sanityCheck)
        {
            self.sanityCheck = try decoderContainer.decode(Bool?.self, forKey: .sanityCheck)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
    }
}
public extension NetworkInterfaceSpec{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: NetworkInterfaceSpecCodingKeys.self)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(primaryIpAddress, forKey: .primaryIpAddress)
         try encoderContainer.encode(secondaryIpAddresses, forKey: .secondaryIpAddresses)
         try encoderContainer.encode(secondaryIpCount, forKey: .secondaryIpCount)
         try encoderContainer.encode(securityGroups, forKey: .securityGroups)
         try encoderContainer.encode(sanityCheck, forKey: .sanityCheck)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
    }
}
