/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCharge

///  container
@objc(Container)
public class Container:NSObject,Codable{
    /// 容器ID
    var containerId:String?
    /// 容器状态
    var status:String?
    /// 实例类型
    var instanceType:String?
    /// 可用区
    var az:String?
    /// 容器名称
    var name:String?
    /// 域名和IP映射的信息
    var hostAliases:[HostAlias?]?
    /// 主机名
    var hostname:String?
    /// 容器执行命令
    var command:[String?]?
    /// 容器执行命令的参数
    var args:[String?]?
    /// 动态指定的容器执行的环境变量
    var envs:[EnvVar?]?
    /// 镜像名称
    var image:String?
    /// secret引用的名称
    var secret:String?
    /// 容器是否分配tty
    var tty:Bool?
    /// 容器的工作目录
    var workingDir:String?
    /// 根Volume信息
    var rootVolume:VolumeMount?
    /// 挂载的数据Volume信息
    var dataVolumes:[VolumeMount?]?
    /// 主网卡所属VPC的ID
    var vpcId:String?
    /// 主网卡所属子网的ID
    var subnetId:String?
    /// 主网卡主IP地址
    var privateIpAddress:String?
    /// 主网卡主IP绑定弹性IP的ID
    var elasticIpId:String?
    /// 主网卡主IP绑定弹性IP的地址
    var elasticIpAddress:String?
    /// 主网卡信息
    var primaryNetworkInterface:InstanceNetworkInterfaceAttachment?
    /// 弹性网卡信息
    var secondaryNetworkInterfaces:[InstanceNetworkInterfaceAttachment?]?
    /// 容器日志配置信息
    var logConfiguration:LogConfiguration?
    /// Tags
    var tags:[Tag?]?
    /// 计费配置信息
    var charge:Charge?
    /// 创建时间
    var launchTime:String?
    /// 容器终止原因
    var reason:String?
    /// 容器描述
    var descriptionValue:String?



    public override init(){
            super.init()
    }

    enum ContainerCodingKeys: String, CodingKey {
        case containerId
        case status
        case instanceType
        case az
        case name
        case hostAliases
        case hostname
        case command
        case args
        case envs
        case image
        case secret
        case tty
        case workingDir
        case rootVolume
        case dataVolumes
        case vpcId
        case subnetId
        case privateIpAddress
        case elasticIpId
        case elasticIpAddress
        case primaryNetworkInterface
        case secondaryNetworkInterfaces
        case logConfiguration
        case tags
        case charge
        case launchTime
        case reason
        case descriptionValue = "description"
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ContainerCodingKeys.self)
        if decoderContainer.contains(.containerId)
        {
            self.containerId = try decoderContainer.decode(String?.self, forKey: .containerId)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
        if decoderContainer.contains(.instanceType)
        {
            self.instanceType = try decoderContainer.decode(String?.self, forKey: .instanceType)
        }
        if decoderContainer.contains(.az)
        {
            self.az = try decoderContainer.decode(String?.self, forKey: .az)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.hostAliases)
        {
            self.hostAliases = try decoderContainer.decode([HostAlias?]?.self, forKey: .hostAliases)
        }
        if decoderContainer.contains(.hostname)
        {
            self.hostname = try decoderContainer.decode(String?.self, forKey: .hostname)
        }
        if decoderContainer.contains(.command)
        {
            self.command = try decoderContainer.decode([String?]?.self, forKey: .command)
        }
        if decoderContainer.contains(.args)
        {
            self.args = try decoderContainer.decode([String?]?.self, forKey: .args)
        }
        if decoderContainer.contains(.envs)
        {
            self.envs = try decoderContainer.decode([EnvVar?]?.self, forKey: .envs)
        }
        if decoderContainer.contains(.image)
        {
            self.image = try decoderContainer.decode(String?.self, forKey: .image)
        }
        if decoderContainer.contains(.secret)
        {
            self.secret = try decoderContainer.decode(String?.self, forKey: .secret)
        }
        if decoderContainer.contains(.tty)
        {
            self.tty = try decoderContainer.decode(Bool?.self, forKey: .tty)
        }
        if decoderContainer.contains(.workingDir)
        {
            self.workingDir = try decoderContainer.decode(String?.self, forKey: .workingDir)
        }
        if decoderContainer.contains(.rootVolume)
        {
            self.rootVolume = try decoderContainer.decode(VolumeMount?.self, forKey: .rootVolume)
        }
        if decoderContainer.contains(.dataVolumes)
        {
            self.dataVolumes = try decoderContainer.decode([VolumeMount?]?.self, forKey: .dataVolumes)
        }
        if decoderContainer.contains(.vpcId)
        {
            self.vpcId = try decoderContainer.decode(String?.self, forKey: .vpcId)
        }
        if decoderContainer.contains(.subnetId)
        {
            self.subnetId = try decoderContainer.decode(String?.self, forKey: .subnetId)
        }
        if decoderContainer.contains(.privateIpAddress)
        {
            self.privateIpAddress = try decoderContainer.decode(String?.self, forKey: .privateIpAddress)
        }
        if decoderContainer.contains(.elasticIpId)
        {
            self.elasticIpId = try decoderContainer.decode(String?.self, forKey: .elasticIpId)
        }
        if decoderContainer.contains(.elasticIpAddress)
        {
            self.elasticIpAddress = try decoderContainer.decode(String?.self, forKey: .elasticIpAddress)
        }
        if decoderContainer.contains(.primaryNetworkInterface)
        {
            self.primaryNetworkInterface = try decoderContainer.decode(InstanceNetworkInterfaceAttachment?.self, forKey: .primaryNetworkInterface)
        }
        if decoderContainer.contains(.secondaryNetworkInterfaces)
        {
            self.secondaryNetworkInterfaces = try decoderContainer.decode([InstanceNetworkInterfaceAttachment?]?.self, forKey: .secondaryNetworkInterfaces)
        }
        if decoderContainer.contains(.logConfiguration)
        {
            self.logConfiguration = try decoderContainer.decode(LogConfiguration?.self, forKey: .logConfiguration)
        }
        if decoderContainer.contains(.tags)
        {
            self.tags = try decoderContainer.decode([Tag?]?.self, forKey: .tags)
        }
        if decoderContainer.contains(.charge)
        {
            self.charge = try decoderContainer.decode(Charge?.self, forKey: .charge)
        }
        if decoderContainer.contains(.launchTime)
        {
            self.launchTime = try decoderContainer.decode(String?.self, forKey: .launchTime)
        }
        if decoderContainer.contains(.reason)
        {
            self.reason = try decoderContainer.decode(String?.self, forKey: .reason)
        }
        if decoderContainer.contains(.descriptionValue)
        {
            self.descriptionValue = try decoderContainer.decode(String?.self, forKey: .descriptionValue)
        }
    }
}
public extension Container{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ContainerCodingKeys.self)
         try encoderContainer.encode(containerId, forKey: .containerId)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(instanceType, forKey: .instanceType)
         try encoderContainer.encode(az, forKey: .az)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(hostAliases, forKey: .hostAliases)
         try encoderContainer.encode(hostname, forKey: .hostname)
         try encoderContainer.encode(command, forKey: .command)
         try encoderContainer.encode(args, forKey: .args)
         try encoderContainer.encode(envs, forKey: .envs)
         try encoderContainer.encode(image, forKey: .image)
         try encoderContainer.encode(secret, forKey: .secret)
         try encoderContainer.encode(tty, forKey: .tty)
         try encoderContainer.encode(workingDir, forKey: .workingDir)
         try encoderContainer.encode(rootVolume, forKey: .rootVolume)
         try encoderContainer.encode(dataVolumes, forKey: .dataVolumes)
         try encoderContainer.encode(vpcId, forKey: .vpcId)
         try encoderContainer.encode(subnetId, forKey: .subnetId)
         try encoderContainer.encode(privateIpAddress, forKey: .privateIpAddress)
         try encoderContainer.encode(elasticIpId, forKey: .elasticIpId)
         try encoderContainer.encode(elasticIpAddress, forKey: .elasticIpAddress)
         try encoderContainer.encode(primaryNetworkInterface, forKey: .primaryNetworkInterface)
         try encoderContainer.encode(secondaryNetworkInterfaces, forKey: .secondaryNetworkInterfaces)
         try encoderContainer.encode(logConfiguration, forKey: .logConfiguration)
         try encoderContainer.encode(tags, forKey: .tags)
         try encoderContainer.encode(charge, forKey: .charge)
         try encoderContainer.encode(launchTime, forKey: .launchTime)
         try encoderContainer.encode(reason, forKey: .reason)
         try encoderContainer.encode(descriptionValue, forKey: .descriptionValue)
    }
}
