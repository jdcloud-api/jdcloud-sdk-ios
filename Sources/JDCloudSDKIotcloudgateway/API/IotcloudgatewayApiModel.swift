/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   iotcloudgateway开通接口
   用户开通iotcloudgateway服务相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  查询iotcloudgateway实例详情
public class DescribeInstanceRequest:JdCloudRequest
{
    /// 实例ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DescribeInstanceRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class DeviceControlResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeviceControlResult?;

    enum DeviceControlResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeviceControlResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeviceControlResult?.self, forKey: .result) ?? nil
    }
}

public extension DeviceControlResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeviceControlResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询instance绑定的ExposedDomain
public class QueryInstanceExposeDomainRequest:JdCloudRequest
{
    /// 实例ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum QueryInstanceExposeDomainRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryInstanceExposeDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

public class QueryInstanceExposeDomainResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryInstanceExposeDomainResult?;

    enum QueryInstanceExposeDomainResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryInstanceExposeDomainResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryInstanceExposeDomainResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryInstanceExposeDomainResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryInstanceExposeDomainResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询iotcloudgateway实例列表
public class DescribeInstancesRequest:JdCloudRequest
{
    /// 页码
    var pageNumber:Int?

    /// 分页大小
    var pageSize:Int?




    enum DescribeInstancesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)

    }
}

/// 查询instance当前状态 
public class QueryInstanceStatusResult:NSObject,JdCloudResult
{
    /// iotcloudgateway实例状态
    var status:String?



    public override init(){
        super.init()
    }

    enum QueryInstanceStatusResultCodingKeys: String, CodingKey {
        case status
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryInstanceStatusResultCodingKeys.self)
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(String?.self, forKey: .status)
        }
    }
}
public extension QueryInstanceStatusResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryInstanceStatusResultCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
    }
}
public class QueryInstanceStatusResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:QueryInstanceStatusResult?;

    enum QueryInstanceStatusResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryInstanceStatusResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(QueryInstanceStatusResult?.self, forKey: .result) ?? nil
    }
}

public extension QueryInstanceStatusResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryInstanceStatusResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class DescribeInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstancesResult?;

    enum DescribeInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询iotcloudgateway实例列表 
public class DescribeInstancesResult:NSObject,JdCloudResult
{
    /// iotcloudgateway实例相关信息
    var instances:[Instance?]?

    /// iotcloudgateway实例总数
    var totalCount:Int?



    public override init(){
        super.init()
    }

    enum DescribeInstancesResultCodingKeys: String, CodingKey {
        case instances
        case totalCount
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        if decoderContainer.contains(.instances)
        {
            self.instances = try decoderContainer.decode([Instance?]?.self, forKey: .instances)
        }
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
    }
}
public extension DescribeInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstancesResultCodingKeys.self)
        try encoderContainer.encode(instances, forKey: .instances)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
    }
}
/// 查询iotcloudgateway实例详情 
public class DescribeInstanceResult:NSObject,JdCloudResult
{
    /// 实例相关信息
    var instance:Instance?



    public override init(){
        super.init()
    }

    enum DescribeInstanceResultCodingKeys: String, CodingKey {
        case instance
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceResultCodingKeys.self)
        if decoderContainer.contains(.instance)
        {
            self.instance = try decoderContainer.decode(Instance?.self, forKey: .instance)
        }
    }
}
public extension DescribeInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceResultCodingKeys.self)
        try encoderContainer.encode(instance, forKey: .instance)
    }
}
public class DescribeInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DescribeInstanceResult?;

    enum DescribeInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DescribeInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DescribeInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension DescribeInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DescribeInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询instance绑定的ExposedDomain 
public class QueryInstanceExposeDomainResult:NSObject,JdCloudResult
{
    /// 实例对应下行域名
    var iotgwd:String?

    /// 实例对应上行域名
    var iotgwu:String?



    public override init(){
        super.init()
    }

    enum QueryInstanceExposeDomainResultCodingKeys: String, CodingKey {
        case iotgwd
        case iotgwu
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: QueryInstanceExposeDomainResultCodingKeys.self)
        if decoderContainer.contains(.iotgwd)
        {
            self.iotgwd = try decoderContainer.decode(String?.self, forKey: .iotgwd)
        }
        if decoderContainer.contains(.iotgwu)
        {
            self.iotgwu = try decoderContainer.decode(String?.self, forKey: .iotgwu)
        }
    }
}
public extension QueryInstanceExposeDomainResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryInstanceExposeDomainResultCodingKeys.self)
        try encoderContainer.encode(iotgwd, forKey: .iotgwd)
        try encoderContainer.encode(iotgwu, forKey: .iotgwu)
    }
}

///  下发设备控制指令
public class DeviceControlRequest:JdCloudRequest
{
    /// iotcloudgateway实例下发设备控制指令
    var devicecmd:DeviceControlSpec

    /// 实例ID
    var instanceId:String


    public init(regionId: String,devicecmd:DeviceControlSpec,instanceId:String){
        self.devicecmd = devicecmd
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum DeviceControlRequestRequestCodingKeys: String, CodingKey {
        case devicecmd
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeviceControlRequestRequestCodingKeys.self)
        try encoderContainer.encode(devicecmd, forKey: .devicecmd)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

/// 下发设备控制指令 
public class DeviceControlResult:NSObject,JdCloudResult
{
}

///  查询instance当前状态
public class QueryInstanceStatusRequest:JdCloudRequest
{
    /// 实例ID
    var instanceId:String


    public init(regionId: String,instanceId:String){
        self.instanceId = instanceId
        super.init(regionId: regionId)
    }


    enum QueryInstanceStatusRequestRequestCodingKeys: String, CodingKey {
        case instanceId
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: QueryInstanceStatusRequestRequestCodingKeys.self)
        try encoderContainer.encode(instanceId, forKey: .instanceId)

    }
}

