/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云流水线
   云流水线API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class PipelineJDCloudClient:NSObject,JDCloudClient{
    
    private final var pipelineJDCloudClient:PipelineJDCloudClient!


    public convenience init(credential:Credential,sdkEnvironment:SDKEnvironment) {
        self.init()
        self.credential = credential
        self.sdkEnvironment = sdkEnvironment
        pipelineJDCloudClient = self
    }


    public override init() {

        if(GlobalConfig.credential == nil)
        {
            GlobalConfig.credential = Credential(accessKeyId: "",secretAccessKey: "")
        }
        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "pipeline.jdcloud-api.com");
        }
        self.credential = GlobalConfig.credential!
        self.sdkEnvironment = sdkEnvironment
        super.init()
        pipelineJDCloudClient = self
    }
    
    public let userAgent: String = "JdcloudSdkSwift/" + "0.0.1/" + "pipeline/" + "v1"
    
    public let serviceName: String = "pipeline"
    
    public let version: String = "v1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()

    public var httpRequestProtocol: String = "https"

    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }



    
    public func getPipelinesAsync(request:GetPipelinesRequest,requestComplation:@escaping ExecuteResult<GetPipelinesResult>) throws {
        pipelineJDCloudClient = self
        try GetPipelinesExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func startPipelineAsync(request:StartPipelineRequest,requestComplation:@escaping ExecuteResult<StartPipelineResult>) throws {
        pipelineJDCloudClient = self
        try StartPipelineExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func createPipelineAsync(request:CreatePipelineRequest,requestComplation:@escaping ExecuteResult<CreatePipelineResult>) throws {
        pipelineJDCloudClient = self
        try CreatePipelineExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func updatePipelineAsync(request:UpdatePipelineRequest,requestComplation:@escaping ExecuteResult<UpdatePipelineResult>) throws {
        pipelineJDCloudClient = self
        try UpdatePipelineExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func readFileAsync(request:ReadFileRequest,requestComplation:@escaping ExecuteResult<ReadFileResult>) throws {
        pipelineJDCloudClient = self
        try ReadFileExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getPipelineAsync(request:GetPipelineRequest,requestComplation:@escaping ExecuteResult<GetPipelineResult>) throws {
        pipelineJDCloudClient = self
        try GetPipelineExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getLimitsAsync(request:GetLimitsRequest,requestComplation:@escaping ExecuteResult<GetLimitsResult>) throws {
        pipelineJDCloudClient = self
        try GetLimitsExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func deletePipelineAsync(request:DeletePipelineRequest,requestComplation:@escaping ExecuteResult<DeletePipelineResult>) throws {
        pipelineJDCloudClient = self
        try DeletePipelineExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getPipelineInstancesAsync(request:GetPipelineInstancesRequest,requestComplation:@escaping ExecuteResult<GetPipelineInstancesResult>) throws {
        pipelineJDCloudClient = self
        try GetPipelineInstancesExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func manualActionAsync(request:ManualActionRequest,requestComplation:@escaping ExecuteResult<ManualActionResult>) throws {
        pipelineJDCloudClient = self
        try ManualActionExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getPipelineInstanceAsync(request:GetPipelineInstanceRequest,requestComplation:@escaping ExecuteResult<GetPipelineInstanceResult>) throws {
        pipelineJDCloudClient = self
        try GetPipelineInstanceExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func stopPipelineInstanceAsync(request:StopPipelineInstanceRequest,requestComplation:@escaping ExecuteResult<StopPipelineInstanceResult>) throws {
        pipelineJDCloudClient = self
        try StopPipelineInstanceExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getSourceProvidersAsync(request:GetSourceProvidersRequest,requestComplation:@escaping ExecuteResult<GetSourceProvidersResult>) throws {
        pipelineJDCloudClient = self
        try GetSourceProvidersExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getOperationProvidersAsync(request:GetOperationProvidersRequest,requestComplation:@escaping ExecuteResult<GetOperationProvidersResult>) throws {
        pipelineJDCloudClient = self
        try GetOperationProvidersExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getPipelineInstancesByUuidsAsync(request:GetPipelineInstancesByUuidsRequest,requestComplation:@escaping ExecuteResult<GetPipelineInstancesByUuidsResult>) throws {
        pipelineJDCloudClient = self
        try GetPipelineInstancesByUuidsExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }

    
    public func getRegionsAsync(request:GetRegionsRequest,requestComplation:@escaping ExecuteResult<GetRegionsResult>) throws {
        pipelineJDCloudClient = self
        try GetRegionsExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request) { (statusCode,result,error,data) in
            requestComplation(statusCode,result,error,data)

        }
    }
    
}


public extension PipelineJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "pipeline.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }
}
