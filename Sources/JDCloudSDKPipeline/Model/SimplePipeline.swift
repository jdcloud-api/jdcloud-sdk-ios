/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  simplePipeline
@objc(SimplePipeline)
public class SimplePipeline:NSObject,Codable{
    /// 流水线的uuid
    var uuid:String?
    /// 流水线名称
    var name:String?
    /// 开始执行流水线的时间
    var startedAt:Int?
    /// 最近一次执行的状态(数据结构待商定)
    var latestStatus:String?
    /// 最新一次执行的实例ID
    var latestInstanceUuid:String?



    public override init(){
            super.init()
    }

    enum SimplePipelineCodingKeys: String, CodingKey {
        case uuid
        case name
        case startedAt
        case latestStatus
        case latestInstanceUuid
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: SimplePipelineCodingKeys.self)
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.startedAt)
        {
            self.startedAt = try decoderContainer.decode(Int?.self, forKey: .startedAt)
        }
        if decoderContainer.contains(.latestStatus)
        {
            self.latestStatus = try decoderContainer.decode(String?.self, forKey: .latestStatus)
        }
        if decoderContainer.contains(.latestInstanceUuid)
        {
            self.latestInstanceUuid = try decoderContainer.decode(String?.self, forKey: .latestInstanceUuid)
        }
    }
}
public extension SimplePipeline{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: SimplePipelineCodingKeys.self)
         try encoderContainer.encode(uuid, forKey: .uuid)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(startedAt, forKey: .startedAt)
         try encoderContainer.encode(latestStatus, forKey: .latestStatus)
         try encoderContainer.encode(latestInstanceUuid, forKey: .latestInstanceUuid)
    }
}
