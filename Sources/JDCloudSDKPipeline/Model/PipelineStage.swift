/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  pipelineStage
@objc(PipelineStage)
public class PipelineStage:NSObject,Codable{
    /// 阶段(stage)的UUID
    var uuid:String?
    /// 阶段(stage)的名称
    var name:String?
    /// 阶段(stage)创建时间
    var createdAt:Int?
    /// 阶段(stage)开始时间
    var startedAt:Int?
    /// 阶段(stage)结束时间
    var doneAt:Int?
    /// 阶段(stage)当前状态
    var status:Int?
    /// 阶段(stage)当前状态说明
    var statusHuman:String?
    /// 第几个阶段(stage)
    var position:Int?
    /// Actions
    var actions:[PipelineAction?]?



    public override init(){
            super.init()
    }

    enum PipelineStageCodingKeys: String, CodingKey {
        case uuid
        case name
        case createdAt
        case startedAt
        case doneAt
        case status
        case statusHuman
        case position
        case actions
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PipelineStageCodingKeys.self)
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.name)
        {
            self.name = try decoderContainer.decode(String?.self, forKey: .name)
        }
        if decoderContainer.contains(.createdAt)
        {
            self.createdAt = try decoderContainer.decode(Int?.self, forKey: .createdAt)
        }
        if decoderContainer.contains(.startedAt)
        {
            self.startedAt = try decoderContainer.decode(Int?.self, forKey: .startedAt)
        }
        if decoderContainer.contains(.doneAt)
        {
            self.doneAt = try decoderContainer.decode(Int?.self, forKey: .doneAt)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.statusHuman)
        {
            self.statusHuman = try decoderContainer.decode(String?.self, forKey: .statusHuman)
        }
        if decoderContainer.contains(.position)
        {
            self.position = try decoderContainer.decode(Int?.self, forKey: .position)
        }
        if decoderContainer.contains(.actions)
        {
            self.actions = try decoderContainer.decode([PipelineAction?]?.self, forKey: .actions)
        }
    }
}
public extension PipelineStage{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PipelineStageCodingKeys.self)
         try encoderContainer.encode(uuid, forKey: .uuid)
         try encoderContainer.encode(name, forKey: .name)
         try encoderContainer.encode(createdAt, forKey: .createdAt)
         try encoderContainer.encode(startedAt, forKey: .startedAt)
         try encoderContainer.encode(doneAt, forKey: .doneAt)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(statusHuman, forKey: .statusHuman)
         try encoderContainer.encode(position, forKey: .position)
         try encoderContainer.encode(actions, forKey: .actions)
    }
}
