/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  pipelineInstance
@objc(PipelineInstance)
public class PipelineInstance:NSObject,Codable{
    /// 某一次流水线执行的uuid
    var uuid:String?
    /// 开始执行流水线的时间
    var startedAt:Int?
    /// 结束执行流水线的时间
    var doneAt:Int?
    /// 执行持续的时间(ms)
    var durationMs:Int?
    /// 执行状态
    var status:Int?
    /// 执行状态描述
    var statusHuman:String?
    /// 执行时环境变量
    var env:String?
    /// 失败原因
    var failureReason:Int?
    /// 失败原因描述
    var falseilureReasonHuman:String?
    /// Stages
    var stages:[PipelineStage?]?



    public override init(){
            super.init()
    }

    enum PipelineInstanceCodingKeys: String, CodingKey {
        case uuid
        case startedAt
        case doneAt
        case durationMs
        case status
        case statusHuman
        case env
        case failureReason
        case falseilureReasonHuman
        case stages
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: PipelineInstanceCodingKeys.self)
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.startedAt)
        {
            self.startedAt = try decoderContainer.decode(Int?.self, forKey: .startedAt)
        }
        if decoderContainer.contains(.doneAt)
        {
            self.doneAt = try decoderContainer.decode(Int?.self, forKey: .doneAt)
        }
        if decoderContainer.contains(.durationMs)
        {
            self.durationMs = try decoderContainer.decode(Int?.self, forKey: .durationMs)
        }
        if decoderContainer.contains(.status)
        {
            self.status = try decoderContainer.decode(Int?.self, forKey: .status)
        }
        if decoderContainer.contains(.statusHuman)
        {
            self.statusHuman = try decoderContainer.decode(String?.self, forKey: .statusHuman)
        }
        if decoderContainer.contains(.env)
        {
            self.env = try decoderContainer.decode(String?.self, forKey: .env)
        }
        if decoderContainer.contains(.failureReason)
        {
            self.failureReason = try decoderContainer.decode(Int?.self, forKey: .failureReason)
        }
        if decoderContainer.contains(.falseilureReasonHuman)
        {
            self.falseilureReasonHuman = try decoderContainer.decode(String?.self, forKey: .falseilureReasonHuman)
        }
        if decoderContainer.contains(.stages)
        {
            self.stages = try decoderContainer.decode([PipelineStage?]?.self, forKey: .stages)
        }
    }
}
public extension PipelineInstance{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: PipelineInstanceCodingKeys.self)
         try encoderContainer.encode(uuid, forKey: .uuid)
         try encoderContainer.encode(startedAt, forKey: .startedAt)
         try encoderContainer.encode(doneAt, forKey: .doneAt)
         try encoderContainer.encode(durationMs, forKey: .durationMs)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(statusHuman, forKey: .statusHuman)
         try encoderContainer.encode(env, forKey: .env)
         try encoderContainer.encode(failureReason, forKey: .failureReason)
         try encoderContainer.encode(falseilureReasonHuman, forKey: .falseilureReasonHuman)
         try encoderContainer.encode(stages, forKey: .stages)
    }
}
