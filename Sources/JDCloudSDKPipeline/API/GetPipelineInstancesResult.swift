/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   pipelineInstance
   API OF Pipeline Create|Update|Read|Delete|Execute

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询流水线执行历史列表
@objc(GetPipelineInstancesResult)
public class GetPipelineInstancesResult:NSObject,JdCloudResult
{
    /// TotalCount
    var totalCount:Int?

    /// Instances
    var instances:[PipelineInstance?]?



    public override init(){
        super.init()
    }

    enum GetPipelineInstancesResultCodingKeys: String, CodingKey {
        case totalCount
        case instances
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPipelineInstancesResultCodingKeys.self)
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.instances)
        {
            self.instances = try decoderContainer.decode([PipelineInstance?]?.self, forKey: .instances)
        }
    }
}
public extension GetPipelineInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelineInstancesResultCodingKeys.self)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(instances, forKey: .instances)
    }
}
