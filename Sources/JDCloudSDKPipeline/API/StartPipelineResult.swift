/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   pipeline
   API OF Pipeline Create|Update|Read|Delete|Execute

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 根据uuid启动一个流水线任务
@objc(StartPipelineResult)
public class StartPipelineResult:NSObject,JdCloudResult
{
    /// 本次执行生成的实例的uuid
    var instanceUuid:String?

    /// 提交运行的流水线uuid
    var uuid:String?

    /// 提交任务是否成功
    var result:Bool?



    public override init(){
        super.init()
    }

    enum StartPipelineResultCodingKeys: String, CodingKey {
        case instanceUuid
        case uuid
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartPipelineResultCodingKeys.self)
        if decoderContainer.contains(.instanceUuid)
        {
            self.instanceUuid = try decoderContainer.decode(String?.self, forKey: .instanceUuid)
        }
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.result)
        {
            self.result = try decoderContainer.decode(Bool?.self, forKey: .result)
        }
    }
}
public extension StartPipelineResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartPipelineResultCodingKeys.self)
        try encoderContainer.encode(instanceUuid, forKey: .instanceUuid)
        try encoderContainer.encode(uuid, forKey: .uuid)
        try encoderContainer.encode(result, forKey: .result)
    }
}
