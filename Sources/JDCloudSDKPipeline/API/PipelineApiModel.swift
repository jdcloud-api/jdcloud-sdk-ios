/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   pipeline
   API OF Pipeline Create|Update|Read|Delete|Execute

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore
    import JDCloudSDKCommon


///  获取可选的源提供商
public class GetSourceProvidersRequest:JdCloudRequest
{
}

public class GetOperationProvidersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetOperationProvidersResult?;

    enum GetOperationProvidersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetOperationProvidersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetOperationProvidersResult?.self, forKey: .result) ?? nil
    }
}

public extension GetOperationProvidersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetOperationProvidersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 获取可选的源提供商 
public class GetSourceProvidersResult:NSObject,JdCloudResult
{
    /// 记录数
    var totalCount:Int?

    /// 源提供商列表
    var providers:[NameLabelPair?]?



    public override init(){
        super.init()
    }

    enum GetSourceProvidersResultCodingKeys: String, CodingKey {
        case totalCount
        case providers
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetSourceProvidersResultCodingKeys.self)
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.providers)
        {
            self.providers = try decoderContainer.decode([NameLabelPair?]?.self, forKey: .providers)
        }
    }
}
public extension GetSourceProvidersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSourceProvidersResultCodingKeys.self)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(providers, forKey: .providers)
    }
}
public class GetRegionsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetRegionsResult?;

    enum GetRegionsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRegionsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetRegionsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetRegionsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRegionsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 操作提供商 
public class GetOperationProvidersResult:NSObject,JdCloudResult
{
    /// 记录数
    var totalCount:Int?

    /// 操作提供商列表
    var providers:[NameLabelPair?]?



    public override init(){
        super.init()
    }

    enum GetOperationProvidersResultCodingKeys: String, CodingKey {
        case totalCount
        case providers
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetOperationProvidersResultCodingKeys.self)
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.providers)
        {
            self.providers = try decoderContainer.decode([NameLabelPair?]?.self, forKey: .providers)
        }
    }
}
public extension GetOperationProvidersResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetOperationProvidersResultCodingKeys.self)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(providers, forKey: .providers)
    }
}

///  操作提供商
public class GetOperationProvidersRequest:JdCloudRequest
{
    /// 源提供商类型
    var type:String?




    enum GetOperationProvidersRequestRequestCodingKeys: String, CodingKey {
        case type
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetOperationProvidersRequestRequestCodingKeys.self)
        try encoderContainer.encode(type, forKey: .type)

    }
}

public class GetSourceProvidersResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetSourceProvidersResult?;

    enum GetSourceProvidersResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetSourceProvidersResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetSourceProvidersResult?.self, forKey: .result) ?? nil
    }
}

public extension GetSourceProvidersResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetSourceProvidersResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  可选地域
public class GetRegionsRequest:JdCloudRequest
{
    /// 源提供商类型
    var type:String?




    enum GetRegionsRequestRequestCodingKeys: String, CodingKey {
        case type
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRegionsRequestRequestCodingKeys.self)
        try encoderContainer.encode(type, forKey: .type)

    }
}

/// 可选地域 
public class GetRegionsResult:NSObject,JdCloudResult
{
    /// 可选地域总数
    var totalCount:Int?

    /// 可选地域列表
    var regions:[NameLabelPair?]?



    public override init(){
        super.init()
    }

    enum GetRegionsResultCodingKeys: String, CodingKey {
        case totalCount
        case regions
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetRegionsResultCodingKeys.self)
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.regions)
        {
            self.regions = try decoderContainer.decode([NameLabelPair?]?.self, forKey: .regions)
        }
    }
}
public extension GetRegionsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetRegionsResultCodingKeys.self)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(regions, forKey: .regions)
    }
}
/// 查询多个指定流水线执行及状态信息
      ///       ///  
public class ManualActionResult:NSObject,JdCloudResult
{
    /// InstanceUuid
    var instanceUuid:String?

    /// ActionUuid
    var actionUuid:String?



    public override init(){
        super.init()
    }

    enum ManualActionResultCodingKeys: String, CodingKey {
        case instanceUuid
        case actionUuid
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ManualActionResultCodingKeys.self)
        if decoderContainer.contains(.instanceUuid)
        {
            self.instanceUuid = try decoderContainer.decode(String?.self, forKey: .instanceUuid)
        }
        if decoderContainer.contains(.actionUuid)
        {
            self.actionUuid = try decoderContainer.decode(String?.self, forKey: .actionUuid)
        }
    }
}
public extension ManualActionResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ManualActionResultCodingKeys.self)
        try encoderContainer.encode(instanceUuid, forKey: .instanceUuid)
        try encoderContainer.encode(actionUuid, forKey: .actionUuid)
    }
}

///  查询多个指定流水线执行及状态信息
      ///       /// 
public class ManualActionRequest:JdCloudRequest
{
    /// 手动设置的状态，如SUCCESS,FAILED
    var status:String

    /// 流水线uuid
    var uuid:String

    /// 流水线实例uuid
    var instanceUuid:String

    /// 动作UUID
    var actionUuid:String


    public init(regionId: String,status:String,uuid:String,instanceUuid:String,actionUuid:String){
        self.status = status
        self.uuid = uuid
        self.instanceUuid = instanceUuid
        self.actionUuid = actionUuid
        super.init(regionId: regionId)
    }


    enum ManualActionRequestRequestCodingKeys: String, CodingKey {
        case status
        case uuid
        case instanceUuid
        case actionUuid
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ManualActionRequestRequestCodingKeys.self)
        try encoderContainer.encode(status, forKey: .status)
        try encoderContainer.encode(uuid, forKey: .uuid)
        try encoderContainer.encode(instanceUuid, forKey: .instanceUuid)
        try encoderContainer.encode(actionUuid, forKey: .actionUuid)

    }
}

public class ManualActionResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ManualActionResult?;

    enum ManualActionResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ManualActionResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ManualActionResult?.self, forKey: .result) ?? nil
    }
}

public extension ManualActionResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ManualActionResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 停止流水线的一次执行 
public class StopPipelineInstanceResult:NSObject,JdCloudResult
{
    /// InstanceUuid
    var instanceUuid:String?

    /// ActionUuid
    var actionUuid:String?



    public override init(){
        super.init()
    }

    enum StopPipelineInstanceResultCodingKeys: String, CodingKey {
        case instanceUuid
        case actionUuid
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopPipelineInstanceResultCodingKeys.self)
        if decoderContainer.contains(.instanceUuid)
        {
            self.instanceUuid = try decoderContainer.decode(String?.self, forKey: .instanceUuid)
        }
        if decoderContainer.contains(.actionUuid)
        {
            self.actionUuid = try decoderContainer.decode(String?.self, forKey: .actionUuid)
        }
    }
}
public extension StopPipelineInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopPipelineInstanceResultCodingKeys.self)
        try encoderContainer.encode(instanceUuid, forKey: .instanceUuid)
        try encoderContainer.encode(actionUuid, forKey: .actionUuid)
    }
}
public class GetPipelineInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetPipelineInstanceResult?;

    enum GetPipelineInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPipelineInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetPipelineInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension GetPipelineInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelineInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetPipelineInstancesByUuidsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetPipelineInstancesByUuidsResult?;

    enum GetPipelineInstancesByUuidsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPipelineInstancesByUuidsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetPipelineInstancesByUuidsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetPipelineInstancesByUuidsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelineInstancesByUuidsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetPipelineInstancesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetPipelineInstancesResult?;

    enum GetPipelineInstancesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPipelineInstancesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetPipelineInstancesResult?.self, forKey: .result) ?? nil
    }
}

public extension GetPipelineInstancesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelineInstancesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据条件查询流水线执行历史
      ///       ///  
public class GetPipelineInstancesByUuidsResult:NSObject,JdCloudResult
{
    /// PipelineInstances
    var pipelineInstances:[PipelineInstance?]?



    public override init(){
        super.init()
    }

    enum GetPipelineInstancesByUuidsResultCodingKeys: String, CodingKey {
        case pipelineInstances
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPipelineInstancesByUuidsResultCodingKeys.self)
        if decoderContainer.contains(.pipelineInstances)
        {
            self.pipelineInstances = try decoderContainer.decode([PipelineInstance?]?.self, forKey: .pipelineInstances)
        }
    }
}
public extension GetPipelineInstancesByUuidsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelineInstancesByUuidsResultCodingKeys.self)
        try encoderContainer.encode(pipelineInstances, forKey: .pipelineInstances)
    }
}

///  查询流水线执行结果及状态信息
public class GetPipelineInstanceRequest:JdCloudRequest
{
    /// 流水线执行的状态，如果isSimple是true，只显示每个stage的状态, 而stage中的action状态将被忽略
    var isSimple:Bool?

    /// 流水线uuid
    var uuid:String

    /// 流水线uuid执行历史记录的uuid, 也可以用 latest 字符串代替uuid, 来取得最近的状态
    var instanceUuid:String


    public init(regionId: String,uuid:String,instanceUuid:String){
        self.uuid = uuid
        self.instanceUuid = instanceUuid
        super.init(regionId: regionId)
    }


    enum GetPipelineInstanceRequestRequestCodingKeys: String, CodingKey {
        case isSimple
        case uuid
        case instanceUuid
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelineInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(isSimple, forKey: .isSimple)
        try encoderContainer.encode(uuid, forKey: .uuid)
        try encoderContainer.encode(instanceUuid, forKey: .instanceUuid)

    }
}

/// 查询流水线执行历史列表 
public class GetPipelineInstancesResult:NSObject,JdCloudResult
{
    /// TotalCount
    var totalCount:Int?

    /// Instances
    var instances:[PipelineInstance?]?



    public override init(){
        super.init()
    }

    enum GetPipelineInstancesResultCodingKeys: String, CodingKey {
        case totalCount
        case instances
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPipelineInstancesResultCodingKeys.self)
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.instances)
        {
            self.instances = try decoderContainer.decode([PipelineInstance?]?.self, forKey: .instances)
        }
    }
}
public extension GetPipelineInstancesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelineInstancesResultCodingKeys.self)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(instances, forKey: .instances)
    }
}
/// 查询流水线执行结果及状态信息 
public class GetPipelineInstanceResult:NSObject,JdCloudResult
{
    /// PipelineInstance
    var pipelineInstance:PipelineInstance?



    public override init(){
        super.init()
    }

    enum GetPipelineInstanceResultCodingKeys: String, CodingKey {
        case pipelineInstance
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPipelineInstanceResultCodingKeys.self)
        if decoderContainer.contains(.pipelineInstance)
        {
            self.pipelineInstance = try decoderContainer.decode(PipelineInstance?.self, forKey: .pipelineInstance)
        }
    }
}
public extension GetPipelineInstanceResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelineInstanceResultCodingKeys.self)
        try encoderContainer.encode(pipelineInstance, forKey: .pipelineInstance)
    }
}
public class StopPipelineInstanceResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StopPipelineInstanceResult?;

    enum StopPipelineInstanceResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StopPipelineInstanceResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StopPipelineInstanceResult?.self, forKey: .result) ?? nil
    }
}

public extension StopPipelineInstanceResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopPipelineInstanceResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询流水线执行历史列表
public class GetPipelineInstancesRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// 流水线uuid
    var uuid:String


    public init(regionId: String,uuid:String){
        self.uuid = uuid
        super.init(regionId: regionId)
    }


    enum GetPipelineInstancesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case uuid
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelineInstancesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(uuid, forKey: .uuid)

    }
}


///  根据条件查询流水线执行历史
      ///       /// 
public class GetPipelineInstancesByUuidsRequest:JdCloudRequest
{
    /// 流水线执行实例ID，多个ID用逗号分隔
    var uuids:String

    /// 流水线执行的状态，如果isSimple是true，只显示每个stage的状态, 而stage中的action状态将被忽略
    var isSimple:Bool?

    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// Sorts
    var sorts:[Sort?]?

    /// 根据流水线名称查询
    var filters:[Filter?]?


    public init(regionId: String,uuids:String){
        self.uuids = uuids
        super.init(regionId: regionId)
    }


    enum GetPipelineInstancesByUuidsRequestRequestCodingKeys: String, CodingKey {
        case uuids
        case isSimple
        case pageNumber
        case pageSize
        case sorts
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelineInstancesByUuidsRequestRequestCodingKeys.self)
        try encoderContainer.encode(uuids, forKey: .uuids)
        try encoderContainer.encode(isSimple, forKey: .isSimple)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(sorts, forKey: .sorts)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}


///  停止流水线的一次执行
public class StopPipelineInstanceRequest:JdCloudRequest
{
    /// 流水线uuid
    var uuid:String

    /// 流水线执行的uuid
    var instanceUuid:String


    public init(regionId: String,uuid:String,instanceUuid:String){
        self.uuid = uuid
        self.instanceUuid = instanceUuid
        super.init(regionId: regionId)
    }


    enum StopPipelineInstanceRequestRequestCodingKeys: String, CodingKey {
        case uuid
        case instanceUuid
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StopPipelineInstanceRequestRequestCodingKeys.self)
        try encoderContainer.encode(uuid, forKey: .uuid)
        try encoderContainer.encode(instanceUuid, forKey: .instanceUuid)

    }
}

public class ReadFileResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:ReadFileResult?;

    enum ReadFileResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReadFileResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(ReadFileResult?.self, forKey: .result) ?? nil
    }
}

public extension ReadFileResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReadFileResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  上传文件，返回文件内容
public class ReadFileRequest:JdCloudRequest
{
}

/// 上传文件，返回文件内容 
public class ReadFileResult:NSObject,JdCloudResult
{
    /// Result
    var result:Bool?

    /// Contents
    var contents:String?



    public override init(){
        super.init()
    }

    enum ReadFileResultCodingKeys: String, CodingKey {
        case result
        case contents
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ReadFileResultCodingKeys.self)
        if decoderContainer.contains(.result)
        {
            self.result = try decoderContainer.decode(Bool?.self, forKey: .result)
        }
        if decoderContainer.contains(.contents)
        {
            self.contents = try decoderContainer.decode(String?.self, forKey: .contents)
        }
    }
}
public extension ReadFileResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ReadFileResultCodingKeys.self)
        try encoderContainer.encode(result, forKey: .result)
        try encoderContainer.encode(contents, forKey: .contents)
    }
}
public class GetLimitsResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetLimitsResult?;

    enum GetLimitsResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetLimitsResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetLimitsResult?.self, forKey: .result) ?? nil
    }
}

public extension GetLimitsResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetLimitsResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  查询用户限制
public class GetLimitsRequest:JdCloudRequest
{
}

/// 查询用户限制 
public class GetLimitsResult:NSObject,JdCloudResult
{
    /// 流水线数量限制
    var numberLimit:Int?

    /// 是否可以创建
    var canCreate:Bool?



    public override init(){
        super.init()
    }

    enum GetLimitsResultCodingKeys: String, CodingKey {
        case numberLimit
        case canCreate
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetLimitsResultCodingKeys.self)
        if decoderContainer.contains(.numberLimit)
        {
            self.numberLimit = try decoderContainer.decode(Int?.self, forKey: .numberLimit)
        }
        if decoderContainer.contains(.canCreate)
        {
            self.canCreate = try decoderContainer.decode(Bool?.self, forKey: .canCreate)
        }
    }
}
public extension GetLimitsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetLimitsResultCodingKeys.self)
        try encoderContainer.encode(numberLimit, forKey: .numberLimit)
        try encoderContainer.encode(canCreate, forKey: .canCreate)
    }
}
/// 删除一个流水线任务 
public class DeletePipelineResult:NSObject,JdCloudResult
{
    /// 流水线任务uuid
    var uuid:String?

    /// 删除成功则是true
    var result:Bool?



    public override init(){
        super.init()
    }

    enum DeletePipelineResultCodingKeys: String, CodingKey {
        case uuid
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeletePipelineResultCodingKeys.self)
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.result)
        {
            self.result = try decoderContainer.decode(Bool?.self, forKey: .result)
        }
    }
}
public extension DeletePipelineResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeletePipelineResultCodingKeys.self)
        try encoderContainer.encode(uuid, forKey: .uuid)
        try encoderContainer.encode(result, forKey: .result)
    }
}

///  根据uuid启动一个流水线任务
public class StartPipelineRequest:JdCloudRequest
{
    /// 流水线uuid
    var uuid:String


    public init(regionId: String,uuid:String){
        self.uuid = uuid
        super.init(regionId: regionId)
    }


    enum StartPipelineRequestRequestCodingKeys: String, CodingKey {
        case uuid
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartPipelineRequestRequestCodingKeys.self)
        try encoderContainer.encode(uuid, forKey: .uuid)

    }
}

public class StartPipelineResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:StartPipelineResult?;

    enum StartPipelineResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartPipelineResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(StartPipelineResult?.self, forKey: .result) ?? nil
    }
}

public extension StartPipelineResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartPipelineResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 根据uuid获取流水线任务的配置信息 
public class GetPipelineResult:NSObject,JdCloudResult
{
    /// Pipeline
    var pipeline:Pipeline?



    public override init(){
        super.init()
    }

    enum GetPipelineResultCodingKeys: String, CodingKey {
        case pipeline
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPipelineResultCodingKeys.self)
        if decoderContainer.contains(.pipeline)
        {
            self.pipeline = try decoderContainer.decode(Pipeline?.self, forKey: .pipeline)
        }
    }
}
public extension GetPipelineResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelineResultCodingKeys.self)
        try encoderContainer.encode(pipeline, forKey: .pipeline)
    }
}
/// 更新流水线任务 
public class UpdatePipelineResult:NSObject,JdCloudResult
{
    /// 流水线任务uuid
    var uuid:String?

    /// 更新成功则是true
    var result:Bool?



    public override init(){
        super.init()
    }

    enum UpdatePipelineResultCodingKeys: String, CodingKey {
        case uuid
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdatePipelineResultCodingKeys.self)
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.result)
        {
            self.result = try decoderContainer.decode(Bool?.self, forKey: .result)
        }
    }
}
public extension UpdatePipelineResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdatePipelineResultCodingKeys.self)
        try encoderContainer.encode(uuid, forKey: .uuid)
        try encoderContainer.encode(result, forKey: .result)
    }
}
/// 根据uuid启动一个流水线任务 
public class StartPipelineResult:NSObject,JdCloudResult
{
    /// 本次执行生成的实例的uuid
    var instanceUuid:String?

    /// 提交运行的流水线uuid
    var uuid:String?

    /// 提交任务是否成功
    var result:Bool?



    public override init(){
        super.init()
    }

    enum StartPipelineResultCodingKeys: String, CodingKey {
        case instanceUuid
        case uuid
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StartPipelineResultCodingKeys.self)
        if decoderContainer.contains(.instanceUuid)
        {
            self.instanceUuid = try decoderContainer.decode(String?.self, forKey: .instanceUuid)
        }
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.result)
        {
            self.result = try decoderContainer.decode(Bool?.self, forKey: .result)
        }
    }
}
public extension StartPipelineResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StartPipelineResultCodingKeys.self)
        try encoderContainer.encode(instanceUuid, forKey: .instanceUuid)
        try encoderContainer.encode(uuid, forKey: .uuid)
        try encoderContainer.encode(result, forKey: .result)
    }
}
public class UpdatePipelineResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:UpdatePipelineResult?;

    enum UpdatePipelineResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: UpdatePipelineResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(UpdatePipelineResult?.self, forKey: .result) ?? nil
    }
}

public extension UpdatePipelineResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdatePipelineResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetPipelinesResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetPipelinesResult?;

    enum GetPipelinesResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPipelinesResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetPipelinesResult?.self, forKey: .result) ?? nil
    }
}

public extension GetPipelinesResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelinesResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
/// 查询获取流水线任务列表，并显示最后一次执行的状态或结果信息
      ///       /// /v1/regions/cn-south-1?sorts.1.name&#x3D;startedAt&amp;sorts.1.direction&#x3D;desc&amp;pageNumber&#x3D;1&amp;pageSize&#x3D;10&amp;filters.1.name&#x3D;name&amp;filters.1.values.1&#x3D;我的pipeline
      ///       ///  
public class GetPipelinesResult:NSObject,JdCloudResult
{
    /// TotalCount
    var totalCount:Int?

    /// Pipelines
    var pipelines:[SimplePipeline?]?



    public override init(){
        super.init()
    }

    enum GetPipelinesResultCodingKeys: String, CodingKey {
        case totalCount
        case pipelines
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPipelinesResultCodingKeys.self)
        if decoderContainer.contains(.totalCount)
        {
            self.totalCount = try decoderContainer.decode(Int?.self, forKey: .totalCount)
        }
        if decoderContainer.contains(.pipelines)
        {
            self.pipelines = try decoderContainer.decode([SimplePipeline?]?.self, forKey: .pipelines)
        }
    }
}
public extension GetPipelinesResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelinesResultCodingKeys.self)
        try encoderContainer.encode(totalCount, forKey: .totalCount)
        try encoderContainer.encode(pipelines, forKey: .pipelines)
    }
}
public class DeletePipelineResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:DeletePipelineResult?;

    enum DeletePipelineResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: DeletePipelineResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(DeletePipelineResult?.self, forKey: .result) ?? nil
    }
}

public extension DeletePipelineResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeletePipelineResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  根据uuid获取流水线任务的配置信息
public class GetPipelineRequest:JdCloudRequest
{
    /// 流水线 uuid
    var uuid:String


    public init(regionId: String,uuid:String){
        self.uuid = uuid
        super.init(regionId: regionId)
    }


    enum GetPipelineRequestRequestCodingKeys: String, CodingKey {
        case uuid
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelineRequestRequestCodingKeys.self)
        try encoderContainer.encode(uuid, forKey: .uuid)

    }
}


///  新建流水线任务
public class CreatePipelineRequest:JdCloudRequest
{
    /// Data
    var data:PipelineParams?




    enum CreatePipelineRequestRequestCodingKeys: String, CodingKey {
        case data
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreatePipelineRequestRequestCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)

    }
}


///  删除一个流水线任务
public class DeletePipelineRequest:JdCloudRequest
{
    /// 流水线任务uuid
    var uuid:String


    public init(regionId: String,uuid:String){
        self.uuid = uuid
        super.init(regionId: regionId)
    }


    enum DeletePipelineRequestRequestCodingKeys: String, CodingKey {
        case uuid
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: DeletePipelineRequestRequestCodingKeys.self)
        try encoderContainer.encode(uuid, forKey: .uuid)

    }
}

public class CreatePipelineResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:CreatePipelineResult?;

    enum CreatePipelineResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreatePipelineResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(CreatePipelineResult?.self, forKey: .result) ?? nil
    }
}

public extension CreatePipelineResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreatePipelineResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    
public class GetPipelineResponse:NSObject,Codable
{
    var requestId:String?;

    var error:ServiceError?;

    var result:GetPipelineResult?;

    enum GetPipelineResponseCodingKeys: String, CodingKey {
        case requestId
        case error
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetPipelineResponseCodingKeys.self)
        self.requestId = try decoderContainer.decodeIfPresent(String?.self, forKey: .requestId) ?? nil
        self.error = try decoderContainer.decodeIfPresent(ServiceError?.self, forKey: .error) ?? nil
        self.result = try decoderContainer.decodeIfPresent(GetPipelineResult?.self, forKey: .result) ?? nil
    }
}

public extension GetPipelineResponse{
        func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelineResponseCodingKeys.self)
        try encoderContainer.encode(requestId, forKey: .requestId)
        try encoderContainer.encode(error, forKey: .error)
        try encoderContainer.encode(result, forKey: .result)
    }
}    

///  更新流水线任务
public class UpdatePipelineRequest:JdCloudRequest
{
    /// Data
    var data:PipelineParams?

    /// 流水线任务 uuid
    var uuid:String


    public init(regionId: String,uuid:String){
        self.uuid = uuid
        super.init(regionId: regionId)
    }


    enum UpdatePipelineRequestRequestCodingKeys: String, CodingKey {
        case data
        case uuid
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: UpdatePipelineRequestRequestCodingKeys.self)
        try encoderContainer.encode(data, forKey: .data)
        try encoderContainer.encode(uuid, forKey: .uuid)

    }
}


///  查询获取流水线任务列表，并显示最后一次执行的状态或结果信息
      ///       /// /v1/regions/cn-south-1?sorts.1.name&#x3D;startedAt&amp;sorts.1.direction&#x3D;desc&amp;pageNumber&#x3D;1&amp;pageSize&#x3D;10&amp;filters.1.name&#x3D;name&amp;filters.1.values.1&#x3D;我的pipeline
      ///       /// 
public class GetPipelinesRequest:JdCloudRequest
{
    /// 页码；默认为1
    var pageNumber:Int?

    /// 分页大小；默认为10；取值范围[10, 100]
    var pageSize:Int?

    /// Sorts
    var sorts:[Sort?]?

    /// 根据流水线名称查询
    var filters:[Filter?]?




    enum GetPipelinesRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case sorts
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetPipelinesRequestRequestCodingKeys.self)
        try encoderContainer.encode(pageNumber, forKey: .pageNumber)
        try encoderContainer.encode(pageSize, forKey: .pageSize)
        try encoderContainer.encode(sorts, forKey: .sorts)
        try encoderContainer.encode(filters, forKey: .filters)

    }
}

/// 新建流水线任务 
public class CreatePipelineResult:NSObject,JdCloudResult
{
    /// 流水线任务uuid
    var uuid:String?

    /// 创建成功则是true
    var result:Bool?



    public override init(){
        super.init()
    }

    enum CreatePipelineResultCodingKeys: String, CodingKey {
        case uuid
        case result
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CreatePipelineResultCodingKeys.self)
        if decoderContainer.contains(.uuid)
        {
            self.uuid = try decoderContainer.decode(String?.self, forKey: .uuid)
        }
        if decoderContainer.contains(.result)
        {
            self.result = try decoderContainer.decode(Bool?.self, forKey: .result)
        }
    }
}
public extension CreatePipelineResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CreatePipelineResultCodingKeys.self)
        try encoderContainer.encode(uuid, forKey: .uuid)
        try encoderContainer.encode(result, forKey: .result)
    }
}
