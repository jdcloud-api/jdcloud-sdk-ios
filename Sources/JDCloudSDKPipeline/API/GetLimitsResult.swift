/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Limits
   The api for user limits

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询用户限制
@objc(GetLimitsResult)
public class GetLimitsResult:NSObject,JdCloudResult
{
    /// 流水线数量限制
    var numberLimit:Int?

    /// 是否可以创建
    var canCreate:Bool?



    public override init(){
        super.init()
    }

    enum GetLimitsResultCodingKeys: String, CodingKey {
        case numberLimit
        case canCreate
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: GetLimitsResultCodingKeys.self)
        if decoderContainer.contains(.numberLimit)
        {
            self.numberLimit = try decoderContainer.decode(Int?.self, forKey: .numberLimit)
        }
        if decoderContainer.contains(.canCreate)
        {
            self.canCreate = try decoderContainer.decode(Bool?.self, forKey: .canCreate)
        }
    }
}
public extension GetLimitsResult{
    func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: GetLimitsResultCodingKeys.self)
        try encoderContainer.encode(numberLimit, forKey: .numberLimit)
        try encoderContainer.encode(canCreate, forKey: .canCreate)
    }
}
